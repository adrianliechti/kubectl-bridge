{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager/src/components/install-plan.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/clusterserviceversion.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/subscription.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operand/index.tsx","webpack:///./public/components/modals/configure-update-strategy-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-install-page.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-subscribe.tsx","webpack:///./packages/operator-lifecycle-manager-v1/src/contexts/ExtensionCatalogDatabaseContext.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/components/ExtensionCatalog.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/deprecated-operator-warnings/deprecated-operator-warnings.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/types.ts","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/utils.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/cluster-service-version-logo.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operand/operand-link.tsx","webpack:///./packages/operator-lifecycle-manager/src/operator.svg","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/const.ts","webpack:///./public/components/checkbox.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/uninstall-operator-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/resource-requirements.tsx","webpack:///./packages/operator-lifecycle-manager/src/utils/clusterserviceversions.ts","webpack:///./packages/operator-lifecycle-manager/src/utils/useClusterServiceVersion.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-preview-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/deprecated-operator-warnings/use-deprecated-operator-warnings.ts","webpack:///./packages/console-shared/src/hooks/useOperands.ts","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-approval-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/subscription-channel-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/common.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operand/useShowOperandsInAllNamespaces.ts","webpack:///./packages/console-shared/src/hooks/useResourceListPages.tsx","webpack:///./packages/console-shared/src/hooks/redux-selectors.ts","webpack:///./packages/operator-lifecycle-manager/src/utils/useClusterServiceVersionPath.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/k8s-resource.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-channel-version-select.tsx","webpack:///./packages/operator-lifecycle-manager-v1/src/database/indexeddb.ts","webpack:///./packages/console-shared/src/hooks/useResourceDetailsPage.ts","webpack:///./packages/console-shared/src/hooks/useResourceDetailsPages.tsx","webpack:///./packages/console-shared/src/hooks/useResourceListPage.ts","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/index.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/index.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/configure-size.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/configure-update-strategy.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/update-strategy-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/endpoint.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/status/index.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/status/phase.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/status/pods.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/status/conditions.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operand/ShowOperandsInAllNamespacesRadioGroup.tsx","webpack:///./packages/operator-lifecycle-manager/src/utils/console-plugin-form-group.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-items.tsx","webpack:///./public/components/utils/tile-view-page.jsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-community-provider-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-item-details.tsx","webpack:///./packages/operator-lifecycle-manager-v1/src/hooks/useExtensionCatalogItems.ts"],"names":["tableColumnClasses","columnClass","componentsTableColumnClasses","InstallPlanTableRow","obj","t","className","kind","namespace","metadata","name","phase","status","spec","clusterServiceVersionNames","map","csvName","key","title","ownerReferences","filter","ref","uid","actions","factory","common","resource","EmptyMsg","InstallPlansList","props","Header","sortField","transforms","Row","InstallPlansPage","params","ns","resources","namespaced","prop","flatten","installPlan","showTitle","ListComponent","updateUser","isOpenShift","user","username","NeedInstallPlanPermissions","OPENSHIFT","setUsername","apiGroup","variant","isInline","InstallPlanDetails","needsApproval","approval","Manual","approved","canPatchInstallPlans","group","plural","verb","to","text","showAnnotations","plan","accumulator","sourceName","sourceNamespace","add","toJS","getCatalogSources","conditions","InstallPlanPreview","hideApprovalBlock","setNeedsApproval","subscription","find","stepsByCSV","reduce","acc","step","update","resolving","steps","concat","toArray","length","isDisabled","onClick","op","path","value","then","catch","error","toString","push","includes","type","stepResource","InstallPlanDetailsPage","pages","details","editYaml","href","nameKey","component","menuActions","getExtensionsActionsForKind","displayName","isCSV","managedNamespacesColumnClass","statusColumnClass","lastUpdatedColumnClass","providedAPIsColumnClass","editSubscription","sub","labelKey","uninstall","csv","callback","k8sKill","k8sGet","k8sPatch","blocking","accessReview","menuActionsForCSV","Delete","SubscriptionStatus","muted","subscriptionStatus","ClusterServiceVersionStatus","deletionTimestamp","CSVPhaseDeleting","ManagedNamespaces","managedNamespaces","split","message","headerContent","bodyContent","count","ConsolePlugins","csvPlugins","trusted","console","isList","consoleOperatorConfig","canPatchConsoleOperatorConfig","csvPluginsCount","pluginName","ConsolePluginStatus","aPluginIsDisabled","plugins","some","plugin","ClusterServiceVersionTableRow","activeNamespace","catalogSourceMissing","provider","version","olmOperatorNamespace","icon","route","providedAPIs","annotations","deprecatedPackage","deprecation","timestamp","lastUpdateTime","desc","numAPIs","SubscriptionTableRow","Edit","lastUpdated","InstalledOperatorTableRow","customData","catalogSources","subscriptions","isPackageServer","CSVListEmptyMsg","CSVListNoDataEmptyMsg","project","noOperatorsInSingleNamespaceMessage","noOperatorsInAllNamespacesMessage","detail","ClusterServiceVersionList","data","rest","nameHeader","namespaceHeader","sortFunc","managedNamespacesHeader","statusHeader","lastUpdatedHeader","providedAPIsHeader","kebabHeader","allNamespaceActive","catalogoperators","operators","operator","window","SERVER_FLAGS","copiedCSVsDisabled","filterOperators","NoDataEmptyMsg","virtualize","customSorts","formatTargetNamespaces","targetNamespaces","getOperatorNamespace","ClusterServiceVersionsPage","canListAllSubscriptions","olmURL","helpText","undefined","optional","globalClusterServiceVersions","clusterServiceVersions","_i","all","currentCSV","startingCSV","textFilter","MarkdownView","loader","c","SyncMarkdownView","CRDCard","crd","required","reference","model","canCreate","verbs","createRoute","linkTo","badgeAlt","content","description","truncateContent","CRDCardRow","InitializationResourceAlert","initializationResource","initializationResourceKind","initializationResourceReference","customResource","customResourceLoaded","canCreateCustomResource","ClusterServiceVersionDetails","marketplaceSupportWorkflow","initializationResourceJSON","JSON","parse","supportWorkflowUrl","url","URL","searchParams","set","permissions","install","deprecatedChannel","deprecatedVersion","CSVPhaseFailed","reason","CSVReasonCopied","hideIcon","inline","dismissible","creationTimestamp","source","links","link","style","display","flexDirection","additionalClassName","maintainers","maintainer","email","maxWidth","deployments","serviceAccountName","ClusterServiceVersion","CSVSubscription","subscriptionsLoaded","subscriptionsLoadError","loaded","loadError","ClusterServiceVersionDetailsPage","location","csvLoaded","csvLoadError","groupVersionKind","canListClusterScopeInstallPlans","s","installedCSV","pagesFor","events","api","pageData","breadcrumbsFor","pathname","createRedirect","catalogSourceForSubscription","installedCSVForSubscription","packageForSubscription","packageManifests","pkg","packageName","catalogSource","catalogSourceNamespace","installPlanForSubscription","installPlans","ip","installPlanRef","SourceMissingStatus","SourceUnhealthyStatus","UpgradeApprovalLink","state","SubscriptionStateUpgradeAvailable","SubscriptionStateUpgradePending","SubscriptionStateAtLatest","_kind","hidden","channel","installPlanApproval","SubscriptionsList","SubscriptionsPage","createProps","createButtonText","filterLabel","CatalogSourceHealthAlert","health","healthy","InstallFailedAlert","installStatusPhase","installFailedCondition","installFailedMessage","InstallPlanPhaseFailed","CatalogSourceStatusIconAndText","SubscriptionDetails","catalogHealth","ch","catalogSourceRef","URLSearchParams","search","has","result","SubscriptionUpdates","SubscriptionUpgradeStatus","prevInstallPlanApproval","prevChannel","waitingForUpdate","setWaitingForUpdate","current","k8sUpdateAndWait","installPlanPhase","InstallPlanPhaseRequiresApproval","manualSubscriptionsInNamespace","k8sUpdate","dataTest","Automatic","SubscriptionDetailsPage","getOperandStatus","formattedConditions","Array","isArray","trueConditions","types","join","hasAllNamespaces","olmTargetNamespaces","OperandStatus","operand","getOperandStatusText","OperandTableRow","showNamespace","context","labels","getOperandNamespace","OperandList","noAPIsFound","kindHeader","labelsHeader","apiVersion","kinds","operandStatus","listProps","ProvidedAPIsPage","showOperandsInAllNamespaces","hideLabelFilter","hideNameLabelFilters","hideColumnManagement","models","inFlight","navigate","dispatch","apiRefreshed","setAPIRefreshed","item","i","allResources","ownerRefs","items","managesAllNamespaces","listAllNamespaces","watchedResources","resourceAccumulator","getK8sWatchResources","apiMightBeOutdated","Object","keys","createItems","rowFilters","filterGroupName","reducer","id","filters","selected","staticData","filteredData","onFilterChange","values","every","r","replace","DefaultProvidedAPIPage","createPath","label","labelPlural","k8sModel","ProvidedAPIPage","resourceListPage","PodStatuses","kindObj","podStatusDescriptors","schema","statusDescriptor","descriptor","OperandDetails","errorMessage","setErrorMessage","specDescriptors","statusDescriptors","customresourcedefinitions","owned","def","versions","v","openAPIV3Schema","podStatuses","mainStatusDescriptor","conditionsStatusDescriptors","otherStatusDescriptors","descriptors","itemClassName","onError","err","DefaultOperandDetailsPage","appName","actionItems","resourceModel","DROPDOWN","customActionMenu","slice","lastIndexOf","OperandDetailsPage","resourceDetailsPage","getNumberOrPercent","indexOf","ConfigureUpdateStrategy","showDescription","onChange","e","onChangeStrategyType","target","checked","strategyType","subTitle","autoFocus","htmlFor","disabled","placeholder","size","maxUnavailable","onChangeMaxUnavailable","replicas","maxSurge","onChangeMaxSurge","ConfigureUpdateStrategyModal","setStrategyType","deployment","setMaxUnavailable","setMaxSurge","onSubmit","event","preventDefault","patch","promise","handlePromise","close","inProgress","submitText","cancel","configureUpdateStrategyModal","ViewInstalledOperatorsButton","singleNamespaceText","allNamespacesText","InstallFailedMessage","hasInitializationResource","InitializationResource","InstallNeedsApprovalMessage","subscriptionObj","installObj","approve","installObjIsInstallPlan","CreateInitializationResourceButton","button","InitializationResourceRequiredMessage","initializationResourceNamespace","InstallSucceededMessage","InstallingMessage","OperatorInstallLogo","notFound","catalogNamespace","selector","matchLabels","fieldSelector","pkgManifest","channels","currentCSVDesc","OperatorInstallStatus","targetNamespace","loading","clusterServiceVersion","installPlanName","isStatusSucceeded","isStatusFailed","isApprovalNeeded","indicator","installMessage","OperatorInstallStatusPage","installPageResources","CloudServiceTokenWarningAlert","onClose","actionClose","InputField","ariaLabel","setValue","_event","val","OperatorHubSubscribeForm","packageManifest","pkgName","roleARNText","setRoleARNText","azureTenantId","setAzureTenantId","azureClientId","setAzureClientId","azureSubscriptionId","setAzureSubscriptionId","gcpProjectNumber","setGcpProjectNumber","gcpPoolId","setGcpPoolId","gcpProviderId","setGcpProviderId","gcpServiceAcctEmail","setGcpServiceAcctEmail","setTargetNamespace","installMode","setInstallMode","tokenizedAuth","defaultChannel","updateChannelName","setUpdateChannelName","installModes","currentLatestVersion","updateVersion","setUpdateVersion","showCSTokenWarn","setShowCSTokenWarn","setApproval","cannotResolve","setCannotResolve","suggestedNamespaceExists","setSuggestedNamespaceExists","suggestedNamespaceExistsInFlight","setSuggestedNamespaceExistsInFlight","useSuggestedNSForSingleInstallMode","setUseSuggestedNSForSingleInstallMode","defaultEnableMonitoring","enableMonitoring","setEnableMonitoring","setError","enabledPlugins","setEnabledPlugins","setDeprecatedPackage","deprecatedWarning","get","selectedInstallMode","preferredInstallMode","mode","InstallModeTypeAllNamespaces","InstallModeTypeOwnNamespace","suggestedNamespace","suggestedNamespaceTemplate","suggestedNamespaceTemplateName","operatorRequestsMonitoring","globalNS","operatorGroup","og","selectedTargetNamespace","operatorSuggestedNamespace","isSuggestedNamespaceSelected","showSuggestedNamespaceDetails","labelSelector","list","singleInstallMode","m","supportsSingle","supported","globalInstallMode","supportsGlobal","navigateToInstallPage","descFor","subscriptionExists","namespaceSupports","conflictingProvidedAPIs","operatorGroups","namespaces","existingAPIs","showMonitoringCheckbox","monitoringURL","configuringMonitoring","suggestedNamespaceDetails","isChecked","installedNamespaceOptions","selectedKey","installedNamespaceSelect","globalNamespaceInstallMode","singleNamespaceInstallMode","isApprovalItemDisabled","breadcrumbs","selectedUpdateChannel","setUpdateChannel","showVersionAlert","currentValue","currentTarget","setPluginEnabled","enabled","p","gvk","defaultNS","rbacName","currentChannel","currentCSVName","entries","prometheusRole","rules","apiGroups","prometheusRoleBinding","roleRef","subjects","generateName","config","env","previousPlugins","updatedPlugins","sort","OperatorHubSubscribe","OperatorHubSubscribePage","catalog","ExtensionCatalogDatabaseContext","done","extensionCatalogItems","legacyOpertorHubItems","packages","categories","capabilities","infrastructureFeatures","keywords","longDescription","validSubscription","authentication","capabilityLevel","cloudCredentials","infraFeatures","infrastructure","installed","installState","NotInstalled","tags","imgUrl","mediatype","base64data","skeleton","DeprecatedOperatorType","findDeprecation","f","findDeprecatedOperator","PackageDeprecated","ChannelDeprecated","VersionDeprecated","DeprecatedOperatorWarningBadge","color","DeprecatedOperatorWarningIcon","DeprecatedOperatorWarningAlert","alertVisible","setAlertVisible","DescriptorType","SpecCapability","StatusCapability","CommonCapability","useCalculatedDescriptorProperties","descriptorType","propertySchema","fullPath","groupDescriptorDetails","test","beforeIndex","afterIndex","match","subgroup","nested","arrayGroupPath","isArrayGroup","elementDescriptor","handleArrayDescriptor","getPatchPathFromDescriptor","getValidCapabilitiesForDataType","compatibleCapabilities","getCompatibleCapabilities","capability","isCompatible","compatibleCapability","startsWith","deprecatedCapability","warn","a","b","aIndex","findIndex","bIndex","getValidCapabilitiesForValue","getValueType","getValidCapabilitiesForSchema","isMainStatusDescriptor","ClusterServiceVersionLogo","imgSrc","src","alt","csvNameFromWindow","part","allParts","OperandLink","classes","module","exports","REGEXP_K8S_RESOURCE_CAPABILITY","k8sResourcePrefix","REGEXP_FIELD_DEPENDENCY_CAPABILITY","fieldDependency","REGEXP_SELECT_CAPABILITY","select","REGEXP_K8S_RESOURCE_SUFFIX","RegExp","REGEXP_SELECT_OPTION","REGEXP_FIELD_DEPENDENCY_PATH_VALUE","REGEXP_ARRAY_PATH","REGEXP_NESTED_ARRAY_PATH","REGEXP_CAPTURE_GROUP_SUBGROUP","DEPRECATED_CAPABILITIES","arrayFieldGroup","fieldGroup","namespaceSelector","COMMON_COMPATIBLE_CAPABILITIES","advanced","OBJECT_COMPATIBLE_CAPABILITIES","updateStrategy","nodeAffinity","podAffinity","podAntiAffinity","resourceRequirements","ARRAY_COMPATIBLE_CAPABILITIES","endpointList","PRIMITIVE_COMPATIBLE_CAPABILITIES","k8sPhase","k8sPhaseReason","imagePullPolicy","podCount","w3Link","booleanSwitch","checkbox","password","number","CAPABILITY_SORT_ORDER","Checkbox","deleteOptions","propagationPolicy","UninstallOperatorModal","handleOperatorUninstallPromise","operatorUninstallInProgress","operatorUninstallErrorMessage","showInstructions","setShowInstructions","operatorUninstallFinished","setOperatorUninstallFinished","deleteOperands","setDeleteOperands","operandsDeleteInProgress","setOperandsDeleteInProgress","operandsRemaining","setOperandsRemaining","operandsDeleteFinished","setOperandsDeleteFinished","operandDeletionErrors","setOperandDeletionErrors","operandDeletionVerificationError","setOperandDeletionVerificationError","clusterServiceVersionExistsError","setClusterServiceVersionExistsError","removePlugins","subscriptionName","subscriptionNamespace","isSubmitInProgress","isSubmitFinished","hasSubmitErrors","optedOut","operands","operandsLoaded","operandsLoadedErrorMessage","uninstallOperator","operatorUninstallPromises","response","Promise","finishVerification","proceedToUninstallOperator","pollOperands","basePath","interval","setInterval","curOperands","clearInterval","setTimeout","closeAndRedirect","intervalID","uninstallMessage","UninstallMessage","showOperandsContent","instructions","operandsSection","OperandsLoadedErrorAlert","OperandsTable","operandDeletionAlert","OperandDeletionErrorAlert","OperandDeletionSuccessAlert","results","UninstallAlert","operandDeletionPromises","operandErrors","curr","OperandDeleteProgress","total","remaining","submitDanger","submitDisabled","progressLabel","max","valueText","lg","OperatorUninstallSuccessAlert","OperatorUninstallErrorAlert","OperandErrorList","localeCompare","operandError","createUninstallOperatorModal","ResourceRequirements","cpu","memory","storage","onChangeCPU","onChangeMemory","onChangeStorage","fontWeight","ResourceRequirementsModal","setCPU","setMemory","setStorage","newObj","submit","ResourceRequirementsModalLink","k8s","getIn","none","modal","Boolean","isCopiedCSV","isStandaloneCSV","OperatorType","useClusterServiceVersion","namespacedCSV","namespacedCSVLoaded","namespacedCSVLoadError","globalCSV","globalCSVLoaded","globalCSVLoadError","manifest","installPlanPreviewModal","useDeprecatedOperatorWarnings","UI","setDeprecatedChannel","setDeprecatedVersion","useOperands","operatorName","operatorNamespace","setOperands","setLoaded","getApprovalStrategy","createInstallPlanApprovalModal","selectedApprovalStrategy","setSelectedApprovalStrategy","updatedObj","createSubscriptionChannelModal","selectedChannel","setSelectedChannel","Invalid","DefaultCapability","K8sResourceLinkCapability","suffix","SecretCapability","reveal","setReveal","encoded","useShowOperandsInAllNamespaces","useResourceListPages","resourceListPageExtensions","dynamicResourceListPageExtensions","useActiveNamespace","useClusterServiceVersionPath","csvReference","DEFAULT_RESOURCES","ResourceTableRow","linkFor","providedAPI","ResourceTable","flattenCsvResources","parentObj","linkForCsvResource","Resources","firehoseResources","substring","OperatorChannelSelect","isChannelSelectOpen","setIsChannelSelectOpen","getChannelLabel","channelSelectOptions","toggle","toggleRef","open","isExpanded","isFullWidth","onSelect","onOpenChange","isOpen","OperatorVersionSelect","isVersionSelectOpen","setIsVersionSelectOpen","defaultVersionForChannel","setDefaultVersionForChannel","selectedUpdateVersion","selectedChannelVersions","getVersionLabel","versionSelectOptions","openDatabase","dbName","resolve","reject","request","indexedDB","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","channelStore","bundleStore","extensionCatalogStore","multiEntry","onsuccess","onerror","Error","getObjectStore","storeName","transaction","objectStore","putItem","put","getItems","getAll","getIndexedItems","index","storeIndex","keyRange","IDBKeyRange","only","cursorRequest","openCursor","objects","cursor","continue","clearObjectStores","names","clear","clearObjectStore","useResourceDetailsPage","detailsPages","useResourceDetailsPages","resourceDetailsPageExtensions","dynamicResourceDetailsPageExtensions","useResourceListPage","listPages","DescriptorDetailsItem","descriptorProps","DescriptorDetailsItemArrayGroup","groupPath","arrayGroupSchema","arrayElementDescriptors","primitiveDescriptor","String","DescriptorDetailsItemGroup","groupSchema","arrayGroups","primitives","arrayGroup","DescriptorDetailsItemList","groupedDescriptors","groupProps","commonProps","PodCount","onEdit","specDescriptor","specValue","Endpoints","endpoints","Label","NamespaceSelector","matchNames","BasicSelector","BooleanSwitch","setChecked","confirmed","setConfirmed","errorCb","labelOff","patchFor","CheckboxUIComponent","marginLeft","UpdateStrategy","SpecDescriptorDetailsItem","Component","configureSizeModal","resourceKind","defaultValue","titleKey","titleVariables","buttonTextKey","buttonTextVariables","UpdateStrategyModal","getPath","updateStrategyModal","EndpointRow","endpoint","element","field","port","EndpointList","statuses","Link","K8sPhase","K8sPhaseReason","width","MainStatus","StatusDescriptorDetailsItem","Phase","colorScale","PodStatusChart","podList","x","y","sum","dataPoint","podStatusInnerRadius","podStatusOuterRadius","constrainToVisibleArea","height","innerRadius","radius","DescriptorConditions","validateConditionsDescriptor","ShowOperandsInAllNamespacesRadioGroup","setShowOperandsInAllNamespaces","ConsolePluginFormGroup","previouslyEnabled","targetNodeOperatingSystems","nodeOperatingSystems","targetNodeOperatingSystemsLabels","os","targetNodeArchitectures","nodeArchitectures","targetNodeArchitecturesLabels","arch","Badge","operatorHubFilterGroups","ignoredProviderTails","determineCategories","newCategories","category","sortedKeys","key1","key2","toLowerCase","providerSort","sourceSort","RedHatOperators","CertifiedOperators","CommunityOperators","RedHatMarketplace","installedStateSort","Installed","capabilityLevelSort","BasicInstall","SeamlessUpgrades","FullLifecycle","DeepInsights","infraFeaturesSort","Disconnected","ProxyAware","FIPSMode","TokenAuth","TLSProfiles","validSubscriptionSort","OpenShiftKubernetesEngine","OpenShiftContainerPlatform","OpenShiftPlatformPlus","RequiresSeparateSubscription","determineAvailableFilters","initialFilters","filterGroups","synonyms","providerTail","tail","endsWith","getProviderValue","active","sorter","sortFilterValues","nextValue","keywordCompare","filterString","k","setURLParams","hash","OperatorHubTile","vendor","badges","vendorAndDeprecated","footer","isInstalling","OperatorHubTileView","detailsItem","setDetailsItem","showDetails","setShowDetails","ignoreOperatorWarning","setIgnoreOperatorWarning","updateChannel","setTokenizedAuth","installVersion","filteredItems","relevantLabels","detailsItemID","currentItem","TokenAuthGCP","openOverlay","showCommunityOperators","ignore","ignoreWarning","showCommunityOperator","createLink","remoteWorkflowUrl","marketplaceRemoteWorkflow","full","titleText","headingLevel","GOOS","GOARCH","filterGroupNameMap","validSubscriptionFilters","itemsSorter","itemsToSort","getAvailableCategories","getAvailableFilters","renderTile","emptyStateTitle","emptyStateInfo","header","iconClass","iconImg","titleAndDeprecatedPackage","marketplaceActionText","delete","FilterTypes","filterSubcategories","subcategories","intersection","matchedSubcategories","subCategory","valuesIntersection","addItem","subcategory","pruneCategoriesWithNoItems","isCategoryEmpty","processSubCategories","numItems","subcat","otherCategory","other","processCategories","categorize","itemCategorized","categorizeItems","initCategories","allCategory","clearItemsFromCategories","filterByKeyword","compFunction","keyword","filterItems","filteredByKeyword","filteredByGroup","filtered","activeFilters","filterValues","filterByGroup","recategorizeItems","isActiveTab","activeId","hasActiveDescendant","findActiveCategory","activeCategory","getFilterGroupCounts","selectedCategoryId","categoriesForCounts","activeItems","newFilterCounts","filterGroup","matchedItems","getActiveValuesFromURL","availableFilters","groupByTypes","categoryParam","keywordFilter","groupBy","None","groupFilters","groupFilterParam","categoryFilter","filterType","filterValue","getActiveFilters","defaultFilters","TileViewPage","groupItems","setSearchParams","filterByKeywordInput","prevProps","setPrevProps","setCategories","setSelectedCategoryId","setActiveFilters","filterCounts","setFilterCounts","filterGroupsShowAll","setFilterGroupsShowAll","setGroupBy","updateURLParams","paramName","stringify","getUpdatedState","selectedCategories","categoryId","activeValues","updatedState","focus","preventScroll","availableCategories","newActiveFilters","updatedFilters","filterItem","filterItemName","clearFilters","clearFilterURLParams","clearedFilters","clearActiveFilters","groupFilter","typeKey","getFilterSearchParam","updateActiveFilters","onKeywordChange","renderTabs","shown","tabClasses","selectCategory","restrictTabs","activeTab","renderFilterGroup","groupName","showMoreText","numRemaining","onShowAllToggle","updatedShow","showAll","maxShowCount","showText","hideText","filterName","totalItems","renderCategoryTabs","onClear","menuClassName","onGroupChange","titlePrefix","itemsGroups","groupedItems","renderCell","renderHeader","heading","isItemsGrouped","propTypes","isRequired","defaultProps","communityOperatorWarningModal","ignoreWarnings","setIgnoreWarnings","levels","CapabilityLevel","selectedChannelCapabilityLevel","capabilityLevelIndex","level","InstalledHintBlock","latestVersion","installedChannel","nsPath","installedVersion","columnModifier","default","InstallingHintBlock","OperatorHubItemDetailsHintBlock","RedHatMarketPlace","OperatorHubItemDetails","repository","support","installChannel","selectedChannelContainerImage","containerImage","selectedChannelDescription","selectedChannelCreatedAt","createdAt","notAvailable","created","Date","mappedData","d","mappedInfraFeatures","mappedValidSubscription","useExtensionCatalogItems","initDone","initError","setItems","setLoading","tick","database"],"mappings":"4GAAA,ikBA0DA,MAAMA,EAAqB,CACzB,oBACA,oBACA,EAAW,cAAe,qBAAsB,qBAAsB,qBACtE,EAAW,cAAe,qBAAsB,qBAChD,EAAW,cAAe,qBAAsB,qBAChD,IAAMC,aAGFC,EAA+B,CACnC,oBACA,oBACA,EAAW,cAAe,qBAAsB,qBAAsB,qBACtE,EAAW,cAAe,qBAAsB,sBAGrCC,EAAiD,EAAGC,U,QAC/D,MAAM,EAAEC,GAAM,2BAEd,OACE,gCAEE,gBAAC,IAAS,CAACC,UAAWN,EAAmB,IACvC,gBAAC,KAAY,CACXO,KAAM,aAAkB,oBACxBC,UAAWJ,EAAIK,SAASD,UACxBE,KAAMN,EAAIK,SAASC,QAKvB,gBAAC,IAAS,CAACJ,UAAWN,EAAmB,IACvC,gBAAC,KAAY,CAACO,KAAK,YAAYG,KAAMN,EAAIK,SAASD,aAIpD,gBAAC,IAAS,CAACF,UAAWN,EAAmB,KAlB3BW,EAmBe,QAAjB,EAAU,QAAV,EAAAP,EAAIQ,cAAM,eAAED,aAAK,QAAI,UAnB2B,gBAAC,KAAM,CAACC,OAAQD,MAuB5E,gBAAC,IAAS,CAACL,UAAWN,EAAmB,IACvC,sBAAIM,UAAU,2BACXF,EAAIS,KAAKC,2BAA2BC,IAAKC,I,MAAY,OACpD,sBAAIC,IAAKD,GACgB,cAAZ,QAAV,EAAAZ,EAAIQ,cAAM,eAAED,OACX,gBAAC,KAAY,CACXJ,KAAM,aAAkB,8BACxBG,KAAMM,EACNR,UAAWJ,EAAIK,SAASD,UACxBU,MAAOF,IAGT,gCACE,gBAAC,KAAY,CAACT,KAAM,aAAkB,gCACrCS,QASb,gBAAC,IAAS,CAACV,UAAWN,EAAmB,KACrCI,EAAIK,SAASU,iBAAmB,IAC/BC,OAAQC,GAAQ,aAAqBA,KAAS,aAAkB,sBAChEN,IAAKM,GACJ,sBAAIJ,IAAKI,EAAIC,IAAKhB,UAAU,2BAC1B,0BACE,gBAAC,KAAY,CACXC,KAAM,aAAkB,qBACxBG,KAAMW,EAAIX,KACVF,UAAWJ,EAAIK,SAASD,UACxBU,MAAOG,EAAIC,UAIb,wBAAMhB,UAAU,cAAcD,EAAE,cAI1C,gBAAC,IAAS,CAACC,UAAWN,EAAmB,IACvC,gBAAC,KAAa,CACZuB,QAAS,IAAMC,QAAQC,OACvBlB,KAAM,aAAkB,oBACxBmB,SAAUtB,MApED,IAACO,GA2EdgB,EAAqB,KACzB,MAAM,EAAEtB,GAAM,2BACd,OACE,gBAAC,IAAiB,CAACa,MAAOb,EAAE,8BACzBA,EAAE,4FAKIuB,EAAmB,YAAsBC,IACpD,MAAM,EAAExB,GAAM,2BAoCd,OACE,gBAAC,IAAK,iBACAwB,EAAK,cACGxB,EAAE,oBACdyB,OAvC2B,IACtB,CACL,CACEZ,MAAOb,EAAE,YACT0B,UAAW,gBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,iBACT0B,UAAW,qBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,cACT0B,UAAW,eACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,kBACTwB,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,qBACTwB,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAO,GACPW,MAAO,CAAEvB,UAAWN,EAAmB,MAUzCiC,IAAK9B,EACLwB,SAAUA,OAeHO,EAAqDL,IAChE,MAAM,EAAExB,GAAM,2BACR8B,EAAS,sBACT3B,EAAYqB,EAAMrB,YAAa2B,aAAM,EAANA,EAAQC,IAC7C,OACE,gBAAC,IAAa,iBACRP,EAAK,CACTrB,UAAWA,EACX6B,UAAW,CACT,CACE9B,KAAM,aAAkB,oBACxBC,YACA8B,YAAY,EACZC,KAAM,eAER,CACEhC,KAAM,aAAkB,sBACxBC,YACA8B,YAAY,EACZC,KAAM,kBAGVC,QAAUH,GAAc,IAAMA,EAAUI,YAAa,OAAQ,IAC7DvB,MAAOb,EAAE,oBACTqC,WAAW,EACXC,cAAef,MAKfgB,EAAa,CAACC,EAAsBC,IACnCD,EAGEC,aAAI,EAAJA,EAAMC,SAFJ,IAAQrC,OAKNsC,EAAwE,EACnFP,kBAEA,MAAMI,EAAc,aAAQ,IAAMI,WAC5BH,EAAiB,sBAA+B,MAE/CC,EAAUG,GAAe,WAAeN,EAAWC,EAAaC,IAEvE,YAAgB,KACdI,EAAYN,EAAWC,EAAaC,KACnC,CAACD,EAAaC,IAEjB,MAAM,EAAEzC,GAAM,2BAER8C,EAAW,YAAqB,aAAaV,IAEnD,OACE,gBAAC,IAAK,CACJW,QAAQ,OACRC,UAAQ,EACRnC,MAAOb,EAAE,sEAER0C,EACG1C,EACE,6IACA,CAAEyC,KAAMC,EAAUI,WAAU3C,UAAWiC,EAAYhC,SAASD,YAE9DH,EACE,kIACA,CAAE8C,WAAU3C,UAAWiC,EAAYhC,SAASD,cAM3C8C,EAAwD,EAAGlD,U,UACtE,MAAM,EAAEC,GAAM,2BACRkD,EACJnD,EAAIS,KAAK2C,WAAa,IAAoBC,SAAgC,IAAtBrD,EAAIS,KAAK6C,SAEzDC,EAAuB,aAAgB,CAC3CC,MAAO,mBAAiBT,SACxBzB,SAAU,mBAAiBmC,OAC3BrD,UAAWJ,EAAIK,SAASD,UACxBsD,KAAM,UAGR,OACE,gCACGP,GAAiBI,GAChB,uBAAKrD,UAAU,mBACb,gBAAC,IAAS,CAACY,MAAOb,EAAE,kCAClB,yBACGA,EACC,oGAGJ,gBAAC,OAAI,CACH0D,GAAI,WAAW3D,EAAIK,SAASD,aAAa,aAAkB,uBACzDJ,EAAIK,SAASC,mBAGf,gBAAC,IAAM,CAAC0C,QAAQ,WAAW/C,EAAE,+BAKpCkD,IAAkBI,GACjB,uBAAKrD,UAAU,mBACb,gBAAC0C,EAA0B,CAACP,YAAarC,KAG7C,uBAAKE,UAAU,mBACb,gBAAC,KAAc,CAAC0D,KAAM3D,EAAE,6BACxB,uBAAKC,UAAU,yBACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,KAAe,CAACoB,SAAUtB,EAAK6D,iBAAiB,KAEnD,uBAAK3D,UAAU,YACb,sBAAIA,UAAU,sBACZ,0BAAKD,EAAE,eACP,0BACE,gBAAC,KAAM,CAACO,OAAyB,QAAjB,EAAU,QAAV,EAAAR,EAAIQ,cAAM,eAAED,aAAK,QAAIN,EAAE,kBAEzC,0BAAKA,EAAE,oBACLD,EAAIS,KAAKC,4BAA8B,IAAIC,IAAKC,GAChD,sBAAIC,IAAKD,GACe,aAArBZ,EAAIQ,OAAOD,MACV,gBAAC,KAAY,CACXJ,KAAM,aAAkB,8BACxBG,KAAMM,EACNR,UAAWJ,EAAIK,SAASD,UACxBU,MAAOF,IAGT,gCACE,gBAAC,KAAY,CAACT,KAAM,aAAkB,gCACrCS,KAKT,0BAAKX,EAAE,uBAtJG,CACxBoC,I,MAEA,YACqB,QAAnB,EAAAA,aAAW,EAAXA,EAAa7B,cAAM,eAAEsD,OAAQ,GAC7B,CAACC,GAAezC,UAAY0C,aAAYC,sBACtCF,EAAYG,IAAI,iBAAO,CAAEF,aAAYC,qBACvC,iBACAE,QA+IaC,CAAkBpE,GAAKW,IAAI,EAAGqD,aAAYC,qBACzC,sBAAIpD,IAAK,GAAGoD,KAAmBD,KAC7B,gBAAC,KAAY,CACX7D,KAAM,aAAkB,sBACxBG,KAAM0D,EACN5D,UAAW6D,EACXnD,MAAOkD,WASvB,uBAAK9D,UAAU,mBACb,gBAAC,KAAc,CAAC0D,KAAM3D,EAAE,oBACxB,gBAAC,IAAU,CAACoE,WAAsB,QAAV,EAAArE,EAAIQ,cAAM,eAAE6D,gBAM/BC,EAAwD,EACnEtE,MACAuE,wB,QAEA,MAAM,EAAEtE,GAAM,4BACPkD,EAAeqB,GAAoB,WACxCxE,EAAIS,KAAK2C,WAAa,IAAoBC,SAAgC,IAAtBrD,EAAIS,KAAK6C,UAEzDmB,EAA4B,QAAb,EAAAzE,aAAG,EAAHA,EAAKK,gBAAQ,eAAEU,gBAAgB2D,KACjDzD,GAAQ,aAAqBA,KAAS,aAAkB,sBAGrD6C,GAAkB,QAAX,EAAA9D,aAAG,EAAHA,EAAKQ,cAAM,eAAEsD,OAAQ,GAC5Ba,EAAab,EAChBc,OACC,CAACC,EAAKC,IAASD,EAAIE,OAAOD,EAAKE,UAAW,GAAKC,GAAUA,EAAMC,OAAO,CAACJ,KACvE,iBAEDK,UAeG5B,EAAuB,aAAgB,CAC3CC,MAAO,mBAAiBT,SACxBzB,SAAU,mBAAiBmC,OAC3BrD,UAAWJ,EAAIK,SAASD,UACxBsD,KAAM,UAGR,OAAOI,EAAKsB,OAAS,EACnB,gCACGjC,IAAkBoB,IAAsBhB,GACvC,uBAAKrD,UAAU,mBACb,gBAAC0C,EAA0B,CAACP,YAAarC,KAG5CmD,IAAkBoB,GAAqBhB,GACtC,uBAAKrD,UAAU,mBACb,gBAAC,IAAS,CAACY,MAAOb,EAAE,kCAClB,gBAAC,IAAiB,CAACoC,YAAarC,IAChC,uBAAKE,UAAU,gBACb,uBAAKA,UAAU,yBACb,gBAAC,IAAM,CAAC8C,QAAQ,UAAUqC,YAAalC,EAAemC,QAAS,IAhC3E,aAAS,mBAAkBtF,EAAK,CAAC,CAAEuF,GAAI,UAAWC,KAAM,iBAAkBC,OAAO,KAC9EC,KAAK,IAAMlB,GAAiB,IAC5BmB,MAAOC,GAAU,YAAW,CAAEA,MAAOA,EAAMC,eA+Bf5F,EAAhBkD,EAAkB,cAAmB,iBAExC,gBAAC,IAAM,CACLH,QAAQ,YACRqC,YAAY,EACZC,QAAS,IACP,KAAQQ,KACN,WAAW9F,EAAIK,SAASD,aAAa,aAAkB,wBACrDqE,EAAanE,yBAKlBL,EAAE,iBAOd0E,EAAWhE,IAAKsE,GACf,uBAAKpE,IAAKoE,EAAM,GAAGD,UAAW9E,UAAU,mBACtC,gBAAC,KAAc,CAAC0D,KAAMqB,EAAM,GAAGD,YAC/B,uBAAK9E,UAAU,sBACb,yBAAOA,UAAU,+CACf,yBAAOA,UAAU,wBACf,sBAAIA,UAAU,qBACZ,sBAAIA,UAAWJ,EAA6B,IAAKG,EAAE,aACnD,sBAAIC,UAAWJ,EAA6B,IAAKG,EAAE,aACnD,sBAAIC,UAAWJ,EAA6B,IAAKG,EAAE,eACnD,sBAAIC,UAAWJ,EAA6B,IAAKG,EAAE,sBAGvD,yBAAOC,UAAU,wBACd+E,EAAMtE,IAAKmE,IAAS,OACnB,sBACEjE,IAAK,GAAG,YAAyBiE,EAAKxD,aAAawD,EAAKxD,SAAShB,OACjEJ,UAAU,qBAEV,sBAAIA,UAAWJ,EAA6B,IACzC,CAAC,UAAW,WAAWiG,SAASjB,EAAKtE,QACpC,gBAAC,KAAY,CACXL,KAAM,YAAyB2E,EAAKxD,UACpClB,UAAWJ,EAAIK,SAASD,UACxBE,KAAMwE,EAAKxD,SAAShB,KACpBQ,MAAOgE,EAAKxD,SAAShB,OAGvB,gCACE,gBAAC,KAAY,CAACH,KAAM,YAAyB2E,EAAKxD,YAClD,gBAAC,IAAM,CACL0E,KAAK,SACLV,QAAS,IAAM,YAAwB,CAAEW,aAAcnB,EAAKxD,WAC5D0B,QAAQ,QAEP8B,EAAKxD,SAAShB,QAKvB,sBAAIJ,UAAWJ,EAA6B,IAAKgF,EAAKxD,SAASnB,MAC/D,sBAAID,UAAWJ,EAA6B,KA1F1CU,EA0F0DsE,EAAKtE,OAzFjF,gCACc,YAAXA,GAAwB,gBAAC,IAAoB,CAACN,UAAU,oBAC7C,YAAXM,GAAwB,gBAAC,IAAoB,CAACN,UAAU,oBACxDM,KAuFa,sBAAIN,UAAWJ,EAA6B,IACzC,YAAuB,YAAyBgF,EAAKxD,aA5FvD,IAACd,UAuGlB,uBAAKN,UAAU,mBACb,gBAAC,IAAiB,CAACY,MAAOb,EAAE,+BACzBA,EAAE,4DAMEiG,EAAoCzE,IAC/C,MAAMM,EAAS,sBACf,OACE,gBAAC,IAAW,iBACNN,EAAK,CACTrB,UAAW2B,EAAOC,GAClB7B,KAAM,aAAkB,oBACxBG,KAAMyB,EAAOzB,KACb6F,MAAO,CACL,KAAWC,QAAQlD,GACnB,KAAWmD,WAEX,CAAEC,KAAM,aAAcC,QAAS,iBAAkBC,UAAWlC,IAE9DmC,YAAa,IACR,IAAMC,4BAA4B,uBAClC,IAAMtF,QAAQC,YA+BzBS,EAAiB6E,YAAc,oB,k6CCzb/B,MACMC,GAAS5G,GACb,aAAaA,KAAS,aAAkB,8BAOpC6G,GAA+B,EAAW,cAAe,sBACzDC,GAAoB,EAAW,cAAe,sBAC9CC,GAAyB,EAAW,cAAe,uBACnDC,GAA0B,EAAW,cAAe,sBAEpDC,GAAoBC,GACvB,IAAQA,GAUL,KATA,CAEEC,SAAU,wBACVb,KAAS,aACP,oBACAY,EAAI7G,SAASC,KACb4G,EAAI7G,SAASD,WAHT,SAQRgH,GAAY,CAACF,EAAuBG,IACvC,IAAQH,GAqBL,KApBA,CAEEC,SAAU,yBACVG,SAAU,IACR,YAA6B,CAC3BC,QAAA,KACAC,OAAA,KACAC,SAAA,KACAhD,aAAcyC,EACdG,MACAK,UAAU,IAEdC,aAAc,CACZnE,MAAO,oBAAkBT,SACzBzB,SAAU,oBAAkBmC,OAC5BnD,KAAM4G,EAAI7G,SAASC,KACnBF,UAAW8G,EAAI7G,SAASD,UACxBsD,KAAM,WAKVkE,GAAoB,CACxBP,EACA5C,IAEO,IAAUA,GACb,CAAC,IAAMrD,QAAQyG,QACf,CAAC,IAAMZ,GAAiBxC,GAAe,IAAM2C,GAAU3C,EAAc4C,IAGrES,GAAoF,EACxFC,SAAQ,EACRtD,mBAEA,MAAM,EAAExE,GAAM,2BACd,IAAKwE,EACH,OAAO,KAGT,GAAI,YAAwBA,GAC1B,OAAO,gBAAC,uBAAmB,CAACA,aAAcA,IAG5C,MAAMuD,EAAqB,YAAsBvD,GACjD,OACE,wBAAMvE,UAAW6H,EAAQ,aAAe,oBACrCA,EACCC,EAAwB,MAExB,gBAAC,KAAM,CAACxH,OAAQwH,EAAmBxH,QAAUP,EAAE,mBAMjDgI,GAA0E,EAC9EjI,MACAyE,mB,MAEA,MAAMjE,EAAoB,QAAX,EAAAR,aAAG,EAAHA,EAAKQ,cAAM,eAAED,MAC5B,OAAIP,EAAIK,SAAS6H,kBAEb,wBAAMhI,UAAU,oBACd,gBAAC,KAAM,CAACM,OAAQ,IAA2B2H,oBAI1C3H,EACL,gCACE,wBAAMN,UAAU,oBACd,gBAAC,KAAM,CAACM,OAAQA,KAElB,gBAACsH,GAAkB,CAACC,OAAK,EAACtD,aAAcA,KAExC,MAGA2D,GAAsD,EAAGpI,U,MAC7D,MAAM,EAAEC,GAAM,2BACRoI,GAA4C,QAAxB,eAAoBrI,UAAI,eAAEsI,MAAM,OAAQ,GAClE,GAAI,YAAYtI,GACd,OACE,gCACE,gBAAC,KAAY,CACXG,KAAK,YACLW,MAAOd,EAAIK,SAASD,UACpBE,KAAMN,EAAIK,SAASD,YAErB,wBAAMF,UAAU,cAAcF,EAAIQ,OAAO+H,UAK/C,OAAQF,EAAkBjD,QACxB,KAAK,EACH,OAAOnF,EAAE,sBACX,KAAK,EACH,OAAOoI,EAAkB,GACvB,gBAAC,KAAY,CAAClI,KAAK,YAAYW,MAAOuH,EAAkB,GAAI/H,KAAM+H,EAAkB,KAEpFpI,EAAE,sBAEN,QACE,OACE,gBAAC,IAAO,CACNuI,cAAevI,EAAE,0BACjBwI,YAAaJ,EAAkB1H,IAAKP,GAClC,gBAAC,KAAY,CAACD,KAAK,YAAYW,MAAOV,EAAWE,KAAMF,MAGzD,gBAAC,IAAM,CAAC4C,QAAQ,OAAOC,UAAQ,GAC5BhD,EAAE,2BAA4B,CAAEyI,MAAOL,EAAkBjD,aAOhEuD,GAAgD,EAAGC,aAAYC,cACnE,MAAMC,EAA4B,CAChC3I,KAAM,aAAkB,8BACxB4I,QAAQ,EACRzI,KAAM,MAED0I,GAAyB,YAAqCF,IAC/D,EAAE7I,GAAM,4BACPgJ,GAAiC,aAAgB,CACtDzF,MAAO,6BAA2BT,SAClCzB,SAAU,6BAA2BmC,OACrCC,KAAM,QACNpD,KAAM,MAEF4I,EAAkBN,EAAWxD,OAEnC,OACE,gCACG4D,GAAyBC,GACxB,sBAAI/I,UAAU,2CACZ,0BAAKD,EAAE,qBAAsB,CAAEyI,MAAOQ,KACrCN,EAAWjI,IAAKwI,GACf,sBAAItI,IAAKsI,EAAYjJ,UAAU,uDAC5BgJ,EAAkB,GACjB,0BAAQhJ,UAAU,cAAcD,EAAE,kBAAmB,CAAEkJ,e,KAEzD,gBAAC,IAAM,aACK,sBACVnD,KAAK,SACL/C,UAAQ,EACRqC,QAAS,IACP,YAAmB,CACjB0D,wBACAE,kBACAC,aACAN,YAGJ7F,QAAQ,QAER,gCACG,YAAgBgG,EAAuBG,GACpClJ,EAAE,eACFA,EAAE,gBAAiB,IACvB,gBAAC,IAAa,CAACC,UAAU,sDAWrCkJ,GAA0D,EAAG/B,MAAKuB,iB,QACtE,MAAME,EAA4B,CAChC3I,KAAM,aAAkB,8BACxB4I,QAAQ,EACRzI,KAAM,MAED0I,GAAyB,YAAqCF,IAC/D,EAAE7I,GAAM,4BACPgJ,GAAiC,aAAgB,CACtDzF,MAAO,6BAA2BT,SAClCzB,SAAU,6BAA2BmC,OACrCC,KAAM,QACNpD,KAAM,MAEF+I,IACiC,QAApC,EAA2B,QAA3B,EAAAL,aAAqB,EAArBA,EAAuBvI,YAAI,eAAE6I,eAAO,eAAElE,SACvCwD,EAAWW,KAAMC,IAAY,YAAgBR,EAAuBQ,IAEtE,OACER,GACAC,GACAI,GACE,gBAAC,IAAO,CACNb,cAAe,2BAAMvI,EAAE,iCACvBwI,YACE,2BACE,yBACGxI,EACC,iJAGJ,gBAAC,OAAI,CAAC0D,GAAI,aAAgB0D,EAAK,aAAaA,KACzCpH,EAAE,gCAKT,gBAAC,IAAM,CAAC+C,QAAQ,OAAOC,UAAQ,GAC5BhD,EAAE,2BAOAwJ,GAAgC,YAC3C,EAAGC,kBAAiB1J,MAAKyE,eAAckF,2B,YACrC,MAAM,YAAEhD,EAAW,SAAEiD,EAAQ,QAAEC,GAAoB,QAAR,EAAA7J,EAAIS,YAAI,QAAI,IACjD,EAAER,GAAM,2BACR6J,EAAgD,QAAzB,eAAqB9J,UAAI,QAAI,IACnD+J,GAAqB,QAAb,EAAA/J,EAAIS,KAAKsJ,YAAI,QAAI,GAC1BC,EAAQ,YAA6BhK,GACrCiK,EAAe,aAAmBjK,GAClC4I,EAAa,aAA6C,QAAb,EAAA5I,aAAG,EAAHA,EAAKK,gBAAQ,eAAE6J,cAC5D,kBAAEC,GAAsB,YAAuB1F,GAErD,OACE,gCAEE,gBAAC,IAAS,CAACvE,UA/PK,IAgQd,gBAAC,OAAI,CACHyD,GAAIqG,EACJ9J,UAAU,gCAA+B,yBACjByG,GAExB,gBAAC,IAAyB,CACxBoD,KAAMA,EACNpD,YAAaA,EACbkD,QAASA,EACTD,SAAUA,MAMfF,IAAoB,IACnB,gBAAC,IAAS,CAACxJ,UA/QQ,IAgRjB,gBAAC,KAAY,CACXC,KAAK,YACLW,MAAOgJ,EACPxJ,KAAMwJ,KAGR,KAGJ,gBAAC,IAAS,CAAC5J,UAAW2G,IACpB,gBAACuB,GAAiB,CAACpI,IAAKA,KAI1B,gBAAC,IAAS,CAACE,UAAW4G,IACpB,uBAAK5G,UAAU,wCACZyJ,EACC,gBAAC,uBAAmB,MAEpB,gBAAC1B,GAA2B,CAACjI,IAAKA,EAAKyE,aAAcA,KAGxDmE,EAAWxD,OAAS,GAAK,gBAACgE,GAAmB,CAAC/B,IAAKrH,EAAK4I,WAAYA,IACpEuB,EAAkBC,aACjB,gBAAC,IAA8B,CAC7BlK,UAAU,gBACVkK,YAAaD,EAAkBC,eAMrC,gBAAC,IAAS,CAAClK,UAAW6G,IACL,MAAd/G,EAAIQ,OAAiB,IAAM,gBAAC,KAAS,CAAC6J,UAAWrK,EAAIQ,OAAO8J,kBAI/D,gBAAC,IAAS,CAACpK,UAAW8G,IAClB,IAAUiD,GAQR,IAPA,IAAOA,EAAc,GAAGtJ,IAAK4J,GAC3B,uBAAK1J,IAAK,aAAwB0J,IAChC,gBAAC,OAAI,CAAC5G,GAAI,GAAGqG,KAAS,aAAwBO,KAASzJ,MAAOyJ,EAAKjK,MAChEiK,EAAK5D,aAAe4D,EAAKpK,QAKnC8J,EAAa7E,OAAS,GACrB,gBAAC,OAAI,CACHzB,GAAIqG,EACJlJ,MAAOb,EAAE,+BAAgC,CAAEuK,QAASP,EAAa7E,OAAS,KAEzEnF,EAAE,+BAAgC,CAAEuK,QAASP,EAAa7E,OAAS,MAM1E,gBAAC,IAAS,CAAClF,UAAW,IAAML,aAC1B,gBAAC,KAAa,CACZyB,SAAUtB,EACVG,KAAM,aAAaH,GACnBmB,QAASyG,GAAkB5H,EAAKyE,SAQ/BgG,GAA4D,EACvEf,kBACAC,uBACA3J,U,MAEA,MAAM,EAAEC,GAAM,2BACRW,EAAmB,QAAT,EAAAZ,aAAG,EAAHA,EAAKS,YAAI,eAAEH,KACrBmG,EAAc,CAAC,IAAMrF,QAAQsJ,KAAM,IAAMtD,GAAUpH,IACnDI,EAAY,aAAaJ,GACzBgK,EAAQ,aAAgBhK,EAAK,aAAkB,sBAErD,OACE,gCAEE,gBAAC,IAAS,CAACE,UArWO,IAsWhB,gBAAC,OAAI,CAACyD,GAAIqG,GACR,gBAAC,IAAyB,CACxBD,KAAM,KACNpD,YAAa/F,EACbiJ,QAAS,KACTD,SAAU,SAMfF,IAAoB,IACnB,gBAAC,IAAS,CAACxJ,UAjXU,IAkXnB,gBAAC,KAAY,CAACC,KAAK,YAAYW,MAAOV,EAAWE,KAAMF,KAEvD,KAGJ,gBAAC,IAAS,CAACF,UAAW2G,IACpB,wBAAM3G,UAAU,cAAcD,EAAE,cAIlC,gBAAC,IAAS,CAACC,UAAW4G,IACnB6C,EAAuB,gBAAC,uBAAmB,MAAM,gBAAC7B,GAAkB,CAACrD,aAAczE,KAItF,gBAAC,IAAS,CAACE,UAAW6G,IACL,MAAd/G,EAAIQ,OAAiB,IAAM,gBAAC,KAAS,CAAC6J,UAAWrK,EAAIQ,OAAOmK,eAI/D,gBAAC,IAAS,CAACzK,UAAW8G,IACpB,wBAAM9G,UAAU,cAAcD,EAAE,cAIlC,gBAAC,IAAS,CAACC,UAAW,IAAML,aAC1B,gBAAC,KAAa,CAACyB,SAAUtB,EAAKG,KAAM,aAAaH,GAAMmB,QAASsF,OAMlEmE,GAAsE,EAC1E5K,MACA6K,iBAEA,MAAM,eAAEC,EAAc,cAAEC,EAAa,gBAAErB,GAAoBmB,EACrDpG,EAAemC,GAAM5G,GACvB,YAAmB+K,EAAe/K,GACjCA,EAGC2J,GACH,IAAUmB,KACV,wCAA6BA,EAAgBrG,KAna1B,CAACzE,GACD,kBAAtBA,EAAIK,SAASC,MACc,yCAA3BN,EAAIK,SAASD,UAkaV4K,CAAgBhL,GAEnB,OAAO4G,GAAM5G,GACX,gBAACyJ,GAA6B,CAC5BC,gBAAiBA,EACjBC,qBAAsBA,EACtB3J,IAAKA,EACLyE,aAAcA,IAGhB,gBAACgG,GAAoB,CACnBf,gBAAiBA,EACjBC,qBAAsBA,EACtB3J,IAAKyE,KAKLwG,GAAkB,KACtB,MAAM,EAAEhL,GAAM,2BACd,OAAO,gBAAC,IAAiB,CAACa,MAAOb,EAAE,6BAG/BiL,GAAwB,KAC5B,MAAM,EAAEjL,GAAM,2BACRkL,EAAU,cACVC,EAAsCnL,EAC1C,0DACA,CAAEkL,YAEEE,EAAoCpL,EAAE,mCACtCqL,EACJ,gCACE,2BACGH,IAAY,IACTE,EACAD,GAEN,2BACE,gBAAC,QAAK,CAACpJ,GAAG,O,2CACgC,qBAAGsE,KAAK,gBAAc,e,OAKtE,OAAO,gBAAC,IAAiB,CAACxF,MAAOb,EAAE,2BAA4BqL,IAGpDC,GAAuE,I,IAAA,cAClFR,EAAa,eACbD,EAAc,KACdU,GAAI,EACDC,EAAI,KAJ2E,2CAMlF,MAAM,EAAExL,GAAM,2BACRyJ,EAAkB,cAClBgC,EAAqB,CACzB5K,MAAOb,EAAE,YACT0B,UAAW,gBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UA5dW,KA+dhByL,EAA0B,CAC9B7K,MAAOb,EAAE,iBACT2L,SAAU,uBACVhK,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAlegB,KAqerB2L,EAAkC,CACtC/K,MAAOb,EAAE,0BACT2L,SAAU,yBACVhK,WAAY,CAAC,IAAU,KACvBH,MAAO,CAAEvB,UAAW2G,KAGhBiF,EAAuB,CAC3BhL,MAAOb,EAAE,cACTwB,MAAO,CAAEvB,UAAW4G,KAGhBiF,EAA4B,CAChCjL,MAAOb,EAAE,oBACTwB,MAAO,CAAEvB,UAAW6G,KAGhBiF,EAA6B,CACjClL,MAAOb,EAAE,qBACTwB,MAAO,CAAEvB,UAAW8G,KAGhBiF,EAAsB,CAC1BnL,MAAO,GACPW,MAAO,CAAEvB,UAAW,IAAML,cAuEtBqM,EAAqBxC,IAAoB,IAEzCmB,EAAa,UACjB,K,QAAM,OACJsB,iBAAsC,QAApB,EAAArB,aAAc,EAAdA,EAAgBU,YAAI,QAAI,GAC1CT,cAAkC,QAAnB,EAAAA,aAAa,EAAbA,EAAeS,YAAI,QAAI,GACtC9B,oBAEF,CAACA,EAAiBoB,EAAgBC,IAGpC,OACE,uBAAK7K,UAAU,0BACb,gBAAC,IAAK,eACJsL,KA/DkB,EACtBY,EACAF,IAEOE,EAAUpL,OAAQqL,IACvB,OAhiBkBrM,EAgiBCqM,EAhiBO,aAAarM,KAAS,aAAkB,uBAmiB9DkM,GACM,YAAYG,IAAa,YAAgBA,GAIjDC,OAAOC,aAAaC,oBACpBH,EAAShM,SAASD,YAAc,KAChCsJ,IAAoB,IAEb,YAAY2C,IAAa,YAAgBA,GAE3C,YAAgBA,IA9iBN,IAACrM,IA0lBVyM,CAAgBjB,EAAMU,IACxBT,EAAI,cACIxL,EAAE,2BACdyB,OAAQwK,EArFiB,IAAgB,CAC7CR,EACAC,EACAE,EACAC,EACAC,EACAC,EACAC,GAG+B,IAAgB,CAC/CP,EACAG,EACAC,EACAC,EACAC,EACAC,GAsEIpK,IAAK+I,GACLrJ,SAAU0J,GACVyB,eAAgBxB,GAChByB,YAAU,EACV9B,WAAYA,EACZ+B,YAAa,CACXC,uBAlDwB7M,I,QAC9B,GAAiB,iBAAbA,EAAIG,KACN,OAAOF,EAAE,YAGX,GAAI,YAAYD,GACd,OAAOA,EAAIK,SAASD,UAGtB,MAAM0M,EAAuD,QAApC,EAAwB,QAAxB,eAAoB9M,UAAI,eAAEsI,MAAM,YAAI,QAAI,GACjE,OAAQwE,EAAiB1H,QACvB,KAAK,EACH,OAAOnF,EAAE,sBACX,KAAK,EACH,OAAO6M,EAAiB,GAC1B,QACE,OAAO7M,EAAE,2BAA4B,CAAEyI,MAAOoE,EAAiB1H,WAmC7D2H,qBA9BN/M,IAEA,MAAM8J,EAAuB,aAAqB9J,GAClD,OAAO8J,UAAwB,aAAa9J,UAkCnCgN,GAAyEvL,IACpF,MAAM,EAAExB,GAAM,4BACPgN,GAA2B,aAAgB,CAChDzJ,MAAO,oBAAkBT,SACzBzB,SAAU,oBAAkBmC,OAC5BC,KAAM,SAEF5C,EAAQb,EAAE,2BACViN,EAAS,aAAoB,KAAkBd,WAC/Ce,EACJ,gCACGlN,EACC,6FAEA,gBACA,gBAAC,QAAK,CAAC+B,GAAG,OACP,I,gCAC6B,IAC9B,gBAAC,IAAY,CAACsE,KAAM4G,GAAM,yC,8DAC6B,IACvD,gBAAC,IAAY,CAAC5G,KAAM,KAA6B,gB,MA6BzD,OACE,gCACE,gBAAC,IAAM,KACL,6BAAQxF,IAEV,gBAAC,IAAa,iBACRW,EAAK,CACTQ,UAAW,KACJ,IAA2B8D,SAAStE,EAAMrB,YAC/CkM,OAAOC,aAAaC,mBAChB,CACE,CACErM,KAAM,aAAkB,8BACxBC,UAAW,IACX+B,KAAM,iCAGV,GACJ,CACEhC,KAAM,aAAkB,8BACxBC,UAAWqB,EAAMrB,UACjB+B,KAAM,0BAER,CACEhC,KAAM,aAAkB,qBACxBgC,KAAM,gBACN/B,UAAW6M,OAA0BG,EAAY3L,EAAMrB,UACvDiN,UAAU,GAEZ,CACElN,KAAM,aAAkB,sBACxBgC,KAAM,iBACNkL,UAAU,IAGdvM,MAAOA,EACPsB,QAvDD,EAAGkL,+BAA8BC,yBAAwBxC,oB,UAC5D,UACwC,QAAlC,EAAAuC,aAA4B,EAA5BA,EAA8B9B,YAAI,QAAI,MACV,QAA5B,EAAA+B,aAAsB,EAAtBA,EAAwB/B,YAAI,QAAI,OACb,QAAnB,EAAAT,aAAa,EAAbA,EAAeS,YAAI,QAAI,IAAIxK,OAC5BkG,GACC,CAAC,GAAIA,EAAI7G,SAASD,WAAW2F,SAAStE,EAAMrB,WAAa,KACzD,IAAQ,IAAM8G,EAAK,0BAEvBlG,OACA,CAAChB,EAAKwN,EAAIC,IACR7G,GAAM5G,IACN,IACEyN,EAAI/I,KAAK,EAAGrE,eAAc,QACxB,OAAY,QAAX,EAAAL,aAAG,EAAHA,EAAKQ,cAAM,eAAEkN,WAAqB,QAAT,EAAA1N,aAAG,EAAHA,EAAKS,YAAI,eAAEkN,aAAa5H,SAAS1F,aAAQ,EAARA,EAAUC,WA0CzEF,UAAWqB,EAAMrB,UACjBmC,cAAegJ,GACf4B,SAAUA,EACVS,WAAW,+BAMNC,GAAgBpM,GAOzB,gBAAC,IAAc,eACbqM,OAAQ,IACN,0CAAqDpI,KAAMqI,GAAMA,EAAEC,mBAEjEvM,IAKGwM,GAAmC,I,WAAA,IAAE5G,EAAG,IAAE6G,EAAG,SAAEC,GAAQ,EAAK1C,EAAI,KAA7B,0BAC9C,MAAM,EAAExL,GAAM,2BACRmO,EAAY,aAAwBF,IACnCG,GAAS,YAAYD,GACtBE,EAA0B,QAAd,EAAA7C,EAAK6C,iBAAS,QAA0B,QAAtB,EAAY,QAAZ,EAAAD,aAAK,EAALA,EAAOE,aAAK,eAAExI,gBAAQ,sBAAG,UACvDyI,EAAc,UAClB,IACEnH,EACI,WAAWA,EAAIhH,SAASD,aAAa,6BAA2BqD,UAAU4D,EAAIhH,SAASC,QAAQ8N,SAC/F,KACN,CAAC/G,EAAK+G,IAGR,OACE,gBAAC,IAAI,KACH,gBAAC,IAAS,KACR,wBAAMlO,UAAU,oBACd,gBAAC,KAAY,CACXC,KAAM,aAAwB+N,GAC9BpN,MAAOoN,EAAI5N,KACXmO,QAAQ,EACR9H,YAAauH,EAAIvH,aAAeuH,EAAI/N,OAErCgO,GACC,gBAAC,IAAc,CAACO,UAAQ,GACtB,gBAAC,IAAiB,CAAC3E,KAAM,gBAAC,IAAwB,MAAKjJ,MAAOb,EAAE,qBAKxE,gBAAC,IAAQ,KACP,gBAAC4N,GAAY,CAACc,QAAST,EAAIU,YAAaC,iBAAe,KAExDP,GAAaE,GACZ,gBAAC,KAAuB,CAACH,MAAOA,EAAOjO,UAAWiH,EAAIhH,SAASD,WAC7D,gBAAC,IAAU,KACT,gBAAC,OAAI,CAACuD,GAAI6K,GACR,gBAAC,IAAc,CAACtO,UAAU,oBACzBD,EAAE,4BASJ6O,GAAa,EAAGzH,MAAK4C,mBAChC,MAAM,EAAEhK,GAAM,2BACd,OACE,uBAAKC,UAAU,mBACZ+J,EAAa7E,OACZ6E,EAAatJ,IAAKuN,GAChB,gBAACD,GAAO,CAACpN,IAAK,aAAwBqN,GAAMA,IAAKA,EAAK7G,IAAKA,KAG7D,wBAAMnH,UAAU,cACbD,EAAE,kEAOP8O,GAA2EtN,IAC/E,MAAM,EAAExB,GAAM,4BACR,uBAAE+O,EAAsB,IAAE3H,GAAQ5F,EAElCwN,EAA6BD,aAAsB,EAAtBA,EAAwB7O,KACrD+O,EAAkC,aAAaF,IAC9CX,GAAS,YAAYa,IAGrBC,EAAgBC,GAAwB,YAAyC,CACtFjP,KAAM+O,EACNhN,YAAY,EACZ6G,QAAQ,IAGJsG,EAA0B,aAAuB,CACrD7L,MAAO6K,aAAK,EAALA,EAAOtL,SACdzB,SAAU+M,aAAK,EAALA,EAAO5K,OACjBrD,WAAWiO,aAAK,EAALA,EAAOnM,aACd8M,aAAsB,EAAtBA,EAAwB3O,SAASD,YAAaiH,EAAIhH,SAASD,UAC3D,KACJsD,KAAM,WAGR,OAAI0L,GAAkD,IAA1BD,EAAe/J,QAAgBiK,EAEvD,gBAAC,IAAK,CACJpM,UAAQ,EACR/C,UAAU,WACV8C,QAAQ,UACRlC,MAAOb,EAAE,8CAA+C,CAAEgP,gCAE1D,yBACGhP,EAAE,6EAA8E,CAC/EgP,gCAGJ,gBAAC,sCAAkC,CACjCjP,IAAKyB,EAAM4F,IACX2H,uBAAwBA,KAKzB,MAGIM,GACX7N,I,cAEA,MAAM,EAAExB,GAAM,4BACR,KAAEQ,EAAI,SAAEJ,EAAQ,OAAEG,GAAWiB,EAAMzB,KACnC,aAAEyE,GAAiBhD,EAAMoJ,WACzBZ,EAAe,aAAmBxI,EAAMzB,MAG5C,4CAA6CuP,EAC7C,+CAAgDC,GAC9CnP,EAAS6J,aAAe,GAEtB8E,EAAyB,UAAc,KAC3C,GAAIQ,EACF,IACE,OAAOC,KAAKC,MAAMF,GAClB,MAAO5J,GAEPkD,QAAQlD,MAAM,wDAAyDA,EAAM2C,SAGjF,OAAO,MACN,CAACiH,IAEEG,EAAqB,UAAc,KACvC,GAAIJ,EACF,IACE,MAAMK,EAAM,IAAIC,IAAIN,GAEpB,OADAK,EAAIE,aAAaC,IAAI,aAAc,qBAC5BH,EAAI/J,WACX,MAAOD,GAEPkD,QAAQlD,MAAM,yDAA0DA,EAAM2C,SAGlF,OAAO,MACN,CAACgH,IAEE3G,EAAa,aAAgCvI,aAAQ,EAARA,EAAU6J,aACvD8F,EAAc,IAA4B,QAAnB,EAAa,QAAb,EAAAvP,aAAI,EAAJA,EAAMwP,eAAO,eAAExP,YAAI,eAAEuP,YAAa,uBACzD,kBAAE7F,EAAiB,kBAAE+F,EAAiB,kBAAEC,GAAsB,YAClE1L,GAGF,OACE,gCACE,gBAAC,KAAkB,MAEnB,uBAAKvE,UAAU,mBACb,uBAAKA,UAAU,yBACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,YACZM,GAAUA,EAAOD,QAAU,IAA2B6P,gBACrD,gBAAC,IAAK,CACJnN,UAAQ,EACR/C,UAAU,WACV8C,QAAQ,SACRlC,MAAOb,EAAE,wBAERO,EAAO6P,SAAW,IAAmBC,gBACpC,gCACE,gBAAC,QAAK,CAACrQ,EAAGA,EAAG+B,GAAG,O,iFAEV,IACJ,gBAAC,KAAY,CACX1B,KAAMD,EAASC,KACfH,KAAM,aAAkB,8BACxBC,UAAW,aAAqBqB,EAAMzB,KACtCuQ,UAAQ,EACRC,QAAM,MAKZhQ,EAAc,SAInBwO,GACC,gBAACD,GAA2B,CAC1BC,uBAAwBA,EACxB3H,IAAK5F,EAAMzB,OAGbmK,EAAkBC,aAClB8F,EAAkB9F,aAClB+F,EAAkB/F,cAClB,gBAAC,IAA8B,CAC7BD,kBAAmBA,EACnB+F,kBAAmBA,EACnBC,kBAAmBA,EACnBM,aAAW,IAGf,gBAAC,KAAc,CAAC7M,KAAM3D,EAAE,uBACxB,gBAAC6O,GAAU,CAACzH,IAAK5F,EAAMzB,IAAKiK,aAAcA,IAC1C,gBAAC,KAAc,CAACrG,KAAM3D,EAAE,qBACxB,gBAAC4N,GAAY,CAACc,QAASlO,EAAKmO,aAAe3O,EAAE,wBAE/C,uBAAKC,UAAU,YACb,sBAAIA,UAAU,2CACZ,0BAAKD,EAAE,iBACP,0BACGQ,EAAKmJ,UAAYnJ,EAAKmJ,SAAStJ,KAC5BG,EAAKmJ,SAAStJ,KACdL,EAAE,sBAEP0P,GACC,gCACE,0BAAK1P,EAAE,gBACP,0BACE,gBAAC,IAAY,CAACqG,KAAMqJ,EAAoB/L,KAAM3D,EAAE,uBAItD,0BAAKA,EAAE,mBACP,0BACE,gBAAC,KAAS,CAACoK,UAAWhK,EAASqQ,sBAGlC9H,EAAWxD,OAAS,GAAKX,GACxB,gBAACkE,GAAc,CACbC,WAAYA,EACZC,QAAS,YAAyC,QAAlB,EAAApE,aAAY,EAAZA,EAAchE,YAAI,eAAEkQ,UAGxD,sBAAIzQ,UAAU,2CACZ,0BAAKD,EAAE,cACNQ,EAAKmQ,OAASnQ,EAAKmQ,MAAMxL,OAAS,EACjC3E,EAAKmQ,MAAMjQ,IAAKkQ,GACd,sBAAIhQ,IAAKgQ,EAAKjB,IAAKkB,MAAO,CAAEC,QAAS,OAAQC,cAAe,WACzDH,EAAKvQ,KAAM,IACZ,gBAAC,IAAY,CACXgG,KAAMuK,EAAKjB,IACXhM,KAAMiN,EAAKjB,KAAO,IAClBqB,oBAAoB,mBAK1B,0BAAKhR,EAAE,uBAGX,sBAAIC,UAAU,2CACZ,0BAAKD,EAAE,oBACNQ,EAAKyQ,aAAezQ,EAAKyQ,YAAY9L,OAAS,EAC7C3E,EAAKyQ,YAAYvQ,IAAKwQ,GACpB,sBAAItQ,IAAKsQ,EAAWC,MAAON,MAAO,CAAEC,QAAS,OAAQC,cAAe,WACjEG,EAAW7Q,KAAM,IAClB,qBAAGgG,KAAM,UAAU6K,EAAWC,MAASlR,UAAU,gBAC9CiR,EAAWC,OAAS,OAK3B,0BAAKnR,EAAE,2BAOnB,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAAC0D,KAAM3D,EAAE,uCACxB,uBAAKC,UAAU,yBACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,KAAe,CAACoB,SAAUG,EAAMzB,KAC/B,0BACE,gBAAC,IAAO,CACNwI,cAAe,2BAAMvI,EAAE,2BACvBwI,YACE,2BAAMxI,EAAE,gEAEVoR,SAAS,SAET,gBAAC,IAAM,CAACrO,QAAQ,QAAQ9C,UAAU,gCAC/BD,EAAE,6BAIT,0BACE,gBAACmI,GAAiB,CAACpI,IAAKyB,EAAMzB,SAIpC,uBAAKE,UAAU,YACb,0BAAKD,EAAE,eACP,0BACE,gBAAC,KAAM,CAACO,OAAQA,EAASA,EAAOD,MAAQN,EAAE,kBAE5C,0BAAKA,EAAE,sBACP,0BAAKO,EAASA,EAAO+H,QAAUtI,EAAE,iBAC/B,IAA2B,QAAjB,EAAAQ,EAAKwP,QAAQxP,YAAI,eAAE6Q,cAC7B,gCACE,0BAAKrR,EAAE,6BACNQ,EAAKwP,QAAQxP,KAAK6Q,YAAY3Q,IAAI,EAAGL,UACpC,sBAAIO,IAAKP,GACP,gBAAC,KAAY,CACXA,KAAMA,EACNH,KAAK,aACLC,UAAW,aAAqBqB,EAAMzB,WAM9C,IAAUgQ,IACV,gCACE,0BAAK/P,EAAE,iCACN+P,EAAYrP,IAAI,EAAG4Q,wBAClB,sBAAI1Q,IAAK0Q,EAAkB,4BAA6BA,GACtD,gBAAC,KAAY,CACXjR,KAAMiR,EACNpR,KAAK,iBACLC,UAAW,aAAqBqB,EAAMzB,UAMhD,0BAAKC,EAAE,sBACP,0BACG,aAAiBwB,EAAMzB,KACtB,gBAAC,KAAY,CACXM,KAAM,aAAiBmB,EAAMzB,KAC7BI,UAAW,aAAqBqB,EAAMzB,KACtCG,KAAM,aAAkB,wBAExB,SAQd,uBAAKD,UAAU,mBACb,gBAAC,KAAc,CAAC0D,KAAM3D,EAAE,oBACxB,gBAAC,IAAU,CACToE,YAA+B,QAAlB,EAAA7D,aAAM,EAANA,EAAQ6D,kBAAU,QAAI,IAAI1D,IAAKoN,GAAO,OAAD,wBAC7CA,GAAC,CACJ/H,KAAM+H,EAAExN,MACRC,OAAQ,UAEVwF,KAAM,IAAewL,2BAOlBC,GAAmD,I,IAAA,IAAEzR,EAAG,WAAE6K,GAAU,EAAKY,EAAI,KAA1B,sBAC9D,MAAM,EAAExL,GAAM,4BACR,aAAEwE,EAAY,cAAEsG,EAAa,oBAAE2G,EAAmB,uBAAEC,GACxD9G,UAAc,GAOhB,OACE,gBAAC,KAAS,CACRtJ,SARa,IACf,gBAAC,IAAiB,CAACT,MAAOb,EAAE,iCACzBA,EAAE,gDAOH2R,OAAQF,EACRG,UAAWF,EACXnG,KAAM/G,GAEN,gBAAC,uBAAmB,iBACdgH,EAAI,CACRzL,IAAKyE,EACL8I,uBAAwB,CAACvN,GACzB+K,cAAeA,OAMV+G,GAA8CrQ,IACzD,MAAM,EAAExB,GAAM,2BACR8B,EAAS,sBACTgQ,EAAW,yBACV1K,EAAK2K,EAAWC,GAAgB,YAAyBlQ,EAAOzB,KAAMyB,EAAOC,IAC9E5B,EAAY,aAAqBiH,IAChC0D,EAAe2G,EAAqBC,GAA0B,YAGnEvR,EACI,CACE2I,QAAQ,EACRmJ,iBAAkB,sCAA4B,qBAC9C9R,YACAiN,UAAU,GAEZ,OAEC8E,GAAmC,aAAgB,CACxD3O,MAAuB,OAAhB,yBAAgB,IAAhB,wBAAgB,EAAhB,mBAAkBT,SACzBzB,SAA0B,OAAhB,yBAAgB,IAAhB,wBAAgB,EAAhB,mBAAkBmC,OAC5BC,KAAM,SAGFe,EAAe,UACnB,KAAOsG,UAAiB,IAAIrG,KAAM0N,IAAK,MAAC,OAAAA,EAAE5R,OAAO6R,gBAA8B,QAAb,EAAAhL,aAAG,EAAHA,EAAKhH,gBAAQ,eAAEC,QACjF,CAAC+G,EAAK0D,IAIFtE,EAAc,cACjBhC,EAEG,IAAM,CAACwC,GAAiBxC,GAAe2C,GAAU3C,EAAc4C,IAD/D,IAAM,CAAC,IAAMjG,QAAQyG,OAAO,6BAA4BR,IAE5D,CAAC5C,KAEG,kBAAE0F,GAAsB,YAAuB1F,GAE/C6N,EAAW,cAAmBtS,IAClC,MAAMiK,EAAe,aAAmBjK,GACxC,MAAO,CACL,KAAWoG,QAAQkJ,IACnB,KAAWjJ,WACX,CACEC,KAAM,eAENC,QAAS,mBACTC,UAAWiL,IAEb,KAAWc,OAAO,0BACdtI,EAAa7E,OAAS,EACtB,CACE,CACEkB,KAAM,YAENC,QAAS,oBACTC,UAAW,sBAGf,MACDyD,EAAatJ,IAAiC6R,IAAwB,CACvElM,KAAM,aAAwBkM,GAC9BlS,KAAM,CAAC,UAAW,OAAQ,eAAgB,UAAUyF,SAASyM,EAAI7L,aAC1D6L,EAAI7L,YAAP,WACA6L,EAAI7L,aAAe6L,EAAIrS,KAC3BqG,UAAW,mBACXiM,SAAU,CACRpL,IAAKrH,EACLG,KAAM,aAAwBqS,SAInC,IAEH,OACE,gBAAC,IAAW,iBACN/Q,EAAK,CACTzB,IAAK,CAAEwL,KAAMnE,EAAKuK,OAAQI,EAAWH,UAAWI,GAChDpH,WAAY,CAAEE,gBAAetG,eAAciN,sBAAqBC,0BAChEe,eAAgB,IAAM,CACpB,CACEpS,KAAML,EAAE,2BACRuF,KAAM,YAAkBzD,IAE1B,CAAEzB,KAAML,EAAE,wBAAyBuF,KAAMuM,EAASY,WAEpD1Q,UAAW,CACT,CAAE9B,KAAM,aAAkB,wBAAuB4I,QAAQ,EAAM5G,KAAM,oB,eAEnEhC,KAAM,aAAkB,oBACxB4I,QAAQ,EACR5G,KAAM,gBACFgQ,EAAkC,GAAK,CAAE/R,eAGjD2J,KAAM,EAAG/J,U,cAAU,OACjB,gBAAC,IAAyB,CACxB2G,YAAsB,QAAT,EAAA3G,aAAG,EAAHA,EAAKS,YAAI,eAAEkG,YACxBoD,KAAqB,QAAf,EAAS,QAAT,EAAA/J,aAAG,EAAHA,EAAKS,YAAI,eAAEsJ,YAAI,eAAG,GACxBH,SAAmB,QAAT,EAAA5J,aAAG,EAAHA,EAAKS,YAAI,eAAEmJ,SACrBC,QAAkB,QAAT,EAAA7J,aAAG,EAAHA,EAAKS,YAAI,eAAEoJ,QACpBO,YAAaD,EAAkBC,eAGnChK,UAAW2B,EAAOC,GAClB7B,KAAM,aAAkB,8BACxBG,KAAMyB,EAAOzB,KACbgS,SAAUA,EACV7L,YAAaA,EACbmM,gBAAc,MA2GpBrH,GAA0B5E,YAAc,4BACxCqG,GAA2BrG,YAAc,6BACzC8C,GAA8B9C,YAAc,gCAC5CsH,GAAQtH,YAAc,UACtBmL,GAAiCnL,YAAc,oCAC/C2I,GAA6B3I,YAAc,+BAC3C8K,GAAgB9K,YAAc,mB,kCC57C9B,kgCAoFO,MAAMkM,EAA+B,CAC1C/H,EAAsC,GACtCrG,IAEAqG,EAAepG,KACZiM,I,YACC,OAAgB,QAAhB,EAAAA,aAAM,EAANA,EAAQtQ,gBAAQ,eAAEC,SAA2B,QAAlB,EAAAmE,aAAY,EAAZA,EAAchE,YAAI,eAAEkQ,UAC/B,QAAhB,EAAAA,aAAM,EAANA,EAAQtQ,gBAAQ,eAAED,cAAgC,QAAlB,EAAAqE,aAAY,EAAZA,EAAchE,YAAI,eAAEwD,mBAG7C6O,EAA8B,CACzCvF,EAAsD,GACtD9I,IAEA8I,EAAuB7I,KAAM2C,IAAO,QAAC,OAAa,QAAb,EAAAA,aAAG,EAAHA,EAAKhH,gBAAQ,eAAEC,SAA6B,QAApB,EAAAmE,aAAY,EAAZA,EAAcjE,cAAM,eAAE6R,gBAExEU,EAAyB,CACpCC,EAA0C,GAC1CvO,IAEAuO,EAAiBtO,KACduO,I,oBACC,OAAa,QAAb,EAAAA,aAAG,EAAHA,EAAK5S,gBAAQ,eAAEC,SAA2B,QAAlB,EAAAmE,aAAY,EAAZA,EAAchE,YAAI,eAAEH,QACjC,QAAX,EAAA2S,aAAG,EAAHA,EAAKzS,cAAM,eAAE0S,gBAAkC,QAAlB,EAAAzO,aAAY,EAAZA,EAAchE,YAAI,eAAEH,QACtC,QAAX,EAAA2S,aAAG,EAAHA,EAAKzS,cAAM,eAAE2S,kBAAoC,QAAlB,EAAA1O,aAAY,EAAZA,EAAchE,YAAI,eAAEkQ,UACxC,QAAX,EAAAsC,aAAG,EAAHA,EAAKzS,cAAM,eAAE4S,2BAA6C,QAAlB,EAAA3O,aAAY,EAAZA,EAAchE,YAAI,eAAEwD,mBAGrDoP,EAA6B,CACxCC,EAAkC,GAClC7O,IAEA6O,EAAa5O,KAAM6O,IAAM,UAAC,OAAY,QAAZ,EAAAA,aAAE,EAAFA,EAAIlT,gBAAQ,eAAEC,SAA6C,QAApC,EAAoB,QAApB,EAAAmE,aAAY,EAAZA,EAAcjE,cAAM,eAAEgT,sBAAc,eAAElT,QAE5EmT,EAAgC,KAC3C,MAAM,EAAExT,GAAM,2BACd,OACE,gCACE,gBAAC,KAAa,CAACa,MAAOb,EAAE,uBACxB,wBAAMC,UAAU,cAAcD,EAAE,kCAKzByT,EAAkC,KAC7C,MAAM,EAAEzT,GAAM,2BACd,OACE,gCACE,gBAAC,KAAa,CAACa,MAAOb,EAAE,uBACxB,wBAAMC,UAAU,cAAcD,EAAE,kCAKhCL,EAAqB,CACzB,GACA,GACA,iCACA,iCACA,iCACA,IAAMC,aAGK8T,EAAoE,EAC/ElP,mBAEA,MAAM,EAAExE,GAAM,2BACR0D,EAAK,aACT,mBACAc,EAAajE,OAAOgT,eAAelT,KACnCmE,EAAapE,SAASD,WAExB,OACE,wBAAMF,UAAU,oBACd,gBAAC,OAAI,CAACyD,GAAIA,GACR,gBAAC,IAAqB,M,IAAK1D,EAAE,4BAMxB6H,EAAmE,EAC9ErD,mB,MAEA,MAAM,EAAExE,GAAM,2BACd,OAA2B,QAAnB,EAAAwE,EAAajE,cAAM,eAAEoT,OAC3B,KAAK,IAAkBC,kCACrB,OACE,4BACE,gBAAC,KAA6B,M,IAAK5T,EAAE,0BAG3C,KAAK,IAAkB6T,gCACrB,OAAO,YAAwBrP,IAAiBA,EAAajE,OAAOgT,eAClE,gBAACG,EAAmB,CAAClP,aAAcA,IAEnC,4BACE,gBAAC,IAAc,CAACvE,UAAU,iB,IAAmBD,EAAE,kBAGrD,KAAK,IAAkB8T,0BACrB,OACE,4BACE,gBAAC,IAAoB,M,IAAK9T,EAAE,mBAGlC,QACE,OACE,wBAAMC,UAAW,IAAUuE,EAAajE,OAAOoT,OAAS,aAAe,IACpEnP,EAAajE,OAAOoT,OAAS3T,EAAE,0BAMpCwG,EAA6B,CACjC,IAAMrF,QAAQsJ,KACd,CAACvK,EAAMH,KAAQ,CAEbmH,SAAU,0BACVG,SAAU,IAAM,YAA6B,CAAEC,QAAA,KAASC,OAAA,KAAQC,SAAA,KAAUhD,aAAczE,IACxF2H,aAAc,CACZnE,MAAOrD,EAAK4C,SACZzB,SAAUnB,EAAKsD,OACfnD,KAAMN,EAAIK,SAASC,KACnBF,UAAWJ,EAAIK,SAASD,UACxBsD,KAAM,YAGV,CAACsQ,EAAOhU,KACN,MAAMqS,EAAe,IAAMrS,EAAK,uBAChC,MAAO,CAELmH,SAAU,oCACVb,KAAM,WAAWtG,EAAIK,SAASD,aAAa,6BAA2BqD,UAAU4O,IAChF4B,QAAS5B,KAKF5H,EAAkD,EAAGzK,UAChE,MAAM,EAAEC,GAAM,2BACd,OACE,gCACE,gBAAC,IAAS,CAACC,UAAWN,EAAmB,IACvC,gBAAC,KAAY,CACXO,KAAM,aAAkB,qBACxBG,KAAMN,EAAIK,SAASC,KACnBF,UAAWJ,EAAIK,SAASD,aAG5B,gBAAC,IAAS,CAACF,UAAWN,EAAmB,IACvC,gBAAC,KAAY,CAACO,KAAK,YAAYG,KAAMN,EAAIK,SAASD,aAEpD,gBAAC,IAAS,CAACF,UAAWN,EAAmB,IACvC,gBAACkI,EAAkB,CAACrD,aAAczE,KAEpC,gBAAC,IAAS,CAACE,UAAW,EAAWN,EAAmB,GAAI,cAAe,sBACpEI,EAAIS,KAAKyT,SAAW,WAEvB,gBAAC,IAAS,CAAChU,UAAWN,EAAmB,IACtCI,EAAIS,KAAK0T,qBAAuBlU,EAAE,kBAErC,gBAAC,IAAS,CAACC,UAAWN,EAAmB,IACvC,gBAAC,KAAa,CACZuB,QAASsF,EACTtG,KAAM,aAAkB,qBACxBmB,SAAUtB,OAOPoU,EAAoB,YAAsB3S,IACrD,MAAM,EAAExB,GAAM,2BAiCd,OACE,gBAAC,IAAK,iBACAwB,EAAK,cACGxB,EAAE,8BACdyB,OApC4B,IACvB,CACL,CACEZ,MAAOb,EAAE,YACT0B,UAAW,gBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,iBACT0B,UAAW,qBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,cACTwB,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,sBACTwB,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,uBACTwB,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAO,GACPW,MAAO,CAAEvB,UAAWN,EAAmB,MASzCiC,IAAK4I,EACLlJ,SAAU,IACR,gBAAC,IAAiB,CAACT,MAAOb,EAAE,+BACzBA,EACC,6FAIN0M,YAAU,OAKH0H,EAAuD5S,IAClE,MAAM,EAAExB,GAAM,2BACd,OACE,gBAAC,IAAa,iBACRwB,EAAK,CACTQ,UAAW,CACT,CACE9B,KAAM,aAAkB,qBACxBC,UAAWqB,EAAMrB,UACjB8B,YAAY,EACZC,KAAM,gBAER,CACEhC,KAAM,aAAkB,sBACxBC,UAAWqB,EAAMrB,UACjB8B,YAAY,EACZC,KAAM,kBAGVC,QAAUH,GAAc,IAAMA,EAAUwC,aAAc,OAAQ,IAC9D3D,MAAOb,EAAE,qBACTqO,WAAS,EACTgG,YAAa,CAAE3Q,GAAI,gBACnB4Q,iBAAkBtU,EAAE,2BACpBsC,cAAe6R,EACfI,YAAavU,EAAE,oCAKfwU,EAA2B,EAAGC,SAAQ/D,SAAQ1M,sBAClD,MAAM,EAAEhE,GAAM,2BACd,OAAKyU,EAwBEA,EAAOC,QAAU,KACtB,gBAAC,IAAK,CAAC1R,UAAQ,EAAC/C,UAAU,WAAW8C,QAAQ,UAAUlC,MAAOb,EAAE,gCAC7DA,EAAE,gFAAiF,CAClF0Q,WAEF,gBAAC,KAAY,CACXhK,YAAa1G,EAAE,0BACfiS,iBAAkB,sCAA4B,sBAC9C5R,KAAMqQ,EACNvQ,UAAW6D,EACXnD,MAAO6P,KAhCT,gBAAC,IAAK,CACJ1N,UAAQ,EACR/C,UAAU,WACV8C,QAAQ,UACRlC,MAAOb,EAAE,qCAERA,EACC,mJACA,CAAE0Q,WAEHA,GAAU1M,GACT,gBAAC,KAAY,CACX0C,YAAa1G,EAAE,0BACfiS,iBAAkB,sCAA4B,sBAC9C5R,KAAMqQ,EACNvQ,UAAW6D,EACXnD,MAAO6P,MAsBbiE,EAAqB,EAAGvS,kB,UAC5B,MAAM,EAAEpC,GAAM,2BACR4U,EAAwC,QAAnB,EAAAxS,aAAW,EAAXA,EAAa7B,cAAM,eAAED,MAC1CuU,EAAwD,QAA/B,EAAmB,QAAnB,EAAAzS,aAAW,EAAXA,EAAa7B,cAAM,eAAE6D,kBAAU,eAAEK,KAC9D,EAAGsB,OAAMxF,YAAsB,cAATwF,GAAmC,UAAXxF,GAE1CuU,GACJD,aAAsB,EAAtBA,EAAwBvM,WACxBuM,aAAsB,EAAtBA,EAAwBzE,SACxBpQ,EAAE,0BAEJ,OAAO4U,IAAuB,IAAiBG,uBAC7C,gBAAC,IAAK,CACJ/R,UAAQ,EACR/C,UAAU,gCACV8C,QAAQ,SACRlC,MAAO+T,GAENE,GAED,MAGAE,EAAiC,EAAGN,cACxC,MAAM,EAAE1U,GAAM,2BACd,OAAQ0U,GACN,KAAK,EACH,OAAO,gBAAC,IAAiB,CAAC5K,KAAM,gBAAC,IAAoB,MAAKjJ,MAAOb,EAAE,iBACrE,KAAK,EACH,OAAO,gBAAC,IAAiB,CAAC8J,KAAM,gBAAC,KAAwB,MAAKjJ,MAAOb,EAAE,mBACzE,QACE,OACE,gBAAC,IAAiB,CAChB8J,KAAM,gBAAC,KAA6B,MACpCjJ,MAAOb,EAAE,0BAMNiV,EAA0D,EACrE3H,yBAAyB,GACzB+F,eAAe,GACftT,MACAgT,mBAAmB,GACnBjI,gBAAgB,O,YAEhB,MAAM,EAAE9K,GAAM,4BACR,OAAE0Q,EAAM,gBAAE1M,GAA6B,QAAT,EAAAjE,aAAG,EAAHA,EAAKS,YAAI,QAAI,GAC3C0U,EAA0C,QAA1B,EAAW,QAAX,EAAAnV,aAAG,EAAHA,EAAKQ,cAAM,eAAE2U,qBAAa,eAAEzQ,KAC/C0Q,GAAOA,EAAGC,iBAAiB/U,OAASqQ,GAEjC0B,EAAeS,EAA4BvF,EAAwBvN,GACnEqC,EAAcgR,EAA2BC,EAActT,GACvDiT,EAAMF,EAAuBC,EAAkBhT,GACjD,IAAIsV,gBAAgBhJ,OAAOyF,SAASwD,QAAQC,IAAI,eAClD,YAA6B,CAAEjO,QAAA,KAASC,OAAA,KAAQC,SAAA,KAAUhD,aAAczE,IACrEyV,OAAO/P,KAAK,IAAM,YAAoB,eACtCC,MAAM,KAEX,MAAM,kBAAEwE,EAAiB,kBAAE+F,EAAiB,kBAAEC,GAAsB,YAAuBnQ,GAE3F,OACE,gCACE,uBAAKE,UAAU,mBACb,gBAACuU,EAAwB,CACvBC,OAAQS,EACRxE,OAAQA,EACR1M,gBAAiBA,IAEnB,gBAAC2Q,EAAkB,CAACvS,YAAaA,KAC/B8H,EAAkBC,aAClB8F,EAAkB9F,aAClB+F,EAAkB/F,cAClB,gBAAC,IAA8B,CAC7BD,kBAAmBA,EACnB+F,kBAAmBA,EACnBC,kBAAmBA,EACnBM,aAAW,IAGf,gBAAC,KAAc,CAAC7M,KAAM3D,EAAE,8BACxB,uBAAKC,UAAU,yBACb,gBAACwV,EAAmB,CAClBP,cAAeA,EACflC,IAAKA,EACLjT,IAAKA,EACLqS,aAAcA,EACdhQ,YAAaA,EACb0I,cAAeA,KAGnB,uBAAK7K,UAAU,yBACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,KAAe,CAACoB,SAAUtB,EAAK6D,iBAAiB,KAEnD,uBAAK3D,UAAU,YACb,sBAAIA,UAAU,sBACZ,0BAAKD,EAAE,0BACP,0BACGoS,EACC,gBAAC,KAAY,CACXlS,KAAM,aAAkB,8BACxBG,KAAM,aAAQ+R,GACdjS,UAAW,aAAaiS,GACxBvR,MAAO,aAAQuR,KAGjBpS,EAAE,aAGN,0BAAKA,EAAE,yBACP,0BAAKD,EAAIS,KAAKkN,aAAe1N,EAAE,aAC/B,0BAAKA,EAAE,sBACP,0BACG0Q,GAAU1M,EACT,gBAAC,KAAY,CACX9D,KAAM,aAAkB,sBACxBG,KAAMqQ,EACNvQ,UAAW6D,EACXnD,MAAO6P,GAEP,gBAAC,IAAc,CAACjC,UAAQ,GACtB,gBAACuG,EAA8B,CAACN,QAASQ,aAAa,EAAbA,EAAeR,YAI5D1U,EAAE,aAGN,0BAAKA,EAAE,oBACP,0BACGoC,EACC,gBAAC,KAAY,CACXlC,KAAM,aAAkB,oBACxBG,KAAM,aAAQ+B,GACdjC,UAAW,aAAaiC,GACxBvB,MAAO,aAAQuB,KAGjBpC,EAAE,kBAQhB,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAAC0D,KAAM3D,EAAE,oBACxB,gBAAC,IAAU,CAACoE,WAAuB,QAAX,EAAArE,aAAG,EAAHA,EAAKQ,cAAM,eAAE6D,gBAMvCsR,EAA4B,EAAGR,gBAAe1Q,kBAC7C0Q,EAGEA,EAAcR,QACnB,gBAAC7M,EAAkB,CAACrD,aAAcA,IAElC,gBAACiP,EAAqB,MALf,gBAACD,EAAmB,MASlBiC,EAA0D,EACrEP,gBACA9C,eACAhQ,cACArC,MACAiT,MACAlI,oB,cAEA,MAAM,EAAE9K,GAAM,2BACR2V,EAA0B,SAAsB,QAAT,EAAA5V,aAAG,EAAHA,EAAKS,YAAI,eAAE0T,qBAClD0B,EAAc,SAAsB,QAAT,EAAA7V,aAAG,EAAHA,EAAKS,YAAI,eAAEyT,UACrC4B,EAAkBC,GAAuB,YAAe,GAE/D,YAAgB,K,YAEZD,IACS,QAAT,EAAA9V,aAAG,EAAHA,EAAKS,YAAI,eAAEyT,WAAY2B,EAAYG,UAC1B,QAAT,EAAAhW,aAAG,EAAHA,EAAKS,YAAI,eAAE0T,uBAAwByB,EAAwBI,UAG3DD,GAAoB,GACpBF,EAAYG,QAAmB,QAAT,EAAAhW,aAAG,EAAHA,EAAKS,YAAI,eAAEyT,QACjC0B,EAAwBI,QAAmB,QAAT,EAAAhW,aAAG,EAAHA,EAAKS,YAAI,eAAE0T,sBAE9C,CAACnU,EAAK8V,IAET,MAAMG,EAAmB,CAAC9V,EAAemB,IACvC,aAAUnB,EAAMmB,GAAUoE,KAAK,IAAMqQ,GAAoB,IAIrDG,EAAmB,UAAc,K,MACrC,GAAI7T,EACF,OAA0B,QAAlB,EAAAA,EAAY7B,cAAM,eAAED,OAC1B,KAAK,IAAiB4V,iCACpB,OACE,oCAAgB,2CACblW,EAAE,4BAGT,KAAK,IAAiB+U,uBACpB,OAAO/U,EAAE,gBACX,QACE,OAAOA,EAAE,oBAGf,OAAO,MACN,CAACoC,EAAapC,IACXmW,EAAiC,YACrCrL,EACA/K,EAAIK,SAASD,YAET,kBAAE8P,GAAsB,YAAuBlQ,GAErD,OACE,uBAAKE,UAAU,mBACb,uBAAKA,UAAU,4BACb,uBAAKA,UAAU,qCACb,sBAAIA,UAAU,sBACZ,sBAAIA,UAAU,mCACXD,EAAE,sBACH,gBAAC,IAAc,KACZA,EAAE,4DAGP,0BACG6V,EACC,gBAAC,IAAa,MAEd,gCACE,gBAAC,IAAM,CACL9P,KAAK,SACL/C,UAAQ,EACRqC,QA7CG,IACnB,YAA+B,CAAEb,aAAczE,EAAKiT,MAAKoD,UAAWJ,IA6CpDjT,QAAQ,OACRqC,YAAa4N,EAAG,YACN,sCAETjT,EAAIS,KAAKyT,SAAW,UACpBjB,GACC,gBAAC,IAAa,CAAC/S,UAAU,gDAG5BgQ,EAAkB9F,aACjB,gBAAC,IAA6B,CAC5BkM,SAAS,uDACTlM,YAAa8F,EAAkB9F,kBAQ7C,uBAAKlK,UAAU,qCACb,sBAAIA,UAAU,sBACZ,sBAAIA,UAAU,mCACXD,EAAE,uBACH,gBAAC,IAAc,KACZA,EAAE,uEAGP,0BACG6V,EACC,gBAAC,IAAa,MAEd,gCACE,2BACE,gBAAC,IAAM,CAAC9P,KAAK,SAAS/C,UAAQ,EAACqC,QA9E3B,IAAM,YAA+B,CAAEtF,MAAKqW,UAAWJ,IA8EJjT,QAAQ,QAC5DhD,EAAIS,KAAK0T,qBAAuB,YACjC,gBAAC,IAAa,CAACjU,UAAU,iDAG5BF,EAAIS,KAAK0T,sBAAwB,IAAoBoC,YACpDH,aAA8B,EAA9BA,EAAgChR,QAAS,GACvC,2BACE,gBAAC,IAAO,CACNoD,cAAe,gCAAGvI,EAAE,gDACpBwI,YACE,gBAAC,IAA+B,CAC9BsC,cAAeqL,EACfhW,UAAWJ,EAAIK,SAASD,aAI5B,gBAAC,IAAM,CAAC4F,KAAK,SAAS/C,UAAQ,EAACD,QAAQ,QACrC,gBAAC,IAAkB,CAAC9C,UAAU,oBAC7BD,EAAE,oCAUvB,uBAAKC,UAAU,oEACb,sBAAIA,UAAU,sBACZ,sBAAIA,UAAU,mCAAmCD,EAAE,uBACnD,0BACE,gBAAC0V,EAAyB,CAACR,cAAeA,EAAe1Q,aAAczE,MAG1EmV,GAAiBA,EAAcR,SAC9B,gCACE,uBAAKzU,UAAU,6BACf,uBAAKA,UAAU,+BACD,QAAX,EAAAF,aAAG,EAAHA,EAAKQ,cAAM,eAAE6R,eAAgBA,EAC5B,gBAAC,OAAI,CACH1O,GAAI,WAAW3D,EAAIK,SAASD,aAAa,aACvC,iCACGJ,EAAIQ,OAAO6R,gBAEfpS,EAAE,oBAGL,4BAAOA,EAAE,qBAEC,QAAX,EAAAD,aAAG,EAAHA,EAAKQ,cAAM,eAAEoT,SAAU,IAAkBE,kCAC/B,QAAX,EAAA9T,aAAG,EAAHA,EAAKQ,cAAM,eAAEgT,iBACbnR,EACE,gBAAC,OAAI,CACHsB,GAAI,WAAW3D,EAAIK,SAASD,aAAa,aAAkB,uBACzDJ,EAAIQ,OAAOgT,eAAelT,QAG5B,4BAAO4V,IAGT,4BAAOjW,EAAE,2BAWduW,EAAmE/U,IAC9E,MAAMM,EAAS,sBACf,OACE,gBAAC,IAAW,iBACNN,EAAK,CACTrB,UAAW2B,EAAOC,GAClB7B,KAAM,aAAkB,qBACxBG,KAAMyB,EAAOzB,KACb6F,MAAO,CAAC,KAAWC,QAAQ8O,GAAsB,KAAW7O,YAC5DpE,UAAW,CACT,CACE9B,KAAM,aAAkB,wBACxB4I,QAAQ,EACR3I,UAAWqB,EAAMrB,UACjB+B,KAAM,oBAER,CACEhC,KAAM,aAAkB,oBACxB4I,QAAQ,EACR3I,UAAWqB,EAAMrB,UACjB+B,KAAM,gBAER,CACEhC,KAAM,aAAkB,8BACxBC,UAAWqB,EAAMrB,UACjB2I,QAAQ,EACR5G,KAAM,0BAER,CACEhC,KAAM,aAAkB,qBACxBC,UAAWqB,EAAMrB,UACjB2I,QAAQ,EACR5G,KAAM,kBAGVsE,YAAaA,MA2CnB4N,EAAkB1N,YAAc,oBAChCuO,EAAoBvO,YAAc,sBAClC6P,EAAwB7P,YAAc,2B,kCC3yBtC,8tBAyFA,MAAM/G,EAAqB,CACzB,GACA,GACA,GACA,EAAW,cAAe,qBAAsB,sBAChD,EAAW,cAAe,sBAC1B,EAAW,cAAe,uBAC1B,IAAMC,aAGF4W,EAAoBzW,IACxB,MAAM,MAAEO,EAAK,OAAEC,EAAM,MAAEoT,EAAK,WAAEvP,IAAerE,aAAG,EAAHA,EAAKQ,SAAU,GAE5D,GAAID,GAAS,IAAWA,GACtB,MAAO,CACLyF,KAAM,QACNP,MAAOlF,GAIX,GAAIC,GAAU,IAAWA,GACvB,MAAO,CACLwF,KAAM,SACNP,MAAOjF,GAIX,GAAIoT,GAAS,IAAWA,GACtB,MAAO,CACL5N,KAAM,QACNP,MAAOmO,GAIX,MAEM8C,EADkB,iBAAfrS,IAA4BsS,MAAMC,QAAQvS,IAA8B,OAAfA,EACjB,CAACA,GAAcA,EAE1DwS,EAAiBH,aAAmB,EAAnBA,EAAqB1V,OACzC+M,GAAyC,SAAbA,EAAEvN,QAEjC,GAAIqW,aAAc,EAAdA,EAAgBzR,OAAQ,CAC1B,MAAM0R,EAAQD,EAAelW,IAAKoN,GAA4BA,EAAE/H,MAChE,MAAO,CACLA,KAAuB,IAAjB8Q,EAAM1R,OAAe,YAAc,aACzCK,MAAOqR,EAAMC,KAAK,OAItB,OAAO,MAGHC,EAAoB3P,I,UACxB,MAAM4P,EAA0E,QAApD,EAA0B,QAA1B,EAAa,QAAb,EAAA5P,aAAG,EAAHA,EAAKhH,gBAAQ,eAAE6J,mBAAW,eAAG,+BAAuB,QAAI,GAC9E7B,GAAoB4O,aAAmB,EAAnBA,EAAqB3O,MAAM,OAAQ,GAC7D,OAAoC,IAA7BD,EAAkBjD,QAAyC,KAAzBiD,EAAkB,IAGhD6O,EAA8C,EAAGC,cAC5D,MAAM3W,EAA4BiW,EAAiBU,GACnD,IAAK3W,EACH,OAAO,qCAGT,MAAM,KAAEwF,EAAI,MAAEP,GAAUjF,EACxB,OACE,wBAAMN,UAAU,oBACb8F,EACD,wBAAM9F,UAAU,iBAAe,KAAU,IAC9B,YAAVuF,EAAsB,gBAAC,KAAa,CAAC3E,MAAO2E,IAAY,gBAAC,KAAM,CAACjF,OAAQiF,MAKzE2R,EAAwBD,IAC5B,MAAM3W,EAASiW,EAAiBU,GAChC,OAAO3W,EAAS,GAAGA,EAAOwF,SAASxF,EAAOiF,QAAU,IAGzC4R,EAAkD,EAAGrX,MAAKsX,oBACrE,MACMC,EAAU,CAAE,CADG,aAAavX,IACAA,EAAK,cAAe,CAAEsB,SAAUtB,IAClE,OACE,gCACE,gBAAC,IAAS,CAACE,UAAWN,EAAmB,IACvC,gBAAC,IAAW,CAACI,IAAKA,KAEpB,gBAAC,IAAS,CACRE,UAAW,EAAWN,EAAmB,GAAI,iBAAgB,yBACrCI,EAAIG,MAE3BH,EAAIG,MAENmX,GACC,gBAAC,IAAS,CAACpX,UAAWN,EAAmB,IACtCI,EAAIK,SAASD,UACZ,gBAAC,KAAY,CACXD,KAAK,YACLW,MAAOd,EAAIK,SAASD,UACpBE,KAAMN,EAAIK,SAASD,YAEnB,KAKR,gBAAC,IAAS,CAACF,UAAWN,EAAmB,IACvC,gBAACsX,EAAa,CAACC,QAASnX,KAE1B,gBAAC,IAAS,CAACE,UAAWN,EAAmB,IACvC,gBAAC,IAAS,CAACO,KAAMH,EAAIG,KAAMqX,OAAQxX,EAAIK,SAASmX,UAElD,gBAAC,IAAS,CAACtX,UAAWN,EAAmB,IACvC,gBAAC,KAAS,CAACyK,UAAWrK,EAAIK,SAASqQ,qBAErC,gBAAC,IAAS,CAACxQ,UAAWN,EAAmB,IACvC,gBAAC,KAAc,CAAC2X,QAASA,EAASlS,WAAY,IAAMrF,EAAIK,SAAU,0BAMpEoX,EAAuBzX,GAAkD,aAAaA,GAE/E0X,EAA2CjW,IACtD,MAAM,EAAExB,GAAM,4BACR,YAAE0X,EAAW,cAAEL,GAAkB7V,EAEjCiK,EAAqB,CACzB5K,MAAOb,EAAE,eACT0B,UAAW,gBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEnCgY,EAAqB,CACzB9W,MAAOb,EAAE,eACT0B,UAAW,OACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEnC+L,EAA0B,CAC9B7K,MAAOb,EAAE,oBACT2L,SAAU,sBACVhK,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEnCkM,EAAuB,CAC3BhL,MAAOb,EAAE,iBACT2L,SAAU,gBACVhK,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEnCiY,EAAuB,CAC3B/W,MAAOb,EAAE,iBACT0B,UAAW,kBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEnCmM,EAA4B,CAChCjL,MAAOb,EAAE,uBACT0B,UAAW,6BACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEnCqM,EAAsB,CAC1BnL,MAAO,GACPW,MAAO,CAAEvB,UAAWN,EAAmB,KAqBnC4L,EAAO,UACX,K,UACE,OAUE,QAVF,EAAe,QAAf,EAAU,QAAV,EAAA/J,EAAM+J,YAAI,eAAE7K,WAAG,sBAAIX,IACjB,GAAIA,EAAI8X,YAAc9X,EAAIG,KACxB,OAAOH,EAET,MAAMoO,EAAY3M,EAAMsW,MAAM,GAC9B,OAAO,OAAP,QACED,WAAY,YAAuB1J,GACnCjO,KAAM,aAAiBiO,IACpBpO,YAEL,QAAI,IACR,CAACyB,EAAM+J,KAAM/J,EAAMsW,QAGrB,OACE,gBAAC,IAAK,iBACAtW,EAAK,CACTmL,YAAa,CACXoL,cAAeZ,EACfK,uBAEFjM,KAAMA,EACNjK,SAAU,IACRoW,EACE,gBAAC,IAAiB,CAAC7W,MAAOb,EAAE,iCACzBA,EAAE,mEAGL,gBAAC,IAAiB,CAACa,MAAOb,EAAE,0BACzBA,EACC,4FAGL,aAEQ,WACXyB,OAAQ4V,EAxDQ,IAAgB,CAClC5L,EACAkM,EACAjM,EACAG,EACA+L,EACA9L,EACAE,GAEsB,IAAgB,CACtCP,EACAkM,EACA9L,EACA+L,EACA9L,EACAE,GA0CEpK,IAAMoW,GAAc,gBAACZ,EAAe,iBAAKY,EAAS,CAAEX,cAAeA,KACnE3K,YAAU,MA+BHuL,GAAoBzW,I,MAC/B,MAAM,EAAExB,GAAM,2BACR8R,EAAW,yBACV3R,GAAa,gBACb+X,GAA+B,eAChC,IACJnY,EAAG,UACHsC,GAAY,EAAI,gBAChB8V,GAAkB,EAAK,qBACvBC,GAAuB,EAAK,qBAC5BC,GAAuB,GACrB7W,GACG8W,EAAQC,GAAY,cACrBC,EAAW,wBACXC,EAAW,yBACVC,EAAcC,GAAmB,YAAe,GAGjD3O,EAAe,YAAmBjK,GAIlCoC,EAED,cACFH,GACC,IAAUA,EAAYX,GAAa,IAAMA,EAASkK,KAAOqN,GAASA,IAAO7X,OACvE,EAAGb,OAAME,YAAYyY,EAAGC,KACtB9O,SAAajJ,OAAQ6X,GAASA,EAAK1Y,OAASA,GAAMiF,OAAS,IARnD4T,EASD3Y,EAASU,iBAAmB,GATEkY,EASEF,EAR7CC,EAAUhY,OAAO,EAAGE,SAAU+X,EAAMjY,OAAO,EAAGX,cAAeA,EAASa,MAAQA,GAAKkE,OAAS,IAQjCA,OAAS,EATvD,IAAC4T,EAA6BC,IAW3C,CAAChP,IAUGiP,EAPmBjP,EAAaV,KAAMiJ,IAC1C,MAAMpE,EAAY,YAAwBoE,GACpCnE,EAAQkK,EAAOnK,GAErB,OAAOC,aAAK,EAALA,EAAOnM,cAGiC8U,EAAiBhX,GAC5DmZ,EAAoBD,GAAwBf,EAC5CiB,EArEqB,EAC3Bb,EACAtO,EACA7J,IAEO6J,EAAarF,OAAO,CAACyU,EAAqB7G,KAC/C,MAAMpE,EAAY,YAAwBoE,GACpCnE,EAAQkK,aAAM,EAANA,EAASnK,GAEvB,IAAKC,EACH,OAAOgL,EAGT,MAAQtW,SAAUS,EAAOsU,WAAYjO,EAAO,KAAE1J,EAAI,WAAE+B,GAAemM,EACnE,OAAO,OAAP,wBACKgL,GAAmB,CACtB,CAAC7G,EAAIrS,MAAO,OAAF,QACR+R,iBAAkB,CAAE1O,QAAOqG,UAAS1J,QACpC4I,QAAQ,EACR7G,cACIA,GAAc9B,EAAY,CAAEA,aAAc,OAGjD,IA8CsBkZ,CACvBf,EACAtO,EACAkP,EAAoB,KAAO/Y,GAGvB6B,EAAY,YAA2DmX,GAGvEG,GACHf,GAAYgB,OAAOC,KAAKL,GAAkBhU,OAAS6E,EAAa7E,OACnE,YAAgB,MACTuT,GAAgBY,IACnBb,EAAS,eACTE,GAAgB,KAEjB,CAACW,EAAoBZ,EAAcD,IAEtC,MAAMgB,EACJzP,EAAa7E,OAAS,EAClB6E,EAAarF,OACX,CAACC,EAAK2N,IAAS,OAAD,wBAAM3N,GAAG,CAAE,CAAC,YAAwB2N,IAAOA,EAAI7L,aAAe6L,EAAIrS,OAChF,IAEF,GAIAqL,EAAO,UAAc,IAAMpJ,EAAQH,GAAY,CAACA,EAAWG,IAE3DuX,EACJH,OAAOC,KAAKL,GAAkBhU,OAAS,EACnC,CACE,CACEwU,gBAAiB3Z,EAAE,qBACnB+F,KAAM,sCACN6T,QAAS,EAAG1Z,UAAWA,EACvB8Y,MAAOO,OAAOC,KAAKL,GAAkBzY,IAAKR,IAAS,CACjD2Z,GAAI,aAAiB3Z,GACrBW,MAAO,aAAiBX,MAE1Ba,OAAQ,CAAC+Y,EAASzY,MACXyY,GAAYA,EAAQC,UAAaD,EAAQC,SAAS5U,SAGhD2U,EAAQC,SAASjU,SAASzE,EAASnB,QAIhD,IAEC8Z,EAAYC,EAAcC,GAAkB,4BAAkB3O,EAAMmO,GACrE/H,EAAS4H,OAAOY,OAAOnY,GAAWoY,MAAOC,GAAMA,EAAE1I,QAEjDC,EAAkF,QAAjD,EAAA2H,OAAOY,OAAOnY,GAAWyC,KAAM4V,GAAMA,EAAEzI,kBAAU,eACpFA,UAEJ,OAAO2G,EAAW,KAChB,gCACE,gBAAC,UAAc,CAAC1X,MAAOwB,EAAYrC,EAAE,0BAAuBmN,GACzD8L,GACC,uBAAKhZ,UAAU,yDACb,gBAAC,IAAqC,OAG1C,gBAAC,yBAAsB,CAACoF,QAvCNnF,GAASsY,EAAY1G,EAASY,SAAS4H,QAAQ,YAAapa,GAA1C,SAuCa8Y,MAAOS,GACrDzZ,EAAE,oBAGP,gBAAC,IAAY,KACX,gBAAC,UAAc,CACbuL,KAAMyO,EACNrI,OAAQA,EACR+H,WAAYA,EACZQ,eAAgBA,EAChB9B,qBAAsBA,EACtBD,gBAAiBA,EACjBE,qBAAsBA,IAExB,gBAACZ,EAAW,CACVlM,KAAM0O,EACNtI,OAAQA,EACRC,UAAWA,EACX8F,YAAsD,IAAzC6B,OAAOC,KAAKL,GAAkBhU,OAC3CkS,cAAe6B,OAOnBqB,GAAiE/Y,IACrE,MAAM,EAAExB,GAAM,2BACR8R,EAAW,yBACVoG,GAA+B,eAEhC,UACJ/X,EAAS,IACTiH,EAAG,UACH/E,GAAY,EAAI,gBAChB8V,GAAkB,EAAK,qBACvBC,GAAuB,EAAK,qBAC5BC,GAAuB,GACrB7W,EACEgZ,EAAgB1I,EAASY,SAAZ,SAGjB5P,SAAUS,EACVsU,WAAYjO,EAAO,KACnB1J,EAAI,WACJ+B,EAAU,MACVwY,EAAK,YACLC,GACElZ,EAAMmZ,SACJ1B,EAAuBhX,GAAc8U,EAAiB3P,GACtD8R,EAAoBD,GAAwBf,GAC3ClW,EAAW2P,EAAQC,GAAa,YAAmB,eACxDK,iBAAkB,CAAE1O,QAAOqG,UAAS1J,QACpC4I,QAAQ,EACR7G,eACKiX,GAAqBjX,GAAc9B,EAAY,CAAEA,aAAc,MAG/D6Z,EAAYC,EAAcC,GAAkB,4BAAkBlY,GAErE,OACE,gCACE,gBAAC,UAAc,CAACnB,MAAOwB,EAAY,GAAGqY,OAAgBvN,GACnD8L,GACC,uBAAKhZ,UAAU,yDACb,gBAAC,IAAqC,OAG1C,gBAAC,qBAAkB,CAACyD,GAAI8W,GACrBxa,EAAE,0BAA2B,CAAEya,YAGpC,gBAAC,IAAY,KACX,gBAAC,UAAc,CACblP,KAAMyO,EACNrI,OAAQA,EACRuI,eAAgBA,EAChB9B,qBAAsBA,EACtBD,gBAAiBA,EACjBE,qBAAsBA,IAExB,gBAACZ,EAAW,CACVlM,KAAM0O,EACNtI,OAAQA,EACRC,UAAWA,EACXyF,cAAe6B,OAOZ0B,GAAmBpZ,IAC9B,MAAMqZ,EAAmB,YAAoBrZ,EAAMtB,OAC5CC,GAAa,gBACbwa,EAAUpC,GAAY,YAAY/W,EAAMtB,OACxCwY,EAAcC,GAAmB,YAAe,GACjDF,EAAW,wBAGXa,GAAsBf,IAAaoC,EAQzC,GAPA,YAAgB,MACTjC,GAAgBY,IACnBb,EAAS,eACTE,GAAgB,KAEjB,CAACF,EAAUC,EAAcY,IAExBf,IAAaoC,EACf,OAAO,KAGT,IAAKA,EACH,OAAO,gBAAC,eAAY,MAGtB,MAAQ7X,SAAUS,EAAOsU,WAAYjO,EAAO,KAAE1J,GAASya,EAEvD,OAAOE,EACL,gBAAC,IAAc,iBACTrZ,EAAK,CACTnB,KAAM,KACN+N,MAAO,CAAE7K,QAAOqG,UAAS1J,QACzBA,KAAMsB,EAAMtB,KACZC,UAAWA,EACX0N,OAAQgN,KAGV,gBAACN,GAAsB,iBAAK/Y,EAAK,CAAErB,UAAWA,EAAWwa,SAAUA,MAIjEG,GAA0C,EAAGC,UAAShb,MAAKib,uBAAsBC,aACrFD,aAAoB,EAApBA,EAAsB7V,QAAS,EAC7B,uBAAKlF,UAAU,OACZ+a,EAAqBta,IAAKwa,GAEvB,gBAAC,IAAqB,CACpBjb,UAAU,WACVW,IAAKsa,EAAiB3V,KACtBQ,KAAM,IAAexF,OACrB4a,WAAYD,EACZ9M,MAAO2M,EACPhb,IAAKA,EACLkb,OAAQA,MAKd,KAEOG,GAAiB,YAAe,EAAGnN,MAAK7G,MAAK2T,UAAShb,U,4BACjE,MAAM,EAAEC,GAAM,4BACR,KAAEE,EAAI,OAAEK,GAAWR,GAClBsb,EAAcC,GAAmB,WAAe,OAIjD,YAAE5U,EAAW,gBAAE6U,EAAe,kBAAEC,EAAiB,QAAE5R,GAMrD,QALF,MACiD,QAA3C,EAAoC,QAApC,EAAS,QAAT,EAAAxC,aAAG,EAAHA,EAAK5G,YAAI,eAAEib,iCAAyB,eAAEC,aAAK,QAAI,MACD,QAA9C,EAAoC,QAApC,EAAS,QAAT,EAAAtU,aAAG,EAAHA,EAAK5G,YAAI,eAAEib,iCAAyB,eAAEvN,gBAAQ,QAAI,IACtDzJ,KAAMkX,I,MACN,OAAOA,EAAItb,QAAsB,QAAb,EAAA4N,aAAG,EAAHA,EAAK7N,gBAAQ,eAAEC,OAAQsb,EAAI/R,WAAYmR,aAAO,EAAPA,EAASlD,qBACpE,QAAI,GAEFoD,EACyE,QAA7E,EAA4D,QAA5D,EAAoD,QAApD,EAAmB,QAAnB,EAAS,QAAT,EAAAhN,aAAG,EAAHA,EAAKzN,YAAI,eAAEob,gBAAQ,eAAEnX,KAAMoX,GAAMA,EAAExb,OAASuJ,UAAQ,eAAEqR,cAAM,eAAEa,uBAAe,QAC5E,YAAcf,IAEX,YACJgB,EAAW,qBACXC,EAAoB,4BACpBC,EAA2B,uBAC3BC,IACGV,UAAqB,IAAI7W,OAAO,CAACC,EAAKuW,K,cACzC,OAAI,YAAuBA,GAClB,OAAP,wBACKvW,GAAG,CACNoX,qBAAsBb,KAKG,QAA3B,EAAAA,EAAW,wBAAgB,eAAErV,SAAS,IAAiB1B,cACnC,eAApB+W,EAAW5V,KAEJ,OAAP,wBACKX,GAAG,CACNqX,4BAA6B,IAAoC,QAA/B,EAAArX,EAAIqX,mCAA2B,QAAI,GAAKd,MAI/C,QAA3B,EAAAA,EAAW,wBAAgB,eAAErV,SAAS,IAAiBiW,cAClD,OAAP,wBACKnX,GAAG,CACNmX,YAAa,IAAoB,QAAf,EAAAnX,EAAImX,mBAAW,QAAI,GAAKZ,KAIvC,OAAP,wBACKvW,GAAG,CACNsX,uBAAwB,IAA+B,QAA1B,EAAAtX,EAAIsX,8BAAsB,QAAI,GAAKf,MAEjE,IAEH,OACE,uBAAKlb,UAAU,gCACb,uBAAKA,UAAU,mBACZob,GAAgB,gBAAC,IAAU,CAAC/S,QAAS+S,IACtC,gBAAC,KAAc,CAAC1X,KAAM3D,EAAE,wBAAyB,CAAEE,KAAMwG,GAAexG,MACxE,gBAAC4a,GAAW,CACVC,QAASA,EACThb,IAAKA,EACLkb,OAAQA,EACRD,qBAAsBe,IAExB,uBAAK9b,UAAU,iEACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,KAAe,CAACoB,SAAUtB,KAE5Bic,GACC,gBAAC,IAAqB,CACpBpb,IAAKob,EAAqBzW,KAC1BtF,UAAU,WACVkb,WAAYa,EACZ5N,MAAO2M,EACPhb,IAAKA,EACLkb,OAAQA,EACRlV,KAAM,IAAexF,UAGxB2b,aAAsB,EAAtBA,EAAwB/W,QAAS,GAChC,gBAAC,IAAyB,CACxBgX,YAAaD,EACbE,cAAc,WACdhO,MAAO2M,EACPhb,IAAKA,EACLkb,OAAQA,EACRlV,KAAM,IAAexF,aAM7B,IAAUgb,IACV,uBAAKtb,UAAU,mBACb,uBAAKA,UAAU,iEACb,uBAAKA,UAAU,OACb,gBAAC,IAAyB,CACxBkc,YAAaZ,EACba,cAAc,WACdhO,MAAO2M,EACPhb,IAAKA,EACLsc,QApGOC,GAAehB,EAAgBgB,EAAIhU,SAqG1C2S,OAAQA,EACRlV,KAAM,IAAevF,UAM9BkW,MAAMC,QAAQpW,aAAM,EAANA,EAAQ6D,cACpB6X,UAA+B,IAAI7B,MAAM,EAAG7U,UAAoB,eAATA,IACtD,uBAAKtF,UAAU,kBAAiB,YAAW,qBACzC,gBAAC,KAAc,aAAW,6BAA6B0D,KAAM3D,EAAE,uBAC/D,gBAAC,IAAU,CAACoE,WAAY7D,EAAO6D,eAGpC6X,aAA2B,EAA3BA,EAA6B9W,QAAS,GACrC8W,EAA4Bvb,IAAKya,GAC/B,gBAAC,IAAoB,CACnBva,IAAKua,EAAW5V,KAChB4V,WAAYA,EACZF,OAAQA,EACRlb,IAAKA,QASXwc,GAA4B,EAAG5B,eACnC,MAAM,EAAE3a,GAAM,2BACR8B,EAAS,uBACT,QAAE0a,EAAO,GAAEza,EAAE,KAAE1B,EAAI,OAAEmD,GAAW1B,EAChCgQ,EAAW,yBACV1K,GAAO,YAAyBoV,EAASza,GAC1C0a,EAAc,cAAkB,CAACC,EAAwBrb,KAC7D,MAAMiW,EAAU,CACd,CAAC,aAAkBoF,IAAiBrb,EACpC,cAAe,CAAEA,aAEnB,OAAO,gBAAC,KAAc,CAACiW,QAASA,EAASvU,QAAS,IAAkB4Z,YACnE,IAEH,OACE,gBAAC,IAAW,CACVtc,KAAMA,EACNH,KAAMsD,EACNrD,UAAW4B,EACX6I,WAAYxD,EACZpF,UAAW,CACT,CACE9B,KAAM,gCAA8BA,KACpCG,KAAM,aAAasa,GACnB7R,QAAQ,EACR5G,KAAM,QAGV0a,iBAAkBH,EAClB9J,gBAAc,EACdF,eAAgB,IAAM,CACpB,CACEpS,KAAML,EAAE,2BACRuF,KAAM,WAAWzD,EAAOC,MAAM,6BAA2ByB,UAE3D,CACEnD,KAAMyB,EAAO0a,QACbjX,KAAMuM,EAASY,SAASmK,MAAM,EAAG/K,EAASY,SAASoK,YAAY,OAEjE,CACEzc,KAAML,EAAE,uBAAwB,CAAE4Y,KAAM,aAAiB9W,EAAO0B,UAChE+B,KAAM,GAAGuM,EAASY,WAGtBxM,MAAO,CACL,KAAWC,QAAS3E,GAAU,gBAAC4Z,GAAc,iBAAK5Z,EAAK,CAAE4F,IAAKA,MAC9D,KAAWhB,WACX,CAEEE,QAAS,gBACTD,KAAM,YACNE,UAAW,KAEb,KAAW+L,OAAO,2BAMbyK,GAAsBvb,IACjC,MAAM,OAAEgC,EAAM,GAAEzB,EAAE,KAAE1B,GAAS,sBACvB2c,EAAsB,YAAuBxZ,IAC5CmX,EAAUpC,GAAY,YAAY/U,GACzC,GAAI+U,IAAaoC,EACf,OAAO,KAGT,IAAKA,EACH,OAAO,gBAAC,eAAY,MAGtB,MAAQ9C,WAAYjO,EAAS9G,SAAUS,EAAK,KAAErD,GAASya,EACvD,OAAOqC,EACL,gBAAC,IAAc,iBACTxb,EAAK,CACT4M,MAAO,CAAE7K,QAAOqG,UAAS1J,QACzBC,UAAW4B,EACX7B,KAAMsD,EACNnD,KAAMA,EACNwN,OAAQmP,KAGV,gBAACT,GAAyB,iBAAK/a,EAAK,CAAEmZ,SAAUA,MAsGpDlD,EAAY/Q,YAAc,cAC1B0U,GAAe1U,YAAc,iBAC7BuR,GAAiBvR,YAAc,mBAC/B6T,GAAuB7T,YAAc,yBACrCkU,GAAgBlU,YAAc,kBAC9B6V,GAA0B7V,YAAc,4BACxCqW,GAAmBrW,YAAc,qBACjC0Q,EAAgB1Q,YAAc,kBAC9BoU,GAAYpU,YAAc,e,kCCp6B1B,+TAWO,MAAMuW,EAAsBzX,QACZ,IAAVA,EACF,KAEY,iBAAVA,GAAsBA,EAAM0X,QAAQ,MAAQ,EAC9C1X,EAGF,IAAYA,GAGR2X,EAAmE3b,IAC9E,MAAM,gBAAE4b,GAAkB,GAAS5b,GAC7B,EAAExB,GAAM,2BACd,OACE,gCACGod,GACC,uBAAKnd,UAAU,iBACb,yBAAID,EAAE,4EAGV,uBAAKC,UAAU,qBACb,uBAAKA,UAAU,aACb,gBAAC,IAAU,CACTI,MAASmB,EAAMP,KAAO,mBAAhB,QACNoc,SAAWC,IACT9b,EAAM+b,qBAAqBD,EAAEE,OAAOhY,QAEtCA,MAAM,gBACNiY,QAAgC,kBAAvBjc,EAAMkc,aACf7c,MAAOb,EAAE,wBACT2d,SAAU3d,EAAE,oBACZ4d,UAAkC,kBAAvBpc,EAAMkc,cAEjB,uBAAKzd,UAAU,mBACb,qBAAGA,UAAU,8BACVD,EACC,sFAIJ,uBAAKC,UAAU,qBACb,uBAAKA,UAAU,YACb,yBAAO4d,QAAQ,wBAAwB5d,UAAU,+BAC9CD,EAAE,4BAGP,uBAAKC,UAAU,0BACb,uBAAKA,UAAU,eACb,uBAAKA,UAAU,uBACb,yBACE6d,SAAiC,kBAAvBtc,EAAMkc,aAChBK,YAAY,MACZC,KAAM,EACNjY,KAAK,OACL9F,UAAU,uBACV4Z,GAAG,wBACHrU,MAAOhE,EAAMyc,eACbZ,SAAWC,GAAM9b,EAAM0c,uBAAuBZ,EAAEE,OAAOhY,OAAM,mBAC5C,+BAElBhE,EAAM2c,UACL,wBAAMle,UAAU,6BACd,gBAAC,IAAO,CAACyO,QAAS1O,EAAE,qCAClB,4BAAOA,EAAE,gBAAiB,CAAEyI,MAAOjH,EAAM2c,gBAMnD,qBAAGle,UAAU,wBAAwB4Z,GAAG,8BACrC7Z,EACC,kIAOR,uBAAKC,UAAU,qBACb,uBAAKA,UAAU,YACb,yBAAO4d,QAAQ,kBAAkB5d,UAAU,+BACxCD,EAAE,sBAGP,uBAAKC,UAAU,0BACb,uBAAKA,UAAU,eACb,uBAAKA,UAAU,uBACb,yBACE6d,SAAiC,kBAAvBtc,EAAMkc,aAChBK,YAAY,MACZC,KAAM,EACNjY,KAAK,OACL9F,UAAU,uBACV4Z,GAAG,kBACHrU,MAAOhE,EAAM4c,SACbf,SAAWC,GAAM9b,EAAM6c,iBAAiBf,EAAEE,OAAOhY,OAAM,mBACtC,yBAEnB,wBAAMvF,UAAU,6BACd,gBAAC,IAAO,CAACyO,QAAS1O,EAAE,qCAClB,4BAAOA,EAAE,0BAA2B,CAAEyI,MAAOjH,EAAM2c,gBAK3D,qBAAGle,UAAU,wBAAwB4Z,GAAG,wBACrC7Z,EACC,mJAUd,uBAAKC,UAAU,aACb,gBAAC,IAAU,CACTI,MAASmB,EAAMP,KAAO,mBAAhB,QACNoc,SAAWC,IACT9b,EAAM+b,qBAAqBD,EAAEE,OAAOhY,QAEtCA,MAAM,WACNiY,QAAgC,aAAvBjc,EAAMkc,aACf7c,MAAOb,EAAE,mBACTsK,KAAMtK,EAAE,+DACR4d,UAAkC,aAAvBpc,EAAMkc,mBAQhBY,EAA+B,aACzC9c,IACC,MAAOkc,EAAca,GAAmB,WACtC,IAAM/c,EAAMgd,WAAWhe,KAAM,mBAExByd,EAAgBQ,GAAqB,WAC1C,IAAMjd,EAAMgd,WAAWhe,KAAM,wCAAyC,SAEjE4d,EAAUM,GAAe,WAC9B,IAAMld,EAAMgd,WAAWhe,KAAM,kCAAmC,SAG5D,EAAER,GAAM,2BAoBd,OACE,wBAAM2e,SAnBQC,IACdA,EAAMC,iBAEN,MAAMC,EAAe,CAAEvZ,KAAM,+BAAgCD,GAAI,UAC5C,kBAAjBoY,IACFoB,EAAMtZ,MAAQ,CACZyY,eAAgBhB,EAAmBgB,GAAkB,OACrDG,SAAUnB,EAAmBmB,GAAY,QAE3CU,EAAMxZ,GAAK,OAEb,MAAMyZ,EAAU,aAAS,kBAAiBvd,EAAMgd,WAAY,CAC1DM,EACA,CAAEvZ,KAAM,sBAAuBC,MAAOkY,EAAcpY,GAAI,aAE1D9D,EAAMwd,cAAcD,EAASvd,EAAMyd,QAIX5e,KAAK,OAAOJ,UAAU,iBAC5C,gBAAC,IAAU,KAAED,EAAE,gCACf,gBAAC,IAAS,KACR,gBAACmd,EAAuB,CACtBO,aAAcA,EACdO,eAAgBA,EAChBG,SAAUA,EACVb,qBAAsBgB,EACtBL,uBAAwBO,EACxBJ,iBAAkBK,EAClBP,SAAU3c,EAAMgd,WAAWhe,KAAK2d,YAGpC,gBAAC,IAAiB,CAChB9C,aAAc7Z,EAAM6Z,aACpB6D,WAAY1d,EAAM0d,WAClBC,WAAYnf,EAAE,eACdof,OAAQ5d,EAAM4d,YAOXC,EAA+B,YAAoBf,GAuBhEnB,EAAwBzW,YAAc,2B,kCCnOtC,mWAwDA,MAAM4Y,EAAkE,EAAGnf,gBACzE,MAAM,EAAEH,GAAM,2BACRuf,EAAsBvf,EAAE,0DAA2D,CACvFG,cAEIqf,EAAoBxf,EAAE,kDAC5B,OACE,uBAAKC,UAAU,kCACb,gBAAC,OAAI,aACO,+BACVyD,GAAI,aAAsB,6BAA4B,KAAMvD,IAE3DA,EAAYof,EAAsBC,KAMrCC,EAA4D,EAAGtf,YAAWQ,UAASZ,U,QACvF,MAAM,EAAEC,GAAM,2BACR0f,EACsB,QAA1B,EAAa,QAAb,EAAA3f,aAAG,EAAHA,EAAKK,gBAAQ,eAAE6J,mBAAW,eAAG,IAAc0V,wBAC7C,OACE,gCACE,sBAAI1f,UAAU,6CACXD,EAAE,qCAEL,yBACGA,EAAE,kDACF0f,GACC,gC,IAEG1f,EAAE,qFAIT,gBAAC,IAAW,CAACC,UAAU,mDACrB,gBAAC,OAAI,CAACyD,GAAI,aAAsB,6BAA4B/C,EAASR,IACnE,gBAAC,IAAM,CAAC4C,QAAQ,WAAW/C,EAAE,oBAE/B,gBAACsf,EAA4B,CAACnf,UAAWA,OAM3Cyf,EAA0E,EAC9Ezf,YACA0f,kBACAC,aACAC,c,MAEA,MAAM,EAAE/f,GAAM,2BAERsD,EAAuB,aAAgB,CAC3CC,MAAO,mBAAiBT,SACxBzB,SAAU,mBAAiBmC,OAC3BrD,YACAsD,KAAM,UAGFuc,EAA8C,gBAApBF,EAAW5f,KAE3C,OACE,gCACE,sBAAID,UAAU,6CACXD,EAAE,iCAEL,gBAAC,IAAW,CAACC,UAAU,mDACrB,gBAAC,IAAiB,CAACmC,YAAa0d,KAC7BE,GAA2B1c,IAA0B0c,IACtD,gCACE,gBAAC,IAAM,CAACjd,QAAQ,UAAUsC,QAAS0a,GAChC/f,EAAE,gBAEL,gBAAC,OAAI,CACH0D,GAAO,aACL,oBACyB,QAAzB,EAAAmc,aAAe,EAAfA,EAAiBzf,gBAAQ,eAAEC,KAC3BF,GAHE,oBAMJ,gBAAC,IAAM,CAACF,UAAU,mCAAmC8C,QAAQ,aAC1D/C,EAAE,gBAKTsD,GAAwB0c,GACxB,gBAAC,6BAA0B,CAAC5d,YAAa0d,IAE3C,gBAACR,EAA4B,CAACnf,UAAWA,OAMpC8f,EAAkF,EAC7FnC,WACA/O,yBACAhP,UAEA,MAAM,EAAEC,GAAM,2BACRmO,EAAY,aAAaY,GACzB7O,EAAO6O,aAAsB,EAAtBA,EAAwB7O,KAC/BggB,EACJ,gBAAC,IAAM,iBAAgBpC,EAAU1Y,WAAY0Y,EAAU/a,QAAQ,WAC5D/C,EAAE,sBAAuB,CAAE4Y,KAAM1Y,KAItC,OAAO4d,EAAW,EAGhB,gBAAC,OAAI,CACHpa,GAAI,GAAG,aACL,6BACA3D,EAAIK,SAASC,KACbN,EAAIK,SAASD,cACVgO,oCAEJ+R,IAKDC,EAA8F,EAClGpR,yBACAhP,U,UAEA,MAAM,EAAEC,GAAM,2BACRgP,EAA6BD,aAAsB,EAAtBA,EAAwB7O,KACrDkgB,EAAkE,QAAhC,EAAArR,aAAsB,EAAtBA,EAAwB3O,gBAAQ,eAAED,UACpEwO,EAAwC,QAA1B,EAAa,QAAb,EAAA5O,aAAG,EAAHA,EAAKK,gBAAQ,eAAE6J,mBAAW,eAAE0E,YAChD,OACE,uBAAK1O,UAAU,iCACb,wBAAMA,UAAU,oBACd,gBAAC,KAAY,CACXC,KAAM8O,EACN3O,KAAM2O,EACN7O,UAAWigB,IAEb,gBAAC,IAAc,CAAC3R,UAAQ,GACtB,gBAAC,IAAiB,CAAC3E,KAAM,gBAAC,IAAwB,MAAKjJ,MAAOb,EAAE,oBAGpE,gBAAC,mBAAgB,CAAC0O,QAASC,MAK3B0R,EAAiE,EACrElgB,YACAQ,UACAZ,U,MAEA,MAAM,EAAEC,GAAM,2BACR+O,EAAyB,YAAuC,QAAb,EAAAhP,aAAG,EAAHA,EAAKK,gBAAQ,eAAE6J,YAAa,CACnFoS,QAAU1W,GAAU,YAAW,CAAEA,YAEnC,OACE,gCACE,sBAAI1F,UAAU,6CACXD,EAAE,0B,MACuBA,EAAzB+O,EAA2B,+BAAoC,sBAEjEA,GACC,gCACE,4BACG/O,EACC,sHAGJ,gBAACmgB,EAAqC,CACpCpR,uBAAwBA,EACxBhP,IAAKA,KAIX,gBAAC,IAAW,CAACE,UAAU,mDACpB8O,EACC,gBAACkR,EAAkC,CACjClR,uBAAwBA,EACxBhP,IAAKA,IAGP,gBAAC,OAAI,CAAC2D,GAAI,aAAsB,6BAA4B/C,EAASR,IACnE,gBAAC,IAAM,CAAC4C,QAAQ,WAAW/C,EAAE,uBAGjC,gBAACsf,EAA4B,CAACnf,UAAWA,OAM3CmgB,EAAsD,EAAGngB,YAAWJ,U,cACxE,MAAM,EAAEC,GAAM,2BACRoQ,GAAmD,QAA1C,EAAkC,QAAlC,EAACrQ,SAAiC,eAAEQ,cAAM,eAAE6P,SAAU,GAC/D9H,GAAoD,QAA1C,EAAkC,QAAlC,EAACvI,SAAiC,eAAEQ,cAAM,eAAE+H,UAAW,GACjEyG,EAAyB,YAAuC,QAAb,EAAAhP,aAAG,EAAHA,EAAKK,gBAAQ,eAAE6J,YAAa,CACnFoS,QAAU1W,GAAU,YAAW,CAAEA,YAEnC,OACE,gCACE,sBAAI1F,UAAU,6CAA6CD,EAAE,4BAC5DoQ,GACC,qBAAGnQ,UAAU,cACVmQ,E,KAAU9H,GAGf,yBACGtI,EAAE,qEACF+O,GACC,gC,IAEG/O,EACC,qGAKP+O,GACC,gBAACoR,EAAqC,CACpCpR,uBAAwBA,EACxBhP,IAAKA,IAGT,gBAAC,IAAW,CAACE,UAAU,mDACpB8O,GACC,gBAACkR,EAAkC,CACjCnC,UAAQ,EACR/O,uBAAwBA,EACxBhP,IAAKA,IAGT,gBAACuf,EAA4B,CAACnf,UAAWA,OAU3CogB,EAAsB,EAAG/b,mB,cAC7B,MAAM,EAAExE,GAAM,2BACRwgB,EAAWxgB,EAAE,kBACb,WAAEyN,EAAU,iBAAEgT,EAAgB,IAAEzN,GAAQ,uBACvCD,EAAkBpB,EAAQC,GAAa,aAA2C,CACvFK,iBAAkB,CAChB1O,MAAO,uBAAqBT,SAC5B8G,QAAS,uBAAqBiO,WAC9B3X,KAAM,uBAAqBA,MAE7BwgB,SAAU,CACRC,YAAa,CACX,oBAAqBF,IAGzBG,cAAe,iBAAiB5N,EAChClK,QAAQ,IAEJ+X,EAAc9N,aAAgB,EAAhBA,EAAmB,GACvC,IAAKpB,EACH,OAAO,gBAAC,IAAa,MAGvB,GAAIC,IAAciP,EAChB,OACE,gBAAC,IAAyB,CACxB/W,KAAM,KACNpD,YAAakL,EAAY5R,EAAE,2BAA4B,CAAE4R,cAAe4O,IAI9E,MAAMM,GAA8B,QAAnB,EAAAD,aAAW,EAAXA,EAAatgB,cAAM,eAAEugB,WAAY,GAC5C7M,EAAU6M,EAASrc,KAAM0Q,GAAOA,EAAG1H,aAAeA,IAAeqT,EAAS,GAC1Epa,GAAqC,QAAvB,EAAAuN,aAAO,EAAPA,EAAS8M,sBAAc,eAAEra,cAAe8Z,EACtD7W,GAAwC,QAA7B,EAAmB,QAAnB,EAAAkX,aAAW,EAAXA,EAAatgB,cAAM,eAAEoJ,gBAAQ,eAAEtJ,OAAQ,GAClDqN,EAAgC,QAAlB,EAAAlJ,aAAY,EAAZA,EAAchE,YAAI,eAAEkN,YAExC,OACE,gBAAC,IAAyB,CACxBhH,YAAaA,EACboD,KAAM,YAAQ+W,GACdlX,SAAUA,EACVC,QAAS8D,KAKTsT,EAA4D,EAAGhf,gB,4BACnE,MAAM,EAAEhC,GAAM,4BACR,WAAEyN,EAAU,gBAAEwT,GAAoB,sBACxC,IAAIC,GAAU,EACV3gB,EAAS,GACTuf,EAC8B,QAAhC,EAAA9d,aAAS,EAATA,EAAWmf,6BAAqB,eAAE5V,KACpC,MAAM/G,EAAsC,QAAvB,EAAAxC,aAAS,EAATA,EAAWwC,oBAAY,eAAE+G,KAE9C,GADAhL,EAA2B,QAAlB,EAAAuf,aAAU,EAAVA,EAAYvf,cAAM,eAAED,MACzBwf,GAAcvf,EAChB2gB,GAAU,OACL,GAAI1c,EAAc,CAEvB0c,GAAU,EACV3gB,GAA6B,QAApB,EAAAiE,aAAY,EAAZA,EAAcjE,cAAM,eAAEoT,QAAS,KACxC,MAAMyN,GAAsD,QAApC,EAAoB,QAApB,EAAA5c,aAAY,EAAZA,EAAcjE,cAAM,eAAEgT,sBAAc,eAAElT,OAAQ,GAChE+B,EAA4D,QAA7B,EAAuB,QAAvB,EAAAJ,aAAS,EAATA,EAAWqR,oBAAY,eAAE9H,YAAI,eAAE9G,KACjE6O,GAAOA,EAAGlT,SAASC,OAAS+gB,GAE3Bhf,IACF0d,EAAa1d,GAIjB,MAAMif,EAA+B,cAAX9gB,EACpB+gB,EAA4B,WAAX/gB,EACjBghB,EAC2B,YAAf,QAAhB,EAAAzB,aAAU,EAAVA,EAAYtf,YAAI,eAAE2C,YAAwD,KAAf,QAAhB,EAAA2c,aAAU,EAAVA,EAAYtf,YAAI,eAAE6C,UAEzD0c,EAAU,KACd,aAAS,mBAAkBD,EAAY,CACrC,CAAExa,GAAI,UAAWC,KAAM,iBAAkBC,OAAO,KAC/CE,MAAOC,IACR,YAAW,CAAEA,MAAOA,EAAMC,gBAI9B,IAAI4b,EAAY,gBAAC,IAAO,CAACxD,KAAK,OAC1BsD,IACFE,EACE,gBAAC,IAAI,CAACxD,KAAK,MACT,gBAAC,IAAwB,QAI3BuD,IACFC,EACE,gBAAC,IAAI,CAACxD,KAAK,MACT,gBAAC,IAA6B,QAIhCqD,IACFG,EACE,gBAAC,IAAI,CAACxD,KAAK,MACT,gBAAC,IAAoB,QAK3B,IAAIyD,EAAiB,gBAACnB,EAAiB,CAACngB,UAAW8gB,EAAiBlhB,IAAK+f,IAoBzE,OAnBIwB,EACFG,EACE,gBAAChC,EAAoB,CAACtf,UAAW8gB,EAAiBlhB,IAAK+f,EAAYnf,QAAS8M,IAErE8T,EACTE,EACE,gBAAC7B,EAA2B,CAC1Bzf,UAAW8gB,EACXpB,gBAAiBrb,EACjBsb,WAAYA,EACZC,QAASA,IAGJsB,IACTI,EACE,gBAACpB,EAAuB,CAAClgB,UAAW8gB,EAAiBtgB,QAAS8M,EAAY1N,IAAK+f,KAKjF,gCACE,uBAAK7f,UAAU,kCACb,gBAAC,IAAM,KACL,6BAAQD,EAAE,6BAEZ,gBAAC,IAAQ,KACP,uBAAK6Z,GAAG,yBACLqH,GACC,uBAAKjhB,UAAU,uCACZD,EAAE,qB,IAAsB,gBAAC,IAAO,CAACge,KAAK,SAGzCkD,GAAWI,GACX,gBAAC,IAAK,CAACve,QAAQ,SAASC,UAAQ,EAACnC,MAAM,uBACpCN,E,MAA2D,QAAjD,EAAyC,QAAzC,EAACuf,SAAwC,eAAEvf,cAAM,eAAE+H,UAAW,KAG3E4Y,GACA,gBAAC,IAAI,KACH,gBAAC,IAAQ,KACP,uBAAKjhB,UAAU,2CACb,2BACE,gBAACsgB,EAAmB,CAAC/b,aAAcxC,EAAUwC,aAAa+G,QAE5D,2BAAMiW,OAKZN,GACA,gBAAC,IAAI,KACH,gBAAC,IAAQ,KAAEO,QAMnBP,GAAWK,GACX,gBAAC,qBAAkB,CAACxhB,IAAK+f,EAA+Bxb,mBAAiB,MAMpEod,EAAgE,KAC3E,MAAM,IAAE1O,EAAG,WAAEvF,EAAU,gBAAEwT,GAAoB,sBAEvCU,EAAuB,CAC3B,CACEzhB,KAAM,aAAkB,8BACxB+B,YAAY,EACZ6G,QAAQ,EACRzI,KAAMoN,EACNtN,UAAW8gB,EACX/e,KAAM,yBAER,CACEhC,KAAM,aAAkB,qBACxB+B,YAAY,EACZ6G,QAAQ,EACRzI,KAAM2S,EACN7S,UAAW8gB,EACX7T,UAAU,EACVlL,KAAM,gBAER,CACEhC,KAAM,aAAkB,oBACxBgC,KAAM,eACND,YAAY,EACZ9B,UAAW8gB,EACXnY,QAAQ,EACRsE,UAAU,IAId,OACE,gBAAC,IAAQ,CAACpL,UAAW2f,GACnB,gBAACX,EAAqB,S,w1BCvarB,MAAMY,EAAgC,EAC3C/gB,QACAyH,UACAuZ,aAGE,gBAAC,IAAK,CACJ7e,UAAQ,EACRD,QAAQ,UACRlC,MAAOA,EACPihB,YAAa,gBAAC,IAAsB,CAACD,QAAS,IAAMA,GAAQ,KAC5D5hB,UAAU,cAEV,yBAAIqI,IAKJyZ,EAAwC,EAC5CtH,QACAvN,WACA6Q,cACAiE,YACAxc,QACAyc,cAGE,uBAAKhiB,UAAU,cACb,gCACE,yBAAOA,UAAU,eAAewa,GAChC,gBAAC,IAAc,KAAEvN,GACjB,uBAAKjN,UAAU,oBACb,gBAAC,IAAS,CACR2d,WAAS,EACTG,YAAaA,EAAW,aACZiE,EACZjc,KAAK,OACLP,MAAOA,EACP6X,SAAU,CAAC6E,EAAQC,KACjBF,EAASE,SASVC,EAAqE5gB,I,2DAChF,MAAM6gB,GAA6C,QAA3B,EAAqB,QAArB,EAAA7gB,EAAM6gB,uBAAe,eAAE9W,YAAI,eAAG,IAC9ClL,KAAMiiB,IAAqC,QAAzB,EAAAD,cAAe,EAAfA,GAAiBjiB,gBAAQ,QAAI,IACjD,SAAEuJ,GAAQ,SAAEmX,GAAW,GAAE,YAAE7N,GAAW,cAAEC,GAAa,uBAAEC,IACpC,QAAvB,EAAAkP,cAAe,EAAfA,GAAiB9hB,cAAM,QAAI,IAErBmS,SAAU/C,IAAQ,yBACnB4S,GAAaC,IAAkB,WAAe,KAC9CC,GAAeC,IAAoB,WAAe,KAClDC,GAAeC,IAAoB,WAAe,KAClDC,GAAqBC,IAA0B,WAAe,KAC9DC,GAAkBC,IAAuB,WAAe,KACxDC,GAAWC,IAAgB,WAAe,KAC1CC,GAAeC,IAAoB,WAAe,KAClDC,GAAqBC,IAA0B,WAAe,KAC9DrC,GAAiBsC,IAAsB,WAAe,OACtDC,GAAaC,IAAkB,WAAe,OAC/C,iBAAEhD,GAAgB,QAAExM,GAAO,IAAEjB,GAAG,cAAE0Q,GAAa,QAAE9Z,IAAY,eAE7D+Z,GAAiB,YAAsBtB,KACtCuB,GAAmBC,IAAwB,WAAe5P,IAAW0P,KACtE,eAAE5C,IAAuE,QAApD,EAAAD,GAASrc,KAAM0Q,GAAOA,EAAG9U,OAASujB,WAAkB,QAAI,IAC7E,aAAEE,GAAe,GAAIla,QAASma,IAAyBhD,YAAkB,IAExEiD,GAAeC,IAAoB,WAAera,IAAWma,KAE7DG,GAAiBC,IAAsB,YAAe,IAEtDhhB,GAAUihB,IAAe,WAC9BJ,KAAkBD,GACd,IAAoB3gB,OACpB,IAAoBkT,YAGnB+N,GAAeC,IAAoB,YAAe,IAClDC,GAA0BC,IAA+B,YAAe,IACxEC,GAAkCC,IAAuC,YAC9E,IAGAC,GACAC,IACE,YAAe,GAEbC,IACuC,QAA3C,EAAiC,QAAjC,EAAyB,QAAzB,EAAAxC,cAAe,EAAfA,GAAiBjiB,gBAAQ,eAAEmX,cAAM,eAAE5N,gBAAQ,eAAE7D,SAAS,aAC+B,UAA3D,QAA1B,EAAAib,GAAe9W,mBAAW,eAAG,sDACxB6a,GAAkBC,IAAuB,WAAeF,KAExDlf,GAAOqf,IAAY,WAAe,KAClCjc,IAAyB,YAAqC,CACnE7I,KAAM,aAAkB,8BACxB4I,QAAQ,EACRzI,KAAM,OAED4kB,GAAgBC,IAAqB,WAAyB,KAC/D,EAAEllB,IAAM,4BAER,kBACJkK,GAAiB,kBACjB+F,GAAiB,kBACjBC,GAAiB,qBACjBiV,IACE,cACEC,IACJlb,cAAiB,EAAjBA,GAAmBC,eACnB8F,cAAiB,EAAjBA,GAAmB9F,eACnB+F,cAAiB,EAAjBA,GAAmB/F,aAErB,YAAgB,KACdgb,GAAqB,IAAO9C,cAAe,EAAfA,GAAiB9hB,OAAQ,iBACpD,CAAC8hB,cAAe,EAAfA,GAAiB9hB,OAAQ4kB,KAE7B,MAQM7P,GAAS,IAAID,gBAAgB,CACjC,eAAgB,GAAG,IAAIA,gBAAgBhJ,OAAOyF,SAASwD,QAAQ+P,IAC7D,UACG,IAAIhQ,gBAAgBhJ,OAAOyF,SAASwD,QAAQ+P,IAAI,wBAGjDC,GACJ9B,IACA,YAAyBhiB,EAAM6gB,gBAAgB9W,KAAK,GAApD,CAAwDqY,IAAmBjf,OACzE,CAAC4gB,EAAsBC,IACrBA,EAAKzf,OAAS,IAAgB0f,6BAC1B,IAAgBA,6BAChBF,EACN,IAAgBG,6BAGdC,GACsB,QAA1B,EAAA5E,GAAe9W,mBAAW,eAAG,4CACzB2b,GAIF,QAHF,cAA8B7E,GAAe9W,YAAa,CAExDoS,QAAS,IAAMxT,QAAQlD,MAAM,6CAC7B,QAAI,GACFkgB,GAAqE,QAApC,EAAAD,cAA0B,EAA1BA,GAA4BxlB,gBAAQ,eAAEC,KACvEylB,GACwE,UAAlD,QAA1B,EAAA/E,GAAe9W,mBAAW,eAAG,4CACzB8E,GAAyB,YAA0BgS,GAAe9W,YAAa,CAEnFoS,QAAS,IAAMxT,QAAQlD,MAAM,oEAEzBqD,GAAgC,YAAgB,CACpDzF,MAAO,6BAA2BT,SAClCzB,SAAU,6BAA2BmC,OACrCC,KAAM,QACNpD,KAAM,MAEFsI,GAAa,YAAgCoY,cAAc,EAAdA,GAAgB9W,aAE7DgF,GAAkC,UACtC,IAAOF,GAAyB,aAAaA,IAA0B,KACvE,CAACA,KAGGgX,IAGO,QAFX,GAEC,QAFD,KAAoB,QAAnB,EAAAvkB,EAAMwkB,qBAAa,eAAEza,OAAS,IAA4B9G,KACxDwhB,GAA4B,qBAArBA,EAAG7lB,SAASC,aACrB,iBAAED,gBAAQ,iBAAED,YAAa,sBAE5B,IAAI+lB,GAA0BjF,IAAmBzf,EAAMyf,gBACvD,MAAMkF,GAA6BN,IAAkCF,GAEjEL,KAAwB,IAAgBG,+BAExCS,GADEC,GACwBlF,IAAmBkF,GAEnBlF,IAAmB8E,IAI/CT,KAAwB,IAAgBI,6BACxClkB,EAAMyf,kBAAoB8E,KAE1BG,GAA0BjF,IAAmB,IAG/C,MAAMmF,GACJD,IAA8BA,KAA+BD,GACzDG,IACH5B,IAAoC2B,GACvC,YAAgB,KACTD,IAIL5C,GAAmB4C,IACnB,aAAO,iBAAgBA,IACpB1gB,KAAK,KACJ+e,IAA4B,GAC5BE,IAAoC,KAErChf,MAAM,KACL8e,IAA4B,GAC5BE,IAAoC,MAXtCA,IAAoC,IAarC,CAACyB,KAEJ,YAAgB,KACd,aAAuB,uBAAsB,CAC3CpkB,GAAImkB,GACJtF,cAAe,iBAAiB0B,GAChCgE,cAAe,YAAiB,CAC9B,CAAE1lB,IAAK,UAAWwL,SAAU,SAAU+N,OAAQ,CAACjH,KAC/C,CAAEtS,IAAK,oBAAqBwL,SAAU,SAAU+N,OAAQ,CAAChH,SAG1D1N,KAAM8gB,GAASjC,GAAiB,IAAUiC,KAC1C7gB,MAAM,IAAM4e,IAAiB,KAC/B,CACDpR,GACAC,GACAmP,GACA9gB,EAAM6gB,gBAAgB9W,KACtB2a,KAGF,YAAgB,KACdhB,GAAkB,YAAuBhS,IAAiBvK,GAAa,KAGtE,CAACuK,GAA0C,QAA3B,GAAA6N,cAAc,EAAdA,GAAgB9W,mBAAW,iBAAG,kCAEjD,MAAMkM,GAAiC,YACrC3U,EAAMgD,aAAa+G,KACnB2a,IAGF,YAAgB,KAEZtc,KAAYma,KACZ5N,cAA8B,EAA9BA,GAAgChR,QAAS,GACvB,QAAlBue,IACkB,UAAlBA,IACkB,QAAlBA,GAEAU,GAAY,IAAoBhhB,QAC3BghB,GAAY,IAAoB9N,YACtC,CAAC1M,GAASma,GAAsB5N,cAA8B,EAA9BA,GAAgChR,OAAQue,KAE3E,MAAM8C,GAAoB1C,GAAarf,KACpCgiB,GAAMA,EAAE1gB,OAAS,IAAgB2f,6BAE9BgB,GAAiBF,IAAqBA,GAAkBG,UACxDC,GAAoB9C,GAAarf,KACpCgiB,GAAMA,EAAE1gB,OAAS,IAAgB0f,8BAE9BoB,GAAiBD,IAAqBA,GAAkBD,UAExDG,GAAwB,cAC3BnmB,IACC,KAAQkF,KACN,wBAAwB4a,MAAoBzN,MAAOrS,QAAculB,OAGrE,CAACzF,GAAkBzN,GAAKkT,KAG1B,IAAKQ,KAAmBG,GACtB,OACE,gBAAC,IAAiB,CAChBhmB,MAAOb,GAAE,kCAAmC,CAC1C4Y,KAAmC,QAA7B,GAAa,QAAb,GAAAkI,cAAQ,EAARA,GAAW,UAAE,iBAAEC,sBAAc,iBAAEra,eAGtC1G,GACC,+MAMR,MAAM+mB,GAAWvB,GACXA,IAAS,IAAgBC,8BAAgCoB,GACpD7mB,GAAE,qDAEPwlB,IAAS,IAAgBE,6BAA+BgB,GACnD1mB,GAAE,8DAEJA,GAAE,mDAELgnB,GAAsBjlB,GAC1B,YAAaP,EAAMgD,aAAa+G,KAAhC,CAAsC/J,EAAMwkB,cAAcza,KAA1D,CAAgE/J,EAAM6gB,gBAAgB9W,KAAK,GAA3F,CACExJ,GAEEklB,GAAqBllB,GAAgByjB,IACzC,MAAMQ,EAAgBxkB,EAAMwkB,cAAcza,KAAK9G,KAAMwhB,GAAOA,EAAG7lB,SAASD,YAAc4B,GACtF,OAAKikB,IAAkBjkB,GAGhB,YAAS,CAAC,CAAEgE,KAAMyf,EAAMmB,WAAW,IAAnC,CAA4CX,IAE/CkB,GAA2BnlB,IAC/B,MAAMolB,EAAiB3lB,EAAMwkB,cAAcza,KAAKxK,OAC7CklB,IAAM,QAAC,OAAqB,QAArB,EAAS,QAAT,EAAAA,EAAG1lB,cAAM,eAAE6mB,kBAAU,eAAEthB,SAAS/D,KAAO,YAASkkB,KAE1D,GAAI,IAAUkB,GACZ,MAAO,GAET,MAAME,EAAe,IAAUF,EAAgB,KACzCnd,EAAe,YAAuBxI,EAAM6gB,gBAAgB9W,KAAK,GAAlD,CACnBqY,IACAljB,IAAK4J,GAAS,YAAwBA,IAExC,OAAO,IAAe+c,EAAcrd,IA8ShCsd,GACJxB,IAA8B,IAAaI,GAAyB,cAEhEqB,GAAgB,aAAoB,KAAkBC,uBAEtDC,GAA4BpB,IAChC,gCACE,gBAAC,IAAK,CACJrjB,UAAQ,EACR/C,UAAU,gCACV8C,QAASwhB,GAA2B,UAAY,OAChD1jB,MAC6Bb,GAA3BukB,GAA6B,+BAAoC,2BAGlEA,GACC,gBAAC,QAAK,CAACxiB,GAAG,O,aACE,yBAAI,CAAEokB,gC,4FAIlB,gBAAC,QAAK,CAACpkB,GAAG,O,aACE,yBAAI,CAAEokB,gC,yCAIrBmB,KAA2B/C,IAC1B,uBAAKtkB,UAAU,sBACb,gBAAC,IAAQ,CACP4Z,GAAG,6BAA4B,YACrB,oBACVY,MAAOza,GAAE,wEACTqd,SAAU,CAAC6E,EAAQ1c,IAAUuf,GAAoBvf,GACjDkiB,UAAW5C,GAAgB,qBACPA,OAEkC,QAAtD,GAAAtjB,EAAM6gB,gBAAgB9W,KAAK,GAAGnL,SAASmX,OAAO5N,gBAAQ,iBAAE7D,SAAS,aACjE,gBAAC,IAAK,CACJ9C,UAAQ,EACR/C,UAAU,qCACV8C,QAAQ,UACRlC,MAAOb,GAAE,6BAET,gCACGA,GACC,8PAEA,gBACA,gBAAC,QAAK,CAAC+B,GAAG,OACP,I,gCAC6B,IAC9B,gBAAC,IAAY,CAACsE,KAAMkhB,IAAa,oC,SAc7CI,GACJ,uBAAK1nB,UAAU,cACb,gBAAC,IAAU,CACTod,SAAU,KACRuH,IAAsC,GACtCrB,GAAmB4C,KAErB3gB,MAAO2gB,GACP1I,QAASkH,GACT9jB,MAAOb,GAAE,wCAER,IACD,gBAAC,KAAY,CAACE,KAAK,YACnB,yBAAIimB,KAEN,gBAAC,IAAU,CACT9I,SAAU,KACRuH,IAAsC,GACtCrB,GAAmB,OAErB/d,MAAO2gB,GACP1I,SAAUkH,GACV9jB,MAAOb,GAAE,6BAET2kB,IACA,gCACE,gBAAC,IAAU,CACT9K,GAAG,qBACH+N,YAAa1B,GACb7I,SAAWtb,GAAOwhB,GAAmBxhB,GACrCsU,SAAS,uBAEX,gBAAC,IAAK,CACJrT,UAAQ,EACR/C,UAAU,qCACV8C,QAAQ,UACRlC,MAAOb,GACL,qGAQN6nB,GACJ,uBAAK5nB,UAAU,cACb,gBAAC,IAAU,CACT4Z,GAAG,qBACH+N,YAAa1B,GACb7I,SAAWtb,GAAOwhB,GAAmBxhB,GACrCsU,SAAS,wBAKTyR,GACJ,gCACG3B,GACC,gCAAGwB,IAEH,gCAAGE,IAEJlD,IAAsC8C,IAIrCM,GAA8BpC,GAGlC,gCACGgC,GACAhD,IAAsC8C,IAJzC,gCAAGI,IAQC7d,GAAe,YAAuBxI,EAAM6gB,gBAAgB9W,KAAK,GAAlD,CAAsDqY,IAErEoE,GACJpe,KAAYma,KAAwB5N,cAA8B,EAA9BA,GAAgChR,QAAS,EAE/E,OACE,gCACE,gBAAC,IAAM,KACL,uDAEF,gBAAC,IAAW,CACVtE,MAAOb,GAAE,wBACTioB,YAAa,CACX,CAAE5nB,KAAML,GAAE,mBAAoBuF,KAAM,gBAAgB+P,GAAO1P,YAC3D,CAAEvF,KAAML,GAAE,6BAA8BuF,KAAMoK,KAEhDzC,SAAUlN,GACR,yKAGJ,uBAAKC,UAAU,mBACM,QAAlByjB,IAA2BQ,IAC1B,gBAACtC,EAA6B,CAC5B/gB,MAAOb,GAAE,2BACTsI,QAAStI,GACP,2eAEF6hB,QAAS,IAAMsC,IAAmB,KAGnB,UAAlBT,IAA6BQ,IAC5B,gBAACtC,EAA6B,CAC5B/gB,MAAOb,GAAE,oEACTsI,QAAStI,GACP,4eAEF6hB,QAAS,IAAMsC,IAAmB,KAEnC,IACgB,QAAlBT,IAA2BQ,IAC1B,gBAACtC,EAA6B,CAC5B/gB,MAAOb,GAAE,kEACTsI,QAAStI,GACP,gfAEF6hB,QAAS,IAAMsC,IAAmB,KAGtC,uBAAKlkB,UAAU,OACb,uBAAKA,UAAU,YACb,gCACqB,QAAlByjB,IACC,uBAAKzjB,UAAU,cACb,gBAAC8hB,EAAU,CACTtH,MAAOza,GAAE,gBACTkN,SAAUlN,GACR,uEAEF+d,YAAa/d,GAAE,gBACfgiB,UAAWhiB,GAAE,gBACbwF,MAAO+c,GACPN,SAAUO,MAIG,UAAlBkB,IACC,uBAAKzjB,UAAU,cACb,gBAAC8hB,EAAU,CACTtH,MAAOza,GAAE,uBACTkN,SAAUlN,GACR,8EAEF+d,YAAa/d,GAAE,uBACfgiB,UAAWhiB,GAAE,uBACbwF,MAAOmd,GACPV,SAAUW,KAEZ,gBAACb,EAAU,CACTtH,MAAOza,GAAE,uBACTkN,SAAUlN,GACR,8EAEF+d,YAAa/d,GAAE,uBACfgiB,UAAWhiB,GAAE,uBACbwF,MAAOid,GACPR,SAAUS,KAGZ,gBAACX,EAAU,CACTtH,MAAOza,GAAE,6BACTkN,SAAUlN,GACR,oFAEF+d,YAAa/d,GAAE,6BACfgiB,UAAWhiB,GAAE,6BACbwF,MAAOqd,GACPZ,SAAUa,MAIG,QAAlBY,IACC,uBAAKzjB,UAAU,cACb,gBAAC8hB,EAAU,CACTtH,MAAOza,GAAE,0BACTkN,SAAUlN,GACR,iFAEF+d,YAAa/d,GAAE,0BACfgiB,UAAWhiB,GAAE,0BACbwF,MAAOud,GACPd,SAAUe,KAEZ,gBAACjB,EAAU,CACTtH,MAAOza,GAAE,mBACTkN,SAAUlN,GACR,0EAEF+d,YAAa/d,GAAE,mBACfgiB,UAAWhiB,GAAE,mBACbwF,MAAOyd,GACPhB,SAAUiB,KAEZ,gBAACnB,EAAU,CACTtH,MAAOza,GAAE,uBACTkN,SAAUlN,GACR,8EAEF+d,YAAa/d,GAAE,uBACfgiB,UAAWhiB,GAAE,uBACbwF,MAAO2d,GACPlB,SAAUmB,KAEZ,gBAACrB,EAAU,CACTtH,MAAOza,GAAE,6BACTkN,SAAUlN,GACR,wFAEF+d,YAAa/d,GAAE,iCACfgiB,UAAWhiB,GAAE,iCACbwF,MAAO6d,GACPpB,SAAUqB,MAIhB,uBAAKrjB,UAAU,cACb,gCACE,yBAAOA,UAAU,eAAeD,GAAE,uBAClC,gBAAC,IAAc,KACZA,GAAE,2DAEL,gBAAC,IAAqB,CACpBqiB,gBAAiB7gB,EAAM6gB,gBAAgB9W,KAAK,GAC5C2c,sBAAuBtE,GACvBuE,iBAAkBtE,GAClBI,iBAAkBA,OAIxB,uBAAKhkB,UAAU,gDACb,gCACE,yBAAOA,UAAU,eAAeD,GAAE,gBAClC,gBAAC,IAAqB,CACpBqiB,gBAAiB7gB,EAAM6gB,gBAAgB9W,KAAK,GAC5C2c,sBAAuBtE,GACvBI,cAAeA,GACfC,iBAAkBA,GAClBmE,kBAAgB,MAItB,uBAAKnoB,UAAU,cACb,gCACE,yBAAOA,UAAU,eAAeD,GAAE,0BAClC,gBAAC,IAAU,CACTqd,SAAWC,IACTmG,GAAenG,EAAEE,OAAOhY,OACxB+d,GAAmB,MACnBe,IAAiB,IAEnB9e,MAAO,IAAgBigB,6BACvBhI,QAAS6H,KAAwB,IAAgBG,6BACjD3H,UAAW+I,GACXhmB,MAAOb,GAAE,qCACT2d,SAAU3d,GAAE,kBAEZ,uBAAKC,UAAU,mBACb,qBAAGA,UAAU,cACV8mB,GAAQ,IAAgBtB,iCAI/B,gBAAC,IAAU,CACTpI,SAAWC,IACTmG,GAAenG,EAAEE,OAAOhY,OACxB+d,GACEoB,GAAqCwB,GAA6B,MAEpE7B,IAAiB,IAEnB9e,MAAO,IAAgBkgB,4BACvBjI,QAAS6H,KAAwB,IAAgBI,4BACjD5H,UAAW4I,GACX7lB,MAAOb,GAAE,4CAET,uBAAKC,UAAU,mBACb,qBAAGA,UAAU,cACV8mB,GAAQ,IAAgBrB,kCAMnC,uBAAKzlB,UAAU,gDACb,yBAAOA,UAAU,cAAc4d,QAAQ,sBACpC7d,GAAE,4BAEJslB,KAAwB,IAAgBG,8BACvCqC,GACDxC,KAAwB,IAAgBI,6BACvCqC,IAEJ,uBAAK9nB,UAAU,cACb,gCACE,yBAAOA,UAAU,eAAeD,GAAE,wBAClC,gBAAC,IAAc,KACZA,GAAE,sEAEL,gBAAC,IAAU,CACTqoB,aAAcllB,GACd6V,MAAO,CACL,CACExT,MAAO,IAAoB8Q,UAC3BzV,MAAOb,GAAE,iBACT8d,SAAUkK,IAEZ,CACExiB,MAAO,IAAoBpC,OAC3BvC,MAAOb,GAAE,gBAGbqd,SAAWC,IACT,MAAM,MAAE9X,GAAU8X,EAAEgL,cACpBlE,GAAY5e,GACRA,IAAU,IAAoB8Q,WAChC2N,GAAiBF,OAItB5gB,KAAa,IAAoBmT,YAChCH,cAA8B,EAA9BA,GAAgChR,QAAS,GACvC,gBAAC,IAAK,CACJnC,UAAQ,EACR/C,UAAU,gCACV8C,QAAQ,OACRlC,MAAOb,GAAE,kDAET,gBAAC,IAA+B,CAC9B8K,cAAeqL,GACfhW,UAAW+lB,MAIlB/iB,KAAa,IAAoBC,QAChC,gBAAC,IAAK,CACJJ,UAAQ,EACR/C,UAAU,gCACV8C,QAAQ,OACRlC,MAAOb,GAAE,gEAET,gBAAC,QAAK,CAAC+B,GAAG,O,2FAEK,8BAAS,CAAEmkB,6B,gRAUjCvd,GAAWxD,OAAS,GAAK4D,IAAyBC,IACjD,gBAAC,IAAsB,CACrBkK,cAAeA,GACfvK,WAAYA,GACZsc,eAAgBA,GAChBsD,iBAj6BS,CAAChf,EAAgBif,KAEtCtD,GADEsD,EACgB,IAAIvD,GAAgB1b,GAEpB0b,GAAelkB,OAAQ0nB,GAAcA,IAAMlf,QAi6BtD6b,IACC,gBAAC,IAA8B,CAC7Blb,kBAAmBA,GACnB+F,kBAAmBA,GACnBC,kBAAmBA,KAGvB,uBAAKjQ,UAAU,+BAxhBpB0F,IACC,gBAAC,IAAK,CACJ3C,UAAQ,EACR/C,UAAU,gCACV8C,QAAQ,SACRlC,MAAOb,GAAE,0BAET,uBAAKC,UAAU,eAAe0F,OAGhCshB,GAAkBf,GAAlBe,CAA2C3B,KAC3C,gBAAC,IAAK,CACJtiB,UAAQ,EACR/C,UAAU,WACV8C,QAAQ,SACRlC,MAAOb,GAAE,qDAERslB,KAAwB,IAAgBI,6BACzCQ,KAA4BH,GAC1B,gCACG/lB,GACC,uMACA,CAAEG,UAAW+lB,MAIjB,gCACGlmB,GACC,2KACA,CACEG,UAAW+lB,GACXV,KACEF,KAAwB,IAAgBG,6BACpC,WACA,0BAOjBuB,GAAmBd,KAClB,gBAAC,IAAK,CACJljB,UAAQ,EACR/C,UAAU,WACV8C,QAAQ,SACRlC,MAAOb,GACL,mFACA,CACEG,UAAW+lB,MAIf,yBACE,gBAAC,QAAK,CAAClmB,EAAGA,GAAG+B,GAAG,O,aACH,IACX,gBAAC,OAAI,CACH2B,GAAI,aAAsB,oBAAmBuP,GAAaiT,KAAwB,yBAG5E,I,kDACwC,IAC/C,CAAEA,4BACF,SAKP,IAAUgB,GAAwBhB,MAClC,gBAAC,IAAK,CACJljB,UAAQ,EACR/C,UAAU,WACV8C,QAAQ,SACRlC,MAAOb,GAAE,iCAERA,GACC,4HAEF,0BACGknB,GAAwBhB,IAAyBxlB,IAAKgoB,GACrD,sBAAI9nB,IAAK8nB,GACP,8BAAS,aAAiBA,I,IAAe,yB,IAAK,YAAuBA,G,UAM9ExC,IAA2B7B,IAC1B,gBAAC,IAAK,CACJrhB,UAAQ,EACR/C,UAAU,WACV8C,QAAQ,SACRlC,MAAOb,GAAE,wDA8bP,gBAAC,IAAW,CAACC,UAAU,gBACrB,gBAAC,IAAM,aACK,mBACVoF,QAAS,IAtuBI,OAAD,6B,cAExB2f,GAAS,IACT,MAAM2D,EAA+B,CACnCvoB,SAAU,CACRC,KAAM6lB,GACN3O,OACEuO,IAA8BhB,GAC1B,CACE,kCAAmC,QAErC,KAIJ/iB,EAAK,IAAe,GAAI4mB,EAAW/C,IACnCgD,EAAc1C,GAAH,cACX2C,EAAkD,QAAjC,EAAuB,QAAvB,EAAAxG,cAAe,EAAfA,GAAiB9hB,cAAM,eAAEugB,gBAAQ,eAAErc,KACvD0Q,GAAOA,EAAG9U,OAASujB,IAEhBkF,EAAkF,QAAjE,EAAuB,QAAvB,EAAAD,aAAc,EAAdA,EAAgBE,eAAO,eAAEtkB,KAAM6Y,GAAMA,EAAE1T,UAAYoa,WAAc,eAAE3jB,KACpF2oB,EAAiB,CACrB9oB,KAAM,YAAUA,KAChB2X,WAAY,GAAG,YAAU/U,YAAY,YAAU+U,aAC/CzX,SAAU,CACRC,KAAMuoB,EACNzoB,UAAW+lB,IAEb+C,MAAO,CACL,CACEC,UAAW,CAAC,IACZlnB,UAAW,CAAC,WAAY,YAAa,QACrCsM,MAAO,CAAC,MAAO,OAAQ,YAKvB6a,EAAwB,CAC5BjpB,KAAM,mBAAiBA,KACvB2X,WAAY,GAAG,mBAAiB/U,YAAY,mBAAiB+U,aAC7DzX,SAAU,CACRC,KAAMuoB,EACNzoB,UAAW+lB,IAEbkD,QAAS,CACPlpB,KAAM,OACNG,KAAMuoB,EACN9lB,SAAU,mBAAiBA,UAE7BumB,SAAU,CACR,CACEnpB,KAAM,iBACNG,KAAM,iBACNF,UAAW,0BAKX6lB,EAAa,eACjBnO,WAAY,YAAmB,sBAC/B3X,KAAM,gBACNE,SAAU,CACRkpB,aAAiBpD,GAAH,IACd/lB,UAAW+lB,KAETZ,KAAwB,IAAgBG,6BACxC,GACA,CACEjlB,KAAM,CACJqM,iBAAkB,CAACqZ,OAKvB1hB,EAAiC,CACrCqT,WAAY,YAAmB,qBAC/B3X,KAAM,eACNE,SAAU,CACRC,KAAM4S,GACN9S,UAAW+lB,IAEb1lB,KAAM,CACJkQ,OAAQwC,GACRlP,gBAAiBmP,GACjB9S,KAAM4S,GACNvF,YAAaob,EACb7U,QAAS2P,GACT1P,oBAAqB/Q,KAIzB,OAAQugB,IACN,IAAK,MACHlf,EAAahE,KAAK+oB,OAAS,CACzBC,IAAK,CACH,CACEnpB,KAAM,UACNmF,MAAO+c,MAIb,MACF,IAAK,QACH/d,EAAahE,KAAK+oB,OAAS,CACzBC,IAAK,CACH,CACEnpB,KAAM,WACNmF,MAAOmd,IAET,CACEtiB,KAAM,WACNmF,MAAOid,IAET,CACEpiB,KAAM,iBACNmF,MAAOqd,MAIb,MACF,IAAK,MACHre,EAAahE,KAAK+oB,OAAS,CACzBC,IAAK,CACH,CACEnpB,KAAM,iBACNmF,MAAOud,IAET,CACE1iB,KAAM,UACNmF,MAAOyd,IAET,CACE5iB,KAAM,cACNmF,MAAO2d,IAET,CACE9iB,KAAM,wBACNmF,MAAO6d,MASjB,IACM+C,KAAiC7B,WAC7B,aAAU,iBAAgBxiB,GAC5B+jB,IAA8BhB,WAC1B,aAAU,YAAWkE,SACrB,aAAU,mBAAkBG,KAInC3nB,EAAMwkB,cAAcza,KAAKjC,KACvB/F,GAAUA,EAAMnD,SAASD,YAAc+lB,YAGpC,aAAU,qBAAoBF,UAEhC,aAAU,oBAAmBxhB,GACnC,MAAMilB,GAAuD,QAA3B,EAAA1gB,cAAqB,EAArBA,GAAuBvI,YAAI,eAAE6I,UAAW,GACpEqgB,EAA2B,IAC5BD,EAAgB1oB,OAAQwI,IAAoBZ,GAAW7C,SAASyD,OAChE0b,KAGF,IAAUwE,EAAgBE,OAAQD,EAAeC,SAClD3gB,WAEM,aAAS,6BAA4BD,GAAuB,CAChE,CACExD,KAAM,gBACNC,MAAOkkB,EACPpkB,GAAI,UAIVwhB,GAAsBgC,GACtB,MAAOxM,GACP0I,GAAS1I,EAAIhU,SAAWtI,GAAE,oDAkjBhBoF,WA7iBZ,CAACwe,GAAmB0B,GAAqBY,GAAyB/iB,IAAUmG,KACzEuS,GAAM,IAAQA,IAAM,IAAUA,KAEjCmL,GAAmBd,MAClBe,GAAkBf,GAAlBe,CAA2C3B,KAC3CY,IAA2B7B,KAC3B,IAAU6C,GAAwBhB,MAChB,QAAlBxC,IAA2B,IAAUnB,KACnB,UAAlBmB,IACC,CAACf,GAAeF,GAAeI,IAAqBvZ,KAAMuS,GAAM,IAAUA,KACzD,QAAlB6H,IACC,CAACX,GAAkBE,GAAWE,GAAeE,IAAqB/Z,KAAMuS,GAAM,IAAUA,IAmiB9E9Y,QAAQ,WAEP/C,GAAE,gBAEL,gBAAC,IAAM,CAAC+C,QAAQ,YAAYsC,QAAS,IAAM,KAAQQ,KAAK,iBACrD7F,GAAE,oBAIT,uBAAKC,UAAU,YACb,gBAAC,IAAyB,CACxByG,aACEqa,cAAc,EAAdA,GAAgBra,eAA4C,QAA7B,GAAa,QAAb,GAAAoa,cAAQ,EAARA,GAAW,UAAE,iBAAEC,sBAAc,iBAAEra,aAEhEoD,KAAM,YAAQtI,EAAM6gB,gBAAgB9W,KAAK,IACzC5B,SAAUA,GACVQ,YAAoC,QAAvB,GAAAkY,cAAe,EAAfA,GAAiB9hB,cAAM,iBAAE4J,cAExC,0BAAKnK,GAAE,sBACP,uBAAKC,UAAU,mBACX+J,GAAa7E,OAKb6E,GAAatJ,IAAK6R,GAChB,gBAAC,UAAO,CACN3R,IAAK,YAAwB2R,GAC7BlE,WAAW,EACXJ,IAAKsE,EACLnL,IAAK,KACL8G,SAAU,YAAwBqE,KAAStD,MAV/C,wBAAMhP,UAAU,cACbD,GAAE,gEAqBf4pB,EAAiEpoB,GACrE,gBAAC,KAAS,CAAC+J,KAAM/J,EAAM6gB,gBAAgB9W,KAAK,GAAIoG,OAAQnQ,EAAMmQ,OAAQC,UAAWpQ,EAAMoQ,WACrF,gBAACwQ,EAAwB,iBAAK5gB,KAIrBqoB,EAAuCroB,GAEhD,gBAAC,IAAQ,CACPQ,UAAW,CACT,CACE8G,QAAQ,EACR5I,KAAM,aAAkB,sBACxBgC,KAAM,iBAER,CACE4G,QAAQ,EACR5I,KAAM,aAAkB,wBACxBC,UAAW,IAAIkV,gBAAgBhJ,OAAOyF,SAASwD,QAAQ+P,IAAI,oBAC3DzE,cAAe,iBAAiB,IAAIvL,gBAAgBhJ,OAAOyF,SAASwD,QAAQ+P,IAAI,OAChF3E,SAAU,CACRC,YAAa,CACXmJ,QAAS,IAAIzU,gBAAgBhJ,OAAOyF,SAASwD,QAAQ+P,IAAI,aAG7DnjB,KAAM,mBAER,CACE4G,QAAQ,EACR5I,KAAM,aAAkB,qBACxBgC,KAAM,kBAKV,gBAAC0nB,EAAoB,iBACdpoB,EAAa,CAClByf,gBAAiB,IAAI5L,gBAAgBhJ,OAAOyF,SAASwD,QAAQ+P,IAAI,oBAAsB,SA+B/FuE,EAAqBljB,YAAc,uBACnC0b,EAAyB1b,YAAc,2BACvCmjB,EAAyBnjB,YAAc,4B,kCCjvCvC,kFAGO,MAAMqjB,EAAkC,gBAE7C,CAAEC,MAAM,EAAOrkB,MAAO,OAET,UAAAokB,EAAwC,U,kCCPvD,iGA8Fe,UAlCU,KACvB,MAAM,EAAE/pB,GAAM,yBAAe,WACtBiqB,EAAuB/I,EAASvb,GAAS,eACzCxF,GAAa,+BACd+pB,GA5CEC,OADyCA,EA6CuBF,GA5ChEE,EAAY,IAAIzpB,IACtB,EACE0pB,aACAC,eACA1b,cACAjI,cACAoD,OACAwgB,yBACAC,WACAC,kBACAnqB,OACAsJ,WACA+G,SACA+Z,uBACK,OAAD,QACJC,eAAgB,KAChBC,gBAAiBN,EACjBnX,cAAe,GACfC,uBAAwB,GACxBiX,aACAQ,iBAAkB,KAClBjc,YAAaA,GAAe6b,EAC5BK,cAAeP,EACfQ,eAAgB,KAChBC,WAAW,EACXC,aAAc,IAAeC,aAC7B/qB,KAAM,KACNsqB,gBAAiBA,GAAmB7b,EACpCtO,KAAMqG,GAAerG,EACrBN,IAAK,KACL4J,WACA+G,SACAwa,KAAMX,EACNtpB,IAAKZ,EACLoqB,qBACI3gB,EAAO,CAAEqhB,OAAQ,QAAQrhB,EAAKshB,oBAAoBthB,EAAKuhB,cAAiB,KApChC,IAAClB,EA+CjD,OACE,gBAAC,IAAI,KACH,gBAAC,IAAW,KACV,gBAAC,IAAM,KACL,6BAAQnqB,EAAE,uBAEZ,gBAAC,IAAW,CAACa,MAAOb,EAAE,uBACtB,gBAAC,KAAS,CACRsrB,SAAU,KACV/f,KAAM2e,EACNvY,QAASuP,EACTtP,UAAWjM,EACX8U,MAAOza,EAAE,2BACTsB,SAAU,IACR,gBAAC,IAAiB,CAACT,MAAOb,EAAE,qCACzBA,EACC,6FAKN,gBAAC,IAAmB,CAACgZ,MAAOkR,EAAuB/pB,UAAWA,S,kCCvFxE,4IAOYorB,EAPZ,qEAOA,SAAYA,GACV,wCACA,wCACA,uCAHF,CAAYA,MAAsB,KAKlC,MAAMC,EAAkB,CAACzrB,EAAuBgG,K,QAC9C,MAAO,CAAEoE,YAAoC,QAAvB,EAAW,QAAX,EAAApK,aAAG,EAAHA,EAAKQ,cAAM,eAAE6D,kBAAU,eAAEK,KAAMgnB,GAAMA,EAAE1lB,OAASA,KAG3D2lB,EACX3rB,IAMO,CACLmK,kBAAmBshB,EAAgBzrB,EAAKwrB,EAAuBI,mBAC/D1b,kBAAmBub,EAAgBzrB,EAAKwrB,EAAuBK,mBAC/D1b,kBAAmBsb,EAAgBzrB,EAAKwrB,EAAuBM,qBAItDC,EAA2E,EACtF3hB,cACAlK,gBAEA,MAAM,EAAED,GAAM,2BAEd,OACE,gBAAC,IAAO,CAAC0O,QAAS1O,EAAE,8BAA+B,CAAEsI,QAAS6B,aAAW,EAAXA,EAAa7B,WACzE,gBAAC,IAAK,aACM,oCACVyjB,MAAM,SACN9rB,UAAWA,EACX6J,KAAM,gBAAC,IAA6B,OAEnC9J,EAAE,qBAMEgsB,EAAyE,EACpF7hB,cACAkM,eAEA,MAAM,EAAErW,GAAM,2BAEd,OACE,gBAAC,IAAO,CAAC0O,QAAS1O,EAAE,8BAA+B,CAAEsI,QAAS6B,aAAW,EAAXA,EAAa7B,WACzE,gBAAC,IAA6B,CAAC+N,SAAUA,EAAUpW,UAAU,oBAKtDgsB,EAA2E,EACtF/hB,oBACA+F,oBACAC,oBACAM,kB,UAEA,MAAM,EAAExQ,GAAM,4BACPksB,EAAcC,GAAmB,YAAwB,GAEhE,OACED,GACE,gBAAC,IAAS,CAACjsB,UAAU,iBACnB,gBAAC,IAAK,CACJ8C,QAAQ,UACRlC,MAAOb,EAAE,2BAA0B,YACzB,SACVgD,UAAQ,EACR8e,YACEtR,GAAe,gBAAC,IAAsB,CAACqR,QAAS,IAAMsK,GAAgB,MAGxE,mCAAe,uCACkB,QAA9B,EAAAjiB,aAAiB,EAAjBA,EAAmBC,mBAAW,eAAE7B,SAEnC,mCAAe,uCACkB,QAA9B,EAAA2H,aAAiB,EAAjBA,EAAmB9F,mBAAW,eAAE7B,SAEnC,mCAAe,uCACkB,QAA9B,EAAA4H,aAAiB,EAAjBA,EAAmB/F,mBAAW,eAAE7B,a,kCCzF7C,IAAY8jB,EAKAC,EA0BAC,EAeAC,EA9CZ,iJAAYH,GACV,cACA,kBAFF,CAAYA,MAAc,KAK1B,SAAYC,GACV,yDACA,iEACA,mDACA,iFACA,0DACA,2EACA,wDACA,mEACA,yDACA,yDACA,uEACA,qEACA,iDACA,qDACA,iEACA,+DACA,uEACA,8DACA,wEACA,sDACA,yDACA,wEACA,qDAvBF,CAAYA,MAAc,KA0B1B,SAAYC,GACV,+DACA,yDACA,0CACA,2DACA,iCACA,6DACA,oDACA,iEACA,yDAEA,wDACA,qDAZF,CAAYA,MAAgB,KAe5B,SAAYC,GACV,yDACA,wDACA,qDACA,yDAJF,CAAYA,MAAgB,M,kCChD5B,oTAiBO,MAAMC,EAAoC,CAACC,EAAgBtR,EAAYF,EAAQlb,KACpF,MAAM2sB,EAAiB,aAAgBzR,EAAQ,GAAGwR,KAAkBtR,EAAW5V,QACzEonB,EAAW,CAACF,KAAmB,IAAStR,EAAW5V,OACnDmB,EACJyU,EAAWzU,cAAegmB,aAAc,EAAdA,EAAgB7rB,QAAS,IAAY,IAAO8rB,IAGxE,MAAO,CACLhe,aAHkBwM,aAAU,EAAVA,EAAYxM,eAAe+d,aAAc,EAAdA,EAAgB/d,cAAe,GAI5EjI,cACAimB,WACAD,iBACAlnB,MANY,IAAMzF,EAAK4sB,EAAUxR,EAAW3V,SAWnConB,EACXzQ,GAEAA,EAAYxX,OAAO,CAACC,EAAKuW,K,oBA8CvB,GACE,IAAyB0R,KAAK1R,EAAW5V,QACZ,QAA7B,EAAA4V,aAAU,EAAVA,EAAa,wBAAgB,eAAErV,SAAS,IAAiBkO,SAEzD,OAAOpP,EAGT,GAAI,IAAkBioB,KAAK1R,EAAW5V,MACpC,MArD4B,M,kCAC5B,MAAO,CAAEunB,EAAaC,GAAsD,QAAxC,EAAA5R,EAAW5V,KAAKynB,MAAM,YAAkB,QAAI,IACzE,CAAEzpB,EAAO0pB,GAA6D,QAAjD,EAAAH,aAAW,EAAXA,EAAaE,MAAM,YAA8B,QAAI,GACjF,OAAOC,EACH,OAAD,wBACMroB,GAAG,CACN,CAACrB,GAAQ,OAAF,wBACW,QAAZ,EAAAqB,aAAG,EAAHA,EAAMrB,UAAM,QAAI,IAAG,CACvB2pB,OAAQ,OAAF,wBACoB,QAApB,EAAY,QAAZ,EAAAtoB,aAAG,EAAHA,EAAMrB,UAAM,eAAE2pB,cAAM,QAAI,IAAG,CAC/B,CAACD,GAAW,OAAF,sCAC4B,QAAhC,EAAoB,QAApB,EAAY,QAAZ,EAAAroB,aAAG,EAAHA,EAAMrB,UAAM,eAAE2pB,cAAM,eAAGD,UAAS,QAAI,IAAG,CAC3CE,eAAgBL,EAChBM,cAAc,IACVL,EACA,CACEG,OAAQ,OAAF,wBACwC,QAAxC,EAAgC,QAAhC,EAAoB,QAApB,EAAY,QAAZ,EAAAtoB,aAAG,EAAHA,EAAMrB,UAAM,eAAE2pB,cAAM,eAAGD,UAAS,eAAEC,cAAM,QAAI,IAAG,CACnD,CAACH,GAAa5R,KAGlB,CAAEkS,kBAAmBlS,UAKjC,OAAD,wBACMvW,GAAG,CACN,CAACrB,GAAQ,OAAF,sCACW,QAAZ,EAAAqB,aAAG,EAAHA,EAAMrB,UAAM,QAAI,IAAG,CACvB4pB,eAAgBL,EAChBM,cAAc,IACVL,EACA,CACEG,OAAQ,OAAF,wBACoB,QAApB,EAAY,QAAZ,EAAAtoB,aAAG,EAAHA,EAAMrB,UAAM,eAAE2pB,cAAM,QAAI,IAAG,CAC/B,CAACH,GAAa5R,KAGlB,CAAEkS,kBAAmBlS,OAc1BmS,GAGT,MAAO,CAAE/pB,EAAO0pB,GAAgE,QAApD,EAAA9R,EAAW5V,KAAKynB,MAAM,YAA8B,QAAI,GACpF,OAAOzpB,EACH,OAAD,wBACMqB,GAAG,CACN,CAACrB,GAAQ,OAAF,wBACW,QAAZ,EAAAqB,aAAG,EAAHA,EAAMrB,UAAM,QAAI,IAChB0pB,EACA,CACEC,OAAQ,OAAF,wBACoB,QAApB,EAAY,QAAZ,EAAAtoB,aAAG,EAAHA,EAAMrB,UAAM,eAAE2pB,cAAM,QAAI,IAAG,CAC/B,CAACD,GAAW,OAAF,wBAC4B,QAAhC,EAAoB,QAApB,EAAY,QAAZ,EAAAroB,aAAG,EAAHA,EAAMrB,UAAM,eAAE2pB,cAAM,eAAGD,UAAS,QAAI,IAAG,CAC3C9R,kBAIN,CAAEA,iBAGVvW,GACH,IAGQ2oB,EAA8BpS,GACzC,IAASA,EAAW5V,MAAMuR,KAAK,KAiB1B,SAAS0W,EACdrS,EACApV,G,MAEA,MAAM0nB,EAlB0B,CAAC1nB,IACjC,OAAQA,GACN,IAAK,SACH,MAAO,IAAI,OAAmC,KAChD,IAAK,QACH,MAAO,IAAI,OAAmC,KAChD,QACE,MAAO,IAAI,OAAmC,OAWnB2nB,CAA0B3nB,GACzD,OAAqC,QAA7B,EAAAoV,aAAU,EAAVA,EAAa,wBAAgB,QAAI,IACtCpa,OAAQ4sB,IACP,MAAMC,EACK,QAAT7nB,GACA0nB,EAAuBnkB,KAAMukB,GAC3BF,EAAWG,WAAWD,IAc1B,OAZqB,IAAwBvkB,KAAMykB,GACjDJ,EAAWG,WAAWC,KAKtBllB,QAAQmlB,KACN,8BAA8BL,oEAC9BxS,KAICyS,IAEH/kB,QAAQmlB,KACN,2BAA2BL,2BAAoC5nB,mCAC/DoV,IAEK,KAKVwO,KAAK,CAACsE,EAAGC,KACR,MAAMC,EAAS,IAAsBC,UAAWT,GAAeM,EAAEH,WAAWH,IACtEU,EAAS,IAAsBD,UAAWT,GAAeO,EAAEJ,WAAWH,IAE5E,OAAIQ,EAAS,GAAKE,EAAS,EAClBA,EAASF,EAEXA,EAASE,IAcf,SAASC,EACdnT,EACA3V,GAGA,OAAOgoB,EAAgDrS,EAfpC,CAAC3V,GAEhB,IAAQA,GACH,MAIF,IAAUA,GAAS,QAAU,IAAWA,GAAS,SAAW,YAOtD+oB,CAAa/oB,IAIrB,SAASgpB,EACdrT,EACAF,GAGA,OAAOuS,EAAgDrS,EAD1C,wBAAcF,IAItB,MAAMwT,EAA0BtT,GACjB,WAApBA,EAAW5V,MAAgD,WAA3B4V,EAAWzU,a,kCChN7C,0GAQO,MAAMgoB,EAAuEltB,IAClF,MAAM,KAAEsI,EAAI,YAAEpD,EAAW,SAAEiD,EAAQ,QAAEC,EAAO,YAAEO,GAAgB3I,GACxD,EAAExB,GAAM,2BAER2uB,EAAiB,IAAW7kB,GAC9BA,EACA,IAAUA,GACV,IACA,QAAQA,EAAKshB,oBAAoBthB,EAAKuhB,aAE1C,OACE,uBAAKprB,UAAU,iCACb,uBAAKA,UAAU,uCACb,wBAAMA,UAAU,4BACd,uBACEA,UAAU,6DACV2uB,IAAKD,EACLE,IAAKnoB,EAAW,qBAKtB,uBAAKzG,UAAU,uCACb,sBAAIA,UAAU,8DACXyG,EAAa,IACbyD,GACC,gBAAC,IAA8B,CAAClK,UAAU,gBAAgBkK,YAAaA,KAG1ER,GACC,wBAAM1J,UAAU,4DACbD,EAAE,2CAA4C,CAC7C4J,QAASA,GAAW,GACpBD,SAAU,IAAMA,EAAU,OAAQA,U,kCCzChD,sHAOO,MAAMmlB,EAAoB,IAC/BziB,OAAOyF,SAASY,SACbrK,MAAM,KACN5D,KACC,CAACsqB,EAAMlW,EAAGmW,IACRA,EAASnW,EAAI,KAAO,aAAkB,+BACtCmW,EAASnW,EAAI,KAAO,6BAA2BrV,QAG1CyrB,EAA2CztB,IACtD,MAAM,UAAErB,EAAS,KAAEE,GAASmB,EAAMzB,IAAIK,SAChCO,EAAUa,EAAMb,SAAWmuB,IAE3B3gB,EAAY,aAAa3M,EAAMzB,KAC/B2D,EAAKvD,EACP,WAAWA,KAAa,6BAA2BqD,UAAU7C,KAAWwN,KAAa9N,IACrF,gBAAgB8N,KAAa9N,IAC3B6uB,EAAU,EAAW,mBAAoB,CAC7C,2BAA4B1tB,EAAM+O,SAGpC,OACE,wBAAMtQ,UAAWivB,GACf,gBAAC,KAAY,CAAChvB,KAAM,aAAasB,EAAMzB,OACvC,gBAAC,OAAI,CACH2D,GAAIA,EACJzD,UAAU,kCACVoF,QAAS7D,EAAM6D,QAAO,yBACEhF,EAAI,YACjBA,GAEVA,KAaT4uB,EAAYvoB,YAAc,e,qBCnD1ByoB,EAAOC,QAAU,IAA0B,+D,kCCA3C,gbAGO,MAAMC,EAAiC,IAAe,IAAeC,mBAC/DC,EAAqC,IAAe,IAAeC,iBACnEC,EAA2B,IAAe,IAAeC,QAEzDC,EAA6B,IAAIC,OAC5C,IAAIP,wCAEOQ,EAAuB,IAAID,OAAUH,EAAH,SAClCK,EAAqC,IAAIF,OACpD,IAAIL,kBAOOQ,EAAoB,uBAIpBC,EAA2B,+BAO3BC,EAAgC,mBAEhCC,EAA4C,CACvD,IAAeC,gBACf,IAAeC,WACf,IAAeC,kBACf,IAAe5V,OAGJ6V,EAAmD,CAC9D,IAAeC,SACf,IAAef,gBACf,IAAexb,OAEf,IAAemc,gBACf,IAAeC,YAIJI,EAAwE,CACnF,IAAiBzU,YACjB,IAAe0U,eACf,IAAeC,aACf,IAAeC,YACf,IAAeC,gBACf,IAAeC,qBACf,IAAenQ,SAEf,IAAejG,MACf,IAAe4V,mBAIJS,EAAuE,CAClF,IAAeC,aACf,IAAiB3sB,YAGN4sB,EAA2E,CACtF,IAAiBC,SACjB,IAAiBC,eACjB,IAAe5B,kBACf,IAAe6B,gBACf,IAAeC,SACf,IAAe1B,OACf,IAAiB2B,OACjB,IAAeC,cACf,IAAeC,SACf,IAAeC,SACf,IAAe7tB,KACf,IAAiBA,KACjB,IAAe8tB,OAEf,IAAehX,OAIJiX,EAA+D,CAE1E,IAAe1d,OACf,IAAe+c,aACf,IAAiB3sB,WACjB,IAAeysB,qBACf,IAAeJ,eACf,IAAiB1U,YACjB,IAAe2E,SACf,IAAe4O,kBACf,IAAe8B,SACf,IAAeI,SACf,IAAiBN,eACjB,IAAeI,cACf,IAAeC,SACf,IAAiBF,OAGjB,IAAe3B,OACf,IAAeyB,gBACf,IAAiBF,SACjB,IAAettB,KACf,IAAiBA,KACjB,IAAe8tB,OAGf,IAAeb,gBACf,IAAeD,YACf,IAAeD,aAGf,IAAeH,SACf,IAAef,mBACZU,I,kCCxHL,6CAEO,MAAMyB,EAAqC,EAAGtxB,OAAMoa,QAAOgD,UAASJ,cACzE,uBAAKpd,UAAU,cACb,uBAAKA,UAAU,YACb,yBAAOA,UAAU,iBACf,qCACgBwa,EAAH,aACXxa,UAAU,gBACVI,KAAMA,EACNgd,SAAUA,EACVI,QAASA,EAAO,qBACIA,EACpB1X,KAAK,aAEN0U,M,8kBCgCT,MAAMmX,EAAgB,CACpB1xB,KAAM,gBACN2X,WAAY,KACZga,kBAAmB,cAGRC,EAAgE,EAC3E1S,SACAH,QACA7X,MACAE,UACA9C,mB,wBAEA,MAAM,EAAExE,GAAM,4BAEZ+xB,EACAC,EACAC,GACE,eACGC,EAAkBC,GAAuB,YAAe,IACxDC,EAA2BC,GAAgC,YAAe,IAC1EC,EAAgBC,IAAqB,YAAe,IACpDC,GAA0BC,IAA+B,YAAe,IACxEC,GAAmBC,IAAwB,WAAe,IAC1DC,GAAwBC,IAA6B,YAAe,IACpEC,GAAuBC,IAA4B,WAA+B,KAClFC,GAAkCC,IAAuC,YAC9E,IAEKC,GAAkCC,IAAuC,WAC9E,IAGInqB,GAAgC,YAAgB,CACpDzF,MAAO,6BAA2BT,SAClCzB,SAAU,6BAA2BmC,OACrCC,KAAM,QACNpD,KAAM,MAGFsI,GAAa,YAA6C,QAAb,EAAAvB,aAAG,EAAHA,EAAKhH,gBAAQ,eAAE6J,cAE3DlB,IAAyB,YAC9BC,IAAiCL,GAAWxD,OAAS,EACjD,CACEjF,KAAM,aAAkB,8BACxB4I,QAAQ,EACRzI,KAAM,KAER,MAGA4kB,GAAiBtc,GAAW5H,OAAQwI,GACxC,YAAgBR,GAAuBQ,IAGnC6pB,KACFrqB,IAAyBC,IAAiCic,GAAe9f,OAAS,EAEhFkuB,GAAqC,QAAlB,EAAA7uB,aAAY,EAAZA,EAAchE,YAAI,eAAEH,KACvCizB,GAA8C,QAAtB,EAAA9uB,aAAY,EAAZA,EAAcpE,gBAAQ,eAAED,UAEhDozB,GAAqBvB,GAA+BQ,GAEpDgB,IACHD,MAAwBjB,GAAkBM,KAA2BR,EAElEqB,GAAkBX,GAAsB3tB,OAAS,GAAuC,KAAlC8sB,EAItDyB,GAA8D,UAAzB,QAA1B,EAAa,QAAb,EAAAtsB,aAAG,EAAHA,EAAKhH,gBAAQ,eAAE6J,mBAAW,eADlB,iDAOlB0pB,GAAUC,GAAgBC,IAA8B,YAC7DR,GACAC,IAGIQ,GAAoB,cAAkB,IAAY,OAAD,6B,MACrD,MAAMhV,EAAQsU,GACV,YAA2BrqB,GAAuBkc,IAClD,KAkBE8O,EAA4B,CAChCzsB,EAAQ,oBAAmB9C,EAAc,GAAIotB,OACrB,QAApB,EAAAptB,aAAY,EAAZA,EAAcjE,cAAM,eAAE6R,sBAlBoB,OAAD,6BAC7C,IAME,aALM,YAAe,CACnBhE,MAAO,6BACP/N,KAAMmE,EAAajE,OAAO6R,aAC1BrQ,GAAIyC,EAAapE,SAASD,aAErB,EACP,MAAOmc,GAIP,OAH4B,MAAxBA,EAAI0X,SAASzzB,QACf4yB,GAAoC7W,EAAIhU,UAEnC,OAOL,CACEhB,EACE,6BACA,CACElH,SAAU,CACRC,KAAMmE,EAAajE,OAAO6R,aAC1BjS,UAAWqE,EAAapE,SAASD,YAGrC,GACAyxB,IAGJ,MACAwB,GACA,CAAC,aAAS,6BAA4BrqB,GAAuB,CAAC+V,KAC9D,IAGNiT,EAA+BkC,QAAQzmB,IAAIumB,IACxCtuB,KAAK,KACJ4sB,GAA6B,KAE9B3sB,MAAM,KACL2sB,GAA6B,QAEhC,CACDtpB,GACAkc,GACA8M,EACAzqB,EACA8rB,GACA5uB,IAGI0vB,GAAqB,cACxBC,IACC1B,IAA4B,GAC5BI,IAA0B,GACtBsB,EACFL,MAEAb,IAAoC,GACpCZ,GAA6B,KAGjC,CAACyB,KAGGM,GAAe,cAAkB,KACrC,MAAMzkB,EAAM,GAAGtD,OAAOC,aAAa+nB,mCAAmChB,gBAA8BC,KAC9FgB,EAAWC,YAAY,KAC3B,YAAY5kB,GACTlK,KAAM+uB,IACL7B,GAAqB6B,EAAYxb,MAAM7T,QACN,IAA7BqvB,EAAYxb,MAAM7T,SACpBsvB,cAAcH,GACdI,WAAW,IAAMR,IAAmB,GAAO,QAG9CxuB,MAAM,KACLwuB,IAAmB,MAEtB,KACH,OAAOI,GACN,CAACJ,GAAoBb,GAAkBC,KAEpCqB,GAAmB,cAAkB,K,MACzC1V,KAKE5S,OAAOyF,SAASY,SAASrK,MAAM,KAAKvC,SAAStB,EAAapE,SAASC,OACnEgM,OAAOyF,SAASY,SAASrK,MAAM,KAAKvC,SAA6B,QAApB,EAAAtB,aAAY,EAAZA,EAAcjE,cAAM,eAAE6R,gBAEnE,KAAQvM,KAAK,aAA0B,6BAA4B,iBAEpE,CAACoZ,EAAOza,IAEX,YAAgB,KACVgvB,KAAqBC,IACvBkB,MAED,CAACA,GAAkBlB,GAAiBD,KAEvC,YAAgB,KACd,IAAIoB,EAIJ,OAHIpC,KACFoC,EAAaR,MAER,KACDQ,GACFH,cAAcG,KAGjB,CAACpC,GAA0B4B,KAE9B,MAmCM/zB,IAAgB,QAAT,EAAA+G,aAAG,EAAHA,EAAK5G,YAAI,eAAEkG,eAAiC,QAAlB,EAAAlC,aAAY,EAAZA,EAAchE,YAAI,eAAEH,MACrDM,GAAuB,QAAb,EAAAyG,aAAG,EAAHA,EAAKhH,gBAAQ,eAAEC,KACzBF,GACJqE,EAAapE,SAASD,YAAc,IAChC,iBACAqE,EAAapE,SAASD,UACtB00B,GAA6C,QAA1B,EAAa,QAAb,EAAAztB,aAAG,EAAHA,EAAKhH,gBAAQ,eAAE6J,mBAAW,eAAG,IAAc6qB,kBAC9DC,IAAuBnB,IAAkBD,GAASxuB,OAAS,EAE3D6vB,GACJ,gCACE,yBACGD,IACC,gCACG,IACA/0B,EACC,6FAGH,IACFA,EACC,kHAGHozB,IACC,yBACGpzB,EAAE,iFAAkF,CACnFyI,MAAOwc,GAAe9f,WAO1B8vB,GAAkBpB,GACtB,gBAACqB,EAAwB,CAACrB,2BAA4BA,KAEtDkB,IACE,gCACE,wBAAM90B,UAAU,2CACd,0BAAKD,EAAE,0BACP,gBAACm1B,EAAa,CACZxB,SAAUA,GACVhiB,OAAQiiB,GACRjzB,QAASA,GACTye,OAAQA,KAGZ,gBAAC,IAAQ,CACP/B,SAAU,EAAGiL,mBAAoBiK,GAAkBjK,EAAc7K,SACjEpd,KAAK,sBACLoa,MAAOza,EAAE,sDACTyd,QAAS6U,KAMX8C,GAAuBtC,GAAsB3tB,OACjD,gBAACkwB,EAAyB,CACxBvC,sBAAuBA,GACvBnyB,QAASA,GACTye,OAAQA,IAER4T,GACF,gBAACkC,EAAwB,CACvBrB,2BAA4B7zB,EAAE,kDAGhC,gBAACs1B,EAA2B,CAACj1B,KAAMA,GAAMF,UAAWA,KAGhDo1B,GACJ,gCACE,gBAACC,EAAc,CACbna,aACE6X,IACAjB,IACCa,GAAsB3tB,OACnBnF,EAAE,4EACF,IAENK,KAAMA,GACNF,UAAWA,KAEZmyB,GAAkB8C,IAIvB,OACE,wBAAMzW,SA7HQC,IAEd,GADAA,EAAMC,iBACF2U,GACFmB,UAKF,GADAxC,GAAoB,GAChBG,EAAgB,CAClBG,IAA4B,GAC5BE,GAAqBgB,GAASxuB,QAC9B,MAAMswB,EAA0B9B,GAASjzB,IAAKwW,IAC5C,MAAM9I,EAAQ,aAAS,aAAa8I,IACpC,OAAO5P,EAAQ8G,EAAO8I,EAAS,GAAI0a,KAGrC,YAAkB6D,GAAyBhwB,KAAK,EAAE,CAAE,CAAE8vB,MACpD,MAAMG,EAAgCH,EAAQ5wB,OAAO,CAACC,EAAqB+wB,EAAM9c,IACxD,aAAhB8c,EAAKp1B,OACRqE,EAAIK,OAAO,CAAEiS,QAASyc,GAAS9a,GAAIwC,aAAcsa,EAAKvlB,SACtDxL,EACH,IACC8wB,EAAcvwB,SAChB4tB,GAAyB2C,GACzBjD,IAA4B,GAC5BI,IAA0B,GAC1BR,GAA6B,WAIjCQ,IAA0B,GAC1BiB,MA8FsBzzB,KAAK,OAAOJ,UAAU,0CAC5C,gBAAC,IAAU,CAACA,UAAU,gBACpB,gBAAC,KAA6B,CAACA,UAAU,oB,IAAsBD,EAAE,4BAEnE,gBAAC,IAAS,KACPkyB,GACC,gCACE,yBACE,gBAAC,QAAK,CAAClyB,EAAGA,EAAG+B,GAAG,O,YACL,8BAAS,CAAE1B,U,wBAAsC,IAC1D,8BAAS,CAAEF,e,OAGbuzB,IAAY,gCAAGsB,IAChBH,IACC,gCACE,0BAAK70B,EAAE,wCACP,yBAAI60B,MAGNnB,IAAY,gCAAGuB,KAGpBzC,IACC,gBAACoD,EAAqB,CAACC,MAAOlC,GAASxuB,OAAQ2wB,UAAWpD,KAE3DV,GACC,2BACE,yBAAIhyB,EAAE,sCAGTwzB,IAAoB+B,IAEvB,gBAAC,IAAiB,CAChBrW,WAAYqU,GACZnU,OAAQA,EACR2W,cAAevC,GACfrU,WAAYnf,EAAEwzB,GAAmB,SAAW,iBAC5CwC,eAAgBzC,OAMlBqC,EAGD,EAAGC,QAAOC,gBACb,MAAM,EAAE91B,GAAM,2BACRi2B,EAAgBj2B,EAAE,sDAAuD,CAC7E81B,YACAD,UAEF,OACE,2BACE,gBAAC,IAAQ,CACPrwB,MAAOqwB,EAAQC,EACfI,IAAKL,EACLM,UAAWF,EACXxb,MAAOwb,EACPp1B,MAAOb,EAAE,wCACTge,KAAM,IAAaoY,KAErB,uBAAKn2B,UAAU,wBACb,yBACGD,EACC,kMAQNk1B,EAA6E,EACjFrB,iCAEA,MAAM,EAAE7zB,GAAM,2BACd,OACE,gBAAC,IAAK,CAAC+C,QAAQ,UAAU9C,UAAU,WAAWY,MAAOb,EAAE,4BAA6BgD,UAAQ,GAC1F,yBACGhD,EACC,0GAGJ,yBAAI6zB,KAKJwC,EAA+E,EACnFh2B,OACAF,gBAEA,MAAM,EAAEH,GAAM,2BACd,OACE,gBAAC,IAAK,CACJ+C,QAAQ,UACR9C,UAAU,WACVY,MAAOb,EAAE,yCACTgD,UAAQ,GAER,yBACE,gBAAC,QAAK,CAAChD,EAAGA,EAAG+B,GAAG,O,YACL,8BAAS,CAAE1B,S,iCAA+C,IACnE,8BAAS,CAAEF,c,QAOfm2B,EAAkE,EAAGjb,mBACzE,MAAM,EAAErb,GAAM,2BACd,OACE,gBAAC,IAAK,CACJ+C,QAAQ,SACR9C,UAAU,WACVY,MAAOb,EAAE,mCACTgD,UAAQ,GAER,yBACGhD,EAAE,qDACH,2BACCqb,KAMHga,EAID,EAAGvC,wBAAuBnyB,UAASye,aACtC,MAAM,EAAEpf,GAAM,2BACd,OACE,gBAAC,IAAK,CAAC+C,QAAQ,SAAS9C,UAAU,WAAWY,MAAOb,EAAE,+BAAgCgD,UAAQ,GAC5F,yBACGhD,EACC,kGAGJ,gBAACu2B,EAAgB,CACfb,cAAe5C,EACfnyB,QAASA,EACTye,OAAQA,MAMVkW,EAA6E,EACjFj1B,OACAF,gBAEA,MAAM,EAAEH,GAAM,2BACd,OACE,gBAAC,IAAK,CACJ+C,QAAQ,UACR9C,UAAU,WACVY,MAAOb,EAAE,kDACTgD,UAAQ,GAER,yBACE,gBAAC,QAAK,CAAChD,EAAGA,EAAG+B,GAAG,O,sCACqB,8BAAS,CAAE1B,S,MAAoB,IAClE,8BAAS,CAAEF,c,0BAOfq1B,EAAsF,EAC1Fna,eACAhb,OACAF,eAEAkb,EACE,gBAACib,EAA2B,CAACjb,aAAcA,IAE3C,gBAACgb,EAA6B,CAACh2B,KAAMA,EAAMF,UAAWA,IAGpDg1B,EAA8C,EAAGxB,WAAUhiB,SAAQhR,UAASye,aAChF,MAAM,EAAEpf,GAAM,2BACd,OACE,gBAAC,KAAS,CACRsrB,SAAU,uBAAKrrB,UAAU,4BACzBsL,KAAMooB,EACNhiB,OAAQA,GAER,yBAAO1R,UAAU,+CACf,yBAAOA,UAAU,wBACf,sBAAIA,UAAU,oBAAoBW,IAAI,4BACpC,sBAAIX,UAAU,mCAAmCD,EAAE,aACnD,sBAAIC,UAAU,qBAAqBD,EAAE,aACrC,sBAAIC,UAAU,qBAAqBD,EAAE,oBAGzC,6BACG2zB,EACEhK,KAAK,CAACsE,EAAGC,IAAMD,EAAE7tB,SAASC,KAAKm2B,cAActI,EAAE9tB,SAASC,OACxDK,IAAKwW,GACJ,sBAAIjX,UAAU,oBAAoBW,IAAKsW,EAAQ9W,SAASa,KACtD,sBAAIhB,UAAU,qBACZ,gBAAC,IAAW,CAACF,IAAKmX,EAASvW,QAASA,EAAS0E,QAAS+Z,KAExD,sBACEnf,UAAU,oCAAmC,yBACrBiX,EAAQhX,MAE/BgX,EAAQhX,MAEX,sBAAID,UAAU,qBACXiX,EAAQ9W,SAASD,UAChB,gBAAC,KAAY,CACXD,KAAK,YACLG,KAAM6W,EAAQ9W,SAASD,UACvBkF,QAAS+Z,IAET,WAYhBmX,EAAoD,EAAGb,gBAAe/0B,UAASye,aACnF,MAAM,EAAEpf,GAAM,2BACd,OACE,sBAAIC,UAAU,qCACX,IAAMy1B,EAAgBe,GACrB,sBACE71B,IAAK61B,EAAavf,QAAQ9W,SAASa,IACnChB,UAAU,kEAEV,gBAAC,IAAW,CAACF,IAAK02B,EAAavf,QAASvW,QAASA,EAAS0E,QAAS+Z,IAAW,IAC7EqX,EAAavf,QAAQhX,KACrB,KACAF,EAAE,uBAAwB,CACzB2F,MAAO8wB,EAAapb,mBAQnBqb,EAA+B,YAAoB5E,GA+BhEA,EAAuBprB,YAAc,0B,kCCtpBrC,0KAgBO,MAAMiwB,EAA6Dn1B,IACxE,MAAM,EAAExB,GAAM,4BACR,IAAE42B,EAAG,OAAEC,EAAM,QAAEC,EAAO,YAAEC,EAAW,eAAEC,EAAc,gBAAEC,EAAe,KAAE1xB,EAAO,IAAO/D,EAE1F,OACE,uBAAKvB,UAAU,qBACb,uBAAKA,UAAU,YACb,yBACE4Q,MAAO,CAAEqmB,WAAY,KACrBj3B,UAAU,4BACV4d,QAAYtY,EAAH,QAERvF,EAAE,kBAEL,yBACEwF,MAAOoxB,EACPvZ,SAAWC,GAAMyZ,EAAYzZ,EAAEE,OAAOhY,OACtCqU,GAAOtU,EAAH,OACJlF,KAAK,MACL0F,KAAK,OACL9F,UAAU,uBACV8d,YAAY,UAGhB,uBAAK9d,UAAU,YACb,yBACE4Q,MAAO,CAAEqmB,WAAY,KACrBj3B,UAAU,4BACV4d,QAAYtY,EAAH,WAERvF,EAAE,eAEL,yBACEwF,MAAOqxB,EACPxZ,SAAWC,GAAM0Z,EAAe1Z,EAAEE,OAAOhY,OACzCqU,GAAOtU,EAAH,UACJlF,KAAK,SACL0F,KAAK,OACL9F,UAAU,uBACV8d,YAAY,UAGhB,uBAAK9d,UAAU,YACb,yBACE4Q,MAAO,CAAEqmB,WAAY,KACrBj3B,UAAU,4BACV4d,QAAYtY,EAAH,sBAERvF,EAAE,gBAEL,yBACEwF,MAAOsxB,EACPzZ,SAAWC,GAAM2Z,EAAgB3Z,EAAEE,OAAOhY,OAC1CqU,GAAOtU,EAAH,qBACJlF,KAAK,oBACL0F,KAAK,OACL9F,UAAU,uBACV8d,YAAY,YAOToZ,EAA4B,aACtC31B,IACC,MAAM,EAAExB,GAAM,4BACR,IAAED,EAAG,KAAEwF,EAAI,KAAEQ,EAAI,MAAEqI,EAAK,MAAE6Q,EAAK,cAAED,GAAkBxd,GAClDo1B,EAAKQ,GAAU,WAAuB,IAAMr3B,EAAIS,KAAM,GAAG+E,KAAQQ,QAAY,MAC7E8wB,EAAQQ,GAAa,WAC1B,IAAMt3B,EAAIS,KAAM,GAAG+E,KAAQQ,WAAe,MAErC+wB,EAASQ,GAAc,WAC5B,IAAMv3B,EAAIS,KAAM,GAAG+E,KAAQQ,sBAA0B,KAavD,OACE,wBAAM4Y,SAAWrB,GAXJ,CAACA,IACdA,EAAEuB,iBACF,MAAM0Y,EAAS,IAAM,IAAYx3B,GAAM,QAAQwF,KAAQQ,IAAQ,OAAF,sCACvD6wB,GAAO,CAAEA,QACTC,GAAU,CAAEA,WACZC,GAAW,CAAE,oBAAqBA,KAExC,OAAO9X,EAAc,aAAU5Q,EAAOmpB,GAAStY,IAIxBuY,CAAOla,GAAIrd,UAAU,iBAC1C,gBAAC,IAAU,KAAEuB,EAAMX,OACnB,gBAAC,IAAS,KACR,uBAAKZ,UAAU,qBACb,uBAAKA,UAAU,aAAauB,EAAMmN,cAEpC,gBAACgoB,EAAoB,CACnBC,IAAKA,EACLC,OAAQA,EACRC,QAASA,EACTC,YAAaK,EACbJ,eAAgBK,EAChBJ,gBAAiBK,EACjB/xB,KAAMA,KAGV,gBAAC,IAAiB,CAChB8V,aAAc7Z,EAAM6Z,aACpB6D,WAAY1d,EAAM0d,WAClBC,WAAYnf,EAAE,eACdof,OAAQ5d,EAAM4d,YAWXqY,EAAgC,kBAJxB,EAAGC,QAAoB33B,UAAU,CACpDqO,MAAOspB,EAAIC,MAAM,CAAC,YAAa,SAAU,aAAa53B,OAGX,CAC1CyB,IACC,MAAM,IAAEzB,EAAG,KAAEgG,EAAI,KAAER,EAAI,MAAE6I,GAAU5M,GAC7B,EAAExB,GAAM,2BACR43B,EAAO53B,EAAE,gBACT,IAAE42B,EAAG,OAAEC,EAAQ,oBAAqBC,GAAY,IAAM/2B,EAAIS,KAAM,GAAG+E,KAAQQ,IAAQ,IAgBzF,OACE,gBAAC,IAAM,CACLA,KAAK,SACL/C,UAAQ,iBACK,sBACbqC,QAnBY,KACd,MAAMwyB,EAAQ,YAAoBV,GAC5BxoB,EAAc3O,EAAE,+DAAgE,CACpF+F,OACA7F,KAAMH,EAAIG,OAOZ,OAAO23B,EAAM,CAAEh3B,MALDb,EAAE,iCAAkC,CAChDE,KAAMH,EAAIG,KACV6F,KAAM,IAAaA,KAGC4I,cAAa5O,MAAKqO,QAAOrI,OAAMR,UASnDxC,QAAQ,QAEP/C,EAAE,6DAA8D,CAC/D42B,IAAKA,GAAOgB,EACZf,OAAQA,GAAUe,EAClBd,QAASA,GAAWc,IAEtB,gBAAC,IAAa,CAAC33B,UAAU,kDAyCjC02B,EAAqBjwB,YAAc,uBACnC+wB,EAA8B/wB,YAAc,gCAC5CywB,EAA0BzwB,YAAc,6B,kCCnNxC,kHAMO,MAAMC,EAAS5G,GACpB+3B,QAAQ/3B,IAAQ,aAAaA,KAAS,aAAkB,8BAE7Cg4B,EAAeh4B,I,UAC1B,OAAA4G,EAAM5G,KACkB,YAAb,QAAV,EAAAA,EAAIQ,cAAM,eAAE6P,SAAuB0nB,QAA4B,QAApB,EAAY,QAAZ,EAAA/3B,EAAIK,gBAAQ,eAAEmX,cAAM,eAAG,qBAExDygB,EAAmBj4B,I,QAC9B,OAAA4G,EAAM5G,MACmB,QAAxB,EAAAA,EAAIK,SAAS6J,mBAAW,eAAG,IAAcguB,iBAAkB,MAChD,QAAV,EAAAl4B,EAAIQ,cAAM,eAAED,SAAU,IAA2B6P,kB,kCChBrD,iFAOA,MAAM8B,EAAmB,CACvB1O,MAAO,6BAA2BT,SAClC8G,QAAS,6BAA2BiO,WACpC3X,KAAM,6BAA2BA,OAG7B,mBAAEqM,GAAuBF,OAAOC,aAEzB4rB,EAA2B,CACtC73B,EACAF,KAEA,MAAOg4B,EAAeC,EAAqBC,GAA0B,8BAEnE,CACApmB,mBACA5R,OACAF,YACAiN,SAAUb,KAEL+rB,EAAWC,EAAiBC,GAAsB,8BAGvDjsB,EACI,CACE0F,mBACA5R,OACAF,UAAW,IACXiN,SAAUb,GAEZ,MAGN,OAAO,UAAc,IACfA,GAAsBurB,QAAQO,GACzB,CAAC,YAAYC,GAAaA,EAAY,KAAMC,EAAiBC,GAE/D,CAACL,EAAeC,EAAqBC,GAC3C,CACDC,EACAE,EACAD,EACAJ,EACAE,EACAD,M,kCCnDJ,wGAcA,MAAM/zB,EAA6D,EAAG+a,SAAQpZ,mBAC5E,MAAM,EAAEhG,GAAM,2BACd,OACE,uBAAKC,UAAU,iBACb,gBAAC,IAAU,KACRD,EAAE,2BAA4B,IAC/B,gBAAC,KAAY,CACXwO,QAAQ,EACRnO,KAAM2F,EAAa3F,KACnBH,KAAM,YAAyB8F,MAGnC,gBAAC,IAAS,KACR,gBAAC,IAAe,CAACR,MAAO,mBAASgK,KAAKC,MAAMzJ,EAAayyB,cAE3D,gBAAC,IAAW,CAACvZ,YAAY,GACvB,gBAAC,IAAW,CAACjf,UAAU,gFACrB,gBAAC,IAAM,CAAC8F,KAAK,SAAShD,QAAQ,YAAYsC,QAAS,IAAM+Z,KACtDpf,EAAE,kBAQF04B,EAA0B,YACrCr0B,GASFA,EAAmBqC,YAAc,sB,kCClDjC,6DAQO,MAAMiyB,EAAgC,KAC3C,MAAMlgB,EAAW,wBAEXvO,EAAoB,sBAAayJ,GACrCA,EAAMilB,GAAGjB,MAAM,CAAC,qBAAsB,aAElC1nB,EAAoB,sBAAa0D,GACrCA,EAAMilB,GAAGjB,MAAM,CAAC,qBAAsB,aAElCznB,EAAoB,sBAAayD,GACrCA,EAAMilB,GAAGjB,MAAM,CAAC,qBAAsB,aAkBxC,MAAO,CACLztB,oBACAib,qBAjB2B,sBAC1B3f,GAAqCiT,EAAS,IAA+BjT,IAC9E,CAACiT,IAgBDxI,oBACA4oB,qBAd2B,sBAC1BrzB,GAAqCiT,EAAS,IAA+BjT,IAC9E,CAACiT,IAaDvI,oBACA4oB,qBAX2B,sBAC1BtzB,GAAqCiT,EAAS,IAA+BjT,IAC9E,CAACiT,O,kCCjCL,sDAIO,MAAMsgB,EAAc,CACzBC,EACAC,KAEA,MAAOtF,EAAUuF,GAAe,WAAoC,KAC7DvnB,EAAQwnB,GAAa,YAAe,IACpC9d,EAAcC,GAAmB,WAAe,IAmBvD,OAjBA,YAAgB,KACd,MAAM3L,EAAM,GAAGtD,OAAOC,aAAa+nB,mCAAmC2E,eAA0BC,IAChG,YAAYtpB,GACTlK,KAAM8F,I,MACL2tB,EAAuB,QAAX,EAAA3tB,aAAI,EAAJA,EAAMyN,aAAK,QAAI,IAC3BmgB,GAAU,GACV7d,EAAgB,MAEjB5V,MAAO4W,IACN4c,EAAY,IACZC,GAAU,GACV7d,EACE,8BAA8B0d,QAAmBC,MAAsB3c,QAG5E,CAAC0c,EAAcC,IAEX,CAACtF,EAAUhiB,EAAQ0J,K,kCC7B5B,2HAqBA,MAAM+d,EAAuBr5B,I,gBAC3B,OACwC,QADxC,EAAoD,QAApD,EAA+B,QAA/B,EAAyB,QAAzB,EAACA,SAAwB,eAAES,YAAI,eAAE0T,2BAAmB,QACtB,QAA7B,EAAuB,QAAxB,EAACnU,SAAuB,eAAES,YAAI,eAAE2C,gBAAQ,QACxC,IAAoBmT,WA+ET+iB,EAAiC,YA7EmC,EAC/Eja,SACAH,QACA7I,YACArW,UAEA,MAAM,EAAEC,GAAM,4BACPgf,EAAeE,EAAY7D,GAAgB,eAC3Cie,EAA0BC,GAA+B,WAC9DH,EAAoBr5B,IAEhBy3B,EAAS,cACZ5Y,IACCA,EAAMC,iBACN,MAAM2a,EAAa,IAAYz5B,GAC3B,aAAay5B,KAAgB,aAAkB,qBAChDA,EAAgCh5B,KAAK0T,oBAAsBolB,EACnD,aAAaE,KAAgB,aAAkB,sBACvDA,EAA+Bh5B,KAAK2C,SAAWm2B,GAElDta,EAAc5I,EAAU,aAAS,aAAarW,IAAOy5B,IAClD/zB,KAAK,IAAMwZ,aAAK,EAALA,KACXvZ,MAAM,MAEX,CAACuZ,EAAOD,EAAe5I,EAAWrW,EAAKu5B,IAGzC,OACE,wBAAM3a,SAAU6Y,EAAQn3B,KAAK,OAAOJ,UAAU,iBAC5C,gBAAC,IAAU,CAACA,UAAU,gBAAgBD,EAAE,wCACxC,gBAAC,IAAS,KACR,uBAAKC,UAAU,iBACb,yBAAID,EAAE,sDAER,uBAAKC,UAAU,qBACb,uBAAKA,UAAU,aACb,gBAAC,IAAU,CACTod,SAAWC,GAAMic,EAA4Bjc,EAAEE,OAAOhY,OACtDA,MAAO,IAAoB8Q,UAC3BmH,QAAS6b,IAA6B,IAAoBhjB,UAC1DzV,MAAOb,EAAE,iBACT2d,SAAU,IAAI3d,EAAE,sBAEhB,uBAAKC,UAAU,mBACb,qBAAGA,UAAU,cACVD,EAAE,2EAKX,uBAAKC,UAAU,aACb,gBAAC,IAAU,CACTod,SAAWC,GAAMic,EAA4Bjc,EAAEE,OAAOhY,OACtDA,MAAO,IAAoBpC,OAC3Bqa,QAAS6b,IAA6B,IAAoBl2B,OAC1DvC,MAAOb,EAAE,eAET,uBAAKC,UAAU,mBACb,qBAAGA,UAAU,cACVD,EAAE,kFAOf,gBAAC,IAAiB,CAChBkf,WAAYA,EACZ7D,aAAcA,EACd+D,OAAQA,EACRD,WAAYnf,EAAE,eACdg2B,eAAgBoD,EAAoBr5B,KAASu5B,Q,kCCjGrD,iHAgBO,MA2EMG,EAAiC,YA3EmC,EAC/Era,SACAH,QACA7I,YACApD,MACAxO,mB,oBAEA,MAAM,EAAExE,GAAM,2BACR6oB,EAA4C,QAA3B,EAAkB,QAAlB,EAAArkB,aAAY,EAAZA,EAAchE,YAAI,eAAEyT,eAAO,QAA8B,QAA1B,EAAqB,QAArB,EAAW,QAAX,EAAAjB,aAAG,EAAHA,EAAKzS,cAAM,eAAEugB,gBAAQ,eAAG,UAAE,eAAEzgB,MAC3E2e,EAAeE,EAAY7D,GAAgB,eAC3Cqe,EAAiBC,GAAsB,WAAe9Q,GAEvD2O,EAAS,cACZ5Y,IACCA,EAAMC,iBACNG,EACE5I,EAAU,oBAAmB,OAAF,wBACtB5R,GAAY,CACfhE,KAAM,OAAF,wBACCgE,EAAahE,MAAI,CACpByT,QAASylB,QAIZj0B,KAAK,IAAMwZ,aAAK,EAALA,KACXvZ,MAAM,SAEX,CAACuZ,EAAOD,EAAe5I,EAAWsjB,EAAiBl1B,IAGrD,OACE,wBAAMma,SAAU6Y,EAAQn3B,KAAK,OAAOJ,UAAU,iBAC5C,gBAAC,IAAU,CAACA,UAAU,gBACnBD,EAAE,2CAEL,gBAAC,IAAS,KACR,uBAAKC,UAAU,iBACb,yBAAID,EAAE,mDAER,uBAAKC,UAAU,qBACc,QAA1B,EAAqB,QAArB,EAAW,QAAX,EAAA+S,aAAG,EAAHA,EAAKzS,cAAM,eAAEugB,gBAAQ,eAAEpgB,WAAG,sBAAIuT,GAC7B,uBAAKrT,IAAKqT,EAAQ5T,KAAMJ,UAAU,aAChC,gBAAC,IAAU,CACTod,SAAWC,GAAMqc,EAAmBrc,EAAEE,OAAOhY,OAC7CA,MAAOyO,EAAQ5T,KACfod,QAASic,IAAoBzlB,EAAQ5T,KACrCQ,MAAOoT,EAAQ5T,KACfsd,SACE,gBAAC,KAAY,CACXnP,QAAQ,EACRnO,KAAM4T,EAAQxG,WACd5M,MAAOoT,EAAQxG,WACfvN,KAAM,aAAkB,gCAEvB+T,aAAO,EAAPA,EAAS9J,aACR,gBAAC,IAA6B,CAACA,YAAa8J,aAAO,EAAPA,EAAS9J,cACnD,YAQlB,gBAAC,IAAiB,CAChB+U,WAAYA,EACZ7D,aAAcA,EACd+D,OAAQA,EACRD,WAAYnf,EAAE,eACdg2B,eAAgB0D,IAAoB7Q,Q,kCCrF5C,sQAYO,MAAM+Q,EAAsC,EAAGr0B,UAElD,wBAAMtF,UAAU,sDACd,gBAAC,KAA6B,M,KAE9B,gBAAC,QAAK,CAAC8B,GAAG,O,aACE,wBAAM9B,UAAU,WAAW,CAAEsF,S,iBAMlCs0B,EAAgF,EAC3FlrB,cACA8L,QACA1a,MACA4sB,WACAnnB,YAEA,MAAM,EAAExF,GAAM,2BACRqL,EAAS,UAAc,KACvB,IAAU7F,IAAW,IAAWA,IAAW,IAAYA,GAGpD,IAAWA,GAFT,wBAAMvF,UAAU,cAAcD,EAAE,gBAGxC,CAACA,EAAGwF,IAEP,OACE,gBAAC,IAAW,CAACmJ,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GAClEthB,IAKMyuB,EAAqE,EAChFnM,aACAhf,cACAwM,aACAwR,WACAlS,QACA1a,MACAyF,YAEA,MAAM,EAAExF,GAAM,2BACRqL,EAAS,UAAc,K,MAC3B,IAAK7F,EACH,OAAO,wBAAMvF,UAAU,cAAcD,EAAE,gBAGzC,MAAO,CAAE+5B,GAAsD,QAA5C,EAAApM,EAAWX,MAAM,YAA2B,QAAI,GAC7DtE,EAAMqR,aAAM,EAANA,EAAQzf,QAAQ,KAAM,KAClC,OAAK,IAAW9U,GAST,gBAAC,KAAY,CAACtF,KAAMwoB,EAAKroB,KAAMmF,EAAOrF,UAAWJ,EAAIK,SAASD,aAPnE0I,QAAQmlB,KACN,iEAAiE7S,EAAW5V,+BAC5E4V,GAGK,OAGR,CAAC3V,EAAOmoB,EAAY5tB,EAAIK,SAASD,UAAWH,EAAGmb,IAClD,OACE,gBAAC,IAAW,CAACxM,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GAClEthB,IAKM2uB,EAA4D,EACvErrB,cACA8L,QACA1a,MACA4sB,WACAnnB,YAEA,MAAM,EAAExF,GAAM,4BACPi6B,EAAQC,GAAa,YAAe,GAE3C,OACE,gBAAC,IAAW,CAACvrB,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACnE,uBAAK1sB,UAAU,0BACb,gBAAC,IAAM,CACL8F,KAAK,SACLhD,QAAQ,OACRC,UAAQ,EACR/C,UAAU,qDACVoF,QAAS,IAAM60B,GAAWD,IAEzBA,EACC,gCACE,gBAAC,IAAY,CAACh6B,UAAU,oBACvBD,EAAE,oBAGL,gCACE,gBAAC,IAAO,CAACC,UAAU,oBAClBD,EAAE,uBAIT,gBAAC,IAAW,CAACwF,MAAOA,EAAO20B,SAAS,EAAOF,OAAQA,OAQ3DL,EAAQlzB,YAAc,UACtBmzB,EAAkBnzB,YAAc,oBAChCozB,EAA0BpzB,YAAc,4BACxCszB,EAAiBtzB,YAAc,oB,kCC5H/B,6DAUO,MAAM0zB,EAAiE,KAC5E,MAAM3hB,EAAW,wBAQjB,MAAO,CAP6B,sBAAa9E,GAC/CA,EAAMilB,GAAGvT,IAAI,gCAEwB,cACpC7f,GAAmBiT,EAAS,IAAyCjT,IACtE,CAACiT,O,kCCjBL,sEAQO,MAAM4hB,EAAuB,KAClC,MAAMC,EAA6B,YAAgC,KAC7DC,EAAoC,YACxC,MAEF,OAAO,UACL,IAAM,YAAqBD,EAA4BC,GACvD,CAACD,EAA4BC,M,kCCfjC,8CAIO,MAAMC,EAAqB,IACzB,sBAAY,EAAG5B,QAASA,EAAGvT,IAAI,qB,kCCLxC,sEAMO,MAAMoV,EAAgCrzB,IAC3C,MAAOqC,GAAmB,eACpBixB,EAAe,YAAqB,8BAE1C,OACEruB,OAAOC,aAAaC,oBACO,cAA3BnF,EAAIhH,SAASD,WACbsJ,IAAoB,IAEb,aAAaixB,EAActzB,EAAIhH,SAASC,KAAMoJ,GAEhD,aAAgBrC,EAAKszB,K,kCCjB9B,mNAwCA,MAAMC,EAAiD,CACrD,CAAEz6B,KAAM,kBAAgBA,KAAM0J,QAAS,kBAAgBiO,YACvD,CAAE3X,KAAM,eAAaA,KAAM0J,QAAS,eAAaiO,YACjD,CAAE3X,KAAM,kBAAgBA,KAAM0J,QAAS,kBAAgBiO,YACvD,CAAE3X,KAAM,WAASA,KAAM0J,QAAS,WAASiO,YACzC,CAAE3X,KAAM,cAAYA,KAAM0J,QAAS,cAAYiO,YAC/C,CAAE3X,KAAM,iBAAeA,KAAM0J,QAAS,iBAAeiO,YACrD,CAAE3X,KAAM,WAASA,KAAM0J,QAAS,WAASiO,aAGrClY,EAAqB,CACzB,GACA,qBACA,oDACA,kCAGWi7B,EAMR,EAAG76B,MAAK6K,YAAciwB,UAASC,mB,QAAoB,OACtD,gCACE,gBAAC,IAAS,CAAC76B,UAAWN,EAAmB,IAAKk7B,EAAQ96B,EAAK+6B,IAC3D,gBAAC,IAAS,CAAC76B,UAAWN,EAAmB,IAAKI,EAAIG,MAClD,gBAAC,IAAS,CAACD,UAAWN,EAAmB,IACvC,gBAAC,KAAM,CAACY,OAA0B,QAAlB,EAAW,QAAX,EAAAR,aAAG,EAAHA,EAAKQ,cAAM,eAAED,aAAK,QAAI,aAExC,gBAAC,IAAS,CAACL,UAAWN,EAAmB,IACvC,gBAAC,KAAS,CAACyK,UAAWrK,EAAIK,SAASqQ,uBAK5BsqB,EAA+Cv5B,IAC1D,MAAM,EAAExB,GAAM,2BA4Bd,OACE,gBAAC,IAAK,iBACAwB,EAAK,cACGxB,EAAE,yBACdyB,OA/BwB,IAAM,CAChC,CACEZ,MAAOb,EAAE,YACT0B,UAAW,gBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,YACT0B,UAAW,OACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,cACT0B,UAAW,eACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEkB,MAAOb,EAAE,eACT0B,UAAW,6BACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,MASvCiC,IAAKg5B,EACLt5B,SAAU,IACR,gBAAC,IAAiB,CAACT,MAAOb,EAAE,2BACzBA,EAAE,gEAGP0M,YAAU,MAKHsuB,EACXC,GAC0Ej5B,GACnE,IAAUA,EAAW,CAACX,EAAUnB,IACrC,IAAMmB,EAASkK,KAAOqN,GAAU,OAAD,wBAAMA,GAAI,CAAE1Y,WAC3CyE,OAAO,CAAC+W,EAAOra,KACPA,EAASjB,SAASU,iBAAmB,IAAIwI,KAC9CtI,GACCA,EAAIC,MAAQg6B,EAAU76B,SAASa,KAC/Bya,EAAMpS,KAAK,EAAGlJ,cAAeA,EAASa,MAAQD,EAAIC,MAElDya,EAAMzW,OAAO,CAAC5D,IACdqa,EACH,IAKQwf,EAAqB,CAChCn7B,EACA+6B,EACAn6B,K,MAEA,OAAAZ,EAAIK,SAASD,YACU,QAAtB,EAAA26B,aAAW,EAAXA,EAAa94B,iBAAS,QAAI,IAAIsH,KAAK,EAAGpJ,OAAMG,UAAWA,GAAQH,IAASH,EAAIG,MAC3E,gBAAC,IAAW,CAACH,IAAKA,EAAKY,QAASA,IAEhC,gBAAC,KAAY,CAACT,KAAMH,EAAIG,KAAMG,KAAMN,EAAIK,SAASC,KAAMF,UAAWJ,EAAIK,SAASD,aAKtEg7B,EAAuC35B,I,MAClD,MAAM,EAAExB,GAAM,4BACR,OAAEwD,GAAW,sBACbs3B,EAAc,YAAwBt5B,EAAMoJ,WAAYpH,GAExD43B,GAA2C,QAAtB,EAAAN,aAAW,EAAXA,EAAa94B,iBAAS,QAAI24B,GAAmBj6B,IACtE,EAAGL,OAAMH,OAAM0J,cACb,MAAMrG,EAAQlD,EAAOA,EAAKg7B,UAAUh7B,EAAK6c,QAAQ,KAAO,GAAK,GACvD/O,EAAY5K,EAAQ,aAA6BA,EAA7B,CAAoCqG,EAApC,CAA6C1J,GAAQA,EACzEkO,EAAQ,aAASD,GACvB,MAAO,CACLjO,KAAMkO,IAAUA,EAAMH,IAAM/N,EAAOiO,EACnClM,YAAYmM,GAAQA,EAAMnM,WAC1BC,KAAMhC,KAKN0K,EAAa,UACjB,KAAM,CACJiwB,QAASK,EACTJ,gBAEF,CAACA,IAGH,OACE,gBAAC,IAAa,CACZvmB,YAAavU,EAAE,yBACfgC,UAAWo5B,EACX1hB,WAAY,CACV,CACE3T,KAAM,sCACN4T,gBAAiB3Z,EAAE,YACnB4Z,QAAS,EAAG1Z,UAAW,aAAiBA,GACxC8Y,MAAOoiB,EAAkB16B,IAAI,EAAGR,WAAW,CACzC2Z,GAAI,aAAiB3Z,GACrBW,MAAO,aAAiBX,QAI9BiC,QAAS64B,EAAoBx5B,EAAMzB,KACnCI,UAAWqB,EAAMzB,IAAIK,SAASD,UAC9BmC,cAAey4B,EACfnwB,WAAYA,KAoBlBmwB,EAAcr0B,YAAc,gBAC5By0B,EAAUz0B,YAAc,a,kCC1NxB,8KAiBO,MAAM40B,EAA8D,EACzEjZ,kBACA6F,wBACAC,mBACAlE,uBAEA,MAAM,EAAEjkB,GAAM,2BACR8gB,EAAW,UAAc,KAAK,MAAC,OAAgC,QAAhC,EAAAuB,aAAe,EAAfA,EAAiB9hB,OAAOugB,gBAAQ,QAAI,IAAI,CAACuB,KACvEkZ,EAAqBC,GAA0B,YAAe,IAC/D,qBAAE3C,GAAyB,cACjC/X,EAAS6I,KAAK,CAACsE,EAAGC,KAAO,aAAoBD,EAAE5tB,KAAM6tB,EAAE7tB,OAEvD,MAAMo7B,EAAmBtmB,GACvB,gCACGA,EAAG9U,KAAM,KACT8U,aAAE,EAAFA,EAAIhL,cACH,gBAAC,IAA6B,CAC5BA,YAAagL,aAAE,EAAFA,EAAIhL,YACjBkM,SAAS,8CAMXqlB,EAAuB5a,EAASpgB,IAAKyU,GACzC,gBAAC,IAAY,CACXvU,IAAKuU,EAAG9U,KACRwZ,GAAI1E,EAAG9U,KACPmF,MAAO2P,EAAG9U,KAAI,YACH,kBAAkB8U,EAAG9U,MAE/Bo7B,EAAgBtmB,KAcrB,OAVA,YAAgB,KACd,aAAiB,UAAW+S,GAC5B2Q,EACE,IACE/X,EAASrc,KAAMgnB,GAAMA,EAAEthB,aAAeshB,EAAEprB,OAAS6nB,GACjD,iBAGH,CAACA,EAAuBpH,EAAU+X,IAGnC,gCACE,gBAAC,IAAM,CACL8C,OAASC,GACP,gBAAC,IAAU,CACT56B,IAAK46B,EACLv2B,QAAUw2B,GAASL,EAAuBK,GAC1CC,WAAYP,EACZn2B,YAAaid,EACb0Z,aAAW,eACC/7B,EAAE,wBACdC,UAAU,8BAA6B,YAC7B,kCAETw7B,EAAgB3a,EAASrc,KAAMgnB,GAAMA,EAAEprB,OAAS6nB,KAGrD8T,SAAU,CAACpd,EAA6CpZ,KACtD2iB,EAAiB3iB,GACjBg2B,GAAuB,GACvBvX,EAAiB,KAEnBlK,SAAUmO,GAAyB,IACnC+T,aAAeC,GAAWV,EAAuBU,GACjDA,OAAQX,GAER,gBAAC,IAAU,KAAEG,MAaRS,EAA8D,EACzE9Z,kBACA6F,wBACAlE,gBACAC,mBACAmE,oBAAmB,M,MAEnB,MAAM,EAAEpoB,GAAM,4BACR,qBAAE84B,GAAyB,eAC1BsD,EAAqBC,GAA0B,YAAe,IAC9DC,EAA0BC,GAA+B,WAAe,KACzE,SAAEzb,EAAW,IAA8B,QAAvB,EAAAuB,aAAe,EAAfA,EAAiB9hB,cAAM,QAAI,GAErD,YAAgB,K,UACdg8B,EACmF,QAAjF,EAAwE,QAAxE,EAAwD,QAAxD,EAAAzb,EAASrc,KAAM0Q,GAAOA,EAAG9U,OAAS6nB,UAAsB,eAAEnH,sBAAc,eAAEnX,eAAO,QAAI,MAEtF,CAACkX,EAAUoH,IAEd,MAAMsU,EAAwBxY,GAAiBsY,EAGzCG,EAA0B,UAC9B,KAAK,QAAC,OAAiE,QAAjE,EAAwD,QAAxD,EAAA3b,EAASrc,KAAM0Q,GAAOA,EAAG9U,OAAS6nB,UAAsB,eAAEa,eAAO,QAAI,IAC3E,CAACjI,EAAUoH,IAGPwU,EAAmB7gB,GACvB,gCACGA,aAAC,EAADA,EAAGjS,QAAS,KACZiS,aAAC,EAADA,EAAG1R,cACF,gBAAC,IAA6B,CAC5BA,YAAa0R,aAAC,EAADA,EAAG1R,YAChBkM,SAAS,8CAMXsmB,EAAuBF,EAAwB/7B,IAAKmb,GACxD,gBAAC,IAAY,CACXjb,IAAKib,EAAEjS,QACPiQ,GAAIgC,EAAEjS,QACNpE,MAAOqW,EAAEjS,QAAO,YACL,kBAAkBiS,EAAExb,MAE9Bq8B,EAAgB7gB,KAcrB,OAVA,YAAgB,KACd,aAAiB,UAAW2gB,GAC5B1D,EACE,IACE2D,EAAwBh4B,KAAMgnB,GAAMA,EAAEthB,aAAeshB,EAAE7hB,UAAY4yB,GACnE,iBAGH,CAACA,EAAuBC,EAAyB3D,IAGlD,gCACE,gBAAC,IAAM,CACL6C,OAASC,GACP,gBAAC,IAAU,CACT56B,IAAK46B,EACLv2B,QAAUw2B,GAASQ,EAAuBR,GAC1CC,WAAYM,EACZh3B,YAAaid,EACb0Z,aAAW,eACC/7B,EAAE,wBACdC,UAAU,8BAA6B,YAC7B,kCAETy8B,EACCD,EAAwBh4B,KAAMoX,GAAMA,EAAEjS,UAAY4yB,KAIxDR,SAAU,CAACpd,EAA6CpZ,KACtDye,EAAiBze,GACjB62B,GAAuB,IAEzBtiB,SAAUyiB,EACVP,aAAeC,GAAWG,EAAuBH,GACjDA,OAAQE,GAER,gBAAC,IAAU,KAAEO,IAGdvU,GAAoBoU,IAA0BF,GAC7C,gBAAC,IAAK,CACJv5B,QAAQ,OACRC,UAAQ,EACR/C,UAAU,0DACVY,MAAOb,EACL,gH,kCCrMZ,0KAAO,MAYM48B,EAAe,CAACC,EAAgBjzB,IAC3C,IAAIqqB,QAAQ,CAAC6I,EAASC,KACpB,MAAMC,EAAUC,UAAUpB,KAAKgB,EAAQjzB,GACvCozB,EAAQE,gBAAkB,KACxB,MAAMC,EAAKH,EAAQxnB,OAEnB,IAAK2nB,EAAGC,iBAAiBC,SAAS,eAAgB,CAC3BF,EAAGG,kBAAkB,cAAe,CAAEC,QAAS,OACvDC,YAAY,UAAW,UAAW,CAAEC,QAAQ,IAE3D,IAAKN,EAAGC,iBAAiBC,SAAS,eAAgB,CAChD,MAAMK,EAAeP,EAAGG,kBAAkB,cAAe,CAAEC,QAAS,OACpEG,EAAaF,YAAY,UAAW,UAAW,CAAEC,QAAQ,IACzDC,EAAaF,YAAY,UAAW,UAAW,CAAEC,QAAQ,IAE3D,IAAKN,EAAGC,iBAAiBC,SAAS,cAAe,CAC/C,MAAMM,EAAcR,EAAGG,kBAAkB,aAAc,CAAEC,QAAS,OAClEI,EAAYH,YAAY,UAAW,UAAW,CAAEC,QAAQ,IACxDE,EAAYH,YAAY,UAAW,UAAW,CAAEC,QAAQ,IAE1D,IAAKN,EAAGC,iBAAiBC,SAAS,qBAAsB,CACtD,MAAMO,EAAwBT,EAAGG,kBAAkB,oBAAqB,CACtEC,QAAS,OAEXK,EAAsBJ,YAAY,aAAc,aAAc,CAC5DC,QAAQ,EACRI,YAAY,IAEdD,EAAsBJ,YAAY,WAAY,WAAY,CACxDC,QAAQ,EACRI,YAAY,IAEdD,EAAsBJ,YAAY,yBAA0B,yBAA0B,CACpFC,QAAQ,EACRI,YAAY,IAEdD,EAAsBJ,YAAY,oBAAqB,oBAAqB,CAC1EC,QAAQ,EACRI,YAAY,IAEdD,EAAsBJ,YAAY,SAAU,SAAU,CAAEC,QAAQ,IAChEG,EAAsBJ,YAAY,WAAY,WAAY,CAAEC,QAAQ,IACpEG,EAAsBJ,YAAY,UAAW,UAAW,CAAEC,QAAQ,IAClEG,EAAsBJ,YAAY,eAAgB,eAAgB,CAAEC,QAAQ,MAIhFT,EAAQc,UAAY,KAClBhB,EAAQE,EAAQxnB,SAGlBwnB,EAAQe,QAAU,K,MAChBhB,EAAO,IAAIiB,MAAM,oBAAgC,QAAb,EAAAhB,EAAQr3B,aAAK,eAAE2C,cAI5C21B,EAAiB,CAACd,EAAiBe,EAAmB1Y,IAC7C2X,EAAGgB,YAAY,CAACD,GAAY1Y,GAC7B4Y,YAAYF,GAepBG,EAAU,CACrBlB,EACAe,EACAtlB,IAEA,IAAIqb,QAAQ,CAAC6I,EAASC,KACpB,MACMC,EADQiB,EAAed,EAAIe,EAAW,aACtBI,IAAI1lB,GAC1BokB,EAAQc,UAAY,IAAMhB,EAAQE,EAAQxnB,QAC1CwnB,EAAQe,QAAU,IAAMhB,EAAOC,EAAQr3B,SAe9B44B,EAAW,CAAapB,EAAiBe,IACpD,IAAIjK,QAAQ,CAAC6I,EAASC,KACpB,MACMC,EADQiB,EAAed,EAAIe,EAAW,YACtBM,SACtBxB,EAAQc,UAAY,IAAMhB,EAAQE,EAAQxnB,QAC1CwnB,EAAQe,QAAU,IAAMhB,EAAOC,EAAQr3B,SAG9B84B,EAAkB,CAC7BtB,EACAe,EACAQ,EACAl5B,IAEA,IAAIyuB,QAAQ,CAAC6I,EAASC,KAEpB,MAEM4B,EAFcxB,EAAGgB,YAAYD,EAAW,YACdE,YAAYF,GACbQ,MAAMA,GAC/BE,EAAWC,YAAYC,KAAKt5B,GAC5Bu5B,EAAgBJ,EAAWK,WAAWJ,GAEtCK,EAAkB,GACxBF,EAAcjB,UAAY,KACxB,MAAMoB,EAASH,EAAcvpB,OACzB0pB,GACFD,EAAQp5B,KAAKq5B,EAAO15B,OACpB05B,EAAOC,YAEPrC,EAAQmC,IAGZF,EAAchB,QAAU,KACtBhB,EAAOgC,EAAcp5B,UAady5B,EAAoB,CAACjC,KAAoBkC,IACpDpL,QAAQzmB,IAAI6xB,EAAM3+B,IAAKL,GAVO,EAAC88B,EAAiB98B,IAChD,IAAI4zB,QAAQ,CAAC6I,EAASC,KACpB,MACMC,EADciB,EAAed,EAAI98B,EAAM,aACjBi/B,QAE5BtC,EAAQc,UAAY,IAAMhB,IAC1BE,EAAQe,QAAU,IAAMhB,EAAOC,EAAQr3B,SAIT45B,CAAiBpC,EAAI98B,M,kCC5JvD,uDAGO,MAAMm/B,EAA0B5+B,IACrC,MAAM6+B,EAAe,cACrB,OAAO,UAAc,IAAMA,EAAapa,IAAIzkB,GAAM,CAAC6+B,EAAc7+B,M,kCCLnE,sEAQO,MAAM8+B,EAA0B,KACrC,MAAMC,EAAgC,YAAmC,KACnEC,EAAuC,YAC3C,MAEF,OAAO,UACL,IACE,YAAwBD,EAA+BC,GACzD,CAACD,EAA+BC,M,kCChBpC,uDAGO,MAAMC,EAAuBj/B,IAClC,MAAMk/B,EAAY,cAClB,OAAO,kBAAQ,IAAMA,EAAUza,IAAIzkB,GAAM,CAACk/B,EAAWl/B,M,kCCLvD,wOAiBO,MAAMm/B,EAAwB,YACnC,EAAG9/B,YAAWkb,aAAY/M,QAAOrO,MAAKsc,UAASpB,SAAQlV,WACrD,MAAQW,YAAa+T,EAAK,YAAE9L,EAAW,MAAEnJ,EAAK,SAAEmnB,GAAa,YAC3D5mB,EACAoV,EACAF,EACAlb,GAEIigC,EAAkB,CACtB//B,YACA0O,cACAwM,aACAwR,WACAlS,QACArM,QACArO,MACAsc,UACA7W,SAEF,OAAQO,GACN,KAAK,IAAevF,KAClB,OAAO,gBAAC,IAAyB,iBAAKw/B,IACxC,KAAK,IAAez/B,OAClB,OAAO,gBAAC,IAA2B,iBAAKy/B,IAC1C,QACE,OAAO,QAKTC,EAA6E,EACjFhgC,YACAsD,QACA28B,YACA9xB,QACArO,MACAsc,UACApB,SACAlV,WAEA,MAAM,EAAE/F,GAAM,4BACR,eAAEmtB,EAAc,kBAAEE,EAAiB,WAAElS,EAAU,OAAE+R,GAAW3pB,EAC5D48B,EAAmB,aAAgBllB,EAAQ,GAAGlV,KAAQonB,KACtDxe,GAAcwM,aAAU,EAAVA,EAAYxM,eAAewxB,aAAgB,EAAhBA,EAAkBxxB,aAC3D8L,GACJU,aAAU,EAAVA,EAAYzU,eACZy5B,aAAgB,EAAhBA,EAAkBt/B,QAClB,IAAY,IAAOssB,EAAe9kB,MAAM,OACpC+3B,EAA0BlT,UAAU,CAACG,GACrC7nB,EAAQ,IAAMzF,EAAK,CAACgG,KAAS,IAASonB,IAAkB,IAC9D,OACE,uBAAKltB,UAAWA,GACd,gBAAC,IAAW,CAAC0O,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAM,GAAGQ,KAAQm6B,KAC9E,uBAAKjgC,UAAU,wBACZuF,aAAK,EAALA,EAAOL,QACN,IAAQK,EAAML,OAAS0T,GACrB,uBAAK5Y,UAAU,8BACb,0BACG,IAAMmgC,EAA0BC,IAC/B,MAAM96B,EAAO86B,EAAoB96B,KAAK+U,QAAQ,MAAOgmB,OAAOznB,IAC5D,OACE,gBAACknB,EAAqB,CACpB5kB,WAAU,+BAAOklB,GAAmB,CAAE96B,SACtC3E,IAAK,GAAGmF,KAAQR,IAChB6I,MAAOA,EACPrO,IAAKA,EACLsc,QAASA,EACTpB,OAAQ,aAAgBA,EAAQ1V,GAChCQ,KAAMA,SAQlB,wBAAM9F,UAAU,cAAcD,EAAE,oBAQtCugC,EAAwE,EAC5Eh9B,QACA28B,YACA9xB,QACArO,MACAsc,UACApB,SACAlV,WAEA,MAAM,WAAEoV,EAAU,OAAE+R,GAAW3pB,EACzBi9B,EAAc,aAAgBvlB,EAAQ,GAAGlV,KAAQm6B,KACjDvxB,GAAcwM,aAAU,EAAVA,EAAYxM,eAAe6xB,aAAW,EAAXA,EAAa7xB,aACtD8L,GAAQU,aAAU,EAAVA,EAAYzU,eAAe85B,aAAW,EAAXA,EAAa3/B,QAAS,IAAYq/B,GACrEO,EAAc,IAASvT,EAAQ,gBAC/BwT,EAAa,IAASxT,EAAQ,gBAC9BjtB,EAAY,IAAUwgC,IAAgB,IAAUC,GAAc,WAAa,YACjF,OACE,uBAAKzgC,UAAWA,GACd,gBAAC,IAAW,CAAC0O,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAM,GAAGQ,KAAQm6B,KAC9E,sBAAIjgC,UAAU,sDACV,IAAUygC,IACV,2BACG,IAAMA,EAAY,EAAGvlB,WAAYklB,KAChC,gBAACN,EAAqB,CACpB5kB,WAAYklB,EACZz/B,IAAK,GAAGmF,KAAQs6B,EAAoB96B,OACpC6I,MAAOA,EACPrO,IAAKA,EACLsc,QAASA,EACTpB,OAAQA,EACRlV,KAAMA,OAKZ,IAAU06B,IACV,2BACG,IAAMA,EAAcE,GACnB,gBAACV,EAA+B,CAC9B18B,MAAOo9B,EACPT,UAAWS,EAAWxT,eACtBvsB,IAAK,GAAGmF,KAAQm6B,KAAaS,EAAWxT,iBACxC/e,MAAOA,EACPrO,IAAKA,EACLsc,QAASA,EACTpB,OAAQA,EACRlV,KAAMA,UAWX66B,EAAsE,EACjFzkB,cACA/N,QACArO,MACAsc,UACApB,SACAlV,OACAqW,oBAEA,MAAMykB,EAAqB,UAAc,IAAM,YAAuB1kB,GAAc,CAClFA,IAEF,OACE,sBAAIlc,UAAW,oCAAoC8F,GAChD,IAAM86B,EAAoB,CAACt9B,EAAO28B,KACjC,MAAMY,EAAa,CACjBv9B,QACA28B,aAGIa,EAAc,CAClB3yB,QACArO,MACAsc,UACApB,SACAlV,SAGI,aAAEqnB,EAAY,WAAEjS,EAAU,OAAE+R,GAAW3pB,EAC7C,OAAI6pB,EAEA,gBAAC6S,EAA+B,iBAC1Ba,EACAC,EAAW,CACf9gC,UAAWmc,KAKZ,IAAU8Q,GAWb,gBAAC6S,EAAqB,eACpBn/B,IAAK,GAAGmF,KAAQm6B,IAChBjgC,UAAWmc,EACXjB,WAAYA,GACR4lB,IAbJ,gBAACR,EAA0B,eACzB3/B,IAAK,GAAGmF,KAAQm6B,KACZY,EACAC,QA0ClBhB,EAAsBr5B,YAAc,wBACpC65B,EAA2B75B,YAAc,6BACzCk6B,EAA0Bl6B,YAAc,6B,skBChOxC,MAAMs6B,EAAkD,EACtDryB,cACAwM,aACAV,QACArM,QACArO,MACA4sB,WACAnnB,WAEA,gBAAC,IAAW,CACVmJ,YAAaA,EACb8L,MAAOA,EACP1a,IAAKA,EACLwF,KAAMonB,EACNsU,OAAQ,IACN,YAAmB,CACjBlmB,QAAS3M,EACT/M,SAAUtB,EACVmhC,eAAgB/lB,EAChBgmB,UAAW37B,KAId,IAAQA,GAAS,IAASA,EAAH,SAItB47B,EAA2E,EAC/EzyB,cACA8L,QACA1a,MACA4sB,WACAnnB,WAEA,gBAAC,IAAW,CAACmJ,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACnE,gBAAC,IAAY,CAAC0U,UAAW77B,KAIvB87B,EAAiE,EACrE3yB,cACA8L,QACArM,QACArO,MACA4sB,WACAnnB,WAEA,gBAAC,IAAW,CAACmJ,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GAClE,IAAWnnB,GACV,gBAAC,IAAS,CAACtF,KAAMkO,EAAMlO,KAAMqX,OAAQ/R,IAErC,4BAAOA,GAAS,MAKhB+7B,EAA6E,EACjF5yB,cACA8L,QACA1a,MACA4sB,WACAnnB,Y,MAEA,MAAM,EAAExF,GAAM,2BACd,OACE,gBAAC,IAAW,CAAC2O,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,IACjD,QAAjB,EAAAnnB,aAAK,EAALA,EAAOg8B,kBAAU,eAAG,IACnB,gBAAC,KAAY,CAACthC,KAAK,YAAYG,KAAMmF,EAAMg8B,WAAW,GAAI3gC,MAAO2E,EAAMg8B,WAAW,KAElF,wBAAMvhC,UAAU,cAAcD,EAAE,kBAMlC22B,EAAsD,EAC1DhoB,cACAwM,aACAV,QACA1a,MACA4sB,eAEA,MAAM,EAAE3sB,GAAM,2BACd,OACE,gBAAC,IAAW,CAAC2O,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACnE,sBAAI1sB,UAAU,6CACZ,0BAAKD,EAAE,wBACP,0BACE,gBAAC,IAA6B,CAAC+F,KAAK,SAAShG,IAAKA,EAAKwF,KAAM4V,EAAW5V,QAE1E,0BAAKvF,EAAE,0BACP,0BACE,gBAAC,IAA6B,CAAC+F,KAAK,WAAWhG,IAAKA,EAAKwF,KAAM4V,EAAW5V,WAO9Ek8B,EAA6D,EACjE9T,aACAhf,cACA8L,QACA1a,MACA4sB,WACAnnB,YAEA,MAAO,CAAEtF,GAAQytB,EAAWtlB,MAAM,IAAeqY,UACjD,OACE,gBAAC,IAAW,CAAC/R,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACnE,gBAAC,KAAQ,CAACjM,SAAUlb,EAAOtF,KAAMA,aAAI,EAAJA,EAAMoa,QAAQ,KAAM,SAKrDonB,EAAwD,EAC5DtzB,QACArO,MACA4O,cACAwM,aACAV,QACA4B,UACAsQ,WACAnnB,YAEA,MAAM,EAAExF,GAAM,4BACPyd,EAASkkB,GAAc,WAAe7J,QAAQtyB,KAC9Co8B,EAAWC,GAAgB,YAAe,IAC1CxmB,EAAcC,GAAmB,WAAe,MAEjDwmB,EAAWxlB,IACfulB,GAAa,GACbF,EAAW7J,QAAQtyB,IACnB8V,EAAgBgB,EAAIhU,SACpB+T,EAAQC,IAmBV,OACE,gBAAC,IAAW,CAAC3N,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACnE,uBAAK1sB,UAAU,8BACb,gBAAC,IAAM,CACL4Z,GAAIsB,EAAW5V,KACfmiB,UAAWjK,EACXJ,SAAU,CAAC6E,EAAQC,KACjBwf,EAAWxf,GACX0f,GAAa,GACbvmB,EAAgB,OAElBb,MAAOza,EAAE,eACT+hC,SAAU/hC,EAAE,kB,KAGbyd,IAAYqa,QAAQtyB,IAAUo8B,GAAa,gBAAC,IAAa,MACzDnkB,IAAYqa,QAAQtyB,KAAWo8B,GAC9B,gC,KAEE,gBAAC,IAAM,CAAC3hC,UAAU,wBAAwB8F,KAAK,SAAShD,QAAQ,OAAOsC,QAnClE,KAIb,GAHAw8B,GAAa,GACbvmB,EAAgB,MAEZ,IAAMvb,EAAK,QAAQob,EAAW5V,MAAS,CACzC,MAAMy8B,EAAY7f,GAAiB,CACjC,CAAE7c,GAAI,MAAOC,KAAM,SAAS,YAA2B4V,GAAe3V,MAAO2c,IAE/E,OAAO,aAAS/T,EAAOrO,EAAKiiC,EAASvkB,IAAU/X,MAAO4W,GAAQwlB,EAAQxlB,IAGxE,MAAMib,EAAS,IAAYx3B,GAE3B,OADA,IAAMw3B,EAAQ,QAAQpc,EAAW5V,KAAQkY,GAClC,aAAUrP,EAAOmpB,GAAQ7xB,MAAO4W,GAAQwlB,EAAQxlB,MAuB7C,gBAAC,KAA6B,CAACrc,UAAU,+CACxCD,EAAE,yBAKVqb,GACC,uBAAKpb,UAAU,iCACZob,GAAgBrb,EAAE,4BAOvBiiC,EAA8D,EAClEtzB,cACAwM,aACAV,QACArM,QACArO,MACA4sB,WACAnnB,YAEA,MAAM,EAAExF,GAAM,4BACPyd,EAASkkB,GAAc,WAAe7J,QAAQtyB,KAC9Co8B,EAAWC,GAAgB,YAAe,GAUjD,OACE,gBAAC,IAAW,CAAClzB,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACnE,uBAAK1sB,UAAU,8BACb,gBAAC,IAAQ,CACP4Z,GAAIsB,EAAW5V,KACfsL,MAAO,CAAEqxB,WAAY,QACrBxa,UAAWjK,EAAO,qBACEA,EACpBhD,MAAOA,EACP4C,SAAU,CAAC6E,EAAQC,KACjBwf,EAAWxf,GACX0f,GAAa,M,KAIhBpkB,IAAYqa,QAAQtyB,IAAUo8B,GAAa,gBAAC,IAAa,MACzDnkB,IAAYqa,QAAQtyB,KAAWo8B,GAC9B,gC,KAEE,gBAAC,IAAM,CAAC3hC,UAAU,wBAAwB8F,KAAK,SAAShD,QAAQ,OAAOsC,QAxBlE,KAEb,OADAw8B,GAAa,GACN,aAASzzB,EAAOrO,GALPoiB,EAKqB1E,EALJ,CACjC,CAAEnY,GAAI,MAAOC,KAAM,SAAS,YAA2B4V,GAAe3V,MAAO2c,MAD9D,IAACA,IA4BN,gBAAC,KAA6B,CAACliB,UAAU,+CACxCD,EAAE,2BAUXmiC,EAAgD,EACpDxzB,cACAwM,aACAV,QACArM,QACArO,MACA4sB,WACAnnB,Y,MAEA,MAAM,EAAExF,GAAM,2BACd,OACE,gBAAC,IAAW,CACV2O,YAAaA,EACb8L,MAAOA,EACP1a,IAAKA,EACLkhC,OAAQ,IACN,YAA6B,CAC3BlmB,QAAS3M,EACT/M,SAAUtB,EACVmhC,eAAgB/lB,EAChBgmB,UAAW37B,IAGfD,KAAMonB,GAEM,QAAX,EAAAnnB,aAAK,EAALA,EAAOO,YAAI,QAAI/F,EAAE,iBAKXoiC,EAA4D,I,OAAA,UACvEniC,GAAS,EACNuB,EAAK,IAF+D,eAIvE,MAAOmsB,GACsE,QAA3E,cAA6CnsB,EAAM2Z,WAAY3Z,EAAMgE,cAAM,QAAI,GAE3E68B,EAAY,UAAc,KAC9B,GAAI1U,aAAU,EAAVA,EAAYG,WAAW,IAAewB,mBACxC,OAAO,IAGT,GAAI3B,aAAU,EAAVA,EAAYG,WAAW,IAAepN,UACxC,OAAO+gB,EAGT,OAAQ9T,GACN,KAAK,IAAeyD,SAClB,OAAO4P,EACT,KAAK,IAAejQ,aAClB,OAAOqQ,EACT,KAAK,IAAe3mB,MAClB,OAAO6mB,EACT,KAAK,IAAejR,kBAClB,OAAOkR,EACT,KAAK,IAAe1Q,qBAClB,OAAO8F,EACT,KAAK,IAAerF,cAClB,OAAOoQ,EACT,KAAK,IAAelQ,SAClB,OAAO,IACT,KAAK,IAAef,eAClB,OAAO0R,EACT,KAAK,IAAe5Q,SAClB,OAAO0Q,EACT,KAAK,IAAejuB,OAClB,OAAO,KACT,QACE,OAAI,IAAWxS,EAAMgE,QAEnBqD,QAAQmlB,KACN,gDAAgDxsB,EAAM2Z,WAAW5V,6EACjE,gLAEK,MAEF,MAEV,CAAC/D,EAAM2Z,WAAY3Z,EAAMgE,MAAOmoB,IACnC,OAAO0U,EACL,uBAAKpiC,UAAWA,GACd,gBAACoiC,EAAS,iBAAK7gC,EAAK,CAAEmsB,WAAYA,MAElC,MAINqT,EAASt6B,YAAc,WACvB06B,EAAU16B,YAAc,YACxB46B,EAAM56B,YAAc,QACpB66B,EAAkB76B,YAAc,oBAChCiwB,EAAqBjwB,YAAc,uBACnC+6B,EAAc/6B,YAAc,gBAC5Bg7B,EAAch7B,YAAc,gBAC5Bu7B,EAAoBv7B,YAAc,sBAClCy7B,EAAez7B,YAAc,iBAC7B07B,EAA0B17B,YAAc,6B,kCCtWxC,yDAKO,MAAM47B,EAAqB,EAChCvnB,UACA1Z,WACA6/B,iBACAC,eAEO,YAAoB,CACzBoB,aAAcxnB,EACd1Z,WACAmhC,aAAcrB,GAAa,EAE3BsB,SAAU,sBACVC,eAAgB,CAAE9pB,KAAMsoB,EAAex6B,aACvC4B,QAAS44B,EAAevyB,YACxBpJ,KAAM,SAAS,YAA2B27B,GAE1CyB,cAAe,sBACfC,oBAAqB,CAAEhqB,KAAMsoB,EAAex6B,gB,kCCtBhD,mEAMO,MAAM2Y,EAA+B,EAC1CtE,UACA1Z,WACA6/B,iBACAC,eAEO,YAAoB,CACzBoB,aAAcxnB,EACd1Z,WACAmhC,aAAcrB,EACdtgC,MAAO,IAAKb,EAAE,oBAAqB,CAAE4Y,KAAMsoB,EAAex6B,cAC1DnB,KAAM,SAAS,YAA2B27B,M,kCCjB9C,gGAgBO,MAAM2B,EAA0D,EACrEzjB,SACAH,QACA1Z,OACAi9B,eACAnhC,WACAkhC,eACA1hC,YAEA,MAAM,EAAEb,GAAM,2BACR8iC,EAAUv9B,EAAK81B,UAAU,GAAG/gB,QAAQ,IAAK,MACxC0E,EAAeE,EAAY7D,GAAgB,eAC3CqC,EAAca,GAAmB,WACtC,IAAMld,EAAayhC,EAAH,UAAsBN,IAEjCvkB,EAAgBQ,GAAqB,WAC1C,IAAMpd,EAAayhC,EAAH,gCAA2C,SAEtD1kB,EAAUM,GAAe,WAC9B,IAAMrd,EAAayhC,EAAH,0BAAqC,QAGjDtL,EAAS,cACZ5Y,IACCA,EAAMC,iBAEN,MAAMC,EAAe,CAAEvZ,KAASA,EAAH,iBAAyBD,GAAI,UACrC,kBAAjBoY,IACFoB,EAAMtZ,MAAQ,CACZyY,eAAgB,6BAAmBA,GAAkB,OACrDG,SAAU,6BAAmBA,GAAY,QAE3CU,EAAMxZ,GAAK,OAEb0Z,EACE,aAASujB,EAAclhC,EAAU,CAC/Byd,EACA,CAAEvZ,KAASA,EAAH,QAAgBC,MAAOkY,EAAcpY,GAAI,cAGlDG,KAAKwZ,GACLvZ,MAAM,SAEX,CAACuZ,EAAOD,EAAeZ,EAAUH,EAAgB1Y,EAAMlE,EAAUkhC,EAAc7kB,IAGjF,OACE,wBAAMiB,SAAU6Y,EAAQn3B,KAAK,OAAOJ,UAAU,iBAC5C,gBAAC,IAAU,KAAEY,GACb,gBAAC,IAAS,KACR,gBAAC,0BAAuB,CACtB6c,aAAcA,EACdO,eAAgBA,EAChBG,SAAUA,EACVb,qBAAsBgB,EACtBL,uBAAwBO,EACxBJ,iBAAkBK,KAGtB,gBAAC,IAAiB,CAChBrD,aAAcA,EACd6D,WAAYA,EACZC,WAAYnf,EAAE,eACdof,OAAQA,MAMH2jB,EAAsB,YAAoBF,GAEvDA,EAAoBn8B,YAAc,uB,kCCvFlC,2DAIO,MAAMs8B,EAA0C,EAAGC,eACxD,MAAM53B,EAAS,CAAC,SAAU,cAAe,cAAc1G,OACrD,CAACu+B,EAASC,KACRF,aAAQ,EAARA,EAAWE,IACT,4BACE,wBAAMljC,UAAU,cAAckjC,E,KAC7BF,EAASE,IAEV,EAGN,wBAAMljC,UAAU,cAAY,OAG9B,OACE,uBAAKA,UAAU,aACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,YACb,yBACE,gBAAC,KAAY,CAACC,KAAK,YAClB+iC,EAASG,MAAQ,OAGtB,uBAAKnjC,UAAU,YACb,yBAAIgjC,EAAS3O,UAAY,OAE3B,uBAAKr0B,UAAU,YAAYoL,MAMtBg4B,EAA6C7hC,IACxD,MAAM,EAAExB,GAAM,2BACd,OACE,uBAAKC,UAAU,eACb,uBAAKA,UAAU,oBACb,uBAAKA,UAAU,YAAYD,EAAE,aAC7B,uBAAKC,UAAU,YAAYD,EAAE,iBAC7B,uBAAKC,UAAU,cAEjB,uBAAKA,UAAU,QACZuB,EAAM6/B,UACL7/B,EAAM6/B,UAAU3gC,IAAK4c,GAAM,gBAAC0lB,EAAW,CAACC,SAAU3lB,EAAG1c,IAAK0c,EAAE8lB,QAE5D,wBAAMnjC,UAAU,cAAcD,EAAE,yB,uhBCtC1C,MAAM8a,EAAgF,EACpFnM,cACAwM,aACAwR,WACAlS,QACA1a,MACAyF,YAEA,MAAM,EAAExF,GAAM,2BACRqL,EAAS,UAAc,KACtB,IAAW7F,IAAU,IAAOA,EAAQqW,IAAO,IAAUA,IACjD,gBAAC,IAAO,CAACtW,KAAM4V,EAAW5V,OAE/B,IAAQC,EAAQqW,GAAM,IAAUA,IAAmB,IAAbA,EAAE1W,QACnC,wBAAMlF,UAAU,cAAcD,EAAE,mBAElC,gBAAC,IAAc,CAACsjC,SAAU99B,EAAOmY,SAAUxC,EAAW5V,OAC5D,CAAC4V,EAAW5V,KAAMvF,EAAGwF,IACxB,OACE,uBAAKvF,UAAU,qCACb,gBAAC,IAAW,CAAC0O,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GAClEthB,KAMHk4B,EAAgD,EACpD50B,cACAge,WACAlS,QACA1a,MACAyF,YAEA,MAAM,EAAExF,GAAM,2BACd,OACE,gBAAC,IAAW,CAAC2O,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACjE,IAAQnnB,GAGR,wBAAMvF,UAAU,cAAcD,EAAE,gBAFhC,qBAAGqG,KAAMb,GAAQA,EAAM8U,QAAQ,cAAe,OAQhDkpB,EAAoD,EACxD70B,cACAge,WACAlS,QACA1a,MACAyF,WAEA,gBAAC,IAAW,CAACmJ,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACnE,gBAAC,IAAK,CAACpsB,OAAQiF,KAIbi+B,EAA0D,EAC9D90B,cACAge,WACAlS,QACA1a,MACAyF,YAEA,MAAM,EAAExF,GAAM,2BACd,OACE,gBAAC,IAAW,CAAC2O,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GAClE,IAAUnnB,GACT,wBAAMvF,UAAU,cAAcD,EAAE,gBAEhC,uBAAKC,UAAU,SAAS4Q,MAAO,CAAE6yB,MAAO,gBACrCl+B,KAOLm+B,EAAsD,EAC1Dh1B,cACAge,WACAlS,QACA1a,MACAyF,WAEA,gBAAC,IAAW,CAACmJ,YAAaA,EAAa8L,MAAOA,EAAO1a,IAAKA,EAAKwF,KAAMonB,GACxD,YAAVnnB,EAAsB,gBAAC,KAAa,CAAC3E,MAAO2E,IAAY,gBAAC,KAAM,CAACjF,OAAQiF,KAIhEo+B,EAAgE,I,OAAA,UAC3E3jC,GAAS,EACNuB,EAAK,IAFmE,eAI3E,MAAOmsB,GACwE,QAA7E,cAA+CnsB,EAAM2Z,WAAY3Z,EAAMgE,cAAM,QAAI,GAE7E68B,EAAY,UAAc,KAC9B,GAAI1U,aAAU,EAAVA,EAAYG,WAAW,IAAiBwB,mBAC1C,OAAO,IAGT,OAAQ3B,GACN,KAAK,IAAiB5R,YACpB,OAAOjB,EACT,KAAK,IAAiBuW,OACpB,OAAOkS,EACT,KAAK,IAAiBtS,SACpB,OAAOuS,EACT,KAAK,IAAiBtS,eACpB,OAAOuS,EACT,KAAK,IAAiBjS,SACpB,OAAO,IACT,KAAK,IAAiBxd,OACpB,OAAO,KACT,QACE,OAAI,IAAWxS,EAAMgE,QAEnBqD,QAAQmlB,KACN,iFAAiFxsB,EAAM2Z,WAAW5V,6EAClG,gLAEK,MAEF,YAAuB/D,EAAM2Z,YAAcwoB,EAAa,MAElE,CAAChW,EAAYnsB,EAAMgE,MAAOhE,EAAM2Z,aACnC,OAAOknB,EACL,uBAAKpiC,UAAWA,GACd,gBAACoiC,EAAS,iBAAK7gC,EAAK,CAAEmsB,WAAYA,MAElC,MAKN,IAAMjnB,YAAc,QACpBoU,EAAYpU,YAAc,cAC1B68B,EAAK78B,YAAc,OACnB88B,EAAS98B,YAAc,WACvB+8B,EAAe/8B,YAAc,iBAC7Bi9B,EAAWj9B,YAAc,aACzBk9B,EAA4Bl9B,YAAc,+B,kCC1J1C,uDAGO,MAAMm9B,EAA+B,EAAGtjC,YAC7C,wBAAMN,UAAsB,WAAXM,EAAsB,WAAa,IACtC,WAAXA,GAAuB,gBAAC,IAAO,gBAAc,a,IAAgBA,GAQlEsjC,EAAMn9B,YAAc,S,kCCbpB,4GAWA,MAAMo9B,EAAa,CAAC,uBAAQt+B,MAAO,uBAAQA,MAAO,uBAAQA,OAE7Cu+B,EAAgD,EAAGT,WAAU3lB,eACxE,MAAO3c,EAAK0iC,GAAS,eACfn4B,EAAO,IAAM+3B,EAAU,CAACU,EAASzjC,KACrC,MAAM0jC,EAAI1jC,EACJ2jC,EAAIF,EAAQ7+B,OAClB,MAAO,CACLsV,MAAO,GAAGypB,KAAKD,IACfA,IACAC,OAGErO,EAAQtqB,EAAK5G,OAAO,CAACw/B,EAAKC,IAAcD,EAAMC,EAAUF,EAAG,IAC3D,qBAAEG,EAAoB,qBAAEC,GAAyB,aAAgB,KAEvE,OACE,uBAAKtjC,IAAKA,EAAKf,UAAU,wBACvB,gBAAC,IAAU,CACT6jC,WAAYA,EACZS,wBAAsB,EACtBh5B,KAAMA,EACNi5B,OAAQd,EACR7iC,MAAOg1B,EAAMjwB,WACb89B,MAAOA,EACPe,YAAaJ,EACbK,OAAQJ,IAGV,uBAAKrkC,UAAU,uBAAsB,eAAc,wBAChD0d,KAWTomB,EAAer9B,YAAc,kB,kCCpD7B,yFAUA,MAYai+B,EAA4D,EACvExpB,aACApb,MACAkb,aAEA,MAAM,YAAEvU,EAAW,MAAElB,GAAU,YAC7B,IAAejF,OACf4a,EACAF,EACAlb,GAGF,MAxBmC,EAACob,EAA8B3V,MAC7D,IAAUA,KAEbqD,QAAQmlB,KACN,6FAA6F7S,EAAW5V,+BACxG4V,IAEK,GAiBJypB,CAA6BzpB,EAAY3V,GAK5C,uBAAKvF,UAAU,mBACb,gBAAC,KAAc,CAAC0D,KAAM+C,IACtB,gBAAC,IAAU,CAACtC,WAAYoB,KANnB,MAUXm/B,EAAqBj+B,YAAc,wB,kCC7CnC,uEAKO,MAAMm+B,EAAkD,KAC7D,MAAM,EAAE7kC,GAAM,4BAEZkY,EACA4sB,GACE,cACJ,OACE,gBAAC,IAAU,CACTrqB,MAAOza,EAAE,yBACTqoB,aAAcnQ,EAA8B,OAAS,QACrD3H,QAAM,EACNyI,MAAO,CACL,CACExT,MAAO,OACP3E,MAAOb,EAAE,uBAEX,CACEwF,MAAO,QACP3E,MAAOb,EAAE,gCAGbqd,SAAU,EAAGiL,mBACXwc,EAAuD,SAAxBxc,EAAc9iB,W,kCC3BrD,+EASO,MAAMu/B,EAAgE,EAC3E7xB,gBACAvK,aACAsc,iBACAsD,uBAEA,MAAM,EAAEvoB,GAAM,2BACRiJ,EAAkBN,EAAWxD,OAEnC,OACE,uBAAKlF,UAAU,cACb,gCACE,yBAAOA,UAAU,eAAeD,EAAE,qBAAsB,CAAEyI,MAAOQ,KACjE,gBAAC,IAAc,KACZjJ,EACC,yQAGH2I,EAAWjI,IAAK6I,GACf,4BAAU3I,IAAK2I,GACb,2BACGN,EAAkB,GACjB,0BAAQhJ,UAAU,0CAA0CsJ,GAE9D,gBAAC,IAAwB,CACvBlJ,KAAMkJ,EACNif,QAASvD,EAAenf,SAASyD,GACjC8T,SAAWmL,GAAqBD,EAAiBhf,EAAQif,QAKjE,gBAAC,I,CAECwc,mBAAmB,EACnBxc,SAASvD,aAAc,EAAdA,EAAgB9f,QAAS,EAClCyD,QAAS,YAAuBsK,S,oaCF1C,MAEM+xB,EAAqE,QAAxC,EAAA54B,OAAOC,aAAa44B,4BAAoB,QAAI,GACzEC,EAAmCF,EAA2BvkC,IACjE0kC,GAAO,2BAAiBA,GAErBC,EAA+D,QAArC,EAAAh5B,OAAOC,aAAag5B,yBAAiB,QAAI,GACnEC,EAAgCF,EAAwB3kC,IAC3D8kC,GAAS,6BAAmBA,GA4CzBC,EAAQ,EAAG9hC,UACf,wBAAM/C,IAAK+C,EAAM1D,UAAU,2BACzB,gBAAC,IAAQ,CAACA,UAAU,iCAAiCyO,QAAS/K,KAO5D+hC,EAA0B,CAC9B,SACA,WACA,eACA,kBACA,gBACA,4BAGIC,EAAuB,CAAC,SAAU,QAAS,QAAS,OAAQ,QAAS,QAS9DC,EAAuB5sB,IAClC,MAAM6sB,EAA0C,GAChD,IAAO7sB,EAAQJ,IACb,IAAOA,EAAKwR,WAAa0b,KAClBD,EAAcC,IAAaA,IAC9BD,EAAcC,GAAY,CACxBjsB,GAAIisB,EACJrrB,MAAOqrB,EACP3C,MAAO,aACPhpB,OAAQ,CAAC2rB,SAMjB,MAAMC,EAAa,IAAOF,GAAelc,KAAK,CAACqc,EAAMC,IACnDD,EAAKE,cAAc1P,cAAcyP,EAAKC,gBAGxC,OAAO,IACLH,EACA,CAAC3b,EAAYxpB,KACXwpB,EAAWxpB,GAAOilC,EAAcjlC,GACzBwpB,GAET,KAiBE+b,EAAgBx8B,GACiB,YAAjCA,EAASnE,MAAM0gC,cACV,GAEFv8B,EAASnE,MAGZ4gC,EAAc11B,IAClB,OAAQA,EAAOlL,OACb,KAAK,IAAc6gC,gBACjB,OAAO,EACT,KAAK,IAAcC,mBACjB,OAAO,EACT,KAAK,IAAcC,mBACjB,OAAO,EACT,KAAK,IAAcC,kBACjB,OAAO,EACT,QACE,OAAO,IAIPC,GAAsB98B,IAC1B,OAAQA,EAASnE,OACf,KAAK,IAAekhC,UAClB,OAAO,EACT,KAAK,IAAezb,aAClB,OAAO,EACT,QACE,OAAO,IAIP0b,GAAuBh9B,IAC3B,OAAQA,EAASnE,OACf,KAAK,IAAgBohC,aACnB,OAAO,EACT,KAAK,IAAgBC,iBACnB,OAAO,EACT,KAAK,IAAgBC,cACnB,OAAO,EACT,KAAK,IAAgBC,aACnB,OAAO,EACT,QACE,OAAO,IAIPC,GAAqBlc,IACzB,OAAQA,EAAetlB,OACrB,KAAK,IAAsByhC,aACzB,OAAO,EACT,KAAK,IAAsBC,WACzB,OAAO,EACT,KAAK,IAAsBC,SACzB,OAAO,EACT,KAAK,IAAsBC,UACzB,OAAO,EACT,KAAK,IAAsBC,YACzB,OAAO,EACT,QACE,OAAO,IAIPC,GAAyB7c,IAC7B,OAAQA,EAAkBjlB,OACxB,KAAK,IAAuB+hC,0BAC1B,OAAO,EACT,KAAK,IAAuBC,2BAC1B,OAAO,EACT,KAAK,IAAuBC,sBAC1B,OAAO,EACT,KAAK,IAAuBC,6BAC1B,OAAO,EACT,QACE,OAAO,IAkCPC,GAA4B,CAACC,EAAgB5uB,EAA0B6uB,KAC3E,MAAM/tB,EAAU,IAAY8tB,GA4D5B,OA1DA,IAAOC,EAAe1E,IACpB,MAAMhpB,EAAS,GACf,IAAOnB,EAAQJ,IACb,IACIkvB,EADAtiC,EAAQoT,EAAKuqB,GAEH,aAAVA,IACF39B,EApIwB,CAACA,IAC/B,IAAKA,EACH,OAAOA,EAGT,MAAMuiC,EAAe,IAAOpC,EAAuBqC,GAASxiC,EAAMyiC,SAASD,IAC3E,OAAID,EACKviC,EAAM61B,UAAU,EAAG71B,EAAM0X,QAAQ6qB,IAGnCviC,GA0HO0iC,CAAiB1iC,GACzBsiC,EAAW,IAAMnC,EAAuBqC,GAAS,GAAGxiC,IAAQwiC,WAEhD76B,IAAV3H,GAAwBkR,MAAMC,QAAQnR,IACnC,IAAO2U,EAAQ,CAAE3U,WACpB2U,EAAOtU,KAAK,CACV4U,MAAOjV,EACPsiC,WACAtiC,QACA2iC,QAAQ,IAKVzxB,MAAMC,QAAQnR,IAChB,IAAOA,EAAQqW,IACR,IAAO1B,EAAQ,CAAE0B,OACpB1B,EAAOtU,KAAK,CACV4U,MAAOoB,EACPisB,WACAtiC,MAAOqW,EACPssB,QAAQ,QAOlB,IAnEqB,EAAChuB,EAAQgpB,KAChC,IAAIiF,EAAc,CAAC,SAMnB,MAJc,aAAVjF,IACFiF,EAASjC,GAGG,WAAVhD,EACK,IAAShpB,EAAQ,CAACisB,EAAY,WAGzB,iBAAVjD,IACFiF,EAAS3B,IAGG,oBAAVtD,IACFiF,EAASzB,IAGG,kBAAVxD,IACFiF,EAASpB,IAGG,6BAAV7D,IACFiF,EAASd,IAGJ,IAASntB,EAAQiuB,KAwCZC,CAAiBluB,EAAQgpB,GAASmF,GAC1C,IAAMxuB,EAAS,CAACqpB,EAAOmF,EAAU9iC,OAAQ8iC,MAKxCxuB,EAAQkR,cAcX,IAAMlR,EAAS,+BAAgC,IAAK9Z,EAAE,kBACtD,IAAM8Z,EAAS,mCAAoC,IAAK9Z,EAAE,uBAd1D8Z,EAAQkR,aAAe,CACrB0b,UAAW,CACTjsB,MAAO,IAAKza,EAAE,iBACdwF,MAAO,YACP2iC,QAAQ,GAEV,gBAAiB,CACf1tB,MAAO,IAAKza,EAAE,qBACdwF,MAAO,gBACP2iC,QAAQ,IAQPruB,GAGIyuB,GAAiB,CAACC,EAAc5vB,K,QAC3C,IAAK4vB,EACH,OAAO,EAET,IAAK5vB,EACH,OAAO,EAET,MAAM2R,EAAqD,QAA1C,EAAa,QAAb,EAAA3R,EAAK2R,gBAAQ,eAAE7pB,IAAK+nC,GAAMA,EAAEvC,sBAAc,QAAI,GAE/D,OACEttB,EAAKvY,KAAK6lC,cAAcpgC,SAAS0iC,IACjC,IAAM5vB,EAAM,oBAAqB,IAAIstB,cAAcpgC,SAAS0iC,IAC3D5vB,EAAKjK,aAAeiK,EAAKjK,YAAYu3B,cAAcpgC,SAAS0iC,IAC5D5vB,EAAKsS,MAAQtS,EAAKsS,KAAKplB,SAAS0iC,IACjCje,EAASzkB,SAAS0iC,IAIhBE,GAAgB5mC,IACpB,MAAM6N,EAAM,IAAIC,IAAIvD,OAAOyF,SAASzL,MAC9BwJ,EAAe,IAAI/N,EAAO8D,aAAa+J,EAAIg5B,OAEjD,IAAQruB,QAAQ,GAAG3K,EAAI+C,WAAW7C,MAG9B+4B,GAAkD,EAAGhwB,OAAMvT,cAC/D,MAAM,EAAErF,GAAM,2BACd,IAAK4Y,EACH,OAAO,KAET,MAAM,IAAE3X,EAAG,KAAEZ,EAAI,OAAE8qB,EAAM,SAAExhB,EAAQ,YAAEgF,EAAW,UAAEoc,GAAcnS,EAC1DiwB,EAASl/B,EAAW3J,EAAE,+BAAgC,CAAE2J,aAAc,KACtEm/B,GAASlwB,aAAI,EAAJA,EAAMlI,QAAS,CAAC,gBAAC+0B,EAAK,CAAC9hC,KAAMiV,EAAKlI,UAAc,GACzD5G,EAAO,uBAAK7J,UAAU,mBAAmBihB,QAAQ,OAAO0N,IAAKzD,EAAQ0D,IAAI,KAe/E,OACE,gBAAC,IAAW,CACV5uB,UAAU,kBACVW,IAAKK,EACL4Y,GAAI5Y,EACJJ,MAAOR,EACPyoC,OAAQA,EACRh/B,KAAMA,EACN++B,OAtBwB,M,QAAM,OAChC,gCACGA,GACiB,QAAjB,EAAS,QAAT,EAAAjwB,aAAI,EAAJA,EAAM7Y,WAAG,eAAEQ,cAAM,eAAE4J,cAClB,2BACE,gBAAC,IAA8B,CAC7BlK,UAAU,gBACVkK,YAAayO,EAAK7Y,IAAIQ,OAAO4J,iBAe3B4+B,GACRp6B,YAAaA,EACbtJ,QAAUiY,IACJ,YAAgBA,KACpBA,EAAEuB,iBACFxZ,EAAQuT,KAEVvS,KAAM,YAAiB,eAAgBuS,EAAK3X,KAC5C+nC,OACEje,IAAcnS,EAAKqwB,aACjB,4BACE,gBAAC,IAAoB,M,IAAKjpC,EAAE,kBAE5B,KAAI,YAECiB,KAKJioC,GAA2D1nC,IACtE,MAAM,EAAExB,GAAM,4BACPmpC,EAAaC,GAAkB,WAAe,OAC9CC,EAAaC,GAAkB,YAAe,IAC9CC,EAAuBC,EAA0B73B,GAAU,aAEhE,IAAiB,KAAU,IACtB83B,EAAethB,GAAoB,WAAe,KAClDnE,EAAeC,GAAoB,WAAe,KAClDP,EAAegmB,GAAoB,WAAe,MACnDC,EAAiB,aAAiB,WAClCC,GAjXmB5wB,EAiXexX,EAAMwX,MAhX1C,IAAUqsB,IAA4B,IAAUJ,GAC3CjsB,EAEFA,EAAMjY,OAAQ6X,I,UAGnB,MAAMixB,EAAiB,IACM,QAA3B,EAAmB,QAAnB,EAAS,QAAT,EAAAjxB,aAAI,EAAJA,EAAM7Y,WAAG,eAAEK,gBAAQ,eAAEmX,cAAM,QAAI,GAC/B,CAAC/B,EAAQhQ,EAAeiV,KAClBA,EAAM3U,SAtBI,+BAsBiC,cAAVN,GACnCgQ,EAAOgwB,KAAK3/B,KAAK4U,GAEfA,EAAM3U,SA1BE,6BA0BiC,cAAVN,GACjCgQ,EAAO4vB,GAAGv/B,KAAK4U,GAEVjF,GAET,CACEgwB,KAAM,GACNJ,GAAI,KAYR,OARI,IAAUyE,EAAezE,KAC3ByE,EAAezE,GAAGv/B,KA1BI,iCA6BpB,IAAUgkC,EAAerE,OAC3BqE,EAAerE,KAAK3/B,KA/BI,mCAmCxB,IAAOgkC,EAAezE,GAAKA,GAAO,IAAWD,EAAkCC,KAC/E,IAAOyE,EAAerE,KAAOA,GAAS,IAAWD,EAA+BC,OAlC5D,IAACxsB,EAmXzB,YAAgB,K,UACd,MAAM8wB,EAAgB,IAAIz0B,gBAAgBhJ,OAAOyF,SAASwD,QAAQ+P,IAAI,gBAChE0kB,EAAc,IAAOH,EAAe,CACxC3oC,IAAK6oC,IAEPV,EAAeW,GACfT,GAAgB,IAAQS,IAEtBA,GACA,YACEA,EAAYnf,iBACZmf,EAAYjf,eACZif,EAAYrf,kBAEW,QAAzB,EAAAqf,EAAYlf,qBAAa,eAAEpmB,KAAMoU,GAAMA,IAAM,IAAsBuuB,aAEnEsC,EAAiB,OAGjBK,GACA,YACEA,EAAYnf,iBACZmf,EAAYjf,eACZif,EAAYrf,kBAEW,QAAzB,EAAAqf,EAAYlf,qBAAa,eAAEpmB,KAAMoU,GAAMA,IAAM,IAAsBuuB,aAEnEsC,EAAiB,SAGjBK,GACA,YACEA,EAAYnf,iBACZmf,EAAYjf,eACZif,EAAYrf,kBAEW,QAAzB,EAAAqf,EAAYlf,qBAAa,eAAEpmB,KAAMoU,GAAMA,IAAM,IAAsBmxB,gBAEnEN,EAAiB,QAElB,CAACE,IAEJ,MA0BMK,EAAerxB,IACnB,GAAK2wB,GAAyB3wB,EAAK1F,gBAAkB,IAAqBqzB,mBAInE,CACL,MAAMzkC,EAAS,IAAIuT,gBAAgBhJ,OAAOyF,SAASwD,QACnDxT,EAAOgO,IAAI,eAAgB8I,EAAK3X,KAChCynC,GAAa5mC,GACbsnC,EAAexwB,GACf0wB,GAAe,QARf,YAA8B,CAC5BY,uBAAyBC,GA7BD,CAACvxB,GAA0B,CAACwxB,GAAgB,KACxE,MAAMtoC,EAAS,IAAIuT,gBAAgBhJ,OAAOyF,SAASwD,QACnDxT,EAAOgO,IAAI,eAAgB8I,EAAK3X,KAChCynC,GAAa5mC,GACbsnC,EAAexwB,GACf0wB,GAAe,GAEX33B,GAAUy4B,GACZZ,GAAyB,IAqBaa,CAAsBzxB,EAAtByxB,CAA4BF,MAehEG,GACJnB,GACAA,EAAYppC,KACZ,8BAA8BopC,EAAYppC,IAAIK,SAASC,gBAAgB8oC,EAAYj2B,kCAAkCi2B,EAAYh2B,0CAA0C3R,EAAMrB,qBAAqBspC,aAAyBzlB,mBAA+BN,IAO1P6mB,GAAoB,UAAc,KACtC,GAAIpB,aAAW,EAAXA,EAAaqB,0BACf,IACE,MAAM76B,EAAM,IAAIC,IAAIu5B,aAAW,EAAXA,EAAaqB,2BAEjC,OADA76B,EAAIE,aAAaC,IAAI,aAAc,qBAC5BH,EAAI/J,WACX,MAAOD,GAEPkD,QAAQlD,MAAM,wDAAyDA,EAAM2C,SAGjF,OAAO,MACN,CAAC6gC,IAEJ,GAAI,IAAUS,GACZ,OACE,gCACE,gBAAC,IAAU,CAAC7mC,QAAS,IAAkB0nC,KAAMxqC,UAAU,8BACrD,gBAAC,IAAgB,CAACyqC,UAAW,gCAAG1qC,EAAE,+BAAmC2qC,aAAa,OAClF,gBAAC,IAAgB,KACdt+B,OAAOC,aAAas+B,MAAQv+B,OAAOC,aAAau+B,QAC/C,gBAAC,IAAc,KACZ7qC,EACC,2FACA,CACEolC,GAAI/4B,OAAOC,aAAas+B,KACxBpF,KAAMn5B,OAAOC,aAAau+B,aAW5C,MAAMC,GAAqB,CACzBp6B,OAAQ1Q,EAAE,cACV2J,SAAU3J,EAAE,gBACZgrB,aAAchrB,EAAE,qBAChB2qB,gBAAiB3qB,EAAE,wBACnB6qB,cAAe7qB,EAAE,+BACjB+qC,yBAA0B/qC,EAAE,2BAc9B,OACE,gCACE,gBAAC,IAAY,CACXgZ,MAAO4wB,EACPoB,YAAcC,GAAgB,IAASA,EAAa,EAAG5qC,UAAWA,EAAK6lC,eACvEgF,uBAAwBtF,EACxBuF,oBAAqBxD,GACrBE,aAAcnC,EACdoF,mBAAoBA,GACpBvC,eAAgBA,GAChB6C,WAjFcxyB,GAClB,gBAACgwB,GAAe,CAACa,cAAeA,EAAe7wB,KAAMA,EAAMvT,QAAS4kC,IAiFhEoB,gBAAiBrrC,EAAE,4CACnBsrC,eAAgBtrC,EACd,gFAGHmpC,GACC,gBAAC,KAAK,CACJlpC,UAAU,2DAA0D,eACvD,qBAAoB,kBACjB,sBAChBsrC,OACE,gCACE,gBAAC,IAAiB,CAChBtrC,UAAU,kCACVurC,UAAWrC,EAAYqC,UACvBC,QAAStC,EAAYhe,OACrBtqB,MAtCoB,M,QAAM,OACtC,gCACGsoC,EAAY9oC,MACY,QAAxB,EAAgB,QAAhB,EAAA8oC,aAAW,EAAXA,EAAappC,WAAG,eAAEQ,cAAM,eAAE4J,cACzB,gBAAC,IAA8B,CAC7BlK,UAAU,gBACVkK,YAAag/B,EAAYppC,IAAIQ,OAAO4J,gBAgCvBuhC,GACP7C,OAAQ7oC,EAAE,2CAA4C,CACpD4J,QAASoa,GAAiB2lB,GAAkBR,EAAYv/B,QACxDD,SAAUw/B,EAAYx/B,WACtB,eACW,wBACbkQ,GAAG,wBAGL,uBAAK5Z,UAAU,oCACZsqC,IACC,gBAAC,IAAY,CACXv5B,oBAAoB,8DACpB3K,KAAMkkC,GACN5mC,KACE,gCACE,uBAAK1D,UAAU,yCACZkpC,EAAYwC,uBAAyB3rC,EAAE,iBAE1C,gBAAC,IAAmB,CAACC,UAAU,4CAKrCkpC,EAAYpe,UAqBZ,gBAAC,IAAM,CACL9qB,UAAU,kCAAiC,eAC9B,yBACbmF,YAAa+jC,EAAYpe,UACzB1lB,QAAS,IAAM,IAAQQ,KAzIvCsjC,GACAA,EAAY3kC,cACZ,WAAW2kC,EAAY3kC,aAAapE,SAASD,aAAa,oBAAkBqD,UAAU2lC,EAAY3kC,aAAapE,SAASC,wBAwIxG0C,QAAQ,aAEP/C,EAAE,kBA3BL,gBAAC,OAAI,CACHC,UAAW,EACT,iBACA,CACE,iBAAkBsqC,IAEpB,CACE,gBAAiBA,IAEnB,CACE,iBAAkBpB,EAAYppC,KAAOopC,EAAYF,cAEnD,mCACD,eACY,uBACbvlC,GAAI4mC,IAEHtqC,EAAE,kBAgBbk8B,SAAUiN,GAAeE,EACzBxnB,QAzLa,KACnB,MAAM/f,EAAS,IAAIuT,gBAAgBhJ,OAAOyF,SAASwD,QACnDxT,EAAO8pC,OAAO,gBACd9pC,EAAO8pC,OAAO,WACd9pC,EAAO8pC,OAAO,WACdlD,GAAa5mC,GACbsnC,EAAe,MACfE,GAAe,GAEfnhB,EAAiB,IACjBlE,EAAiB,IACjBylB,EAAiB,KA+KX7oC,MAAOsoC,EAAY9oC,MAEnB,gBAAC,IAAsB,CACrBuY,KAAMuwB,EACNM,cAAeA,EACfthB,iBAAkBA,EAClBnE,cAAeA,EACfC,iBAAkBA,OAmB9BilB,GAAoBxiC,YAAc,uB,kCCrrBlC,mXA8BO,MAAMmlC,EACD,WADCA,EAEF,UAGLC,EAAsB,CAAChG,EAAUltB,KACrC,IAAKktB,EAASiG,cAAe,CAC3B,IAAKjG,EAAS3rB,OACZ,MAAO,GAGT,IAAIA,EAAS,IAAMvB,EAAMktB,EAAS3C,OAC7BzsB,MAAMC,QAAQwD,KACjBA,EAAS,CAACA,IAGZ,MAAM6xB,EAAe,CAAClG,EAAS3rB,OAAQA,GAAQxV,OAAO,CAACspB,EAAGC,IAAMD,EAAEltB,OAAQ+M,GAAMogB,EAAEpoB,SAASgI,KAC3F,OAAK,IAAUk+B,GAIR,GAHE,CAAClG,GAMZ,MAAMmG,EAAuB,GAgB7B,OAfA,IAASnG,EAASiG,cAAgBG,IAChC,IAAI/xB,EAAS,IAAMvB,EAAMktB,EAAS3C,OAE7BzsB,MAAMC,QAAQwD,KACjBA,EAAS,CAACA,IAGZ,MAAMgyB,EAAqB,CAACD,EAAY/xB,OAAQA,GAAQxV,OAAO,CAACspB,EAAGC,IACjED,EAAEltB,OAAQ+M,GAAMogB,EAAEpoB,SAASgI,KAExB,IAAUq+B,IACbF,EAAqBpmC,KAAKqmC,KAAgBJ,EAAoBI,EAAatzB,MAIxEqzB,GAIHG,EAAU,CAACxzB,EAAMktB,EAAUuG,EAAc,QAExCvG,EAAS9sB,MAEF8sB,EAAS9sB,MAAMlT,SAAS8S,KAClCktB,EAAS9sB,MAAQ8sB,EAAS9sB,MAAM/T,OAAO2T,IAFvCktB,EAAS9sB,MAAQ,CAACJ,GAMhByzB,IACGA,EAAYrzB,MAELqzB,EAAYrzB,MAAMlT,SAAS8S,KACrCyzB,EAAYrzB,MAAQqzB,EAAYrzB,MAAM/T,OAAO2T,IAF7CyzB,EAAYrzB,MAAQ,CAACJ,KASrB0zB,EAA8BliB,IAC7BA,GAIL,IAASA,EAAY,CAAC0b,EAAUllC,KAPV,GAAGoY,WAAY,IAAUA,GAQzCuzB,CAAgBzG,UACX1b,EAAWxpB,GAElB0rC,EAA2BxG,EAASiG,kBAKpCS,EAAuB,CAAC1G,EAAUkF,KACtC,IAASlF,EAASiG,cAAgBM,IAC5BA,EAAYrzB,QACdqzB,EAAYI,SAAW,IAAOJ,EAAYrzB,OAC1CqzB,EAAYrzB,MAAQgyB,EAAYqB,EAAYrzB,OAC5CwzB,EAAqBH,EAAarB,IAEhClF,EAASiG,eACX,IAAOjG,EAAS9sB,MAAQJ,IAItB,IAHiB,IAAO,IAAOktB,EAASiG,eAAiBW,GACvD,IAAW5G,EAASiG,cAAcW,GAAQ1zB,MAAOJ,IAEpC,CACb,IAAI+zB,EAAgB,IAAM7G,EAASiG,cAAe,SAC7CY,IACHA,EAAgB,CAAE9yB,GAAOisB,EAASjsB,GAAZ,SAAwBY,MAAO,QAASzB,MAAO,IACrE8sB,EAASiG,cAAca,MAAQD,GAEjCA,EAAc3zB,MAAMnT,KAAK+S,SAQ7Bi0B,EAAoB,CAACziB,EAAY4gB,KACrC,IAAS5gB,EAAa0b,IAChBA,EAAS9sB,QACX8sB,EAAS2G,SAAW,IAAO3G,EAAS9sB,OACpC8sB,EAAS9sB,MAAQgyB,EAAYlF,EAAS9sB,OACtCwzB,EAAqB1G,EAAUkF,OAK/B8B,EAAa,CAAC9zB,EAAOoR,KAEzB,IAAOpR,EAAQJ,IACb,IAAIm0B,GAAkB,EAEtB,IAAO3iB,EAAa0b,IAClB,MAAMmG,EAAuBH,EAAoBhG,EAAUltB,GAC3D,IAAOqzB,EAAuBI,IAC5BD,EAAQxzB,EAAMktB,EAAUuG,GACxBU,GAAkB,MAGjBA,GACHX,EAAQxzB,EAAMwR,EAAWwiB,SAI7BxiB,EAAW5c,IAAIi/B,SAAW,IAAOzzB,GACjCoR,EAAW5c,IAAIwL,MAAQA,GAQZg0B,EAAkB,CAACh0B,EAAOgyB,EAAaiC,KAClD,MAAMC,EAAc,CAAErzB,GAAI,MAAOY,MAAO,IAAKza,EAAE,qBACzC2sC,EAAgB,CAAE9yB,GAAI,QAASY,MAAO,IAAKza,EAAE,iBAE7CoqB,EAAa,OAAH,sBACd5c,IAAK0/B,GACF,IAAYD,IAAe,CAC9BL,MAAOD,IAOT,OAJAG,EAAW9zB,EAAOoR,GAClBkiB,EAA2BliB,GAC3ByiB,EAAkBziB,EAAY4gB,GAEvB5gB,GAGH+iB,EAA4B/iB,IAChC,IAASA,EAAa0b,IACpBA,EAAS2G,SAAW,EACpB3G,EAAS9sB,MAAQ,GACjBm0B,EAAyBrH,EAASiG,kBAIhCqB,EAAkB,CAACp0B,EAAOc,EAASuzB,KACvC,MAAM,QAAEC,GAAYxzB,EACpB,IAAKwzB,IAAYA,EAAQnF,OACvB,OAAOnvB,EAGT,MAAMwvB,EAAe8E,EAAQ9nC,MAAM0gC,cACnC,OAAO,IAASltB,EAAQJ,GAASy0B,EAAa7E,EAAc5vB,KAqCxD20B,EAAc,CAACv0B,EAAOc,EAASyuB,KACnC,GAAI,IAAUzuB,GACZ,OAAOd,EAIT,MAAMw0B,EAAoBJ,EAAgBp0B,EAAOc,EAASyuB,GAOpDkF,EA/Cc,EAACz0B,EAAOc,IAErB,IACLA,EACA,CAAC4zB,EAAUnqC,EAAO3C,KAChB,GAAIA,IAAQirC,EACV,OAAO6B,EAGT,MAAMC,EAAgB,IAASpqC,EAAO,UACtC,GAAIoqC,EAAcxoC,OAAQ,CACxB,MAAMgV,EAAS,IACbwzB,EACA,CAACC,EAAc7sC,KACb6sC,EAAa/nC,KAAK9E,EAAOyE,SAAU,IAAMzE,EAAQ,WAAY,KACtD6sC,GAET,IAGFF,EAAS9sC,GAAO,IAASoY,EAAQJ,GAC3BlC,MAAMC,QAAQiC,EAAKhY,IACdgY,EAAKhY,GAAK0I,KAAMmiB,GAAMtR,EAAOrU,SAAS2lB,IAExCtR,EAAOrU,SAAS8S,EAAKhY,KAIhC,OAAO8sC,GAET,IAiBsBG,CAAcL,EAAmB1zB,GAIzD,MAAO,IAAI,IAAS2zB,GAAkBD,GAAmB7oC,OAAO,CAACspB,EAAGC,IAClED,EAAEltB,OAAQ+M,GAAMogB,EAAEpoB,SAASgI,MAIzBggC,EAAoB,CAAC90B,EAAOgyB,EAAalxB,EAASyuB,EAAgBne,KACtE,MAAMwf,EAAgB2D,EAAYv0B,EAAOc,EAASyuB,GAE5C1C,EAAgB,IAAYzb,GAMlC,OALA+iB,EAAyBtH,GAEzBiH,EAAWlD,EAAe/D,GAC1BgH,EAAkBhH,EAAemF,GAE1BnF,GAGHkI,GAAc,CAACC,EAAUlI,IACtB,IAAMA,EAASiG,cAAeiC,GAGjCC,GAAsB,CAACD,EAAUlI,MACjC,IAAMA,EAASiG,cAAeiC,IAI3B,IAAOlI,EAASiG,cAAgBM,GACrC4B,GAAoBD,EAAU3B,IAI5B6B,GAAqB,CAACF,EAAU5jB,KACpC,IAAI+jB,EAAiB,KAYrB,OAXA,IAAS/jB,EAAa0b,IAChBqI,IAKFA,EADErI,EAASjsB,KAAOm0B,EACDlI,EAEAoI,GAAmBF,EAAUlI,EAASiG,kBAGpDoC,GAuEHC,GAAuB,CAC3Bp1B,EACAgyB,EACAnD,EACAwG,EACAv0B,EACAsQ,EACAme,KAGA,MAAMqB,EAAgBwD,EAAgBp0B,EAAOc,EAASyuB,GAEhD+F,EAAsBR,EAC1BlE,EACAoB,EACA,GACAzC,EACAne,GAGI+jB,EAAiBD,GAAmBG,EAAoBC,GACxDC,EAAcJ,EAAiBA,EAAen1B,MAAQ,GACtDw1B,EAAkB,GAqBxB,OAnBA,IAAO3G,EAAe4G,IACpB,IAAO,IAAO30B,EAAQ20B,IAAgB7tC,IACpC,MAAMgtC,EAAe,CACnB,IAAM9zB,EAAS,CAAC20B,EAAa7tC,EAAK,aAC/B,IAAMkZ,EAAS,CAAC20B,EAAa7tC,EAAK,YAAa,KAG9C8tC,EAAe,IAASH,EAAc31B,GACtClC,MAAMC,QAAQiC,EAAK61B,IACd71B,EAAK61B,GAAanlC,KAAMmiB,GAAMmiB,EAAa9nC,SAAS2lB,IAGtDmiB,EAAa9nC,SAAS8S,EAAK61B,KAGpC,IAAMD,EAAiB,CAACC,EAAa7tC,GAAM,IAAO8tC,QAI/CF,GAGHG,GAAyB,CAACC,EAAkB/G,EAAcgH,KAC9D,MAAMh/B,EAAe,IAAIwF,gBAAgBhJ,OAAOyF,SAASwD,QACnDw5B,EAAgBj/B,EAAawV,IAAIwmB,GACjCkD,EAAgBl/B,EAAawV,IAAIwmB,GACjCwC,EAAqBS,GAAiB,MAC5C,IAAIE,EAAU,GACVH,IACFG,EAAUn/B,EAAawV,IAAI,YAAcwpB,EAAaI,MAExD,MAAMC,EAAe,GAErB,IAAOrH,EAAe4G,IACpB,MAAMU,EAAmBt/B,EAAawV,IAAIopB,GAC1C,GAAKU,EAIL,IACE,IAAMD,EAAcT,EAAaj/B,KAAKC,MAAM0/B,IAC5C,MAAO7xB,GAEPzU,QAAQmlB,KAAK,0EAA2E1Q,MAW5F,MAAO,CAAE+wB,qBAAoBV,cA/HN,EAACoB,EAAeG,EAAcvB,EAAeyB,EAAiB,QACrFzB,EAAcL,QAAQ9nC,MAAQupC,GAAiB,GAC/CpB,EAAcL,QAAQnF,SAAW4G,EAC7BK,GAEF,IAAO,IAAOzB,EAAcztC,MAAQU,GAClC,IAAM+sC,EAAe,CAAC,OAAQ/sC,EAAK,WAAW,IAIlD,IAASsuC,EAAc,CAACtB,EAAcyB,KAEpC,IAAO,IAAO1B,EAAc0B,IAAezuC,GACzC,IAAM+sC,EAAe,CAAC0B,EAAYzuC,EAAK,WAAW,IAEpD,IAAOgtC,EAAe0B,IACpB,IAAM3B,EAAe,CAAC0B,EAAYC,EAAa,WAAW,OAIvD3B,GAoGe4B,CACpBR,EACAG,EACAN,EACAE,GAG0CE,YAexCQ,GAAiB,CACrBlC,QAAS,CACP9nC,MAAO,GACP2iC,QAAQ,IAICsH,GAAgBjuC,IAC3B,MAAM,MACJwX,EAAK,YACLgyB,EAAW,eACXzC,EAAc,aACdV,EAAY,mBACZiD,EAAkB,uBAClBI,EAAsB,oBACtBC,EAAmB,aACnB0D,EAAY,gBACZxD,EAAe,eACfC,EAAc,WACdF,EAAU,WACVsE,GACEluC,GAEE,EAAExB,GAAM,4BACP,CAAE2vC,GAAmB,4BACtBC,EAAuB,YACtBC,EAAWC,GAAgB,WAAetuC,IAE1C4oB,EAAY2lB,IAAiB,WAClC/C,EAAgBh0B,EAAOgyB,EAAaE,EAAuBlyB,MAEtDq1B,GAAoB2B,IAAyB,WAAe,QAC5DrC,GAAesC,IAAoB,WAAeT,KAClDU,GAAcC,IAAmB,WAAe,OAChDC,GAAqBC,IAA0B,WAAe,KAC9DrB,GAASsB,IAAc,WAAezB,EAAeA,EAAaI,KAAO,IAE1EsB,GAAkB,CAACC,EAAWhrC,KAClC,MAAM1D,EAAS,IAAIuT,gBAAgBhJ,OAAOyF,SAASwD,QAE/C9P,EACF1D,EAAOgO,IAAI0gC,EAAW95B,MAAMC,QAAQnR,GAASgK,KAAKihC,UAAUjrC,GAASA,GAErE1D,EAAO8pC,OAAO4E,GAEhBb,EAAgB7tC,IAaZ4uC,GAAkB,cAAkB,CAACC,EAAoBC,EAAY92B,KACzE,IAAKd,EACH,OAGF,MAAM6sB,EAAgBiI,EACpB90B,EACAgyB,EACAlxB,EACAyuB,EACAoI,GAGF,MAAO,CACLhD,cAAe7zB,EACfu0B,mBAAoBuC,EACpBxmB,WAAYyb,EACZqK,aAAc9B,GACZp1B,EACAgyB,EACAnD,EACA+I,EACA92B,EACA+rB,EACA0C,KAIH,IAsBH,YApBkB,KAChB,MAAMqG,EAAmBzD,EAAoBqE,GAAgBx2B,EAAO6uB,GAC9DgJ,EAAelC,GAAuBC,EAAkB/G,EAAcgH,GAEtEiC,EAAeJ,GACnBtmB,EACAymB,EAAaxC,mBACbwC,EAAalD,eAGfoC,GAAce,EAAa1mB,YAC3B4lB,GAAsBc,EAAazC,oBACnC4B,GAAiBa,EAAanD,eAC9BwC,GAAgBW,EAAaZ,cAC7BI,GAAWO,aAAY,EAAZA,EAAc7B,SAEzBY,EAAqB75B,QAAQg7B,MAAM,CAAEC,eAAe,KAI3B,IAE3B,YAAgB,KACd,IAAK,IAAUh4B,EAAO62B,aAAS,EAATA,EAAW72B,OAAQ,CACvC,MAAM41B,EAAmBzD,EAAoBqE,GAAgBx2B,EAAO6uB,GAC9DoJ,EAAsB/F,EAAuBlyB,GAC7C6sB,EAAgBmH,EAAgBh0B,EAAOgyB,EAAaiG,GAEpDC,EAAmB,IACvBtC,EACA,CAACuC,EAAgB1C,EAAa90B,IACxBA,IAAoBkyB,GACtBsF,EAAe7D,QAAUK,GAAcL,QAChC6D,IAET,IAAO1C,EAAa,CAAC2C,EAAYC,KAC/BF,EAAex3B,GAAiB03B,GAAgBlJ,OAAS,IACvDwF,GACA,CAACh0B,EAAiB03B,EAAgB,WAClC,KAIGF,GAETvC,GAGIkC,EAAeJ,GAAgB7K,EAAewI,GAAoB6C,GAExEnB,GAAce,EAAa1mB,YAC3B4lB,GAAsBc,EAAazC,oBACnC4B,GAAiBa,EAAanD,eAC9BwC,GAAgBW,EAAaZ,cAG/BJ,EAAatuC,IACZ,CACDA,EACAqmC,EACAsD,EACAuF,GACA7B,EACA71B,EACA20B,GACAzC,EACAF,EACAqD,GACAwB,aAAS,EAATA,EAAW72B,QAGb,MAAMs4B,GAAe,KA/GQ,MAC3B,MAAMxvC,EAAS,IAAIuT,gBAEfg5B,IACFvsC,EAAOgO,IAAI+7B,EAAsBwC,IAGnCsB,EAAgB7tC,IAyGhByvC,GAEA,MAAMC,EA9QiB,EAAC7D,EAAe9F,KAEzC,IAAM8F,EAAe,gBAAiB,IACtC,IAAMA,EAAe,kBAAkB,GAGvC,IAAO9F,EAAe1E,IACpB,IAAO,IAAOwK,EAAcxK,IAAUviC,GACpC,IAAM+sC,EAAe,CAACxK,EAAOviC,EAAK,WAAW,MAI1C+sC,GAkQkB8D,CAAmB9D,GAAe9F,GAEnDiJ,EAAeJ,GAAgBtmB,EAAYikB,GAAoBmD,GAErEzB,GAAce,EAAa1mB,YAC3B4lB,GAAsBc,EAAazC,oBACnC4B,GAAiBa,EAAanD,eAC9BwC,GAAgBW,EAAaZ,cAGxB,eACHN,EAAqB75B,QAAQg7B,MAAM,CAAEC,eAAe,KAelD92B,GAAiB,CAACm1B,EAAYx1B,EAAIrU,KACtC,GAAI6pC,IAAexD,EAAqB,CACvB,IAAW,IAAM0E,GAAgB1E,EAAqB,GAAGrmC,GAAU,IAClFV,OACK,CACL,MAAM4sC,EAAc,IAAY/D,GAAc0B,IAC9C,IAAMqC,EAAa,CAAC73B,EAAI,UAAWrU,GACnC+qC,GAAgBlB,EA/Mc,CAACqC,IACnC,MAAMb,EAAe,IACnB,IAAOa,GACP,CAACl8B,EAAQm8B,IACAD,EAAYC,GAASxJ,OAAS3yB,EAAOvQ,OAAO0sC,GAAWn8B,EAEhE,IAGF,OAAO,IAAUq7B,GAAgB,GAAKrhC,KAAKihC,UAAUI,IAsMrBe,CAAqBF,IAGnD,MAAMP,EA7TyB,EAACxD,EAAe0B,EAAYx1B,EAAIrU,KAC7D6pC,IAAexD,GACjB,IAAM8B,EAAe,gBAAiBnoC,GACtC,IAAMmoC,EAAe,mBAAoBnoC,IAEzC,IAAMmoC,EAAe,CAAC0B,EAAYx1B,EAAI,UAAWrU,GAG5CmoC,GAqTkBkE,CAAoBlE,GAAe0B,EAAYx1B,EAAIrU,GAEpEsrC,EAAeJ,GAAgBtmB,EAAYikB,GAAoB8C,GAErEpB,GAAce,EAAa1mB,YAC3B4lB,GAAsBc,EAAazC,oBACnC4B,GAAiBa,EAAanD,eAC9BwC,GAAgBW,EAAaZ,eAGzB4B,GAAkB,aAAqBtsC,IAC3C0U,GAAe,UAAW,KAAM1U,KAc5BusC,GAAa,CAACjM,EAAU/rB,KAC5B,MAAM,GAAEF,EAAE,MAAEY,EAAK,cAAEsxB,EAAa,SAAEU,GAAa3G,EACzCqC,EAAStuB,IAAOE,EAChBi4B,EAAe,QAAPn4B,EAERo4B,EAAa,mBAAmBxF,EAAsC,GAA3B,0BACjD,OACE,gBAAC,IAAe,CACd7rC,IAAKiZ,EACLsuB,OAAQA,EACRloC,UAAWgyC,EACXhE,oBAAqBA,GAAoBl0B,EAAU+rB,GACnDkM,MAAOA,EAAK,YACDn4B,EACXtT,UAAW,IACT,gBAAC,OAAI,CACH7C,GAAI,aAAiBmoC,EAAsBhyB,GAC3CxU,QAAUiY,IACJ,YAAgBA,KAGpBA,EAAEuB,iBAnES,CAAC+xB,IACtBL,GAAgB1E,EAAsB+E,GAEtC,MAAME,EAAeJ,GAAgBtmB,EAAYwmB,EAAYjD,IAE7DoC,GAAce,EAAa1mB,YAC3B4lB,GAAsBc,EAAazC,oBACnC4B,GAAiBa,EAAanD,eAC9BwC,GAAgBW,EAAaZ,eA4DnBgC,CAAer4B,MAGhBY,IAIJsxB,GACC,gBAAC,IAAY,CAACoG,cAAY,EAACC,UAAWrE,GAAYh0B,EAAU+rB,IACzD,IAAMiG,EAAgBM,GAAgB0F,GAAW1F,EAAatyB,OAiBnEs4B,GAAoB,CAAC5D,EAAa6D,KACtC,MACMC,EAAevyC,EAAE,oCAAqC,CAC1DwyC,aAAcj5B,OAAOC,KAAKi1B,GAAatpC,OAFxB,IAKjB,OACE,gBAAC,IAAuB,CACtBvE,IAAK0xC,EACLzxC,MAAOiqC,EAAmBwH,IAAcA,EACxCG,gBAAiB,IArEC,CAACH,IACvB,MAAMI,EAAc,IAAQtC,IAC5B,IAAMsC,EAAaJ,GAAY,IAAMlC,GAAqBkC,GAAW,IACrEjC,GAAuBqC,IAkEID,CAAgBH,GACvCK,QAAS,IAAMvC,GAAqBkC,GAAW,GAAM,uBAC/BA,EACtBM,aAZa,EAabC,SAAUN,EACVO,SAAU9yC,EAAE,qBAEX,IAAMyuC,EAAa,CAAC1tC,EAAQgyC,KAC3B,MAAM,MAAEt4B,EAAK,OAAE0tB,GAAWpnC,EAC1B,OACE,gBAAC,IAA2B,CAC1BH,IAAKmyC,EACLtqC,MAAO,IAAMynC,GAAc,CAACoC,EAAWS,GAAa,GACpDt1B,QAAS0qB,EACT9iC,QAAUiY,GAAMpD,GAAeo4B,EAAWS,EAAYz1B,EAAEE,OAAOC,SAC/D5c,MAAO4Z,EAAK,YACD,GAAG63B,KAAa,IAAYS,MAEtCt4B,OA0Db,IAAI0zB,GAAiBD,GAAmBG,GAAoBjkB,GACvD+jB,KACHA,GAAiBD,GAAmB,MAAO9jB,IAE7C,MAAMqiB,GAAWzsC,EAAE,8BAA+B,CAChDgzC,WAAY7E,GAAe1B,WAG7B,OACE,uBAAKxsC,UAAU,iDACb,uBAAKA,UAAU,yBA1GQ,CAAC8Z,IAC1B,MAAMq4B,EAAY,IAAMhoB,EAAYrQ,GAEpC,OACE,gBAAC,IAAY,CAACo4B,cAAY,EAACC,UAAWA,EAAWJ,MAAM,QACpD,IAAM5nB,EAAa0b,GAAaiM,GAAWjM,EAAU/rB,MAsGrDk5B,CAAmB9E,GAAet0B,IA3DrC,gBAAC,IAAe,KACb,IAAM8zB,GAAe,CAACc,EAAa6D,KAClC,GAAIA,IAAczG,EAGlB,OAAOwG,GAAkB5D,EAAa6D,OAyD1C,uBAAKryC,UAAU,4BACb,uBAAKA,UAAU,2BACb,uBAAKA,UAAU,4CAA4CkuC,GAAe1zB,OAC1E,uBAAKxa,UAAU,2BACb,2BACE,gBAAC,IAAW,CACVA,UAAU,yBAAwB,YACxB,qBACVe,IAAK4uC,EACL7xB,YAAa/d,EAAE,+BACfwF,MAAOmoC,GAAcL,QAAQ9nC,MAC7B6X,SAAU,CAACuB,EAAOjb,IAASmuC,GAAgBnuC,GAC3CuvC,QAAS,IAAMpB,GAAgB,IAAG,aACtB9xC,EAAE,iCAEf0vC,GACC,gBAAC,IAAQ,CACPzvC,UAAU,uCACVkzC,cAAc,2BACdn6B,MAAO61B,EACPxxB,SAAWC,IAAM81B,OA5K/B7C,GAAgB,WADK/qC,EA6KwB8X,KA5KRuxB,EAAaI,KAAO,GAAK,GAAGzpC,QACjE8qC,GAAW9qC,GAFS,IAACA,GA8KP6tC,YAAY,WACZxyC,MAAOmuC,MAIb,uBAAK/uC,UAAU,8BAA8BwsC,MAIhD0B,GAAe1B,SAAW,GACzB,uBAAKxsC,UAAU,yBACZyvC,GAAcV,KAAYH,EAAaI,KA/DvB,CAACqE,IAC1B,MAAMC,EAAe7D,EAAW4D,EAAatE,IAM7C,OACE,gBAAC,KAAe,CACdh2B,MAAOu6B,EACPC,WAAYpI,EACZqI,aATuBC,GACzB,gBAAC,IAAK,CAACzzC,UAAU,+BAA+B0qC,aAAa,KAAK3sB,KAAK,MACpE01B,E,KAAW,IAAOH,EAAaG,I,KAQhCC,gBAAc,KAmDqC,CAC1BxF,GAAen1B,OAElC,gBAAC,KAAe,CAACA,MAAOm1B,GAAen1B,MAAOw6B,WAAYpI,KAInC,IAA5B+C,GAAe1B,UAxFlB,gBAAC,IAAU,CAAC1pC,QAAS,IAAkB0nC,MACrC,gBAAC,IAAgB,CAACC,UAAW,gCAAGW,GAAqBV,aAAa,OAClE,gBAAC,IAAc,KAAEW,GACjB,gBAAC,IAAgB,KACf,gBAAC,IAAiB,KAChB,gBAAC,IAAM,CACLvoC,QAAQ,OACRsC,QAAS,IAAMisC,KAAc,eAChB,yBAEZ,IAAKtxC,EAAE,mCAoFtByvC,GAAa/oC,YAAc,eAE3B+oC,GAAamE,UAAY,CACvB56B,MAAO,QACPgyB,YAAa,OAAe6I,WAC5B3I,uBAAwB,OAAe2I,WACvC1I,oBAAqB,OACrBtD,aAAc,QAAgBgM,WAC9B/I,mBAAoB,SACpBuH,kBAAmB,OACnB9J,eAAgB,OAAesL,WAC/BzI,WAAY,OAAeyI,WAC3BxI,gBAAiB,SACjBC,eAAgB,SAChBoE,WAAY,OACZb,aAAc,UAGhBY,GAAaqE,aAAe,CAC1B96B,MAAO,KACPmyB,oBArlBgC,CAACvD,EAAgB5uB,EAAO6uB,KACxD,MAAM/tB,EAAU,IAAY8tB,GAe5B,OAbA,IAAOC,EAAe1E,IACpB,IAAOnqB,EAAQJ,IACb,MAAMpT,EAAQoT,EAAKuqB,GACf39B,GACF,IAAMsU,EAAS,CAACqpB,EAAO39B,GAAQ,CAC7BiV,MAAOjV,EACPA,QACA2iC,QAAQ,QAMTruB,GAskBPgxB,mBAAoB,GACpBuH,kBAAmB,KACnBhH,gBAAiB,uCACjBC,eAAgB,+D,kCCx4BlB,8FAaO,MA+DMyI,EAAgC,YA/DsD,EACjG90B,QACAirB,6BAEA,MAAM,EAAElqC,GAAM,4BACPg0C,EAAgBC,GAAqB,YAAe,GACrDzc,EAAS,cACZ5Y,IACCA,EAAMC,iBACNI,IACAirB,EAAuB8J,IAEzB,CAAC/0B,EAAO+0B,EAAgB9J,IAG1B,OACE,wBAAMvrB,SAAU6Y,EAAQv3B,UAAU,yCAChC,gBAAC,IAAU,KAAED,EAAE,gCACf,gBAAC,IAAS,KACR,uBAAKC,UAAU,oCACb,uBAAKA,UAAU,iCACb,gBAAC,IAAc,OAEjB,2BACE,yBACGD,EACC,qOAED,MACC,wBAAMC,UAAU,iCACd,gBAAC,IAAY,CACXoG,KAAM,KACN1C,KAAM3D,EAAE,0EAKhB,gBAAC,IAAQ,CACPC,UAAU,oCACVod,SAAU,CAAC6E,EAAQ1c,IAAUyuC,EAAkBzuC,GAC/CkiB,UAAWssB,EAAc,qBACLA,EACpBn6B,GAAG,sBACHY,MAAOza,EAAE,2CAKjB,gBAAC,IAAiB,CAChBmf,WAAYnf,EAAE,gBACdkf,YAAY,EACZ7D,aAAa,GACb+D,OAAQH,Q,kCCjEhB,sQA4CA,MAAMi1B,EAAS,CACb,gBACA,oBACA,iBACA,gBACA,cAGIC,EAAkD,EAAGC,qCACzD,MAAM,EAAEp0C,GAAM,2BACRq0C,EAAuBH,EAAOh3B,QAAQk3B,GAE5C,OACE,sBAAIn0C,UAAU,8DACXi0C,EAAOxzC,IAAI,CAAC4zC,EAAOz7B,KAClB,MAAMsvB,EAASkM,GAAwBx7B,EACvC,OACE,sBACE5Y,UAAW,EAAW,4DAA6D,CACjF,oEAAqEkoC,IAEvEvnC,IAAK0zC,GAEJnM,GACC,gBAAC,IAAe,CACdpc,MAAM,0CACN9rB,UAAU,iEACVY,MAAOb,EAAE,iBAGZA,EAAE,OAAOs0C,QAYhBC,EAAqE,EACzEC,gBACAhwC,eACAiwC,uB,gBAEA,MAAM,EAAEz0C,GAAM,4BACPoS,GAAgB,YAA+C,CACpElS,KAAM,aAAkB,8BACxBG,KAA0B,QAApB,EAAAmE,aAAY,EAAZA,EAAcjE,cAAM,eAAE6R,aAC5BjS,UAAiC,QAAtB,EAAAqE,aAAY,EAAZA,EAAcpE,gBAAQ,eAAED,UACnC2I,QAAQ,EACR7G,YAAY,IAERyyC,EAAS,WAAWlwC,EAAapE,SAASD,UAC1CuD,EAAK0O,EACP,GAAGsiC,4BAA6D,QAA5B,EAAsB,QAAtB,EAAAtiC,aAAY,EAAZA,EAAchS,gBAAQ,eAAEC,YAAI,QAAI,KACpE,GAAGq0C,mBAAkD,QAA1B,EAAAlwC,EAAapE,SAASC,YAAI,QAAI,KACvDs0C,EAAqC,QAAlB,EAAAviC,aAAY,EAAZA,EAAc5R,YAAI,eAAEoJ,QAC7C,OACE,gBAAC,IAAS,CAAC3J,UAAU,wBAAwBY,MAAOb,EAAE,2BACpD,yBACGA,EAAE,wDAAyD,IAC5D,gBAAC,OAAI,CAAC0D,GAAIA,GAAK1D,EAAE,uBAElB20C,IAAqBH,EACpB,gCACE,gBAAC,IAAe,CAACI,eAAgB,CAAEC,QAAS,SAC1C,gBAAC,IAAoB,KACnB,gBAAC,IAAmB,KAAE70C,EAAE,0BACxB,gBAAC,IAA0B,KAAEy0C,IAE/B,gBAAC,IAAoB,KACnB,gBAAC,IAAmB,KAAEz0C,EAAE,0BACxB,gBAAC,IAA0B,KAAE20C,MAIjC,OAKJG,EAAsE,EAAGtwC,mB,cAC7E,MAAM,EAAExE,GAAM,4BACPoS,GAAgB,aACD,QAApB,EAAA5N,aAAY,EAAZA,EAAcjE,cAAM,eAAE6R,cAClB,CACElS,KAAM,aAAkB,8BACxBG,KAA0B,QAApB,EAAAmE,aAAY,EAAZA,EAAcjE,cAAM,eAAE6R,aAC5BjS,UAAiC,QAAtB,EAAAqE,aAAY,EAAZA,EAAcpE,gBAAQ,eAAED,UACnC2I,QAAQ,EACR7G,YAAY,GAEd,MAEAyyC,EAAS,WAAWlwC,EAAapE,SAASD,UAC1CuD,EAAK0O,EACP,GAAGsiC,4BAAuD,QAAtB,EAAAtiC,aAAY,EAAZA,EAAchS,gBAAQ,eAAEC,oBAC5D,GAAGq0C,mBAAkD,QAA1B,EAAAlwC,EAAapE,SAASC,YAAI,QAAI,KAC7D,OACE,gBAAC,IAAS,CAACJ,UAAU,wBAAwBY,MAAOb,EAAE,4BACpD,yBACE,4BACE,gBAAC,QAAK,CAAC+B,GAAG,OAAK,qD,IAGjB,gBAAC,OAAI,CAAC2B,GAAIA,GAAK1D,EAAE,yBAMnB+0C,EAAmFvzC,IACvF,MAAM,EAAExB,GAAM,4BACR,UAAE+qB,EAAS,aAAEke,EAAY,cAAE/1B,GAAkB1R,EACnD,OAAIynC,EACK,gBAAC6L,EAAmB,iBAAKtzC,IAG9BupB,EACK,gBAACwpB,EAAkB,iBAAK/yC,IAG7B0R,IAAkB,IAAqBqzB,mBAEvC,gBAAC,IAAS,CAACtmC,UAAU,wBAAwBY,MAAOb,EAAE,2BACpD,yBACGA,EACC,+PAGH,MACC,wBAAMC,UAAU,iCACd,gBAAC,IAAY,CACXoG,KAAM,KACN1C,KAAM3D,EAAE,0EAQhBkT,IAAkB,IAAqB8hC,kBAEvC,gBAAC,IAAS,CAACn0C,MAAOb,EAAE,6BAClB,yBACGA,EACC,iQAGJ,yBACE,gBAAC,IAAY,CACXqG,KAAK,oEACL1C,KAAM3D,EAAE,oDAOX,MAGIi1C,EAAgE,EAC3Er8B,OACA6wB,gBACAthB,mBACAnE,gBACAC,uB,YAEA,MAAM,EAAEjkB,GAAM,4BACR,cACJkT,EAAa,OACbxC,EAAM,YACN/B,EAAW,cACXkc,EAAa,UACbE,EAAS,aACTke,EAAY,gBACZze,EAAe,2BACflb,EAA0B,IAC1BvP,EAAG,SACH4J,EAAQ,WACRurC,EAAU,aACV1wC,EAAY,QACZ2wC,EAAO,kBACP1qB,EAAiB,QACjB7gB,EAAO,iBACPghB,EAAgB,eAChBE,EAAc,eACdJ,GACE9R,EAEEw8B,EAAiB,aAAiB,YAClC,kBACJlrC,EAAiB,kBACjB+F,EAAiB,kBACjBC,EAAiB,qBACjBiV,GACE,cACEC,GACJlb,aAAiB,EAAjBA,EAAmBC,eACnB8F,aAAiB,EAAjBA,EAAmB9F,eACnB+F,aAAiB,EAAjBA,EAAmB/F,aAErB,YAAgB,K,MACdgb,EAAqB,IAAgB,QAAT,EAAAvM,aAAI,EAAJA,EAAM7Y,WAAG,eAAEQ,OAAQ,iBAC9C,CAAU,QAAT,EAAAqY,aAAI,EAAJA,EAAM7Y,WAAG,eAAEQ,OAAQ4kB,IACvB,MAAM0D,EAAiB9oB,aAAG,EAAHA,EAAKQ,OAAOugB,SAASrc,KAAM0Q,GAAOA,EAAG9U,OAAS+0C,GAC/DC,EAAgCxsB,aAAc,EAAdA,EAAgB9H,eAAe9W,YAAYqrC,eAC3EC,GAA6B1sB,aAAc,EAAdA,EAAgB9H,eAAepS,cAAe6b,EAC3EgrB,EAA2B3sB,aAAc,EAAdA,EAAgB9H,eAAe9W,YAAYwrC,UACtErB,EACmD,QAAvD,EAAAvrB,aAAc,EAAdA,EAAgB9H,eAAe9W,YAAYogB,oBAAY,QAAIzR,EAAK+R,gBAE5D8pB,GAA2C,QAAxB,EAAkB,QAAlB,EAAA77B,aAAI,EAAJA,EAAMpU,oBAAY,eAAEhE,YAAI,eAAEyT,QAC7CyhC,GACJ,wBAAMz1C,UAAU,2CAA2CD,EAAE,YAEzD21C,GAAUC,KAAKnmC,MAAM+lC,GACzB,gBAAC,KAAS,CAACprC,UAAWorC,IACpB,GAIGtxB,GAAiBC,IAAsB,YAAe,GACvD0xB,GAActqC,IAAQ,QAAC,OAA0C,QAA1C,EAAS,QAAT,EAAAA,aAAI,EAAJA,EAAM7K,WAAG,oBAAT6K,EAAauqC,GAAM,uBAAKl1C,IAAKk1C,GAAIA,WAAS,QAAIJ,IAErEK,GAAsBF,GAAWhrB,GACjCmrB,GAA0BH,GAAWprB,GAErC/a,GAAqB,UAAc,KACvC,GAAIJ,EACF,IACE,MAAMK,EAAM,IAAIC,IAAIN,GAEpB,OADAK,EAAIE,aAAaC,IAAI,aAAc,qBAC5BH,EAAI/J,WACX,MAAOD,GAEPkD,QAAQlD,MAAM,yDAA0DA,EAAM2C,SAGlF,OAAO,MACN,CAACgH,IAEE4Y,GAAwBuhB,GAAiB,YAAsB1pC,GAErE,OAAO6Y,EACL,uBAAK3Y,UAAU,gCACb,uBAAKA,UAAU,sBACb,uBAAKA,UAAU,kCACb,uBAAKA,UAAU,iCACb,gBAAC,IAAmB,KAClB,gBAAC,IAAY,CACXwa,MAAOza,EAAE,eACTwF,MACE,gBAAC,IAAqB,CACpB6c,gBAAiBtiB,EACjBmoB,sBAAuBA,GACvBC,iBAAkBA,EAClBlE,iBAAkBA,MAIxB,gBAAC,IAAY,CACXxJ,MAAOza,EAAE,eACTwF,MACE,gBAAC,IAAqB,CACpB6c,gBAAiBtiB,EACjBmoB,sBAAuBA,GACvBlE,cAAeA,EACfC,iBAAkBA,MAIxB,gBAAC,IAAY,CACXxJ,MAAOza,EAAE,wBACTwF,MACE4uC,EACE,gBAACD,EAAe,CACdC,+BAAgCA,IAEhC,KAKR,gBAAC,IAAY,CAAC35B,MAAOza,EAAE,cAAewF,MAAOkL,GAAUglC,KACvD,gBAAC,IAAY,CAACj7B,MAAOza,EAAE,gBAAiBwF,MAAOmE,GAAY+rC,MAC1D7qB,aAAa,EAAbA,EAAe1lB,QAAS,GACvB,gBAAC,IAAY,CACXsV,MAAOza,EAAE,+BACTwF,MAAOuwC,MAGVtrB,aAAiB,EAAjBA,EAAmBtlB,QAAS,GAC3B,gBAAC,IAAY,CACXsV,MAAOza,EAAE,2BACTwF,MAAOwwC,KAGX,gBAAC,IAAY,CACXv7B,MAAOza,EAAE,kBACTwF,MACE0vC,EAAa,gBAAC,IAAY,CAAC7uC,KAAM6uC,EAAYvxC,KAAMuxC,IAAiBQ,KAGxE,gBAAC,IAAY,CACXj7B,MAAOza,EAAE,uBACTwF,MACE6vC,EACE,uBAAKp1C,UAAU,kCACZo1C,GAED,KAKR,gBAAC,IAAY,CAAC56B,MAAOza,EAAE,kBAAmBwF,MAAOmwC,IAAWD,KAC5D,gBAAC,IAAY,CACXj7B,MAAOza,EAAE,eACTwF,MACEkK,GACE,gBAAC,IAAY,CAACrJ,KAAMqJ,GAAoB/L,KAAM3D,EAAE,qBAEhDm1C,GAAWO,MAKnB,uBAAKz1C,UAAU,wCACZ,YAAgB2qB,EAAkBE,EAAgBJ,IACjDxG,KACA2G,aAAa,EAAbA,EAAepmB,KAAMoU,GAAMA,IAAM,IAAsBuuB,aACrD,gBAAC,gCAA6B,CAC5BvmC,MAAOb,EAAE,2BACTsI,QAAStI,EACP,ySAEF6hB,QAAS,IAAMsC,IAAmB,KAGvC,YAAkByG,EAAkBE,EAAgBJ,IACnDxG,KACA2G,aAAa,EAAbA,EAAepmB,KAAMoU,GAAMA,IAAM,IAAsBuuB,aACrD,gBAAC,gCAA6B,CAC5BvmC,MAAOb,EAAE,oEACTsI,QAAStI,EACP,oTAEF6hB,QAAS,IAAMsC,IAAmB,KAGvC,YAAgByG,EAAkBE,EAAgBJ,IACjDxG,KACA2G,aAAa,EAAbA,EAAepmB,KAAMoU,GAAMA,IAAM,IAAsBmxB,gBACrD,gBAAC,gCAA6B,CAC5BnpC,MAAOb,EAAE,kEACTsI,QAAStI,EACP,wTAEF6hB,QAAS,IAAMsC,IAAmB,KAGvCiB,GACC,gBAAC,IAA8B,CAC7Blb,kBAAmBA,EACnB+F,kBAAmBA,EACnBC,kBAAmBA,IAGvB,gBAAC6kC,EAA+B,CAC9BhqB,UAAWA,EACXke,aAAcA,EACduL,cAAe5qC,EACfsJ,cAAeA,EACf1O,aAAcA,EACdiwC,iBAAkBA,GAClB7pB,iBAAkBA,EAClBF,eAAgBA,EAChBI,eAAgBA,IAEjByqB,EACC,gBAAC,eAAY,CAAC7mC,QAAS6mC,IACrB,OAQZ,MAGNN,EAAuBnB,aAAe,CACpCl7B,KAAM,MAsBRq8B,EAAuBvuC,YAAc,0B,kCCjdrC,wEAOO,MAAMuvC,EAAqD,KAChE,MAAQjsB,KAAMksB,EAAUvwC,MAAOwwC,GAAc,aAAiB,oCACvDn9B,EAAOo9B,GAAY,WAAuC,KAC1Dl1B,EAASm1B,GAAc,YAAe,IACtC1wC,EAAOqf,GAAY,aAE1B,YAAgB,KACTkxB,IAAYC,IACfE,GAAYH,GACZlxB,EAASmxB,KAEV,CAACD,EAAUC,IAEd,MAAMG,EAAO,cAAkB,KACzBJ,IAAaC,GACf,YAAa,OACV1wC,KAAM8wC,GAAa,YAA+BA,EAAU,sBAC5D9wC,KAAMoT,IACLu9B,EAASv9B,GACTmM,EAAS,MACTqxB,GAAW,KAEZ3wC,MAAO4X,IACN0H,EAAS1H,GACT+4B,GAAW,GACXD,EAAS,OAGd,CAACF,EAAUC,IAKd,OAFA,aAAQG,EAAM,KAEP,CAACt9B,EAAOkI,EAASvb","file":"operator-lifecycle-manager-v1/code-refs/ExtensionCatalog-chunk-38db9a90e0aed6789abb.min.js","sourcesContent":["import * as React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Map as ImmutableMap, Set as ImmutableSet, fromJS } from 'immutable';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { getUser } from '@console/dynamic-plugin-sdk';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  MultiListPage,\n  DetailsPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  SectionHeading,\n  ConsoleEmptyState,\n  ResourceLink,\n  ResourceKebab,\n  Kebab,\n  ResourceIcon,\n  navFactory,\n  ResourceSummary,\n  history,\n  HintBlock,\n  useAccessReview,\n} from '@console/internal/components/utils';\nimport { authSvc } from '@console/internal/module/auth';\nimport {\n  apiGroupForReference,\n  referenceFor,\n  referenceForModel,\n  referenceForOwnerRef,\n  k8sPatch,\n  apiVersionForReference,\n  UserInfo,\n} from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { FLAGS, GreenCheckCircleIcon, Status, useFlag } from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n  CatalogSourceModel,\n} from '../models';\nimport { InstallPlanKind, InstallPlanApproval, Step } from '../types';\nimport { installPlanPreviewModal } from './modals/installplan-preview-modal';\nimport { requireOperatorGroup } from './operator-group';\nimport { InstallPlanReview, referenceForStepResource } from './index';\n\nconst tableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl', 'pf-v5-c-table__td'),\n  Kebab.columnClass,\n];\n\nconst componentsTableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n];\n\nexport const InstallPlanTableRow: React.FC<RowFunctionArgs> = ({ obj }) => {\n  const { t } = useTranslation();\n  const phaseFor = (phase: InstallPlanKind['status']['phase']) => <Status status={phase} />;\n  return (\n    <>\n      {/* Name */}\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(InstallPlanModel)}\n          namespace={obj.metadata.namespace}\n          name={obj.metadata.name}\n        />\n      </TableData>\n\n      {/* Namespace */}\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n\n      {/* Status */}\n      <TableData className={tableColumnClasses[2]}>\n        {phaseFor(obj.status?.phase ?? 'Unknown')}\n      </TableData>\n\n      {/* Components */}\n      <TableData className={tableColumnClasses[3]}>\n        <ul className=\"pf-v5-c-list pf-m-plain\">\n          {obj.spec.clusterServiceVersionNames.map((csvName) => (\n            <li key={csvName}>\n              {obj.status?.phase === 'Complete' ? (\n                <ResourceLink\n                  kind={referenceForModel(ClusterServiceVersionModel)}\n                  name={csvName}\n                  namespace={obj.metadata.namespace}\n                  title={csvName}\n                />\n              ) : (\n                <>\n                  <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                  {csvName}\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </TableData>\n\n      {/* Subscriptions */}\n      <TableData className={tableColumnClasses[4]}>\n        {(obj.metadata.ownerReferences || [])\n          .filter((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel))\n          .map((ref) => (\n            <ul key={ref.uid} className=\"pf-v5-c-list pf-m-plain\">\n              <li>\n                <ResourceLink\n                  kind={referenceForModel(SubscriptionModel)}\n                  name={ref.name}\n                  namespace={obj.metadata.namespace}\n                  title={ref.uid}\n                />\n              </li>\n            </ul>\n          )) || <span className=\"text-muted\">{t('olm~None')}</span>}\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={Kebab.factory.common}\n          kind={referenceForModel(InstallPlanModel)}\n          resource={obj}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst EmptyMsg: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('olm~No InstallPlans found')}>\n      {t('olm~InstallPlans are created automatically by subscriptions or manually using the CLI.')}\n    </ConsoleEmptyState>\n  );\n};\n\nexport const InstallPlansList = requireOperatorGroup((props: InstallPlansListProps) => {\n  const { t } = useTranslation();\n  const InstallPlanTableHeader = () => {\n    return [\n      {\n        title: t('olm~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('olm~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('olm~Status'),\n        sortField: 'status.phase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('olm~Components'),\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('olm~Subscriptions'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~InstallPlans')}\n      Header={InstallPlanTableHeader}\n      Row={InstallPlanTableRow}\n      EmptyMsg={EmptyMsg}\n    />\n  );\n});\n\nconst getCatalogSources = (\n  installPlan: InstallPlanKind,\n): { sourceName: string; sourceNamespace: string }[] =>\n  _.reduce(\n    installPlan?.status?.plan || [],\n    (accumulator, { resource: { sourceName, sourceNamespace } }) =>\n      accumulator.add(fromJS({ sourceName, sourceNamespace })),\n    ImmutableSet(),\n  ).toJS();\n\nexport const InstallPlansPage: React.FC<InstallPlansPageProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const namespace = props.namespace || params?.ns;\n  return (\n    <MultiListPage\n      {...props}\n      namespace={namespace}\n      resources={[\n        {\n          kind: referenceForModel(InstallPlanModel),\n          namespace,\n          namespaced: true,\n          prop: 'installPlan',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.installPlan, 'data', [])}\n      title={t('olm~InstallPlans')}\n      showTitle={false}\n      ListComponent={InstallPlansList}\n    />\n  );\n};\n\nconst updateUser = (isOpenShift: boolean, user: UserInfo): string => {\n  if (!isOpenShift) {\n    return authSvc.name();\n  }\n  return user?.username;\n};\n\nexport const NeedInstallPlanPermissions: React.FC<NeedInstallPlanPermissionsProps> = ({\n  installPlan,\n}) => {\n  const isOpenShift = useFlag(FLAGS.OPENSHIFT);\n  const user: UserInfo = useSelector<RootState, object>(getUser);\n\n  const [username, setUsername] = React.useState(updateUser(isOpenShift, user));\n\n  React.useEffect(() => {\n    setUsername(updateUser(isOpenShift, user));\n  }, [isOpenShift, user]);\n\n  const { t } = useTranslation();\n\n  const apiGroup = apiGroupForReference(referenceFor(installPlan));\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title={t('olm~Missing sufficient privileges for manual InstallPlan approval')}\n    >\n      {username\n        ? t(\n            'olm~User \"{{user}}\" does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { user: username, apiGroup, namespace: installPlan.metadata.namespace },\n          )\n        : t(\n            'olm~User does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { apiGroup, namespace: installPlan.metadata.namespace },\n          )}\n    </Alert>\n  );\n};\n\nexport const InstallPlanDetails: React.FC<InstallPlanDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const needsApproval =\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false;\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return (\n    <>\n      {needsApproval && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <p>\n              {t(\n                'olm~Inspect the requirements for the components specified in this InstallPlan before approving.',\n              )}\n            </p>\n            <Link\n              to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                obj.metadata.name\n              }/components`}\n            >\n              <Button variant=\"primary\">{t('olm~Preview InstallPlan')}</Button>\n            </Link>\n          </HintBlock>\n        </div>\n      )}\n      {needsApproval && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~InstallPlan details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('olm~Status')}</dt>\n                <dd>\n                  <Status status={obj.status?.phase ?? t('olm~Unknown')} />\n                </dd>\n                <dt>{t('olm~Components')}</dt>\n                {(obj.spec.clusterServiceVersionNames || []).map((csvName) => (\n                  <dd key={csvName}>\n                    {obj.status.phase === 'Complete' ? (\n                      <ResourceLink\n                        kind={referenceForModel(ClusterServiceVersionModel)}\n                        name={csvName}\n                        namespace={obj.metadata.namespace}\n                        title={csvName}\n                      />\n                    ) : (\n                      <>\n                        <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                        {csvName}\n                      </>\n                    )}\n                  </dd>\n                ))}\n                <dt>{t('olm~CatalogSources')}</dt>\n                {getCatalogSources(obj).map(({ sourceName, sourceNamespace }) => (\n                  <dd key={`${sourceNamespace}-${sourceName}`}>\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={sourceName}\n                      namespace={sourceNamespace}\n                      title={sourceName}\n                    />\n                  </dd>\n                ))}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions conditions={obj.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const InstallPlanPreview: React.FC<InstallPlanPreviewProps> = ({\n  obj,\n  hideApprovalBlock,\n}) => {\n  const { t } = useTranslation();\n  const [needsApproval, setNeedsApproval] = React.useState(\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false,\n  );\n  const subscription = obj?.metadata?.ownerReferences.find(\n    (ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel),\n  );\n\n  const plan = obj?.status?.plan || [];\n  const stepsByCSV = plan\n    .reduce(\n      (acc, step) => acc.update(step.resolving, [], (steps) => steps.concat([step])),\n      ImmutableMap<string, Step[]>(),\n    )\n    .toArray();\n\n  const approve = () =>\n    k8sPatch(InstallPlanModel, obj, [{ op: 'replace', path: '/spec/approved', value: true }])\n      .then(() => setNeedsApproval(false))\n      .catch((error) => errorModal({ error: error.toString() }));\n\n  const stepStatus = (status: Step['status']) => (\n    <>\n      {status === 'Present' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status === 'Created' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status}\n    </>\n  );\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return plan.length > 0 ? (\n    <>\n      {needsApproval && !hideApprovalBlock && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      {needsApproval && !hideApprovalBlock && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <InstallPlanReview installPlan={obj} />\n            <div className=\"pf-v5-c-form\">\n              <div className=\"pf-v5-c-form__actions\">\n                <Button variant=\"primary\" isDisabled={!needsApproval} onClick={() => approve()}>\n                  {needsApproval ? t('olm~Approve') : t('olm~Approved')}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  isDisabled={false}\n                  onClick={() =>\n                    history.push(\n                      `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(SubscriptionModel)}/${\n                        subscription.name\n                      }?showDelete=true`,\n                    )\n                  }\n                >\n                  {t('olm~Deny')}\n                </Button>\n              </div>\n            </div>\n          </HintBlock>\n        </div>\n      )}\n      {stepsByCSV.map((steps) => (\n        <div key={steps[0].resolving} className=\"co-m-pane__body\">\n          <SectionHeading text={steps[0].resolving} />\n          <div className=\"co-table-container\">\n            <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n              <thead className=\"pf-v5-c-table__thead\">\n                <tr className=\"pf-v5-c-table__tr\">\n                  <th className={componentsTableColumnClasses[0]}>{t('olm~Name')}</th>\n                  <th className={componentsTableColumnClasses[1]}>{t('olm~Kind')}</th>\n                  <th className={componentsTableColumnClasses[2]}>{t('olm~Status')}</th>\n                  <th className={componentsTableColumnClasses[3]}>{t('olm~API version')}</th>\n                </tr>\n              </thead>\n              <tbody className=\"pf-v5-c-table__tbody\">\n                {steps.map((step) => (\n                  <tr\n                    key={`${referenceForStepResource(step.resource)}-${step.resource.name}`}\n                    className=\"pf-v5-c-table__tr\"\n                  >\n                    <td className={componentsTableColumnClasses[0]}>\n                      {['Present', 'Created'].includes(step.status) ? (\n                        <ResourceLink\n                          kind={referenceForStepResource(step.resource)}\n                          namespace={obj.metadata.namespace}\n                          name={step.resource.name}\n                          title={step.resource.name}\n                        />\n                      ) : (\n                        <>\n                          <ResourceIcon kind={referenceForStepResource(step.resource)} />\n                          <Button\n                            type=\"button\"\n                            onClick={() => installPlanPreviewModal({ stepResource: step.resource })}\n                            variant=\"link\"\n                          >\n                            {step.resource.name}\n                          </Button>\n                        </>\n                      )}\n                    </td>\n                    <td className={componentsTableColumnClasses[1]}>{step.resource.kind}</td>\n                    <td className={componentsTableColumnClasses[2]}>{stepStatus(step.status)}</td>\n                    <td className={componentsTableColumnClasses[3]}>\n                      {apiVersionForReference(referenceForStepResource(step.resource))}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ))}\n    </>\n  ) : (\n    <div className=\"co-m-pane__body\">\n      <ConsoleEmptyState title={t('olm~No components resolved')}>\n        {t('olm~This InstallPlan has not been fully resolved yet.')}\n      </ConsoleEmptyState>\n    </div>\n  );\n};\n\nexport const InstallPlanDetailsPage: React.FC = (props) => {\n  const params = useParams();\n  return (\n    <DetailsPage\n      {...props}\n      namespace={params.ns}\n      kind={referenceForModel(InstallPlanModel)}\n      name={params.name}\n      pages={[\n        navFactory.details(InstallPlanDetails),\n        navFactory.editYaml(),\n        // t('olm~Components')\n        { href: 'components', nameKey: 'olm~Components', component: InstallPlanPreview },\n      ]}\n      menuActions={[\n        ...Kebab.getExtensionsActionsForKind(InstallPlanModel),\n        ...Kebab.factory.common,\n      ]}\n    />\n  );\n};\n\nexport type InstallPlansListProps = {};\n\nexport type InstallPlansPageProps = {\n  namespace?: string;\n};\n\nexport type InstallPlanDetailsProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanPreviewProps = {\n  obj: InstallPlanKind;\n  hideApprovalBlock?: boolean;\n};\n\nexport type InstallPlanPreviewState = {\n  needsApproval: boolean;\n  error?: string;\n};\n\nexport type NeedInstallPlanPermissionsProps = {\n  installPlan: InstallPlanKind;\n  user?: UserInfo;\n};\n\nInstallPlansPage.displayName = 'InstallPlansPage';\n","import * as React from 'react';\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  Popover,\n  CardTitle,\n} from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons/dist/esm/icons/add-circle-o-icon';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { sortable, wrappable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useParams, useLocation, Link } from 'react-router-dom-v5-compat';\nimport {\n  WatchK8sResource,\n  ResourceStatus,\n  StatusIconAndText,\n  useAccessReviewAllowed,\n  useAccessReview,\n} from '@console/dynamic-plugin-sdk';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { Conditions, ConditionTypes } from '@console/internal/components/conditions';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport {\n  DetailsPage,\n  Table,\n  TableData,\n  MultiListPage,\n  RowFunctionArgs,\n  Flatten,\n} from '@console/internal/components/factory';\nimport {\n  AsyncComponent,\n  DOC_URL_OPERATORFRAMEWORK_SDK,\n  documentationURLs,\n  ExternalLink,\n  FirehoseResult,\n  getDocumentationURL,\n  isManaged,\n  Kebab,\n  KebabAction,\n  KebabOption,\n  ConsoleEmptyState,\n  navFactory,\n  Page,\n  RequireCreatePermission,\n  ResourceKebab,\n  ResourceLink,\n  resourceObjPath,\n  resourcePathFromModel,\n  ResourceSummary,\n  ScrollToTopOnMount,\n  SectionHeading,\n  StatusBox,\n  Timestamp,\n} from '@console/internal/components/utils';\nimport { getBreadcrumbPath } from '@console/internal/components/utils/breadcrumbs';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport {\n  referenceForModel,\n  referenceFor,\n  k8sKill,\n  k8sPatch,\n  k8sGet,\n  K8sResourceCommon,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport { ALL_NAMESPACES_KEY, Status, getNamespace } from '@console/shared';\nimport { withFallback } from '@console/shared/src/components/error';\nimport { consolePluginModal } from '@console/shared/src/components/modals';\nimport { RedExclamationCircleIcon } from '@console/shared/src/components/status/icons';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '@console/shared/src/constants';\nimport { useActiveNamespace } from '@console/shared/src/hooks/redux-selectors';\nimport { useK8sModel } from '@console/shared/src/hooks/useK8sModel';\nimport { isPluginEnabled } from '@console/shared/src/utils';\nimport { GLOBAL_OPERATOR_NAMESPACES, GLOBAL_COPIED_CSV_NAMESPACE } from '../const';\nimport {\n  ClusterServiceVersionModel,\n  SubscriptionModel,\n  PackageManifestModel,\n  CatalogSourceModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n} from '../models';\nimport { subscriptionForCSV, getSubscriptionStatus } from '../status/csv-status';\nimport {\n  APIServiceDefinition,\n  CatalogSourceKind,\n  ClusterServiceVersionKind,\n  ClusterServiceVersionPhase,\n  CRDDescription,\n  CSVConditionReason,\n  SubscriptionKind,\n} from '../types';\nimport { isCatalogSourceTrusted, upgradeRequiresApproval } from '../utils';\nimport { isCopiedCSV, isStandaloneCSV } from '../utils/clusterserviceversions';\nimport { useClusterServiceVersion } from '../utils/useClusterServiceVersion';\nimport { useClusterServiceVersionPath } from '../utils/useClusterServiceVersionPath';\nimport { ClusterServiceVersionLogo } from './cluster-service-version-logo';\nimport {\n  DeprecatedOperatorWarningBadge,\n  DeprecatedOperatorWarningAlert,\n  findDeprecatedOperator,\n} from './deprecated-operator-warnings/deprecated-operator-warnings';\nimport { createUninstallOperatorModal } from './modals/uninstall-operator-modal';\nimport { ProvidedAPIsPage, ProvidedAPIPage, ProvidedAPIPageProps } from './operand';\nimport { operatorGroupFor, operatorNamespaceFor, targetNamespacesFor } from './operator-group';\nimport { getClusterServiceVersionPlugins } from './operator-hub/operator-hub-utils';\nimport { CreateInitializationResourceButton } from './operator-install-page';\nimport {\n  SourceMissingStatus,\n  SubscriptionDetails,\n  SubscriptionDetailsProps,\n  UpgradeApprovalLink,\n  catalogSourceForSubscription,\n} from './subscription';\nimport { referenceForProvidedAPI, providedAPIsForCSV } from './index';\n\nconst isSubscription = (obj) => referenceFor(obj) === referenceForModel(SubscriptionModel);\nconst isCSV = (obj): obj is ClusterServiceVersionKind =>\n  referenceFor(obj) === referenceForModel(ClusterServiceVersionModel);\nconst isPackageServer = (obj) =>\n  obj.metadata.name === 'packageserver' &&\n  obj.metadata.namespace === 'openshift-operator-lifecycle-manager';\n\nconst nameColumnClass = '';\nconst namespaceColumnClass = '';\nconst managedNamespacesColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-sm');\nconst statusColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-lg');\nconst lastUpdatedColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-2xl');\nconst providedAPIsColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-xl');\n\nconst editSubscription = (sub: SubscriptionKind): KebabOption =>\n  !_.isNil(sub)\n    ? {\n        // t('olm~Edit Subscription')\n        labelKey: 'olm~Edit Subscription',\n        href: `${resourcePathFromModel(\n          SubscriptionModel,\n          sub.metadata.name,\n          sub.metadata.namespace,\n        )}/yaml`,\n      }\n    : null;\n\nconst uninstall = (sub: SubscriptionKind, csv?: ClusterServiceVersionKind): KebabOption =>\n  !_.isNil(sub)\n    ? {\n        // t('olm~Uninstall Operator')\n        labelKey: 'olm~Uninstall Operator',\n        callback: () =>\n          createUninstallOperatorModal({\n            k8sKill,\n            k8sGet,\n            k8sPatch,\n            subscription: sub,\n            csv,\n            blocking: true,\n          }),\n        accessReview: {\n          group: SubscriptionModel.apiGroup,\n          resource: SubscriptionModel.plural,\n          name: sub.metadata.name,\n          namespace: sub.metadata.namespace,\n          verb: 'delete',\n        },\n      }\n    : null;\n\nconst menuActionsForCSV = (\n  csv: ClusterServiceVersionKind,\n  subscription: SubscriptionKind,\n): KebabAction[] => {\n  return _.isEmpty(subscription)\n    ? [Kebab.factory.Delete]\n    : [() => editSubscription(subscription), () => uninstall(subscription, csv)];\n};\n\nconst SubscriptionStatus: React.FC<{ muted?: boolean; subscription: SubscriptionKind }> = ({\n  muted = false,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  if (!subscription) {\n    return null;\n  }\n\n  if (upgradeRequiresApproval(subscription)) {\n    return <UpgradeApprovalLink subscription={subscription} />;\n  }\n\n  const subscriptionStatus = getSubscriptionStatus(subscription);\n  return (\n    <span className={muted ? 'text-muted' : 'co-icon-and-text'}>\n      {muted ? (\n        subscriptionStatus.title\n      ) : (\n        <Status status={subscriptionStatus.status || t('olm~Unknown')} />\n      )}\n    </span>\n  );\n};\n\nconst ClusterServiceVersionStatus: React.FC<ClusterServiceVersionStatusProps> = ({\n  obj,\n  subscription,\n}) => {\n  const status = obj?.status?.phase;\n  if (obj.metadata.deletionTimestamp) {\n    return (\n      <span className=\"co-icon-and-text\">\n        <Status status={ClusterServiceVersionPhase.CSVPhaseDeleting} />\n      </span>\n    );\n  }\n  return status ? (\n    <>\n      <span className=\"co-icon-and-text\">\n        <Status status={status} />\n      </span>\n      <SubscriptionStatus muted subscription={subscription} />\n    </>\n  ) : null;\n};\n\nconst ManagedNamespaces: React.FC<ManagedNamespacesProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const managedNamespaces = targetNamespacesFor(obj)?.split(',') || [];\n  if (isCopiedCSV(obj)) {\n    return (\n      <>\n        <ResourceLink\n          kind=\"Namespace\"\n          title={obj.metadata.namespace}\n          name={obj.metadata.namespace}\n        />\n        <span className=\"text-muted\">{obj.status.message}</span>\n      </>\n    );\n  }\n\n  switch (managedNamespaces.length) {\n    case 0:\n      return t('olm~All Namespaces');\n    case 1:\n      return managedNamespaces[0] ? (\n        <ResourceLink kind=\"Namespace\" title={managedNamespaces[0]} name={managedNamespaces[0]} />\n      ) : (\n        t('olm~All Namespaces')\n      );\n    default:\n      return (\n        <Popover\n          headerContent={t('olm~Managed Namespaces')}\n          bodyContent={managedNamespaces.map((namespace) => (\n            <ResourceLink kind=\"Namespace\" title={namespace} name={namespace} />\n          ))}\n        >\n          <Button variant=\"link\" isInline>\n            {t('olm~{{count}} Namespaces', { count: managedNamespaces.length })}\n          </Button>\n        </Popover>\n      );\n  }\n};\n\nconst ConsolePlugins: React.FC<ConsolePluginsProps> = ({ csvPlugins, trusted }) => {\n  const console: WatchK8sResource = {\n    kind: referenceForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  };\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>(console);\n  const { t } = useTranslation();\n  const [canPatchConsoleOperatorConfig] = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const csvPluginsCount = csvPlugins.length;\n\n  return (\n    <>\n      {consoleOperatorConfig && canPatchConsoleOperatorConfig && (\n        <dl className=\"co-clusterserviceversion-details__field\">\n          <dt>{t('olm~Console plugin', { count: csvPluginsCount })}</dt>\n          {csvPlugins.map((pluginName) => (\n            <dd key={pluginName} className=\"co-clusterserviceversion-details__field-description\">\n              {csvPluginsCount > 1 && (\n                <strong className=\"text-muted\">{t('olm~{{plugin}}:', { pluginName })} </strong>\n              )}\n              <Button\n                data-test=\"edit-console-plugin\"\n                type=\"button\"\n                isInline\n                onClick={() =>\n                  consolePluginModal({\n                    consoleOperatorConfig,\n                    csvPluginsCount,\n                    pluginName,\n                    trusted,\n                  })\n                }\n                variant=\"link\"\n              >\n                <>\n                  {isPluginEnabled(consoleOperatorConfig, pluginName)\n                    ? t('olm~Enabled')\n                    : t('olm~Disabled')}{' '}\n                  <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                </>\n              </Button>\n            </dd>\n          ))}\n        </dl>\n      )}\n    </>\n  );\n};\n\nconst ConsolePluginStatus: React.FC<ConsolePluginStatusProps> = ({ csv, csvPlugins }) => {\n  const console: WatchK8sResource = {\n    kind: referenceForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  };\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>(console);\n  const { t } = useTranslation();\n  const [canPatchConsoleOperatorConfig] = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const aPluginIsDisabled =\n    !consoleOperatorConfig?.spec?.plugins?.length ||\n    csvPlugins.some((plugin) => !isPluginEnabled(consoleOperatorConfig, plugin));\n\n  return (\n    consoleOperatorConfig &&\n    canPatchConsoleOperatorConfig &&\n    aPluginIsDisabled && (\n      <Popover\n        headerContent={<div>{t('olm~Console plugin available')}</div>}\n        bodyContent={\n          <div>\n            <p>\n              {t(\n                'olm~To let this operator provide a custom interface and run its own code in your console, enable its console plugin in the operator details.',\n              )}\n            </p>\n            <Link to={resourceObjPath(csv, referenceFor(csv))}>\n              {t('olm~View operator details')}\n            </Link>\n          </div>\n        }\n      >\n        <Button variant=\"link\" isInline>\n          {t('olm~Plugin available')}\n        </Button>\n      </Popover>\n    )\n  );\n};\n\nexport const ClusterServiceVersionTableRow = withFallback<ClusterServiceVersionTableRowProps>(\n  ({ activeNamespace, obj, subscription, catalogSourceMissing }) => {\n    const { displayName, provider, version } = obj.spec ?? {};\n    const { t } = useTranslation();\n    const olmOperatorNamespace = operatorNamespaceFor(obj) ?? '';\n    const [icon] = obj.spec.icon ?? [];\n    const route = useClusterServiceVersionPath(obj);\n    const providedAPIs = providedAPIsForCSV(obj);\n    const csvPlugins = getClusterServiceVersionPlugins(obj?.metadata?.annotations);\n    const { deprecatedPackage } = findDeprecatedOperator(subscription);\n\n    return (\n      <>\n        {/* Name */}\n        <TableData className={nameColumnClass}>\n          <Link\n            to={route}\n            className=\"co-clusterserviceversion-link\"\n            data-test-operator-row={displayName}\n          >\n            <ClusterServiceVersionLogo\n              icon={icon}\n              displayName={displayName}\n              version={version}\n              provider={provider}\n            />\n          </Link>\n        </TableData>\n\n        {/* Operator Namespace */}\n        {activeNamespace === ALL_NAMESPACES_KEY ? (\n          <TableData className={namespaceColumnClass}>\n            <ResourceLink\n              kind=\"Namespace\"\n              title={olmOperatorNamespace}\n              name={olmOperatorNamespace}\n            />\n          </TableData>\n        ) : null}\n\n        {/* Managed Namespaces */}\n        <TableData className={managedNamespacesColumnClass}>\n          <ManagedNamespaces obj={obj} />\n        </TableData>\n\n        {/* Status */}\n        <TableData className={statusColumnClass}>\n          <div className=\"co-clusterserviceversion-row__status\">\n            {catalogSourceMissing ? (\n              <SourceMissingStatus />\n            ) : (\n              <ClusterServiceVersionStatus obj={obj} subscription={subscription} />\n            )}\n          </div>\n          {csvPlugins.length > 0 && <ConsolePluginStatus csv={obj} csvPlugins={csvPlugins} />}\n          {deprecatedPackage.deprecation && (\n            <DeprecatedOperatorWarningBadge\n              className=\"pf-v5-u-mt-xs\"\n              deprecation={deprecatedPackage.deprecation}\n            />\n          )}\n        </TableData>\n\n        {/* Last Updated */}\n        <TableData className={lastUpdatedColumnClass}>\n          {obj.status == null ? '-' : <Timestamp timestamp={obj.status.lastUpdateTime} />}\n        </TableData>\n\n        {/* Provided APIs */}\n        <TableData className={providedAPIsColumnClass}>\n          {!_.isEmpty(providedAPIs)\n            ? _.take(providedAPIs, 4).map((desc) => (\n                <div key={referenceForProvidedAPI(desc)}>\n                  <Link to={`${route}/${referenceForProvidedAPI(desc)}`} title={desc.name}>\n                    {desc.displayName || desc.kind}\n                  </Link>\n                </div>\n              ))\n            : '-'}\n          {providedAPIs.length > 4 && (\n            <Link\n              to={route}\n              title={t('olm~View {{numAPIs}} more...', { numAPIs: providedAPIs.length - 4 })}\n            >\n              {t('olm~View {{numAPIs}} more...', { numAPIs: providedAPIs.length - 4 })}\n            </Link>\n          )}\n        </TableData>\n\n        {/* Kebab */}\n        <TableData className={Kebab.columnClass}>\n          <ResourceKebab\n            resource={obj}\n            kind={referenceFor(obj)}\n            actions={menuActionsForCSV(obj, subscription)}\n          />\n        </TableData>\n      </>\n    );\n  },\n);\n\nexport const SubscriptionTableRow: React.FC<SubscriptionTableRowProps> = ({\n  activeNamespace,\n  catalogSourceMissing,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const csvName = obj?.spec?.name;\n  const menuActions = [Kebab.factory.Edit, () => uninstall(obj)];\n  const namespace = getNamespace(obj);\n  const route = resourceObjPath(obj, referenceForModel(SubscriptionModel));\n\n  return (\n    <>\n      {/* Name */}\n      <TableData className={nameColumnClass}>\n        <Link to={route}>\n          <ClusterServiceVersionLogo\n            icon={null}\n            displayName={csvName}\n            version={null}\n            provider={null}\n          />\n        </Link>\n      </TableData>\n\n      {/* Operator Namespace */}\n      {activeNamespace === ALL_NAMESPACES_KEY ? (\n        <TableData className={namespaceColumnClass}>\n          <ResourceLink kind=\"Namespace\" title={namespace} name={namespace} />\n        </TableData>\n      ) : null}\n\n      {/* Managed Namespaces */}\n      <TableData className={managedNamespacesColumnClass}>\n        <span className=\"text-muted\">{t('olm~None')}</span>\n      </TableData>\n\n      {/* Status */}\n      <TableData className={statusColumnClass}>\n        {catalogSourceMissing ? <SourceMissingStatus /> : <SubscriptionStatus subscription={obj} />}\n      </TableData>\n\n      {/* Last Updated */}\n      <TableData className={lastUpdatedColumnClass}>\n        {obj.status == null ? '-' : <Timestamp timestamp={obj.status.lastUpdated} />}\n      </TableData>\n\n      {/* Provided APIs */}\n      <TableData className={providedAPIsColumnClass}>\n        <span className=\"text-muted\">{t('olm~None')}</span>\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={Kebab.columnClass}>\n        <ResourceKebab resource={obj} kind={referenceFor(obj)} actions={menuActions} />\n      </TableData>\n    </>\n  );\n};\n\nconst InstalledOperatorTableRow: React.FC<InstalledOperatorTableRowProps> = ({\n  obj,\n  customData,\n}) => {\n  const { catalogSources, subscriptions, activeNamespace } = customData;\n  const subscription = isCSV(obj)\n    ? subscriptionForCSV(subscriptions, obj as ClusterServiceVersionKind)\n    : (obj as SubscriptionKind);\n  // Only warn about missing catalog sources if the user was able to list them\n  // but exclude PackageServer as it does not have a subscription.\n  const catalogSourceMissing =\n    !_.isEmpty(catalogSources) &&\n    !catalogSourceForSubscription(catalogSources, subscription) &&\n    !isPackageServer(obj);\n\n  return isCSV(obj) ? (\n    <ClusterServiceVersionTableRow\n      activeNamespace={activeNamespace}\n      catalogSourceMissing={catalogSourceMissing}\n      obj={obj as ClusterServiceVersionKind}\n      subscription={subscription}\n    />\n  ) : (\n    <SubscriptionTableRow\n      activeNamespace={activeNamespace}\n      catalogSourceMissing={catalogSourceMissing}\n      obj={subscription as SubscriptionKind}\n    />\n  );\n};\n\nconst CSVListEmptyMsg = () => {\n  const { t } = useTranslation();\n  return <ConsoleEmptyState title={t('olm~No Operators found')} />;\n};\n\nconst CSVListNoDataEmptyMsg = () => {\n  const { t } = useTranslation();\n  const project = useActiveNamespace();\n  const noOperatorsInSingleNamespaceMessage = t(\n    'olm~No Operators are available for project {{project}}.',\n    { project },\n  );\n  const noOperatorsInAllNamespacesMessage = t('olm~No Operators are available.');\n  const detail = (\n    <>\n      <div>\n        {project === ALL_NAMESPACES_KEY\n          ? noOperatorsInAllNamespacesMessage\n          : noOperatorsInSingleNamespaceMessage}\n      </div>\n      <div>\n        <Trans ns=\"olm\">\n          Discover and install Operators from the <a href=\"/operatorhub\">OperatorHub</a>.\n        </Trans>\n      </div>\n    </>\n  );\n  return <ConsoleEmptyState title={t('olm~No Operators found')}>{detail}</ConsoleEmptyState>;\n};\n\nexport const ClusterServiceVersionList: React.FC<ClusterServiceVersionListProps> = ({\n  subscriptions,\n  catalogSources,\n  data,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const activeNamespace = useActiveNamespace();\n  const nameHeader: Header = {\n    title: t('olm~Name'),\n    sortField: 'metadata.name',\n    transforms: [sortable],\n    props: { className: nameColumnClass },\n  };\n\n  const namespaceHeader: Header = {\n    title: t('olm~Namespace'),\n    sortFunc: 'getOperatorNamespace',\n    transforms: [sortable],\n    props: { className: namespaceColumnClass },\n  };\n\n  const managedNamespacesHeader: Header = {\n    title: t('olm~Managed Namespaces'),\n    sortFunc: 'formatTargetNamespaces',\n    transforms: [sortable, wrappable],\n    props: { className: managedNamespacesColumnClass },\n  };\n\n  const statusHeader: Header = {\n    title: t('olm~Status'),\n    props: { className: statusColumnClass },\n  };\n\n  const lastUpdatedHeader: Header = {\n    title: t('olm~Last updated'),\n    props: { className: lastUpdatedColumnClass },\n  };\n\n  const providedAPIsHeader: Header = {\n    title: t('olm~Provided APIs'),\n    props: { className: providedAPIsColumnClass },\n  };\n\n  const kebabHeader: Header = {\n    title: '',\n    props: { className: Kebab.columnClass },\n  };\n\n  const AllProjectsTableHeader = (): Header[] => [\n    nameHeader,\n    namespaceHeader,\n    managedNamespacesHeader,\n    statusHeader,\n    lastUpdatedHeader,\n    providedAPIsHeader,\n    kebabHeader,\n  ];\n\n  const SingleProjectTableHeader = (): Header[] => [\n    nameHeader,\n    managedNamespacesHeader,\n    statusHeader,\n    lastUpdatedHeader,\n    providedAPIsHeader,\n    kebabHeader,\n  ];\n\n  const filterOperators = (\n    operators: (ClusterServiceVersionKind | SubscriptionKind)[],\n    allNamespaceActive: boolean,\n  ): (ClusterServiceVersionKind | SubscriptionKind)[] => {\n    return operators.filter((operator) => {\n      if (isSubscription(operator)) {\n        return true;\n      }\n      if (allNamespaceActive) {\n        return !isCopiedCSV(operator) && isStandaloneCSV(operator);\n      }\n\n      if (\n        window.SERVER_FLAGS.copiedCSVsDisabled &&\n        operator.metadata.namespace === GLOBAL_COPIED_CSV_NAMESPACE &&\n        activeNamespace !== GLOBAL_COPIED_CSV_NAMESPACE\n      ) {\n        return isCopiedCSV(operator) && isStandaloneCSV(operator);\n      }\n      return isStandaloneCSV(operator);\n    });\n  };\n\n  const formatTargetNamespaces = (obj: ClusterServiceVersionKind | SubscriptionKind): string => {\n    if (obj.kind === 'Subscription') {\n      return t('olm~None');\n    }\n\n    if (isCopiedCSV(obj)) {\n      return obj.metadata.namespace;\n    }\n\n    const targetNamespaces = targetNamespacesFor(obj)?.split(',') ?? [];\n    switch (targetNamespaces.length) {\n      case 0:\n        return t('olm~All Namespaces');\n      case 1:\n        return targetNamespaces[0];\n      default:\n        return t('olm~{{count}} Namespaces', { count: targetNamespaces.length });\n    }\n  };\n\n  const getOperatorNamespace = (\n    obj: ClusterServiceVersionKind | SubscriptionKind,\n  ): string | null => {\n    const olmOperatorNamespace = operatorNamespaceFor(obj);\n    return olmOperatorNamespace ?? getNamespace(obj);\n  };\n  const allNamespaceActive = activeNamespace === ALL_NAMESPACES_KEY;\n\n  const customData = React.useMemo(\n    () => ({\n      catalogoperators: catalogSources?.data ?? [],\n      subscriptions: subscriptions?.data ?? [],\n      activeNamespace,\n    }),\n    [activeNamespace, catalogSources, subscriptions],\n  );\n\n  return (\n    <div className=\"co-installed-operators\">\n      <Table\n        data={filterOperators(data, allNamespaceActive)}\n        {...rest}\n        aria-label={t('olm~Installed Operators')}\n        Header={allNamespaceActive ? AllProjectsTableHeader : SingleProjectTableHeader}\n        Row={InstalledOperatorTableRow}\n        EmptyMsg={CSVListEmptyMsg}\n        NoDataEmptyMsg={CSVListNoDataEmptyMsg}\n        virtualize\n        customData={customData}\n        customSorts={{\n          formatTargetNamespaces,\n          getOperatorNamespace,\n        }}\n      />\n    </div>\n  );\n};\n\nexport const ClusterServiceVersionsPage: React.FC<ClusterServiceVersionsPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [canListAllSubscriptions] = useAccessReview({\n    group: SubscriptionModel.apiGroup,\n    resource: SubscriptionModel.plural,\n    verb: 'list',\n  });\n  const title = t('olm~Installed Operators');\n  const olmURL = getDocumentationURL(documentationURLs.operators);\n  const helpText = (\n    <>\n      {t(\n        'olm~Installed Operators are represented by ClusterServiceVersions within this Namespace.',\n      )}\n      {!isManaged() && (\n        <Trans ns=\"olm\">\n          {' '}\n          For more information, see the{' '}\n          <ExternalLink href={olmURL}>Understanding Operators documentation</ExternalLink>. Or\n          create an Operator and ClusterServiceVersion using the{' '}\n          <ExternalLink href={DOC_URL_OPERATORFRAMEWORK_SDK}>Operator SDK</ExternalLink>.\n        </Trans>\n      )}\n    </>\n  );\n\n  const flatten: Flatten<{\n    globalClusterServiceVersions: ClusterServiceVersionKind[];\n    clusterServiceVersions: ClusterServiceVersionKind[];\n    subscriptions: SubscriptionKind[];\n  }> = ({ globalClusterServiceVersions, clusterServiceVersions, subscriptions }) =>\n    [\n      ...(globalClusterServiceVersions?.data ?? []),\n      ...(clusterServiceVersions?.data ?? []),\n      ...(subscriptions?.data ?? []).filter(\n        (sub) =>\n          ['', sub.metadata.namespace].includes(props.namespace || '') &&\n          _.isNil(_.get(sub, 'status.installedCSV')),\n      ),\n    ].filter(\n      (obj, _i, all) =>\n        isCSV(obj) ||\n        _.isUndefined(\n          all.find(({ metadata }) =>\n            [obj?.status?.currentCSV, obj?.spec?.startingCSV].includes(metadata?.name),\n          ),\n        ),\n    );\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <MultiListPage\n        {...props}\n        resources={[\n          ...(!GLOBAL_OPERATOR_NAMESPACES.includes(props.namespace) &&\n          window.SERVER_FLAGS.copiedCSVsDisabled\n            ? [\n                {\n                  kind: referenceForModel(ClusterServiceVersionModel),\n                  namespace: GLOBAL_COPIED_CSV_NAMESPACE,\n                  prop: 'globalClusterServiceVersions',\n                },\n              ]\n            : []),\n          {\n            kind: referenceForModel(ClusterServiceVersionModel),\n            namespace: props.namespace,\n            prop: 'clusterServiceVersions',\n          },\n          {\n            kind: referenceForModel(SubscriptionModel),\n            prop: 'subscriptions',\n            namespace: canListAllSubscriptions ? undefined : props.namespace,\n            optional: true,\n          },\n          {\n            kind: referenceForModel(CatalogSourceModel),\n            prop: 'catalogSources',\n            optional: true,\n          },\n        ]}\n        title={title}\n        flatten={flatten}\n        namespace={props.namespace}\n        ListComponent={ClusterServiceVersionList}\n        helpText={helpText}\n        textFilter=\"cluster-service-version\"\n      />\n    </>\n  );\n};\n\nexport const MarkdownView = (props: {\n  content: string;\n  styles?: string;\n  exactHeight?: boolean;\n  truncateContent?: boolean;\n}) => {\n  return (\n    <AsyncComponent\n      loader={() =>\n        import('@console/internal/components/markdown-view').then((c) => c.SyncMarkdownView)\n      }\n      {...props}\n    />\n  );\n};\n\nexport const CRDCard: React.FC<CRDCardProps> = ({ csv, crd, required, ...rest }) => {\n  const { t } = useTranslation();\n  const reference = referenceForProvidedAPI(crd);\n  const [model] = useK8sModel(reference);\n  const canCreate = rest.canCreate ?? model?.verbs?.includes?.('create');\n  const createRoute = React.useMemo(\n    () =>\n      csv\n        ? `/k8s/ns/${csv.metadata.namespace}/${ClusterServiceVersionModel.plural}/${csv.metadata.name}/${reference}/~new`\n        : null,\n    [csv, reference],\n  );\n\n  return (\n    <Card>\n      <CardTitle>\n        <span className=\"co-resource-item\">\n          <ResourceLink\n            kind={referenceForProvidedAPI(crd)}\n            title={crd.name}\n            linkTo={false}\n            displayName={crd.displayName || crd.kind}\n          />\n          {required && (\n            <ResourceStatus badgeAlt>\n              <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Required')} />\n            </ResourceStatus>\n          )}\n        </span>\n      </CardTitle>\n      <CardBody>\n        <MarkdownView content={crd.description} truncateContent />\n      </CardBody>\n      {canCreate && createRoute && (\n        <RequireCreatePermission model={model} namespace={csv.metadata.namespace}>\n          <CardFooter>\n            <Link to={createRoute}>\n              <AddCircleOIcon className=\"co-icon-space-r\" />\n              {t('olm~Create instance')}\n            </Link>\n          </CardFooter>\n        </RequireCreatePermission>\n      )}\n    </Card>\n  );\n};\n\nexport const CRDCardRow = ({ csv, providedAPIs }: CRDCardRowProps) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-crd-card-row\">\n      {providedAPIs.length ? (\n        providedAPIs.map((crd) => (\n          <CRDCard key={referenceForProvidedAPI(crd)} crd={crd} csv={csv} />\n        ))\n      ) : (\n        <span className=\"text-muted\">\n          {t('olm~No Kubernetes APIs are being provided by this Operator.')}\n        </span>\n      )}\n    </div>\n  );\n};\n\nconst InitializationResourceAlert: React.FC<InitializationResourceAlertProps> = (props) => {\n  const { t } = useTranslation();\n  const { initializationResource, csv } = props;\n\n  const initializationResourceKind = initializationResource?.kind;\n  const initializationResourceReference = referenceFor(initializationResource);\n  const [model] = useK8sModel(initializationResourceReference);\n\n  // Check if the CR is already present - only watches for the model in namespace\n  const [customResource, customResourceLoaded] = useK8sWatchResource<K8sResourceCommon[]>({\n    kind: initializationResourceReference,\n    namespaced: true,\n    isList: true,\n  });\n\n  const canCreateCustomResource = useAccessReviewAllowed({\n    group: model?.apiGroup,\n    resource: model?.plural,\n    namespace: model?.namespaced\n      ? initializationResource?.metadata.namespace || csv.metadata.namespace\n      : null,\n    verb: 'create',\n  });\n\n  if (customResourceLoaded && customResource.length === 0 && canCreateCustomResource) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert\"\n        variant=\"warning\"\n        title={t('olm~{{initializationResourceKind}} required', { initializationResourceKind })}\n      >\n        <p>\n          {t('olm~Create a {{initializationResourceKind}} instance to use this Operator.', {\n            initializationResourceKind,\n          })}\n        </p>\n        <CreateInitializationResourceButton\n          obj={props.csv}\n          initializationResource={initializationResource}\n        />\n      </Alert>\n    );\n  }\n  return null;\n};\n\nexport const ClusterServiceVersionDetails: React.FC<ClusterServiceVersionDetailsProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const { spec, metadata, status } = props.obj;\n  const { subscription } = props.customData;\n  const providedAPIs = providedAPIsForCSV(props.obj);\n  // TODO (jon) remove annotation destructuring and use helper functions\n  const {\n    'marketplace.openshift.io/support-workflow': marketplaceSupportWorkflow,\n    'operatorframework.io/initialization-resource': initializationResourceJSON,\n  } = metadata.annotations || {};\n\n  const initializationResource = React.useMemo(() => {\n    if (initializationResourceJSON) {\n      try {\n        return JSON.parse(initializationResourceJSON);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error while parseing CSV initialization resource JSON', error.message);\n      }\n    }\n    return null;\n  }, [initializationResourceJSON]);\n\n  const supportWorkflowUrl = React.useMemo(() => {\n    if (marketplaceSupportWorkflow) {\n      try {\n        const url = new URL(marketplaceSupportWorkflow);\n        url.searchParams.set('utm_source', 'openshift_console');\n        return url.toString();\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error while setting utm_source to support workflow URL', error.message);\n      }\n    }\n    return null;\n  }, [marketplaceSupportWorkflow]);\n\n  const csvPlugins = getClusterServiceVersionPlugins(metadata?.annotations);\n  const permissions = _.uniqBy(spec?.install?.spec?.permissions, 'serviceAccountName');\n  const { deprecatedPackage, deprecatedChannel, deprecatedVersion } = findDeprecatedOperator(\n    subscription,\n  );\n\n  return (\n    <>\n      <ScrollToTopOnMount />\n\n      <div className=\"co-m-pane__body\">\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-9\">\n              {status && status.phase === ClusterServiceVersionPhase.CSVPhaseFailed && (\n                <Alert\n                  isInline\n                  className=\"co-alert\"\n                  variant=\"danger\"\n                  title={t('olm~Operator failed')}\n                >\n                  {status.reason === CSVConditionReason.CSVReasonCopied ? (\n                    <>\n                      <Trans t={t} ns=\"olm\">\n                        This Operator was copied from another namespace. For the reason it failed,\n                        see{' '}\n                        <ResourceLink\n                          name={metadata.name}\n                          kind={referenceForModel(ClusterServiceVersionModel)}\n                          namespace={operatorNamespaceFor(props.obj)}\n                          hideIcon\n                          inline\n                        />\n                      </Trans>\n                    </>\n                  ) : (\n                    status.message\n                  )}\n                </Alert>\n              )}\n              {initializationResource && (\n                <InitializationResourceAlert\n                  initializationResource={initializationResource}\n                  csv={props.obj}\n                />\n              )}\n              {(deprecatedPackage.deprecation ||\n                deprecatedChannel.deprecation ||\n                deprecatedVersion.deprecation) && (\n                <DeprecatedOperatorWarningAlert\n                  deprecatedPackage={deprecatedPackage}\n                  deprecatedChannel={deprecatedChannel}\n                  deprecatedVersion={deprecatedVersion}\n                  dismissible\n                />\n              )}\n              <SectionHeading text={t('olm~Provided APIs')} />\n              <CRDCardRow csv={props.obj} providedAPIs={providedAPIs} />\n              <SectionHeading text={t('olm~Description')} />\n              <MarkdownView content={spec.description || t('olm~Not available')} />\n            </div>\n            <div className=\"col-sm-3\">\n              <dl className=\"co-clusterserviceversion-details__field\">\n                <dt>{t('olm~Provider')}</dt>\n                <dd>\n                  {spec.provider && spec.provider.name\n                    ? spec.provider.name\n                    : t('olm~Not available')}\n                </dd>\n                {supportWorkflowUrl && (\n                  <>\n                    <dt>{t('olm~Support')}</dt>\n                    <dd>\n                      <ExternalLink href={supportWorkflowUrl} text={t('olm~Get support')} />\n                    </dd>\n                  </>\n                )}\n                <dt>{t('olm~Created at')}</dt>\n                <dd>\n                  <Timestamp timestamp={metadata.creationTimestamp} />\n                </dd>\n              </dl>\n              {csvPlugins.length > 0 && subscription && (\n                <ConsolePlugins\n                  csvPlugins={csvPlugins}\n                  trusted={isCatalogSourceTrusted(subscription?.spec?.source)}\n                />\n              )}\n              <dl className=\"co-clusterserviceversion-details__field\">\n                <dt>{t('olm~Links')}</dt>\n                {spec.links && spec.links.length > 0 ? (\n                  spec.links.map((link) => (\n                    <dd key={link.url} style={{ display: 'flex', flexDirection: 'column' }}>\n                      {link.name}{' '}\n                      <ExternalLink\n                        href={link.url}\n                        text={link.url || '-'}\n                        additionalClassName=\"co-break-all\"\n                      />\n                    </dd>\n                  ))\n                ) : (\n                  <dd>{t('olm~Not available')}</dd>\n                )}\n              </dl>\n              <dl className=\"co-clusterserviceversion-details__field\">\n                <dt>{t('olm~Maintainers')}</dt>\n                {spec.maintainers && spec.maintainers.length > 0 ? (\n                  spec.maintainers.map((maintainer) => (\n                    <dd key={maintainer.email} style={{ display: 'flex', flexDirection: 'column' }}>\n                      {maintainer.name}{' '}\n                      <a href={`mailto:${maintainer.email}`} className=\"co-break-all\">\n                        {maintainer.email || '-'}\n                      </a>\n                    </dd>\n                  ))\n                ) : (\n                  <dd>{t('olm~Not available')}</dd>\n                )}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~ClusterServiceVersion details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={props.obj}>\n                <dt>\n                  <Popover\n                    headerContent={<div>{t('olm~Managed Namespaces')}</div>}\n                    bodyContent={\n                      <div>{t('olm~Operands in this Namespace are managed by the Operator.')}</div>\n                    }\n                    maxWidth=\"30rem\"\n                  >\n                    <Button variant=\"plain\" className=\"details-item__popover-button\">\n                      {t('olm~Managed Namespaces')}\n                    </Button>\n                  </Popover>\n                </dt>\n                <dd>\n                  <ManagedNamespaces obj={props.obj} />\n                </dd>\n              </ResourceSummary>\n            </div>\n            <div className=\"col-sm-6\">\n              <dt>{t('olm~Status')}</dt>\n              <dd>\n                <Status status={status ? status.phase : t('olm~Unknown')} />\n              </dd>\n              <dt>{t('olm~Status reason')}</dt>\n              <dd>{status ? status.message : t('olm~Unknown')}</dd>\n              {!_.isEmpty(spec.install.spec?.deployments) && (\n                <>\n                  <dt>{t('olm~Operator Deployments')}</dt>\n                  {spec.install.spec.deployments.map(({ name }) => (\n                    <dd key={name}>\n                      <ResourceLink\n                        name={name}\n                        kind=\"Deployment\"\n                        namespace={operatorNamespaceFor(props.obj)}\n                      />\n                    </dd>\n                  ))}\n                </>\n              )}\n              {!_.isEmpty(permissions) && (\n                <>\n                  <dt>{t('olm~Operator ServiceAccounts')}</dt>\n                  {permissions.map(({ serviceAccountName }) => (\n                    <dd key={serviceAccountName} data-service-account-name={serviceAccountName}>\n                      <ResourceLink\n                        name={serviceAccountName}\n                        kind=\"ServiceAccount\"\n                        namespace={operatorNamespaceFor(props.obj)}\n                      />\n                    </dd>\n                  ))}\n                </>\n              )}\n              <dt>{t('olm~OperatorGroup')}</dt>\n              <dd>\n                {operatorGroupFor(props.obj) ? (\n                  <ResourceLink\n                    name={operatorGroupFor(props.obj)}\n                    namespace={operatorNamespaceFor(props.obj)}\n                    kind={referenceForModel(OperatorGroupModel)}\n                  />\n                ) : (\n                  '-'\n                )}\n              </dd>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions\n          conditions={(status?.conditions ?? []).map((c) => ({\n            ...c,\n            type: c.phase,\n            status: 'True',\n          }))}\n          type={ConditionTypes.ClusterServiceVersion}\n        />\n      </div>\n    </>\n  );\n};\n\nexport const CSVSubscription: React.FC<CSVSubscriptionProps> = ({ obj, customData, ...rest }) => {\n  const { t } = useTranslation();\n  const { subscription, subscriptions, subscriptionsLoaded, subscriptionsLoadError } =\n    customData ?? {};\n  const EmptyMsg = () => (\n    <ConsoleEmptyState title={t('olm~No Operator Subscription')}>\n      {t('olm~This Operator will not receive updates.')}\n    </ConsoleEmptyState>\n  );\n\n  return (\n    <StatusBox\n      EmptyMsg={EmptyMsg}\n      loaded={subscriptionsLoaded}\n      loadError={subscriptionsLoadError}\n      data={subscription}\n    >\n      <SubscriptionDetails\n        {...rest}\n        obj={subscription}\n        clusterServiceVersions={[obj]}\n        subscriptions={subscriptions}\n      />\n    </StatusBox>\n  );\n};\n\nexport const ClusterServiceVersionDetailsPage: React.FC = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const location = useLocation();\n  const [csv, csvLoaded, csvLoadError] = useClusterServiceVersion(params.name, params.ns);\n  const namespace = operatorNamespaceFor(csv);\n  const [subscriptions, subscriptionsLoaded, subscriptionsLoadError] = useK8sWatchResource<\n    SubscriptionKind[]\n  >(\n    namespace\n      ? {\n          isList: true,\n          groupVersionKind: getGroupVersionKindForModel(SubscriptionModel),\n          namespace,\n          optional: true,\n        }\n      : null,\n  );\n  const [canListClusterScopeInstallPlans] = useAccessReview({\n    group: InstallPlanModel?.apiGroup,\n    resource: InstallPlanModel?.plural,\n    verb: 'list',\n  });\n\n  const subscription = React.useMemo(\n    () => (subscriptions ?? []).find((s) => s.status.installedCSV === csv?.metadata?.name),\n    [csv, subscriptions],\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const menuActions = React.useCallback(\n    !subscription\n      ? () => [Kebab.factory.Delete(ClusterServiceVersionModel, csv)]\n      : () => [editSubscription(subscription), uninstall(subscription, csv)],\n    [subscription],\n  );\n  const { deprecatedPackage } = findDeprecatedOperator(subscription);\n\n  const pagesFor = React.useCallback((obj: ClusterServiceVersionKind) => {\n    const providedAPIs = providedAPIsForCSV(obj);\n    return [\n      navFactory.details(ClusterServiceVersionDetails),\n      navFactory.editYaml(),\n      {\n        href: 'subscription',\n        // t('olm~Subscription')\n        nameKey: 'olm~Subscription',\n        component: CSVSubscription,\n      },\n      navFactory.events(ResourceEventStream),\n      ...(providedAPIs.length > 1\n        ? [\n            {\n              href: 'instances',\n              // t('olm~All instances')\n              nameKey: 'olm~All instances',\n              component: ProvidedAPIsPage,\n            },\n          ]\n        : []),\n      ...providedAPIs.map<Page<ProvidedAPIPageProps>>((api: CRDDescription) => ({\n        href: referenceForProvidedAPI(api),\n        name: ['Details', 'YAML', 'Subscription', 'Events'].includes(api.displayName)\n          ? `${api.displayName} Operand`\n          : api.displayName || api.kind,\n        component: ProvidedAPIPage,\n        pageData: {\n          csv: obj,\n          kind: referenceForProvidedAPI(api),\n        },\n      })),\n    ];\n  }, []);\n\n  return (\n    <DetailsPage\n      {...props}\n      obj={{ data: csv, loaded: csvLoaded, loadError: csvLoadError }}\n      customData={{ subscriptions, subscription, subscriptionsLoaded, subscriptionsLoadError }}\n      breadcrumbsFor={() => [\n        {\n          name: t('olm~Installed Operators'),\n          path: getBreadcrumbPath(params),\n        },\n        { name: t('olm~Operator details'), path: location.pathname },\n      ]}\n      resources={[\n        { kind: referenceForModel(PackageManifestModel), isList: true, prop: 'packageManifests' },\n        {\n          kind: referenceForModel(InstallPlanModel),\n          isList: true,\n          prop: 'installPlans',\n          ...(canListClusterScopeInstallPlans ? {} : { namespace }),\n        },\n      ]}\n      icon={({ obj }) => (\n        <ClusterServiceVersionLogo\n          displayName={obj?.spec?.displayName}\n          icon={obj?.spec?.icon?.[0]}\n          provider={obj?.spec?.provider}\n          version={obj?.spec?.version}\n          deprecation={deprecatedPackage.deprecation}\n        />\n      )}\n      namespace={params.ns}\n      kind={referenceForModel(ClusterServiceVersionModel)}\n      name={params.name}\n      pagesFor={pagesFor}\n      menuActions={menuActions}\n      createRedirect\n    />\n  );\n};\n\ntype ClusterServiceVersionStatusProps = {\n  obj: ClusterServiceVersionKind;\n  subscription: SubscriptionKind;\n};\n\nexport type ClusterServiceVersionsPageProps = {\n  kind: string;\n  namespace: string;\n  resourceDescriptions: CRDDescription[];\n};\n\nexport type ClusterServiceVersionListProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: ClusterServiceVersionKind[];\n  subscriptions: FirehoseResult<SubscriptionKind[]>;\n  catalogSources: FirehoseResult<CatalogSourceKind[]>;\n  activeNamespace?: string;\n};\n\nexport type CRDCardProps = {\n  canCreate?: boolean;\n  crd: CRDDescription | APIServiceDefinition;\n  csv?: ClusterServiceVersionKind;\n  required?: boolean;\n};\n\nexport type CRDCardRowProps = {\n  providedAPIs: (CRDDescription | APIServiceDefinition)[];\n  csv: ClusterServiceVersionKind;\n};\n\nexport type CRDCardRowState = {\n  expand: boolean;\n};\n\nexport type ClusterServiceVersionDetailsProps = {\n  obj: ClusterServiceVersionKind;\n  customData: {\n    subscriptions: SubscriptionKind[];\n    subscription: SubscriptionKind;\n    subscriptionsLoaded: boolean;\n    subscriptionsLoadError?: any;\n  };\n};\n\ntype ConsolePluginsProps = {\n  csvPlugins: string[];\n  trusted: boolean;\n};\n\ntype ConsolePluginStatusProps = {\n  csv: ClusterServiceVersionKind;\n  csvPlugins: string[];\n};\n\ntype InstalledOperatorTableRowProps = RowFunctionArgs<\n  ClusterServiceVersionKind | SubscriptionKind,\n  {\n    activeNamespace: string;\n    catalogSources: CatalogSourceKind[];\n    subscriptions: SubscriptionKind[];\n  }\n>;\n\nexport type ClusterServiceVersionTableRowProps = {\n  obj: ClusterServiceVersionKind;\n  catalogSourceMissing: boolean;\n  subscription: SubscriptionKind;\n  activeNamespace?: string;\n};\n\ntype SubscriptionTableRowProps = {\n  obj: SubscriptionKind;\n  catalogSourceMissing: boolean;\n  activeNamespace?: string;\n};\n\ntype ManagedNamespacesProps = {\n  obj: ClusterServiceVersionKind;\n};\n\nexport type CSVSubscriptionProps = Omit<\n  SubscriptionDetailsProps,\n  'obj' | 'clusterServiceVersions' | 'subscriptions'\n> &\n  ClusterServiceVersionDetailsProps;\n\ntype InitializationResourceAlertProps = {\n  csv: ClusterServiceVersionKind;\n  initializationResource: K8sResourceCommon;\n};\n\ntype Header = {\n  title: string;\n  sortField?: string;\n  sortFunc?: string;\n  transforms?: any;\n  props: { className: string };\n};\n\n// TODO(alecmerdler): Find Webpack loader/plugin to add `displayName` to React components automagically\nClusterServiceVersionList.displayName = 'ClusterServiceVersionList';\nClusterServiceVersionsPage.displayName = 'ClusterServiceVersionsPage';\nClusterServiceVersionTableRow.displayName = 'ClusterServiceVersionTableRow';\nCRDCard.displayName = 'CRDCard';\nClusterServiceVersionDetailsPage.displayName = 'ClusterServiceVersionsDetailsPage';\nClusterServiceVersionDetails.displayName = 'ClusterServiceVersionDetails';\nCSVSubscription.displayName = 'CSVSubscription';\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Alert, Button, Popover } from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom-v5-compat';\nimport { ResourceStatus, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  DetailsPage,\n  MultiListPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  KebabAction,\n  FieldLevelHelp,\n  Kebab,\n  LoadingInline,\n  ConsoleEmptyState,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  resourcePathFromModel,\n  ResourceSummary,\n  SectionHeading,\n} from '@console/internal/components/utils';\nimport { removeQueryArgument } from '@console/internal/components/utils/router';\nimport {\n  referenceForModel,\n  k8sGet,\n  k8sPatch,\n  k8sKill,\n  k8sUpdate,\n  K8sResourceCommon,\n  K8sKind,\n} from '@console/internal/module/k8s';\nimport {\n  BlueArrowCircleUpIcon,\n  BlueInfoCircleIcon,\n  getName,\n  getNamespace,\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  WarningStatus,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  CatalogSourceModel,\n  InstallPlanModel,\n  PackageManifestModel,\n  OperatorGroupModel,\n} from '../models';\nimport {\n  SubscriptionKind,\n  SubscriptionState,\n  PackageManifestKind,\n  InstallPlanApproval,\n  ClusterServiceVersionKind,\n  OperatorGroupKind,\n  InstallPlanKind,\n  InstallPlanPhase,\n  CatalogSourceKind,\n} from '../types';\nimport { upgradeRequiresApproval } from '../utils';\nimport {\n  DeprecatedOperatorWarningAlert,\n  DeprecatedOperatorWarningIcon,\n  findDeprecatedOperator,\n} from './deprecated-operator-warnings/deprecated-operator-warnings';\nimport { createInstallPlanApprovalModal } from './modals/installplan-approval-modal';\nimport { createSubscriptionChannelModal } from './modals/subscription-channel-modal';\nimport { createUninstallOperatorModal } from './modals/uninstall-operator-modal';\nimport { requireOperatorGroup } from './operator-group';\nimport { getManualSubscriptionsInNamespace, NamespaceIncludesManualApproval } from './index';\n\nexport const catalogSourceForSubscription = (\n  catalogSources: CatalogSourceKind[] = [],\n  subscription: SubscriptionKind,\n): CatalogSourceKind =>\n  catalogSources.find(\n    (source) =>\n      source?.metadata?.name === subscription?.spec?.source &&\n      source?.metadata?.namespace === subscription?.spec?.sourceNamespace,\n  );\n\nexport const installedCSVForSubscription = (\n  clusterServiceVersions: ClusterServiceVersionKind[] = [],\n  subscription: SubscriptionKind,\n): ClusterServiceVersionKind =>\n  clusterServiceVersions.find((csv) => csv?.metadata?.name === subscription?.status?.installedCSV);\n\nexport const packageForSubscription = (\n  packageManifests: PackageManifestKind[] = [],\n  subscription: SubscriptionKind,\n): PackageManifestKind =>\n  packageManifests.find(\n    (pkg) =>\n      pkg?.metadata?.name === subscription?.spec?.name &&\n      pkg?.status?.packageName === subscription?.spec?.name &&\n      pkg?.status?.catalogSource === subscription?.spec?.source &&\n      pkg?.status?.catalogSourceNamespace === subscription?.spec?.sourceNamespace,\n  );\n\nexport const installPlanForSubscription = (\n  installPlans: InstallPlanKind[] = [],\n  subscription: SubscriptionKind,\n): InstallPlanKind =>\n  installPlans.find((ip) => ip?.metadata?.name === subscription?.status?.installPlanRef?.name);\n\nexport const SourceMissingStatus: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <WarningStatus title={t('olm~Cannot update')} />\n      <span className=\"text-muted\">{t('olm~CatalogSource not found')}</span>\n    </>\n  );\n};\n\nexport const SourceUnhealthyStatus: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <WarningStatus title={t('olm~Cannot update')} />\n      <span className=\"text-muted\">{t('olm~CatalogSource unhealthy')}</span>\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-xl',\n  Kebab.columnClass,\n];\n\nexport const UpgradeApprovalLink: React.FC<{ subscription: SubscriptionKind }> = ({\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const to = resourcePathFromModel(\n    InstallPlanModel,\n    subscription.status.installPlanRef.name,\n    subscription.metadata.namespace,\n  );\n  return (\n    <span className=\"co-icon-and-text\">\n      <Link to={to}>\n        <BlueArrowCircleUpIcon /> {t('olm~Upgrade available')}\n      </Link>\n    </span>\n  );\n};\n\nexport const SubscriptionStatus: React.FC<{ subscription: SubscriptionKind }> = ({\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  switch (subscription.status?.state) {\n    case SubscriptionState.SubscriptionStateUpgradeAvailable:\n      return (\n        <span>\n          <YellowExclamationTriangleIcon /> {t('olm~Upgrade available')}\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateUpgradePending:\n      return upgradeRequiresApproval(subscription) && subscription.status.installPlanRef ? (\n        <UpgradeApprovalLink subscription={subscription} />\n      ) : (\n        <span>\n          <InProgressIcon className=\"text-primary\" /> {t('olm~Upgrading')}\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateAtLatest:\n      return (\n        <span>\n          <GreenCheckCircleIcon /> {t('olm~Up to date')}\n        </span>\n      );\n    default:\n      return (\n        <span className={_.isEmpty(subscription.status.state) ? 'text-muted' : ''}>\n          {subscription.status.state || t('olm~Unknown failure')}\n        </span>\n      );\n  }\n};\n\nconst menuActions: KebabAction[] = [\n  Kebab.factory.Edit,\n  (kind, obj) => ({\n    // t('olm~Remove Subscription')\n    labelKey: 'olm~Remove Subscription',\n    callback: () => createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj }),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'delete',\n    },\n  }),\n  (_kind, obj) => {\n    const installedCSV = _.get(obj, 'status.installedCSV');\n    return {\n      // t('olm~View ClusterServiceVersion...')\n      labelKey: 'olm~View ClusterServiceVersion...',\n      href: `/k8s/ns/${obj.metadata.namespace}/${ClusterServiceVersionModel.plural}/${installedCSV}`,\n      hidden: !installedCSV,\n    };\n  },\n];\n\nexport const SubscriptionTableRow: React.FC<RowFunctionArgs> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(SubscriptionModel)}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <SubscriptionStatus subscription={obj} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-truncate', 'co-select-to-copy')}>\n        {obj.spec.channel || 'default'}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {obj.spec.installPlanApproval || t('olm~Automatic')}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(SubscriptionModel)}\n          resource={obj}\n        />\n      </TableData>\n    </>\n  );\n};\n\nexport const SubscriptionsList = requireOperatorGroup((props: SubscriptionsListProps) => {\n  const { t } = useTranslation();\n  const SubscriptionTableHeader = () => {\n    return [\n      {\n        title: t('olm~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('olm~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('olm~Status'),\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('olm~Update channel'),\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('olm~Update approval'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~Operator Subscriptions')}\n      Header={SubscriptionTableHeader}\n      Row={SubscriptionTableRow}\n      EmptyMsg={() => (\n        <ConsoleEmptyState title={t('olm~No Subscriptions found')}>\n          {t(\n            'olm~Each Namespace can subscribe to a single channel of a package for automatic updates.',\n          )}\n        </ConsoleEmptyState>\n      )}\n      virtualize\n    />\n  );\n});\n\nexport const SubscriptionsPage: React.FC<SubscriptionsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <MultiListPage\n      {...props}\n      resources={[\n        {\n          kind: referenceForModel(SubscriptionModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'subscription',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.subscription, 'data', [])}\n      title={t('olm~Subscriptions')}\n      canCreate\n      createProps={{ to: '/operatorhub' }}\n      createButtonText={t('olm~Create Subscription')}\n      ListComponent={SubscriptionsList}\n      filterLabel={t('olm~Subscriptions by package')}\n    />\n  );\n};\n\nconst CatalogSourceHealthAlert = ({ health, source, sourceNamespace }) => {\n  const { t } = useTranslation();\n  if (!health) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert\"\n        variant=\"warning\"\n        title={t('olm~CatalogSource health unknown')}\n      >\n        {t(\n          'olm~This operator cannot be updated. The health of CatalogSource \"{{source}}\" is unknown. It may have been disabled or removed from the cluster.',\n          { source },\n        )}\n        {source && sourceNamespace && (\n          <ResourceLink\n            displayName={t('olm~View CatalogSource')}\n            groupVersionKind={getGroupVersionKindForModel(CatalogSourceModel)}\n            name={source}\n            namespace={sourceNamespace}\n            title={source}\n          />\n        )}\n      </Alert>\n    );\n  }\n  return health.healthy ? null : (\n    <Alert isInline className=\"co-alert\" variant=\"warning\" title={t('olm~CatalogSource unhealthy')}>\n      {t('olm~This operator cannot be updated. CatalogSource \"{{source}}\" is unhealthy.', {\n        source,\n      })}\n      <ResourceLink\n        displayName={t('olm~View CatalogSource')}\n        groupVersionKind={getGroupVersionKindForModel(CatalogSourceModel)}\n        name={source}\n        namespace={sourceNamespace}\n        title={source}\n      />\n    </Alert>\n  );\n};\n\nconst InstallFailedAlert = ({ installPlan }) => {\n  const { t } = useTranslation();\n  const installStatusPhase = installPlan?.status?.phase;\n  const installFailedCondition = installPlan?.status?.conditions?.find(\n    ({ type, status }) => type === 'Installed' && status === 'False',\n  );\n  const installFailedMessage =\n    installFailedCondition?.message ||\n    installFailedCondition?.reason ||\n    t('olm~InstallPlan failed');\n\n  return installStatusPhase === InstallPlanPhase.InstallPlanPhaseFailed ? (\n    <Alert\n      isInline\n      className=\"co-alert co-alert--scrollable\"\n      variant=\"danger\"\n      title={installStatusPhase}\n    >\n      {installFailedMessage}\n    </Alert>\n  ) : null;\n};\n\nconst CatalogSourceStatusIconAndText = ({ healthy }) => {\n  const { t } = useTranslation();\n  switch (healthy) {\n    case true:\n      return <StatusIconAndText icon={<GreenCheckCircleIcon />} title={t('olm~Healthy')} />;\n    case false:\n      return <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Unhealthy')} />;\n    default:\n      return (\n        <StatusIconAndText\n          icon={<YellowExclamationTriangleIcon />}\n          title={t('olm~Health unknown')}\n        />\n      );\n  }\n};\n\nexport const SubscriptionDetails: React.FC<SubscriptionDetailsProps> = ({\n  clusterServiceVersions = [],\n  installPlans = [],\n  obj,\n  packageManifests = [],\n  subscriptions = [],\n}) => {\n  const { t } = useTranslation();\n  const { source, sourceNamespace } = obj?.spec ?? {};\n  const catalogHealth = obj?.status?.catalogHealth?.find(\n    (ch) => ch.catalogSourceRef.name === source,\n  );\n  const installedCSV = installedCSVForSubscription(clusterServiceVersions, obj);\n  const installPlan = installPlanForSubscription(installPlans, obj);\n  const pkg = packageForSubscription(packageManifests, obj);\n  if (new URLSearchParams(window.location.search).has('showDelete')) {\n    createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj })\n      .result.then(() => removeQueryArgument('showDelete'))\n      .catch(_.noop);\n  }\n  const { deprecatedPackage, deprecatedChannel, deprecatedVersion } = findDeprecatedOperator(obj);\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <CatalogSourceHealthAlert\n          health={catalogHealth}\n          source={source}\n          sourceNamespace={sourceNamespace}\n        />\n        <InstallFailedAlert installPlan={installPlan} />\n        {(deprecatedPackage.deprecation ||\n          deprecatedChannel.deprecation ||\n          deprecatedVersion.deprecation) && (\n          <DeprecatedOperatorWarningAlert\n            deprecatedPackage={deprecatedPackage}\n            deprecatedChannel={deprecatedChannel}\n            deprecatedVersion={deprecatedVersion}\n            dismissible\n          />\n        )}\n        <SectionHeading text={t('olm~Subscription details')} />\n        <div className=\"co-m-pane__body-group\">\n          <SubscriptionUpdates\n            catalogHealth={catalogHealth}\n            pkg={pkg}\n            obj={obj}\n            installedCSV={installedCSV}\n            installPlan={installPlan}\n            subscriptions={subscriptions}\n          />\n        </div>\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('olm~Installed version')}</dt>\n                <dd>\n                  {installedCSV ? (\n                    <ResourceLink\n                      kind={referenceForModel(ClusterServiceVersionModel)}\n                      name={getName(installedCSV)}\n                      namespace={getNamespace(installedCSV)}\n                      title={getName(installedCSV)}\n                    />\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n                <dt>{t('olm~Starting version')}</dt>\n                <dd>{obj.spec.startingCSV || t('olm~None')}</dd>\n                <dt>{t('olm~CatalogSource')}</dt>\n                <dd>\n                  {source && sourceNamespace ? (\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={source}\n                      namespace={sourceNamespace}\n                      title={source}\n                    >\n                      <ResourceStatus badgeAlt>\n                        <CatalogSourceStatusIconAndText healthy={catalogHealth?.healthy} />\n                      </ResourceStatus>\n                    </ResourceLink>\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n                <dt>{t('olm~InstallPlan')}</dt>\n                <dd>\n                  {installPlan ? (\n                    <ResourceLink\n                      kind={referenceForModel(InstallPlanModel)}\n                      name={getName(installPlan)}\n                      namespace={getNamespace(installPlan)}\n                      title={getName(installPlan)}\n                    />\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions conditions={obj?.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst SubscriptionUpgradeStatus = ({ catalogHealth, subscription }) => {\n  if (!catalogHealth) {\n    return <SourceMissingStatus />;\n  }\n  return catalogHealth.healthy ? (\n    <SubscriptionStatus subscription={subscription} />\n  ) : (\n    <SourceUnhealthyStatus />\n  );\n};\n\nexport const SubscriptionUpdates: React.FC<SubscriptionUpdatesProps> = ({\n  catalogHealth,\n  installedCSV,\n  installPlan,\n  obj,\n  pkg,\n  subscriptions,\n}) => {\n  const { t } = useTranslation();\n  const prevInstallPlanApproval = React.useRef(obj?.spec?.installPlanApproval);\n  const prevChannel = React.useRef(obj?.spec?.channel);\n  const [waitingForUpdate, setWaitingForUpdate] = React.useState(false);\n\n  React.useEffect(() => {\n    const stillWaiting =\n      waitingForUpdate &&\n      obj?.spec?.channel === prevChannel.current &&\n      obj?.spec?.installPlanApproval === prevInstallPlanApproval.current;\n\n    if (!stillWaiting) {\n      setWaitingForUpdate(false);\n      prevChannel.current = obj?.spec?.channel;\n      prevInstallPlanApproval.current = obj?.spec?.installPlanApproval;\n    }\n  }, [obj, waitingForUpdate]);\n\n  const k8sUpdateAndWait = (kind: K8sKind, resource: K8sResourceCommon) =>\n    k8sUpdate(kind, resource).then(() => setWaitingForUpdate(true));\n  const channelModal = () =>\n    createSubscriptionChannelModal({ subscription: obj, pkg, k8sUpdate: k8sUpdateAndWait });\n  const approvalModal = () => createInstallPlanApprovalModal({ obj, k8sUpdate: k8sUpdateAndWait });\n  const installPlanPhase = React.useMemo(() => {\n    if (installPlan) {\n      switch (installPlan.status?.phase as InstallPlanPhase) {\n        case InstallPlanPhase.InstallPlanPhaseRequiresApproval:\n          return (\n            <span data-test=\"operator-subscription-requires-approval\">\n              {t('olm~1 requires approval')}\n            </span>\n          );\n        case InstallPlanPhase.InstallPlanPhaseFailed:\n          return t('olm~1 failed');\n        default:\n          return t('olm~1 installing');\n      }\n    }\n    return null;\n  }, [installPlan, t]);\n  const manualSubscriptionsInNamespace = getManualSubscriptionsInNamespace(\n    subscriptions,\n    obj.metadata.namespace,\n  );\n  const { deprecatedChannel } = findDeprecatedOperator(obj);\n\n  return (\n    <div className=\"co-detail-table\">\n      <div className=\"co-detail-table__row row\">\n        <div className=\"co-detail-table__section col-sm-3\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">\n              {t('olm~Update channel')}\n              <FieldLevelHelp>\n                {t('olm~The channel to track and receive the updates from.')}\n              </FieldLevelHelp>\n            </dt>\n            <dd>\n              {waitingForUpdate ? (\n                <LoadingInline />\n              ) : (\n                <>\n                  <Button\n                    type=\"button\"\n                    isInline\n                    onClick={channelModal}\n                    variant=\"link\"\n                    isDisabled={!pkg}\n                    data-test=\"subscription-channel-update-button\"\n                  >\n                    {obj.spec.channel || 'default'}\n                    {pkg && (\n                      <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                    )}\n                  </Button>\n                  {deprecatedChannel.deprecation && (\n                    <DeprecatedOperatorWarningIcon\n                      dataTest=\"deprecated-operator-warning-subscription-update-icon\"\n                      deprecation={deprecatedChannel.deprecation}\n                    />\n                  )}\n                </>\n              )}\n            </dd>\n          </dl>\n        </div>\n        <div className=\"co-detail-table__section col-sm-3\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">\n              {t('olm~Update approval')}\n              <FieldLevelHelp>\n                {t('olm~The strategy to determine either manual or automatic updates.')}\n              </FieldLevelHelp>\n            </dt>\n            <dd>\n              {waitingForUpdate ? (\n                <LoadingInline />\n              ) : (\n                <>\n                  <div>\n                    <Button type=\"button\" isInline onClick={approvalModal} variant=\"link\">\n                      {obj.spec.installPlanApproval || 'Automatic'}\n                      <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                    </Button>\n                  </div>\n                  {obj.spec.installPlanApproval === InstallPlanApproval.Automatic &&\n                    manualSubscriptionsInNamespace?.length > 0 && (\n                      <div>\n                        <Popover\n                          headerContent={<>{t('olm~Functioning as manual approval strategy')}</>}\n                          bodyContent={\n                            <NamespaceIncludesManualApproval\n                              subscriptions={manualSubscriptionsInNamespace}\n                              namespace={obj.metadata.namespace}\n                            />\n                          }\n                        >\n                          <Button type=\"button\" isInline variant=\"link\">\n                            <BlueInfoCircleIcon className=\"co-icon-space-r\" />\n                            {t('olm~Functioning as manual')}\n                          </Button>\n                        </Popover>\n                      </div>\n                    )}\n                </>\n              )}\n            </dd>\n          </dl>\n        </div>\n        <div className=\"co-detail-table__section co-detail-table__section--last col-sm-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">{t('olm~Upgrade status')}</dt>\n            <dd>\n              <SubscriptionUpgradeStatus catalogHealth={catalogHealth} subscription={obj} />\n            </dd>\n          </dl>\n          {catalogHealth && catalogHealth.healthy && (\n            <>\n              <div className=\"co-detail-table__bracket\" />\n              <div className=\"co-detail-table__breakdown\">\n                {obj?.status?.installedCSV && installedCSV ? (\n                  <Link\n                    to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(\n                      ClusterServiceVersionModel,\n                    )}/${obj.status.installedCSV}`}\n                  >\n                    {t('olm~1 installed')}\n                  </Link>\n                ) : (\n                  <span>{t('olm~0 installed')}</span>\n                )}\n                {obj?.status?.state === SubscriptionState.SubscriptionStateUpgradePending &&\n                obj?.status?.installPlanRef &&\n                installPlan ? (\n                  <Link\n                    to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                      obj.status.installPlanRef.name\n                    }`}\n                  >\n                    <span>{installPlanPhase}</span>\n                  </Link>\n                ) : (\n                  <span>{t('olm~0 installing')}</span>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const SubscriptionDetailsPage: React.FC<SubscriptionDetailsPageProps> = (props) => {\n  const params = useParams();\n  return (\n    <DetailsPage\n      {...props}\n      namespace={params.ns}\n      kind={referenceForModel(SubscriptionModel)}\n      name={params.name}\n      pages={[navFactory.details(SubscriptionDetails), navFactory.editYaml()]}\n      resources={[\n        {\n          kind: referenceForModel(PackageManifestModel),\n          isList: true,\n          namespace: props.namespace,\n          prop: 'packageManifests',\n        },\n        {\n          kind: referenceForModel(InstallPlanModel),\n          isList: true,\n          namespace: props.namespace,\n          prop: 'installPlans',\n        },\n        {\n          kind: referenceForModel(ClusterServiceVersionModel),\n          namespace: props.namespace,\n          isList: true,\n          prop: 'clusterServiceVersions',\n        },\n        {\n          kind: referenceForModel(SubscriptionModel),\n          namespace: props.namespace,\n          isList: true,\n          prop: 'subscriptions',\n        },\n      ]}\n      menuActions={menuActions}\n    />\n  );\n};\n\nexport type SubscriptionsPageProps = {\n  namespace?: string;\n};\n\nexport type SubscriptionsListProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: SubscriptionKind[];\n  operatorGroup: { loaded: boolean; data?: OperatorGroupKind[] };\n};\n\nexport type SubscriptionUpdatesProps = {\n  catalogHealth: { healthy?: boolean };\n  obj: SubscriptionKind;\n  pkg: PackageManifestKind;\n  installedCSV?: ClusterServiceVersionKind;\n  installPlan?: InstallPlanKind;\n  subscriptions: SubscriptionKind[];\n};\n\nexport type SubscriptionUpdatesState = {\n  waitingForUpdate: boolean;\n  channel: string;\n  installPlanApproval: InstallPlanApproval;\n};\n\nexport type SubscriptionDetailsProps = {\n  clusterServiceVersions?: ClusterServiceVersionKind[];\n  installPlans?: InstallPlanKind[];\n  obj: SubscriptionKind;\n  packageManifests: PackageManifestKind[];\n  subscriptions: SubscriptionKind[];\n};\n\nexport type SubscriptionDetailsPageProps = {\n  namespace: string;\n};\n\nSubscriptionsPage.displayName = 'SubscriptionsPage';\nSubscriptionDetails.displayName = 'SubscriptionDetails';\nSubscriptionDetailsPage.displayName = 'SubscriptionDetailsPage';\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { JSONSchema7 } from 'json-schema';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useDispatch } from 'react-redux';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom-v5-compat';\nimport { ListPageBody, K8sModel } from '@console/dynamic-plugin-sdk';\nimport { getResources } from '@console/internal/actions/k8s';\nimport { Conditions } from '@console/internal/components/conditions';\nimport { ErrorPage404 } from '@console/internal/components/error';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport {\n  DetailsPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n  Flatten,\n  Filter,\n} from '@console/internal/components/factory';\nimport { useListPageFilter } from '@console/internal/components/factory/ListPage/filter-hook';\nimport {\n  ListPageCreateDropdown,\n  ListPageCreateLink,\n} from '@console/internal/components/factory/ListPage/ListPageCreate';\nimport ListPageFilter from '@console/internal/components/factory/ListPage/ListPageFilter';\nimport ListPageHeader from '@console/internal/components/factory/ListPage/ListPageHeader';\nimport {\n  Kebab,\n  LabelList,\n  ConsoleEmptyState,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n  navFactory,\n  ResourceLink,\n  AsyncComponent,\n} from '@console/internal/components/utils';\nimport {\n  useK8sWatchResources,\n  useK8sWatchResource,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport { connectToModel } from '@console/internal/kinds';\nimport { CustomResourceDefinitionModel } from '@console/internal/models';\nimport {\n  GroupVersionKind,\n  K8sKind,\n  K8sResourceCondition,\n  K8sResourceKind,\n  OwnerReference,\n  apiVersionForReference,\n  kindForReference,\n  referenceFor,\n  referenceForModel,\n  nameForModel,\n  CustomResourceDefinitionKind,\n  definitionFor,\n  K8sResourceCommon,\n} from '@console/internal/module/k8s';\nimport {\n  Status,\n  SuccessStatus,\n  LazyActionMenu,\n  ActionMenuVariant,\n  getNamespace,\n  useActiveNamespace,\n} from '@console/shared';\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\nimport { useK8sModel } from '@console/shared/src/hooks/useK8sModel';\nimport { useK8sModels } from '@console/shared/src/hooks/useK8sModels';\nimport { useResourceDetailsPage } from '@console/shared/src/hooks/useResourceDetailsPage';\nimport { useResourceListPage } from '@console/shared/src/hooks/useResourceListPage';\nimport { RouteParams } from '@console/shared/src/types';\nimport { ClusterServiceVersionModel } from '../../models';\nimport { ClusterServiceVersionKind, ProvidedAPI } from '../../types';\nimport { useClusterServiceVersion } from '../../utils/useClusterServiceVersion';\nimport { DescriptorDetailsItem, DescriptorDetailsItemList } from '../descriptors';\nimport { DescriptorConditions } from '../descriptors/status/conditions';\nimport { DescriptorType, StatusCapability, StatusDescriptor } from '../descriptors/types';\nimport { isMainStatusDescriptor } from '../descriptors/utils';\nimport { providedAPIsForCSV, referenceForProvidedAPI } from '../index';\nimport { Resources } from '../k8s-resource';\nimport { OperandLink } from './operand-link';\nimport { ShowOperandsInAllNamespacesRadioGroup } from './ShowOperandsInAllNamespacesRadioGroup';\nimport { useShowOperandsInAllNamespaces } from './useShowOperandsInAllNamespaces';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'),\n  Kebab.columnClass,\n];\n\nconst getOperandStatus = (obj: K8sResourceKind): OperandStatusType => {\n  const { phase, status, state, conditions } = obj?.status || {};\n\n  if (phase && _.isString(phase)) {\n    return {\n      type: 'Phase',\n      value: phase,\n    };\n  }\n\n  if (status && _.isString(status)) {\n    return {\n      type: 'Status',\n      value: status,\n    };\n  }\n\n  if (state && _.isString(state)) {\n    return {\n      type: 'State',\n      value: state,\n    };\n  }\n\n  const conditionsIsObject =\n    typeof conditions === 'object' && !Array.isArray(conditions) && conditions !== null;\n  const formattedConditions = conditionsIsObject ? [conditions] : conditions;\n\n  const trueConditions = formattedConditions?.filter(\n    (c: K8sResourceCondition) => c.status === 'True',\n  );\n  if (trueConditions?.length) {\n    const types = trueConditions.map((c: K8sResourceCondition) => c.type);\n    return {\n      type: types.length === 1 ? 'Condition' : 'Conditions',\n      value: types.join(', '),\n    };\n  }\n\n  return null;\n};\n\nconst hasAllNamespaces = (csv: ClusterServiceVersionKind) => {\n  const olmTargetNamespaces = csv?.metadata?.annotations?.['olm.targetNamespaces'] ?? '';\n  const managedNamespaces = olmTargetNamespaces?.split(',') || [];\n  return managedNamespaces.length === 1 && managedNamespaces[0] === '';\n};\n\nexport const OperandStatus: React.FC<OperandStatusProps> = ({ operand }) => {\n  const status: OperandStatusType = getOperandStatus(operand);\n  if (!status) {\n    return <>-</>;\n  }\n\n  const { type, value } = status;\n  return (\n    <span className=\"co-icon-and-text\">\n      {type}\n      <span className=\"pf-v5-u-pr-sm\">:</span>{' '}\n      {value === 'Running' ? <SuccessStatus title={value} /> : <Status status={value} />}\n    </span>\n  );\n};\n\nconst getOperandStatusText = (operand: K8sResourceKind): string => {\n  const status = getOperandStatus(operand);\n  return status ? `${status.type}: ${status.value}` : '';\n};\n\nexport const OperandTableRow: React.FC<OperandTableRowProps> = ({ obj, showNamespace }) => {\n  const objReference = referenceFor(obj);\n  const context = { [objReference]: obj, 'csv-actions': { resource: obj } };\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <OperandLink obj={obj} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        data-test-operand-kind={obj.kind}\n      >\n        {obj.kind}\n      </TableData>\n      {showNamespace && (\n        <TableData className={tableColumnClasses[2]}>\n          {obj.metadata.namespace ? (\n            <ResourceLink\n              kind=\"Namespace\"\n              title={obj.metadata.namespace}\n              name={obj.metadata.namespace}\n            />\n          ) : (\n            '-'\n          )}\n        </TableData>\n      )}\n      <TableData className={tableColumnClasses[3]}>\n        <OperandStatus operand={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <LabelList kind={obj.kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <LazyActionMenu context={context} isDisabled={_.has(obj.metadata, 'deletionTimestamp')} />\n      </TableData>\n    </>\n  );\n};\n\nconst getOperandNamespace = (obj: ClusterServiceVersionKind): string | null => getNamespace(obj);\n\nexport const OperandList: React.FC<OperandListProps> = (props) => {\n  const { t } = useTranslation();\n  const { noAPIsFound, showNamespace } = props;\n\n  const nameHeader: Header = {\n    title: t('public~Name'),\n    sortField: 'metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[0] },\n  };\n  const kindHeader: Header = {\n    title: t('public~Kind'),\n    sortField: 'kind',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[1] },\n  };\n  const namespaceHeader: Header = {\n    title: t('public~Namespace'),\n    sortFunc: 'getOperandNamespace',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[2] },\n  };\n  const statusHeader: Header = {\n    title: t('public~Status'),\n    sortFunc: 'operandStatus',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[3] },\n  };\n  const labelsHeader: Header = {\n    title: t('public~Labels'),\n    sortField: 'metadata.labels',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[4] },\n  };\n  const lastUpdatedHeader: Header = {\n    title: t('public~Last updated'),\n    sortField: 'metadata.creationTimestamp',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[5] },\n  };\n  const kebabHeader: Header = {\n    title: '',\n    props: { className: tableColumnClasses[6] },\n  };\n\n  const AllNsHeader = (): Header[] => [\n    nameHeader,\n    kindHeader,\n    namespaceHeader,\n    statusHeader,\n    labelsHeader,\n    lastUpdatedHeader,\n    kebabHeader,\n  ];\n  const CurrentNsHeader = (): Header[] => [\n    nameHeader,\n    kindHeader,\n    statusHeader,\n    labelsHeader,\n    lastUpdatedHeader,\n    kebabHeader,\n  ];\n\n  const data = React.useMemo(\n    () =>\n      props.data?.map?.((obj) => {\n        if (obj.apiVersion && obj.kind) {\n          return obj;\n        }\n        const reference = props.kinds[0];\n        return {\n          apiVersion: apiVersionForReference(reference),\n          kind: kindForReference(reference),\n          ...obj,\n        };\n      }) ?? [],\n    [props.data, props.kinds],\n  );\n\n  return (\n    <Table\n      {...props}\n      customSorts={{\n        operandStatus: getOperandStatusText,\n        getOperandNamespace,\n      }}\n      data={data}\n      EmptyMsg={() =>\n        noAPIsFound ? (\n          <ConsoleEmptyState title={t('olm~No provided APIs defined')}>\n            {t('olm~This application was not properly installed or configured.')}\n          </ConsoleEmptyState>\n        ) : (\n          <ConsoleEmptyState title={t('olm~No operands found')}>\n            {t(\n              'olm~Operands are declarative components used to define the behavior of the application.',\n            )}\n          </ConsoleEmptyState>\n        )\n      }\n      aria-label=\"Operands\"\n      Header={showNamespace ? AllNsHeader : CurrentNsHeader}\n      Row={(listProps) => <OperandTableRow {...listProps} showNamespace={showNamespace} />}\n      virtualize\n    />\n  );\n};\n\nconst getK8sWatchResources = (\n  models: ProvidedAPIModels,\n  providedAPIs: ProvidedAPI[],\n  namespace?: string,\n): GetK8sWatchResources => {\n  return providedAPIs.reduce((resourceAccumulator, api) => {\n    const reference = referenceForProvidedAPI(api);\n    const model = models?.[reference];\n\n    if (!model) {\n      return resourceAccumulator;\n    }\n\n    const { apiGroup: group, apiVersion: version, kind, namespaced } = model;\n    return {\n      ...resourceAccumulator,\n      [api.kind]: {\n        groupVersionKind: { group, version, kind },\n        isList: true,\n        namespaced,\n        ...(namespaced && namespace ? { namespace } : {}),\n      },\n    };\n  }, {});\n};\n\nexport const ProvidedAPIsPage = (props: ProvidedAPIsPageProps) => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const [namespace] = useActiveNamespace();\n  const [showOperandsInAllNamespaces] = useShowOperandsInAllNamespaces();\n  const {\n    obj,\n    showTitle = true,\n    hideLabelFilter = false,\n    hideNameLabelFilters = false,\n    hideColumnManagement = false,\n  } = props;\n  const [models, inFlight] = useK8sModels();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [apiRefreshed, setAPIRefreshed] = React.useState(false);\n\n  // Map APIs provided by this CSV to Firehose resources. Exclude APIs that do not have a model.\n  const providedAPIs = providedAPIsForCSV(obj);\n\n  const owners = (ownerRefs: OwnerReference[], items: K8sResourceKind[]) =>\n    ownerRefs.filter(({ uid }) => items.filter(({ metadata }) => metadata.uid === uid).length > 0);\n  const flatten: Flatten<{\n    [key: string]: K8sResourceCommon[];\n  }> = React.useCallback(\n    (resources) =>\n      _.flatMap(resources, (resource) => _.map(resource.data, (item) => item)).filter(\n        ({ kind, metadata }, i, allResources) =>\n          providedAPIs.filter((item) => item.kind === kind).length > 0 ||\n          owners(metadata.ownerReferences || [], allResources).length > 0,\n      ),\n    [providedAPIs],\n  );\n\n  const hasNamespacedAPI = providedAPIs.some((api) => {\n    const reference = referenceForProvidedAPI(api);\n    const model = models[reference];\n\n    return model?.namespaced;\n  });\n\n  const managesAllNamespaces = hasNamespacedAPI && hasAllNamespaces(obj);\n  const listAllNamespaces = managesAllNamespaces && showOperandsInAllNamespaces;\n  const watchedResources = getK8sWatchResources(\n    models,\n    providedAPIs,\n    listAllNamespaces ? null : namespace,\n  );\n\n  const resources = useK8sWatchResources<{ [key: string]: K8sResourceKind[] }>(watchedResources);\n\n  // Refresh API definitions if at least one API is missing a model and definitions have not already been refreshed.\n  const apiMightBeOutdated =\n    !inFlight && Object.keys(watchedResources).length < providedAPIs.length;\n  React.useEffect(() => {\n    if (!apiRefreshed && apiMightBeOutdated) {\n      dispatch(getResources());\n      setAPIRefreshed(true);\n    }\n  }, [apiMightBeOutdated, apiRefreshed, dispatch]);\n\n  const createItems =\n    providedAPIs.length > 1\n      ? providedAPIs.reduce(\n          (acc, api) => ({ ...acc, [referenceForProvidedAPI(api)]: api.displayName || api.kind }),\n          {},\n        )\n      : {};\n\n  const createNavigate = (kind) => navigate(`${location.pathname.replace('instances', kind)}/~new`);\n\n  const data = React.useMemo(() => flatten(resources), [resources, flatten]);\n\n  const rowFilters =\n    Object.keys(watchedResources).length > 1\n      ? [\n          {\n            filterGroupName: t('olm~Resource Kind'),\n            type: 'clusterserviceversion-resource-kind',\n            reducer: ({ kind }) => kind,\n            items: Object.keys(watchedResources).map((kind) => ({\n              id: kindForReference(kind),\n              title: kindForReference(kind),\n            })),\n            filter: (filters, resource) => {\n              if (!filters || !filters.selected || !filters.selected.length) {\n                return true;\n              }\n              return filters.selected.includes(resource.kind);\n            },\n          },\n        ]\n      : [];\n\n  const [staticData, filteredData, onFilterChange] = useListPageFilter(data, rowFilters);\n  const loaded = Object.values(resources).every((r) => r.loaded);\n  // only pass the first loadError as StatusBox can only display one\n  const loadError: Record<string, any> = Object.values(resources).find((r) => r.loadError)\n    ?.loadError;\n\n  return inFlight ? null : (\n    <>\n      <ListPageHeader title={showTitle ? t('olm~All Instances') : undefined}>\n        {managesAllNamespaces && (\n          <div className=\"co-operator-details__toggle-value pf-v5-u-ml-xl-on-md\">\n            <ShowOperandsInAllNamespacesRadioGroup />\n          </div>\n        )}\n        <ListPageCreateDropdown onClick={createNavigate} items={createItems}>\n          {t('olm~Create new')}\n        </ListPageCreateDropdown>\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter\n          data={staticData}\n          loaded={loaded}\n          rowFilters={rowFilters}\n          onFilterChange={onFilterChange}\n          hideNameLabelFilters={hideNameLabelFilters}\n          hideLabelFilter={hideLabelFilter}\n          hideColumnManagement={hideColumnManagement}\n        />\n        <OperandList\n          data={filteredData}\n          loaded={loaded}\n          loadError={loadError}\n          noAPIsFound={Object.keys(watchedResources).length === 0}\n          showNamespace={listAllNamespaces}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\nconst DefaultProvidedAPIPage: React.FC<DefaultProvidedAPIPageProps> = (props) => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const [showOperandsInAllNamespaces] = useShowOperandsInAllNamespaces();\n\n  const {\n    namespace,\n    csv,\n    showTitle = true,\n    hideLabelFilter = false,\n    hideNameLabelFilters = false,\n    hideColumnManagement = false,\n  } = props;\n  const createPath = `${location.pathname}/~new`;\n\n  const {\n    apiGroup: group,\n    apiVersion: version,\n    kind,\n    namespaced,\n    label,\n    labelPlural,\n  } = props.k8sModel;\n  const managesAllNamespaces = namespaced && hasAllNamespaces(csv);\n  const listAllNamespaces = managesAllNamespaces && showOperandsInAllNamespaces;\n  const [resources, loaded, loadError] = useK8sWatchResource<K8sResourceKind[]>({\n    groupVersionKind: { group, version, kind },\n    isList: true,\n    namespaced,\n    ...(!listAllNamespaces && namespaced && namespace ? { namespace } : {}),\n  });\n\n  const [staticData, filteredData, onFilterChange] = useListPageFilter(resources);\n\n  return (\n    <>\n      <ListPageHeader title={showTitle ? `${labelPlural}` : undefined}>\n        {managesAllNamespaces && (\n          <div className=\"co-operator-details__toggle-value pf-v5-u-ml-xl-on-md\">\n            <ShowOperandsInAllNamespacesRadioGroup />\n          </div>\n        )}\n        <ListPageCreateLink to={createPath}>\n          {t('public~Create {{label}}', { label })}\n        </ListPageCreateLink>\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter\n          data={staticData}\n          loaded={loaded}\n          onFilterChange={onFilterChange}\n          hideNameLabelFilters={hideNameLabelFilters}\n          hideLabelFilter={hideLabelFilter}\n          hideColumnManagement={hideColumnManagement}\n        />\n        <OperandList\n          data={filteredData}\n          loaded={loaded}\n          loadError={loadError}\n          showNamespace={listAllNamespaces}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\nexport const ProvidedAPIPage = (props: ProvidedAPIPageProps) => {\n  const resourceListPage = useResourceListPage(props.kind);\n  const [namespace] = useActiveNamespace();\n  const [k8sModel, inFlight] = useK8sModel(props.kind);\n  const [apiRefreshed, setAPIRefreshed] = React.useState(false);\n  const dispatch = useDispatch();\n\n  // Refresh API definitions if model is missing and the definitions have not already been refreshed.\n  const apiMightBeOutdated = !inFlight && !k8sModel;\n  React.useEffect(() => {\n    if (!apiRefreshed && apiMightBeOutdated) {\n      dispatch(getResources());\n      setAPIRefreshed(true);\n    }\n  }, [dispatch, apiRefreshed, apiMightBeOutdated]);\n\n  if (inFlight && !k8sModel) {\n    return null;\n  }\n\n  if (!k8sModel) {\n    return <ErrorPage404 />;\n  }\n\n  const { apiGroup: group, apiVersion: version, kind } = k8sModel;\n\n  return resourceListPage ? (\n    <AsyncComponent\n      {...props}\n      name={null}\n      model={{ group, version, kind }}\n      kind={props.kind}\n      namespace={namespace}\n      loader={resourceListPage}\n    />\n  ) : (\n    <DefaultProvidedAPIPage {...props} namespace={namespace} k8sModel={k8sModel} />\n  );\n};\n\nconst PodStatuses: React.FC<PodStatusesProps> = ({ kindObj, obj, podStatusDescriptors, schema }) =>\n  podStatusDescriptors?.length > 0 ? (\n    <div className=\"row\">\n      {podStatusDescriptors.map((statusDescriptor: StatusDescriptor) => {\n        return (\n          <DescriptorDetailsItem\n            className=\"col-sm-6\"\n            key={statusDescriptor.path}\n            type={DescriptorType.status}\n            descriptor={statusDescriptor}\n            model={kindObj}\n            obj={obj}\n            schema={schema}\n          />\n        );\n      })}\n    </div>\n  ) : null;\n\nexport const OperandDetails = connectToModel(({ crd, csv, kindObj, obj }: OperandDetailsProps) => {\n  const { t } = useTranslation();\n  const { kind, status } = obj;\n  const [errorMessage, setErrorMessage] = React.useState(null);\n  const handleError = (err: Error) => setErrorMessage(err.message);\n\n  // Find the matching CRD spec for the kind of this resource in the CSV.\n  const { displayName, specDescriptors, statusDescriptors, version } =\n    [\n      ...(csv?.spec?.customresourcedefinitions?.owned ?? []),\n      ...(csv?.spec?.customresourcedefinitions?.required ?? []),\n    ].find((def) => {\n      return def.name === crd?.metadata?.name && def.version === kindObj?.apiVersion;\n    }) ?? {};\n\n  const schema =\n    crd?.spec?.versions?.find((v) => v.name === version)?.schema?.openAPIV3Schema ??\n    (definitionFor(kindObj) as JSONSchema7);\n\n  const {\n    podStatuses,\n    mainStatusDescriptor,\n    conditionsStatusDescriptors,\n    otherStatusDescriptors,\n  } = (statusDescriptors ?? []).reduce((acc, descriptor) => {\n    if (isMainStatusDescriptor(descriptor)) {\n      return {\n        ...acc,\n        mainStatusDescriptor: descriptor,\n      };\n    }\n\n    if (\n      descriptor['x-descriptors']?.includes(StatusCapability.conditions) ||\n      descriptor.path === 'conditions'\n    ) {\n      return {\n        ...acc,\n        conditionsStatusDescriptors: [...(acc.conditionsStatusDescriptors ?? []), descriptor],\n      };\n    }\n\n    if (descriptor['x-descriptors']?.includes(StatusCapability.podStatuses)) {\n      return {\n        ...acc,\n        podStatuses: [...(acc.podStatuses ?? []), descriptor],\n      };\n    }\n\n    return {\n      ...acc,\n      otherStatusDescriptors: [...(acc.otherStatusDescriptors ?? []), descriptor],\n    };\n  }, {} as any);\n\n  return (\n    <div className=\"co-operand-details co-m-pane\">\n      <div className=\"co-m-pane__body\">\n        {errorMessage && <ErrorAlert message={errorMessage} />}\n        <SectionHeading text={t('olm~{{kind}} overview', { kind: displayName || kind })} />\n        <PodStatuses\n          kindObj={kindObj}\n          obj={obj}\n          schema={schema}\n          podStatusDescriptors={podStatuses}\n        />\n        <div className=\"co-operand-details__section co-operand-details__section--info\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            {mainStatusDescriptor && (\n              <DescriptorDetailsItem\n                key={mainStatusDescriptor.path}\n                className=\"col-sm-6\"\n                descriptor={mainStatusDescriptor}\n                model={kindObj}\n                obj={obj}\n                schema={schema}\n                type={DescriptorType.status}\n              />\n            )}\n            {otherStatusDescriptors?.length > 0 && (\n              <DescriptorDetailsItemList\n                descriptors={otherStatusDescriptors}\n                itemClassName=\"col-sm-6\"\n                model={kindObj}\n                obj={obj}\n                schema={schema}\n                type={DescriptorType.status}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n      {!_.isEmpty(specDescriptors) && (\n        <div className=\"co-m-pane__body\">\n          <div className=\"co-operand-details__section co-operand-details__section--info\">\n            <div className=\"row\">\n              <DescriptorDetailsItemList\n                descriptors={specDescriptors}\n                itemClassName=\"col-sm-6\"\n                model={kindObj}\n                obj={obj}\n                onError={handleError}\n                schema={schema}\n                type={DescriptorType.spec}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n      {Array.isArray(status?.conditions) &&\n        (conditionsStatusDescriptors ?? []).every(({ path }) => path !== 'conditions') && (\n          <div className=\"co-m-pane__body\" data-test=\"status.conditions\">\n            <SectionHeading data-test=\"operand-conditions-heading\" text={t('public~Conditions')} />\n            <Conditions conditions={status.conditions} />\n          </div>\n        )}\n      {conditionsStatusDescriptors?.length > 0 &&\n        conditionsStatusDescriptors.map((descriptor) => (\n          <DescriptorConditions\n            key={descriptor.path}\n            descriptor={descriptor}\n            schema={schema}\n            obj={obj}\n          />\n        ))}\n    </div>\n  );\n});\n\ntype OperandDetailsPageRouteParams = RouteParams<'appName' | 'ns' | 'name' | 'plural'>;\n\nconst DefaultOperandDetailsPage = ({ k8sModel }: DefaultOperandDetailsPageProps) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const { appName, ns, name, plural } = params;\n  const location = useLocation();\n  const [csv] = useClusterServiceVersion(appName, ns);\n  const actionItems = React.useCallback((resourceModel: K8sKind, resource: K8sResourceKind) => {\n    const context = {\n      [referenceForModel(resourceModel)]: resource,\n      'csv-actions': { resource },\n    };\n    return <LazyActionMenu context={context} variant={ActionMenuVariant.DROPDOWN} />;\n  }, []);\n\n  return (\n    <DetailsPage\n      name={name}\n      kind={plural}\n      namespace={ns}\n      customData={csv}\n      resources={[\n        {\n          kind: CustomResourceDefinitionModel.kind,\n          name: nameForModel(k8sModel),\n          isList: false,\n          prop: 'crd',\n        },\n      ]}\n      customActionMenu={actionItems}\n      createRedirect\n      breadcrumbsFor={() => [\n        {\n          name: t('olm~Installed Operators'),\n          path: `/k8s/ns/${params.ns}/${ClusterServiceVersionModel.plural}`,\n        },\n        {\n          name: params.appName,\n          path: location.pathname.slice(0, location.pathname.lastIndexOf('/')),\n        },\n        {\n          name: t('olm~{{item}} details', { item: kindForReference(params.plural) }), // Use url param in case model doesn't exist\n          path: `${location.pathname}`,\n        },\n      ]}\n      pages={[\n        navFactory.details((props) => <OperandDetails {...props} csv={csv} />),\n        navFactory.editYaml(),\n        {\n          // t('olm~Resources')\n          nameKey: 'olm~Resources',\n          href: 'resources',\n          component: Resources,\n        },\n        navFactory.events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n\nexport const OperandDetailsPage = (props) => {\n  const { plural, ns, name } = useParams<OperandDetailsPageRouteParams>();\n  const resourceDetailsPage = useResourceDetailsPage(plural);\n  const [k8sModel, inFlight] = useK8sModel(plural);\n  if (inFlight && !k8sModel) {\n    return null;\n  }\n\n  if (!k8sModel) {\n    return <ErrorPage404 />;\n  }\n\n  const { apiVersion: version, apiGroup: group, kind } = k8sModel;\n  return resourceDetailsPage ? (\n    <AsyncComponent\n      {...props}\n      model={{ group, version, kind }}\n      namespace={ns}\n      kind={plural} // TODO remove when static plugins are no longer supported\n      name={name} // TODO remove when static plugins are no longer supported\n      loader={resourceDetailsPage}\n    />\n  ) : (\n    <DefaultOperandDetailsPage {...props} k8sModel={k8sModel} />\n  );\n};\n\ntype OperandStatusType = {\n  type: string;\n  value: string;\n};\n\nexport type OperandListProps = {\n  loaded: boolean;\n  kinds?: GroupVersionKind[];\n  data: K8sResourceKind[];\n  filters?: Filter[];\n  reduxID?: string;\n  reduxIDs?: string[];\n  rowSplitter?: any;\n  staticFilters?: any;\n  loadError?: Record<string, any>;\n  noAPIsFound?: boolean;\n  showNamespace?: boolean;\n};\n\nexport type OperandStatusProps = {\n  operand: K8sResourceKind;\n};\n\nexport type OperandHeaderProps = {\n  data: K8sResourceKind[];\n};\n\nexport type OperandRowProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ProvidedAPIsPageProps = {\n  obj: ClusterServiceVersionKind;\n  inFlight?: boolean;\n  showTitle?: boolean;\n  hideLabelFilter?: boolean;\n  hideNameLabelFilters?: boolean;\n  hideColumnManagement?: boolean;\n};\n\nexport type ProvidedAPIPageProps = {\n  csv: ClusterServiceVersionKind;\n  kind: GroupVersionKind;\n  showTitle?: boolean;\n  hideLabelFilter?: boolean;\n  hideNameLabelFilters?: boolean;\n  hideColumnManagement?: boolean;\n};\n\ntype DefaultProvidedAPIPageProps = ProvidedAPIPageProps & { k8sModel: K8sModel; namespace: string };\n\ntype PodStatusesProps = {\n  kindObj: K8sKind;\n  obj: K8sResourceKind;\n  podStatusDescriptors: StatusDescriptor[];\n  schema?: JSONSchema7;\n};\n\nexport type OperandDetailsProps = {\n  obj: K8sResourceKind;\n  appName: string;\n  kindObj: K8sKind;\n  csv: ClusterServiceVersionKind;\n  crd: CustomResourceDefinitionKind;\n};\n\ntype DefaultOperandDetailsPageProps = { customData: any; k8sModel: K8sModel };\n\nexport type OperandResourceDetailsProps = {\n  csv?: { data: ClusterServiceVersionKind };\n  gvk: GroupVersionKind;\n  name: string;\n  namespace: string;\n};\n\ntype Header = {\n  title: string;\n  sortField?: string;\n  sortFunc?: string;\n  transforms?: any;\n  props: { className: string };\n};\n\nexport type OperandTableRowProps = RowFunctionArgs<K8sResourceKind> & {\n  showNamespace?: boolean;\n};\n\ntype ProvidedAPIModels = { [key: string]: K8sKind };\n\ntype GetK8sWatchResources = {\n  [key: string]: {\n    kind: string;\n    isList: boolean;\n    namespace?: string;\n    namespaced?: boolean;\n  };\n};\n// TODO(alecmerdler): Find Webpack loader/plugin to add `displayName` to React components automagically\nOperandList.displayName = 'OperandList';\nOperandDetails.displayName = 'OperandDetails';\nProvidedAPIsPage.displayName = 'ProvidedAPIsPage';\nDefaultProvidedAPIPage.displayName = 'DefaultProvidedAPIPage';\nProvidedAPIPage.displayName = 'ProvidedAPIPage';\nDefaultOperandDetailsPage.displayName = 'DefaultOperandDetailsPage';\nOperandDetailsPage.displayName = 'OperandDetailsPage';\nOperandTableRow.displayName = 'OperandTableRow';\nPodStatuses.displayName = 'PodStatuses';\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nimport { k8sPatch, Patch, DeploymentUpdateStrategy, K8sResourceKind } from '../../module/k8s';\nimport { DeploymentModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { withHandlePromise, HandlePromiseProps } from '../utils';\nimport { RadioInput } from '../radio';\n\nexport const getNumberOrPercent = (value) => {\n  if (typeof value === 'undefined') {\n    return null;\n  }\n  if (typeof value === 'string' && value.indexOf('%') > -1) {\n    return value;\n  }\n\n  return _.toInteger(value);\n};\n\nexport const ConfigureUpdateStrategy: React.FC<ConfigureUpdateStrategyProps> = (props) => {\n  const { showDescription = true } = props;\n  const { t } = useTranslation();\n  return (\n    <>\n      {showDescription && (\n        <div className=\"co-m-form-row\">\n          <p>{t('public~How should the pods be replaced when a new revision is created?')}</p>\n        </div>\n      )}\n      <div className=\"row co-m-form-row\">\n        <div className=\"col-sm-12\">\n          <RadioInput\n            name={`${props.uid || 'update-strategy'}-type`}\n            onChange={(e) => {\n              props.onChangeStrategyType(e.target.value);\n            }}\n            value=\"RollingUpdate\"\n            checked={props.strategyType === 'RollingUpdate'}\n            title={t('public~RollingUpdate')}\n            subTitle={t('public~(default)')}\n            autoFocus={props.strategyType === 'RollingUpdate'}\n          >\n            <div className=\"co-m-radio-desc\">\n              <p className=\"text-muted modal-paragraph\">\n                {t(\n                  'public~Execute a smooth roll out of the new revision, based on the settings below',\n                )}\n              </p>\n\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-sm-3\">\n                  <label htmlFor=\"input-max-unavailable\" className=\"control-label co-break-word\">\n                    {t('public~Max unavailable')}\n                  </label>\n                </div>\n                <div className=\"co-m-form-col col-sm-9\">\n                  <div className=\"form-inline\">\n                    <div className=\"pf-v5-c-input-group\">\n                      <input\n                        disabled={props.strategyType !== 'RollingUpdate'}\n                        placeholder=\"25%\"\n                        size={5}\n                        type=\"text\"\n                        className=\"pf-v5-c-form-control\"\n                        id=\"input-max-unavailable\"\n                        value={props.maxUnavailable}\n                        onChange={(e) => props.onChangeMaxUnavailable(e.target.value)}\n                        aria-describedby=\"input-max-unavailable-help\"\n                      />\n                      {props.replicas && (\n                        <span className=\"pf-v5-c-input-group__text\">\n                          <Tooltip content={t('public~Current desired pod count')}>\n                            <span>{t('public~of pod', { count: props.replicas })}</span>\n                          </Tooltip>\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"help-block text-muted\" id=\"input-max-unavailable-help\">\n                    {t(\n                      'public~Percentage of total number of pods or the maximum number ' +\n                        'of pods that can be unavailable during the update(optional)',\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-sm-3\">\n                  <label htmlFor=\"input-max-surge\" className=\"control-label co-break-word\">\n                    {t('public~Max surge')}\n                  </label>\n                </div>\n                <div className=\"co-m-form-col col-sm-9\">\n                  <div className=\"form-inline\">\n                    <div className=\"pf-v5-c-input-group\">\n                      <input\n                        disabled={props.strategyType !== 'RollingUpdate'}\n                        placeholder=\"25%\"\n                        size={5}\n                        type=\"text\"\n                        className=\"pf-v5-c-form-control\"\n                        id=\"input-max-surge\"\n                        value={props.maxSurge}\n                        onChange={(e) => props.onChangeMaxSurge(e.target.value)}\n                        aria-describedby=\"input-max-surge-help\"\n                      />\n                      <span className=\"pf-v5-c-input-group__text\">\n                        <Tooltip content={t('public~Current desired pod count')}>\n                          <span>{t('public~greater than pod', { count: props.replicas })}</span>\n                        </Tooltip>\n                      </span>\n                    </div>\n                  </div>\n                  <p className=\"help-block text-muted\" id=\"input-max-surge-help\">\n                    {t(\n                      'public~Percentage of total number of pods or the maximum number ' +\n                        'of pods that can be scheduled above the original number of pods(optional)',\n                    )}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </RadioInput>\n        </div>\n\n        <div className=\"col-sm-12\">\n          <RadioInput\n            name={`${props.uid || 'update-strategy'}-type`}\n            onChange={(e) => {\n              props.onChangeStrategyType(e.target.value);\n            }}\n            value=\"Recreate\"\n            checked={props.strategyType === 'Recreate'}\n            title={t('public~Recreate')}\n            desc={t('public~Shut down all existing pods before creating new ones')}\n            autoFocus={props.strategyType === 'Recreate'}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const ConfigureUpdateStrategyModal = withHandlePromise(\n  (props: ConfigureUpdateStrategyModalProps) => {\n    const [strategyType, setStrategyType] = React.useState(\n      _.get(props.deployment.spec, 'strategy.type'),\n    );\n    const [maxUnavailable, setMaxUnavailable] = React.useState(\n      _.get(props.deployment.spec, 'strategy.rollingUpdate.maxUnavailable', '25%'),\n    );\n    const [maxSurge, setMaxSurge] = React.useState(\n      _.get(props.deployment.spec, 'strategy.rollingUpdate.maxSurge', '25%'),\n    );\n\n    const { t } = useTranslation();\n\n    const submit = (event) => {\n      event.preventDefault();\n\n      const patch: Patch = { path: '/spec/strategy/rollingUpdate', op: 'remove' };\n      if (strategyType === 'RollingUpdate') {\n        patch.value = {\n          maxUnavailable: getNumberOrPercent(maxUnavailable || '25%'),\n          maxSurge: getNumberOrPercent(maxSurge || '25%'),\n        };\n        patch.op = 'add';\n      }\n      const promise = k8sPatch(DeploymentModel, props.deployment, [\n        patch,\n        { path: '/spec/strategy/type', value: strategyType, op: 'replace' },\n      ]);\n      props.handlePromise(promise, props.close);\n    };\n\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>{t('public~Edit update strategy')}</ModalTitle>\n        <ModalBody>\n          <ConfigureUpdateStrategy\n            strategyType={strategyType}\n            maxUnavailable={maxUnavailable}\n            maxSurge={maxSurge}\n            onChangeStrategyType={setStrategyType}\n            onChangeMaxUnavailable={setMaxUnavailable}\n            onChangeMaxSurge={setMaxSurge}\n            replicas={props.deployment.spec.replicas}\n          />\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={props.errorMessage}\n          inProgress={props.inProgress}\n          submitText={t('public~Save')}\n          cancel={props.cancel}\n        />\n      </form>\n    );\n  },\n);\n\nexport const configureUpdateStrategyModal = createModalLauncher(ConfigureUpdateStrategyModal);\n\nexport type ConfigureUpdateStrategyProps = {\n  showDescription?: boolean;\n  strategyType: DeploymentUpdateStrategy['type'];\n  maxUnavailable: number | string;\n  maxSurge: number | string;\n  onChangeStrategyType: (strategy: DeploymentUpdateStrategy['type']) => void;\n  onChangeMaxUnavailable: (maxUnavailable: number | string) => void;\n  onChangeMaxSurge: (maxSurge: number | string) => void;\n  replicas?: number;\n  uid?: string;\n};\n\nexport type ConfigureUpdateStrategyModalProps = {\n  deployment: K8sResourceKind;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n} & HandlePromiseProps;\n\nConfigureUpdateStrategy.displayName = 'ConfigureUpdateStrategy';\n","import * as React from 'react';\nimport {\n  ActionGroup,\n  Alert,\n  Bullseye,\n  Button,\n  Card,\n  CardBody,\n  Icon,\n  Spinner,\n} from '@patternfly/react-core';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { ResourceStatus, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  Firehose,\n  FirehoseResult,\n  LoadingInline,\n  ResourceLink,\n  resourcePathFromModel,\n  useAccessReview,\n} from '@console/internal/components/utils';\nimport {\n  k8sPatch,\n  referenceForModel,\n  referenceFor,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared/src/components/status/icons';\nimport { RouteParams } from '@console/shared/src/types';\nimport {\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  PackageManifestModel,\n  SubscriptionModel,\n} from '../models';\nimport {\n  ClusterServiceVersionKind,\n  SubscriptionKind,\n  InstallPlanKind,\n  PackageManifestKind,\n} from '../types';\nimport { ClusterServiceVersionLogo } from './cluster-service-version-logo';\nimport { InstallPlanPreview, NeedInstallPlanPermissions } from './install-plan';\nimport { OLMAnnotation } from './operator-hub';\nimport { getInitializationResource } from './operator-hub/operator-hub-utils';\nimport { iconFor, InstallPlanReview } from './index';\n\nconst ViewInstalledOperatorsButton: React.FC<ViewOperatorButtonProps> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const singleNamespaceText = t('olm~View installed Operators in Namespace {{namespace}}', {\n    namespace,\n  });\n  const allNamespacesText = t('olm~View installed Operators in all Namespaces');\n  return (\n    <div className=\"co-operator-install-page__link\">\n      <Link\n        data-test=\"view-installed-operators-btn\"\n        to={resourcePathFromModel(ClusterServiceVersionModel, null, namespace)}\n      >\n        {namespace ? singleNamespaceText : allNamespacesText}\n      </Link>\n    </div>\n  );\n};\n\nconst InstallFailedMessage: React.FC<InstallFailedMessageProps> = ({ namespace, csvName, obj }) => {\n  const { t } = useTranslation();\n  const hasInitializationResource =\n    obj?.metadata?.annotations?.[OLMAnnotation.InitializationResource];\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Operator installation failed')}\n      </h2>\n      <p>\n        {t('olm~The operator did not install successfully.')}\n        {hasInitializationResource && (\n          <>\n            &nbsp;\n            {t(\"olm~The required custom resource can be created in the Operator's details view.\")}\n          </>\n        )}\n      </p>\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        <Link to={resourcePathFromModel(ClusterServiceVersionModel, csvName, namespace)}>\n          <Button variant=\"primary\">{t('olm~View error')}</Button>\n        </Link>\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nconst InstallNeedsApprovalMessage: React.FC<InstallNeedsApprovalMessageProps> = ({\n  namespace,\n  subscriptionObj,\n  installObj,\n  approve,\n}) => {\n  const { t } = useTranslation();\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace,\n    verb: 'patch',\n  });\n\n  const installObjIsInstallPlan = installObj.kind === 'InstallPlan';\n\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Manual approval required')}\n      </h2>\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        <InstallPlanReview installPlan={installObj} />\n        {((installObjIsInstallPlan && canPatchInstallPlans) || !installObjIsInstallPlan) && (\n          <>\n            <Button variant=\"primary\" onClick={approve}>\n              {t('olm~Approve')}\n            </Button>\n            <Link\n              to={`${resourcePathFromModel(\n                SubscriptionModel,\n                subscriptionObj?.metadata?.name,\n                namespace,\n              )}?showDelete=true`}\n            >\n              <Button className=\"co-clusterserviceversion__button\" variant=\"secondary\">\n                {t('olm~Deny')}\n              </Button>\n            </Link>\n          </>\n        )}\n        {!canPatchInstallPlans && installObjIsInstallPlan && (\n          <NeedInstallPlanPermissions installPlan={installObj as InstallPlanKind} />\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nexport const CreateInitializationResourceButton: React.FC<InitializationResourceButtonProps> = ({\n  disabled,\n  initializationResource,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const reference = referenceFor(initializationResource);\n  const kind = initializationResource?.kind;\n  const button = (\n    <Button aria-disabled={disabled} isDisabled={disabled} variant=\"primary\">\n      {t('olm~Create {{item}}', { item: kind })}\n    </Button>\n  );\n\n  return disabled ? (\n    button\n  ) : (\n    <Link\n      to={`${resourcePathFromModel(\n        ClusterServiceVersionModel,\n        obj.metadata.name,\n        obj.metadata.namespace,\n      )}/${reference}/~new?useInitializationResource`}\n    >\n      {button}\n    </Link>\n  );\n};\n\nconst InitializationResourceRequiredMessage: React.FC<InitializationResourceRequiredMessageProps> = ({\n  initializationResource,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const initializationResourceKind = initializationResource?.kind;\n  const initializationResourceNamespace = initializationResource?.metadata?.namespace;\n  const description = obj?.metadata?.annotations?.description;\n  return (\n    <div className=\"co-clusterserviceversion__box\">\n      <span className=\"co-resource-item\">\n        <ResourceLink\n          kind={initializationResourceKind}\n          name={initializationResourceKind}\n          namespace={initializationResourceNamespace}\n        />\n        <ResourceStatus badgeAlt>\n          <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Required')} />\n        </ResourceStatus>\n      </span>\n      <SyncMarkdownView content={description} />\n    </div>\n  );\n};\n\nconst InstallSucceededMessage: React.FC<InstallSuccededMessageProps> = ({\n  namespace,\n  csvName,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const initializationResource = getInitializationResource(obj?.metadata?.annotations, {\n    onError: (error) => errorModal({ error }),\n  });\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Installed operator')}: &nbsp;\n        {initializationResource ? t('olm~custom resource required') : t('olm~ready for use')}\n      </h2>\n      {initializationResource && (\n        <>\n          <span>\n            {t(\n              'olm~The Operator has installed successfully. Create the required custom resource to be able to use this Operator.',\n            )}\n          </span>\n          <InitializationResourceRequiredMessage\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        </>\n      )}\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        {initializationResource ? (\n          <CreateInitializationResourceButton\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        ) : (\n          <Link to={resourcePathFromModel(ClusterServiceVersionModel, csvName, namespace)}>\n            <Button variant=\"primary\">{t('olm~View Operator')}</Button>\n          </Link>\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nconst InstallingMessage: React.FC<InstallingMessageProps> = ({ namespace, obj }) => {\n  const { t } = useTranslation();\n  const reason = (obj as ClusterServiceVersionKind)?.status?.reason || '';\n  const message = (obj as ClusterServiceVersionKind)?.status?.message || '';\n  const initializationResource = getInitializationResource(obj?.metadata?.annotations, {\n    onError: (error) => errorModal({ error }),\n  });\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">{t('olm~Installing Operator')}</h2>\n      {reason && (\n        <p className=\"text-muted\">\n          {reason}: {message}\n        </p>\n      )}\n      <p>\n        {t('olm~The Operator is being installed. This may take a few minutes.')}\n        {initializationResource && (\n          <>\n            &nbsp;\n            {t(\n              'olm~Once the Operator is installed the required custom resource will be available for creation.',\n            )}\n          </>\n        )}\n      </p>\n      {initializationResource && (\n        <InitializationResourceRequiredMessage\n          initializationResource={initializationResource}\n          obj={obj}\n        />\n      )}\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        {initializationResource && (\n          <CreateInitializationResourceButton\n            disabled\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\ntype OperatorInstallStatusPageRouteParams = RouteParams<\n  'pkg' | 'catalogNamespace' | 'currentCSV' | 'targetNamespace'\n>;\n\nconst OperatorInstallLogo = ({ subscription }) => {\n  const { t } = useTranslation();\n  const notFound = t('olm~Not found');\n  const { currentCSV, catalogNamespace, pkg } = useParams<OperatorInstallStatusPageRouteParams>();\n  const [packageManifests, loaded, loadError] = useK8sWatchResource<PackageManifestKind[]>({\n    groupVersionKind: {\n      group: PackageManifestModel.apiGroup,\n      version: PackageManifestModel.apiVersion,\n      kind: PackageManifestModel.kind,\n    },\n    selector: {\n      matchLabels: {\n        'catalog-namespace': catalogNamespace,\n      },\n    },\n    fieldSelector: `metadata.name=${pkg}`,\n    isList: true,\n  });\n  const pkgManifest = packageManifests?.[0];\n  if (!loaded) {\n    return <LoadingInline />;\n  }\n\n  if (loadError || !pkgManifest) {\n    return (\n      <ClusterServiceVersionLogo\n        icon={null}\n        displayName={loadError ? t('olm~Error: {{loadError}}', { loadError }) : notFound}\n      />\n    );\n  }\n  const channels = pkgManifest?.status?.channels || [];\n  const channel = channels.find((ch) => ch.currentCSV === currentCSV) || channels[0];\n  const displayName = channel?.currentCSVDesc?.displayName || notFound;\n  const provider = pkgManifest?.status?.provider?.name || '';\n  const startingCSV = subscription?.spec?.startingCSV;\n\n  return (\n    <ClusterServiceVersionLogo\n      displayName={displayName}\n      icon={iconFor(pkgManifest)}\n      provider={provider}\n      version={startingCSV}\n    />\n  );\n};\n\nconst OperatorInstallStatus: React.FC<OperatorInstallPageProps> = ({ resources }) => {\n  const { t } = useTranslation();\n  const { currentCSV, targetNamespace } = useParams<OperatorInstallStatusPageRouteParams>();\n  let loading = true;\n  let status = '';\n  let installObj: ClusterServiceVersionKind | InstallPlanKind =\n    resources?.clusterServiceVersion?.data;\n  const subscription = resources?.subscription?.data;\n  status = installObj?.status?.phase;\n  if (installObj && status) {\n    loading = false;\n  } else if (subscription) {\n    // There is no ClusterServiceVersion for the package, so look at Subscriptions/InstallPlans\n    loading = false;\n    status = subscription?.status?.state || null;\n    const installPlanName = subscription?.status?.installPlanRef?.name || '';\n    const installPlan: InstallPlanKind = resources?.installPlans?.data?.find(\n      (ip) => ip.metadata.name === installPlanName,\n    );\n    if (installPlan) {\n      installObj = installPlan;\n    }\n  }\n\n  const isStatusSucceeded = status === 'Succeeded';\n  const isStatusFailed = status === 'Failed';\n  const isApprovalNeeded =\n    installObj?.spec?.approval === 'Manual' && installObj?.spec?.approved === false;\n\n  const approve = () => {\n    k8sPatch(InstallPlanModel, installObj, [\n      { op: 'replace', path: '/spec/approved', value: true },\n    ]).catch((error) => {\n      errorModal({ error: error.toString() });\n    });\n  };\n\n  let indicator = <Spinner size=\"lg\" />;\n  if (isStatusFailed) {\n    indicator = (\n      <Icon size=\"lg\">\n        <RedExclamationCircleIcon />\n      </Icon>\n    );\n  }\n  if (isApprovalNeeded) {\n    indicator = (\n      <Icon size=\"lg\">\n        <YellowExclamationTriangleIcon />\n      </Icon>\n    );\n  }\n  if (isStatusSucceeded) {\n    indicator = (\n      <Icon size=\"lg\">\n        <GreenCheckCircleIcon />\n      </Icon>\n    );\n  }\n\n  let installMessage = <InstallingMessage namespace={targetNamespace} obj={installObj} />;\n  if (isStatusFailed) {\n    installMessage = (\n      <InstallFailedMessage namespace={targetNamespace} obj={installObj} csvName={currentCSV} />\n    );\n  } else if (isApprovalNeeded) {\n    installMessage = (\n      <InstallNeedsApprovalMessage\n        namespace={targetNamespace}\n        subscriptionObj={subscription}\n        installObj={installObj}\n        approve={approve}\n      />\n    );\n  } else if (isStatusSucceeded) {\n    installMessage = (\n      <InstallSucceededMessage namespace={targetNamespace} csvName={currentCSV} obj={installObj} />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"co-operator-install-page__main\">\n        <Helmet>\n          <title>{t('olm~Installing Operator')}</title>\n        </Helmet>\n        <Bullseye>\n          <div id=\"operator-install-page\">\n            {loading && (\n              <div className=\"co-operator-install-page__indicator\">\n                {t('olm~Installing...')} <Spinner size=\"lg\" />\n              </div>\n            )}\n            {!loading && isStatusFailed && (\n              <Alert variant=\"danger\" isInline title=\"Installation Failed\">\n                {status}: {(installObj as ClusterServiceVersionKind)?.status?.message || ''}\n              </Alert>\n            )}\n            {!loading && (\n              <Card>\n                <CardBody>\n                  <div className=\"co-operator-install-page__pkg-indicator\">\n                    <div>\n                      <OperatorInstallLogo subscription={resources.subscription.data} />\n                    </div>\n                    <div>{indicator}</div>\n                  </div>\n                </CardBody>\n              </Card>\n            )}\n            {!loading && (\n              <Card>\n                <CardBody>{installMessage}</CardBody>\n              </Card>\n            )}\n          </div>\n        </Bullseye>\n      </div>\n      {!loading && isApprovalNeeded && (\n        <InstallPlanPreview obj={installObj as InstallPlanKind} hideApprovalBlock />\n      )}\n    </>\n  );\n};\n\nexport const OperatorInstallStatusPage: React.FC<OperatorInstallPageProps> = () => {\n  const { pkg, currentCSV, targetNamespace } = useParams<OperatorInstallStatusPageRouteParams>();\n\n  const installPageResources = [\n    {\n      kind: referenceForModel(ClusterServiceVersionModel),\n      namespaced: true,\n      isList: false,\n      name: currentCSV,\n      namespace: targetNamespace,\n      prop: 'clusterServiceVersion',\n    },\n    {\n      kind: referenceForModel(SubscriptionModel),\n      namespaced: true,\n      isList: false,\n      name: pkg,\n      namespace: targetNamespace,\n      optional: true,\n      prop: 'subscription',\n    },\n    {\n      kind: referenceForModel(InstallPlanModel),\n      prop: 'installPlans',\n      namespaced: true,\n      namespace: targetNamespace,\n      isList: true,\n      optional: true,\n    },\n  ];\n\n  return (\n    <Firehose resources={installPageResources}>\n      <OperatorInstallStatus />\n    </Firehose>\n  );\n};\n\nexport type OperatorInstallPageProps = {\n  resources?: {\n    clusterServiceVersion: FirehoseResult<ClusterServiceVersionKind>;\n    subscription: FirehoseResult<SubscriptionKind>;\n    installPlans: FirehoseResult<InstallPlanKind[]>;\n  };\n};\ntype InstallSuccededMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n  csvName: string;\n};\ntype InstallNeedsApprovalMessageProps = {\n  namespace: string;\n  subscriptionObj: SubscriptionKind;\n  installObj: ClusterServiceVersionKind | InstallPlanKind;\n  approve: () => void;\n};\ntype InstallingMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n};\ntype InstallFailedMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n  csvName: string;\n};\ntype InitializationResourceRequiredMessageProps = {\n  initializationResource: K8sResourceKind;\n  obj: ClusterServiceVersionKind | InstallPlanKind | SubscriptionKind;\n};\ntype InitializationResourceButtonProps = {\n  disabled?: boolean;\n  initializationResource: K8sResourceKind;\n  obj: ClusterServiceVersionKind | InstallPlanKind | SubscriptionKind;\n};\ntype ViewOperatorButtonProps = {\n  namespace: string;\n};\n","import * as React from 'react';\nimport {\n  ActionGroup,\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  Checkbox,\n  TextInput,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation, Link } from 'react-router-dom-v5-compat';\nimport { RadioGroup, RadioInput } from '@console/internal/components/radio';\nimport {\n  documentationURLs,\n  ExternalLink,\n  FieldLevelHelp,\n  Firehose,\n  getDocumentationURL,\n  getURLSearchParams,\n  history,\n  isManaged,\n  ConsoleEmptyState,\n  NsDropdown,\n  PageHeading,\n  ResourceIcon,\n  resourcePathFromModel,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport {\n  ConsoleOperatorConfigModel,\n  NamespaceModel,\n  RoleBindingModel,\n  RoleModel,\n} from '@console/internal/models';\nimport {\n  K8sResourceCommon,\n  apiVersionForModel,\n  apiVersionForReference,\n  k8sCreate,\n  k8sGet,\n  k8sListPartialMetadata,\n  k8sPatch,\n  K8sResourceKind,\n  kindForReference,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { fromRequirements } from '@console/internal/module/k8s/selector';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '@console/shared/src/constants';\nimport { SubscriptionModel, OperatorGroupModel, PackageManifestModel } from '../../models';\nimport {\n  OperatorGroupKind,\n  PackageManifestKind,\n  SubscriptionKind,\n  InstallPlanApproval,\n  InstallModeType,\n} from '../../types';\nimport { isCatalogSourceTrusted } from '../../utils';\nimport { ConsolePluginFormGroup } from '../../utils/console-plugin-form-group';\nimport { ClusterServiceVersionLogo } from '../cluster-service-version-logo';\nimport { CRDCard } from '../clusterserviceversion';\nimport { DeprecatedOperatorWarningAlert } from '../deprecated-operator-warnings/deprecated-operator-warnings';\nimport { useDeprecatedOperatorWarnings } from '../deprecated-operator-warnings/use-deprecated-operator-warnings';\nimport {\n  defaultChannelNameFor,\n  getManualSubscriptionsInNamespace,\n  iconFor,\n  NamespaceIncludesManualApproval,\n  providedAPIsForChannel,\n  referenceForProvidedAPI,\n  supportedInstallModesFor,\n} from '../index';\nimport { installedFor, supports, providedAPIsForOperatorGroup, isGlobal } from '../operator-group';\nimport { OperatorChannelSelect, OperatorVersionSelect } from './operator-channel-version-select';\nimport {\n  getSuggestedNamespaceTemplate,\n  getInitializationResource,\n  getClusterServiceVersionPlugins,\n} from './operator-hub-utils';\n\nexport const CloudServiceTokenWarningAlert = ({\n  title,\n  message,\n  onClose,\n}: CloudServiceTokenWarningAlertProps) => {\n  return (\n    <Alert\n      isInline\n      variant=\"warning\"\n      title={title}\n      actionClose={<AlertActionCloseButton onClose={() => onClose(false)} />}\n      className=\"pf-u-mb-lg\"\n    >\n      <p>{message}</p>\n    </Alert>\n  );\n};\n\nconst InputField: React.FC<InputFieldProps> = ({\n  label,\n  helpText,\n  placeholder,\n  ariaLabel,\n  value,\n  setValue,\n}) => {\n  return (\n    <div className=\"form-group\">\n      <fieldset>\n        <label className=\"co-required\">{label}</label>\n        <FieldLevelHelp>{helpText}</FieldLevelHelp>\n        <div className=\"co-toolbar__item\">\n          <TextInput\n            autoFocus\n            placeholder={placeholder}\n            aria-label={ariaLabel}\n            type=\"text\"\n            value={value}\n            onChange={(_event, val) => {\n              setValue(val);\n            }}\n          />\n        </div>\n      </fieldset>\n    </div>\n  );\n};\n\nexport const OperatorHubSubscribeForm: React.FC<OperatorHubSubscribeFormProps> = (props) => {\n  const packageManifest = props.packageManifest?.data?.[0];\n  const { name: pkgName } = packageManifest?.metadata ?? {};\n  const { provider, channels = [], packageName, catalogSource, catalogSourceNamespace } =\n    packageManifest?.status ?? {};\n\n  const { pathname: url } = useLocation();\n  const [roleARNText, setRoleARNText] = React.useState('');\n  const [azureTenantId, setAzureTenantId] = React.useState('');\n  const [azureClientId, setAzureClientId] = React.useState('');\n  const [azureSubscriptionId, setAzureSubscriptionId] = React.useState('');\n  const [gcpProjectNumber, setGcpProjectNumber] = React.useState('');\n  const [gcpPoolId, setGcpPoolId] = React.useState('');\n  const [gcpProviderId, setGcpProviderId] = React.useState('');\n  const [gcpServiceAcctEmail, setGcpServiceAcctEmail] = React.useState('');\n  const [targetNamespace, setTargetNamespace] = React.useState(null);\n  const [installMode, setInstallMode] = React.useState(null);\n  const { catalogNamespace, channel, pkg, tokenizedAuth, version } = getURLSearchParams();\n\n  const defaultChannel = defaultChannelNameFor(packageManifest);\n  const [updateChannelName, setUpdateChannelName] = React.useState(channel || defaultChannel);\n  const { currentCSVDesc } = channels.find((ch) => ch.name === updateChannelName) ?? {};\n  const { installModes = [], version: currentLatestVersion } = currentCSVDesc ?? {};\n\n  const [updateVersion, setUpdateVersion] = React.useState(version || currentLatestVersion);\n\n  const [showCSTokenWarn, setShowCSTokenWarn] = React.useState(true);\n\n  const [approval, setApproval] = React.useState(\n    updateVersion !== currentLatestVersion\n      ? InstallPlanApproval.Manual\n      : InstallPlanApproval.Automatic,\n  );\n\n  const [cannotResolve, setCannotResolve] = React.useState(false);\n  const [suggestedNamespaceExists, setSuggestedNamespaceExists] = React.useState(false);\n  const [suggestedNamespaceExistsInFlight, setSuggestedNamespaceExistsInFlight] = React.useState(\n    true,\n  );\n  const [\n    useSuggestedNSForSingleInstallMode,\n    setUseSuggestedNSForSingleInstallMode,\n  ] = React.useState(true);\n\n  const defaultEnableMonitoring =\n    packageManifest?.metadata?.labels?.provider?.includes('Red Hat') &&\n    currentCSVDesc.annotations?.['console.openshift.io/operator-monitoring-default'] === 'true';\n  const [enableMonitoring, setEnableMonitoring] = React.useState(defaultEnableMonitoring);\n\n  const [error, setError] = React.useState('');\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>({\n    kind: referenceForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const [enabledPlugins, setEnabledPlugins] = React.useState<string[]>([]);\n  const { t } = useTranslation();\n\n  const {\n    deprecatedPackage,\n    deprecatedChannel,\n    deprecatedVersion,\n    setDeprecatedPackage,\n  } = useDeprecatedOperatorWarnings();\n  const deprecatedWarning =\n    deprecatedPackage?.deprecation ||\n    deprecatedChannel?.deprecation ||\n    deprecatedVersion?.deprecation;\n\n  React.useEffect(() => {\n    setDeprecatedPackage(_.pick(packageManifest?.status, 'deprecation'));\n  }, [packageManifest?.status, setDeprecatedPackage]);\n\n  const setPluginEnabled = (plugin: string, enabled: boolean) => {\n    if (enabled) {\n      setEnabledPlugins([...enabledPlugins, plugin]);\n    } else {\n      setEnabledPlugins(enabledPlugins.filter((p: string) => p !== plugin));\n    }\n  };\n\n  const search = new URLSearchParams({\n    'details-item': `${new URLSearchParams(window.location.search).get(\n      'pkg',\n    )}-${new URLSearchParams(window.location.search).get('catalogNamespace')}`,\n  });\n\n  const selectedInstallMode =\n    installMode ||\n    supportedInstallModesFor(props.packageManifest.data[0])(updateChannelName).reduce(\n      (preferredInstallMode, mode) =>\n        mode.type === InstallModeType.InstallModeTypeAllNamespaces\n          ? InstallModeType.InstallModeTypeAllNamespaces\n          : preferredInstallMode,\n      InstallModeType.InstallModeTypeOwnNamespace,\n    );\n\n  const suggestedNamespace =\n    currentCSVDesc.annotations?.['operatorframework.io/suggested-namespace'];\n  const suggestedNamespaceTemplate =\n    getSuggestedNamespaceTemplate(currentCSVDesc.annotations, {\n      // eslint-disable-next-line no-console\n      onError: () => console.error('Could not parse JSON annotation.'),\n    }) ?? {};\n  const suggestedNamespaceTemplateName = suggestedNamespaceTemplate?.metadata?.name;\n  const operatorRequestsMonitoring =\n    currentCSVDesc.annotations?.['operatorframework.io/cluster-monitoring'] === 'true';\n  const initializationResource = getInitializationResource(currentCSVDesc.annotations, {\n    // eslint-disable-next-line no-console\n    onError: () => console.error('Operator Hub Subscribe: Could not get initialization resource.'),\n  });\n  const canPatchConsoleOperatorConfig = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const csvPlugins = getClusterServiceVersionPlugins(currentCSVDesc?.annotations);\n\n  const initializationResourceReference = React.useMemo(\n    () => (initializationResource ? referenceFor(initializationResource) : null),\n    [initializationResource],\n  );\n\n  const globalNS =\n    (props.operatorGroup?.data || ([] as OperatorGroupKind[])).find(\n      (og) => og.metadata.name === 'global-operators',\n    )?.metadata?.namespace || 'openshift-operators';\n\n  let selectedTargetNamespace = targetNamespace || props.targetNamespace;\n  const operatorSuggestedNamespace = suggestedNamespaceTemplateName || suggestedNamespace;\n\n  if (selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces) {\n    if (operatorSuggestedNamespace) {\n      selectedTargetNamespace = targetNamespace || operatorSuggestedNamespace;\n    } else {\n      selectedTargetNamespace = targetNamespace || globalNS;\n    }\n  }\n  if (\n    selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n    props.targetNamespace === globalNS\n  ) {\n    selectedTargetNamespace = targetNamespace || '';\n  }\n\n  const isSuggestedNamespaceSelected =\n    operatorSuggestedNamespace && operatorSuggestedNamespace === selectedTargetNamespace;\n  const showSuggestedNamespaceDetails =\n    !suggestedNamespaceExistsInFlight && isSuggestedNamespaceSelected;\n  React.useEffect(() => {\n    if (!operatorSuggestedNamespace) {\n      setSuggestedNamespaceExistsInFlight(false);\n      return;\n    }\n    setTargetNamespace(operatorSuggestedNamespace);\n    k8sGet(NamespaceModel, operatorSuggestedNamespace)\n      .then(() => {\n        setSuggestedNamespaceExists(true);\n        setSuggestedNamespaceExistsInFlight(false);\n      })\n      .catch(() => {\n        setSuggestedNamespaceExists(false);\n        setSuggestedNamespaceExistsInFlight(false);\n      });\n  }, [operatorSuggestedNamespace]);\n\n  React.useEffect(() => {\n    k8sListPartialMetadata(PackageManifestModel, {\n      ns: selectedTargetNamespace,\n      fieldSelector: `metadata.name=${pkgName}`,\n      labelSelector: fromRequirements([\n        { key: 'catalog', operator: 'Equals', values: [catalogSource] },\n        { key: 'catalog-namespace', operator: 'Equals', values: [catalogSourceNamespace] },\n      ]),\n    })\n      .then((list) => setCannotResolve(_.isEmpty(list)))\n      .catch(() => setCannotResolve(true));\n  }, [\n    catalogSource,\n    catalogSourceNamespace,\n    pkgName,\n    props.packageManifest.data,\n    selectedTargetNamespace,\n  ]);\n\n  React.useEffect(() => {\n    setEnabledPlugins(isCatalogSourceTrusted(catalogSource) ? csvPlugins : []);\n    // Use the JSON string directly from the annotation so the dependency is compared using string comparison\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [catalogSource, currentCSVDesc?.annotations?.['console.openshift.io/plugins']]);\n\n  const manualSubscriptionsInNamespace = getManualSubscriptionsInNamespace(\n    props.subscription.data,\n    selectedTargetNamespace,\n  );\n\n  React.useEffect(() => {\n    if (\n      version !== currentLatestVersion ||\n      manualSubscriptionsInNamespace?.length > 0 ||\n      tokenizedAuth === 'AWS' ||\n      tokenizedAuth === 'Azure' ||\n      tokenizedAuth === 'GCP'\n    ) {\n      setApproval(InstallPlanApproval.Manual);\n    } else setApproval(InstallPlanApproval.Automatic);\n  }, [version, currentLatestVersion, manualSubscriptionsInNamespace?.length, tokenizedAuth]);\n\n  const singleInstallMode = installModes.find(\n    (m) => m.type === InstallModeType.InstallModeTypeOwnNamespace,\n  );\n  const supportsSingle = singleInstallMode && singleInstallMode.supported;\n  const globalInstallMode = installModes.find(\n    (m) => m.type === InstallModeType.InstallModeTypeAllNamespaces,\n  );\n  const supportsGlobal = globalInstallMode && globalInstallMode.supported;\n\n  const navigateToInstallPage = React.useCallback(\n    (csvName: string) => {\n      history.push(\n        `/operatorhub/install/${catalogNamespace}/${pkg}/${csvName}/to/${selectedTargetNamespace}`,\n      );\n    },\n    [catalogNamespace, pkg, selectedTargetNamespace],\n  );\n\n  if (!supportsSingle && !supportsGlobal) {\n    return (\n      <ConsoleEmptyState\n        title={t(\"olm~{{item}} can't be installed\", {\n          item: channels?.[0]?.currentCSVDesc?.displayName,\n        })}\n      >\n        {t(\n          'olm~The Operator does not support to be made available in a single namespace (OwnNamespace installMode) or global installation (AllNamespaces installMode).  Use the CLI to install this Operator instead.',\n        )}\n      </ConsoleEmptyState>\n    );\n  }\n\n  const descFor = (mode: InstallModeType) => {\n    if (mode === InstallModeType.InstallModeTypeAllNamespaces && supportsGlobal) {\n      return t('olm~Operator will be available in all Namespaces.');\n    }\n    if (mode === InstallModeType.InstallModeTypeOwnNamespace && supportsSingle) {\n      return t('olm~Operator will be available in a single Namespace only.');\n    }\n    return t('olm~This mode is not supported by this Operator');\n  };\n  const subscriptionExists = (ns: string) =>\n    installedFor(props.subscription.data)(props.operatorGroup.data)(props.packageManifest.data[0])(\n      ns,\n    );\n  const namespaceSupports = (ns: string) => (mode: InstallModeType) => {\n    const operatorGroup = props.operatorGroup.data.find((og) => og.metadata.namespace === ns);\n    if (!operatorGroup || !ns) {\n      return true;\n    }\n    return supports([{ type: mode, supported: true }])(operatorGroup);\n  };\n  const conflictingProvidedAPIs = (ns: string) => {\n    const operatorGroups = props.operatorGroup.data.filter(\n      (og) => og.status?.namespaces?.includes(ns) || isGlobal(og),\n    );\n    if (_.isEmpty(operatorGroups)) {\n      return [];\n    }\n    const existingAPIs = _.flatMap(operatorGroups, providedAPIsForOperatorGroup);\n    const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(\n      updateChannelName,\n    ).map((desc) => referenceForProvidedAPI(desc));\n\n    return _.intersection(existingAPIs, providedAPIs);\n  };\n\n  const submit = async () => {\n    // Clear any previous errors.\n    setError('');\n    const defaultNS: K8sResourceCommon = {\n      metadata: {\n        name: selectedTargetNamespace,\n        labels:\n          operatorRequestsMonitoring && enableMonitoring\n            ? {\n                'openshift.io/cluster-monitoring': 'true',\n              }\n            : {},\n      },\n    };\n\n    const ns = _.defaultsDeep({}, defaultNS, suggestedNamespaceTemplate);\n    const rbacName = `${selectedTargetNamespace}-prometheus`;\n    const currentChannel = packageManifest?.status?.channels?.find(\n      (ch) => ch.name === updateChannelName,\n    );\n    const currentCSVName = currentChannel?.entries?.find((e) => e.version === updateVersion)?.name;\n    const prometheusRole = {\n      kind: RoleModel.kind,\n      apiVersion: `${RoleModel.apiGroup}/${RoleModel.apiVersion}`,\n      metadata: {\n        name: rbacName,\n        namespace: selectedTargetNamespace,\n      },\n      rules: [\n        {\n          apiGroups: [''],\n          resources: ['services', 'endpoints', 'pods'],\n          verbs: ['get', 'list', 'watch'],\n        },\n      ],\n    };\n\n    const prometheusRoleBinding = {\n      kind: RoleBindingModel.kind,\n      apiVersion: `${RoleBindingModel.apiGroup}/${RoleBindingModel.apiVersion}`,\n      metadata: {\n        name: rbacName,\n        namespace: selectedTargetNamespace,\n      },\n      roleRef: {\n        kind: 'Role',\n        name: rbacName,\n        apiGroup: RoleBindingModel.apiGroup,\n      },\n      subjects: [\n        {\n          kind: 'ServiceAccount',\n          name: 'prometheus-k8s',\n          namespace: 'openshift-monitoring',\n        },\n      ],\n    };\n\n    const operatorGroup: OperatorGroupKind = {\n      apiVersion: apiVersionForModel(OperatorGroupModel) as OperatorGroupKind['apiVersion'],\n      kind: 'OperatorGroup',\n      metadata: {\n        generateName: `${selectedTargetNamespace}-`,\n        namespace: selectedTargetNamespace,\n      },\n      ...(selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n        ? {}\n        : {\n            spec: {\n              targetNamespaces: [selectedTargetNamespace],\n            },\n          }),\n    };\n\n    const subscription: SubscriptionKind = {\n      apiVersion: apiVersionForModel(SubscriptionModel) as SubscriptionKind['apiVersion'],\n      kind: 'Subscription',\n      metadata: {\n        name: packageName,\n        namespace: selectedTargetNamespace,\n      },\n      spec: {\n        source: catalogSource,\n        sourceNamespace: catalogSourceNamespace,\n        name: packageName,\n        startingCSV: currentCSVName,\n        channel: updateChannelName,\n        installPlanApproval: approval,\n      },\n    };\n\n    switch (tokenizedAuth) {\n      case 'AWS':\n        subscription.spec.config = {\n          env: [\n            {\n              name: 'ROLEARN',\n              value: roleARNText,\n            },\n          ],\n        };\n        break;\n      case 'Azure':\n        subscription.spec.config = {\n          env: [\n            {\n              name: 'CLIENTID',\n              value: azureClientId,\n            },\n            {\n              name: 'TENANTID',\n              value: azureTenantId,\n            },\n            {\n              name: 'SUBSCRIPTIONID',\n              value: azureSubscriptionId,\n            },\n          ],\n        };\n        break;\n      case 'GCP':\n        subscription.spec.config = {\n          env: [\n            {\n              name: 'PROJECT_NUMBER',\n              value: gcpProjectNumber,\n            },\n            {\n              name: 'POOL_ID',\n              value: gcpPoolId,\n            },\n            {\n              name: 'PROVIDER_ID',\n              value: gcpProviderId,\n            },\n            {\n              name: 'SERVICE_ACCOUNT_EMAIL',\n              value: gcpServiceAcctEmail,\n            },\n          ],\n        };\n        break;\n      default:\n        break;\n    }\n\n    try {\n      if (isSuggestedNamespaceSelected && !suggestedNamespaceExists) {\n        await k8sCreate(NamespaceModel, ns);\n        if (operatorRequestsMonitoring && enableMonitoring) {\n          await k8sCreate(RoleModel, prometheusRole);\n          await k8sCreate(RoleBindingModel, prometheusRoleBinding);\n        }\n      }\n      if (\n        !props.operatorGroup.data.some(\n          (group) => group.metadata.namespace === selectedTargetNamespace,\n        )\n      ) {\n        await k8sCreate(OperatorGroupModel, operatorGroup);\n      }\n      await k8sCreate(SubscriptionModel, subscription);\n      const previousPlugins: string[] = consoleOperatorConfig?.spec?.plugins || [];\n      const updatedPlugins: string[] = [\n        ...previousPlugins.filter((plugin: string) => !csvPlugins.includes(plugin)),\n        ...enabledPlugins,\n      ];\n      if (\n        !_.isEqual(previousPlugins.sort(), updatedPlugins.sort()) &&\n        canPatchConsoleOperatorConfig\n      ) {\n        await k8sPatch(ConsoleOperatorConfigModel, consoleOperatorConfig, [\n          {\n            path: '/spec/plugins',\n            value: updatedPlugins,\n            op: 'add',\n          },\n        ]);\n      }\n      navigateToInstallPage(currentCSVName);\n    } catch (err) {\n      setError(err.message || t('olm~Could not create Operator Subscription.'));\n    }\n  };\n\n  const formValid = () =>\n    [updateChannelName, selectedInstallMode, selectedTargetNamespace, approval].some(\n      (v) => _.isNil(v) || _.isEmpty(v),\n    ) ||\n    subscriptionExists(selectedTargetNamespace) ||\n    !namespaceSupports(selectedTargetNamespace)(selectedInstallMode) ||\n    (selectedTargetNamespace && cannotResolve) ||\n    !_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace)) ||\n    (tokenizedAuth === 'AWS' && _.isEmpty(roleARNText)) ||\n    (tokenizedAuth === 'Azure' &&\n      [azureClientId, azureTenantId, azureSubscriptionId].some((v) => _.isEmpty(v))) ||\n    (tokenizedAuth === 'GCP' &&\n      [gcpProjectNumber, gcpPoolId, gcpProviderId, gcpServiceAcctEmail].some((v) => _.isEmpty(v)));\n\n  const formError = () => {\n    return (\n      (error && (\n        <Alert\n          isInline\n          className=\"co-alert co-alert--scrollable\"\n          variant=\"danger\"\n          title={t('olm~An error occurred')}\n        >\n          <div className=\"co-pre-line\">{error}</div>\n        </Alert>\n      )) ||\n      (!namespaceSupports(selectedTargetNamespace)(selectedInstallMode) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t('olm~Namespace does not support installation mode')}\n        >\n          {selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n          selectedTargetNamespace === globalNS ? (\n            <>\n              {t(\n                'olm~The {{namespace}} Namespace is reserved for global Operators that watch all Namespaces. To install an Operator in a single Namespace, select a different Namespace where the operand should run.',\n                { namespace: selectedTargetNamespace },\n              )}\n            </>\n          ) : (\n            <>\n              {t(\n                'olm~The OperatorGroup in the {{namespace}} Namespace does not support the {{mode}} installation mode. Select a different installation Namespace that supports this mode.',\n                {\n                  namespace: selectedTargetNamespace,\n                  mode:\n                    selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n                      ? ' global '\n                      : ' single-Namespace ',\n                },\n              )}\n            </>\n          )}\n        </Alert>\n      )) ||\n      (subscriptionExists(selectedTargetNamespace) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t(\n            'olm~A Subscription for this Operator already exists in Namespace \"{{namespace}}\"',\n            {\n              namespace: selectedTargetNamespace,\n            },\n          )}\n        >\n          <p>\n            <Trans t={t} ns=\"olm\">\n              Remove the{' '}\n              <Link\n                to={resourcePathFromModel(SubscriptionModel, packageName, selectedTargetNamespace)}\n              >\n                existing Subscription\n              </Link>{' '}\n              in order to install this Operator in Namespace {'\"'}\n              {{ selectedTargetNamespace }}\n              {'\"'}\n            </Trans>\n          </p>\n        </Alert>\n      )) ||\n      (!_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace)) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t('olm~Operator conflicts exist')}\n        >\n          {t(\n            'olm~Installing this Operator in the selected Namespace would cause conflicts with another Operator providing these APIs:',\n          )}\n          <ul>\n            {conflictingProvidedAPIs(selectedTargetNamespace).map((gvk) => (\n              <li key={gvk}>\n                <strong>{kindForReference(gvk)}</strong> <i>({apiVersionForReference(gvk)})</i>\n              </li>\n            ))}\n          </ul>\n        </Alert>\n      )) ||\n      (selectedTargetNamespace && cannotResolve && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t('olm~Operator not available for selected Namespaces')}\n        />\n      ))\n    );\n  };\n\n  const showMonitoringCheckbox =\n    operatorRequestsMonitoring && _.startsWith(selectedTargetNamespace, 'openshift-');\n\n  const monitoringURL = getDocumentationURL(documentationURLs.configuringMonitoring);\n\n  const suggestedNamespaceDetails = showSuggestedNamespaceDetails && (\n    <>\n      <Alert\n        isInline\n        className=\"co-alert co-alert--scrollable\"\n        variant={suggestedNamespaceExists ? 'warning' : 'info'}\n        title={\n          suggestedNamespaceExists ? t('olm~Namespace already exists') : t('olm~Namespace creation')\n        }\n      >\n        {suggestedNamespaceExists ? (\n          <Trans ns=\"olm\">\n            Namespace <b>{{ operatorSuggestedNamespace }}</b> already exists and will be used. Other\n            users can already have access to this namespace.\n          </Trans>\n        ) : (\n          <Trans ns=\"olm\">\n            Namespace <b>{{ operatorSuggestedNamespace }}</b> does not exist and will be created.\n          </Trans>\n        )}\n      </Alert>\n      {showMonitoringCheckbox && !suggestedNamespaceExists && (\n        <div className=\"co-form-subsection\">\n          <Checkbox\n            id=\"enable-monitoring-checkbox\"\n            data-test=\"enable-monitoring\"\n            label={t('olm~Enable Operator recommended cluster monitoring on this Namespace')}\n            onChange={(_event, value) => setEnableMonitoring(value)}\n            isChecked={enableMonitoring}\n            data-checked-state={enableMonitoring}\n          />\n          {!props.packageManifest.data[0].metadata.labels.provider?.includes('Red Hat') && (\n            <Alert\n              isInline\n              className=\"co-alert pf-v5-c-alert--top-margin\"\n              variant=\"warning\"\n              title={t('olm~Namespace monitoring')}\n            >\n              <>\n                {t(\n                  'olm~Please note that installing non-Red Hat operators into OpenShift namespaces and enabling monitoring voids user support. Enabling cluster monitoring for non-Red Hat operators can lead to malicious metrics data overriding existing cluster metrics.',\n                )}\n                {!isManaged() && (\n                  <Trans ns=\"olm\">\n                    {' '}\n                    For more information, see the{' '}\n                    <ExternalLink href={monitoringURL}>\n                      cluster monitoring documentation\n                    </ExternalLink>\n                    .\n                  </Trans>\n                )}\n              </>\n            </Alert>\n          )}\n        </div>\n      )}\n    </>\n  );\n\n  const installedNamespaceOptions = (\n    <div className=\"form-group\">\n      <RadioInput\n        onChange={() => {\n          setUseSuggestedNSForSingleInstallMode(true);\n          setTargetNamespace(operatorSuggestedNamespace);\n        }}\n        value={operatorSuggestedNamespace}\n        checked={useSuggestedNSForSingleInstallMode}\n        title={t('olm~Operator recommended Namespace:')}\n      >\n        {' '}\n        <ResourceIcon kind=\"Project\" />\n        <b>{operatorSuggestedNamespace}</b>\n      </RadioInput>\n      <RadioInput\n        onChange={() => {\n          setUseSuggestedNSForSingleInstallMode(false);\n          setTargetNamespace(null);\n        }}\n        value={operatorSuggestedNamespace}\n        checked={!useSuggestedNSForSingleInstallMode}\n        title={t('olm~Select a Namespace')}\n      />\n      {!useSuggestedNSForSingleInstallMode && (\n        <>\n          <NsDropdown\n            id=\"dropdown-selectbox\"\n            selectedKey={selectedTargetNamespace}\n            onChange={(ns) => setTargetNamespace(ns)}\n            dataTest=\"dropdown-selectbox\"\n          />\n          <Alert\n            isInline\n            className=\"co-alert pf-v5-c-alert--top-margin\"\n            variant=\"warning\"\n            title={t(\n              'olm~Not installing the Operator into the recommended namespace can cause unexpected behavior.',\n            )}\n          />\n        </>\n      )}\n    </div>\n  );\n\n  const installedNamespaceSelect = (\n    <div className=\"form-group\">\n      <NsDropdown\n        id=\"dropdown-selectbox\"\n        selectedKey={selectedTargetNamespace}\n        onChange={(ns) => setTargetNamespace(ns)}\n        dataTest=\"dropdown-selectbox\"\n      />\n    </div>\n  );\n\n  const globalNamespaceInstallMode = (\n    <>\n      {operatorSuggestedNamespace ? (\n        <>{installedNamespaceOptions}</>\n      ) : (\n        <>{installedNamespaceSelect}</>\n      )}\n      {useSuggestedNSForSingleInstallMode && suggestedNamespaceDetails}\n    </>\n  );\n\n  const singleNamespaceInstallMode = !suggestedNamespace ? (\n    <>{installedNamespaceSelect}</>\n  ) : (\n    <>\n      {installedNamespaceOptions}\n      {useSuggestedNSForSingleInstallMode && suggestedNamespaceDetails}\n    </>\n  );\n\n  const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(updateChannelName);\n\n  const isApprovalItemDisabled =\n    version !== currentLatestVersion || manualSubscriptionsInNamespace?.length > 0;\n\n  return (\n    <>\n      <Helmet>\n        <title>Operator Installation</title>\n      </Helmet>\n      <PageHeading\n        title={t('olm~Install Operator')}\n        breadcrumbs={[\n          { name: t('olm~OperatorHub'), path: `/operatorhub?${search.toString()}` },\n          { name: t('olm~Operator Installation'), path: url },\n        ]}\n        helpText={t(\n          'olm~Install your Operator by subscribing to one of the update channels to keep the Operator up to date. The strategy determines either manual or automatic updates.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        {tokenizedAuth === 'AWS' && showCSTokenWarn && (\n          <CloudServiceTokenWarningAlert\n            title={t('olm~Cluster in STS Mode')}\n            message={t(\n              'olm~This cluster is using AWS Security Token Service to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, you will need to provide a role ARN (with an attached policy) during installation. Manual subscriptions are highly recommended as steps should be taken prior to upgrade to ensure that the permissions required by the next version are properly accounted for in the role. Please see the operator description for more details.',\n            )}\n            onClose={() => setShowCSTokenWarn(false)}\n          />\n        )}\n        {tokenizedAuth === 'Azure' && showCSTokenWarn && (\n          <CloudServiceTokenWarningAlert\n            title={t('olm~Cluster in Azure Workload Identity / Federated Identity Mode')}\n            message={t(\n              'olm~This cluster is using Azure Workload Identity / Federated Identity to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, provide the Client ID, Tenant ID, and Subscription ID during installation. Manual subscriptions are highly recommended as steps should be taken before upgrade to ensure that the permissions required by the next version are properly accounted for in the role. See the operator description for more details.',\n            )}\n            onClose={() => setShowCSTokenWarn(false)}\n          />\n        )}{' '}\n        {tokenizedAuth === 'GCP' && showCSTokenWarn && (\n          <CloudServiceTokenWarningAlert\n            title={t('olm~Cluster in GCP Workload Identity / Federated Identity Mode')}\n            message={t(\n              'olm~This cluster is using GCP Workload Identity / Federated Identity to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, provide the Pool ID, Provider ID, and Service Account Email during installation. Manual subscriptions are highly recommended as steps should be taken before upgrade to ensure that the permissions required by the next version are properly accounted for in the role. See the operator description for more details.',\n            )}\n            onClose={() => setShowCSTokenWarn(false)}\n          />\n        )}\n        <div className=\"row\">\n          <div className=\"col-xs-6\">\n            <>\n              {tokenizedAuth === 'AWS' && (\n                <div className=\"form-group\">\n                  <InputField\n                    label={t('olm~role ARN')}\n                    helpText={t(\n                      'olm~The role ARN required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~role ARN')}\n                    ariaLabel={t('olm~role ARN')}\n                    value={roleARNText}\n                    setValue={setRoleARNText}\n                  />\n                </div>\n              )}\n              {tokenizedAuth === 'Azure' && (\n                <div className=\"form-group\">\n                  <InputField\n                    label={t('olm~Azure Client ID')}\n                    helpText={t(\n                      'olm~The Azure Client ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~Azure Client ID')}\n                    ariaLabel={t('olm~Azure Client ID')}\n                    value={azureClientId}\n                    setValue={setAzureClientId}\n                  />\n                  <InputField\n                    label={t('olm~Azure Tenant ID')}\n                    helpText={t(\n                      'olm~The Azure Tenant ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~Azure Tenant ID')}\n                    ariaLabel={t('olm~Azure Tenant ID')}\n                    value={azureTenantId}\n                    setValue={setAzureTenantId}\n                  />\n\n                  <InputField\n                    label={t('olm~Azure Subscription ID')}\n                    helpText={t(\n                      'olm~The Azure Subscription ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~Azure Subscription ID')}\n                    ariaLabel={t('olm~Azure Subscription ID')}\n                    value={azureSubscriptionId}\n                    setValue={setAzureSubscriptionId}\n                  />\n                </div>\n              )}\n              {tokenizedAuth === 'GCP' && (\n                <div className=\"form-group\">\n                  <InputField\n                    label={t('olm~GCP Project Number')}\n                    helpText={t(\n                      'olm~The GCP Project Number required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Project Number')}\n                    ariaLabel={t('olm~GCP Project Number')}\n                    value={gcpProjectNumber}\n                    setValue={setGcpProjectNumber}\n                  />\n                  <InputField\n                    label={t('olm~GCP Pool ID')}\n                    helpText={t(\n                      'olm~The GCP Pool ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Pool ID')}\n                    ariaLabel={t('olm~GCP Pool ID')}\n                    value={gcpPoolId}\n                    setValue={setGcpPoolId}\n                  />\n                  <InputField\n                    label={t('olm~GCP Provider ID')}\n                    helpText={t(\n                      'olm~The GCP Provider ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Provider ID')}\n                    ariaLabel={t('olm~GCP Provider ID')}\n                    value={gcpProviderId}\n                    setValue={setGcpProviderId}\n                  />\n                  <InputField\n                    label={t('olm~Service Account Email')}\n                    helpText={t(\n                      'olm~The GCP Service Account Email required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Service Account Email')}\n                    ariaLabel={t('olm~GCP Service Account Email')}\n                    value={gcpServiceAcctEmail}\n                    setValue={setGcpServiceAcctEmail}\n                  />\n                </div>\n              )}\n              <div className=\"form-group\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Update channel')}</label>\n                  <FieldLevelHelp>\n                    {t('olm~The channel to track and receive the updates from.')}\n                  </FieldLevelHelp>\n                  <OperatorChannelSelect\n                    packageManifest={props.packageManifest.data[0]}\n                    selectedUpdateChannel={updateChannelName}\n                    setUpdateChannel={setUpdateChannelName}\n                    setUpdateVersion={setUpdateVersion}\n                  />\n                </fieldset>\n              </div>\n              <div className=\"form-group form-group--doubled-bottom-margin\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Version')}</label>\n                  <OperatorVersionSelect\n                    packageManifest={props.packageManifest.data[0]}\n                    selectedUpdateChannel={updateChannelName}\n                    updateVersion={updateVersion}\n                    setUpdateVersion={setUpdateVersion}\n                    showVersionAlert\n                  />\n                </fieldset>\n              </div>\n              <div className=\"form-group\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Installation mode')}</label>\n                  <RadioInput\n                    onChange={(e) => {\n                      setInstallMode(e.target.value);\n                      setTargetNamespace(null);\n                      setCannotResolve(false);\n                    }}\n                    value={InstallModeType.InstallModeTypeAllNamespaces}\n                    checked={selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces}\n                    disabled={!supportsGlobal}\n                    title={t('olm~All namespaces on the cluster')}\n                    subTitle={t('olm~(default)')}\n                  >\n                    <div className=\"co-m-radio-desc\">\n                      <p className=\"text-muted\">\n                        {descFor(InstallModeType.InstallModeTypeAllNamespaces)}\n                      </p>\n                    </div>\n                  </RadioInput>\n                  <RadioInput\n                    onChange={(e) => {\n                      setInstallMode(e.target.value);\n                      setTargetNamespace(\n                        useSuggestedNSForSingleInstallMode ? operatorSuggestedNamespace : null,\n                      );\n                      setCannotResolve(false);\n                    }}\n                    value={InstallModeType.InstallModeTypeOwnNamespace}\n                    checked={selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace}\n                    disabled={!supportsSingle}\n                    title={t('olm~A specific namespace on the cluster')}\n                  >\n                    <div className=\"co-m-radio-desc\">\n                      <p className=\"text-muted\">\n                        {descFor(InstallModeType.InstallModeTypeOwnNamespace)}\n                      </p>\n                    </div>\n                  </RadioInput>\n                </fieldset>\n              </div>\n              <div className=\"form-group form-group--doubled-bottom-margin\">\n                <label className=\"co-required\" htmlFor=\"dropdown-selectbox\">\n                  {t('olm~Installed Namespace')}\n                </label>\n                {selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces &&\n                  globalNamespaceInstallMode}\n                {selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n                  singleNamespaceInstallMode}\n              </div>\n              <div className=\"form-group\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Update approval')}</label>\n                  <FieldLevelHelp>\n                    {t('olm~The strategy to determine either manual or automatic updates.')}\n                  </FieldLevelHelp>\n                  <RadioGroup\n                    currentValue={approval}\n                    items={[\n                      {\n                        value: InstallPlanApproval.Automatic,\n                        title: t('olm~Automatic'),\n                        disabled: isApprovalItemDisabled,\n                      },\n                      {\n                        value: InstallPlanApproval.Manual,\n                        title: t('olm~Manual'),\n                      },\n                    ]}\n                    onChange={(e) => {\n                      const { value } = e.currentTarget;\n                      setApproval(value);\n                      if (value === InstallPlanApproval.Automatic) {\n                        setUpdateVersion(currentLatestVersion);\n                      }\n                    }}\n                  />\n                  {approval === InstallPlanApproval.Automatic &&\n                    manualSubscriptionsInNamespace?.length > 0 && (\n                      <Alert\n                        isInline\n                        className=\"co-alert co-alert--margin-top\"\n                        variant=\"info\"\n                        title={t('olm~Will function as manual approval strategy')}\n                      >\n                        <NamespaceIncludesManualApproval\n                          subscriptions={manualSubscriptionsInNamespace}\n                          namespace={selectedTargetNamespace}\n                        />\n                      </Alert>\n                    )}\n                  {approval === InstallPlanApproval.Manual && (\n                    <Alert\n                      isInline\n                      className=\"co-alert co-alert--margin-top\"\n                      variant=\"info\"\n                      title={t('olm~Manual approval applies to all operators in a namespace')}\n                    >\n                      <Trans ns=\"olm\">\n                        Installing an operator with manual approval causes all operators installed\n                        in namespace <strong>{{ selectedTargetNamespace }}</strong> to function as\n                        manual approval strategy and will be updated altogether. Install operators\n                        into separate namespaces for handling their updates independently. To allow\n                        automatic approval, all operators installed in the namespace must use\n                        automatic approval strategy.\n                      </Trans>\n                    </Alert>\n                  )}\n                </fieldset>\n              </div>\n              {csvPlugins.length > 0 && consoleOperatorConfig && canPatchConsoleOperatorConfig && (\n                <ConsolePluginFormGroup\n                  catalogSource={catalogSource}\n                  csvPlugins={csvPlugins}\n                  enabledPlugins={enabledPlugins}\n                  setPluginEnabled={setPluginEnabled}\n                />\n              )}\n            </>\n            {deprecatedWarning && (\n              <DeprecatedOperatorWarningAlert\n                deprecatedPackage={deprecatedPackage}\n                deprecatedChannel={deprecatedChannel}\n                deprecatedVersion={deprecatedVersion}\n              />\n            )}\n            <div className=\"co-form-section__separator\" />\n            {formError()}\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button\n                data-test=\"install-operator\"\n                onClick={() => submit()}\n                isDisabled={formValid()}\n                variant=\"primary\"\n              >\n                {t('olm~Install')}\n              </Button>\n              <Button variant=\"secondary\" onClick={() => history.push('/operatorhub')}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </div>\n          <div className=\"col-xs-6\">\n            <ClusterServiceVersionLogo\n              displayName={\n                currentCSVDesc?.displayName || channels?.[0]?.currentCSVDesc?.displayName\n              }\n              icon={iconFor(props.packageManifest.data[0])}\n              provider={provider}\n              deprecation={packageManifest?.status?.deprecation}\n            />\n            <h4>{t('olm~Provided APIs')}</h4>\n            <div className=\"co-crd-card-row\">\n              {!providedAPIs.length ? (\n                <span className=\"text-muted\">\n                  {t('olm~No Kubernetes APIs are provided by this Operator.')}\n                </span>\n              ) : (\n                providedAPIs.map((api) => (\n                  <CRDCard\n                    key={referenceForProvidedAPI(api)}\n                    canCreate={false}\n                    crd={api}\n                    csv={null}\n                    required={referenceForProvidedAPI(api) === initializationResourceReference}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst OperatorHubSubscribe: React.FC<OperatorHubSubscribeFormProps> = (props) => (\n  <StatusBox data={props.packageManifest.data[0]} loaded={props.loaded} loadError={props.loadError}>\n    <OperatorHubSubscribeForm {...props} />\n  </StatusBox>\n);\n\nexport const OperatorHubSubscribePage: React.SFC = (props) => {\n  return (\n    <Firehose\n      resources={[\n        {\n          isList: true,\n          kind: referenceForModel(OperatorGroupModel),\n          prop: 'operatorGroup',\n        },\n        {\n          isList: true,\n          kind: referenceForModel(PackageManifestModel),\n          namespace: new URLSearchParams(window.location.search).get('catalogNamespace'),\n          fieldSelector: `metadata.name=${new URLSearchParams(window.location.search).get('pkg')}`,\n          selector: {\n            matchLabels: {\n              catalog: new URLSearchParams(window.location.search).get('catalog'),\n            },\n          },\n          prop: 'packageManifest',\n        },\n        {\n          isList: true,\n          kind: referenceForModel(SubscriptionModel),\n          prop: 'subscription',\n        },\n      ]}\n    >\n      {/* FIXME(alecmerdler): Hack because `Firehose` injects props without TypeScript knowing about it */}\n      <OperatorHubSubscribe\n        {...(props as any)}\n        targetNamespace={new URLSearchParams(window.location.search).get('targetNamespace') || null}\n      />\n    </Firehose>\n  );\n};\n\nexport type OperatorHubSubscribeFormProps = {\n  loaded: boolean;\n  loadError?: any;\n  namespace: string;\n  targetNamespace?: string;\n  operatorGroup: { loaded: boolean; data: OperatorGroupKind[] };\n  packageManifest: { loaded: boolean; data: PackageManifestKind[] };\n  subscription: { loaded: boolean; data: SubscriptionKind[] };\n};\n\ntype InputFieldProps = {\n  label: string;\n  helpText: string;\n  placeholder: string;\n  ariaLabel: string;\n  value: string;\n  setValue: (value: string) => void;\n};\n\ntype CloudServiceTokenWarningAlertProps = {\n  title: string;\n  message: string;\n  onClose: (value: boolean) => void;\n};\n\nOperatorHubSubscribe.displayName = 'OperatorHubSubscribe';\nOperatorHubSubscribeForm.displayName = 'OperatorHubSubscribeForm';\nOperatorHubSubscribePage.displayName = 'OperatorHubSubscribePage';\n","import * as React from 'react';\nimport { ExtensionCatalogDatabaseContextValues } from './types';\n\nexport const ExtensionCatalogDatabaseContext = React.createContext<\n  ExtensionCatalogDatabaseContextValues\n>({ done: false, error: null });\n\nexport default ExtensionCatalogDatabaseContext.Provider;\n","import * as React from 'react';\nimport { Page, PageSection } from '@patternfly/react-core';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ConsoleEmptyState,\n  PageHeading,\n  skeletonCatalog,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport {\n  InstalledState,\n  OperatorHubItem,\n} from '@console/operator-lifecycle-manager/src/components/operator-hub';\nimport { OperatorHubTileView } from '@console/operator-lifecycle-manager/src/components/operator-hub/operator-hub-items';\nimport { useActiveNamespace } from '@console/shared/src/hooks/useActiveNamespace';\nimport { ExtensionCatalogItem } from '../database/types';\nimport { useExtensionCatalogItems } from '../hooks/useExtensionCatalogItems';\n\nconst mapExtensionItemsToLegacyOperatorHubItems = (packages: ExtensionCatalogItem[]) => {\n  return (packages ?? []).map<OperatorHubItem>(\n    ({\n      categories,\n      capabilities,\n      description,\n      displayName,\n      icon,\n      infrastructureFeatures,\n      keywords,\n      longDescription,\n      name,\n      provider,\n      source,\n      validSubscription,\n    }) => ({\n      authentication: null,\n      capabilityLevel: capabilities,\n      catalogSource: '',\n      catalogSourceNamespace: '',\n      categories,\n      cloudCredentials: null,\n      description: description || longDescription,\n      infraFeatures: infrastructureFeatures,\n      infrastructure: null,\n      installed: false,\n      installState: InstalledState.NotInstalled,\n      kind: null,\n      longDescription: longDescription || description,\n      name: displayName || name,\n      obj: null,\n      provider,\n      source,\n      tags: keywords,\n      uid: name,\n      validSubscription,\n      ...(icon ? { imgUrl: `data:${icon.mediatype};base64,${icon.base64data}` } : {}),\n    }),\n  );\n};\n\nconst ExtensionCatalog = () => {\n  const { t } = useTranslation('olm-v1');\n  const [extensionCatalogItems, loading, error] = useExtensionCatalogItems();\n  const [namespace] = useActiveNamespace();\n  const legacyOpertorHubItems = mapExtensionItemsToLegacyOperatorHubItems(extensionCatalogItems);\n\n  return (\n    <Page>\n      <PageSection>\n        <Helmet>\n          <title>{t('Extension Catalog')}</title>\n        </Helmet>\n        <PageHeading title={t('Extension Catalog')} />\n        <StatusBox\n          skeleton={skeletonCatalog}\n          data={legacyOpertorHubItems}\n          loaded={!loading}\n          loadError={error}\n          label={t('Extension Catalog items')}\n          EmptyMsg={() => (\n            <ConsoleEmptyState title={t('No Extension Catalog items found')}>\n              {t(\n                'Check that OLM v1 is configured and at least one valid ClusterCatalog has been created.',\n              )}\n            </ConsoleEmptyState>\n          )}\n        >\n          <OperatorHubTileView items={legacyOpertorHubItems} namespace={namespace} />\n        </StatusBox>\n      </PageSection>\n    </Page>\n  );\n};\n\nexport default ExtensionCatalog;\n","import * as React from 'react';\nimport { Label, FormAlert, Alert, Tooltip, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { YellowExclamationTriangleIcon } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\nimport { SubscriptionKind } from '../../types';\n\nexport enum DeprecatedOperatorType {\n  PackageDeprecated = 'PackageDeprecated',\n  ChannelDeprecated = 'ChannelDeprecated',\n  VersionDeprecated = 'BundleDeprecated',\n}\nconst findDeprecation = (obj: SubscriptionKind, type: string): DeprecatedOperatorWarning => {\n  return { deprecation: obj?.status?.conditions?.find((f) => f.type === type) };\n};\n\nexport const findDeprecatedOperator = (\n  obj: SubscriptionKind,\n): {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n} => {\n  return {\n    deprecatedPackage: findDeprecation(obj, DeprecatedOperatorType.PackageDeprecated),\n    deprecatedChannel: findDeprecation(obj, DeprecatedOperatorType.ChannelDeprecated),\n    deprecatedVersion: findDeprecation(obj, DeprecatedOperatorType.VersionDeprecated),\n  };\n};\n\nexport const DeprecatedOperatorWarningBadge: React.FC<DeprecatedOperatorWarningBadge> = ({\n  deprecation,\n  className,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <Label\n        data-test=\"deprecated-operator-warning-badge\"\n        color=\"orange\"\n        className={className}\n        icon={<YellowExclamationTriangleIcon />}\n      >\n        {t('olm~Deprecated')}\n      </Label>\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningIcon: React.FC<DeprecatedOperatorWarningIcon> = ({\n  deprecation,\n  dataTest,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <YellowExclamationTriangleIcon dataTest={dataTest} className=\"pf-v5-u-ml-xs\" />\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningAlert: React.FC<DeprecatedOperatorWarningProps> = ({\n  deprecatedPackage,\n  deprecatedChannel,\n  deprecatedVersion,\n  dismissible,\n}) => {\n  const { t } = useTranslation();\n  const [alertVisible, setAlertVisible] = React.useState<boolean>(true);\n\n  return (\n    alertVisible && (\n      <FormAlert className=\"pf-v5-u-my-md\">\n        <Alert\n          variant=\"warning\"\n          title={t('olm~Deprecated warnings')}\n          aria-live=\"polite\"\n          isInline\n          actionClose={\n            dismissible && <AlertActionCloseButton onClose={() => setAlertVisible(false)} />\n          }\n        >\n          <div data-test=\"deprecated-operator-warning-package\">\n            {deprecatedPackage?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-channel\">\n            {deprecatedChannel?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-version\">\n            {deprecatedVersion?.deprecation?.message}\n          </div>\n        </Alert>\n      </FormAlert>\n    )\n  );\n};\n\ntype DeprecatedOperatorWarningBadge = {\n  className?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningIcon = {\n  dataTest?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningProps = {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n  dismissible?: boolean;\n};\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nexport enum DescriptorType {\n  spec = 'spec',\n  status = 'status',\n}\n\nexport enum SpecCapability {\n  podCount = 'urn:alm:descriptor:com.tectonic.ui:podCount',\n  endpointList = 'urn:alm:descriptor:com.tectonic.ui:endpointList',\n  label = 'urn:alm:descriptor:com.tectonic.ui:label',\n  resourceRequirements = 'urn:alm:descriptor:com.tectonic.ui:resourceRequirements',\n  selector = 'urn:alm:descriptor:com.tectonic.ui:selector:',\n  namespaceSelector = 'urn:alm:descriptor:com.tectonic.ui:namespaceSelector',\n  k8sResourcePrefix = 'urn:alm:descriptor:io.kubernetes:',\n  booleanSwitch = 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch',\n  password = 'urn:alm:descriptor:com.tectonic.ui:password',\n  checkbox = 'urn:alm:descriptor:com.tectonic.ui:checkbox',\n  imagePullPolicy = 'urn:alm:descriptor:com.tectonic.ui:imagePullPolicy',\n  updateStrategy = 'urn:alm:descriptor:com.tectonic.ui:updateStrategy',\n  text = 'urn:alm:descriptor:com.tectonic.ui:text',\n  number = 'urn:alm:descriptor:com.tectonic.ui:number',\n  nodeAffinity = 'urn:alm:descriptor:com.tectonic.ui:nodeAffinity',\n  podAffinity = 'urn:alm:descriptor:com.tectonic.ui:podAffinity',\n  podAntiAffinity = 'urn:alm:descriptor:com.tectonic.ui:podAntiAffinity',\n  fieldGroup = 'urn:alm:descriptor:com.tectonic.ui:fieldGroup:',\n  arrayFieldGroup = 'urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:',\n  select = 'urn:alm:descriptor:com.tectonic.ui:select:',\n  advanced = 'urn:alm:descriptor:com.tectonic.ui:advanced',\n  fieldDependency = 'urn:alm:descriptor:com.tectonic.ui:fieldDependency:',\n  hidden = 'urn:alm:descriptor:com.tectonic.ui:hidden',\n}\n\nexport enum StatusCapability {\n  podStatuses = 'urn:alm:descriptor:com.tectonic.ui:podStatuses',\n  podCount = 'urn:alm:descriptor:com.tectonic.ui:podCount',\n  w3Link = 'urn:alm:descriptor:org.w3:link',\n  conditions = 'urn:alm:descriptor:io.kubernetes.conditions',\n  text = 'urn:alm:descriptor:text',\n  prometheusEndpoint = 'urn:alm:descriptor:prometheusEndpoint',\n  k8sPhase = 'urn:alm:descriptor:io.kubernetes.phase',\n  k8sPhaseReason = 'urn:alm:descriptor:io.kubernetes.phase:reason',\n  password = 'urn:alm:descriptor:com.tectonic.ui:password',\n  // Prefix for all kubernetes resource status descriptors.\n  k8sResourcePrefix = 'urn:alm:descriptor:io.kubernetes:',\n  hidden = 'urn:alm:descriptor:com.tectonic.ui:hidden',\n}\n\nexport enum CommonCapability {\n  podCount = 'urn:alm:descriptor:com.tectonic.ui:podCount',\n  k8sResourcePrefix = 'urn:alm:descriptor:io.kubernetes:',\n  hidden = 'urn:alm:descriptor:com.tectonic.ui:hidden',\n  password = 'urn:alm:descriptor:com.tectonic.ui:password',\n}\n\nexport type Descriptor<T = any> = {\n  path: string;\n  displayName: string;\n  description: string;\n  'x-descriptors'?: T[];\n  value?: any;\n};\n\nexport type SpecDescriptor = Descriptor<SpecCapability>;\nexport type StatusDescriptor = Descriptor<StatusCapability>;\n\nexport type CapabilityProps<C extends SpecCapability | StatusCapability, V = any> = {\n  capability?: C;\n  className?: string;\n  description?: string;\n  descriptor: Descriptor<C>;\n  fullPath?: string[];\n  label?: string;\n  model?: K8sKind;\n  namespace?: string;\n  obj?: K8sResourceKind;\n  onError?: (error: Error) => void;\n  value: V;\n};\n\nexport type Error = { message: string };\n","import { getSchemaType } from '@rjsf/core/dist/cjs/utils';\nimport { JSONSchema7 } from 'json-schema';\nimport * as _ from 'lodash';\nimport { getSchemaAtPath } from '@console/shared';\nimport {\n  ARRAY_COMPATIBLE_CAPABILITIES,\n  DEPRECATED_CAPABILITIES,\n  OBJECT_COMPATIBLE_CAPABILITIES,\n  PRIMITIVE_COMPATIBLE_CAPABILITIES,\n  REGEXP_ARRAY_PATH,\n  REGEXP_CAPTURE_GROUP_SUBGROUP,\n  REGEXP_NESTED_ARRAY_PATH,\n  COMMON_COMPATIBLE_CAPABILITIES,\n  CAPABILITY_SORT_ORDER,\n} from './const';\nimport { Descriptor, SpecCapability, StatusCapability, CommonCapability } from './types';\n\nexport const useCalculatedDescriptorProperties = (descriptorType, descriptor, schema, obj) => {\n  const propertySchema = getSchemaAtPath(schema, `${descriptorType}.${descriptor.path}`);\n  const fullPath = [descriptorType, ..._.toPath(descriptor.path)];\n  const displayName =\n    descriptor.displayName || propertySchema?.title || _.startCase(_.last(fullPath));\n  const description = descriptor?.description || propertySchema?.description || '';\n  const value = _.get(obj, fullPath, descriptor.value);\n  return {\n    description,\n    displayName,\n    fullPath,\n    propertySchema,\n    value,\n  };\n};\n\n// Creates a structure for rendering grouped descriptors on the operand details page.\nexport const groupDescriptorDetails = (\n  descriptors: Descriptor[],\n): { [group: string]: DescriptorGroup } =>\n  descriptors.reduce((acc, descriptor) => {\n    const handleArrayDescriptor = () => {\n      const [, beforeIndex, afterIndex] = descriptor.path.match(REGEXP_ARRAY_PATH) ?? [];\n      const [, group, subgroup] = beforeIndex?.match(REGEXP_CAPTURE_GROUP_SUBGROUP) ?? [];\n      return subgroup\n        ? {\n            ...acc,\n            [group]: {\n              ...(acc?.[group] ?? {}),\n              nested: {\n                ...(acc?.[group]?.nested ?? {}),\n                [subgroup]: {\n                  ...(acc?.[group]?.nested?.[subgroup] ?? {}),\n                  arrayGroupPath: beforeIndex,\n                  isArrayGroup: true,\n                  ...(afterIndex\n                    ? {\n                        nested: {\n                          ...(acc?.[group]?.nested?.[subgroup]?.nested ?? {}),\n                          [afterIndex]: descriptor,\n                        },\n                      }\n                    : { elementDescriptor: descriptor }),\n                },\n              },\n            },\n          }\n        : {\n            ...acc,\n            [group]: {\n              ...(acc?.[group] ?? {}),\n              arrayGroupPath: beforeIndex,\n              isArrayGroup: true,\n              ...(afterIndex\n                ? {\n                    nested: {\n                      ...(acc?.[group]?.nested ?? {}),\n                      [afterIndex]: descriptor,\n                    },\n                  }\n                : { elementDescriptor: descriptor }),\n            },\n          };\n    };\n\n    // Ignore nested arrays and hidden descriptors.\n    if (\n      REGEXP_NESTED_ARRAY_PATH.test(descriptor.path) ||\n      descriptor?.['x-descriptors']?.includes(CommonCapability.hidden)\n    ) {\n      return acc;\n    }\n\n    if (REGEXP_ARRAY_PATH.test(descriptor.path)) {\n      return handleArrayDescriptor();\n    }\n\n    const [, group, subgroup] = descriptor.path.match(REGEXP_CAPTURE_GROUP_SUBGROUP) ?? [];\n    return group\n      ? {\n          ...acc,\n          [group]: {\n            ...(acc?.[group] ?? {}),\n            ...(subgroup\n              ? {\n                  nested: {\n                    ...(acc?.[group]?.nested ?? {}),\n                    [subgroup]: {\n                      ...(acc?.[group]?.nested?.[subgroup] ?? {}),\n                      descriptor,\n                    },\n                  },\n                }\n              : { descriptor }),\n          },\n        }\n      : acc;\n  }, {});\n\n// Replace '.', '[', and '].' with '/'.\nexport const getPatchPathFromDescriptor = (descriptor: Descriptor): string =>\n  _.toPath(descriptor.path).join('/');\n\n// Given a type, return a static list of x-descriptors that are compatible\nconst getCompatibleCapabilities = (type: string): (StatusCapability | SpecCapability)[] => {\n  switch (type) {\n    case 'object':\n      return [...COMMON_COMPATIBLE_CAPABILITIES, ...OBJECT_COMPATIBLE_CAPABILITIES];\n    case 'array':\n      return [...COMMON_COMPATIBLE_CAPABILITIES, ...ARRAY_COMPATIBLE_CAPABILITIES];\n    default:\n      return [...COMMON_COMPATIBLE_CAPABILITIES, ...PRIMITIVE_COMPATIBLE_CAPABILITIES];\n  }\n};\n\n// Given type and descriptor, return a list of non-deprecated x-descriptors compatible with type.\n// Deprecated and incompatible x-descriptors are logged as warnings in console. If\n// 'allowDeprecated' is true, deprecated x-descriptors are logged but still returned as valid.\nexport function getValidCapabilitiesForDataType<CapabilityType extends string = SpecCapability>(\n  descriptor: Descriptor<CapabilityType>,\n  type: string,\n): CapabilityType[] {\n  const compatibleCapabilities = getCompatibleCapabilities(type);\n  return (descriptor?.['x-descriptors'] ?? [])\n    .filter((capability) => {\n      const isCompatible =\n        type === 'any' ||\n        compatibleCapabilities.some((compatibleCapability) =>\n          capability.startsWith(compatibleCapability),\n        );\n      const isDeprecated = DEPRECATED_CAPABILITIES.some((deprecatedCapability) =>\n        capability.startsWith(deprecatedCapability),\n      );\n\n      if (isDeprecated) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Deprecated x-descriptor] \"${capability}\" is deprecated and support will be removed in a future release.`,\n          descriptor,\n        );\n      }\n\n      if (!isCompatible) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Invalid x-descriptor] \"${capability}\" is incompatible with ${type} values and will have no effect`,\n          descriptor,\n        );\n        return false;\n      }\n\n      return true;\n    })\n    .sort((a, b) => {\n      const aIndex = CAPABILITY_SORT_ORDER.findIndex((capability) => a.startsWith(capability));\n      const bIndex = CAPABILITY_SORT_ORDER.findIndex((capability) => b.startsWith(capability));\n      // If either a or b don't exist in the sorting array, sort the missing item last\n      if (aIndex < 0 || bIndex < 0) {\n        return bIndex - aIndex;\n      }\n      return aIndex - bIndex;\n    });\n}\n\nconst getValueType = (value: any): string => {\n  // Consider nil values 'any' since every descriptor should render empty state in this case\n  if (_.isNil(value)) {\n    return 'any';\n  }\n\n  // Array check must come before object check because _.isObject will return true on array values\n  return _.isArray(value) ? 'array' : _.isObject(value) ? 'object' : 'primitive';\n};\n\nexport function getValidCapabilitiesForValue<CapabilityType extends string = SpecCapability>(\n  descriptor: Descriptor<CapabilityType>,\n  value: any,\n): CapabilityType[] {\n  const type = getValueType(value);\n  return getValidCapabilitiesForDataType<CapabilityType>(descriptor, type);\n}\n\nexport function getValidCapabilitiesForSchema<CapabilityType extends string = SpecCapability>(\n  descriptor: Descriptor<CapabilityType>,\n  schema: JSONSchema7,\n): CapabilityType[] {\n  const type = getSchemaType(schema);\n  return getValidCapabilitiesForDataType<CapabilityType>(descriptor, type);\n}\n\nexport const isMainStatusDescriptor = (descriptor: Descriptor): boolean =>\n  descriptor.path === 'status' || descriptor.displayName === 'Status';\n\nexport type DescriptorGroup = {\n  arrayGroupPath?: string; // Path to the array that this descriptor group represents\n  descriptor?: Descriptor; // Descriptor for the root level group.\n  elementDescriptor?: Descriptor; // For array groups, the descriptor that applies to each array element\n  isArrayGroup?: boolean; // True if this group describes an array property\n  // Descriptor groups which are encompassed by this group\n  nested?: {\n    [key: string]: DescriptorGroup;\n  };\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\nimport operatorLogo from '../operator.svg';\nimport { ClusterServiceVersionIcon } from '../types';\nimport { DeprecatedOperatorWarningBadge } from './deprecated-operator-warnings/deprecated-operator-warnings';\n\nexport const ClusterServiceVersionLogo: React.FC<ClusterServiceVersionLogoProps> = (props) => {\n  const { icon, displayName, provider, version, deprecation } = props;\n  const { t } = useTranslation();\n\n  const imgSrc: string = _.isString(icon)\n    ? icon\n    : _.isEmpty(icon)\n    ? operatorLogo\n    : `data:${icon.mediatype};base64,${icon.base64data}`;\n\n  return (\n    <div className=\"co-clusterserviceversion-logo\">\n      <div className=\"co-clusterserviceversion-logo__icon\">\n        <span className=\"co-catalog-item-icon__bg\">\n          <img\n            className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n            src={imgSrc}\n            alt={displayName}\n            aria-hidden\n          />\n        </span>\n      </div>\n      <div className=\"co-clusterserviceversion-logo__name\">\n        <h1 className=\"co-clusterserviceversion-logo__name__clusterserviceversion\">\n          {displayName}{' '}\n          {deprecation && (\n            <DeprecatedOperatorWarningBadge className=\"pf-v5-u-ml-sm\" deprecation={deprecation} />\n          )}\n        </h1>\n        {provider && (\n          <span className=\"co-clusterserviceversion-logo__name__provider text-muted\">\n            {t('olm~{{version}} provided by {{provider}}', {\n              version: version || '',\n              provider: _.get(provider, 'name', provider),\n            })}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\nexport type ClusterServiceVersionLogoProps = {\n  displayName: string;\n  icon: ClusterServiceVersionIcon | string;\n  provider?: { name: string } | string;\n  version?: string;\n} & DeprecatedOperatorWarning;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { referenceForModel, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '../../models';\n\nexport const csvNameFromWindow = () =>\n  window.location.pathname\n    .split('/')\n    .find(\n      (part, i, allParts) =>\n        allParts[i - 1] === referenceForModel(ClusterServiceVersionModel) ||\n        allParts[i - 1] === ClusterServiceVersionModel.plural,\n    );\n\nexport const OperandLink: React.FC<OperandLinkProps> = (props) => {\n  const { namespace, name } = props.obj.metadata;\n  const csvName = props.csvName || csvNameFromWindow();\n\n  const reference = referenceFor(props.obj);\n  const to = namespace\n    ? `/k8s/ns/${namespace}/${ClusterServiceVersionModel.plural}/${csvName}/${reference}/${name}`\n    : `/k8s/cluster/${reference}/${name}`;\n  const classes = classNames('co-resource-item', {\n    'co-resource-item--inline': props.inline,\n  });\n\n  return (\n    <span className={classes}>\n      <ResourceIcon kind={referenceFor(props.obj)} />\n      <Link\n        to={to}\n        className=\"co-resource-item__resource-name\"\n        onClick={props.onClick}\n        data-test-operand-link={name}\n        data-test={name}\n      >\n        {name}\n      </Link>\n    </span>\n  );\n};\n\nexport type OperandLinkProps = {\n  obj: K8sResourceKind;\n  csvName?: string;\n  onClick?: () => void;\n  inline?: boolean;\n};\n\nOperandLink.displayName = 'OperandLink';\n","module.exports = __webpack_public_path__ + \"assets/packages/operator-lifecycle-manager/src/operator.svg\";","import * as _ from 'lodash';\nimport { SpecCapability, StatusCapability } from './types';\n\nexport const REGEXP_K8S_RESOURCE_CAPABILITY = _.escapeRegExp(SpecCapability.k8sResourcePrefix);\nexport const REGEXP_FIELD_DEPENDENCY_CAPABILITY = _.escapeRegExp(SpecCapability.fieldDependency);\nexport const REGEXP_SELECT_CAPABILITY = _.escapeRegExp(SpecCapability.select);\n\nexport const REGEXP_K8S_RESOURCE_SUFFIX = new RegExp(\n  `^${REGEXP_K8S_RESOURCE_CAPABILITY}(?:core[:~]v1[:~])?([^?]*)[?]?(.*)$`,\n);\nexport const REGEXP_SELECT_OPTION = new RegExp(`${REGEXP_SELECT_CAPABILITY}(.*)$`);\nexport const REGEXP_FIELD_DEPENDENCY_PATH_VALUE = new RegExp(\n  `^${REGEXP_FIELD_DEPENDENCY_CAPABILITY}([^:]*):(.*)$`,\n);\n\n// Matches a path string containing an array reference. Captures\n// the segment before the array reference, and the segment after.\n// For example:\n//    path[0].element.property -> [path, element.property]\nexport const REGEXP_ARRAY_PATH = /^(.*)\\[\\d+\\]\\.?(.*)$/;\n\n// Matches a path string with multiple array references.\n// e.g.:  nested[0].array[0].property\nexport const REGEXP_NESTED_ARRAY_PATH = /^.*\\[\\d+\\]\\.?.*\\[\\d+\\]\\.?.*$/;\n\n//  Captures the root segment of a path string, and all desscendent segments as\n// a single string.\n// For example:\n//    'this.is.a.really.long.path' -> ['this', 'is.a.really.long.path'])\n//    'this'  -> ['this']\nexport const REGEXP_CAPTURE_GROUP_SUBGROUP = /^([^.]*)\\.?(.*)$/;\n\nexport const DEPRECATED_CAPABILITIES: SpecCapability[] = [\n  SpecCapability.arrayFieldGroup,\n  SpecCapability.fieldGroup,\n  SpecCapability.namespaceSelector,\n  SpecCapability.label,\n];\n\nexport const COMMON_COMPATIBLE_CAPABILITIES: SpecCapability[] = [\n  SpecCapability.advanced,\n  SpecCapability.fieldDependency,\n  SpecCapability.hidden,\n  // TODO remove when deprecated descriptors are no longer supported\n  SpecCapability.arrayFieldGroup,\n  SpecCapability.fieldGroup,\n  // END TODO\n];\n\nexport const OBJECT_COMPATIBLE_CAPABILITIES: (SpecCapability | StatusCapability)[] = [\n  StatusCapability.podStatuses,\n  SpecCapability.updateStrategy,\n  SpecCapability.nodeAffinity,\n  SpecCapability.podAffinity,\n  SpecCapability.podAntiAffinity,\n  SpecCapability.resourceRequirements,\n  SpecCapability.selector,\n  // TODO remove when deprecated descriptors are no longer supported\n  SpecCapability.label,\n  SpecCapability.namespaceSelector,\n  // END TODO\n];\n\nexport const ARRAY_COMPATIBLE_CAPABILITIES: (SpecCapability | StatusCapability)[] = [\n  SpecCapability.endpointList,\n  StatusCapability.conditions,\n];\n\nexport const PRIMITIVE_COMPATIBLE_CAPABILITIES: (SpecCapability | StatusCapability)[] = [\n  StatusCapability.k8sPhase,\n  StatusCapability.k8sPhaseReason,\n  SpecCapability.k8sResourcePrefix,\n  SpecCapability.imagePullPolicy,\n  SpecCapability.podCount,\n  SpecCapability.select,\n  StatusCapability.w3Link,\n  SpecCapability.booleanSwitch,\n  SpecCapability.checkbox,\n  SpecCapability.password,\n  SpecCapability.text,\n  StatusCapability.text,\n  SpecCapability.number,\n  // TODO remove when deprecated descriptors are no longer supported\n  SpecCapability.label,\n  // END TODO\n];\n\nexport const CAPABILITY_SORT_ORDER: (SpecCapability | StatusCapability)[] = [\n  // Supported in details view and has a widget\n  SpecCapability.hidden,\n  SpecCapability.endpointList,\n  StatusCapability.conditions,\n  SpecCapability.resourceRequirements,\n  SpecCapability.updateStrategy,\n  StatusCapability.podStatuses,\n  SpecCapability.selector,\n  SpecCapability.k8sResourcePrefix,\n  SpecCapability.podCount,\n  SpecCapability.password,\n  StatusCapability.k8sPhaseReason,\n  SpecCapability.booleanSwitch,\n  SpecCapability.checkbox,\n  StatusCapability.w3Link,\n\n  // Supported in details view with no widget\n  SpecCapability.select,\n  SpecCapability.imagePullPolicy,\n  StatusCapability.k8sPhase,\n  SpecCapability.text,\n  StatusCapability.text,\n  SpecCapability.number,\n\n  // Unsupported on details view\n  SpecCapability.podAntiAffinity,\n  SpecCapability.podAffinity,\n  SpecCapability.nodeAffinity,\n\n  // Always last\n  SpecCapability.advanced,\n  SpecCapability.fieldDependency,\n  ...DEPRECATED_CAPABILITIES,\n];\n","import * as React from 'react';\n\nexport const Checkbox: React.SFC<CheckboxProps> = ({ name, label, checked, onChange }) => (\n  <div className=\"form-group\">\n    <div className=\"checkbox\">\n      <label className=\"control-label\">\n        <input\n          data-test={`${label}__checkbox`}\n          className=\"form-checkbox\"\n          name={name}\n          onChange={onChange}\n          checked={checked}\n          data-checked-state={checked}\n          type=\"checkbox\"\n        />\n        {label}\n      </label>\n    </div>\n  </div>\n);\n\nexport type CheckboxProps = {\n  name: string;\n  label: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n  checked: boolean;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Alert, Progress, ProgressSize } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { k8sGetResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { settleAllPromises } from '@console/dynamic-plugin-sdk/src/utils/promise';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { Checkbox } from '@console/internal/components/checkbox';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport {\n  history,\n  ResourceLink,\n  resourceListPathFromModel,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport {\n  K8sKind,\n  K8sResourceCommon,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  k8sPatch,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '@console/shared/src/constants';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { useOperands } from '@console/shared/src/hooks/useOperands';\nimport { getPatchForRemovingPlugins, isPluginEnabled } from '@console/shared/src/utils';\nimport { DEFAULT_GLOBAL_OPERATOR_INSTALLATION_NAMESPACE } from '../../const';\nimport { ClusterServiceVersionModel, SubscriptionModel } from '../../models';\nimport { ClusterServiceVersionKind, SubscriptionKind } from '../../types';\nimport { OperandLink } from '../operand/operand-link';\nimport { OLMAnnotation } from '../operator-hub';\nimport { getClusterServiceVersionPlugins } from '../operator-hub/operator-hub-utils';\nimport Timeout = NodeJS.Timeout;\n\nconst deleteOptions = {\n  kind: 'DeleteOptions',\n  apiVersion: 'v1',\n  propagationPolicy: 'Foreground',\n};\n\nexport const UninstallOperatorModal: React.FC<UninstallOperatorModalProps> = ({\n  cancel,\n  close,\n  csv,\n  k8sKill,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const [\n    handleOperatorUninstallPromise,\n    operatorUninstallInProgress,\n    operatorUninstallErrorMessage,\n  ] = usePromiseHandler();\n  const [showInstructions, setShowInstructions] = React.useState(true);\n  const [operatorUninstallFinished, setOperatorUninstallFinished] = React.useState(false);\n  const [deleteOperands, setDeleteOperands] = React.useState(false);\n  const [operandsDeleteInProgress, setOperandsDeleteInProgress] = React.useState(false);\n  const [operandsRemaining, setOperandsRemaining] = React.useState(0);\n  const [operandsDeleteFinished, setOperandsDeleteFinished] = React.useState(false);\n  const [operandDeletionErrors, setOperandDeletionErrors] = React.useState<OperandError[]>([]);\n  const [operandDeletionVerificationError, setOperandDeletionVerificationError] = React.useState(\n    false,\n  );\n  const [clusterServiceVersionExistsError, setClusterServiceVersionExistsError] = React.useState(\n    '',\n  );\n\n  const canPatchConsoleOperatorConfig = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n\n  const csvPlugins = getClusterServiceVersionPlugins(csv?.metadata?.annotations);\n\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>(\n    canPatchConsoleOperatorConfig && csvPlugins.length > 0\n      ? {\n          kind: referenceForModel(ConsoleOperatorConfigModel),\n          isList: false,\n          name: CONSOLE_OPERATOR_CONFIG_NAME,\n        }\n      : null,\n  );\n\n  const enabledPlugins = csvPlugins.filter((plugin) =>\n    isPluginEnabled(consoleOperatorConfig, plugin),\n  );\n\n  const removePlugins: boolean =\n    !!consoleOperatorConfig && canPatchConsoleOperatorConfig && enabledPlugins.length > 0;\n\n  const subscriptionName = subscription?.spec?.name;\n  const subscriptionNamespace = subscription?.metadata?.namespace;\n\n  const isSubmitInProgress = operatorUninstallInProgress || operandsDeleteInProgress;\n\n  const isSubmitFinished =\n    !isSubmitInProgress && (!deleteOperands || operandsDeleteFinished) && operatorUninstallFinished;\n\n  const hasSubmitErrors = operandDeletionErrors.length > 0 || operatorUninstallErrorMessage !== '';\n\n  // Skip loading the operands if we are not going to delete them if they opted Out\n  const optOutAnnotation = 'console.openshift.io/disable-operand-delete';\n  const optedOut = csv?.metadata?.annotations?.[optOutAnnotation] === 'true';\n\n  // TODO: Commenting out for review, wanted to prevent loading the operands if not needed, but lint check throws error\n  // const [operands, operandsLoaded, operandsLoadedErrorMessage] = optedOut\n  //   ? [[], true, '']\n  //   : useOperands(subscriptionName, subscriptionNamespace);\n  const [operands, operandsLoaded, operandsLoadedErrorMessage] = useOperands(\n    subscriptionName,\n    subscriptionNamespace,\n  );\n\n  const uninstallOperator = React.useCallback(async () => {\n    const patch = removePlugins\n      ? getPatchForRemovingPlugins(consoleOperatorConfig, enabledPlugins)\n      : null;\n\n    const clusterServiceVersionExists = async () => {\n      try {\n        await k8sGetResource({\n          model: ClusterServiceVersionModel,\n          name: subscription.status.installedCSV,\n          ns: subscription.metadata.namespace,\n        });\n        return true;\n      } catch (err) {\n        if (err.response.status !== 404) {\n          setClusterServiceVersionExistsError(err.message);\n        }\n        return false;\n      }\n    };\n\n    const operatorUninstallPromises = [\n      k8sKill(SubscriptionModel, subscription, {}, deleteOptions),\n      ...(subscription?.status?.installedCSV && (await clusterServiceVersionExists())\n        ? [\n            k8sKill(\n              ClusterServiceVersionModel,\n              {\n                metadata: {\n                  name: subscription.status.installedCSV,\n                  namespace: subscription.metadata.namespace,\n                },\n              },\n              {},\n              deleteOptions,\n            ),\n          ]\n        : []),\n      ...(removePlugins\n        ? [k8sPatch(ConsoleOperatorConfigModel, consoleOperatorConfig, [patch])]\n        : []),\n    ];\n\n    handleOperatorUninstallPromise(Promise.all(operatorUninstallPromises))\n      .then(() => {\n        setOperatorUninstallFinished(true);\n      })\n      .catch(() => {\n        setOperatorUninstallFinished(true);\n      });\n  }, [\n    consoleOperatorConfig,\n    enabledPlugins,\n    handleOperatorUninstallPromise,\n    k8sKill,\n    removePlugins,\n    subscription,\n  ]);\n\n  const finishVerification = React.useCallback(\n    (proceedToUninstallOperator: boolean) => {\n      setOperandsDeleteInProgress(false);\n      setOperandsDeleteFinished(true);\n      if (proceedToUninstallOperator) {\n        uninstallOperator();\n      } else {\n        setOperandDeletionVerificationError(true);\n        setOperatorUninstallFinished(true);\n      }\n    },\n    [uninstallOperator],\n  );\n\n  const pollOperands = React.useCallback((): Timeout => {\n    const url = `${window.SERVER_FLAGS.basePath}api/list-operands/?name=${subscriptionName}&namespace=${subscriptionNamespace}`;\n    const interval = setInterval(() => {\n      coFetchJSON(url)\n        .then((curOperands) => {\n          setOperandsRemaining(curOperands.items.length);\n          if (curOperands.items.length === 0) {\n            clearInterval(interval);\n            setTimeout(() => finishVerification(true), 1000); // allow '0 Operands remaining' to display for a second\n          }\n        })\n        .catch(() => {\n          finishVerification(false);\n        });\n    }, 2000); // every 2 seconds\n    return interval;\n  }, [finishVerification, subscriptionName, subscriptionNamespace]);\n\n  const closeAndRedirect = React.useCallback(() => {\n    close();\n    // if url contains subscription name (ex: \"codeready-workspaces\") or installedCSV version (ex: \"crwoperator.v2.9.0\")\n    // redirect to ClusterServiceVersion \"Installed Operators\" list page,\n    // else uninstalled from \"Installed Operators\" list page, so do not redirect\n    if (\n      window.location.pathname.split('/').includes(subscription.metadata.name) ||\n      window.location.pathname.split('/').includes(subscription?.status?.installedCSV)\n    ) {\n      history.push(resourceListPathFromModel(ClusterServiceVersionModel, getActiveNamespace()));\n    }\n  }, [close, subscription]);\n\n  React.useEffect(() => {\n    if (isSubmitFinished && !hasSubmitErrors) {\n      closeAndRedirect();\n    }\n  }, [closeAndRedirect, hasSubmitErrors, isSubmitFinished]);\n\n  React.useEffect(() => {\n    let intervalID;\n    if (operandsDeleteInProgress) {\n      intervalID = pollOperands();\n    }\n    return () => {\n      if (intervalID) {\n        clearInterval(intervalID);\n      }\n    };\n  }, [operandsDeleteInProgress, pollOperands]);\n\n  const submit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if (isSubmitFinished) {\n      closeAndRedirect();\n      return;\n    }\n\n    setShowInstructions(false);\n    if (deleteOperands) {\n      setOperandsDeleteInProgress(true);\n      setOperandsRemaining(operands.length);\n      const operandDeletionPromises = operands.map((operand: K8sResourceCommon) => {\n        const model = modelFor(referenceFor(operand));\n        return k8sKill(model, operand, {}, deleteOptions);\n      });\n      // eslint-disable-next-line promise/catch-or-return\n      settleAllPromises(operandDeletionPromises).then(([, , results]) => {\n        const operandErrors: OperandError[] = results.reduce((acc: OperandError[], curr, i) => {\n          return curr.status === 'rejected'\n            ? acc.concat({ operand: operands[i], errorMessage: curr.reason })\n            : acc;\n        }, []);\n        if (operandErrors.length) {\n          setOperandDeletionErrors(operandErrors);\n          setOperandsDeleteInProgress(false);\n          setOperandsDeleteFinished(true);\n          setOperatorUninstallFinished(true);\n        }\n      });\n    } else {\n      setOperandsDeleteFinished(true);\n      uninstallOperator();\n    }\n  };\n\n  const name = csv?.spec?.displayName || subscription?.spec?.name;\n  const csvName = csv?.metadata?.name;\n  const namespace =\n    subscription.metadata.namespace === DEFAULT_GLOBAL_OPERATOR_INSTALLATION_NAMESPACE\n      ? 'all-namespaces'\n      : subscription.metadata.namespace;\n  const uninstallMessage = csv?.metadata?.annotations?.[OLMAnnotation.UninstallMessage];\n  const showOperandsContent = !operandsLoaded || operands.length > 0;\n\n  const instructions = (\n    <>\n      <p>\n        {showOperandsContent && (\n          <>\n            {' '}\n            {t(\n              'olm~Select the checkbox below to also remove all Operands associated with this Operator.',\n            )}\n          </>\n        )}{' '}\n        {t(\n          'olm~If your Operator configured off-cluster resources, these will continue to run and require manual cleanup.',\n        )}\n      </p>\n      {removePlugins && (\n        <p>\n          {t('olm~The console plugin provided by this operator will be disabled and removed.', {\n            count: enabledPlugins.length,\n          })}\n        </p>\n      )}\n    </>\n  );\n\n  const operandsSection = operandsLoadedErrorMessage ? (\n    <OperandsLoadedErrorAlert operandsLoadedErrorMessage={operandsLoadedErrorMessage} />\n  ) : (\n    showOperandsContent && (\n      <>\n        <span className=\"co-operator-uninstall__operands-section\">\n          <h2>{t('olm~Operand instances')}</h2>\n          <OperandsTable\n            operands={operands}\n            loaded={operandsLoaded}\n            csvName={csvName}\n            cancel={cancel} // for breadcrumbs & cancel modal when clicking on operand links\n          />\n        </span>\n        <Checkbox\n          onChange={({ currentTarget }) => setDeleteOperands(currentTarget.checked)}\n          name=\"delete-all-operands\"\n          label={t('olm~Delete all operand instances for this operator')}\n          checked={deleteOperands}\n        />\n      </>\n    )\n  );\n\n  const operandDeletionAlert = operandDeletionErrors.length ? (\n    <OperandDeletionErrorAlert\n      operandDeletionErrors={operandDeletionErrors}\n      csvName={csvName}\n      cancel={cancel}\n    />\n  ) : operandDeletionVerificationError ? (\n    <OperandsLoadedErrorAlert\n      operandsLoadedErrorMessage={t('olm~Error listing operand to verify deletion')}\n    />\n  ) : (\n    <OperandDeletionSuccessAlert name={name} namespace={namespace} />\n  );\n\n  const results = (\n    <>\n      <UninstallAlert\n        errorMessage={\n          clusterServiceVersionExistsError ||\n          operatorUninstallErrorMessage ||\n          (operandDeletionErrors.length\n            ? t('olm~Operator could not be uninstalled due to error deleting its Operands')\n            : '')\n        }\n        name={name}\n        namespace={namespace}\n      />\n      {deleteOperands && operandDeletionAlert}\n    </>\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content co-catalog-install-modal\">\n      <ModalTitle className=\"modal-header\">\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> {t('olm~Uninstall Operator?')}\n      </ModalTitle>\n      <ModalBody>\n        {showInstructions && (\n          <>\n            <p>\n              <Trans t={t} ns=\"olm\">\n                Operator <strong>{{ name }}</strong> will be removed from{' '}\n                <strong>{{ namespace }}</strong>.\n              </Trans>\n            </p>\n            {!optedOut && <>{instructions}</>}\n            {uninstallMessage && (\n              <>\n                <h2>{t('olm~Message from Operator developer')}</h2>\n                <p>{uninstallMessage}</p>\n              </>\n            )}\n            {!optedOut && <>{operandsSection}</>}\n          </>\n        )}\n        {operandsDeleteInProgress && (\n          <OperandDeleteProgress total={operands.length} remaining={operandsRemaining} />\n        )}\n        {operatorUninstallInProgress && (\n          <div>\n            <p>{t('olm~Uninstalling the Operator...')}</p>\n          </div>\n        )}\n        {isSubmitFinished && results}\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitInProgress}\n        cancel={cancel}\n        submitDanger={!isSubmitFinished} // if submit finished show a non-danger 'OK'\n        submitText={t(isSubmitFinished ? 'olm~OK' : 'olm~Uninstall')}\n        submitDisabled={isSubmitInProgress}\n      />\n    </form>\n  );\n};\n\nconst OperandDeleteProgress: React.FC<{\n  total: number;\n  remaining: number;\n}> = ({ total, remaining }) => {\n  const { t } = useTranslation();\n  const progressLabel = t('olm~Remaining Operands: {{remaining}} of {{total}} ', {\n    remaining,\n    total,\n  });\n  return (\n    <div>\n      <Progress\n        value={total - remaining}\n        max={total}\n        valueText={progressLabel}\n        label={progressLabel}\n        title={t('olm~Cleaning up operand instances...')}\n        size={ProgressSize.lg}\n      />\n      <div className=\"co-alert--margin-top\">\n        <p>\n          {t(\n            'olm~The operands have been marked for deletion and are being removed. Canceling this operation will leave the Operator installed though its operand instances will continue to be deleted.',\n          )}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst OperandsLoadedErrorAlert: React.FC<{ operandsLoadedErrorMessage: string }> = ({\n  operandsLoadedErrorMessage,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant=\"warning\" className=\"co-alert\" title={t('olm~Cannot load Operands')} isInline>\n      <p>\n        {t(\n          'olm~There was an error loading operands for this operator. Operands will need to be deleted manually.',\n        )}\n      </p>\n      <p>{operandsLoadedErrorMessage}</p>\n    </Alert>\n  );\n};\n\nconst OperatorUninstallSuccessAlert: React.FC<{ name: string; namespace: string }> = ({\n  name,\n  namespace,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"success\"\n      className=\"co-alert\"\n      title={t('olm~Successfully uninstalled Operator')}\n      isInline\n    >\n      <p>\n        <Trans t={t} ns=\"olm\">\n          Operator <strong>{{ name }}</strong> successfully uninstalled from{' '}\n          <strong>{{ namespace }}</strong>.\n        </Trans>\n      </p>\n    </Alert>\n  );\n};\n\nconst OperatorUninstallErrorAlert: React.FC<{ errorMessage: string }> = ({ errorMessage }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"danger\"\n      className=\"co-alert\"\n      title={t('olm~Error uninstalling Operator')}\n      isInline\n    >\n      <p>\n        {t('olm~There was an error uninstalling the operator.')}\n        <br />\n        {errorMessage}\n      </p>\n    </Alert>\n  );\n};\n\nconst OperandDeletionErrorAlert: React.FC<{\n  operandDeletionErrors: OperandError[];\n  csvName: string;\n  cancel?: () => void;\n}> = ({ operandDeletionErrors, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant=\"danger\" className=\"co-alert\" title={t('olm~Error deleting Operands')} isInline>\n      <p>\n        {t(\n          'olm~There were errors deleting the following Operands, they will need to be deleted manually:',\n        )}\n      </p>\n      <OperandErrorList\n        operandErrors={operandDeletionErrors}\n        csvName={csvName}\n        cancel={cancel} // for breadcrumbs & cancel modal when clicking on operand links\n      />\n    </Alert>\n  );\n};\n\nconst OperandDeletionSuccessAlert: React.FC<{ name: string; namespace: string }> = ({\n  name,\n  namespace,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"success\"\n      className=\"co-alert\"\n      title={t('olm~Successfully deleted all Operand Instances')}\n      isInline\n    >\n      <p>\n        <Trans t={t} ns=\"olm\">\n          All Operand instances for Operator <strong>{{ name }}</strong> in{' '}\n          <strong>{{ namespace }}</strong> have been deleted.\n        </Trans>\n      </p>\n    </Alert>\n  );\n};\n\nconst UninstallAlert: React.FC<{ errorMessage: string; name: string; namespace: string }> = ({\n  errorMessage,\n  name,\n  namespace,\n}) =>\n  errorMessage ? (\n    <OperatorUninstallErrorAlert errorMessage={errorMessage} />\n  ) : (\n    <OperatorUninstallSuccessAlert name={name} namespace={namespace} />\n  );\n\nconst OperandsTable: React.FC<OperandsTableProps> = ({ operands, loaded, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <StatusBox\n      skeleton={<div className=\"loading-skeleton--table\" />}\n      data={operands}\n      loaded={loaded}\n    >\n      <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n        <thead className=\"pf-v5-c-table__thead\">\n          <tr className=\"pf-v5-c-table__tr\" key=\"operand-table-header-row\">\n            <th className=\"pf-m-width-35 pf-v5-c-table__th\">{t('olm~Name')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('olm~Kind')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('olm~Namespace')}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {operands\n            .sort((a, b) => a.metadata.name.localeCompare(b.metadata.name))\n            .map((operand) => (\n              <tr className=\"pf-v5-c-table__tr\" key={operand.metadata.uid}>\n                <td className=\"pf-v5-c-table__td\">\n                  <OperandLink obj={operand} csvName={csvName} onClick={cancel} />\n                </td>\n                <td\n                  className=\"pf-v5-c-table__td pf-m-break-word\"\n                  data-test-operand-kind={operand.kind}\n                >\n                  {operand.kind}\n                </td>\n                <td className=\"pf-v5-c-table__td\">\n                  {operand.metadata.namespace ? (\n                    <ResourceLink\n                      kind=\"Namespace\"\n                      name={operand.metadata.namespace}\n                      onClick={cancel}\n                    />\n                  ) : (\n                    '-'\n                  )}\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </StatusBox>\n  );\n};\n\nconst OperandErrorList: React.FC<OperandErrorListProps> = ({ operandErrors, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <ul className=\"co-operator-uninstall-alert__list\">\n      {_.map(operandErrors, (operandError) => (\n        <li\n          key={operandError.operand.metadata.uid}\n          className=\"pf-v5-c-list pf-m-plain co-operator-uninstall-alert__list-item\"\n        >\n          <OperandLink obj={operandError.operand} csvName={csvName} onClick={cancel} />{' '}\n          {operandError.operand.kind}\n          {'  '}\n          {t('olm~Error: {{error}}', {\n            error: operandError.errorMessage,\n          })}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport const createUninstallOperatorModal = createModalLauncher(UninstallOperatorModal);\n\nexport type UninstallOperatorModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sKill: (kind: K8sKind, resource: K8sResourceKind, options: any, json: any) => Promise<any>;\n  k8sGet: (kind: K8sKind, name: string, namespace: string) => Promise<K8sResourceKind>;\n  k8sPatch: (\n    kind: K8sKind,\n    resource: K8sResourceKind,\n    data: { op: string; path: string; value: any }[],\n  ) => Promise<any>;\n  subscription: SubscriptionKind | K8sResourceKind;\n  csv?: ClusterServiceVersionKind;\n  blocking?: boolean;\n};\n\ntype OperandsTableProps = {\n  operands: K8sResourceCommon[];\n  loaded: boolean;\n  csvName: string;\n  cancel?: () => void;\n};\n\ntype OperandError = { operand: K8sResourceCommon; errorMessage: string };\ntype OperandErrorListProps = {\n  operandErrors?: OperandError[];\n  csvName: string;\n  cancel?: () => void;\n};\n\nUninstallOperatorModal.displayName = 'UninstallOperatorModal';\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { withHandlePromise } from '@console/internal/components/utils';\nimport { k8sUpdate, referenceFor, K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\n\nexport const ResourceRequirements: React.FC<ResourceRequirementsProps> = (props) => {\n  const { t } = useTranslation();\n  const { cpu, memory, storage, onChangeCPU, onChangeMemory, onChangeStorage, path = '' } = props;\n\n  return (\n    <div className=\"row co-m-form-row\">\n      <div className=\"col-xs-4\">\n        <label\n          style={{ fontWeight: 300 }}\n          className=\"text-muted text-uppercase\"\n          htmlFor={`${path}.cpu`}\n        >\n          {t('olm~CPU cores')}\n        </label>\n        <input\n          value={cpu}\n          onChange={(e) => onChangeCPU(e.target.value)}\n          id={`${path}.cpu`}\n          name=\"cpu\"\n          type=\"text\"\n          className=\"pf-v5-c-form-control\"\n          placeholder=\"500m\"\n        />\n      </div>\n      <div className=\"col-xs-4\">\n        <label\n          style={{ fontWeight: 300 }}\n          className=\"text-muted text-uppercase\"\n          htmlFor={`${path}.memory`}\n        >\n          {t('olm~Memory')}\n        </label>\n        <input\n          value={memory}\n          onChange={(e) => onChangeMemory(e.target.value)}\n          id={`${path}.memory`}\n          name=\"memory\"\n          type=\"text\"\n          className=\"pf-v5-c-form-control\"\n          placeholder=\"50Mi\"\n        />\n      </div>\n      <div className=\"col-xs-4\">\n        <label\n          style={{ fontWeight: 300 }}\n          className=\"text-muted text-uppercase\"\n          htmlFor={`${path}.ephemeral-storage`}\n        >\n          {t('olm~Storage')}\n        </label>\n        <input\n          value={storage}\n          onChange={(e) => onChangeStorage(e.target.value)}\n          id={`${path}.ephemeral-storage`}\n          name=\"ephemeral-storage\"\n          type=\"text\"\n          className=\"pf-v5-c-form-control\"\n          placeholder=\"50Mi\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const ResourceRequirementsModal = withHandlePromise(\n  (props: ResourceRequirementsModalProps) => {\n    const { t } = useTranslation();\n    const { obj, path, type, model, close, handlePromise } = props;\n    const [cpu, setCPU] = React.useState<string>(_.get(obj.spec, `${path}.${type}.cpu`, ''));\n    const [memory, setMemory] = React.useState<string>(\n      _.get(obj.spec, `${path}.${type}.memory`, ''),\n    );\n    const [storage, setStorage] = React.useState<string>(\n      _.get(obj.spec, `${path}.${type}.ephemeral-storage`, ''),\n    );\n\n    const submit = (e) => {\n      e.preventDefault();\n      const newObj = _.set(_.cloneDeep(obj), `spec.${path}.${type}`, {\n        ...(cpu && { cpu }),\n        ...(memory && { memory }),\n        ...(storage && { 'ephemeral-storage': storage }),\n      });\n      return handlePromise(k8sUpdate(model, newObj), close);\n    };\n\n    return (\n      <form onSubmit={(e) => submit(e)} className=\"modal-content\">\n        <ModalTitle>{props.title}</ModalTitle>\n        <ModalBody>\n          <div className=\"row co-m-form-row\">\n            <div className=\"col-sm-12\">{props.description}</div>\n          </div>\n          <ResourceRequirements\n            cpu={cpu}\n            memory={memory}\n            storage={storage}\n            onChangeCPU={setCPU}\n            onChangeMemory={setMemory}\n            onChangeStorage={setStorage}\n            path={path}\n          />\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={props.errorMessage}\n          inProgress={props.inProgress}\n          submitText={t('public~Save')}\n          cancel={props.cancel}\n        />\n      </form>\n    );\n  },\n);\n\nconst stateToProps = ({ k8s }: RootState, { obj }) => ({\n  model: k8s.getIn(['RESOURCES', 'models', referenceFor(obj)]) as K8sKind,\n});\n\nexport const ResourceRequirementsModalLink = connect(stateToProps)(\n  (props: ResourceRequirementsModalLinkProps) => {\n    const { obj, type, path, model } = props;\n    const { t } = useTranslation();\n    const none = t('public~None');\n    const { cpu, memory, 'ephemeral-storage': storage } = _.get(obj.spec, `${path}.${type}`, {});\n\n    const onClick = () => {\n      const modal = createModalLauncher(ResourceRequirementsModal);\n      const description = t('olm~Define the resource {{type}} for this {{kind}} instance.', {\n        type,\n        kind: obj.kind,\n      });\n      const title = t('olm~{{kind}} Resource {{type}}', {\n        kind: obj.kind,\n        type: _.capitalize(type),\n      });\n\n      return modal({ title, description, obj, model, type, path });\n    };\n\n    return (\n      <Button\n        type=\"button\"\n        isInline\n        data-test-id=\"configure-modal-btn\"\n        onClick={onClick}\n        variant=\"link\"\n      >\n        {t('olm~CPU: {{cpu}}, Memory: {{memory}}, Storage: {{storage}}', {\n          cpu: cpu || none,\n          memory: memory || none,\n          storage: storage || none,\n        })}\n        <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n      </Button>\n    );\n  },\n);\n\nexport type ResourceRequirementsModalProps = {\n  title: string;\n  description: string;\n  obj: K8sResourceKind;\n  model: K8sKind;\n  type: 'requests' | 'limits';\n  path: string;\n  handlePromise: <T>(\n    promise: Promise<T>,\n    onFulfill?: (res) => void,\n    onError?: (errorMsg: string) => void,\n  ) => void;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nexport type ResourceRequirementsProps = {\n  cpu: string;\n  memory: string;\n  storage: string;\n  onChangeCPU: (value: string) => void;\n  onChangeMemory: (value: string) => void;\n  onChangeStorage: (value: string) => void;\n  path?: string;\n};\n\nexport type ResourceRequirementsModalLinkProps = {\n  obj: K8sResourceKind;\n  model: K8sKind;\n  type: 'requests' | 'limits';\n  path: string;\n};\n\nResourceRequirements.displayName = 'ResourceRequirements';\nResourceRequirementsModalLink.displayName = 'ResourceRequirementsModalLink';\nResourceRequirementsModal.displayName = 'ResourceRequirementsModal';\n","import { K8sResourceKind, referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport { OLMAnnotation } from '../components/operator-hub';\nimport { NON_STANDALONE_ANNOTATION_VALUE } from '../const';\nimport { ClusterServiceVersionModel } from '../models';\nimport { ClusterServiceVersionPhase } from '../types';\n\nexport const isCSV = (obj: K8sResourceKind): boolean =>\n  Boolean(obj) && referenceFor(obj) === referenceForModel(ClusterServiceVersionModel);\n\nexport const isCopiedCSV = (obj: K8sResourceKind): boolean =>\n  isCSV(obj) &&\n  (obj.status?.reason === 'Copied' || Boolean(obj.metadata?.labels?.['olm.copiedFrom']));\n\nexport const isStandaloneCSV = (obj: K8sResourceKind): boolean =>\n  isCSV(obj) &&\n  (obj.metadata.annotations?.[OLMAnnotation.OperatorType] !== NON_STANDALONE_ANNOTATION_VALUE ||\n    obj.status?.phase === ClusterServiceVersionPhase.CSVPhaseFailed);\n","import * as React from 'react';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { GLOBAL_COPIED_CSV_NAMESPACE } from '../const';\nimport { ClusterServiceVersionModel } from '../models';\nimport { ClusterServiceVersionKind } from '../types';\nimport { isCopiedCSV } from './clusterserviceversions';\n\nconst groupVersionKind = {\n  group: ClusterServiceVersionModel.apiGroup,\n  version: ClusterServiceVersionModel.apiVersion,\n  kind: ClusterServiceVersionModel.kind,\n};\n\nconst { copiedCSVsDisabled } = window.SERVER_FLAGS;\n\nexport const useClusterServiceVersion = (\n  name: string,\n  namespace: string,\n): [ClusterServiceVersionKind, boolean, any] => {\n  const [namespacedCSV, namespacedCSVLoaded, namespacedCSVLoadError] = useK8sWatchResource<\n    ClusterServiceVersionKind\n  >({\n    groupVersionKind,\n    name,\n    namespace,\n    optional: copiedCSVsDisabled,\n  });\n  const [globalCSV, globalCSVLoaded, globalCSVLoadError] = useK8sWatchResource<\n    ClusterServiceVersionKind\n  >(\n    copiedCSVsDisabled\n      ? {\n          groupVersionKind,\n          name,\n          namespace: GLOBAL_COPIED_CSV_NAMESPACE,\n          optional: copiedCSVsDisabled,\n        }\n      : null,\n  );\n\n  return React.useMemo(() => {\n    if (copiedCSVsDisabled && Boolean(namespacedCSVLoadError)) {\n      return [isCopiedCSV(globalCSV) ? globalCSV : null, globalCSVLoaded, globalCSVLoadError];\n    }\n    return [namespacedCSV, namespacedCSVLoaded, namespacedCSVLoadError];\n  }, [\n    globalCSV,\n    globalCSVLoadError,\n    globalCSVLoaded,\n    namespacedCSV,\n    namespacedCSVLoadError,\n    namespacedCSVLoaded,\n  ]);\n};\n","import * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { safeDump } from 'js-yaml';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalFooter,\n} from '@console/internal/components/factory/modal';\nimport { ResourceLink, CopyToClipboard } from '@console/internal/components/utils';\nimport { StepResource } from '../../types';\nimport { referenceForStepResource } from '../index';\n\nconst InstallPlanPreview: React.FC<InstallPlanPreviewModalProps> = ({ cancel, stepResource }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>\n        {t('olm~InstallPlan Preview')}{' '}\n        <ResourceLink\n          linkTo={false}\n          name={stepResource.name}\n          kind={referenceForStepResource(stepResource)}\n        />\n      </ModalTitle>\n      <ModalBody>\n        <CopyToClipboard value={safeDump(JSON.parse(stepResource.manifest))} />\n      </ModalBody>\n      <ModalFooter inProgress={false}>\n        <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__actions--right pf-v5-c-form__group--no-top-margin\">\n          <Button type=\"button\" variant=\"secondary\" onClick={() => cancel()}>\n            {t('public~OK')}\n          </Button>\n        </ActionGroup>\n      </ModalFooter>\n    </div>\n  );\n};\n\nexport const installPlanPreviewModal = createModalLauncher<InstallPlanPreviewModalProps>(\n  InstallPlanPreview,\n);\n\nexport type InstallPlanPreviewModalProps = {\n  stepResource: StepResource;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nInstallPlanPreview.displayName = 'InstallPlanPreview';\n","import { useCallback } from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as UIActions from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\n\nexport const useDeprecatedOperatorWarnings = () => {\n  const dispatch = useDispatch();\n\n  const deprecatedPackage = useSelector((state: RootState) =>\n    state.UI.getIn(['deprecatedOperator', 'package']),\n  );\n  const deprecatedChannel = useSelector((state: RootState) =>\n    state.UI.getIn(['deprecatedOperator', 'channel']),\n  );\n  const deprecatedVersion = useSelector((state: RootState) =>\n    state.UI.getIn(['deprecatedOperator', 'version']),\n  );\n\n  const setDeprecatedPackage = useCallback(\n    (value: DeprecatedOperatorWarning) => dispatch(UIActions.setDeprecatedPackage(value)),\n    [dispatch],\n  );\n\n  const setDeprecatedChannel = useCallback(\n    (value: DeprecatedOperatorWarning) => dispatch(UIActions.setDeprecatedChannel(value)),\n    [dispatch],\n  );\n\n  const setDeprecatedVersion = useCallback(\n    (value: DeprecatedOperatorWarning) => dispatch(UIActions.setDeprecatedVersion(value)),\n    [dispatch],\n  );\n\n  return {\n    deprecatedPackage,\n    setDeprecatedPackage,\n    deprecatedChannel,\n    setDeprecatedChannel,\n    deprecatedVersion,\n    setDeprecatedVersion,\n  };\n};\n","import * as React from 'react';\nimport { consoleFetchJSON as coFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport const useOperands = (\n  operatorName: string,\n  operatorNamespace: string,\n): [K8sResourceCommon[], boolean, string] => {\n  const [operands, setOperands] = React.useState<K8sResourceCommon[]>([]);\n  const [loaded, setLoaded] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n\n  React.useEffect(() => {\n    const url = `${window.SERVER_FLAGS.basePath}api/list-operands/?name=${operatorName}&namespace=${operatorNamespace}`;\n    coFetchJSON(url)\n      .then((data) => {\n        setOperands(data?.items ?? []);\n        setLoaded(true);\n        setErrorMessage('');\n      })\n      .catch((err) => {\n        setOperands([]);\n        setLoaded(true);\n        setErrorMessage(\n          `Error loading Operands for ${operatorName} in ${operatorNamespace}: ${err}`,\n        );\n      });\n  }, [operatorName, operatorNamespace]);\n\n  return [operands, loaded, errorMessage];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { RadioInput } from '@console/internal/components/radio';\nimport {\n  K8sKind,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { SubscriptionModel, InstallPlanModel } from '../../models';\nimport { SubscriptionKind, InstallPlanApproval, InstallPlanKind } from '../../types';\n\nconst getApprovalStrategy = (obj: InstallPlanKind | SubscriptionKind): InstallPlanApproval =>\n  (obj as SubscriptionKind)?.spec?.installPlanApproval ??\n  (obj as InstallPlanKind)?.spec?.approval ??\n  InstallPlanApproval.Automatic;\n\nexport const InstallPlanApprovalModal: React.FC<InstallPlanApprovalModalProps> = ({\n  cancel,\n  close,\n  k8sUpdate,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n  const [selectedApprovalStrategy, setSelectedApprovalStrategy] = React.useState(\n    getApprovalStrategy(obj),\n  );\n  const submit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>): void => {\n      event.preventDefault();\n      const updatedObj = _.cloneDeep(obj);\n      if (referenceFor(updatedObj) === referenceForModel(SubscriptionModel)) {\n        (updatedObj as SubscriptionKind).spec.installPlanApproval = selectedApprovalStrategy;\n      } else if (referenceFor(updatedObj) === referenceForModel(InstallPlanModel)) {\n        (updatedObj as InstallPlanKind).spec.approval = selectedApprovalStrategy;\n      }\n      handlePromise(k8sUpdate(modelFor(referenceFor(obj)), updatedObj))\n        .then(() => close?.())\n        .catch(_.noop);\n    },\n    [close, handlePromise, k8sUpdate, obj, selectedApprovalStrategy],\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle className=\"modal-header\">{t('olm~Change update approval strategy')}</ModalTitle>\n      <ModalBody>\n        <div className=\"co-m-form-row\">\n          <p>{t('olm~What strategy is used for approving updates?')}</p>\n        </div>\n        <div className=\"co-m-form-row row\">\n          <div className=\"col-sm-12\">\n            <RadioInput\n              onChange={(e) => setSelectedApprovalStrategy(e.target.value)}\n              value={InstallPlanApproval.Automatic}\n              checked={selectedApprovalStrategy === InstallPlanApproval.Automatic}\n              title={t(`olm~Automatic`)}\n              subTitle={`(${t('public~default')})`}\n            >\n              <div className=\"co-m-radio-desc\">\n                <p className=\"text-muted\">\n                  {t('olm~New updates will be installed as soon as they become available.')}\n                </p>\n              </div>\n            </RadioInput>\n          </div>\n          <div className=\"col-sm-12\">\n            <RadioInput\n              onChange={(e) => setSelectedApprovalStrategy(e.target.value)}\n              value={InstallPlanApproval.Manual}\n              checked={selectedApprovalStrategy === InstallPlanApproval.Manual}\n              title={t(`olm~Manual`)}\n            >\n              <div className=\"co-m-radio-desc\">\n                <p className=\"text-muted\">\n                  {t('olm~New updates need to be manually approved before installation begins.')}\n                </p>\n              </div>\n            </RadioInput>\n          </div>\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={inProgress}\n        errorMessage={errorMessage}\n        cancel={cancel}\n        submitText={t('public~Save')}\n        submitDisabled={getApprovalStrategy(obj) === selectedApprovalStrategy}\n      />\n    </form>\n  );\n};\n\nexport const createInstallPlanApprovalModal = createModalLauncher<InstallPlanApprovalModalProps>(\n  InstallPlanApprovalModal,\n);\n\nexport type InstallPlanApprovalModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  obj: InstallPlanKind | SubscriptionKind;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { RadioInput } from '@console/internal/components/radio';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { SubscriptionModel, ClusterServiceVersionModel } from '../../models';\nimport { SubscriptionKind, PackageManifestKind } from '../../types';\nimport { DeprecatedOperatorWarningIcon } from '../deprecated-operator-warnings/deprecated-operator-warnings';\n\nexport const SubscriptionChannelModal: React.FC<SubscriptionChannelModalProps> = ({\n  cancel,\n  close,\n  k8sUpdate,\n  pkg,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const currentChannel = subscription?.spec?.channel ?? pkg?.status?.channels?.[0]?.name;\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n  const [selectedChannel, setSelectedChannel] = React.useState(currentChannel);\n\n  const submit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>): void => {\n      event.preventDefault();\n      handlePromise(\n        k8sUpdate(SubscriptionModel, {\n          ...subscription,\n          spec: {\n            ...subscription.spec,\n            channel: selectedChannel,\n          },\n        }),\n      )\n        .then(() => close?.())\n        .catch(() => {});\n    },\n    [close, handlePromise, k8sUpdate, selectedChannel, subscription],\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle className=\"modal-header\">\n        {t('olm~Change Subscription update channel')}\n      </ModalTitle>\n      <ModalBody>\n        <div className=\"co-m-form-row\">\n          <p>{t('olm~Which channel is used to receive updates?')}</p>\n        </div>\n        <div className=\"co-m-form-row row\">\n          {pkg?.status?.channels?.map?.((channel) => (\n            <div key={channel.name} className=\"col-sm-12\">\n              <RadioInput\n                onChange={(e) => setSelectedChannel(e.target.value)}\n                value={channel.name}\n                checked={selectedChannel === channel.name}\n                title={channel.name}\n                subTitle={\n                  <ResourceLink\n                    linkTo={false}\n                    name={channel.currentCSV}\n                    title={channel.currentCSV}\n                    kind={referenceForModel(ClusterServiceVersionModel)}\n                  >\n                    {channel?.deprecation ? (\n                      <DeprecatedOperatorWarningIcon deprecation={channel?.deprecation} />\n                    ) : null}\n                  </ResourceLink>\n                }\n              />\n            </div>\n          ))}\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={inProgress}\n        errorMessage={errorMessage}\n        cancel={cancel}\n        submitText={t('public~Save')}\n        submitDisabled={selectedChannel === currentChannel}\n      />\n    </form>\n  );\n};\n\nexport const createSubscriptionChannelModal = createModalLauncher<SubscriptionChannelModalProps>(\n  SubscriptionChannelModal,\n);\n\nexport type SubscriptionChannelModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  subscription: SubscriptionKind;\n  pkg: PackageManifestKind;\n};\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { EyeIcon } from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nimport { EyeSlashIcon } from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { SecretValue } from '@console/internal/components/configmap-and-secret-data';\nimport { DetailsItem, ResourceLink } from '@console/internal/components/utils';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { REGEXP_K8S_RESOURCE_SUFFIX } from './const';\nimport { CapabilityProps, SpecCapability, StatusCapability } from './types';\n\nexport const Invalid: React.FC<{ path: string }> = ({ path }) => {\n  return (\n    <span className=\"text-muted olm-descriptors__invalid-pod-descriptor\">\n      <YellowExclamationTriangleIcon />\n      &nbsp;&nbsp;\n      <Trans ns=\"olm\">\n        The field <code className=\"co-code\">{{ path }}</code> is invalid.\n      </Trans>\n    </span>\n  );\n};\n\nexport const DefaultCapability: React.FC<CommonCapabilityProps<string | number | boolean>> = ({\n  description,\n  label,\n  obj,\n  fullPath,\n  value,\n}) => {\n  const { t } = useTranslation();\n  const detail = React.useMemo(() => {\n    if (_.isEmpty(value) && !_.isFinite(value) && !_.isBoolean(value)) {\n      return <span className=\"text-muted\">{t('public~None')}</span>;\n    }\n    return _.toString(value);\n  }, [t, value]);\n\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      {detail}\n    </DetailsItem>\n  );\n};\n\nexport const K8sResourceLinkCapability: React.FC<CommonCapabilityProps<string>> = ({\n  capability,\n  description,\n  descriptor,\n  fullPath,\n  label,\n  obj,\n  value,\n}) => {\n  const { t } = useTranslation();\n  const detail = React.useMemo(() => {\n    if (!value) {\n      return <span className=\"text-muted\">{t('public~None')}</span>;\n    }\n\n    const [, suffix] = capability.match(REGEXP_K8S_RESOURCE_SUFFIX) ?? [];\n    const gvk = suffix?.replace(/:/g, '~');\n    if (!_.isString(value)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[Invalid descriptor] descriptor is incompatible with property ${descriptor.path} and will have no effect`,\n        descriptor,\n      );\n\n      return null;\n    }\n    return <ResourceLink kind={gvk} name={value} namespace={obj.metadata.namespace} />;\n  }, [value, capability, obj.metadata.namespace, t, descriptor]);\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      {detail}\n    </DetailsItem>\n  );\n};\n\nexport const SecretCapability: React.FC<CommonCapabilityProps<string>> = ({\n  description,\n  label,\n  obj,\n  fullPath,\n  value,\n}) => {\n  const { t } = useTranslation();\n  const [reveal, setReveal] = React.useState(false);\n\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      <div className=\"co-toggle-reveal-value\">\n        <Button\n          type=\"button\"\n          variant=\"link\"\n          isInline\n          className=\"pf-m-link--align-right co-toggle-reveal-value__btn\"\n          onClick={() => setReveal(!reveal)}\n        >\n          {reveal ? (\n            <>\n              <EyeSlashIcon className=\"co-icon-space-r\" />\n              {t('olm~Hide values')}\n            </>\n          ) : (\n            <>\n              <EyeIcon className=\"co-icon-space-r\" />\n              {t('olm~Reveal values')}\n            </>\n          )}\n        </Button>\n        <SecretValue value={value} encoded={false} reveal={reveal} />\n      </div>\n    </DetailsItem>\n  );\n};\n\ntype CommonCapabilityProps<V = any> = CapabilityProps<SpecCapability | StatusCapability, V>;\n\nInvalid.displayName = 'Invalid';\nDefaultCapability.displayName = 'DefaultCapability';\nK8sResourceLinkCapability.displayName = 'K8sResourceLinkCapability';\nSecretCapability.displayName = 'SecretCapability';\n","import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as UIActions from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\n\ntype UseShowOperandsInAllNamespaces = () => [boolean, (value: boolean) => void];\n\n// This hook can be used to consume and update the showOperandsInAllNamespaces redux state\nexport const useShowOperandsInAllNamespaces: UseShowOperandsInAllNamespaces = () => {\n  const dispatch = useDispatch();\n  const showOperandsInAllNamespaces = useSelector((state: RootState) =>\n    state.UI.get('showOperandsInAllNamespaces'),\n  );\n  const setShowOperandsInAllNamespaces = React.useCallback(\n    (value: boolean) => dispatch(UIActions.setShowOperandsInAllNamespaces(value)),\n    [dispatch],\n  );\n  return [showOperandsInAllNamespaces, setShowOperandsInAllNamespaces];\n};\n","import * as React from 'react';\nimport {\n  ResourceListPage as DynamicResourceListPage,\n  isResourceListPage as isDynamicResourceListPage,\n} from '@console/dynamic-plugin-sdk/src';\nimport { getResourceListPages } from '@console/internal/components/resource-pages';\nimport { isResourceListPage, ResourceListPage, useExtensions } from '@console/plugin-sdk/src';\n\nexport const useResourceListPages = () => {\n  const resourceListPageExtensions = useExtensions<ResourceListPage>(isResourceListPage);\n  const dynamicResourceListPageExtensions = useExtensions<DynamicResourceListPage>(\n    isDynamicResourceListPage,\n  );\n  return React.useMemo(\n    () => getResourceListPages(resourceListPageExtensions, dynamicResourceListPageExtensions),\n    [resourceListPageExtensions, dynamicResourceListPageExtensions],\n  );\n};\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\n\nexport const useActiveNamespace = (): string => {\n  return useSelector(({ UI }) => UI.get('activeNamespace'));\n};\n","import { getReferenceForModel } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { resourceObjPath, resourcePath } from '@console/internal/components/utils';\nimport { ALL_NAMESPACES_KEY, useActiveNamespace } from '@console/shared';\nimport { ClusterServiceVersionModel } from '../models';\nimport { ClusterServiceVersionKind } from '../types';\n\nexport const useClusterServiceVersionPath = (csv: ClusterServiceVersionKind): string => {\n  const [activeNamespace] = useActiveNamespace();\n  const csvReference = getReferenceForModel(ClusterServiceVersionModel);\n  // Don't link to csv in 'openshift' namespace when copiedCSVsDisabled and in another namespace\n  if (\n    window.SERVER_FLAGS.copiedCSVsDisabled &&\n    csv.metadata.namespace === 'openshift' && // Is global csv\n    activeNamespace !== ALL_NAMESPACES_KEY\n  ) {\n    return resourcePath(csvReference, csv.metadata.name, activeNamespace);\n  }\n  return resourceObjPath(csv, csvReference);\n};\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport {\n  MultiListPage,\n  Table,\n  TableData,\n  Flatten,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  ResourceLink,\n  Timestamp,\n  ConsoleEmptyState,\n  FirehoseResource,\n} from '@console/internal/components/utils';\nimport {\n  ConfigMapModel,\n  DeploymentModel,\n  JobModel,\n  PodModel,\n  ReplicaSetModel,\n  SecretModel,\n  ServiceModel,\n} from '@console/internal/models';\nimport {\n  K8sResourceKind,\n  kindForReference,\n  modelFor,\n  referenceForGroupVersionKind,\n  K8sResourceCommon,\n} from '@console/internal/module/k8s';\nimport { Status } from '@console/shared';\nimport { RouteParams } from '@console/shared/src/types';\nimport { CRDDescription, ProvidedAPI } from '../types';\nimport { OperandLink } from './operand/operand-link';\nimport { providedAPIForReference } from './index';\n\nconst DEFAULT_RESOURCES: CRDDescription['resources'] = [\n  { kind: DeploymentModel.kind, version: DeploymentModel.apiVersion },\n  { kind: ServiceModel.kind, version: ServiceModel.apiVersion },\n  { kind: ReplicaSetModel.kind, version: ReplicaSetModel.apiVersion },\n  { kind: PodModel.kind, version: PodModel.apiVersion },\n  { kind: SecretModel.kind, version: SecretModel.apiVersion },\n  { kind: ConfigMapModel.kind, version: ConfigMapModel.apiVersion },\n  { kind: JobModel.kind, version: JobModel.apiVersion },\n];\n\nconst tableColumnClasses = [\n  '',\n  'pf-v5-u-w-16-on-md',\n  'pf-m-hidden pf-m-visible-on-lg pf-v5-u-w-16-on-lg',\n  'pf-m-hidden pf-m-visible-on-sm',\n];\n\nexport const ResourceTableRow: React.FC<RowFunctionArgs<\n  K8sResourceKind,\n  {\n    linkFor: (obj: K8sResourceKind, providedAPI: ProvidedAPI) => JSX.Element;\n    providedAPI: ProvidedAPI;\n  }\n>> = ({ obj, customData: { linkFor, providedAPI } }) => (\n  <>\n    <TableData className={tableColumnClasses[0]}>{linkFor(obj, providedAPI)}</TableData>\n    <TableData className={tableColumnClasses[1]}>{obj.kind}</TableData>\n    <TableData className={tableColumnClasses[2]}>\n      <Status status={obj?.status?.phase ?? 'Created'} />\n    </TableData>\n    <TableData className={tableColumnClasses[3]}>\n      <Timestamp timestamp={obj.metadata.creationTimestamp} />\n    </TableData>\n  </>\n);\n\nexport const ResourceTable: React.FC<ResourceTableProps> = (props) => {\n  const { t } = useTranslation();\n  const ResourceTableHeader = () => [\n    {\n      title: t('olm~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('olm~Kind'),\n      sortField: 'kind',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('olm~Status'),\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('olm~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~Operand Resources')}\n      Header={ResourceTableHeader}\n      Row={ResourceTableRow}\n      EmptyMsg={() => (\n        <ConsoleEmptyState title={t('olm~No resources found')}>\n          {t('olm~There are no Kubernetes resources used by this operand.')}\n        </ConsoleEmptyState>\n      )}\n      virtualize\n    />\n  );\n};\n\nexport const flattenCsvResources = (\n  parentObj: K8sResourceCommon,\n): Flatten<{ [key: string]: K8sResourceCommon[] }, K8sResourceCommon[]> => (resources) => {\n  return _.flatMap(resources, (resource, kind: string) =>\n    _.map(resource.data, (item) => ({ ...item, kind })),\n  ).reduce((owned, resource) => {\n    return (resource.metadata.ownerReferences || []).some(\n      (ref) =>\n        ref.uid === parentObj.metadata.uid ||\n        owned.some(({ metadata }) => metadata.uid === ref.uid),\n    )\n      ? owned.concat([resource])\n      : owned;\n  }, []);\n};\n\n// NOTE: This is us building the `ownerReferences` graph client-side\n// FIXME: Comparing `kind` is not enough to determine if an object is a custom resource\nexport const linkForCsvResource = (\n  obj: K8sResourceKind,\n  providedAPI: ProvidedAPI,\n  csvName?: string,\n) =>\n  obj.metadata.namespace &&\n  (providedAPI?.resources ?? []).some(({ kind, name }) => name && kind === obj.kind) ? (\n    <OperandLink obj={obj} csvName={csvName} />\n  ) : (\n    <ResourceLink kind={obj.kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n  );\n\ntype ResourcesPageRouteParams = RouteParams<'plural'>;\n\nexport const Resources: React.FC<ResourcesProps> = (props) => {\n  const { t } = useTranslation();\n  const { plural } = useParams<ResourcesPageRouteParams>();\n  const providedAPI = providedAPIForReference(props.customData, plural);\n\n  const firehoseResources = (providedAPI?.resources ?? DEFAULT_RESOURCES).map(\n    ({ name, kind, version }): FirehoseResource => {\n      const group = name ? name.substring(name.indexOf('.') + 1) : '';\n      const reference = group ? referenceForGroupVersionKind(group)(version)(kind) : kind;\n      const model = modelFor(reference);\n      return {\n        kind: model && !model.crd ? kind : reference,\n        namespaced: model ? model.namespaced : true,\n        prop: kind,\n      };\n    },\n  );\n\n  const customData = React.useMemo(\n    () => ({\n      linkFor: linkForCsvResource,\n      providedAPI,\n    }),\n    [providedAPI],\n  );\n\n  return (\n    <MultiListPage\n      filterLabel={t('olm~Resources by name')}\n      resources={firehoseResources}\n      rowFilters={[\n        {\n          type: 'clusterserviceversion-resource-kind',\n          filterGroupName: t('olm~Kind'),\n          reducer: ({ kind }) => kindForReference(kind),\n          items: firehoseResources.map(({ kind }) => ({\n            id: kindForReference(kind),\n            title: kindForReference(kind),\n          })),\n        },\n      ]}\n      flatten={flattenCsvResources(props.obj)}\n      namespace={props.obj.metadata.namespace}\n      ListComponent={ResourceTable}\n      customData={customData}\n    />\n  );\n};\n\nexport type ResourcesProps = {\n  obj: K8sResourceKind;\n  customData: any;\n};\n\nexport type ResourceListProps = {};\n\nexport type ResourceTableProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: K8sResourceKind[];\n  linkFor: (obj: K8sResourceKind, providedAPI: ProvidedAPI) => JSX.Element;\n  providedAPI: ProvidedAPI;\n};\n\nResourceTable.displayName = 'ResourceTable';\nResources.displayName = 'Resources';\n","import * as React from 'react';\nimport {\n  Alert,\n  MenuToggle,\n  MenuToggleElement,\n  Select,\n  SelectList,\n  SelectOption,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { setQueryArgument } from '@console/internal/components/utils';\nimport { alphanumericCompare } from '@console/shared';\nimport { PackageManifestKind } from '../../types';\nimport { DeprecatedOperatorWarningIcon } from '../deprecated-operator-warnings/deprecated-operator-warnings';\nimport { useDeprecatedOperatorWarnings } from '../deprecated-operator-warnings/use-deprecated-operator-warnings';\n\nexport const OperatorChannelSelect: React.FC<OperatorChannelSelectProps> = ({\n  packageManifest,\n  selectedUpdateChannel,\n  setUpdateChannel,\n  setUpdateVersion,\n}) => {\n  const { t } = useTranslation();\n  const channels = React.useMemo(() => packageManifest?.status.channels ?? [], [packageManifest]);\n  const [isChannelSelectOpen, setIsChannelSelectOpen] = React.useState(false);\n  const { setDeprecatedChannel } = useDeprecatedOperatorWarnings();\n  channels.sort((a, b) => -alphanumericCompare(a.name, b.name));\n\n  const getChannelLabel = (ch) => (\n    <>\n      {ch.name}{' '}\n      {ch?.deprecation && (\n        <DeprecatedOperatorWarningIcon\n          deprecation={ch?.deprecation}\n          dataTest=\"deprecated-operator-warning-channel-icon\"\n        />\n      )}\n    </>\n  );\n\n  const channelSelectOptions = channels.map((ch) => (\n    <SelectOption\n      key={ch.name}\n      id={ch.name}\n      value={ch.name}\n      data-test={`channel-option-${ch.name}`}\n    >\n      {getChannelLabel(ch)}\n    </SelectOption>\n  ));\n\n  React.useEffect(() => {\n    setQueryArgument('channel', selectedUpdateChannel);\n    setDeprecatedChannel(\n      _.pick(\n        channels.find((f) => f.deprecation && f.name === selectedUpdateChannel),\n        'deprecation',\n      ),\n    );\n  }, [selectedUpdateChannel, channels, setDeprecatedChannel]);\n\n  return (\n    <>\n      <Select\n        toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n          <MenuToggle\n            ref={toggleRef}\n            onClick={(open) => setIsChannelSelectOpen(open)}\n            isExpanded={isChannelSelectOpen}\n            isDisabled={!packageManifest}\n            isFullWidth\n            aria-label={t('olm~Select a channel')}\n            className=\"co-operator-channel__select\"\n            data-test=\"operator-channel-select-toggle\"\n          >\n            {getChannelLabel(channels.find((f) => f.name === selectedUpdateChannel))}\n          </MenuToggle>\n        )}\n        onSelect={(event: React.MouseEvent | React.ChangeEvent, value: string) => {\n          setUpdateChannel(value);\n          setIsChannelSelectOpen(false);\n          setUpdateVersion('');\n        }}\n        selected={selectedUpdateChannel || '-'}\n        onOpenChange={(isOpen) => setIsChannelSelectOpen(isOpen)}\n        isOpen={isChannelSelectOpen}\n      >\n        <SelectList>{channelSelectOptions}</SelectList>\n      </Select>\n    </>\n  );\n};\n\ntype OperatorChannelSelectProps = {\n  packageManifest: PackageManifestKind;\n  selectedUpdateChannel: string;\n  setUpdateChannel: (updateChannel: string) => void;\n  setUpdateVersion: (updateVersion: string) => void;\n};\n\nexport const OperatorVersionSelect: React.FC<OperatorVersionSelectProps> = ({\n  packageManifest,\n  selectedUpdateChannel,\n  updateVersion,\n  setUpdateVersion,\n  showVersionAlert = false,\n}) => {\n  const { t } = useTranslation();\n  const { setDeprecatedVersion } = useDeprecatedOperatorWarnings();\n  const [isVersionSelectOpen, setIsVersionSelectOpen] = React.useState(false);\n  const [defaultVersionForChannel, setDefaultVersionForChannel] = React.useState('');\n  const { channels = [] } = packageManifest?.status ?? {};\n\n  React.useEffect(() => {\n    setDefaultVersionForChannel(\n      channels.find((ch) => ch.name === selectedUpdateChannel)?.currentCSVDesc?.version ?? '-',\n    );\n  }, [channels, selectedUpdateChannel]);\n\n  const selectedUpdateVersion = updateVersion || defaultVersionForChannel;\n\n  // Return all versions associated with selectedUpdateChannel\n  const selectedChannelVersions = React.useMemo(\n    () => channels.find((ch) => ch.name === selectedUpdateChannel)?.entries ?? [],\n    [channels, selectedUpdateChannel],\n  );\n\n  const getVersionLabel = (v) => (\n    <>\n      {v?.version}{' '}\n      {v?.deprecation && (\n        <DeprecatedOperatorWarningIcon\n          deprecation={v?.deprecation}\n          dataTest=\"deprecated-operator-warning-version-icon\"\n        />\n      )}\n    </>\n  );\n\n  const versionSelectOptions = selectedChannelVersions.map((v) => (\n    <SelectOption\n      key={v.version}\n      id={v.version}\n      value={v.version}\n      data-test={`version-option-${v.name}`}\n    >\n      {getVersionLabel(v)}\n    </SelectOption>\n  ));\n\n  React.useEffect(() => {\n    setQueryArgument('version', selectedUpdateVersion);\n    setDeprecatedVersion(\n      _.pick(\n        selectedChannelVersions.find((f) => f.deprecation && f.version === selectedUpdateVersion),\n        'deprecation',\n      ),\n    );\n  }, [selectedUpdateVersion, selectedChannelVersions, setDeprecatedVersion]);\n\n  return (\n    <>\n      <Select\n        toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n          <MenuToggle\n            ref={toggleRef}\n            onClick={(open) => setIsVersionSelectOpen(open)}\n            isExpanded={isVersionSelectOpen}\n            isDisabled={!packageManifest}\n            isFullWidth\n            aria-label={t('olm~Select a version')}\n            className=\"co-operator-version__select\"\n            data-test=\"operator-version-select-toggle\"\n          >\n            {getVersionLabel(\n              selectedChannelVersions.find((v) => v.version === selectedUpdateVersion),\n            )}\n          </MenuToggle>\n        )}\n        onSelect={(event: React.MouseEvent | React.ChangeEvent, value: string) => {\n          setUpdateVersion(value);\n          setIsVersionSelectOpen(false);\n        }}\n        selected={selectedUpdateVersion}\n        onOpenChange={(isOpen) => setIsVersionSelectOpen(isOpen)}\n        isOpen={isVersionSelectOpen}\n      >\n        <SelectList>{versionSelectOptions}</SelectList>\n      </Select>\n\n      {showVersionAlert && selectedUpdateVersion !== defaultVersionForChannel && (\n        <Alert\n          variant=\"info\"\n          isInline\n          className=\"co-alert co-alert--margin-top co-alert__update-approval\"\n          title={t(\n            'olm~Manual update approval is required when not installing the latest version for the selected channel.',\n          )}\n        />\n      )}\n    </>\n  );\n};\n\ntype OperatorVersionSelectProps = {\n  packageManifest: PackageManifestKind;\n  selectedUpdateChannel: string;\n  updateVersion: string;\n  setUpdateVersion: (updateVersion: string) => void;\n  showVersionAlert?: boolean;\n};\n","export const deleteDatabase = (dbName): Promise<void> =>\n  new Promise((resolve, reject) => {\n    const request = indexedDB.deleteDatabase(dbName);\n    request.onsuccess = () => {\n      resolve();\n    };\n\n    request.onerror = () => {\n      reject(new Error(`Database error: ${request.error?.message}`));\n    };\n  });\n\nexport const openDatabase = (dbName: string, version?: number): Promise<IDBDatabase> =>\n  new Promise((resolve, reject) => {\n    const request = indexedDB.open(dbName, version);\n    request.onupgradeneeded = () => {\n      const db = request.result;\n\n      if (!db.objectStoreNames.contains('olm.package')) {\n        const packageStore = db.createObjectStore('olm.package', { keyPath: 'id' });\n        packageStore.createIndex('catalog', 'catalog', { unique: false });\n      }\n      if (!db.objectStoreNames.contains('olm.channel')) {\n        const channelStore = db.createObjectStore('olm.channel', { keyPath: 'id' });\n        channelStore.createIndex('package', 'package', { unique: false });\n        channelStore.createIndex('catalog', 'catalog', { unique: false });\n      }\n      if (!db.objectStoreNames.contains('olm.bundle')) {\n        const bundleStore = db.createObjectStore('olm.bundle', { keyPath: 'id' });\n        bundleStore.createIndex('package', 'package', { unique: false });\n        bundleStore.createIndex('catalog', 'catalog', { unique: false });\n      }\n      if (!db.objectStoreNames.contains('extension-catalog')) {\n        const extensionCatalogStore = db.createObjectStore('extension-catalog', {\n          keyPath: 'id',\n        });\n        extensionCatalogStore.createIndex('categories', 'categories', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('keywords', 'keywords', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('infrastructureFeatures', 'infrastructureFeatures', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('validSubscription', 'validSubscription', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('source', 'source', { unique: false });\n        extensionCatalogStore.createIndex('provider', 'provider', { unique: false });\n        extensionCatalogStore.createIndex('catalog', 'catalog', { unique: false });\n        extensionCatalogStore.createIndex('capabilities', 'capabilities', { unique: false });\n      }\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n\n    request.onerror = () => {\n      reject(new Error(`Database error: ${request.error?.message}`));\n    };\n  });\n\nexport const getObjectStore = (db: IDBDatabase, storeName: string, mode: IDBTransactionMode) => {\n  const transaction = db.transaction([storeName], mode);\n  return transaction.objectStore(storeName);\n};\n\nexport const addItem = <Item = any>(\n  db: IDBDatabase,\n  storeName: string,\n  item: Item,\n): Promise<IDBValidKey> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readwrite');\n    const request = store.add(item);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const putItem = <Item = any>(\n  db: IDBDatabase,\n  storeName: string,\n  item: Item,\n): Promise<IDBValidKey> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readwrite');\n    const request = store.put(item);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const getItem = <Item = any>(\n  db: IDBDatabase,\n  storeName: string,\n  key: string,\n): Promise<Item> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readonly');\n    const request = store.get(key);\n    request.onsuccess = () => resolve(request.result as Item);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const getItems = <Item = any>(db: IDBDatabase, storeName: string): Promise<Item[]> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readonly');\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const getIndexedItems = <Item = unknown>(\n  db: IDBDatabase,\n  storeName: string,\n  index: string,\n  value: string,\n): Promise<Item[]> =>\n  new Promise((resolve, reject) => {\n    // Start a transaction\n    const transaction = db.transaction(storeName, 'readonly');\n    const objectStore = transaction.objectStore(storeName);\n    const storeIndex = objectStore.index(index);\n    const keyRange = IDBKeyRange.only(value);\n    const cursorRequest = storeIndex.openCursor(keyRange);\n\n    const objects: Item[] = [];\n    cursorRequest.onsuccess = () => {\n      const cursor = cursorRequest.result;\n      if (cursor) {\n        objects.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve(objects);\n      }\n    };\n    cursorRequest.onerror = () => {\n      reject(cursorRequest.error);\n    };\n  });\n\nexport const clearObjectStore = (db: IDBDatabase, name: string): Promise<void> =>\n  new Promise((resolve, reject) => {\n    const objectStore = getObjectStore(db, name, 'readwrite');\n    const request = objectStore.clear();\n\n    request.onsuccess = () => resolve();\n    request.onerror = () => reject(request.error);\n  });\n\nexport const clearObjectStores = (db: IDBDatabase, ...names: string[]) =>\n  Promise.all(names.map((name) => clearObjectStore(db, name)));\n","import * as React from 'react';\nimport { useResourceDetailsPages } from './useResourceDetailsPages';\n\nexport const useResourceDetailsPage = (key: string) => {\n  const detailsPages = useResourceDetailsPages();\n  return React.useMemo(() => detailsPages.get(key), [detailsPages, key]);\n};\n","import * as React from 'react';\nimport {\n  ResourceDetailsPage as DynamicResourceDetailsPage,\n  isResourceDetailsPage as isDynamicResourceDetailsPage,\n} from '@console/dynamic-plugin-sdk/src';\nimport { getResourceDetailsPages } from '@console/internal/components/resource-pages';\nimport { isResourceDetailsPage, ResourceDetailsPage, useExtensions } from '@console/plugin-sdk/src';\n\nexport const useResourceDetailsPages = () => {\n  const resourceDetailsPageExtensions = useExtensions<ResourceDetailsPage>(isResourceDetailsPage);\n  const dynamicResourceDetailsPageExtensions = useExtensions<DynamicResourceDetailsPage>(\n    isDynamicResourceDetailsPage,\n  );\n  return React.useMemo(\n    () =>\n      getResourceDetailsPages(resourceDetailsPageExtensions, dynamicResourceDetailsPageExtensions),\n    [resourceDetailsPageExtensions, dynamicResourceDetailsPageExtensions],\n  );\n};\n","import { useMemo } from 'react';\nimport { useResourceListPages } from './useResourceListPages';\n\nexport const useResourceListPage = (key: string) => {\n  const listPages = useResourceListPages();\n  return useMemo(() => listPages.get(key), [listPages, key]);\n};\n","import * as React from 'react';\nimport { JSONSchema7 } from 'json-schema';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DetailsItem } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getSchemaAtPath } from '@console/shared';\nimport { withFallback } from '@console/shared/src/components/error';\nimport { SpecDescriptorDetailsItem } from './spec';\nimport { StatusDescriptorDetailsItem } from './status';\nimport { Descriptor, DescriptorType } from './types';\nimport {\n  DescriptorGroup,\n  groupDescriptorDetails,\n  useCalculatedDescriptorProperties,\n} from './utils';\n\nexport const DescriptorDetailsItem = withFallback<DescriptorDetailsItemProps>(\n  ({ className, descriptor, model, obj, onError, schema, type }) => {\n    const { displayName: label, description, value, fullPath } = useCalculatedDescriptorProperties(\n      type,\n      descriptor,\n      schema,\n      obj,\n    );\n    const descriptorProps = {\n      className,\n      description,\n      descriptor,\n      fullPath,\n      label,\n      model,\n      obj,\n      onError,\n      value,\n    };\n    switch (type) {\n      case DescriptorType.spec:\n        return <SpecDescriptorDetailsItem {...descriptorProps} />;\n      case DescriptorType.status:\n        return <StatusDescriptorDetailsItem {...descriptorProps} />;\n      default:\n        return null;\n    }\n  },\n);\n\nconst DescriptorDetailsItemArrayGroup: React.FC<DescriptorDetailsItemGroupProps> = ({\n  className,\n  group,\n  groupPath,\n  model,\n  obj,\n  onError,\n  schema,\n  type,\n}) => {\n  const { t } = useTranslation();\n  const { arrayGroupPath, elementDescriptor, descriptor, nested } = group;\n  const arrayGroupSchema = getSchemaAtPath(schema, `${type}.${arrayGroupPath}`);\n  const description = descriptor?.description || arrayGroupSchema?.description;\n  const label =\n    descriptor?.displayName ||\n    arrayGroupSchema?.title ||\n    _.startCase(_.last(arrayGroupPath.split('.')));\n  const arrayElementDescriptors = nested ?? [elementDescriptor];\n  const value = _.get(obj, [type, ..._.toPath(arrayGroupPath)], []);\n  return (\n    <div className={className}>\n      <DetailsItem description={description} label={label} obj={obj} path={`${type}.${groupPath}`}>\n        <div className=\"details-item__array\">\n          {value?.length ? (\n            _.times(value.length, (i) => (\n              <div className=\"details-item__value--group\">\n                <dl>\n                  {_.map(arrayElementDescriptors, (primitiveDescriptor: Descriptor) => {\n                    const path = primitiveDescriptor.path.replace(/\\d+/, String(i));\n                    return (\n                      <DescriptorDetailsItem\n                        descriptor={{ ...primitiveDescriptor, path }}\n                        key={`${type}.${path}`}\n                        model={model}\n                        obj={obj}\n                        onError={onError}\n                        schema={getSchemaAtPath(schema, path)}\n                        type={type}\n                      />\n                    );\n                  })}\n                </dl>\n              </div>\n            ))\n          ) : (\n            <span className=\"text-muted\">{t('public~None')}</span>\n          )}\n        </div>\n      </DetailsItem>\n    </div>\n  );\n};\n\nconst DescriptorDetailsItemGroup: React.FC<DescriptorDetailsItemGroupProps> = ({\n  group,\n  groupPath,\n  model,\n  obj,\n  onError,\n  schema,\n  type,\n}) => {\n  const { descriptor, nested } = group;\n  const groupSchema = getSchemaAtPath(schema, `${type}.${groupPath}`);\n  const description = descriptor?.description || groupSchema?.description;\n  const label = descriptor?.displayName || groupSchema?.title || _.startCase(groupPath);\n  const arrayGroups = _.pickBy(nested, 'isArrayGroup');\n  const primitives = _.omitBy(nested, 'isArrayGroup');\n  const className = _.isEmpty(arrayGroups) || _.isEmpty(primitives) ? 'col-sm-6' : 'col-sm-12';\n  return (\n    <div className={className}>\n      <DetailsItem description={description} label={label} obj={obj} path={`${type}.${groupPath}`}>\n        <dl className=\"details-item__value--group olm-descriptors__group\">\n          {!_.isEmpty(primitives) && (\n            <div>\n              {_.map(primitives, ({ descriptor: primitiveDescriptor }) => (\n                <DescriptorDetailsItem\n                  descriptor={primitiveDescriptor}\n                  key={`${type}.${primitiveDescriptor.path}`}\n                  model={model}\n                  obj={obj}\n                  onError={onError}\n                  schema={schema}\n                  type={type}\n                />\n              ))}\n            </div>\n          )}\n          {!_.isEmpty(arrayGroups) && (\n            <div>\n              {_.map(arrayGroups, (arrayGroup: DescriptorGroup) => (\n                <DescriptorDetailsItemArrayGroup\n                  group={arrayGroup}\n                  groupPath={arrayGroup.arrayGroupPath}\n                  key={`${type}.${groupPath}.${arrayGroup.arrayGroupPath}`}\n                  model={model}\n                  obj={obj}\n                  onError={onError}\n                  schema={schema}\n                  type={type}\n                />\n              ))}\n            </div>\n          )}\n        </dl>\n      </DetailsItem>\n    </div>\n  );\n};\n\nexport const DescriptorDetailsItemList: React.FC<DescriptorDetailsItemListProps> = ({\n  descriptors,\n  model,\n  obj,\n  onError,\n  schema,\n  type,\n  itemClassName,\n}) => {\n  const groupedDescriptors = React.useMemo(() => groupDescriptorDetails(descriptors), [\n    descriptors,\n  ]);\n  return (\n    <dl className={`olm-descriptors olm-descriptors--${type}`}>\n      {_.map(groupedDescriptors, (group, groupPath) => {\n        const groupProps = {\n          group,\n          groupPath,\n        };\n\n        const commonProps = {\n          model,\n          obj,\n          onError,\n          schema,\n          type,\n        };\n\n        const { isArrayGroup, descriptor, nested } = group;\n        if (isArrayGroup) {\n          return (\n            <DescriptorDetailsItemArrayGroup\n              {...groupProps}\n              {...commonProps}\n              className={itemClassName}\n            />\n          );\n        }\n\n        if (!_.isEmpty(nested)) {\n          return (\n            <DescriptorDetailsItemGroup\n              key={`${type}.${groupPath}`}\n              {...groupProps}\n              {...commonProps}\n            />\n          );\n        }\n\n        return (\n          <DescriptorDetailsItem\n            key={`${type}.${groupPath}`}\n            className={itemClassName}\n            descriptor={descriptor}\n            {...commonProps}\n          />\n        );\n      })}\n    </dl>\n  );\n};\n\nexport type DescriptorDetailsItemProps = {\n  descriptor: Descriptor;\n  obj: K8sResourceKind;\n  model: K8sKind;\n  onError?: (e: Error) => void;\n  schema: JSONSchema7;\n  type: DescriptorType;\n  className?: string;\n};\n\ntype DescriptorDetailsItemGroupProps = Omit<DescriptorDetailsItemProps, 'descriptor'> & {\n  group: DescriptorGroup;\n  groupPath: string;\n  className?: string;\n};\n\ntype DescriptorDetailsItemListProps = Omit<\n  DescriptorDetailsItemGroupProps,\n  'groupPath' | 'group'\n> & {\n  descriptors: Descriptor[];\n  itemClassName?: string;\n};\n\nDescriptorDetailsItem.displayName = 'DescriptorDetailsItem';\nDescriptorDetailsItemGroup.displayName = 'DescriptorDetailsItemGroup';\nDescriptorDetailsItemList.displayName = 'DescriptorDetailsItemList';\n","import * as React from 'react';\nimport { Button, Switch, Checkbox } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  LoadingInline,\n  ResourceLink,\n  Selector,\n  DetailsItem,\n  LabelList,\n  LabelListProps,\n} from '@console/internal/components/utils';\nimport { k8sPatch, k8sUpdate, Selector as SelectorType } from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { DefaultCapability, K8sResourceLinkCapability, SecretCapability } from '../common';\nimport { CapabilityProps, SpecCapability, Error } from '../types';\nimport { getPatchPathFromDescriptor, getValidCapabilitiesForValue } from '../utils';\nimport { configureSizeModal } from './configure-size';\nimport { configureUpdateStrategyModal } from './configure-update-strategy';\nimport { EndpointList, EndpointListProps } from './endpoint';\nimport { ResourceRequirementsModalLink } from './resource-requirements';\n\nconst PodCount: React.FC<SpecCapabilityProps<number>> = ({\n  description,\n  descriptor,\n  label,\n  model,\n  obj,\n  fullPath,\n  value,\n}) => (\n  <DetailsItem\n    description={description}\n    label={label}\n    obj={obj}\n    path={fullPath}\n    onEdit={() =>\n      configureSizeModal({\n        kindObj: model,\n        resource: obj,\n        specDescriptor: descriptor,\n        specValue: value,\n      })\n    }\n  >\n    {_.isNil(value) ? '-' : `${value} pods`}\n  </DetailsItem>\n);\n\nconst Endpoints: React.FC<SpecCapabilityProps<EndpointListProps['endpoints']>> = ({\n  description,\n  label,\n  obj,\n  fullPath,\n  value,\n}) => (\n  <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n    <EndpointList endpoints={value} />\n  </DetailsItem>\n);\n\nconst Label: React.FC<SpecCapabilityProps<LabelListProps['labels']>> = ({\n  description,\n  label,\n  model,\n  obj,\n  fullPath,\n  value,\n}) => (\n  <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n    {_.isObject(value) ? (\n      <LabelList kind={model.kind} labels={value} />\n    ) : (\n      <span>{value || '-'}</span>\n    )}\n  </DetailsItem>\n);\n\nconst NamespaceSelector: React.FC<SpecCapabilityProps<{ matchNames: string[] }>> = ({\n  description,\n  label,\n  obj,\n  fullPath,\n  value,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      {value?.matchNames?.[0] ? (\n        <ResourceLink kind=\"Namespace\" name={value.matchNames[0]} title={value.matchNames[0]} />\n      ) : (\n        <span className=\"text-muted\">{t('public~None')}</span>\n      )}\n    </DetailsItem>\n  );\n};\n\nconst ResourceRequirements: React.FC<SpecCapabilityProps> = ({\n  description,\n  descriptor,\n  label,\n  obj,\n  fullPath,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      <dl className=\"co-spec-descriptor--resource-requirements\">\n        <dt>{t('olm~Resource limits')}</dt>\n        <dd>\n          <ResourceRequirementsModalLink type=\"limits\" obj={obj} path={descriptor.path} />\n        </dd>\n        <dt>{t('olm~Resource requests')}</dt>\n        <dd>\n          <ResourceRequirementsModalLink type=\"requests\" obj={obj} path={descriptor.path} />\n        </dd>\n      </dl>\n    </DetailsItem>\n  );\n};\n\nconst BasicSelector: React.FC<SpecCapabilityProps<SelectorType>> = ({\n  capability,\n  description,\n  label,\n  obj,\n  fullPath,\n  value,\n}) => {\n  const [, kind] = capability.split(SpecCapability.selector);\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      <Selector selector={value} kind={kind?.replace(/:/g, '~')} />\n    </DetailsItem>\n  );\n};\n\nconst BooleanSwitch: React.FC<SpecCapabilityProps<boolean>> = ({\n  model,\n  obj,\n  description,\n  descriptor,\n  label,\n  onError,\n  fullPath,\n  value,\n}) => {\n  const { t } = useTranslation();\n  const [checked, setChecked] = React.useState(Boolean(value));\n  const [confirmed, setConfirmed] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState(null);\n\n  const errorCb = (err: Error): void => {\n    setConfirmed(false);\n    setChecked(Boolean(value));\n    setErrorMessage(err.message);\n    onError(err);\n  };\n\n  const update = () => {\n    setConfirmed(true);\n    setErrorMessage(null);\n\n    if (_.has(obj, `spec.${descriptor.path}`)) {\n      const patchFor = (val: boolean) => [\n        { op: 'add', path: `/spec/${getPatchPathFromDescriptor(descriptor)}`, value: val },\n      ];\n      return k8sPatch(model, obj, patchFor(checked)).catch((err) => errorCb(err));\n    }\n\n    const newObj = _.cloneDeep(obj);\n    _.set(newObj, `spec.${descriptor.path}`, checked);\n    return k8sUpdate(model, newObj).catch((err) => errorCb(err));\n  };\n\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      <div className=\"co-spec-descriptor--switch\">\n        <Switch\n          id={descriptor.path}\n          isChecked={checked}\n          onChange={(_event, val) => {\n            setChecked(val);\n            setConfirmed(false);\n            setErrorMessage(null);\n          }}\n          label={t('public~True')}\n          labelOff={t('public~False')}\n        />\n        &nbsp;&nbsp;\n        {checked !== Boolean(value) && confirmed && <LoadingInline />}\n        {checked !== Boolean(value) && !confirmed && (\n          <>\n            &nbsp;&nbsp;\n            <Button className=\"pf-m-link--align-left\" type=\"button\" variant=\"link\" onClick={update}>\n              <YellowExclamationTriangleIcon className=\"co-icon-space-r pf-v5-c-button-icon--plain\" />\n              {t('olm~Confirm change')}\n            </Button>\n          </>\n        )}\n      </div>\n      {errorMessage && (\n        <div className=\"cos-error-title co-break-word\">\n          {errorMessage || t('olm~An error occurred')}\n        </div>\n      )}\n    </DetailsItem>\n  );\n};\n\nconst CheckboxUIComponent: React.FC<SpecCapabilityProps<boolean>> = ({\n  description,\n  descriptor,\n  label,\n  model,\n  obj,\n  fullPath,\n  value,\n}) => {\n  const { t } = useTranslation();\n  const [checked, setChecked] = React.useState(Boolean(value));\n  const [confirmed, setConfirmed] = React.useState(false);\n\n  const patchFor = (val: boolean) => [\n    { op: 'add', path: `/spec/${getPatchPathFromDescriptor(descriptor)}`, value: val },\n  ];\n  const update = () => {\n    setConfirmed(true);\n    return k8sPatch(model, obj, patchFor(checked));\n  };\n\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      <div className=\"co-spec-descriptor--switch\">\n        <Checkbox\n          id={descriptor.path}\n          style={{ marginLeft: '10px' }}\n          isChecked={checked}\n          data-checked-state={checked}\n          label={label}\n          onChange={(_event, val) => {\n            setChecked(val);\n            setConfirmed(false);\n          }}\n        />\n        &nbsp;&nbsp;\n        {checked !== Boolean(value) && confirmed && <LoadingInline />}\n        {checked !== Boolean(value) && !confirmed && (\n          <>\n            &nbsp;&nbsp;\n            <Button className=\"pf-m-link--align-left\" type=\"button\" variant=\"link\" onClick={update}>\n              <YellowExclamationTriangleIcon className=\"co-icon-space-r pf-v5-c-button-icon--plain\" />\n              {t('olm~Confirm change')}\n            </Button>\n          </>\n        )}\n      </div>\n    </DetailsItem>\n  );\n};\n\n// TODO [tech debt] Create a type definition for udpate strategy api and use it here\nconst UpdateStrategy: React.FC<SpecCapabilityProps> = ({\n  description,\n  descriptor,\n  label,\n  model,\n  obj,\n  fullPath,\n  value,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <DetailsItem\n      description={description}\n      label={label}\n      obj={obj}\n      onEdit={() =>\n        configureUpdateStrategyModal({\n          kindObj: model,\n          resource: obj,\n          specDescriptor: descriptor,\n          specValue: value,\n        })\n      }\n      path={fullPath}\n    >\n      {value?.type ?? t('public~None')}\n    </DetailsItem>\n  );\n};\n\nexport const SpecDescriptorDetailsItem: React.FC<SpecCapabilityProps> = ({\n  className,\n  ...props\n}) => {\n  const [capability] =\n    getValidCapabilitiesForValue<SpecCapability>(props.descriptor, props.value) ?? [];\n\n  const Component = React.useMemo(() => {\n    if (capability?.startsWith(SpecCapability.k8sResourcePrefix)) {\n      return K8sResourceLinkCapability;\n    }\n\n    if (capability?.startsWith(SpecCapability.selector)) {\n      return BasicSelector;\n    }\n\n    switch (capability) {\n      case SpecCapability.podCount:\n        return PodCount;\n      case SpecCapability.endpointList:\n        return Endpoints;\n      case SpecCapability.label:\n        return Label;\n      case SpecCapability.namespaceSelector:\n        return NamespaceSelector;\n      case SpecCapability.resourceRequirements:\n        return ResourceRequirements;\n      case SpecCapability.booleanSwitch:\n        return BooleanSwitch;\n      case SpecCapability.password:\n        return SecretCapability;\n      case SpecCapability.updateStrategy:\n        return UpdateStrategy;\n      case SpecCapability.checkbox:\n        return CheckboxUIComponent;\n      case SpecCapability.hidden:\n        return null;\n      default:\n        if (_.isObject(props.value)) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            `[Invalid SpecDescriptor] Cannot render 'spec.${props.descriptor.path}'. A valid x-descriptor must be provided for non-primitive properties.`,\n            'See https://github.com/openshift/console/blob/master/frontend/packages/operator-lifecycle-manager/src/components/descriptors/reference/reference.md#olm-descriptor-reference',\n          );\n          return null;\n        }\n        return DefaultCapability;\n    }\n  }, [props.descriptor, props.value, capability]);\n  return Component ? (\n    <div className={className}>\n      <Component {...props} capability={capability} />\n    </div>\n  ) : null;\n};\n\ntype SpecCapabilityProps<V = any> = CapabilityProps<SpecCapability, V>;\nPodCount.displayName = 'PodCount';\nEndpoints.displayName = 'Endpoints';\nLabel.displayName = 'Label';\nNamespaceSelector.displayName = 'NamespaceSelector';\nResourceRequirements.displayName = 'ResourceRequirements';\nBasicSelector.displayName = 'BasicSelector';\nBooleanSwitch.displayName = 'BooleanSwitch';\nCheckboxUIComponent.displayName = 'CheckboxUIComponent';\nUpdateStrategy.displayName = 'UpdateStrategy';\nSpecDescriptorDetailsItem.displayName = 'SpecDescriptorDetailsItem';\n","import { configureCountModal } from '@console/internal/components/modals';\nimport { K8sResourceKind, K8sKind } from '@console/internal/module/k8s';\nimport { Descriptor } from '../types';\nimport { getPatchPathFromDescriptor } from '../utils';\n\nexport const configureSizeModal = ({\n  kindObj,\n  resource,\n  specDescriptor,\n  specValue,\n}: ConfigureSizeModalProps) => {\n  return configureCountModal({\n    resourceKind: kindObj,\n    resource,\n    defaultValue: specValue || 0,\n    // t('olm~Modify {{item}}')\n    titleKey: 'olm~Modify {{item}}',\n    titleVariables: { item: specDescriptor.displayName },\n    message: specDescriptor.description,\n    path: `/spec/${getPatchPathFromDescriptor(specDescriptor)}`,\n    // t('olm~Update {{item}}')\n    buttonTextKey: 'olm~Update {{item}}',\n    buttonTextVariables: { item: specDescriptor.displayName },\n  });\n};\n\ntype ConfigureSizeModalProps = {\n  kindObj: K8sKind;\n  resource: K8sResourceKind;\n  specDescriptor: Descriptor;\n  specValue: any;\n};\n","import i18n from '@console/internal/i18n';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { updateStrategyModal } from '../../modals/update-strategy-modal';\nimport { Descriptor } from '../types';\nimport { getPatchPathFromDescriptor } from '../utils';\n\nexport const configureUpdateStrategyModal = ({\n  kindObj,\n  resource,\n  specDescriptor,\n  specValue,\n}: ConfigureUpdateStrategyModalProps) => {\n  return updateStrategyModal({\n    resourceKind: kindObj,\n    resource,\n    defaultValue: specValue,\n    title: i18n.t('olm~Edit {{item}}', { item: specDescriptor.displayName }),\n    path: `/spec/${getPatchPathFromDescriptor(specDescriptor)}`,\n  });\n};\n\ntype ConfigureUpdateStrategyModalProps = {\n  kindObj: K8sKind;\n  resource: K8sResourceKind;\n  specDescriptor: Descriptor;\n  specValue: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '@console/internal/components/factory/modal';\nimport {\n  ConfigureUpdateStrategy,\n  getNumberOrPercent,\n} from '@console/internal/components/modals/configure-update-strategy-modal';\nimport { K8sKind, k8sPatch, K8sResourceKind, Patch } from '@console/internal/module/k8s';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\n\nexport const UpdateStrategyModal: React.FC<UpdateStrategyModalProps> = ({\n  cancel,\n  close,\n  path,\n  defaultValue,\n  resource,\n  resourceKind,\n  title,\n}) => {\n  const { t } = useTranslation();\n  const getPath = path.substring(1).replace('/', '.');\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n  const [strategyType, setStrategyType] = React.useState(\n    _.get(resource, `${getPath}.type`) || defaultValue,\n  );\n  const [maxUnavailable, setMaxUnavailable] = React.useState(\n    _.get(resource, `${getPath}.rollingUpdate.maxUnavailable`, '25%'),\n  );\n  const [maxSurge, setMaxSurge] = React.useState(\n    _.get(resource, `${getPath}.rollingUpdate.maxSurge`, '25%'),\n  );\n\n  const submit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>): void => {\n      event.preventDefault();\n\n      const patch: Patch = { path: `${path}/rollingUpdate`, op: 'remove' };\n      if (strategyType === 'RollingUpdate') {\n        patch.value = {\n          maxUnavailable: getNumberOrPercent(maxUnavailable || '25%'),\n          maxSurge: getNumberOrPercent(maxSurge || '25%'),\n        };\n        patch.op = 'add';\n      }\n      handlePromise(\n        k8sPatch(resourceKind, resource, [\n          patch,\n          { path: `${path}/type`, value: strategyType, op: 'replace' },\n        ]),\n      )\n        .then(close)\n        .catch(() => {});\n    },\n    [close, handlePromise, maxSurge, maxUnavailable, path, resource, resourceKind, strategyType],\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{title}</ModalTitle>\n      <ModalBody>\n        <ConfigureUpdateStrategy\n          strategyType={strategyType}\n          maxUnavailable={maxUnavailable}\n          maxSurge={maxSurge}\n          onChangeStrategyType={setStrategyType}\n          onChangeMaxUnavailable={setMaxUnavailable}\n          onChangeMaxSurge={setMaxSurge}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={t('public~Save')}\n        cancel={cancel}\n      />\n    </form>\n  );\n};\n\nexport const updateStrategyModal = createModalLauncher(UpdateStrategyModal);\n\nUpdateStrategyModal.displayName = 'UpdateStrategyModal';\n\nexport type UpdateStrategyModalProps = {\n  defaultValue: any;\n  path: string;\n  resource: K8sResourceKind;\n  resourceKind: K8sKind;\n  title: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceIcon } from '@console/internal/components/utils';\n\nexport const EndpointRow: React.FC<EndpointRowProps> = ({ endpoint }) => {\n  const detail = ['scheme', 'honorLabels', 'targetPort'].reduce(\n    (element, field) =>\n      endpoint?.[field] ? (\n        <span>\n          <span className=\"text-muted\">{field}:</span>\n          {endpoint[field]}\n        </span>\n      ) : (\n        element\n      ),\n    <span className=\"text-muted\">--</span>,\n  );\n\n  return (\n    <div className=\"co-ip-row\">\n      <div className=\"row\">\n        <div className=\"col-xs-6\">\n          <p>\n            <ResourceIcon kind=\"Service\" />\n            {endpoint.port || '--'}\n          </p>\n        </div>\n        <div className=\"col-xs-2\">\n          <p>{endpoint.interval || '--'}</p>\n        </div>\n        <div className=\"col-xs-4\">{detail}</div>\n      </div>\n    </div>\n  );\n};\n\nexport const EndpointList: React.FC<EndpointListProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"service-ips\">\n      <div className=\"row co-ip-header\">\n        <div className=\"col-xs-6\">{t('olm~Port')}</div>\n        <div className=\"col-xs-2\">{t('olm~Interval')}</div>\n        <div className=\"col-xs-4\" />\n      </div>\n      <div className=\"rows\">\n        {props.endpoints ? (\n          props.endpoints.map((e) => <EndpointRow endpoint={e} key={e.port} />)\n        ) : (\n          <span className=\"text-muted\">{t('olm~No endpoints')}</span>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Taken from https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint\n */\nexport type Endpoint = {\n  port?: string;\n  targetPort?: number | string;\n  scheme?: string;\n  honorLabels?: boolean;\n  interval?: string;\n};\n\nexport type EndpointRowProps = {\n  endpoint: Endpoint;\n};\n\nexport type EndpointListProps = {\n  endpoints: Endpoint[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DetailsItem } from '@console/internal/components/utils';\nimport { Status, SuccessStatus } from '@console/shared';\nimport { DefaultCapability, Invalid, K8sResourceLinkCapability, SecretCapability } from '../common';\nimport { CapabilityProps, StatusCapability } from '../types';\nimport { isMainStatusDescriptor, getValidCapabilitiesForValue } from '../utils';\nimport { Phase } from './phase';\nimport { PodStatusChart, PodStatusChartProps } from './pods';\n\nconst PodStatuses: React.FC<StatusCapabilityProps<PodStatusChartProps['statuses']>> = ({\n  description,\n  descriptor,\n  fullPath,\n  label,\n  obj,\n  value,\n}) => {\n  const { t } = useTranslation();\n  const detail = React.useMemo(() => {\n    if (!_.isObject(value) || _.some(value, (v) => !_.isArray(v))) {\n      return <Invalid path={descriptor.path} />;\n    }\n    if (_.every(value, (v) => _.isArray(v) && v.length === 0)) {\n      return <span className=\"text-muted\">{t('olm~No members')}</span>;\n    }\n    return <PodStatusChart statuses={value} subTitle={descriptor.path} />;\n  }, [descriptor.path, t, value]);\n  return (\n    <div className=\"co-operand-details__section--info\">\n      <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n        {detail}\n      </DetailsItem>\n    </div>\n  );\n};\n\nconst Link: React.FC<StatusCapabilityProps<string>> = ({\n  description,\n  fullPath,\n  label,\n  obj,\n  value,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      {!_.isNil(value) ? (\n        <a href={value}>{value.replace(/https?:\\/\\//, '')}</a>\n      ) : (\n        <span className=\"text-muted\">{t('public~None')}</span>\n      )}\n    </DetailsItem>\n  );\n};\n\nconst K8sPhase: React.FC<StatusCapabilityProps<string>> = ({\n  description,\n  fullPath,\n  label,\n  obj,\n  value,\n}) => (\n  <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n    <Phase status={value} />\n  </DetailsItem>\n);\n\nconst K8sPhaseReason: React.FC<StatusCapabilityProps<string>> = ({\n  description,\n  fullPath,\n  label,\n  obj,\n  value,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n      {_.isEmpty(value) ? (\n        <span className=\"text-muted\">{t('public~None')}</span>\n      ) : (\n        <pre className=\"co-pre\" style={{ width: 'max-content' }}>\n          {value}\n        </pre>\n      )}\n    </DetailsItem>\n  );\n};\n\nconst MainStatus: React.FC<StatusCapabilityProps<string>> = ({\n  description,\n  fullPath,\n  label,\n  obj,\n  value,\n}) => (\n  <DetailsItem description={description} label={label} obj={obj} path={fullPath}>\n    {value === 'Running' ? <SuccessStatus title={value} /> : <Status status={value} />}\n  </DetailsItem>\n);\n\nexport const StatusDescriptorDetailsItem: React.FC<StatusCapabilityProps> = ({\n  className,\n  ...props\n}) => {\n  const [capability] =\n    getValidCapabilitiesForValue<StatusCapability>(props.descriptor, props.value) ?? [];\n\n  const Component = React.useMemo(() => {\n    if (capability?.startsWith(StatusCapability.k8sResourcePrefix)) {\n      return K8sResourceLinkCapability;\n    }\n\n    switch (capability) {\n      case StatusCapability.podStatuses:\n        return PodStatuses;\n      case StatusCapability.w3Link:\n        return Link;\n      case StatusCapability.k8sPhase:\n        return K8sPhase;\n      case StatusCapability.k8sPhaseReason:\n        return K8sPhaseReason;\n      case StatusCapability.password:\n        return SecretCapability;\n      case StatusCapability.hidden:\n        return null;\n      default:\n        if (_.isObject(props.value)) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            `[Invalid StatusDescriptor] Cannot render a descriptor detail item for 'status.${props.descriptor.path}'. A valid x-descriptor must be provided for non-primitive properties.`,\n            'See https://github.com/openshift/console/blob/master/frontend/packages/operator-lifecycle-manager/src/components/descriptors/reference/reference.md#olm-descriptor-reference',\n          );\n          return null;\n        }\n        return isMainStatusDescriptor(props.descriptor) ? MainStatus : DefaultCapability;\n    }\n  }, [capability, props.value, props.descriptor]);\n  return Component ? (\n    <div className={className}>\n      <Component {...props} capability={capability} />\n    </div>\n  ) : null;\n};\n\ntype StatusCapabilityProps<V = any> = CapabilityProps<StatusCapability, V>;\n\nPhase.displayName = 'Phase';\nPodStatuses.displayName = 'PodStatuses';\nLink.displayName = 'Link';\nK8sPhase.displayName = 'K8sPhase';\nK8sPhaseReason.displayName = 'K8sPhaseReason';\nMainStatus.displayName = 'MainStatus';\nStatusDescriptorDetailsItem.displayName = 'StatusDescriptorDetailsItem';\n","import * as React from 'react';\nimport { BanIcon } from '@patternfly/react-icons/dist/esm/icons/ban-icon';\n\nexport const Phase: React.SFC<PhaseProps> = ({ status }) => (\n  <span className={status === 'Failed' ? 'co-error' : ''}>\n    {status === 'Failed' && <BanIcon data-test-id=\"ban-icon\" />} {status}\n  </span>\n);\n\nexport type PhaseProps = {\n  status: string;\n};\n\nPhase.displayName = 'Phase';\n","import * as React from 'react';\nimport { ChartDonut } from '@patternfly/react-charts';\n/* eslint-disable camelcase */\nimport { chart_color_blue_100 as blue100 } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_200 as blue200 } from '@patternfly/react-tokens/dist/js/chart_color_blue_200';\nimport { chart_color_blue_300 as blue300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport * as _ from 'lodash';\n/* eslint-enable camelcase */\nimport { useRefWidth } from '@console/internal/components/utils';\nimport { calculateRadius } from '@console/shared/';\n\nconst colorScale = [blue300.value, blue200.value, blue100.value];\n\nexport const PodStatusChart: React.FC<PodStatusChartProps> = ({ statuses, subTitle }) => {\n  const [ref, width] = useRefWidth();\n  const data = _.map(statuses, (podList, status) => {\n    const x = status;\n    const y = podList.length;\n    return {\n      label: `${y} ${x}`,\n      x,\n      y,\n    };\n  });\n  const total = data.reduce((sum, dataPoint) => sum + dataPoint.y, 0);\n  const { podStatusInnerRadius, podStatusOuterRadius } = calculateRadius(130); // default value of size is 130\n\n  return (\n    <div ref={ref} className=\"graph-wrapper--gauge\">\n      <ChartDonut\n        colorScale={colorScale}\n        constrainToVisibleArea\n        data={data}\n        height={width}\n        title={total.toString()}\n        width={width}\n        innerRadius={podStatusInnerRadius}\n        radius={podStatusOuterRadius}\n      />\n      {/* Use instead of `subTitle` on <ChartDonut> so long paths do not clip  */}\n      <div className=\"graph-donut-subtitle\" data-test-id=\"chart-donut-subtitle\">\n        {subTitle}\n      </div>\n    </div>\n  );\n};\n\nexport type PodStatusChartProps = {\n  subTitle: string;\n  statuses: { [key: string]: string[] };\n};\n\nPodStatusChart.displayName = 'PodStatusChart';\n","import * as React from 'react';\nimport { JSONSchema7 } from 'json-schema';\nimport * as _ from 'lodash';\nimport { Conditions } from '@console/internal/components/conditions';\nimport { SectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { DescriptorType, StatusDescriptor } from '../types';\nimport { useCalculatedDescriptorProperties } from '../utils';\n\n// Determines if the descriptor points to an array value.\nconst validateConditionsDescriptor = (descriptor: StatusDescriptor, value: any): boolean => {\n  if (!_.isArray(value)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[Invalid x-descriptor] 'urn:alm:descriptor:io.kubernetes.conditions' is incompatible with ${descriptor.path} and will have no effect`,\n      descriptor,\n    );\n    return false;\n  }\n  return true;\n};\n\nexport const DescriptorConditions: React.FC<ConditionsDescriptorProps> = ({\n  descriptor,\n  obj,\n  schema,\n}) => {\n  const { displayName, value } = useCalculatedDescriptorProperties(\n    DescriptorType.status,\n    descriptor,\n    schema,\n    obj,\n  );\n\n  if (!validateConditionsDescriptor(descriptor, value)) {\n    return null;\n  }\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={displayName} />\n      <Conditions conditions={value} />\n    </div>\n  );\n};\nDescriptorConditions.displayName = 'DescriptorConditions';\n\ntype ConditionsDescriptorProps = {\n  descriptor: StatusDescriptor;\n  obj: K8sResourceKind;\n  schema: JSONSchema7;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RadioGroup } from '@console/internal/components/radio';\nimport { useShowOperandsInAllNamespaces } from './useShowOperandsInAllNamespaces';\n\nexport const ShowOperandsInAllNamespacesRadioGroup: React.FC = () => {\n  const { t } = useTranslation();\n  const [\n    showOperandsInAllNamespaces,\n    setShowOperandsInAllNamespaces,\n  ] = useShowOperandsInAllNamespaces();\n  return (\n    <RadioGroup\n      label={t('olm~Show operands in:')}\n      currentValue={showOperandsInAllNamespaces ? 'true' : 'false'}\n      inline\n      items={[\n        {\n          value: 'true',\n          title: t('olm~All namespaces'),\n        },\n        {\n          value: 'false',\n          title: t('olm~Current namespace only'),\n        },\n      ]}\n      onChange={({ currentTarget }) =>\n        setShowOperandsInAllNamespaces(currentTarget.value === 'true')\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FieldLevelHelp } from '@console/internal/components/utils';\nimport {\n  ConsolePluginRadioInputs,\n  ConsolePluginWarning,\n} from '@console/shared/src/components/utils';\nimport { isCatalogSourceTrusted } from '../utils';\n\nexport const ConsolePluginFormGroup: React.FC<ConsolePluginFormGroupProps> = ({\n  catalogSource,\n  csvPlugins,\n  enabledPlugins,\n  setPluginEnabled,\n}) => {\n  const { t } = useTranslation();\n  const csvPluginsCount = csvPlugins.length;\n\n  return (\n    <div className=\"form-group\">\n      <fieldset>\n        <label className=\"co-required\">{t('olm~Console plugin', { count: csvPluginsCount })}</label>\n        <FieldLevelHelp>\n          {t(\n            'olm~This operator includes a console plugin which provides a custom interface that can be included in the console. The console plugin will prompt for the console to be refreshed once it has been enabled. Make sure you trust this console plugin before enabling.',\n          )}\n        </FieldLevelHelp>\n        {csvPlugins.map((plugin) => (\n          <fieldset key={plugin}>\n            <div>\n              {csvPluginsCount > 1 && (\n                <legend className=\"co-legend co-legend--nested text-muted\">{plugin}</legend>\n              )}\n              <ConsolePluginRadioInputs\n                name={plugin}\n                enabled={enabledPlugins.includes(plugin)}\n                onChange={(enabled: boolean) => setPluginEnabled(plugin, enabled)}\n              />\n            </div>\n          </fieldset>\n        ))}\n        <ConsolePluginWarning\n          // always show the warning for untrusted plugins set to enabled\n          previouslyEnabled={false}\n          enabled={enabledPlugins?.length > 0}\n          trusted={isCatalogSourceTrusted(catalogSource)}\n        />\n      </fieldset>\n    </div>\n  );\n};\n\ntype ConsolePluginFormGroupProps = {\n  catalogSource: string;\n  csvPlugins: string[];\n  enabledPlugins: string[];\n  setPluginEnabled: (plugin: string, enabled: boolean) => void;\n};\n","import * as React from 'react';\nimport { CatalogItemHeader, CatalogTile } from '@patternfly/react-catalog-view-extension';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  EmptyStateHeader,\n  EmptyStateFooter,\n  Truncate,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { ExternalLink, getQueryArgument } from '@console/internal/components/utils';\nimport { history } from '@console/internal/components/utils/router';\nimport { TileViewPage } from '@console/internal/components/utils/tile-view-page';\nimport i18n from '@console/internal/i18n';\nimport {\n  COMMUNITY_PROVIDERS_WARNING_USERSETTINGS_KEY as userSettingsKey,\n  COMMUNITY_PROVIDERS_WARNING_LOCAL_STORAGE_KEY as storeKey,\n  GreenCheckCircleIcon,\n  Modal,\n  useUserSettingsCompatibility,\n} from '@console/shared';\nimport { getURLWithParams } from '@console/shared/src/components/catalog/utils';\nimport { isModifiedEvent } from '@console/shared/src/utils';\nimport { DefaultCatalogSource, PackageSource } from '../../const';\nimport { SubscriptionModel } from '../../models';\nimport { DeprecatedOperatorWarningBadge } from '../deprecated-operator-warnings/deprecated-operator-warnings';\nimport { communityOperatorWarningModal } from './operator-hub-community-provider-modal';\nimport { OperatorHubItemDetails } from './operator-hub-item-details';\nimport { isAWSSTSCluster, isAzureWIFCluster, isGCPWIFCluster } from './operator-hub-utils';\nimport {\n  OperatorHubItem,\n  InstalledState,\n  CapabilityLevel,\n  ValidSubscriptionValue,\n  InfrastructureFeature,\n} from './index';\n\nconst osBaseLabel = 'operatorframework.io/os.';\nconst archBaseLabel = 'operatorframework.io/arch.';\nconst targetNodeOperatingSystems = window.SERVER_FLAGS.nodeOperatingSystems ?? [];\nconst targetNodeOperatingSystemsLabels = targetNodeOperatingSystems.map(\n  (os) => `${osBaseLabel}${os}`,\n);\nconst targetNodeArchitectures = window.SERVER_FLAGS.nodeArchitectures ?? [];\nconst targetNodeArchitecturesLabels = targetNodeArchitectures.map(\n  (arch) => `${archBaseLabel}${arch}`,\n);\n// if no label present, these are the assumed defaults\nconst archDefaultAMD64Label = 'operatorframework.io/arch.amd64';\nconst osDefaultLinuxLabel = 'operatorframework.io/os.linux';\nconst filterByArchAndOS = (items: OperatorHubItem[]): OperatorHubItem[] => {\n  if (_.isEmpty(targetNodeArchitectures) && _.isEmpty(targetNodeOperatingSystems)) {\n    return items;\n  }\n  return items.filter((item: OperatorHubItem) => {\n    // - if the operator has no flags, treat it with the defaults\n    // - if it has any flags, it must list all flags (no defaults applied)\n    const relevantLabels = _.reduce(\n      item?.obj?.metadata?.labels ?? {},\n      (result, value: string, label: string): { arch: string[]; os: string[] } => {\n        if (label.includes(archBaseLabel) && value === 'supported') {\n          result.arch.push(label);\n        }\n        if (label.includes(osBaseLabel) && value === 'supported') {\n          result.os.push(label);\n        }\n        return result;\n      },\n      {\n        arch: [],\n        os: [],\n      },\n    );\n\n    if (_.isEmpty(relevantLabels.os)) {\n      relevantLabels.os.push(osDefaultLinuxLabel);\n    }\n\n    if (_.isEmpty(relevantLabels.arch)) {\n      relevantLabels.arch.push(archDefaultAMD64Label);\n    }\n\n    return (\n      _.some(relevantLabels.os, (os) => _.includes(targetNodeOperatingSystemsLabels, os)) &&\n      _.some(relevantLabels.arch, (arch) => _.includes(targetNodeArchitecturesLabels, arch))\n    );\n  });\n};\n\nconst Badge = ({ text }) => (\n  <span key={text} className=\"pf-v5-c-badge pf-m-read\">\n    <Truncate className=\"pf-v5-c-truncate--no-min-width\" content={text} />\n  </span>\n);\n\n/**\n * Filter property allow list\n */\nconst operatorHubFilterGroups = [\n  'source',\n  'provider',\n  'installState',\n  'capabilityLevel',\n  'infraFeatures',\n  'validSubscriptionFilters',\n];\n\nconst ignoredProviderTails = [', Inc.', ', Inc', ' Inc.', ' Inc', ', LLC', ' LLC'];\n\ntype Category = {\n  id: string;\n  label: string;\n  field: 'categories';\n  values: string[];\n};\n\nexport const determineCategories = (items: OperatorHubItem[]): Record<string, Category> => {\n  const newCategories: Record<string, Category> = {};\n  _.each(items, (item) => {\n    _.each(item.categories, (category) => {\n      if (!newCategories[category] && category) {\n        newCategories[category] = {\n          id: category,\n          label: category,\n          field: 'categories',\n          values: [category],\n        };\n      }\n    });\n  });\n\n  const sortedKeys = _.keys(newCategories).sort((key1, key2) =>\n    key1.toLowerCase().localeCompare(key2.toLowerCase()),\n  );\n\n  return _.reduce(\n    sortedKeys,\n    (categories, key) => {\n      categories[key] = newCategories[key];\n      return categories;\n    },\n    {} as Record<string, Category>,\n  );\n};\n\nexport const getProviderValue = (value) => {\n  if (!value) {\n    return value;\n  }\n\n  const providerTail = _.find(ignoredProviderTails, (tail) => value.endsWith(tail));\n  if (providerTail) {\n    return value.substring(0, value.indexOf(providerTail));\n  }\n\n  return value;\n};\n\nconst providerSort = (provider) => {\n  if (provider.value.toLowerCase() === 'red hat') {\n    return '';\n  }\n  return provider.value;\n};\n\nconst sourceSort = (source) => {\n  switch (source.value) {\n    case PackageSource.RedHatOperators:\n      return 0;\n    case PackageSource.CertifiedOperators:\n      return 1;\n    case PackageSource.CommunityOperators:\n      return 2;\n    case PackageSource.RedHatMarketplace:\n      return 3;\n    default:\n      return 4;\n  }\n};\n\nconst installedStateSort = (provider) => {\n  switch (provider.value) {\n    case InstalledState.Installed:\n      return 0;\n    case InstalledState.NotInstalled:\n      return 1;\n    default:\n      return 3;\n  }\n};\n\nconst capabilityLevelSort = (provider) => {\n  switch (provider.value) {\n    case CapabilityLevel.BasicInstall:\n      return 0;\n    case CapabilityLevel.SeamlessUpgrades:\n      return 1;\n    case CapabilityLevel.FullLifecycle:\n      return 2;\n    case CapabilityLevel.DeepInsights:\n      return 3;\n    default:\n      return 5;\n  }\n};\n\nconst infraFeaturesSort = (infrastructure) => {\n  switch (infrastructure.value) {\n    case InfrastructureFeature.Disconnected:\n      return 0;\n    case InfrastructureFeature.ProxyAware:\n      return 1;\n    case InfrastructureFeature.FIPSMode:\n      return 2;\n    case InfrastructureFeature.TokenAuth:\n      return 3;\n    case InfrastructureFeature.TLSProfiles:\n      return 4;\n    default:\n      return 5;\n  }\n};\n\nconst validSubscriptionSort = (validSubscription) => {\n  switch (validSubscription.value) {\n    case ValidSubscriptionValue.OpenShiftKubernetesEngine:\n      return 0;\n    case ValidSubscriptionValue.OpenShiftContainerPlatform:\n      return 1;\n    case ValidSubscriptionValue.OpenShiftPlatformPlus:\n      return 2;\n    case ValidSubscriptionValue.RequiresSeparateSubscription:\n      return 3;\n    default:\n      return 4;\n  }\n};\n\nconst sortFilterValues = (values, field) => {\n  let sorter: any = ['value'];\n\n  if (field === 'provider') {\n    sorter = providerSort;\n  }\n\n  if (field === 'source') {\n    return _.sortBy(values, [sourceSort, 'value']);\n  }\n\n  if (field === 'installState') {\n    sorter = installedStateSort;\n  }\n\n  if (field === 'capabilityLevel') {\n    sorter = capabilityLevelSort;\n  }\n\n  if (field === 'infraFeatures') {\n    sorter = infraFeaturesSort;\n  }\n\n  if (field === 'validSubscriptionFilters') {\n    sorter = validSubscriptionSort;\n  }\n\n  return _.sortBy(values, sorter);\n};\n\nconst determineAvailableFilters = (initialFilters, items: OperatorHubItem[], filterGroups) => {\n  const filters = _.cloneDeep(initialFilters);\n\n  _.each(filterGroups, (field) => {\n    const values = [];\n    _.each(items, (item) => {\n      let value = item[field];\n      let synonyms;\n      if (field === 'provider') {\n        value = getProviderValue(value);\n        synonyms = _.map(ignoredProviderTails, (tail) => `${value}${tail}`);\n      }\n      if (value !== undefined && !Array.isArray(value)) {\n        if (!_.some(values, { value })) {\n          values.push({\n            label: value,\n            synonyms,\n            value,\n            active: false,\n          });\n        }\n      }\n\n      if (Array.isArray(value)) {\n        _.each(value, (v) => {\n          if (!_.some(values, { v })) {\n            values.push({\n              label: v,\n              synonyms,\n              value: v,\n              active: false,\n            });\n          }\n        });\n      }\n    });\n\n    _.forEach(sortFilterValues(values, field), (nextValue: any) =>\n      _.set(filters, [field, nextValue.value], nextValue),\n    );\n  });\n\n  // Always show both install state filters\n  if (!filters.installState) {\n    filters.installState = {\n      Installed: {\n        label: i18n.t('olm~Installed'),\n        value: 'Installed',\n        active: false,\n      },\n      'Not Installed': {\n        label: i18n.t('olm~Not Installed'),\n        value: 'Not Installed',\n        active: false,\n      },\n    };\n  } else {\n    _.set(filters, 'installState.Installed.label', i18n.t('olm~Installed'));\n    _.set(filters, 'installState.Not Installed.label', i18n.t('olm~Not Installed'));\n  }\n\n  return filters;\n};\n\nexport const keywordCompare = (filterString, item) => {\n  if (!filterString) {\n    return true;\n  }\n  if (!item) {\n    return false;\n  }\n  const keywords = item.keywords?.map((k) => k.toLowerCase()) ?? [];\n\n  return (\n    item.name.toLowerCase().includes(filterString) ||\n    _.get(item, 'obj.metadata.name', '').toLowerCase().includes(filterString) ||\n    (item.description && item.description.toLowerCase().includes(filterString)) ||\n    (item.tags && item.tags.includes(filterString)) ||\n    keywords.includes(filterString)\n  );\n};\n\nconst setURLParams = (params) => {\n  const url = new URL(window.location.href);\n  const searchParams = `?${params.toString()}${url.hash}`;\n\n  history.replace(`${url.pathname}${searchParams}`);\n};\n\nconst OperatorHubTile: React.FC<OperatorHubTileProps> = ({ item, onClick }) => {\n  const { t } = useTranslation();\n  if (!item) {\n    return null;\n  }\n  const { uid, name, imgUrl, provider, description, installed } = item;\n  const vendor = provider ? t('olm~provided by {{provider}}', { provider }) : null;\n  const badges = item?.source ? [<Badge text={item.source} />] : [];\n  const icon = <img className=\"co-catalog--logo\" loading=\"lazy\" src={imgUrl} alt=\"\" />;\n  const vendorAndDeprecated = () => (\n    <>\n      {vendor}\n      {item?.obj?.status?.deprecation && (\n        <div>\n          <DeprecatedOperatorWarningBadge\n            className=\"pf-v5-u-mt-xs\"\n            deprecation={item.obj.status.deprecation}\n          />\n        </div>\n      )}\n    </>\n  );\n\n  return (\n    <CatalogTile\n      className=\"co-catalog-tile\"\n      key={uid}\n      id={uid}\n      title={name}\n      badges={badges}\n      icon={icon}\n      vendor={vendorAndDeprecated()}\n      description={description}\n      onClick={(e: React.MouseEvent<HTMLElement>) => {\n        if (isModifiedEvent(e)) return;\n        e.preventDefault();\n        onClick(item);\n      }}\n      href={getURLWithParams('details-item', item.uid)}\n      footer={\n        installed && !item.isInstalling ? (\n          <span>\n            <GreenCheckCircleIcon /> {t('olm~Installed')}\n          </span>\n        ) : null\n      }\n      data-test={uid}\n    />\n  );\n};\n\nexport const OperatorHubTileView: React.FC<OperatorHubTileViewProps> = (props) => {\n  const { t } = useTranslation();\n  const [detailsItem, setDetailsItem] = React.useState(null);\n  const [showDetails, setShowDetails] = React.useState(false);\n  const [ignoreOperatorWarning, setIgnoreOperatorWarning, loaded] = useUserSettingsCompatibility<\n    boolean\n  >(userSettingsKey, storeKey, false);\n  const [updateChannel, setUpdateChannel] = React.useState('');\n  const [updateVersion, setUpdateVersion] = React.useState('');\n  const [tokenizedAuth, setTokenizedAuth] = React.useState(null);\n  const installVersion = getQueryArgument('version');\n  const filteredItems = filterByArchAndOS(props.items);\n\n  React.useEffect(() => {\n    const detailsItemID = new URLSearchParams(window.location.search).get('details-item');\n    const currentItem = _.find(filteredItems, {\n      uid: detailsItemID,\n    });\n    setDetailsItem(currentItem);\n    setShowDetails(!_.isNil(currentItem));\n    if (\n      currentItem &&\n      isAWSSTSCluster(\n        currentItem.cloudCredentials,\n        currentItem.infrastructure,\n        currentItem.authentication,\n      ) &&\n      currentItem.infraFeatures?.find((i) => i === InfrastructureFeature.TokenAuth)\n    ) {\n      setTokenizedAuth('AWS');\n    }\n    if (\n      currentItem &&\n      isAzureWIFCluster(\n        currentItem.cloudCredentials,\n        currentItem.infrastructure,\n        currentItem.authentication,\n      ) &&\n      currentItem.infraFeatures?.find((i) => i === InfrastructureFeature.TokenAuth)\n    ) {\n      setTokenizedAuth('Azure');\n    }\n    if (\n      currentItem &&\n      isGCPWIFCluster(\n        currentItem.cloudCredentials,\n        currentItem.infrastructure,\n        currentItem.authentication,\n      ) &&\n      currentItem.infraFeatures?.find((i) => i === InfrastructureFeature.TokenAuthGCP)\n    ) {\n      setTokenizedAuth('GCP');\n    }\n  }, [filteredItems]);\n\n  const showCommunityOperator = (item: OperatorHubItem) => (ignoreWarning = false) => {\n    const params = new URLSearchParams(window.location.search);\n    params.set('details-item', item.uid);\n    setURLParams(params);\n    setDetailsItem(item);\n    setShowDetails(true);\n\n    if (loaded && ignoreWarning) {\n      setIgnoreOperatorWarning(true);\n    }\n  };\n\n  const closeOverlay = () => {\n    const params = new URLSearchParams(window.location.search);\n    params.delete('details-item');\n    params.delete('channel');\n    params.delete('version');\n    setURLParams(params);\n    setDetailsItem(null);\n    setShowDetails(false);\n    // reset version and channel state so that switching between operator cards does not carry over previous selections\n    setUpdateChannel('');\n    setUpdateVersion('');\n    setTokenizedAuth('');\n  };\n\n  const openOverlay = (item: OperatorHubItem) => {\n    if (!ignoreOperatorWarning && item.catalogSource === DefaultCatalogSource.CommunityOperators) {\n      communityOperatorWarningModal({\n        showCommunityOperators: (ignore) => showCommunityOperator(item)(ignore),\n      });\n    } else {\n      const params = new URLSearchParams(window.location.search);\n      params.set('details-item', item.uid);\n      setURLParams(params);\n      setDetailsItem(item);\n      setShowDetails(true);\n    }\n  };\n\n  const renderTile = (item: OperatorHubItem) => (\n    <OperatorHubTile updateChannel={updateChannel} item={item} onClick={openOverlay} />\n  );\n\n  const createLink =\n    detailsItem &&\n    detailsItem.obj &&\n    `/operatorhub/subscribe?pkg=${detailsItem.obj.metadata.name}&catalog=${detailsItem.catalogSource}&catalogNamespace=${detailsItem.catalogSourceNamespace}&targetNamespace=${props.namespace}&channel=${updateChannel}&version=${updateVersion}&tokenizedAuth=${tokenizedAuth}`;\n\n  const uninstallLink = () =>\n    detailsItem &&\n    detailsItem.subscription &&\n    `/k8s/ns/${detailsItem.subscription.metadata.namespace}/${SubscriptionModel.plural}/${detailsItem.subscription.metadata.name}?showDelete=true`;\n\n  const remoteWorkflowUrl = React.useMemo(() => {\n    if (detailsItem?.marketplaceRemoteWorkflow) {\n      try {\n        const url = new URL(detailsItem?.marketplaceRemoteWorkflow);\n        url.searchParams.set('utm_source', 'openshift_console');\n        return url.toString();\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error while setting utm_source to remote workflow URL', error.message);\n      }\n    }\n    return null;\n  }, [detailsItem]);\n\n  if (_.isEmpty(filteredItems)) {\n    return (\n      <>\n        <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n          <EmptyStateHeader titleText={<>{t('olm~No Operators available')}</>} headingLevel=\"h5\" />\n          <EmptyStateFooter>\n            {window.SERVER_FLAGS.GOOS && window.SERVER_FLAGS.GOARCH && (\n              <EmptyStateBody>\n                {t(\n                  'olm~There are no Operators that match operating system {{os}} and architecture {{arch}}.',\n                  {\n                    os: window.SERVER_FLAGS.GOOS,\n                    arch: window.SERVER_FLAGS.GOARCH,\n                  },\n                )}\n              </EmptyStateBody>\n            )}\n          </EmptyStateFooter>\n        </EmptyState>\n      </>\n    );\n  }\n\n  const filterGroupNameMap = {\n    source: t('olm~Source'),\n    provider: t('olm~Provider'),\n    installState: t('olm~Install state'),\n    capabilityLevel: t('olm~Capability level'),\n    infraFeatures: t('olm~Infrastructure features'),\n    validSubscriptionFilters: t('olm~Valid subscription'),\n  };\n\n  const titleAndDeprecatedPackage = () => (\n    <>\n      {detailsItem.name}\n      {detailsItem?.obj?.status?.deprecation && (\n        <DeprecatedOperatorWarningBadge\n          className=\"pf-v5-u-ml-sm\"\n          deprecation={detailsItem.obj.status.deprecation}\n        />\n      )}\n    </>\n  );\n  return (\n    <>\n      <TileViewPage\n        items={filteredItems}\n        itemsSorter={(itemsToSort) => _.sortBy(itemsToSort, ({ name }) => name.toLowerCase())}\n        getAvailableCategories={determineCategories}\n        getAvailableFilters={determineAvailableFilters}\n        filterGroups={operatorHubFilterGroups}\n        filterGroupNameMap={filterGroupNameMap}\n        keywordCompare={keywordCompare}\n        renderTile={renderTile}\n        emptyStateTitle={t('olm~No Results Match the Filter Criteria')}\n        emptyStateInfo={t(\n          'olm~No OperatorHub items are being shown due to the filters being applied.',\n        )}\n      />\n      {detailsItem && (\n        <Modal\n          className=\"co-catalog-page__overlay co-catalog-page__overlay--right\"\n          data-test-id=\"operator-modal-box\"\n          aria-labelledby=\"catalog-item-header\"\n          header={\n            <>\n              <CatalogItemHeader\n                className=\"co-catalog-page__overlay-header\"\n                iconClass={detailsItem.iconClass}\n                iconImg={detailsItem.imgUrl}\n                title={titleAndDeprecatedPackage()}\n                vendor={t('olm~{{version}} provided by {{provider}}', {\n                  version: updateVersion || installVersion || detailsItem.version,\n                  provider: detailsItem.provider,\n                })}\n                data-test-id=\"operator-modal-header\"\n                id=\"catalog-item-header\"\n              />\n\n              <div className=\"co-catalog-page__overlay-actions\">\n                {remoteWorkflowUrl && (\n                  <ExternalLink\n                    additionalClassName=\"pf-v5-c-button pf-m-primary co-catalog-page__overlay-action\"\n                    href={remoteWorkflowUrl}\n                    text={\n                      <>\n                        <div className=\"co-catalog-page__overlay-action-label\">\n                          {detailsItem.marketplaceActionText || t('olm~Purchase')}\n                        </div>\n                        <ExternalLinkAltIcon className=\"co-catalog-page__overlay-action-icon\" />\n                      </>\n                    }\n                  />\n                )}\n                {!detailsItem.installed ? (\n                  <Link\n                    className={classNames(\n                      'pf-v5-c-button',\n                      {\n                        'pf-m-secondary': remoteWorkflowUrl,\n                      },\n                      {\n                        'pf-m-primary': !remoteWorkflowUrl,\n                      },\n                      {\n                        'pf-m-disabled': !detailsItem.obj || detailsItem.isInstalling,\n                      },\n                      'co-catalog-page__overlay-action',\n                    )}\n                    data-test-id=\"operator-install-btn\"\n                    to={createLink}\n                  >\n                    {t('olm~Install')}\n                  </Link>\n                ) : (\n                  <Button\n                    className=\"co-catalog-page__overlay-action\"\n                    data-test-id=\"operator-uninstall-btn\"\n                    isDisabled={!detailsItem.installed}\n                    onClick={() => history.push(uninstallLink())}\n                    variant=\"secondary\"\n                  >\n                    {t('olm~Uninstall')}\n                  </Button>\n                )}\n              </div>\n            </>\n          }\n          isOpen={!!detailsItem && showDetails}\n          onClose={closeOverlay}\n          title={detailsItem.name}\n        >\n          <OperatorHubItemDetails\n            item={detailsItem}\n            updateChannel={updateChannel}\n            setUpdateChannel={setUpdateChannel}\n            updateVersion={updateVersion}\n            setUpdateVersion={setUpdateVersion}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\ntype OperatorHubTileProps = {\n  item: OperatorHubItem;\n  onClick: (item: OperatorHubItem) => void;\n  updateChannel: string;\n};\n\nexport type OperatorHubTileViewProps = {\n  namespace?: string;\n  items: OperatorHubItem[];\n};\n\nOperatorHubTileView.displayName = 'OperatorHubTileView';\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport i18n from '@console/internal/i18n';\nimport { useTranslation } from 'react-i18next';\nimport * as PropTypes from 'prop-types';\nimport {\n  FilterSidePanel,\n  FilterSidePanelCategory,\n  FilterSidePanelCategoryItem,\n  VerticalTabs,\n  VerticalTabsTab,\n} from '@patternfly/react-catalog-view-extension';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  SearchInput,\n  Title,\n  EmptyStateActions,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from '@patternfly/react-core';\nimport { useDebounceCallback, getURLWithParams, VirtualizedGrid } from '@console/shared';\nimport { Link, useSearchParams } from 'react-router-dom-v5-compat';\nimport { isModifiedEvent } from '@console/shared/src/utils';\n\nimport { isModalOpen } from '../modals';\nimport { Dropdown } from '../utils';\n\nexport const FilterTypes = {\n  category: 'category',\n  keyword: 'keyword',\n};\n\nconst filterSubcategories = (category, item) => {\n  if (!category.subcategories) {\n    if (!category.values) {\n      return [];\n    }\n\n    let values = _.get(item, category.field);\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    const intersection = [category.values, values].reduce((a, b) => a.filter((c) => b.includes(c)));\n    if (!_.isEmpty(intersection)) {\n      return [category];\n    }\n\n    return [];\n  }\n\n  const matchedSubcategories = [];\n  _.forOwn(category.subcategories, (subCategory) => {\n    let values = _.get(item, category.field);\n\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    const valuesIntersection = [subCategory.values, values].reduce((a, b) =>\n      a.filter((c) => b.includes(c)),\n    );\n    if (!_.isEmpty(valuesIntersection)) {\n      matchedSubcategories.push(subCategory, ...filterSubcategories(subCategory, item));\n    }\n  });\n\n  return matchedSubcategories;\n};\n\n// categorize item under sub and main categories\nconst addItem = (item, category, subcategory = null) => {\n  // Add the item to the category\n  if (!category.items) {\n    category.items = [item];\n  } else if (!category.items.includes(item)) {\n    category.items = category.items.concat(item);\n  }\n\n  // Add the item to the subcategory\n  if (subcategory) {\n    if (!subcategory.items) {\n      subcategory.items = [item];\n    } else if (!subcategory.items.includes(item)) {\n      subcategory.items = subcategory.items.concat(item);\n    }\n  }\n};\n\nconst isCategoryEmpty = ({ items }) => _.isEmpty(items);\n\nconst pruneCategoriesWithNoItems = (categories) => {\n  if (!categories) {\n    return;\n  }\n\n  _.forOwn(categories, (category, key) => {\n    if (isCategoryEmpty(category)) {\n      delete categories[key];\n    } else {\n      pruneCategoriesWithNoItems(category.subcategories);\n    }\n  });\n};\n\nconst processSubCategories = (category, itemsSorter) => {\n  _.forOwn(category.subcategories, (subcategory) => {\n    if (subcategory.items) {\n      subcategory.numItems = _.size(subcategory.items);\n      subcategory.items = itemsSorter(subcategory.items);\n      processSubCategories(subcategory, itemsSorter);\n    }\n    if (category.subcategories) {\n      _.each(category.items, (item) => {\n        const included = _.find(_.keys(category.subcategories), (subcat) =>\n          _.includes(category.subcategories[subcat].items, item),\n        );\n        if (!included) {\n          let otherCategory = _.get(category.subcategories, 'other');\n          if (!otherCategory) {\n            otherCategory = { id: `${category.id}-other`, label: 'Other', items: [] };\n            category.subcategories.other = otherCategory;\n          }\n          otherCategory.items.push(item);\n        }\n      });\n    }\n  });\n};\n\n// calculate numItems per Category and subcategories, sort items\nconst processCategories = (categories, itemsSorter) => {\n  _.forOwn(categories, (category) => {\n    if (category.items) {\n      category.numItems = _.size(category.items);\n      category.items = itemsSorter(category.items);\n      processSubCategories(category, itemsSorter);\n    }\n  });\n};\n\nconst categorize = (items, categories) => {\n  // Categorize each item\n  _.each(items, (item) => {\n    let itemCategorized = false;\n\n    _.each(categories, (category) => {\n      const matchedSubcategories = filterSubcategories(category, item);\n      _.each(matchedSubcategories, (subcategory) => {\n        addItem(item, category, subcategory); // add to subcategory & main category\n        itemCategorized = true;\n      });\n    });\n    if (!itemCategorized) {\n      addItem(item, categories.other); // add to Other category\n    }\n  });\n\n  categories.all.numItems = _.size(items);\n  categories.all.items = items;\n};\n\n/**\n * Creates an items array under each category and subcategory.  If no match, categorizes item\n * under 'Other' main category.\n * (exported for test purposes)\n */\nexport const categorizeItems = (items, itemsSorter, initCategories) => {\n  const allCategory = { id: 'all', label: i18n.t('public~All Items') };\n  const otherCategory = { id: 'other', label: i18n.t('public~Other') };\n\n  const categories = {\n    all: allCategory,\n    ..._.cloneDeep(initCategories),\n    other: otherCategory,\n  };\n\n  categorize(items, categories);\n  pruneCategoriesWithNoItems(categories);\n  processCategories(categories, itemsSorter);\n\n  return categories;\n};\n\nconst clearItemsFromCategories = (categories) => {\n  _.forOwn(categories, (category) => {\n    category.numItems = 0;\n    category.items = [];\n    clearItemsFromCategories(category.subcategories);\n  });\n};\n\nconst filterByKeyword = (items, filters, compFunction) => {\n  const { keyword } = filters;\n  if (!keyword || !keyword.active) {\n    return items;\n  }\n\n  const filterString = keyword.value.toLowerCase();\n  return _.filter(items, (item) => compFunction(filterString, item));\n};\n\nconst filterByGroup = (items, filters) => {\n  // Filter items by each filter group\n  return _.reduce(\n    filters,\n    (filtered, group, key) => {\n      if (key === FilterTypes.keyword) {\n        return filtered;\n      }\n      // Only apply active filters\n      const activeFilters = _.filter(group, 'active');\n      if (activeFilters.length) {\n        const values = _.reduce(\n          activeFilters,\n          (filterValues, filter) => {\n            filterValues.push(filter.value, ..._.get(filter, 'synonyms', []));\n            return filterValues;\n          },\n          [],\n        );\n\n        filtered[key] = _.filter(items, (item) => {\n          if (Array.isArray(item[key])) {\n            return item[key].some((f) => values.includes(f));\n          }\n          return values.includes(item[key]);\n        });\n      }\n\n      return filtered;\n    },\n    {},\n  );\n};\n\nconst filterItems = (items, filters, keywordCompare) => {\n  if (_.isEmpty(filters)) {\n    return items;\n  }\n\n  // Filter items by keyword first\n  const filteredByKeyword = filterByKeyword(items, filters, keywordCompare);\n\n  // Apply each filter property individually. Example:\n  //  filteredByGroup = {\n  //    provider: [/*array of items filtered by provider*/],\n  //    healthIndex: [/*array of items filtered by healthIndex*/],\n  //  };\n  const filteredByGroup = filterByGroup(filteredByKeyword, filters);\n\n  // Intersection of individually applied filters is all filters\n  // In the case no filters are active, returns items filteredByKeyword\n  return [..._.values(filteredByGroup), filteredByKeyword].reduce((a, b) =>\n    a.filter((c) => b.includes(c)),\n  );\n};\n\nconst recategorizeItems = (items, itemsSorter, filters, keywordCompare, categories) => {\n  const filteredItems = filterItems(items, filters, keywordCompare);\n\n  const newCategories = _.cloneDeep(categories);\n  clearItemsFromCategories(newCategories);\n\n  categorize(filteredItems, newCategories);\n  processCategories(newCategories, itemsSorter);\n\n  return newCategories;\n};\n\nconst isActiveTab = (activeId, category) => {\n  return _.has(category.subcategories, activeId);\n};\n\nconst hasActiveDescendant = (activeId, category) => {\n  if (_.has(category.subcategories, activeId)) {\n    return true;\n  }\n\n  return _.some(category.subcategories, (subcategory) =>\n    hasActiveDescendant(activeId, subcategory),\n  );\n};\n\nconst findActiveCategory = (activeId, categories) => {\n  let activeCategory = null;\n  _.forOwn(categories, (category) => {\n    if (activeCategory) {\n      return;\n    }\n\n    if (category.id === activeId) {\n      activeCategory = category;\n    } else {\n      activeCategory = findActiveCategory(activeId, category.subcategories);\n    }\n  });\n  return activeCategory;\n};\n\nconst determineAvailableFilters = (initialFilters, items, filterGroups) => {\n  const filters = _.cloneDeep(initialFilters);\n\n  _.each(filterGroups, (field) => {\n    _.each(items, (item) => {\n      const value = item[field];\n      if (value) {\n        _.set(filters, [field, value], {\n          label: value,\n          value,\n          active: false,\n        });\n      }\n    });\n  });\n\n  return filters;\n};\n\nconst getActiveFilters = (keywordFilter, groupFilters, activeFilters, categoryFilter = null) => {\n  activeFilters.keyword.value = keywordFilter || '';\n  activeFilters.keyword.active = !!keywordFilter;\n  if (categoryFilter) {\n    // removing default and localstore filters if category filters are present over URL\n    _.each(_.keys(activeFilters.kind), (key) =>\n      _.set(activeFilters, ['kind', key, 'active'], false),\n    );\n  }\n\n  _.forOwn(groupFilters, (filterValues, filterType) => {\n    // removing default and localstore filters if Filters are present over URL\n    _.each(_.keys(activeFilters[filterType]), (key) =>\n      _.set(activeFilters, [filterType, key, 'active'], false),\n    );\n    _.each(filterValues, (filterValue) => {\n      _.set(activeFilters, [filterType, filterValue, 'active'], true);\n    });\n  });\n\n  return activeFilters;\n};\n\nexport const updateActiveFilters = (activeFilters, filterType, id, value) => {\n  if (filterType === FilterTypes.keyword) {\n    _.set(activeFilters, 'keyword.value', value);\n    _.set(activeFilters, 'keyword.active', !!value);\n  } else {\n    _.set(activeFilters, [filterType, id, 'active'], value);\n  }\n\n  return activeFilters;\n};\n\nconst clearActiveFilters = (activeFilters, filterGroups) => {\n  // Clear the keyword filter\n  _.set(activeFilters, 'keyword.value', '');\n  _.set(activeFilters, 'keyword.active', false);\n\n  // Clear the group filters\n  _.each(filterGroups, (field) => {\n    _.each(_.keys(activeFilters[field]), (key) =>\n      _.set(activeFilters, [field, key, 'active'], false),\n    );\n  });\n\n  return activeFilters;\n};\n\nconst getFilterGroupCounts = (\n  items,\n  itemsSorter,\n  filterGroups,\n  selectedCategoryId,\n  filters,\n  categories,\n  keywordCompare,\n) => {\n  // Filter only by keyword\n  const filteredItems = filterByKeyword(items, filters, keywordCompare);\n\n  const categoriesForCounts = recategorizeItems(\n    filteredItems,\n    itemsSorter,\n    [],\n    keywordCompare,\n    categories,\n  );\n\n  const activeCategory = findActiveCategory(selectedCategoryId, categoriesForCounts);\n  const activeItems = activeCategory ? activeCategory.items : [];\n  const newFilterCounts = {};\n\n  _.each(filterGroups, (filterGroup) => {\n    _.each(_.keys(filters[filterGroup]), (key) => {\n      const filterValues = [\n        _.get(filters, [filterGroup, key, 'value']),\n        ..._.get(filters, [filterGroup, key, 'synonyms'], []),\n      ];\n\n      const matchedItems = _.filter(activeItems, (item) => {\n        if (Array.isArray(item[filterGroup])) {\n          return item[filterGroup].some((f) => filterValues.includes(f));\n        }\n\n        return filterValues.includes(item[filterGroup]);\n      });\n\n      _.set(newFilterCounts, [filterGroup, key], _.size(matchedItems));\n    });\n  });\n\n  return newFilterCounts;\n};\n\nconst getActiveValuesFromURL = (availableFilters, filterGroups, groupByTypes) => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const categoryParam = searchParams.get(FilterTypes.category);\n  const keywordFilter = searchParams.get(FilterTypes.keyword);\n  const selectedCategoryId = categoryParam || 'all';\n  let groupBy = '';\n  if (groupByTypes) {\n    groupBy = searchParams.get('groupBy') || groupByTypes.None;\n  }\n  const groupFilters = {};\n\n  _.each(filterGroups, (filterGroup) => {\n    const groupFilterParam = searchParams.get(filterGroup);\n    if (!groupFilterParam) {\n      return;\n    }\n\n    try {\n      _.set(groupFilters, filterGroup, JSON.parse(groupFilterParam));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn('could not update filters from url params: could not parse search params', e);\n    }\n  });\n\n  const activeFilters = getActiveFilters(\n    keywordFilter,\n    groupFilters,\n    availableFilters,\n    categoryParam,\n  );\n\n  return { selectedCategoryId, activeFilters, groupBy };\n};\n\nexport const getFilterSearchParam = (groupFilter) => {\n  const activeValues = _.reduce(\n    _.keys(groupFilter),\n    (result, typeKey) => {\n      return groupFilter[typeKey].active ? result.concat(typeKey) : result;\n    },\n    [],\n  );\n\n  return _.isEmpty(activeValues) ? '' : JSON.stringify(activeValues);\n};\n\nconst defaultFilters = {\n  keyword: {\n    value: '',\n    active: false,\n  },\n};\n\nexport const TileViewPage = (props) => {\n  const {\n    items,\n    itemsSorter,\n    keywordCompare,\n    filterGroups,\n    filterGroupNameMap,\n    getAvailableCategories,\n    getAvailableFilters,\n    groupByTypes,\n    emptyStateTitle,\n    emptyStateInfo,\n    renderTile,\n    groupItems,\n  } = props;\n\n  const { t } = useTranslation();\n  const [, setSearchParams] = useSearchParams();\n  const filterByKeywordInput = React.useRef();\n  const [prevProps, setPrevProps] = React.useState(props);\n\n  const [categories, setCategories] = React.useState(\n    categorizeItems(items, itemsSorter, getAvailableCategories(items)),\n  );\n  const [selectedCategoryId, setSelectedCategoryId] = React.useState('all');\n  const [activeFilters, setActiveFilters] = React.useState(defaultFilters);\n  const [filterCounts, setFilterCounts] = React.useState(null);\n  const [filterGroupsShowAll, setFilterGroupsShowAll] = React.useState({});\n  const [groupBy, setGroupBy] = React.useState(groupByTypes ? groupByTypes.None : '');\n\n  const updateURLParams = (paramName, value) => {\n    const params = new URLSearchParams(window.location.search);\n\n    if (value) {\n      params.set(paramName, Array.isArray(value) ? JSON.stringify(value) : value);\n    } else {\n      params.delete(paramName);\n    }\n    setSearchParams(params);\n  };\n\n  const clearFilterURLParams = () => {\n    const params = new URLSearchParams();\n\n    if (selectedCategoryId) {\n      params.set(FilterTypes.category, selectedCategoryId);\n    }\n\n    setSearchParams(params);\n  };\n\n  const getUpdatedState = React.useCallback((selectedCategories, categoryId, filters) => {\n    if (!items) {\n      return;\n    }\n\n    const newCategories = recategorizeItems(\n      items,\n      itemsSorter,\n      filters,\n      keywordCompare,\n      selectedCategories,\n    );\n\n    return {\n      activeFilters: filters,\n      selectedCategoryId: categoryId,\n      categories: newCategories,\n      filterCounts: getFilterGroupCounts(\n        items,\n        itemsSorter,\n        filterGroups,\n        categoryId,\n        filters,\n        newCategories,\n        keywordCompare,\n      ),\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const initState = () => {\n    const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n    const activeValues = getActiveValuesFromURL(availableFilters, filterGroups, groupByTypes);\n\n    const updatedState = getUpdatedState(\n      categories,\n      activeValues.selectedCategoryId,\n      activeValues.activeFilters,\n    );\n\n    setCategories(updatedState.categories);\n    setSelectedCategoryId(updatedState.selectedCategoryId);\n    setActiveFilters(updatedState.activeFilters);\n    setFilterCounts(updatedState.filterCounts);\n    setGroupBy(activeValues?.groupBy);\n\n    filterByKeywordInput.current.focus({ preventScroll: true });\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(initState, []);\n\n  React.useEffect(() => {\n    if (!_.isEqual(items, prevProps?.items)) {\n      const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n      const availableCategories = getAvailableCategories(items);\n      const newCategories = categorizeItems(items, itemsSorter, availableCategories);\n\n      const newActiveFilters = _.reduce(\n        availableFilters,\n        (updatedFilters, filterGroup, filterGroupName) => {\n          if (filterGroupName === FilterTypes.keyword) {\n            updatedFilters.keyword = activeFilters.keyword;\n            return updatedFilters;\n          }\n          _.each(filterGroup, (filterItem, filterItemName) => {\n            updatedFilters[filterGroupName][filterItemName].active = _.get(\n              activeFilters,\n              [filterGroupName, filterItemName, 'active'],\n              false,\n            );\n          });\n\n          return updatedFilters;\n        },\n        availableFilters,\n      );\n\n      const updatedState = getUpdatedState(newCategories, selectedCategoryId, newActiveFilters);\n\n      setCategories(updatedState.categories);\n      setSelectedCategoryId(updatedState.selectedCategoryId);\n      setActiveFilters(updatedState.activeFilters);\n      setFilterCounts(updatedState.filterCounts);\n    }\n\n    setPrevProps(props);\n  }, [\n    props,\n    filterGroups,\n    getAvailableFilters,\n    getUpdatedState,\n    groupByTypes,\n    items,\n    activeFilters,\n    getAvailableCategories,\n    itemsSorter,\n    selectedCategoryId,\n    prevProps?.items,\n  ]);\n\n  const clearFilters = () => {\n    clearFilterURLParams();\n\n    const clearedFilters = clearActiveFilters(activeFilters, filterGroups);\n\n    const updatedState = getUpdatedState(categories, selectedCategoryId, clearedFilters);\n\n    setCategories(updatedState.categories);\n    setSelectedCategoryId(updatedState.selectedCategoryId);\n    setActiveFilters(updatedState.activeFilters);\n    setFilterCounts(updatedState.filterCounts);\n\n    // Don't take focus if a modal was opened while the page was loading.\n    if (!isModalOpen()) {\n      filterByKeywordInput.current.focus({ preventScroll: true });\n    }\n  };\n\n  const selectCategory = (categoryId) => {\n    updateURLParams(FilterTypes.category, categoryId);\n\n    const updatedState = getUpdatedState(categories, categoryId, activeFilters);\n\n    setCategories(updatedState.categories);\n    setSelectedCategoryId(updatedState.selectedCategoryId);\n    setActiveFilters(updatedState.activeFilters);\n    setFilterCounts(updatedState.filterCounts);\n  };\n\n  const onFilterChange = (filterType, id, value) => {\n    if (filterType === FilterTypes.keyword) {\n      const update = _.debounce(() => updateURLParams(FilterTypes.keyword, `${value}`), 500);\n      update();\n    } else {\n      const groupFilter = _.cloneDeep(activeFilters[filterType]);\n      _.set(groupFilter, [id, 'active'], value);\n      updateURLParams(filterType, getFilterSearchParam(groupFilter));\n    }\n\n    const updatedFilters = updateActiveFilters(activeFilters, filterType, id, value);\n\n    const updatedState = getUpdatedState(categories, selectedCategoryId, updatedFilters);\n\n    setCategories(updatedState.categories);\n    setSelectedCategoryId(updatedState.selectedCategoryId);\n    setActiveFilters(updatedState.activeFilters);\n    setFilterCounts(updatedState.filterCounts);\n  };\n\n  const onKeywordChange = useDebounceCallback((value) => {\n    onFilterChange('keyword', null, value);\n  });\n\n  const onShowAllToggle = (groupName) => {\n    const updatedShow = _.clone(filterGroupsShowAll);\n    _.set(updatedShow, groupName, !_.get(filterGroupsShowAll, groupName, false));\n    setFilterGroupsShowAll(updatedShow);\n  };\n\n  const onGroupChange = (value) => {\n    updateURLParams('groupBy', value === groupByTypes.None ? `` : `${value}`);\n    setGroupBy(value);\n  };\n\n  const renderTabs = (category, selected) => {\n    const { id, label, subcategories, numItems } = category;\n    const active = id === selected;\n    const shown = id === 'all';\n\n    const tabClasses = `text-capitalize${!numItems ? ' co-catalog-tab__empty' : ''}`;\n    return (\n      <VerticalTabsTab\n        key={id}\n        active={active}\n        className={tabClasses}\n        hasActiveDescendant={hasActiveDescendant(selected, category)}\n        shown={shown}\n        data-test={id}\n        component={() => (\n          <Link\n            to={getURLWithParams(FilterTypes.category, id)}\n            onClick={(e) => {\n              if (isModifiedEvent(e)) {\n                return;\n              }\n              e.preventDefault();\n              selectCategory(id);\n            }}\n          >\n            {label}\n          </Link>\n        )}\n      >\n        {subcategories && (\n          <VerticalTabs restrictTabs activeTab={isActiveTab(selected, category)}>\n            {_.map(subcategories, (subcategory) => renderTabs(subcategory, selected))}\n          </VerticalTabs>\n        )}\n      </VerticalTabsTab>\n    );\n  };\n\n  const renderCategoryTabs = (selected) => {\n    const activeTab = _.has(categories, selected);\n\n    return (\n      <VerticalTabs restrictTabs activeTab={activeTab} shown=\"true\">\n        {_.map(categories, (category) => renderTabs(category, selected))}\n      </VerticalTabs>\n    );\n  };\n\n  const renderFilterGroup = (filterGroup, groupName) => {\n    const maxShown = 5;\n    const showMoreText = t('public~Show {{numRemaining}} more', {\n      numRemaining: Object.keys(filterGroup).length - maxShown,\n    });\n\n    return (\n      <FilterSidePanelCategory\n        key={groupName}\n        title={filterGroupNameMap[groupName] || groupName}\n        onShowAllToggle={() => onShowAllToggle(groupName)}\n        showAll={_.get(filterGroupsShowAll, groupName, false)}\n        data-test-group-name={groupName}\n        maxShowCount={maxShown}\n        showText={showMoreText}\n        hideText={t('public~Show less')}\n      >\n        {_.map(filterGroup, (filter, filterName) => {\n          const { label, active } = filter;\n          return (\n            <FilterSidePanelCategoryItem\n              key={filterName}\n              count={_.get(filterCounts, [groupName, filterName], 0)}\n              checked={active}\n              onClick={(e) => onFilterChange(groupName, filterName, e.target.checked)}\n              title={label}\n              data-test={`${groupName}-${_.kebabCase(filterName)}`}\n            >\n              {label}\n            </FilterSidePanelCategoryItem>\n          );\n        })}\n      </FilterSidePanelCategory>\n    );\n  };\n\n  const renderSidePanel = () => {\n    return (\n      <FilterSidePanel>\n        {_.map(activeFilters, (filterGroup, groupName) => {\n          if (groupName === FilterTypes.keyword) {\n            return;\n          }\n          return renderFilterGroup(filterGroup, groupName);\n        })}\n      </FilterSidePanel>\n    );\n  };\n\n  const renderEmptyState = () => {\n    return (\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateHeader titleText={<>{emptyStateTitle}</>} headingLevel=\"h2\" />\n        <EmptyStateBody>{emptyStateInfo}</EmptyStateBody>\n        <EmptyStateFooter>\n          <EmptyStateActions>\n            <Button\n              variant=\"link\"\n              onClick={() => clearFilters()}\n              data-test-id=\"catalog-clear-filters\"\n            >\n              {i18n.t('public~Clear All Filters')}\n            </Button>\n          </EmptyStateActions>\n        </EmptyStateFooter>\n      </EmptyState>\n    );\n  };\n\n  const renderGroupedItems = (itemsGroups) => {\n    const groupedItems = groupItems(itemsGroups, groupBy);\n    const renderGroupHeader = (heading) => (\n      <Title className=\"co-catalog-page__group-title\" headingLevel=\"h2\" size=\"lg\">\n        {heading} ({_.size(groupedItems[heading])})\n      </Title>\n    );\n    return (\n      <VirtualizedGrid\n        items={groupedItems}\n        renderCell={renderTile}\n        renderHeader={renderGroupHeader}\n        isItemsGrouped\n      />\n    );\n  };\n\n  let activeCategory = findActiveCategory(selectedCategoryId, categories);\n  if (!activeCategory) {\n    activeCategory = findActiveCategory('all', categories);\n  }\n  const numItems = t('public~{{totalItems}} items', {\n    totalItems: activeCategory.numItems,\n  });\n\n  return (\n    <div className=\"co-catalog-page co-catalog-page--with-sidebar\">\n      <div className=\"co-catalog-page__tabs\">\n        {renderCategoryTabs(activeCategory.id)}\n        {renderSidePanel()}\n      </div>\n      <div className=\"co-catalog-page__content\">\n        <div className=\"co-catalog-page__header\">\n          <div className=\"co-catalog-page__heading text-capitalize\">{activeCategory.label}</div>\n          <div className=\"co-catalog-page__filter\">\n            <div>\n              <SearchInput\n                className=\"co-catalog-page__input\"\n                data-test=\"search-operatorhub\"\n                ref={filterByKeywordInput}\n                placeholder={t('public~Filter by keyword...')}\n                value={activeFilters.keyword.value}\n                onChange={(event, text) => onKeywordChange(text)}\n                onClear={() => onKeywordChange('')}\n                aria-label={t('public~Filter by keyword...')}\n              />\n              {groupItems && (\n                <Dropdown\n                  className=\"co-catalog-page__btn-group__group-by\"\n                  menuClassName=\"dropdown-menu--text-wrap\"\n                  items={groupByTypes}\n                  onChange={(e) => onGroupChange(e)}\n                  titlePrefix=\"Group By\"\n                  title={groupBy}\n                />\n              )}\n            </div>\n            <div className=\"co-catalog-page__num-items\">{numItems}</div>\n          </div>\n        </div>\n\n        {activeCategory.numItems > 0 && (\n          <div className=\"co-catalog-page__grid\">\n            {groupItems && groupBy !== groupByTypes.None ? (\n              renderGroupedItems(activeCategory.items)\n            ) : (\n              <VirtualizedGrid items={activeCategory.items} renderCell={renderTile} />\n            )}\n          </div>\n        )}\n        {activeCategory.numItems === 0 && renderEmptyState()}\n      </div>\n    </div>\n  );\n};\n\nTileViewPage.displayName = 'TileViewPage';\n\nTileViewPage.propTypes = {\n  items: PropTypes.array,\n  itemsSorter: PropTypes.func.isRequired,\n  getAvailableCategories: PropTypes.func.isRequired,\n  getAvailableFilters: PropTypes.func,\n  filterGroups: PropTypes.array.isRequired,\n  filterGroupNameMap: PropTypes.object,\n  renderFilterGroup: PropTypes.func,\n  keywordCompare: PropTypes.func.isRequired,\n  renderTile: PropTypes.func.isRequired,\n  emptyStateTitle: PropTypes.string,\n  emptyStateInfo: PropTypes.string,\n  groupItems: PropTypes.func,\n  groupByTypes: PropTypes.object,\n};\n\nTileViewPage.defaultProps = {\n  items: null,\n  getAvailableFilters: determineAvailableFilters,\n  filterGroupNameMap: {},\n  renderFilterGroup: null,\n  emptyStateTitle: 'No Results Match the Filter Criteria',\n  emptyStateInfo: 'No items are being shown due to the filters being applied.',\n};\n","import * as React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { ExternalLink } from '@console/internal/components/utils';\nimport { RH_OPERATOR_SUPPORT_POLICY_LINK } from '@console/shared';\n\nexport const OperatorHubCommunityProviderModal: React.FC<OperatorHubCommunityProviderModalProps> = ({\n  close,\n  showCommunityOperators,\n}) => {\n  const { t } = useTranslation();\n  const [ignoreWarnings, setIgnoreWarnings] = React.useState(false);\n  const submit = React.useCallback(\n    (event) => {\n      event.preventDefault();\n      close();\n      showCommunityOperators(ignoreWarnings);\n    },\n    [close, ignoreWarnings, showCommunityOperators],\n  );\n\n  return (\n    <form onSubmit={submit} className=\"modal-content co-modal-ignore-warning\">\n      <ModalTitle>{t('olm~Show community Operator')}</ModalTitle>\n      <ModalBody>\n        <div className=\"co-modal-ignore-warning__content\">\n          <div className=\"co-modal-ignore-warning__icon\">\n            <InfoCircleIcon />\n          </div>\n          <div>\n            <p>\n              {t(\n                'olm~Community Operators are Operators which have not been vetted or verified by Red Hat. Community Operators should be used with caution because their stability is unknown. Red Hat provides no support for community Operators.',\n              )}\n              {RH_OPERATOR_SUPPORT_POLICY_LINK && (\n                <span className=\"co-modal-ignore-warning__link\">\n                  <ExternalLink\n                    href={RH_OPERATOR_SUPPORT_POLICY_LINK}\n                    text={t('olm~Learn more about Red Hat’s third party software support policy')}\n                  />\n                </span>\n              )}\n            </p>\n            <Checkbox\n              className=\"co-modal-ignore-warning__checkbox\"\n              onChange={(_event, value) => setIgnoreWarnings(value)}\n              isChecked={ignoreWarnings}\n              data-checked-state={ignoreWarnings}\n              id=\"do-not-show-warning\"\n              label={t('olm~Do not show this warning again')}\n            />\n          </div>\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText={t('olm~Continue')}\n        inProgress={false}\n        errorMessage=\"\"\n        cancel={close}\n      />\n    </form>\n  );\n};\n\nexport type OperatorHubCommunityProviderModalProps = {\n  showCommunityOperators: (ignoreWarnings: boolean) => void;\n  close?: () => void;\n};\n\nexport const communityOperatorWarningModal = createModalLauncher(OperatorHubCommunityProviderModal);\n","import * as React from 'react';\nimport { PropertiesSidePanel, PropertyItem } from '@patternfly/react-catalog-view-extension';\nimport {\n  DescriptionList,\n  DescriptionListTerm,\n  DescriptionListGroup,\n  DescriptionListDescription,\n} from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport {\n  ExternalLink,\n  HintBlock,\n  Timestamp,\n  getQueryArgument,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport {\n  CloudCredentialKind,\n  InfrastructureKind,\n  AuthenticationKind,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { RH_OPERATOR_SUPPORT_POLICY_LINK } from '@console/shared';\nimport { DefaultCatalogSource } from '../../const';\nimport { ClusterServiceVersionModel } from '../../models';\nimport { ClusterServiceVersionKind, SubscriptionKind } from '../../types';\nimport { MarkdownView } from '../clusterserviceversion';\nimport { DeprecatedOperatorWarningAlert } from '../deprecated-operator-warnings/deprecated-operator-warnings';\nimport { useDeprecatedOperatorWarnings } from '../deprecated-operator-warnings/use-deprecated-operator-warnings';\nimport { defaultChannelNameFor } from '../index';\nimport { OperatorChannelSelect, OperatorVersionSelect } from './operator-channel-version-select';\nimport { CloudServiceTokenWarningAlert } from './operator-hub-subscribe';\nimport { isAWSSTSCluster, isAzureWIFCluster, isGCPWIFCluster } from './operator-hub-utils';\nimport { InfrastructureFeature, OperatorHubItem } from './index';\n\n// t('olm~Basic Install'),\n// t('olm~Seamless Upgrades'),\n// t('olm~Full Lifecycle'),\n// t('olm~Deep Insights'),\n// t('olm~Auto Pilot'),\nconst levels = [\n  'Basic Install',\n  'Seamless Upgrades',\n  'Full Lifecycle',\n  'Deep Insights',\n  'Auto Pilot',\n];\n\nconst CapabilityLevel: React.FC<CapabilityLevelProps> = ({ selectedChannelCapabilityLevel }) => {\n  const { t } = useTranslation();\n  const capabilityLevelIndex = levels.indexOf(selectedChannelCapabilityLevel);\n\n  return (\n    <ul className=\"properties-side-panel-pf-property-value__capability-levels\">\n      {levels.map((level, i) => {\n        const active = capabilityLevelIndex >= i;\n        return (\n          <li\n            className={classNames('properties-side-panel-pf-property-value__capability-level', {\n              'properties-side-panel-pf-property-value__capability-level--active': active,\n            })}\n            key={level}\n          >\n            {active && (\n              <CheckCircleIcon\n                color=\"var(--pf-v5-global--primary-color--100)\"\n                className=\"properties-side-panel-pf-property-value__capability-level-icon\"\n                title={t('olm~Checked')}\n              />\n            )}\n            {t(`olm~${level}`)}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\ntype CapabilityLevelProps = {\n  selectedChannelCapabilityLevel: string;\n};\n\nconst InstalledHintBlock: React.FC<OperatorHubItemDetailsHintBlockProps> = ({\n  latestVersion,\n  subscription,\n  installedChannel,\n}) => {\n  const { t } = useTranslation();\n  const [installedCSV] = useK8sWatchResource<ClusterServiceVersionKind>({\n    kind: referenceForModel(ClusterServiceVersionModel),\n    name: subscription?.status?.installedCSV,\n    namespace: subscription?.metadata?.namespace,\n    isList: false,\n    namespaced: true,\n  });\n  const nsPath = `/k8s/ns/${subscription.metadata.namespace}`;\n  const to = installedCSV\n    ? `${nsPath}/clusterserviceversions/${installedCSV?.metadata?.name ?? ''}`\n    : `${nsPath}/subscriptions/${subscription.metadata.name ?? ''}`;\n  const installedVersion = installedCSV?.spec?.version;\n  return (\n    <HintBlock className=\"co-catalog-page__hint\" title={t('olm~Installed Operator')}>\n      <p>\n        {t('olm~This Operator has been installed on the cluster.')}{' '}\n        <Link to={to}>{t('olm~View it here.')}</Link>\n      </p>\n      {installedVersion !== latestVersion ? (\n        <>\n          <DescriptionList columnModifier={{ default: '2Col' }}>\n            <DescriptionListGroup>\n              <DescriptionListTerm>{t('olm~Installed Channel')}</DescriptionListTerm>\n              <DescriptionListDescription>{installedChannel}</DescriptionListDescription>\n            </DescriptionListGroup>\n            <DescriptionListGroup>\n              <DescriptionListTerm>{t('olm~Installed Version')}</DescriptionListTerm>\n              <DescriptionListDescription>{installedVersion}</DescriptionListDescription>\n            </DescriptionListGroup>\n          </DescriptionList>\n        </>\n      ) : null}\n    </HintBlock>\n  );\n};\n\nconst InstallingHintBlock: React.FC<OperatorHubItemDetailsHintBlockProps> = ({ subscription }) => {\n  const { t } = useTranslation();\n  const [installedCSV] = useK8sWatchResource<ClusterServiceVersionKind>(\n    subscription?.status?.installedCSV\n      ? {\n          kind: referenceForModel(ClusterServiceVersionModel),\n          name: subscription?.status?.installedCSV,\n          namespace: subscription?.metadata?.namespace,\n          isList: false,\n          namespaced: true,\n        }\n      : null,\n  );\n  const nsPath = `/k8s/ns/${subscription.metadata.namespace}`;\n  const to = installedCSV\n    ? `${nsPath}/clusterserviceversions/${installedCSV?.metadata?.name}/subscription`\n    : `${nsPath}/subscriptions/${subscription.metadata.name ?? ''}`;\n  return (\n    <HintBlock className=\"co-catalog-page__hint\" title={t('olm~Installing Operator')}>\n      <p>\n        <span>\n          <Trans ns=\"olm\">This Operator is being installed on the cluster.</Trans>\n        </span>\n        &nbsp;\n        <Link to={to}>{t('olm~View it here.')}</Link>\n      </p>\n    </HintBlock>\n  );\n};\n\nconst OperatorHubItemDetailsHintBlock: React.FC<OperatorHubItemDetailsHintBlockProps> = (props) => {\n  const { t } = useTranslation();\n  const { installed, isInstalling, catalogSource } = props;\n  if (isInstalling) {\n    return <InstallingHintBlock {...props} />;\n  }\n\n  if (installed) {\n    return <InstalledHintBlock {...props} />;\n  }\n\n  if (catalogSource === DefaultCatalogSource.CommunityOperators) {\n    return (\n      <HintBlock className=\"co-catalog-page__hint\" title={t('olm~Community Operator')}>\n        <p>\n          {t(\n            'olm~This is a community provided Operator. These are Operators which have not been vetted or verified by Red Hat. Community Operators should be used with caution because their stability is unknown. Red Hat provides no support for community Operators.',\n          )}\n        </p>\n        {RH_OPERATOR_SUPPORT_POLICY_LINK && (\n          <span className=\"co-modal-ignore-warning__link\">\n            <ExternalLink\n              href={RH_OPERATOR_SUPPORT_POLICY_LINK}\n              text={t('olm~Learn more about Red Hat’s third party software support policy')}\n            />\n          </span>\n        )}\n      </HintBlock>\n    );\n  }\n\n  if (catalogSource === DefaultCatalogSource.RedHatMarketPlace) {\n    return (\n      <HintBlock title={t('olm~Marketplace Operator')}>\n        <p>\n          {t(\n            'olm~This Operator is purchased through Red Hat Marketplace. After completing the purchase process, you can install the Operator on this or other OpenShift clusters. Visit Red Hat Marketplace for more details and to track your usage of this application.',\n          )}\n        </p>\n        <p>\n          <ExternalLink\n            href=\"https://marketplace.redhat.com/en-us?utm_source=openshift_console\"\n            text={t('olm~Learn more about the Red Hat Marketplace')}\n          />\n        </p>\n      </HintBlock>\n    );\n  }\n\n  return null;\n};\n\nexport const OperatorHubItemDetails: React.FC<OperatorHubItemDetailsProps> = ({\n  item,\n  updateChannel,\n  setUpdateChannel,\n  updateVersion,\n  setUpdateVersion,\n}) => {\n  const { t } = useTranslation();\n  const {\n    catalogSource,\n    source,\n    description,\n    infraFeatures,\n    installed,\n    isInstalling,\n    longDescription,\n    marketplaceSupportWorkflow,\n    obj,\n    provider,\n    repository,\n    subscription,\n    support,\n    validSubscription,\n    version,\n    cloudCredentials,\n    infrastructure,\n    authentication,\n  } = item;\n\n  const installChannel = getQueryArgument('channel');\n  const {\n    deprecatedPackage,\n    deprecatedChannel,\n    deprecatedVersion,\n    setDeprecatedPackage,\n  } = useDeprecatedOperatorWarnings();\n  const deprecatedWarning =\n    deprecatedPackage?.deprecation ||\n    deprecatedChannel?.deprecation ||\n    deprecatedVersion?.deprecation;\n\n  React.useEffect(() => {\n    setDeprecatedPackage(_.pick(item?.obj?.status, 'deprecation'));\n  }, [item?.obj?.status, setDeprecatedPackage]);\n  const currentChannel = obj?.status.channels.find((ch) => ch.name === installChannel);\n  const selectedChannelContainerImage = currentChannel?.currentCSVDesc.annotations.containerImage;\n  const selectedChannelDescription = currentChannel?.currentCSVDesc.description || longDescription;\n  const selectedChannelCreatedAt = currentChannel?.currentCSVDesc.annotations.createdAt;\n  const selectedChannelCapabilityLevel =\n    currentChannel?.currentCSVDesc.annotations.capabilities ?? item.capabilityLevel;\n\n  const installedChannel = item?.subscription?.spec?.channel;\n  const notAvailable = (\n    <span className=\"properties-side-panel-pf-property-label\">{t('olm~N/A')}</span>\n  );\n  const created = Date.parse(selectedChannelCreatedAt) ? (\n    <Timestamp timestamp={selectedChannelCreatedAt} />\n  ) : (\n    selectedChannelCreatedAt\n  );\n\n  const [showCSTokenWarn, setShowCSTokenWarn] = React.useState(true);\n  const mappedData = (data) => data?.map?.((d) => <div key={d}>{d}</div>) ?? notAvailable;\n\n  const mappedInfraFeatures = mappedData(infraFeatures);\n  const mappedValidSubscription = mappedData(validSubscription);\n\n  const supportWorkflowUrl = React.useMemo(() => {\n    if (marketplaceSupportWorkflow) {\n      try {\n        const url = new URL(marketplaceSupportWorkflow);\n        url.searchParams.set('utm_source', 'openshift_console');\n        return url.toString();\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error while setting utm_source to support workflow URL', error.message);\n      }\n    }\n    return null;\n  }, [marketplaceSupportWorkflow]);\n\n  const selectedUpdateChannel = updateChannel || defaultChannelNameFor(obj);\n\n  return item ? (\n    <div className=\"modal-body modal-body-border\">\n      <div className=\"modal-body-content\">\n        <div className=\"modal-body-inner-shadow-covers\">\n          <div className=\"co-catalog-page__overlay-body\">\n            <PropertiesSidePanel>\n              <PropertyItem\n                label={t('olm~Channel')}\n                value={\n                  <OperatorChannelSelect\n                    packageManifest={obj}\n                    selectedUpdateChannel={selectedUpdateChannel}\n                    setUpdateChannel={setUpdateChannel}\n                    setUpdateVersion={setUpdateVersion}\n                  />\n                }\n              />\n              <PropertyItem\n                label={t('olm~Version')}\n                value={\n                  <OperatorVersionSelect\n                    packageManifest={obj}\n                    selectedUpdateChannel={selectedUpdateChannel}\n                    updateVersion={updateVersion}\n                    setUpdateVersion={setUpdateVersion}\n                  />\n                }\n              />\n              <PropertyItem\n                label={t('olm~Capability level')}\n                value={\n                  selectedChannelCapabilityLevel ? (\n                    <CapabilityLevel\n                      selectedChannelCapabilityLevel={selectedChannelCapabilityLevel}\n                    />\n                  ) : (\n                    notAvailable\n                  )\n                }\n              />\n              <PropertyItem label={t('olm~Source')} value={source || notAvailable} />\n              <PropertyItem label={t('olm~Provider')} value={provider || notAvailable} />\n              {infraFeatures?.length > 0 && (\n                <PropertyItem\n                  label={t('olm~Infrastructure features')}\n                  value={mappedInfraFeatures}\n                />\n              )}\n              {validSubscription?.length > 0 && (\n                <PropertyItem\n                  label={t('olm~Valid Subscriptions')}\n                  value={mappedValidSubscription}\n                />\n              )}\n              <PropertyItem\n                label={t('olm~Repository')}\n                value={\n                  repository ? <ExternalLink href={repository} text={repository} /> : notAvailable\n                }\n              />\n              <PropertyItem\n                label={t('olm~Container image')}\n                value={\n                  selectedChannelContainerImage ? (\n                    <div className=\"co-break-all co-select-to-copy\">\n                      {selectedChannelContainerImage}\n                    </div>\n                  ) : (\n                    notAvailable\n                  )\n                }\n              />\n              <PropertyItem label={t('olm~Created at')} value={created || notAvailable} />\n              <PropertyItem\n                label={t('olm~Support')}\n                value={\n                  supportWorkflowUrl ? (\n                    <ExternalLink href={supportWorkflowUrl} text={t('olm~Get support')} />\n                  ) : (\n                    support || notAvailable\n                  )\n                }\n              />\n            </PropertiesSidePanel>\n            <div className=\"co-catalog-page__overlay-description\">\n              {isAWSSTSCluster(cloudCredentials, infrastructure, authentication) &&\n                showCSTokenWarn &&\n                infraFeatures?.find((i) => i === InfrastructureFeature.TokenAuth) && (\n                  <CloudServiceTokenWarningAlert\n                    title={t('olm~Cluster in STS Mode')}\n                    message={t(\n                      'olm~This cluster is using AWS Security Token Service to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, you must provide a role ARN (with an attached policy) during installation. Please see the operator description for more details.',\n                    )}\n                    onClose={() => setShowCSTokenWarn(false)}\n                  />\n                )}\n              {isAzureWIFCluster(cloudCredentials, infrastructure, authentication) &&\n                showCSTokenWarn &&\n                infraFeatures?.find((i) => i === InfrastructureFeature.TokenAuth) && (\n                  <CloudServiceTokenWarningAlert\n                    title={t('olm~Cluster in Azure Workload Identity / Federated Identity Mode')}\n                    message={t(\n                      'olm~This cluster is using Azure Workload Identity / Federated Identity to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, provide the Client ID, Tenant ID, and Subscription ID during installation. See the operator description for more details.',\n                    )}\n                    onClose={() => setShowCSTokenWarn(false)}\n                  />\n                )}\n              {isGCPWIFCluster(cloudCredentials, infrastructure, authentication) &&\n                showCSTokenWarn &&\n                infraFeatures?.find((i) => i === InfrastructureFeature.TokenAuthGCP) && (\n                  <CloudServiceTokenWarningAlert\n                    title={t('olm~Cluster in GCP Workload Identity / Federated Identity Mode')}\n                    message={t(\n                      'olm~This cluster is using GCP Workload Identity / Federated Identity to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, provide the Pool ID, Provider ID, and Service Account Email during installation. See the operator description for more details.',\n                    )}\n                    onClose={() => setShowCSTokenWarn(false)}\n                  />\n                )}\n              {deprecatedWarning && (\n                <DeprecatedOperatorWarningAlert\n                  deprecatedPackage={deprecatedPackage}\n                  deprecatedChannel={deprecatedChannel}\n                  deprecatedVersion={deprecatedVersion}\n                />\n              )}\n              <OperatorHubItemDetailsHintBlock\n                installed={installed}\n                isInstalling={isInstalling}\n                latestVersion={version}\n                catalogSource={catalogSource}\n                subscription={subscription}\n                installedChannel={installedChannel}\n                cloudCredentials={cloudCredentials}\n                authentication={authentication}\n                infrastructure={infrastructure}\n              />\n              {selectedChannelDescription ? (\n                <MarkdownView content={selectedChannelDescription} />\n              ) : (\n                description\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n\nOperatorHubItemDetails.defaultProps = {\n  item: null,\n};\ntype OperatorHubItemDetailsHintBlockProps = {\n  installed: boolean;\n  isInstalling: boolean;\n  latestVersion: string;\n  catalogSource: string;\n  subscription: SubscriptionKind;\n  installedChannel: string;\n  cloudCredentials: CloudCredentialKind;\n  authentication: AuthenticationKind;\n  infrastructure: InfrastructureKind;\n};\n\nexport type OperatorHubItemDetailsProps = {\n  item: OperatorHubItem;\n  updateChannel: string;\n  updateVersion: string;\n  setUpdateChannel: (updateChannel: string) => void;\n  setUpdateVersion: (updateVersion: string) => void;\n};\n\nOperatorHubItemDetails.displayName = 'OperatorHubItemDetails';\n","import * as React from 'react';\nimport { usePoll } from '@console/internal/components/utils';\nimport { ExtensionCatalogDatabaseContext } from '../contexts/ExtensionCatalogDatabaseContext';\nimport { getItems, openDatabase } from '../database/indexeddb';\nimport { ExtensionCatalogItem } from '../database/types';\n\ntype UseExtensionCatalogItems = () => [ExtensionCatalogItem[], boolean, Error];\nexport const useExtensionCatalogItems: UseExtensionCatalogItems = () => {\n  const { done: initDone, error: initError } = React.useContext(ExtensionCatalogDatabaseContext);\n  const [items, setItems] = React.useState<ExtensionCatalogItem[]>([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState<Error>();\n\n  React.useEffect(() => {\n    if (!initDone || initError) {\n      setLoading(!initDone);\n      setError(initError);\n    }\n  }, [initDone, initError]);\n\n  const tick = React.useCallback(() => {\n    if (initDone && !initError) {\n      openDatabase('olm')\n        .then((database) => getItems<ExtensionCatalogItem>(database, 'extension-catalog'))\n        .then((i) => {\n          setItems(i);\n          setError(null);\n          setLoading(false);\n        })\n        .catch((e) => {\n          setError(e);\n          setLoading(false);\n          setItems([]);\n        });\n    }\n  }, [initDone, initError]);\n\n  // Poll IndexedDB (IDB) every 10 seconds\n  usePoll(tick, 3000);\n\n  return [items, loading, error];\n};\n"],"sourceRoot":""}