{"version":3,"sources":["webpack:///./public/components/cluster-settings/request-header-idp-form.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/idp-cafile-input.tsx"],"names":["AddRequestHeaderPage","navigate","inProgress","setInProgress","errorMessage","setErrorMessage","name","setName","challengeURL","setChallengeURL","loginURL","setLoginURL","clientCommonNames","setClientCommonNames","headers","setHeaders","preferredUsernameHeaders","setPreferredUsernameHeaders","nameHeaders","setNameHeaders","emailHeaders","setEmailHeaders","caFileContent","setCaFileContent","t","handlePromise","promise","then","res","thenPromise","error","err","message","Promise","reject","catchError","addRequestHeaderIDP","oauth","caName","dryRun","idp","type","mappingMethod","requestHeader","ca","title","className","helpText","onSubmit","e","preventDefault","resolve","apiVersion","kind","metadata","generateName","namespace","data","createCAConfigMap","configMap","catch","value","onChange","currentTarget","htmlFor","id","c","isRequired","label","required","variant","onClick","getOAuthResource","addIDP","patch","spec","identityProviders","op","path","queryParams","redirectToOAuthPage","mockNames","secret","IDPNameInput","DroppableFileInput","props","loader","IDPCAFileInput","inputFileData","hideContents"],"mappings":"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","file":"request-header-idp-form-chunk-aa40ba0d95dea95dc19b.min.js","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { ConfigMapModel } from '../../models';\nimport { IdentityProvider, k8sCreate, OAuthKind, K8sResourceKind } from '../../module/k8s';\nimport { ButtonBar, ListInput, PageHeading } from '../utils';\nimport { addIDP, getOAuthResource as getOAuth, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport const AddRequestHeaderPage = () => {\n  const navigate = useNavigate();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [name, setName] = React.useState('request-header');\n  const [challengeURL, setChallengeURL] = React.useState('');\n  const [loginURL, setLoginURL] = React.useState('');\n  const [clientCommonNames, setClientCommonNames] = React.useState([]);\n  const [headers, setHeaders] = React.useState([]);\n  const [preferredUsernameHeaders, setPreferredUsernameHeaders] = React.useState([]);\n  const [nameHeaders, setNameHeaders] = React.useState([]);\n  const [emailHeaders, setEmailHeaders] = React.useState([]);\n  const [caFileContent, setCaFileContent] = React.useState('');\n\n  const { t } = useTranslation();\n\n  const thenPromise = (res) => {\n    setInProgress(false);\n    setErrorMessage('');\n    return res;\n  };\n\n  const catchError = (error) => {\n    const err = error.message || t('public~An error occurred. Please try again.');\n    setInProgress(false);\n    setErrorMessage(err);\n    return Promise.reject(err);\n  };\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n\n    return promise.then(\n      (res) => thenPromise(res),\n      (error) => catchError(error),\n    );\n  };\n\n  const getOAuthResource = () => {\n    return handlePromise(getOAuth());\n  };\n\n  const createCAConfigMap = () => {\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'request-header-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return handlePromise(k8sCreate(ConfigMapModel, ca));\n  };\n\n  const addRequestHeaderIDP = (oauth: OAuthKind, caName: string, dryRun?: boolean) => {\n    const idp: IdentityProvider = {\n      name,\n      type: 'RequestHeader',\n      mappingMethod: 'claim',\n      requestHeader: {\n        loginURL,\n        challengeURL,\n        clientCommonNames,\n        headers,\n        preferredUsernameHeaders,\n        nameHeaders,\n        emailHeaders,\n        ca: {\n          name: caName,\n        },\n      },\n    };\n\n    return handlePromise(addIDP(oauth, idp, dryRun));\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    if (!caFileContent) {\n      setErrorMessage(t('public~You must specify a CA File.'));\n      return;\n    }\n\n    // Clear any previous errors.\n    setErrorMessage('');\n    getOAuthResource().then((oauth: OAuthKind) => {\n      addRequestHeaderIDP(oauth, mockNames.ca, true)\n        .then(() => {\n          return createCAConfigMap()\n            .then((configMap: K8sResourceKind) =>\n              addRequestHeaderIDP(oauth, configMap.metadata.name),\n            )\n            .then(() => {\n              redirectToOAuthPage(navigate);\n            });\n        })\n        .catch((err) => {\n          setErrorMessage(err);\n        });\n    });\n  };\n\n  const title = t('public~Add Identity Provider: Request Header');\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading\n        title={title}\n        helpText={t(\n          'public~Use request header to identify users from request header values. It is typically used in combination with an authenticating proxy, which sets the request header value.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={submit} name=\"form\" className=\"co-m-pane__body-group\">\n          <IDPNameInput value={name} onChange={(e) => setName(e.currentTarget.value)} />\n          <div className=\"co-form-section__separator\" />\n          <h3 className=\"co-required\">{t('public~URLs')}</h3>\n          <p className=\"co-m-pane__explanation\">{t('public~At least one URL must be provided.')}</p>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"challenge-url\">\n              {t('public~Challenge URL')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"url\"\n              onChange={(e) => setChallengeURL(e.currentTarget.value)}\n              value={challengeURL}\n              id=\"challenge-url\"\n              aria-describedby=\"challenge-url-help\"\n            />\n            <div className=\"help-block\" id=\"challenge-url-help\">\n              {t(\n                'public~The URL to redirect unauthenticated requests from OAuth clients which expect interactive logins.',\n              )}\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"login-url\">\n              {t('public~Login URL')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"url\"\n              onChange={(e) => setLoginURL(e.currentTarget.value)}\n              value={loginURL}\n              id=\"login-url\"\n              aria-describedby=\"login-url-help\"\n            />\n            <div className=\"help-block\" id=\"login-url-help\">\n              {t(\n                'public~The URL to redirect unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges.',\n              )}\n            </div>\n          </div>\n          <div className=\"co-form-section__separator\" />\n          <h3>{t('public~More options')}</h3>\n          <IDPCAFileInput\n            value={caFileContent}\n            onChange={(c: string) => setCaFileContent(c)}\n            isRequired\n          />\n          <ListInput\n            label={t('public~Client common names')}\n            onChange={(c: string[]) => setClientCommonNames(c)}\n            helpText={t('public~The set of common names to require a match from.')}\n          />\n          <ListInput\n            label={t('public~Headers')}\n            onChange={(c: string[]) => setHeaders(c)}\n            helpText={t('public~The set of headers to check for identity information.')}\n            required\n          />\n          <ListInput\n            label={t('public~Preferred username headers')}\n            onChange={(c: string[]) => setPreferredUsernameHeaders(c)}\n            helpText={t('public~The set of headers to check for the preferred username.')}\n          />\n          <ListInput\n            label={t('public~Name headers')}\n            onChange={(c: string[]) => setNameHeaders(c)}\n            helpText={t('public~The set of headers to check for the display name.')}\n          />\n          <ListInput\n            label={t('public~Email headers')}\n            onChange={(c: string[]) => setEmailHeaders(c)}\n            helpText={t('public~The set of headers to check for the email address.')}\n          />\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\">\n                {t('public~Add')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport type AddRequestHeaderPageState = {\n  name: string;\n  loginURL: string;\n  challengeURL: string;\n  clientCommonNames: string[];\n  headers: string[];\n  preferredUsernameHeaders: string[];\n  nameHeaders: string[];\n  emailHeaders: string[];\n  caFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { resourcePathFromModel } from '../utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? { queryParams: { dryRun: 'All' } } : {});\n};\n\nexport const redirectToOAuthPage = (navigate) => {\n  const path = `${resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME)}?idpAdded=true`;\n  navigate(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n        {t('public~Name')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        onChange={onChange}\n        value={value}\n        aria-describedby=\"idp-name-help\"\n        id=\"idp-name\"\n        required\n      />\n      <p className=\"help-block\" id=\"idp-name-help\">\n        {t('public~Unique name of the new identity provider. This cannot be changed later.')}\n      </p>\n    </div>\n  );\n};\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <DroppableFileInput\n        onChange={onChange}\n        inputFileData={value}\n        id=\"idp-file-input\"\n        label={t('public~CA file')}\n        isRequired={isRequired}\n        hideContents\n      />\n    </div>\n  );\n};\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n"],"sourceRoot":""}