{"version":3,"sources":["webpack:///./node_modules/d3-polygon/src/index.js","webpack:///./node_modules/d3-polygon/src/hull.js","webpack:///./node_modules/d3-polygon/src/cross.js"],"names":["lexicographicOrder","a","b","computeUpperHullIndexes","points","n","length","indexes","size","i","slice","sortedPoints","Array","flippedPoints","sort","upperIndexes","lowerIndexes","skipLeft","skipRight","hull","push","c"],"mappings":"4FAAA,kF,uGCAA,cAEA,SAASA,EAAmBC,EAAGC,GAC7B,OAAOD,EAAE,GAAKC,EAAE,IAAMD,EAAE,GAAKC,EAAE,GAMjC,SAASC,EAAwBC,GAK/B,IAJA,IAAIC,EAAID,EAAOE,OACXC,EAAU,CAAC,EAAG,GACdC,EAAO,EAEFC,EAAI,EAAGA,EAAIJ,IAAKI,EAAG,CAC1B,KAAOD,EAAO,GAAK,YAAMJ,EAAOG,EAAQC,EAAO,IAAKJ,EAAOG,EAAQC,EAAO,IAAKJ,EAAOK,KAAO,KAAKD,EAClGD,EAAQC,KAAUC,EAGpB,OAAOF,EAAQG,MAAM,EAAGF,GAGX,gBACb,IAAKH,EAAID,EAAOE,QAAU,EAAG,OAAO,KAEpC,IAAIG,EACAJ,EACAM,EAAe,IAAIC,MAAMP,GACzBQ,EAAgB,IAAID,MAAMP,GAE9B,IAAKI,EAAI,EAAGA,EAAIJ,IAAKI,EAAGE,EAAaF,GAAK,EAAEL,EAAOK,GAAG,IAAKL,EAAOK,GAAG,GAAIA,GAEzE,IADAE,EAAaG,KAAKd,GACbS,EAAI,EAAGA,EAAIJ,IAAKI,EAAGI,EAAcJ,GAAK,CAACE,EAAaF,GAAG,IAAKE,EAAaF,GAAG,IAEjF,IAAIM,EAAeZ,EAAwBQ,GACvCK,EAAeb,EAAwBU,GAGvCI,EAAWD,EAAa,KAAOD,EAAa,GAC5CG,EAAYF,EAAaA,EAAaV,OAAS,KAAOS,EAAaA,EAAaT,OAAS,GACzFa,EAAO,GAIX,IAAKV,EAAIM,EAAaT,OAAS,EAAGG,GAAK,IAAKA,EAAGU,EAAKC,KAAKhB,EAAOO,EAAaI,EAAaN,IAAI,KAC9F,IAAKA,GAAKQ,EAAUR,EAAIO,EAAaV,OAASY,IAAaT,EAAGU,EAAKC,KAAKhB,EAAOO,EAAaK,EAAaP,IAAI,KAE7G,OAAOU,I,wGC3CM,oBACb,OAAQjB,EAAE,GAAKD,EAAE,KAAOoB,EAAE,GAAKpB,EAAE,KAAOC,EAAE,GAAKD,EAAE,KAAOoB,EAAE,GAAKpB,EAAE","file":"vendors~dev-console/code-refs/topology~helm-plugin/code-refs/helmTopology~knative-plugin/code-refs/t~04cbca6d-chunk-3f0f5ced0b245ee670ff.min.js","sourcesContent":["export {default as polygonArea} from \"./area\";\nexport {default as polygonCentroid} from \"./centroid\";\nexport {default as polygonHull} from \"./hull\";\nexport {default as polygonContains} from \"./contains\";\nexport {default as polygonLength} from \"./length\";\n","import cross from \"./cross\";\n\nfunction lexicographicOrder(a, b) {\n  return a[0] - b[0] || a[1] - b[1];\n}\n\n// Computes the upper convex hull per the monotone chain algorithm.\n// Assumes points.length >= 3, is sorted by x, unique in y.\n// Returns an array of indices into points in left-to-right order.\nfunction computeUpperHullIndexes(points) {\n  var n = points.length,\n      indexes = [0, 1],\n      size = 2;\n\n  for (var i = 2; i < n; ++i) {\n    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n    indexes[size++] = i;\n  }\n\n  return indexes.slice(0, size); // remove popped points\n}\n\nexport default function(points) {\n  if ((n = points.length) < 3) return null;\n\n  var i,\n      n,\n      sortedPoints = new Array(n),\n      flippedPoints = new Array(n);\n\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n  sortedPoints.sort(lexicographicOrder);\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n  var upperIndexes = computeUpperHullIndexes(sortedPoints),\n      lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n  // Construct the hull polygon, removing possible duplicate endpoints.\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n      hull = [];\n\n  // Add upper hull in right-to-l order.\n  // Then add lower hull in left-to-right order.\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n  return hull;\n}\n","// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nexport default function(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n}\n"],"sourceRoot":""}