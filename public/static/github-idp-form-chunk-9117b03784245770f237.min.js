(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{5530:function(e,t,a){"use strict";a.r(t),a.d(t,"AddGitHubPage",(function(){return h}));var n=a(0),r=a(137),i=a(7),l=a(14),o=a(966),c=a(19),s=a(10),u=a(8),m=a(5),d=a(5957),p=a(5958),b=a(6040);const h=()=>{const e=Object(l.useNavigate)(),[t,a]=n.useState(!1),[h,g]=n.useState(""),[f,v]=n.useState("github"),[E,y]=n.useState(""),[N,w]=n.useState(""),[C,O]=n.useState(""),[j,T]=n.useState([]),[S,P]=n.useState([]),[H,G]=n.useState(""),{t:q}=Object(i.useTranslation)(),z=e=>(a(!0),e.then(e=>(e=>(a(!1),g(""),e))(e),e=>(e=>{const t=e.message||q("public~An error occurred. Please try again.");return a(!1),g(t),Promise.reject(t)})(e))),A=()=>{const e={apiVersion:"v1",kind:"Secret",metadata:{generateName:"github-client-secret-",namespace:"openshift-config"},stringData:{clientSecret:N}};return z(Object(u.jb)(s.SecretModel,e))},_=()=>{if(!H)return Promise.resolve(null);const e={apiVersion:"v1",kind:"ConfigMap",metadata:{generateName:"github-ca-",namespace:"openshift-config"},data:{"ca.crt":H}};return z(Object(u.jb)(s.ConfigMapModel,e))},M=(e,t,a,n)=>{const r={name:f,type:"GitHub",mappingMethod:"claim",github:{clientID:E,clientSecret:{name:t},hostname:C,organizations:j,teams:S}};return a&&(r.github.ca={name:a}),z(Object(d.a)(e,r,n))},k=q("public~Add Identity Provider: GitHub");return n.createElement("div",{className:"co-m-pane__form"},n.createElement(r.a,null,n.createElement("title",null,k)),n.createElement(m.Z,{title:k,helpText:q("public~You can use the GitHub integration to connect to either GitHub or GitHub Enterprise. For GitHub Enterprise, you must provide the hostname of your instance and can optionally provide a CA certificate bundle to use in requests to the server.")}),n.createElement("div",{className:"co-m-pane__body"},n.createElement("form",{onSubmit:t=>{t.preventDefault(),j.length>0&&S.length>0?g(q("public~Specify either organizations or teams, but not both.")):(g(""),z(Object(d.b)()).then(t=>{const a=H?d.c.ca:"";M(t,d.c.secret,a,!0).then(()=>{const a=[A(),_()];Promise.all(a).then(([e,a])=>{const n=a?a.metadata.name:"";return M(t,e.metadata.name,n)}).then(()=>{Object(d.d)(e)})}).catch(e=>{g(e)})}))},name:"form",className:"co-m-pane__body-group"},n.createElement(p.a,{value:f,onChange:e=>v(e.currentTarget.value)}),n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label co-required",htmlFor:"client-id"},q("public~Client ID")),n.createElement("input",{className:"pf-v5-c-form-control",type:"text",onChange:e=>y(e.currentTarget.value),value:E,id:"client-id",required:!0})),n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label co-required",htmlFor:"client-secret"},q("public~Client secret")),n.createElement("input",{className:"pf-v5-c-form-control",type:"password",onChange:e=>w(e.currentTarget.value),value:N,id:"client-secret",required:!0})),n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label",htmlFor:"hostname"},q("public~Hostname")),n.createElement("input",{className:"pf-v5-c-form-control",type:"text",onChange:e=>O(e.currentTarget.value),value:C,id:"hostname","aria-describedby":"idp-hostname-help"}),n.createElement("p",{className:"help-block",id:"idp-hostname-help"},q("public~Optional domain for use with a hosted instance of GitHub Enterprise."))),n.createElement(b.a,{value:H,onChange:e=>G(e)}),n.createElement("div",{className:"co-form-section__separator"}),n.createElement("h3",null,q("public~Organizations")),n.createElement("p",{className:"co-help-text"},n.createElement(i.Trans,{t:q,ns:"public",i18nKey:"Optionally list organizations. If specified, only GitHub users that are members of at least one of the listed organizations will be allowed to log in. Cannot be used in combination with <strong>teams</strong>."},"Optionally list organizations. If specified, only GitHub users that are members of at least one of the listed organizations will be allowed to log in. Cannot be used in combination with ",n.createElement("strong",null,"teams"),".")),n.createElement(m.P,{label:q("public~Organization"),onChange:e=>T(e),helpText:q("public~Restricts which organizations are allowed to log in.")}),n.createElement("div",{className:"co-form-section__separator"}),n.createElement("h3",null,q("public~Teams")),n.createElement("p",{className:"co-help-text"},n.createElement(i.Trans,{t:q,ns:"public",i18nKey:"Optionally list teams. If specified, only GitHub users that are members of at least one of the listed teams will be allowed to log in. Cannot be used in combination with <strong>organizations</strong>."},"Optionally list teams. If specified, only GitHub users that are members of at least one of the listed teams will be allowed to log in. Cannot be used in combination with"," ",n.createElement("strong",null,"organizations"),".")),n.createElement(m.P,{label:q("public~Team"),onChange:e=>P(e),helpText:q("public~Restricts which teams are allowed to log in. The format is <org>/<team>.")}),n.createElement(m.g,{errorMessage:h,inProgress:t},n.createElement(o.a,{className:"pf-v5-c-form"},n.createElement(c.a,{type:"submit",variant:"primary","data-test-id":"add-idp"},q("public~Add")),n.createElement(c.a,{type:"button",variant:"secondary",onClick:()=>e(-1)},q("public~Cancel")))))))}},5957:function(e,t,a){"use strict";a.d(t,"b",(function(){return o})),a.d(t,"a",(function(){return c})),a.d(t,"d",(function(){return s})),a.d(t,"c",(function(){return u}));var n=a(22),r=a(10),i=a(8),l=a(5);const o=()=>Object(i.kb)(r.OAuthModel,"cluster"),c=(e,t,a)=>{const l=n.a(e.spec.identityProviders)?{op:"add",path:"/spec/identityProviders",value:[t]}:{op:"add",path:"/spec/identityProviders/-",value:t};return Object(i.pb)(r.OAuthModel,e,[l],a?{queryParams:{dryRun:"All"}}:{})},s=e=>{e(Object(l.uc)(r.OAuthModel,"cluster")+"?idpAdded=true")},u={secret:"secret-name",ca:"ca-name"}},5958:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var n=a(0),r=a(7);const i=({value:e,onChange:t})=>{const{t:a}=Object(r.useTranslation)();return n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label co-required",htmlFor:"idp-name"},a("public~Name")),n.createElement("input",{className:"pf-v5-c-form-control",type:"text",onChange:t,value:e,"aria-describedby":"idp-name-help",id:"idp-name",required:!0}),n.createElement("p",{className:"help-block",id:"idp-name-help"},a("public~Unique name of the new identity provider. This cannot be changed later.")))}},6040:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));var n=a(0),r=a(7),i=a(5);const l=e=>n.createElement(i.c,Object.assign({loader:()=>Promise.resolve().then(a.bind(null,2223)).then(e=>e.DroppableFileInput)},e)),o=({value:e,onChange:t,isRequired:a=!1})=>{const{t:i}=Object(r.useTranslation)();return n.createElement("div",{className:"form-group"},n.createElement(l,{onChange:t,inputFileData:e,id:"idp-file-input",label:i("public~CA file"),isRequired:a,hideContents:!0}))}}}]);
//# sourceMappingURL=github-idp-form-chunk-9117b03784245770f237.min.js.map