{"version":3,"sources":["webpack:///./public/components/image-stream.tsx","webpack:///./public/components/image-stream-tag.tsx","webpack:///./public/components/image-stream-timeline.tsx"],"names":["getAnnotationTags","specTag","split","getBuilderTags","imageStream","statusTags","getStatusTags","spec","tags","tag","annotationTags","isBuilderTag","name","getBuilderTagsSortedByVersion","sort","a","b","v1","v2","localeCompare","getMostRecentBuilderTag","isBuilder","common","factory","menuActions","getExtensionsActionsForKind","ImageStreamTagsRow","statusTag","imageStreamStatus","latest","from","referencesTag","image","created","dockerRepositoryCheck","t","className","kind","metadata","namespace","title","linkTo","timestamp","ExampleDockerCommandPopover","publicImageRepository","pushCommand","pullCommand","headerContent","minWidth","bodyContent","value","ns","href","text","type","variant","ImageStreamsDetails","obj","imageRepository","imageCount","specTagByName","importErrors","status","acc","importErrorCondition","conditions","condition","push","message","warning","alerts","error","i","key","resource","ImageStreamHistory","imageStreamStatusTags","imageStreamTags","imageStreamName","imageStreamNamespace","displayName","pages","details","editYaml","history","ImageStreamsDetailsPage","props","tableColumnClasses","columnClass","ImageStreamsTableRow","columnID","labels","creationTimestamp","actions","ImageStreamsList","ImageStreamsTableHeader","sortField","transforms","id","Header","Row","virtualize","buildPhase","build","phase","ImageStreamsPage","ListComponent","canCreate","supportedPlatformColumnClasses","SupportedPlatformsTableRows","componentProps","data","submanifest","os","architecture","digest","SupportedPlatformsTable","submanifests","policy","tableProps","length","heading","loaded","label","Rows","ImageStreamTagsDetails","imageStreamTag","config","Labels","labelsArray","sortedLabels","sortedSubmanifests","importPolicyPreserveOriginal","entrypoint","Entrypoint","join","cmd","Cmd","exposedPorts","ExposedPorts","size","humanizedSize","string","tagName","summary","WorkingDir","User","Env","nameValueStr","pair","nameValue","indexOf","substring","splitEnv","getImageStreamNameAndTag","imageStreamTagName","ImageStreamTagHistory","ImageStreamTagsDetailsPage","params","location","breadcrumbsFor","path","pathname","resources","nameAndTag","isList","prop","getImageStreamTagName","ImageStreamTimelineItem","linkToTag","referenceAndSHA","dockerImageReference","simple","isTagVersionLatest","comparedTag","comparedTagPosition","orderedTagArray","orderedTag","ImageStreamTimeline","tagsArray","items","timeline"],"mappings":"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","file":"image-stream-tag-chunk-82e8b431806b01697afb.min.js","sourcesContent":["import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport * as _ from 'lodash-es';\nimport * as semver from 'semver';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { AlertVariant, Button, Popover } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamModel } from '../models';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport { DOC_URL_PODMAN } from './utils';\nimport { CopyToClipboard } from './utils/copy-to-clipboard';\nimport { ExpandableAlert } from './utils/alerts';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { SectionHeading } from './utils/headings';\nimport { LabelList } from './utils/label-list';\nimport { navFactory } from './utils/horizontal-nav';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { Timestamp } from './utils/timestamp';\nimport { ImageStreamTimeline, getImageStreamTagName } from './image-stream-timeline';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\n\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getAnnotationTags = (specTag: any) =>\n  _.get(specTag, 'annotations.tags', '').split(/\\s*,\\s*/);\n\nconst isBuilderTag = (specTag: any) => {\n  // A spec tag has annotations tags, which is a comma-delimited string (e.g., 'builder,httpd').\n  const annotationTags = getAnnotationTags(specTag);\n  return _.includes(annotationTags, 'builder') && !_.includes(annotationTags, 'hidden');\n};\n\nconst getStatusTags = (imageStream: K8sResourceKind): any => {\n  const statusTags = _.get(imageStream, 'status.tags');\n  return _.keyBy(statusTags, 'tag');\n};\n\nexport const getBuilderTags = (imageStream: K8sResourceKind): any[] => {\n  const statusTags = getStatusTags(imageStream);\n  return _.filter(imageStream.spec.tags, (tag) => isBuilderTag(tag) && statusTags[tag.name]);\n};\n\n// Sort tags in reverse order by semver, falling back to a string comparison if not a valid version.\nexport const getBuilderTagsSortedByVersion = (imageStream: K8sResourceKind): any[] => {\n  return getBuilderTags(imageStream).sort(({ name: a }, { name: b }) => {\n    const v1 = semver.coerce(a);\n    const v2 = semver.coerce(b);\n    if (!v1 && !v2) {\n      return a.localeCompare(b);\n    }\n    if (!v1) {\n      return 1;\n    }\n    if (!v2) {\n      return -1;\n    }\n    return semver.rcompare(v1, v2);\n  });\n};\n\nexport const getMostRecentBuilderTag = (imageStream: K8sResourceKind) => {\n  const tags = getBuilderTagsSortedByVersion(imageStream);\n  return _.head(tags);\n};\n\n// An image stream is a builder image if\n// - It has a spec tag annotated with `builder` and not `hidden`\n// - It has a corresponding status tag\nexport const isBuilder = (imageStream: K8sResourceKind) => !_.isEmpty(getBuilderTags(imageStream));\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamModel), ...common];\n\nconst ImageStreamTagsRow: React.SFC<ImageStreamTagsRowProps> = ({\n  imageStream,\n  specTag,\n  statusTag,\n}) => {\n  const imageStreamStatus = _.get(imageStream, 'status');\n  const latest = _.get(statusTag, ['items', 0]);\n  const from = _.get(specTag, 'from');\n  const referencesTag = _.get(specTag, 'from.kind') === 'ImageStreamTag';\n  const image = _.get(latest, 'image');\n  const created = _.get(latest, 'created');\n  const dockerRepositoryCheck = _.has(imageStream, [\n    'metadata',\n    'annotations',\n    'openshift.io/image.dockerRepositoryCheck',\n  ]);\n  const { t } = useTranslation();\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-2 col-sm-4 col-xs-4 co-break-word\">\n        <ResourceLink\n          kind={ImageStreamTagsReference}\n          name={getImageStreamTagName(imageStream.metadata.name, statusTag.tag)}\n          namespace={imageStream.metadata.namespace}\n          title={statusTag.tag}\n          linkTo={!!image}\n        />\n      </div>\n      <span className=\"col-md-3 col-sm-4 col-xs-8 co-break-all\">\n        {from && referencesTag && (\n          <ResourceLink\n            kind={ImageStreamTagsReference}\n            name={from.name}\n            namespace={imageStream.metadata.namespace}\n            title={from.name}\n          />\n        )}\n        {from && !referencesTag && <>{from.name}</>}\n        {!from && <span className=\"text-muted\">{t('public~pushed image')}</span>}\n      </span>\n      <span className=\"col-md-4 col-sm-4 hidden-xs co-break-all\">\n        {!imageStreamStatus && dockerRepositoryCheck && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~Unable to resolve')}\n          </>\n        )}\n        {!imageStreamStatus && !dockerRepositoryCheck && !from && <>{t('public~Not synced yet')}</>}\n        {/* We have no idea why in this case  */}\n        {!imageStreamStatus && !dockerRepositoryCheck && from && <>{t('public~Unresolved')}</>}\n        {imageStreamStatus && image && <>{image}</>}\n        {imageStreamStatus && !image && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~There is no image associated with this tag')}\n          </>\n        )}\n      </span>\n      <div className=\"col-md-3 hidden-sm hidden-xs\">\n        {created && <Timestamp timestamp={created} />}\n        {!created && '-'}\n      </div>\n    </div>\n  );\n};\n\nexport const ExampleDockerCommandPopover: React.FC<ImageStreamManipulationHelpProps> = ({\n  imageStream,\n  tag,\n}) => {\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const { t } = useTranslation();\n  if (!publicImageRepository) {\n    return null;\n  }\n  const loginCommand = 'oc registry login';\n  const pushCommand = `docker push ${publicImageRepository}:${tag || '<tag>'}`;\n  const pullCommand = `docker pull ${publicImageRepository}:${tag || '<tag>'}`;\n\n  return (\n    <Popover\n      headerContent={<>{t('public~Image registry commands')}</>}\n      className=\"co-example-docker-command__popover\"\n      minWidth=\"600px\"\n      bodyContent={\n        <div>\n          <p>\n            {t(\n              'public~Create a new ImageStreamTag by pushing an image to this ImageStream with the desired tag.',\n            )}\n          </p>\n          <br />\n          <p>{t('public~Authenticate to the internal registry')}</p>\n          <CopyToClipboard value={loginCommand} />\n          <br />\n          <p>{t('public~Push an image to this ImageStream')}</p>\n          <CopyToClipboard value={pushCommand} />\n          <br />\n          <p>{t('public~Pull an image from this ImageStream')}</p>\n          <CopyToClipboard value={pullCommand} />\n          <br />\n          <p>\n            <Trans t={t} ns=\"public\">\n              Red Hat Enterprise Linux users may use the equivalent <strong>podman</strong>{' '}\n              commands.{' '}\n            </Trans>\n            <ExternalLink href={DOC_URL_PODMAN} text={t('public~Learn more.')} />\n          </p>\n        </div>\n      }\n    >\n      <Button className=\"hidden-sm hidden-xs\" type=\"button\" variant=\"link\">\n        <QuestionCircleIcon className=\"co-icon-space-r\" />\n        {t('public~Do you need to work with this ImageStream outside of the web console?')}\n      </Button>\n    </Popover>\n  );\n};\n\nexport const ImageStreamsDetails: React.SFC<ImageStreamsDetailsProps> = ({ obj: imageStream }) => {\n  const { t } = useTranslation();\n\n  const getImportErrors = (): string[] => {\n    return _.transform(imageStream.status.tags, (acc, tag: any) => {\n      const importErrorCondition = _.find(\n        tag.conditions,\n        (condition) => condition.type === 'ImportSuccess' && condition.status === 'False',\n      );\n      importErrorCondition &&\n        acc.push(\n          t('public~Unable to sync image for tag {{tag}}. {{message}}', {\n            tag: `${imageStream.metadata.name}:${tag.tag}`,\n            message: importErrorCondition.message,\n          }),\n        );\n    });\n  };\n\n  const imageRepository = _.get(imageStream, 'status.dockerImageRepository');\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const imageCount = _.get(imageStream, 'status.tags.length');\n  const specTagByName = _.keyBy(imageStream.spec.tags, 'name');\n  const importErrors = getImportErrors();\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        {!_.isEmpty(importErrors) && (\n          <ExpandableAlert\n            variant={AlertVariant.warning}\n            alerts={_.map(importErrors, (error, i) => (\n              <React.Fragment key={i}>{error}</React.Fragment>\n            ))}\n          />\n        )}\n        <SectionHeading text={t('public~ImageStream details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={imageStream}>\n              {imageRepository && <dt>{t('public~Image repository')}</dt>}\n              {imageRepository && <dd>{imageRepository}</dd>}\n              {publicImageRepository && <dt>{t('public~Public image repository')}</dt>}\n              {publicImageRepository && <dd>{publicImageRepository}</dd>}\n              <dt>{t('public~Image count')}</dt>\n              <dd>{imageCount ? imageCount : 0}</dd>\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Tags')} />\n        {_.isEmpty(imageStream.status.tags) ? (\n          <span className=\"text-muted\">{t('public~No tags')}</span>\n        ) : (\n          <div className=\"row\">\n            <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n              <div className=\"row co-m-table-grid__head\">\n                <div className=\"col-md-2 col-sm-4 col-xs-4\">{t('public~Name')}</div>\n                <div className=\"col-md-3 col-sm-4 col-xs-8\">{t('public~From')}</div>\n                <div className=\"col-md-4 col-sm-4 hidden-xs\">{t('public~Identifier')}</div>\n                <div className=\"col-md-3 hidden-sm hidden-xs\">{t('public~Last updated')}</div>\n              </div>\n              <div className=\"co-m-table-grid__body\">\n                {_.map(imageStream.status.tags, (statusTag) => (\n                  <ImageStreamTagsRow\n                    key={statusTag.tag}\n                    imageStream={imageStream}\n                    specTag={specTagByName[statusTag.tag]}\n                    statusTag={statusTag}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ImageStreamHistory: React.FC<ImageStreamHistoryProps> = ({ obj: imageStream }) => {\n  const imageStreamStatusTags = _.get(imageStream, 'status.tags');\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamHistory.displayName = 'ImageStreamHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamHistory),\n];\nexport const ImageStreamsDetailsPage: React.SFC = (props) => (\n  <DetailsPage {...props} kind={ImageStreamsReference} menuActions={menuActions} pages={pages} />\n);\nImageStreamsDetailsPage.displayName = 'ImageStreamsDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  Kebab.columnClass,\n];\n\nconst ImageStreamsTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={ImageStreamsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={ImageStreamsReference} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={ImageStreamsReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const ImageStreamsList: React.SFC = (props) => {\n  const { t } = useTranslation();\n  const ImageStreamsTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Labels'),\n        sortField: 'metadata.labels',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Created'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[4] },\n      },\n    ];\n  };\n  ImageStreamsTableHeader.displayName = 'ImageStreamsTableHeader';\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ImageStreams')}\n      Header={ImageStreamsTableHeader}\n      Row={ImageStreamsTableRow}\n      virtualize\n    />\n  );\n};\n\nImageStreamsList.displayName = 'ImageStreamsList';\n\nexport const buildPhase = (build) => build.status.phase;\n\nexport const ImageStreamsPage: React.SFC<ImageStreamsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      title={t('public~ImageStreams')}\n      kind={ImageStreamsReference}\n      ListComponent={ImageStreamsList}\n      canCreate={true}\n    />\n  );\n};\n\nImageStreamsPage.displayName = 'ImageStreamsListPage';\n\ntype ImageStreamTagsRowProps = {\n  imageStream: K8sResourceKind;\n  specTag: any;\n  statusTag: any;\n};\n\ntype ImageStreamHistoryProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamManipulationHelpProps = {\n  imageStream: K8sResourceKind;\n  tag?: string;\n};\n\nexport type ImageStreamsDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamsPageProps = {\n  filterLabel: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useLocation } from 'react-router-dom-v5-compat';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamTagModel } from '../models';\nimport { DetailsPage, Table } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceSummary } from './utils';\nimport { humanizeBinaryBytes } from './utils/units';\nimport { ExampleDockerCommandPopover } from './image-stream';\nimport { ImageStreamTimeline } from './image-stream-timeline';\nimport { getBreadcrumbPath } from '@console/internal/components/utils/breadcrumbs';\nimport { sortable } from '@patternfly/react-table';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamTagModel), ...common];\n\n// Splits a name/value pair separated by an `=`\nconst splitEnv = (nameValue: string) => {\n  // Use this method instead of `String.split()` so we only split on the first `=`.\n  const i = nameValue.indexOf('=');\n  if (i === -1) {\n    return {\n      name: nameValue,\n      value: '',\n    };\n  }\n\n  return {\n    name: nameValue.substring(0, i),\n    value: nameValue.substring(i + 1),\n  };\n};\n\nconst supportedPlatformColumnClasses = [\n  'pf-m-hidden pf-m-visible-on-sm',\n  'pf-m-hidden pf-m-visible-on-sm',\n  'pf-m-hidden pf-m-visible-on-lg',\n];\n\nconst SupportedPlatformsTableRows = ({ componentProps: { data } }) => {\n  return _.map(data, (submanifest: RowSupportedPlatformData) => {\n    const { os, architecture, digest } = submanifest;\n    return [\n      {\n        title: os,\n        props: {\n          className: supportedPlatformColumnClasses[0],\n        },\n      },\n      {\n        title: architecture,\n        props: {\n          className: supportedPlatformColumnClasses[1],\n        },\n      },\n      {\n        title: digest,\n        props: {\n          className: supportedPlatformColumnClasses[2],\n        },\n      },\n    ];\n  });\n};\n\nexport const SupportedPlatformsTable = (props) => {\n  const { t } = useTranslation();\n  const { submanifests, policy, ...tableProps } = props;\n\n  const SupportedPlatformsTableHeader = () => [\n    {\n      title: t('public~OS'),\n      sortField: 'os',\n      transforms: [sortable],\n      props: { className: supportedPlatformColumnClasses[0] },\n    },\n    {\n      title: t('public~Architecture'),\n      sortField: 'architecture',\n      transforms: [sortable],\n      props: { className: supportedPlatformColumnClasses[1] },\n    },\n    {\n      title: t('public~Identifier'),\n      sortField: 'digest',\n      transforms: [sortable],\n      props: { className: supportedPlatformColumnClasses[2] },\n    },\n  ];\n\n  if (!policy || submanifests.length === 0) {\n    // If the policy does not support Manifest Lists, it exits.\n    // or the Manifest List is empty\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"co-m-pane__body-group\">\n        {props.heading && <SectionHeading text={props.heading} />}\n        <Table\n          {...tableProps}\n          aria-label={t('public~Supported Platforms')}\n          loaded={true}\n          label={props.heading}\n          data={submanifests}\n          Header={SupportedPlatformsTableHeader}\n          Rows={SupportedPlatformsTableRows}\n          virtualize={false}\n        />\n      </div>\n    </>\n  );\n};\n\nSupportedPlatformsTable.displayName = 'SupportedPlatformsTable';\n\nexport const ImageStreamTagsDetails: React.SFC<ImageStreamTagsDetailsProps> = ({\n  obj: imageStreamTag,\n  imageStream,\n}) => {\n  const config = _.get(imageStreamTag, 'image.dockerImageMetadata.Config', {});\n  const labels = config.Labels || {};\n  // Convert to an array of objects with name and value properties, then sort the array for display.\n  const labelsArray = _.map(labels, (value, name) => ({ name, value }));\n  const sortedLabels = _.sortBy(labelsArray, 'name');\n\n  // Sort the submanifests by os,architecture\n  const submanifests = _.get(imageStreamTag, 'image.dockerImageManifests', {});\n  const sortedSubmanifests = _.sortBy(submanifests, ['os', 'architecture']);\n  const importPolicyPreserveOriginal =\n    _.get(imageStreamTag, 'tag.importPolicy.importMode', {}) === 'PreserveOriginal';\n\n  const entrypoint = (config.Entrypoint || []).join(' ');\n  const cmd = (config.Cmd || []).join(' ');\n  const exposedPorts = _.keys(config.ExposedPorts).join(', ');\n  const size = _.get(imageStreamTag, 'image.dockerImageMetadata.Size');\n  const humanizedSize = _.isFinite(size) && humanizeBinaryBytes(size).string;\n  const architecture = _.get(imageStreamTag, 'image.dockerImageMetadata.Architecture');\n  const tagName = _.get(imageStreamTag, 'tag.name');\n\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <div className=\"co-m-pane__body-group\">\n        <div className=\"row\">\n          <div className=\"col-md-6 col-sm-12\">\n            <SectionHeading text={t('public~ImageStreamTag details')} />\n            <ResourceSummary resource={imageStreamTag}>\n              {labels.name && <dt>{t('public~Image name')}</dt>}\n              {labels.name && <dd>{labels.name}</dd>}\n              {labels.summary && <dt>{t('public~Summary')}</dt>}\n              {labels.summary && <dd>{labels.summary}</dd>}\n              {humanizedSize && <dt>{t('public~Size')}</dt>}\n              {humanizedSize && <dd>{humanizedSize}</dd>}\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} tag={tagName} />\n          </div>\n          <div className=\"col-md-6 col-sm-12\">\n            <SectionHeading text={t('public~Configuration')} />\n            <dl className=\"co-m-pane__details\">\n              {entrypoint && <dt>{t('public~Entrypoint')}</dt>}\n              {entrypoint && <dd className=\"co-break-word\">{entrypoint}</dd>}\n              {cmd && <dt>{t('public~Command')}</dt>}\n              {cmd && <dd className=\"co-break-word\">{cmd}</dd>}\n              {config.WorkingDir && <dt>{t('public~Working dir')}</dt>}\n              {config.WorkingDir && <dd className=\"co-break-all\">{config.WorkingDir}</dd>}\n              {exposedPorts && <dt>{t('public~Exposed ports')}</dt>}\n              {exposedPorts && <dd className=\"co-break-word\">{exposedPorts}</dd>}\n              {config.User && <dt>{t('public~User')}</dt>}\n              {config.User && <dd>{config.User}</dd>}\n              {architecture && <dt>{t('public~Architecture')}</dt>}\n              {architecture && <dd>{architecture}</dd>}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body-group\">\n        <SectionHeading text={t('public~Image labels')} />\n        {_.isEmpty(sortedLabels) ? (\n          <span className=\"text-muted\">{t('public~No labels')}</span>\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n              <thead className=\"pf-v5-c-table__thead\">\n                <tr className=\"pf-v5-c-table__tr\">\n                  <th className=\"pf-v5-c-table__th\">{t('public~Name')}</th>\n                  <th className=\"pf-v5-c-table__th\">{t('public~Value')}</th>\n                </tr>\n              </thead>\n              <tbody className=\"pf-v5-c-table__tbody\">\n                {_.map(sortedLabels, ({ name, value }) => (\n                  <tr className=\"pf-v5-c-table__tr\" key={name}>\n                    <td className=\"pf-v5-c-table__td\">{name}</td>\n                    <td className=\"pf-v5-c-table__td\">{value}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n      <div className=\"co-m-pane__body-group\">\n        <SectionHeading text={t('public~Environment variables')} />\n        {_.isEmpty(config.Env) ? (\n          <span className=\"text-muted\">{t('public~No environment variables')}</span>\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n              <thead className=\"pf-v5-c-table__thead\">\n                <tr className=\"pf-v5-c-table__tr\">\n                  <th className=\"pf-v5-c-table__th\">{t('public~Name')}</th>\n                  <th className=\"pf-v5-c-table__th\">{t('public~Value')}</th>\n                </tr>\n              </thead>\n              <tbody className=\"pf-v5-c-table__tbody\">\n                {_.map(config.Env, (nameValueStr, i) => {\n                  const pair = splitEnv(nameValueStr);\n                  return (\n                    <tr className=\"pf-v5-c-table__tr\" key={i}>\n                      <td className=\"pf-v5-c-table__td\">{pair.name}</td>\n                      <td className=\"pf-v5-c-table__td\">{pair.value}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n      <SupportedPlatformsTable\n        submanifests={sortedSubmanifests}\n        policy={importPolicyPreserveOriginal}\n        heading={t('public~Supported Platforms')}\n      />\n    </div>\n  );\n};\n\nconst parseName = (nameAndTag: string): string => {\n  return nameAndTag.split(':')[0];\n};\n\nconst getImageStreamNameAndTag = (imageStreamTag: K8sResourceKind) => {\n  const imageStreamTagName: string = _.get(imageStreamTag, 'metadata.name') || '';\n  const [imageStreamName, tag] = imageStreamTagName.split(':');\n  return { imageStreamName, tag };\n};\n\nconst ImageStreamTagHistory: React.FC<ImageStreamTagHistoryProps> = ({\n  obj: imageStreamTag,\n  imageStream,\n}) => {\n  const { tag } = getImageStreamNameAndTag(imageStreamTag);\n  const imageStreamStatusTags = _.filter(_.get(imageStream, 'status.tags'), (i) => i.tag === tag);\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamTagHistory.displayName = 'ImageStreamTagHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamTagsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamTagHistory),\n];\nexport const ImageStreamTagsDetailsPage: React.SFC<ImageStreamTagsDetailsPageProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const location = useLocation();\n  return (\n    <DetailsPage\n      {...props}\n      breadcrumbsFor={(obj) => {\n        const { imageStreamName } = getImageStreamNameAndTag(obj);\n        return [\n          {\n            name: t('public~ImageStreams'),\n            path: getBreadcrumbPath(params, 'imagestreams'),\n          },\n          {\n            name: imageStreamName,\n            path: `${getBreadcrumbPath(params, 'imagestreams')}/${imageStreamName}`,\n          },\n          {\n            name: t('public~ImageStreamTag details'),\n            path: location.pathname,\n          },\n        ];\n      }}\n      kind={ImageStreamTagsReference}\n      menuActions={menuActions}\n      resources={[\n        {\n          kind: ImageStreamsReference,\n          name: parseName(props.name),\n          namespace: props.namespace,\n          isList: false,\n          prop: 'imageStream',\n        },\n      ]}\n      pages={pages}\n    />\n  );\n};\nImageStreamTagsDetailsPage.displayName = 'ImageStreamTagsDetailsPage';\n\ntype ImageStreamTagHistoryProps = {\n  imageStream: K8sResourceKind;\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamTagsDetailsProps = {\n  obj: K8sResourceKind;\n  imageStream: K8sResourceKind;\n};\n\nexport type ImageStreamTagsDetailsPageProps = {\n  namespace: string;\n  name: string;\n};\n\nexport type RowSupportedPlatformData = {\n  os: string;\n  architecture: string;\n  digest: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CircleIcon } from '@patternfly/react-icons/dist/esm/icons/circle-icon';\nimport { SquareIcon } from '@patternfly/react-icons/dist/esm/icons/square-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { K8sResourceKindReference } from '../module/k8s';\nimport { ResourceLink } from './utils/resource-link';\nimport { Timestamp } from './utils/timestamp';\nimport { EmptyBox } from './utils/status-box';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getImageStreamTagName = (imageStreamName: string, tag: string): string =>\n  `${imageStreamName}:${tag}`;\n\nconst ImageStreamTimelineItem: React.FC<ImageStreamTimelineItemProps> = ({\n  tag,\n  imageStreamName,\n  imageStreamNamespace,\n  linkToTag,\n}) => {\n  const referenceAndSHA = _.split(tag.dockerImageReference, '@');\n  return (\n    <>\n      <li>\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__circle-icon\">\n            <CircleIcon />\n          </span>\n          <div className=\"co-images-stream-tag-timeline__timestamp\">\n            <Timestamp timestamp={tag.created} simple={true} />\n          </div>\n        </div>\n\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__line\" />\n          <div className=\"co-images-stream-tag-timeline__info\">\n            <ResourceLink\n              kind={ImageStreamTagsReference}\n              name={getImageStreamTagName(imageStreamName, tag.tag)}\n              namespace={imageStreamNamespace}\n              title={tag.tag}\n              linkTo={linkToTag}\n            />\n            <div className=\"co-break-all\">from {referenceAndSHA[0]}</div>\n            <div className=\"co-break-all\">{referenceAndSHA[1]}</div>\n          </div>\n        </div>\n      </li>\n    </>\n  );\n};\n\n// check is the compared tag version, is the latest version in a sorted array of all tag versions\nconst isTagVersionLatest = (\n  comparedTag: string,\n  comparedTagPosition: number,\n  orderedTagArray: TagMeta[],\n) => {\n  return (\n    comparedTagPosition ===\n    _.findIndex(orderedTagArray, (orderedTag: TagMeta) => orderedTag.tag === comparedTag)\n  );\n};\n\nexport const ImageStreamTimeline: React.FC<ImageStreamTimelineProps> = ({\n  imageStreamTags,\n  imageStreamName,\n  imageStreamNamespace,\n}) => {\n  const { t } = useTranslation();\n  if (!_.some(imageStreamTags, 'items')) {\n    return <EmptyBox label={t('public~Images')} />;\n  }\n  const tagsArray: TagMeta[] = _.flatten(\n    _.map(imageStreamTags, ({ tag, items }) => {\n      return _.map(items, ({ created, dockerImageReference }) => ({\n        tag,\n        created,\n        dockerImageReference,\n      }));\n    }),\n  );\n  const orderedTagArray = _.orderBy(tagsArray, ['created'], ['desc']);\n  const timeline = _.map(orderedTagArray, (tag: TagMeta, i: number) => {\n    return (\n      <ImageStreamTimelineItem\n        key={tag.dockerImageReference}\n        tag={tag}\n        imageStreamName={imageStreamName}\n        imageStreamNamespace={imageStreamNamespace}\n        linkToTag={isTagVersionLatest(tag.tag, i, orderedTagArray)}\n      />\n    );\n  });\n\n  return (\n    <>\n      <ul className=\"co-images-stream-tag-timeline\">\n        {timeline}\n        <div>\n          <span className=\"co-images-stream-tag-timeline__square-icon\">\n            <SquareIcon />\n          </span>\n        </div>\n      </ul>\n    </>\n  );\n};\n\ntype ImageStreamTimelineItemProps = {\n  tag: TagMeta;\n  imageStreamName: string;\n  imageStreamNamespace: string;\n  linkToTag: boolean;\n};\n\ntype TagMeta = {\n  created: string;\n  tag: string;\n  dockerImageReference: string;\n};\n\ntype ImageStreamTimelineProps = {\n  imageStreamTags: any[];\n  imageStreamName: string;\n  imageStreamNamespace: string;\n};\n"],"sourceRoot":""}