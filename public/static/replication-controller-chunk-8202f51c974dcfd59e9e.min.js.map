{"version":3,"sources":["webpack:///./public/components/replication-controller.jsx"],"names":["EnvironmentPage","props","loader","then","c","envPath","environmentComponent","obj","rawEnvData","spec","template","readOnly","details","editYaml","pods","envEditor","events","ReplicationControllerPods","showNodes","ReplicationControllersDetailsPage","t","getResourceStatus","resource","metadata","annotations","customActionMenu","kindObj","context","actions","options","loaded","variant","DROPDOWN","pages","replicationController","revision","phase","className","text","showPodSelector","showNodeSelector","showTolerations","status","containers","heading","kind","tableColumnClasses","columnClass","ReplicationControllerTableRow","name","namespace","columnID","to","title","statusReplicas","replicas","specReplicas","timestamp","creationTimestamp","ReplicationControllersList","Header","sortField","transforms","id","sortFunc","Row","virtualize","ReplicationControllersPage","canCreate","ListComponent"],"mappings":"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","file":"replication-controller-chunk-8202f51c974dcfd59e9e.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  Status,\n  LazyActionMenu,\n  ActionServiceProvider,\n  ActionMenu,\n  ActionMenuVariant,\n} from '@console/shared';\nimport { ResourceEventStream } from './events';\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport {\n  ContainerTable,\n  navFactory,\n  SectionHeading,\n  ResourceSummary,\n  ResourcePodCount,\n  AsyncComponent,\n  Kebab,\n  ResourceLink,\n  resourcePath,\n  OwnerReferences,\n  Timestamp,\n  PodsComponent,\n  RuntimeClass,\n} from './utils';\nimport { referenceFor, referenceForModel } from '../module/k8s';\nimport { VolumesTable } from './volumes-table';\nimport { PodDisruptionBudgetField } from '@console/app/src/components/pdb/PodDisruptionBudgetField';\n\nconst EnvironmentPage = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst environmentComponent = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nconst { details, editYaml, pods, envEditor, events } = navFactory;\n\nconst ReplicationControllerPods = (props) => <PodsComponent {...props} showNodes />;\n\nexport const ReplicationControllersDetailsPage = (props) => {\n  const { t } = useTranslation();\n  const Details = ({ obj: replicationController }) => {\n    const revision = _.get(replicationController, [\n      'metadata',\n      'annotations',\n      'openshift.io/deployment-config.latest-version',\n    ]);\n    const phase = _.get(replicationController, [\n      'metadata',\n      'annotations',\n      'openshift.io/deployment.phase',\n    ]);\n    return (\n      <>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~ReplicationController details')} />\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <ResourceSummary\n                resource={replicationController}\n                showPodSelector\n                showNodeSelector\n                showTolerations\n              >\n                {revision && (\n                  <>\n                    <dt>{t('public~Deployment revision')}</dt>\n                    <dd>{revision}</dd>\n                  </>\n                )}\n              </ResourceSummary>\n            </div>\n            <div className=\"col-md-6\">\n              <dl className=\"co-m-pane__details\">\n                {phase && (\n                  <>\n                    <dt>{t('public~Phase')}</dt>\n                    <dd>\n                      <Status status={phase} />\n                    </dd>\n                  </>\n                )}\n                <ResourcePodCount resource={replicationController} />\n                <RuntimeClass obj={replicationController} />\n                <PodDisruptionBudgetField obj={replicationController} />\n              </dl>\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~Containers')} />\n          <ContainerTable containers={replicationController.spec.template.spec.containers} />\n        </div>\n        <div className=\"co-m-pane__body\">\n          <VolumesTable resource={replicationController} heading={t('public~Volumes')} />\n        </div>\n      </>\n    );\n  };\n\n  const customActionMenu = (kindObj, obj) => {\n    const resourceKind = referenceForModel(kindObj);\n    const context = { [resourceKind]: obj };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={(resource) =>\n        resource?.metadata?.annotations?.['openshift.io/deployment.phase'] || null\n      }\n      customActionMenu={customActionMenu}\n      pages={[\n        details(Details),\n        editYaml(),\n        pods(ReplicationControllerPods),\n        envEditor(environmentComponent),\n        events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n\nconst kind = 'ReplicationController';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-xl',\n  Kebab.columnClass,\n];\n\nconst ReplicationControllerTableRow = ({ obj }) => {\n  const { t } = useTranslation();\n  const phase = obj?.metadata?.annotations?.['openshift.io/deployment.phase'];\n  const resourceKind = referenceFor(obj);\n  const context = { [resourceKind]: obj };\n\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`}\n          title=\"pods\"\n        >\n          {t('public~{{statusReplicas}} of {{specReplicas}} pods', {\n            statusReplicas: obj.status.replicas || 0,\n            specReplicas: obj.spec.replicas,\n          })}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Status status={phase} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <OwnerReferences resource={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nexport const ReplicationControllersList = (props) => {\n  const { t } = useTranslation();\n\n  const ReplicationControllerTableHeader = () => [\n    {\n      title: t('public~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('public~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      id: 'namespace',\n    },\n    {\n      title: t('public~Status'),\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('public~Phase'),\n      sortField: 'metadata.annotations[\"openshift.io/deployment.phase\"]',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('public~Owner'),\n      sortField: 'metadata.ownerReferences[0].name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('public~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ReplicationControllers')}\n      Header={ReplicationControllerTableHeader}\n      Row={ReplicationControllerTableRow}\n      virtualize\n    />\n  );\n};\n\nexport const ReplicationControllersPage = (props) => {\n  const { canCreate = true } = props;\n  return (\n    <ListPage\n      canCreate={canCreate}\n      kind=\"ReplicationController\"\n      ListComponent={ReplicationControllersList}\n      {...props}\n    />\n  );\n};\n"],"sourceRoot":""}