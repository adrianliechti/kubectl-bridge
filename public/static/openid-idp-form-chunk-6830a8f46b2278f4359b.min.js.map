{"version":3,"sources":["webpack:///./public/components/cluster-settings/openid-idp-form.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/idp-cafile-input.tsx"],"names":["AddOpenIDIDPPage","navigate","inProgress","setInProgress","errorMessage","setErrorMessage","name","setName","clientID","setClientID","clientSecret","setClientSecret","claimPreferredUsernames","setClaimPreferredUsernames","claimNames","setClaimNames","claimEmails","setClaimEmails","issuer","setIssuer","caFileContent","setCaFileContent","extraScopes","setExtraScopes","t","handlePromise","promise","then","res","thenPromise","error","err","message","Promise","reject","catchError","createClientSecret","secret","apiVersion","kind","metadata","generateName","namespace","stringData","createCAConfigMap","resolve","ca","data","addOpenIDIDP","oauth","clientSecretName","caName","dryRun","idp","type","mappingMethod","openID","claims","preferredUsername","email","title","className","helpText","onSubmit","e","preventDefault","mockCA","promises","all","configMap","catch","value","onChange","currentTarget","htmlFor","id","required","label","initialValues","c","variant","onClick","getOAuthResource","addIDP","patch","spec","identityProviders","op","path","queryParams","redirectToOAuthPage","mockNames","IDPNameInput","DroppableFileInput","props","loader","IDPCAFileInput","isRequired","inputFileData","hideContents"],"mappings":"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","file":"openid-idp-form-chunk-6830a8f46b2278f4359b.min.js","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel, ConfigMapModel } from '../../models';\nimport { IdentityProvider, k8sCreate, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, ListInput, PageHeading } from '../utils';\nimport { addIDP, getOAuthResource as getOAuth, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport const AddOpenIDIDPPage = () => {\n  const navigate = useNavigate();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [name, setName] = React.useState('openid');\n  const [clientID, setClientID] = React.useState('');\n  const [clientSecret, setClientSecret] = React.useState('');\n  const [claimPreferredUsernames, setClaimPreferredUsernames] = React.useState([\n    'preferred_username',\n  ]);\n  const [claimNames, setClaimNames] = React.useState(['name']);\n  const [claimEmails, setClaimEmails] = React.useState(['email']);\n  const [issuer, setIssuer] = React.useState('');\n  const [caFileContent, setCaFileContent] = React.useState('');\n  const [extraScopes, setExtraScopes] = React.useState([]);\n\n  const { t } = useTranslation();\n\n  const thenPromise = (res) => {\n    setInProgress(false);\n    setErrorMessage('');\n    return res;\n  };\n\n  const catchError = (error) => {\n    const err = error.message || t('public~An error occurred. Please try again.');\n    setInProgress(false);\n    setErrorMessage(err);\n    return Promise.reject(err);\n  };\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n\n    return promise.then(\n      (res) => thenPromise(res),\n      (error) => catchError(error),\n    );\n  };\n\n  const getOAuthResource = () => {\n    return handlePromise(getOAuth());\n  };\n\n  const createClientSecret = () => {\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'openid-client-secret-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        clientSecret,\n      },\n    };\n\n    return handlePromise(k8sCreate(SecretModel, secret));\n  };\n\n  const createCAConfigMap = () => {\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'openid-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return handlePromise(k8sCreate(ConfigMapModel, ca));\n  };\n\n  const addOpenIDIDP = (\n    oauth: OAuthKind,\n    clientSecretName: string,\n    caName: string,\n    dryRun?: boolean,\n  ) => {\n    const idp: IdentityProvider = {\n      name,\n      type: 'OpenID',\n      mappingMethod: 'claim',\n      openID: {\n        clientID,\n        clientSecret: {\n          name: clientSecretName,\n        },\n        issuer,\n        extraScopes,\n        claims: {\n          preferredUsername: claimPreferredUsernames,\n          name: claimNames,\n          email: claimEmails,\n        },\n      },\n    };\n\n    if (caName) {\n      idp.openID.ca = {\n        name: caName,\n      };\n    }\n\n    return handlePromise(addIDP(oauth, idp, dryRun));\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    // Clear any previous errors.\n    setErrorMessage('');\n    getOAuthResource().then((oauth: OAuthKind) => {\n      const mockCA = caFileContent ? mockNames.ca : '';\n      addOpenIDIDP(oauth, mockNames.secret, mockCA, true)\n        .then(() => {\n          const promises = [createClientSecret(), createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([secret, configMap]) => {\n              const caName = configMap ? configMap.metadata.name : '';\n              return addOpenIDIDP(oauth, secret.metadata.name, caName);\n            })\n            .then(() => {\n              redirectToOAuthPage(navigate);\n            });\n        })\n        .catch((err) => {\n          setErrorMessage(err);\n        });\n    });\n  };\n\n  const title = t('public~Add Identity Provider: OpenID Connect');\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading\n        title={title}\n        helpText={t(\n          'public~Integrate with an OpenID Connect identity provider using an Authorization Code Flow.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={submit} name=\"form\" className=\"co-m-pane__body-group\">\n          <IDPNameInput value={name} onChange={(e) => setName(e.currentTarget.value)} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-id\">\n              {t('public~Client ID')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={(e) => setClientID(e.currentTarget.value)}\n              value={clientID}\n              id=\"client-id\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-secret\">\n              {t('public~Client secret')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"password\"\n              onChange={(e) => setClientSecret(e.currentTarget.value)}\n              value={clientSecret}\n              id=\"client-secret\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"issuer\">\n              {t('public~Issuer URL')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"url\"\n              onChange={(e) => setIssuer(e.currentTarget.value)}\n              value={issuer}\n              id=\"issuer\"\n              required\n              aria-describedby=\"issuer-help\"\n            />\n            <div className=\"help-block\" id=\"issuer-help\">\n              {t(\n                'public~The URL that the OpenID provider asserts as its issuer identifier. It must use the https scheme with no URL query parameters or fragment.',\n              )}\n            </div>\n          </div>\n          <div className=\"co-form-section__separator\" />\n          <h3>{t('public~Claims')}</h3>\n          <p className=\"co-help-text\">\n            {t(\n              'public~Claims map metadata from the OpenID provider to an OpenShift user. The first non-empty claim is used.',\n            )}\n          </p>\n          <ListInput\n            label={t('public~Preferred username')}\n            initialValues={claimPreferredUsernames}\n            onChange={(c: string[]) => setClaimPreferredUsernames(c)}\n            helpText={t('public~Any scopes to request in addition to the standard openid scope.')}\n          />\n          <ListInput\n            label={t('public~Name')}\n            initialValues={claimNames}\n            onChange={(c: string[]) => setClaimNames(c)}\n            helpText={t(\n              'public~The list of claims whose values should be used as the display name.',\n            )}\n          />\n          <ListInput\n            label={t('public~Email')}\n            initialValues={claimEmails}\n            onChange={(c: string[]) => setClaimEmails(c)}\n            helpText={t(\n              'public~The list of claims whose values should be used as the email address.',\n            )}\n          />\n          <div className=\"co-form-section__separator\" />\n          <h3>{t('public~More options')}</h3>\n          <IDPCAFileInput value={caFileContent} onChange={(c: string) => setCaFileContent(c)} />\n          <ListInput\n            label={t('public~Extra scopes')}\n            onChange={(c: string[]) => setExtraScopes(c)}\n            helpText={t('public~Any scopes to request in addition to the standard openid scope.')}\n          />\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                {t('public~Add')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport type AddOpenIDIDPPageState = {\n  name: string;\n  clientID: string;\n  clientSecret: string;\n  claimPreferredUsernames: string[];\n  claimNames: string[];\n  claimEmails: string[];\n  issuer: string;\n  caFileContent: string;\n  extraScopes: string[];\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { resourcePathFromModel } from '../utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? { queryParams: { dryRun: 'All' } } : {});\n};\n\nexport const redirectToOAuthPage = (navigate) => {\n  const path = `${resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME)}?idpAdded=true`;\n  navigate(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n        {t('public~Name')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        onChange={onChange}\n        value={value}\n        aria-describedby=\"idp-name-help\"\n        id=\"idp-name\"\n        required\n      />\n      <p className=\"help-block\" id=\"idp-name-help\">\n        {t('public~Unique name of the new identity provider. This cannot be changed later.')}\n      </p>\n    </div>\n  );\n};\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <DroppableFileInput\n        onChange={onChange}\n        inputFileData={value}\n        id=\"idp-file-input\"\n        label={t('public~CA file')}\n        isRequired={isRequired}\n        hideContents\n      />\n    </div>\n  );\n};\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n"],"sourceRoot":""}