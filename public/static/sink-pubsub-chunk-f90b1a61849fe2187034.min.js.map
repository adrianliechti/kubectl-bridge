{"version":3,"sources":["webpack:///./packages/knative-plugin/src/components/sink-pubsub/SinkPubsub.tsx","webpack:///./packages/knative-plugin/src/components/sink-pubsub/SinkPubsubModal.tsx","webpack:///./packages/knative-plugin/src/components/sink-pubsub/SinkPubsubController.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/knative-plugin/src/components/pub-sub/pub-sub-utils.ts"],"names":["source","resourceType","cancel","close","t","metadata","namespace","name","spec","isSinkRef","subscriber","ref","sinkName","apiVersion","kind","initialValues","onSubmit","values","action","updatePayload","then","setStatus","error","catch","err","errMessage","message","onReset","initialStatus","formikProps","resourceName","resourceDropdown","labelTitle","handleSubmit","isSubmitting","status","setFieldValue","setFieldTouched","validateForm","onSinkChange","selectedValue","target","modelResource","props","model","apiGroup","dirty","className","ns","i18nKey","fullWidth","resources","dataSelector","required","placeholder","showBadge","autocompleteFilter","strText","item","customResourceKey","onChange","autoSelect","selectedKey","inProgress","submitText","cancelText","submitDisabled","errorMessage","SinkPubsubController","sinkPubsubModalLauncher","flexStyle","display","flex","flexDirection","margin","title","subTitle","children","flexLayout","extraMargin","dataTest","style","getSinkableResourceOrder","split","getResourceApiGroup","craftResourceKey","key","resource","join","undefined","getResourceNameFromKey","pop","sanitizeResourceName","finalValues"],"mappings":"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","file":"sink-pubsub-chunk-f90b1a61849fe2187034.min.js","sourcesContent":["import * as React from 'react';\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind, k8sUpdate, referenceFor, modelFor } from '@console/internal/module/k8s';\nimport { getSinkableResources } from '../../utils/get-knative-resources';\nimport { craftResourceKey, sanitizeResourceName } from '../pub-sub/pub-sub-utils';\nimport SinkPubsubModal from './SinkPubsubModal';\n\nexport interface SinkPubsubProps {\n  source: K8sResourceKind;\n  resourceType: string;\n  cancel?: () => void;\n  close?: () => void;\n}\n\nconst SinkPubsub: React.FC<SinkPubsubProps> = ({ source, resourceType, cancel, close }) => {\n  const { t } = useTranslation();\n  const {\n    metadata: { namespace, name },\n    spec,\n  } = source;\n  const isSinkRef = !!spec?.subscriber?.ref;\n  const { name: sinkName = '', apiVersion = '', kind = '' } = isSinkRef\n    ? spec?.subscriber?.ref\n    : {};\n  const initialValues = {\n    ref: {\n      apiVersion,\n      kind,\n      name: craftResourceKey(sinkName, spec?.subscriber?.ref),\n    },\n  };\n\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    const updatePayload = sanitizeResourceName({\n      ...source,\n      ...(sinkName !== values?.ref?.name && {\n        spec: { ...source.spec, subscriber: { ...values } },\n      }),\n    });\n    return k8sUpdate(modelFor(referenceFor(source)), updatePayload)\n      .then(() => {\n        action.setStatus({ error: '' });\n        close();\n      })\n      .catch((err) => {\n        const errMessage = err.message || t('knative-plugin~An error occurred. Please try again');\n        action.setStatus({ error: errMessage });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n    >\n      {(formikProps) => (\n        <SinkPubsubModal\n          {...formikProps}\n          resourceName={name}\n          resourceDropdown={getSinkableResources(namespace)}\n          labelTitle={t('knative-plugin~Move {{kind}}', { kind: resourceType })}\n          cancel={cancel}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default SinkPubsub;\n","import * as React from 'react';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport { Trans, useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { ResourceDropdownField } from '@console/shared';\nimport { craftResourceKey } from '../pub-sub/pub-sub-utils';\n\nexport interface SinkPubsubModalProps {\n  resourceName: string;\n  resourceDropdown: FirehoseResource[];\n  labelTitle: string;\n  cancel?: () => void;\n}\n\ntype Props = FormikProps<FormikValues> & SinkPubsubModalProps;\n\nconst SinkPubsubModal: React.FC<Props> = ({\n  resourceName,\n  resourceDropdown,\n  labelTitle,\n  handleSubmit,\n  cancel,\n  isSubmitting,\n  status,\n  setFieldValue,\n  setFieldTouched,\n  validateForm,\n  values,\n  initialValues,\n}) => {\n  const { t } = useTranslation();\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const onSinkChange = React.useCallback(\n    (selectedValue, target) => {\n      const modelResource = target?.props?.model;\n      if (selectedValue) {\n        setFieldTouched('ref.name', true);\n        setFieldValue('ref.name', selectedValue);\n        if (modelResource) {\n          const { apiGroup = 'core', apiVersion, kind } = modelResource;\n          const sinkApiversion = `${apiGroup}/${apiVersion}`;\n          setFieldValue('ref.apiVersion', sinkApiversion);\n          setFieldTouched('ref.apiVersion', true);\n          setFieldValue('ref.kind', kind);\n          setFieldTouched('ref.kind', true);\n        }\n        validateForm();\n      }\n    },\n    [setFieldValue, setFieldTouched, validateForm],\n  );\n  const dirty = values?.ref?.name !== initialValues.ref.name;\n\n  return (\n    <form className=\"modal-content\" onSubmit={handleSubmit}>\n      <ModalTitle>{labelTitle}</ModalTitle>\n      <ModalBody>\n        <p>\n          <Trans t={t} ns=\"knative-plugin\" i18nKey=\"Connects <strong>{{resourceName}}</strong> to\">\n            Connects <strong>{{ resourceName }}</strong> to\n          </Trans>\n        </p>\n        <FormSection fullWidth>\n          <ResourceDropdownField\n            name=\"ref.name\"\n            resources={resourceDropdown}\n            dataSelector={['metadata', 'name']}\n            fullWidth\n            required\n            placeholder={t('knative-plugin~Select a sink')}\n            showBadge\n            autocompleteFilter={autocompleteFilter}\n            customResourceKey={craftResourceKey}\n            onChange={onSinkChange}\n            autoSelect\n            selectedKey={values?.ref?.name}\n          />\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitting}\n        submitText={t('knative-plugin~Save')}\n        cancelText={t('knative-plugin~Cancel')}\n        submitDisabled={!dirty}\n        cancel={cancel}\n        errorMessage={status.error}\n      />\n    </form>\n  );\n};\n\nexport default SinkPubsubModal;\n","import * as React from 'react';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport SinkPubsub from './SinkPubsub';\n\ntype SinkPubsubControllerProps = {\n  source: K8sResourceKind;\n  resourceType: string;\n};\n\nconst SinkPubsubController: React.FC<SinkPubsubControllerProps> = ({ source, ...props }) => (\n  <SinkPubsub {...props} source={source} />\n);\n\ntype Props = SinkPubsubControllerProps & ModalComponentProps;\n\nexport const sinkPubsubModalLauncher = createModalLauncher<Props>(SinkPubsubController);\n\nexport default SinkPubsubController;\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { FormikValues } from 'formik';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nexport const RESOURCE_KEY_SEPERATOR = '#';\n\nexport const getResourceApiGroup = (apiVersion: string): string => apiVersion.split('/')[0];\n\nexport const getSinkableResourceOrder = (apiVersion: string): number => {\n  const sortOrder = {\n    'serving.knative.dev': 1,\n    'messaging.knative.dev': 2,\n    'eventing.knative.dev': 3,\n  };\n  return sortOrder[getResourceApiGroup(apiVersion)] ?? 4;\n};\nexport const craftResourceKey = (key: string, resource: K8sResourceKind): string | undefined => {\n  if (!resource?.apiVersion) return undefined;\n  const { apiVersion } = resource;\n  return key\n    ? [getSinkableResourceOrder(apiVersion), referenceFor(resource), key].join(\n        RESOURCE_KEY_SEPERATOR,\n      )\n    : undefined;\n};\n\nexport const getResourceNameFromKey = (key: string): string =>\n  key?.split(RESOURCE_KEY_SEPERATOR).pop() ?? '';\n\nexport const sanitizeResourceName = (values: FormikValues): FormikValues => {\n  const finalValues = { ...values };\n  finalValues.spec.subscriber.ref.name = getResourceNameFromKey(values.spec.subscriber.ref.name);\n  return finalValues;\n};\n"],"sourceRoot":""}