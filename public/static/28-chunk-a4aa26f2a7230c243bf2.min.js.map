{"version":3,"sources":["webpack:///./public/components/environment.jsx"],"names":["NameValueEditorComponent","props","loader","then","c","NameValueEditor","EnvFromEditorComponent","EnvFromEditor","getPairsFromObject","element","returnedPairs","env","leafNode","i","value","valueFrom","ID","Object","values","envFrom","configMapSecretRef","name","key","prefix","envVarsToArray","initialPairObjects","cpOfInitialPairs","getContainersObjectForDropdown","containerArray","result","elem","order","CurrentEnvVars","data","isContainerArray","path","this","currentEnvVars","state","allowed","arguments","length","setResultObject","setRawData","rawEnvData","containers","isCreate","hasInitContainers","initContainers","buildObject","resultObject","type","index","containerType","environmentType","formattedPairs","envPath","envPathForIC","concat","op","containerEnvPatch","map","finalPairsForContainer","join","_envVarsToNameVal","ENV","containerEnvFromPatch","_envFromVarsToResourcePrefix","ENV_FROM","patches","envPatchForIC","envFromPatchForIC","finalEnvPairs","isEmpty","every","finalEnvPair","Name","Value","Resource","finalPairForContainer","Prefix","UnconnectedEnvironmentPage","super","dismissSuccess","setState","success","reload","_reload","bind","saveChanges","_saveChanges","updateEnvVars","_updateEnvVars","selectContainer","_selectContainer","containerIndex","_checkEditAccess","addConfigMapSecret","readOnly","t","configMaps","secrets","envNamespace","Promise","all","catch","err","response","status","errorMessage","message","prevProps","obj","model","impersonate","dirty","stale","namespace","metadata","resourceAttributes","group","apiGroup","resource","plural","verb","resp","e","console","warn","onChange","currentEnv","setFormattedVars","nameValuePairs","dispatchNewEnvironmentVariables","containerName","preventDefault","getPatches","promise","handlePromise","res","inProgress","useLoadingInline","envVar","getEnvVarByTypeAndIndex","containerDropdown","currentKey","owners","o","kind","title","uid","inline","containerVars","className","isInline","variant","ns","nameValueId","updateParentData","nameString","allowSorting","actionClose","onClose","isDisabled","onClick","EnvironmentPage_","k8s","getIn","EnvironmentPage","propTypes","isRequired","defaultProps"],"mappings":"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","file":"28-chunk-a4aa26f2a7230c243bf2.min.js","sourcesContent":["/* eslint-disable tsdoc/syntax */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, ActionGroup, AlertActionCloseButton } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { Trans, withTranslation } from 'react-i18next';\nimport { getImpersonate } from '@console/dynamic-plugin-sdk';\n\nimport { k8sPatch, k8sGet, referenceFor, referenceForOwnerRef } from '../module/k8s';\nimport {\n  AsyncComponent,\n  checkAccess,\n  ContainerSelect,\n  EnvFromPair,\n  EnvType,\n  FieldLevelHelp,\n  LoadingBox,\n  LoadingInline,\n  NameValueEditorPair,\n  PromiseComponent,\n  ResourceLink,\n} from './utils';\nimport { ConfigMapModel, SecretModel } from '../models';\n\n/**\n * Set up an AsyncComponent to wrap the name-value-editor to allow on demand loading to reduce the\n * vendor footprint size.\n */\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('./utils/name-value-editor').then((c) => c.NameValueEditor)}\n    {...props}\n  />\n);\nconst EnvFromEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('./utils/name-value-editor').then((c) => c.EnvFromEditor)}\n    {...props}\n  />\n);\n\n/**\n * Set up initial value for the environment vars state. Use this in constructor or cancelChanges.\n *\n * Our return value here is an object in the form of:\n * {\n *   env: [[envname, value, id],[...]]\n *   envFrom: [[envFromprefix, resourceObject, id], [...]]\n * }\n *\n *\n * @param initialPairObjects\n * @returns {*}\n * @private\n */\nconst getPairsFromObject = (element = {}) => {\n  const returnedPairs = {};\n  if (_.isEmpty(element.env)) {\n    returnedPairs.env = [['', '', 0]];\n  } else {\n    returnedPairs.env = _.map(element.env, (leafNode, i) => {\n      if (_.isEmpty(leafNode.value) && _.isEmpty(leafNode.valueFrom)) {\n        leafNode.value = '';\n        delete leafNode.valueFrom;\n      }\n      leafNode.ID = i;\n      return Object.values(leafNode);\n    });\n  }\n  if (_.isEmpty(element.envFrom)) {\n    const configMapSecretRef = { name: '', key: '' };\n    returnedPairs.envFrom = [['', { configMapSecretRef }, 0]];\n  } else {\n    returnedPairs.envFrom = _.map(element.envFrom, (leafNode, i) => {\n      if (!_.has(leafNode, 'prefix')) {\n        leafNode.prefix = '';\n      }\n      leafNode.ID = i;\n      return [leafNode.prefix, _.pick(leafNode, ['configMapRef', 'secretRef']), leafNode.ID];\n    });\n  }\n  return returnedPairs;\n};\n\n/**\n * Get name/value pairs from an array or object source\n *\n * @param initialPairObjects\n * @returns {Array}\n */\nconst envVarsToArray = (initialPairObjects) => {\n  const cpOfInitialPairs = _.cloneDeep(initialPairObjects);\n  if (_.isArray(cpOfInitialPairs)) {\n    return _.map(cpOfInitialPairs, (element) => {\n      const { env, envFrom } = getPairsFromObject(element);\n      return [env, envFrom];\n    });\n  }\n  const { env, envFrom } = getPairsFromObject(cpOfInitialPairs);\n  return [[env, envFrom]];\n};\n\nconst getContainersObjectForDropdown = (containerArray) => {\n  return _.reduce(\n    containerArray,\n    (result, elem, order) => {\n      result[elem.name] = { ...elem, order };\n      return result;\n    },\n    {},\n  );\n};\n\nclass CurrentEnvVars {\n  constructor(data, isContainerArray, path) {\n    this.currentEnvVars = {};\n    this.state = { allowed: true };\n    if (!_.isEmpty(data) && arguments.length > 1) {\n      this.setResultObject(data, isContainerArray, path);\n    } else {\n      this.setRawData(data);\n    }\n  }\n\n  setRawData(rawEnvData) {\n    this.rawEnvData = rawEnvData;\n    this.isContainerArray = _.isArray(rawEnvData.containers);\n    this.isCreate = _.isEmpty(rawEnvData);\n    this.hasInitContainers = !_.isUndefined(rawEnvData.initContainers);\n\n    if (this.isContainerArray || this.isCreate) {\n      this.currentEnvVars.containers = envVarsToArray(rawEnvData.containers);\n      this.currentEnvVars.initContainers = envVarsToArray(rawEnvData.initContainers);\n    } else {\n      this.currentEnvVars.buildObject = envVarsToArray(rawEnvData);\n    }\n    return this;\n  }\n\n  /**\n   * Initialize CurrentEnvVars with result object after patch operation.\n   *\n   * If this is a containerArray its possible to have initContainers at a level above\n   * the current envPath, so when we setRawData, we want to drop right such that\n   * not only the containers can be initialized, but also initContainers. A build object\n   * only has env data in the base path.\n   *\n   * @param resultObject\n   * @param isContainerArray\n   * @param path\n   * @returns CurrentEnvVars\n   */\n  setResultObject(resultObject, isContainerArray, path) {\n    if (isContainerArray) {\n      return this.setRawData(_.get(resultObject, _.dropRight(path)));\n    }\n    return this.setRawData(_.get(resultObject, path));\n  }\n\n  getEnvVarByTypeAndIndex(type, index) {\n    return this.currentEnvVars[type][index];\n  }\n\n  setFormattedVars(containerType, index, environmentType, formattedPairs) {\n    this.currentEnvVars[containerType][index][environmentType] = formattedPairs;\n    return this;\n  }\n\n  /**\n   * Return array of patches for the save operation.\n   *\n   *\n   * @param envPath\n   * @returns {Array}\n   * @public\n   */\n  getPatches(envPath) {\n    if (this.isContainerArray) {\n      const envPathForIC = _.dropRight(envPath).concat('initContainers');\n      const op = 'add';\n\n      const containerEnvPatch = this.currentEnvVars.containers.map((finalPairsForContainer, i) => {\n        const path = `/${envPath.join('/')}/${i}/env`;\n        const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n        return { path, op, value };\n      });\n\n      const containerEnvFromPatch = this.currentEnvVars.containers.map(\n        (finalPairsForContainer, i) => {\n          const path = `/${envPath.join('/')}/${i}/envFrom`;\n          const value = this._envFromVarsToResourcePrefix(finalPairsForContainer[EnvType.ENV_FROM]);\n          return { path, op, value };\n        },\n      );\n\n      let patches = _.concat(containerEnvPatch, containerEnvFromPatch);\n\n      if (this.hasInitContainers) {\n        const envPatchForIC = this.currentEnvVars.initContainers.map(\n          (finalPairsForContainer, i) => {\n            const path = `/${envPathForIC.join('/')}/${i}/env`;\n            const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n            return { path, op, value };\n          },\n        );\n\n        const envFromPatchForIC = this.currentEnvVars.initContainers.map(\n          (finalPairsForContainer, i) => {\n            const path = `/${envPathForIC.join('/')}/${i}/envFrom`;\n            const value = this._envFromVarsToResourcePrefix(\n              finalPairsForContainer[EnvType.ENV_FROM],\n            );\n            return { path, op, value };\n          },\n        );\n\n        patches = _.concat(patches, envPatchForIC, envFromPatchForIC);\n      }\n      return patches;\n    }\n    return this.currentEnvVars.buildObject.map((finalPairsForContainer) => {\n      const op = 'add';\n      const path = `/${envPath.join('/')}/env`;\n      const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n      return { path, op, value };\n    });\n  }\n\n  /**\n   * Return array of variables for the create operation.\n   *\n   * @returns {Array}\n   * @public\n   */\n  dispatchNewEnvironmentVariables() {\n    return this.isCreate\n      ? this._envVarsToNameVal(this.currentEnvVars.containers[0][EnvType.ENV])\n      : null;\n  }\n\n  /**\n   * Return env var pairs in name value notation, and strip out pairs that have empty name and values.\n   *\n   *\n   * @param finalEnvPairs\n   * @returns {Array}\n   * @private\n   */\n  _envVarsToNameVal(finalEnvPairs) {\n    const isEmpty = (value) => {\n      return _.isObject(value) ? _.values(value).every(isEmpty) : !value;\n    };\n    return _.filter(finalEnvPairs, (finalEnvPair) => {\n      const name = finalEnvPair[NameValueEditorPair.Name];\n      const value = finalEnvPair[NameValueEditorPair.Value];\n      return !isEmpty(name) || !isEmpty(value);\n    }).map((finalEnvPair) => {\n      const name = finalEnvPair[NameValueEditorPair.Name];\n      const value = finalEnvPair[NameValueEditorPair.Value];\n      return _.isObject(value) ? { name, valueFrom: value } : { name, value };\n    });\n  }\n\n  /**\n   * Return env var pairs in envFrom (resource/prefix) notation, and strip out any pairs that have empty resource values.\n   *\n   *\n   * @param finalEnvPairs\n   * @returns {Array}\n   * @private\n   */\n  _envFromVarsToResourcePrefix(finalEnvPairs) {\n    return _.filter(\n      finalEnvPairs,\n      (finalEnvPair) =>\n        !_.isEmpty(finalEnvPair[EnvFromPair.Resource]) &&\n        !finalEnvPair[EnvFromPair.Resource].configMapSecretRef,\n    ).map((finalPairForContainer) => {\n      return _.assign(\n        { prefix: finalPairForContainer[EnvFromPair.Prefix] },\n        finalPairForContainer[EnvFromPair.Resource],\n      );\n    });\n  }\n}\n\n/** @type {(state: any, props: {obj?: object, rawEnvData?: any, readOnly: boolean, envPath: any, onChange?: (env: any) => void, addConfigMapSecret?: boolean, useLoadingInline?: boolean}) => {model: K8sKind}} */\nconst stateToProps = (state, { obj }) => ({\n  model:\n    state.k8s.getIn(['RESOURCES', 'models', referenceFor(obj)]) ||\n    state.k8s.getIn(['RESOURCES', 'models', obj.kind]),\n  impersonate: getImpersonate(state),\n});\n\nexport class UnconnectedEnvironmentPage extends PromiseComponent {\n  /**\n   * Set initial state and decide which kind of env we are setting up\n   *\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.reload = this._reload.bind(this);\n    this.saveChanges = this._saveChanges.bind(this);\n    this.updateEnvVars = this._updateEnvVars.bind(this);\n    this.selectContainer = this._selectContainer.bind(this);\n    const currentEnvVars = new CurrentEnvVars(this.props.rawEnvData);\n    this.state = {\n      currentEnvVars,\n      success: null,\n      containerIndex: 0,\n      containerType:\n        currentEnvVars.isContainerArray || currentEnvVars.isCreate ? 'containers' : 'buildObject',\n    };\n  }\n\n  componentDidMount() {\n    this._checkEditAccess();\n    const { addConfigMapSecret, readOnly, t } = this.props;\n    if (!addConfigMapSecret || readOnly) {\n      const configMaps = {},\n        secrets = {};\n      this.setState({ configMaps, secrets });\n      return;\n    }\n    const envNamespace = _.get(this.props, 'obj.metadata.namespace');\n\n    Promise.all([\n      k8sGet(ConfigMapModel, null, envNamespace).catch((err) => {\n        if (err.response.status !== 403) {\n          const errorMessage = err.message || t('public~Could not load ConfigMaps.');\n          this.setState({ errorMessage });\n        }\n        return {\n          configMaps: {},\n        };\n      }),\n      k8sGet(SecretModel, null, envNamespace).catch((err) => {\n        if (err.response.status !== 403) {\n          const errorMessage = err.message || t('public~Could not load Secrets.');\n          this.setState({ errorMessage });\n        }\n        return {\n          secrets: {},\n        };\n      }),\n    ]).then(([configMaps, secrets]) => this.setState({ configMaps, secrets }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { obj, model, impersonate, readOnly, rawEnvData } = this.props;\n    const { dirty } = this.state;\n\n    if (!_.isEqual(rawEnvData, prevProps.rawEnvData)) {\n      this.setState({\n        ...(!dirty && { currentEnvVars: new CurrentEnvVars(rawEnvData) }),\n        stale: dirty,\n      });\n    }\n\n    if (\n      _.get(prevProps.obj, 'metadata.uid') !== _.get(obj, 'metadata.uid') ||\n      _.get(prevProps.model, 'apiGroup') !== _.get(model, 'apiGroup') ||\n      _.get(prevProps.model, 'path') !== _.get(model, 'path') ||\n      prevProps.impersonate !== impersonate ||\n      prevProps.readOnly !== readOnly\n    ) {\n      this._checkEditAccess();\n    }\n  }\n\n  _checkEditAccess() {\n    const { obj, model, impersonate, readOnly } = this.props;\n    if (readOnly) {\n      return;\n    }\n\n    // Only check RBAC if editing an existing resource. The form will always\n    // be enabled when creating a new application (git import / deploy image).\n    if (_.isEmpty(obj) || !model) {\n      this.setState({ allowed: true });\n      return;\n    }\n\n    const { name, namespace } = obj.metadata;\n    const resourceAttributes = {\n      group: model.apiGroup,\n      resource: model.plural,\n      verb: 'patch',\n      name,\n      namespace,\n    };\n    checkAccess(resourceAttributes, impersonate)\n      .then((resp) => this.setState({ allowed: resp.status.allowed }))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.warn('Error while check edit access for environment variables', e);\n      });\n  }\n\n  /**\n   * Callback for NVEditor update our state with new values\n   * @param env\n   * @param i\n   */\n  _updateEnvVars(env, i = 0, type = EnvType.ENV) {\n    const { onChange } = this.props;\n    const { currentEnvVars, containerType } = this.state;\n    const currentEnv = _.cloneDeep(currentEnvVars);\n    currentEnv.setFormattedVars(containerType, i, type, env.nameValuePairs);\n    this.setState({\n      currentEnvVars: currentEnv,\n      dirty: true,\n      success: null,\n    });\n    _.isFunction(onChange) && onChange(currentEnv.dispatchNewEnvironmentVariables());\n  }\n\n  /**\n   * Reset the page to initial state\n   * @private\n   */\n  _reload() {\n    const { rawEnvData } = this.props;\n    this.setState({\n      currentEnvVars: new CurrentEnvVars(rawEnvData),\n      dirty: false,\n      errorMessage: null,\n      stale: false,\n      success: null,\n    });\n  }\n\n  _selectContainer(containerName) {\n    const { rawEnvData } = this.props;\n    let containerIndex = _.findIndex(rawEnvData.containers, { name: containerName });\n    if (containerIndex !== -1) {\n      return this.setState({\n        containerIndex,\n        containerType: 'containers',\n      });\n    }\n    containerIndex = _.findIndex(rawEnvData.initContainers, { name: containerName });\n    if (containerIndex !== -1) {\n      return this.setState({\n        containerIndex,\n        containerType: 'initContainers',\n      });\n    }\n  }\n\n  /**\n   * Make it so. Patch the values for the env var changes made on the page.\n   * 1. Validate for dup keys\n   * 2. Throw out empty rows\n   * 3. Use add command if we are adding new env vars, and replace if we are modifying\n   * 4. Send the patch command down to REST, and update with response\n   *\n   * @param e\n   */\n  _saveChanges(e) {\n    const { envPath, obj, model, t } = this.props;\n    const { currentEnvVars } = this.state;\n\n    e.preventDefault();\n\n    const patches = currentEnvVars.getPatches(envPath);\n    const promise = k8sPatch(model, obj, patches);\n    this.handlePromise(promise).then((res) => {\n      this.setState({\n        currentEnvVars: new CurrentEnvVars(res, currentEnvVars.isContainerArray, envPath),\n        dirty: false,\n        errorMessage: null,\n        stale: false,\n        success: t('public~Successfully updated the environment variables.'),\n      });\n    });\n  }\n\n  dismissSuccess = () => {\n    this.setState({ success: null });\n  };\n\n  render() {\n    const {\n      errorMessage,\n      success,\n      inProgress,\n      currentEnvVars,\n      stale,\n      configMaps,\n      secrets,\n      containerIndex,\n      containerType,\n      allowed,\n    } = this.state;\n    const { rawEnvData, obj, addConfigMapSecret, useLoadingInline, t } = this.props;\n    const readOnly = this.props.readOnly || !allowed;\n\n    if (!configMaps || !currentEnvVars || !secrets) {\n      if (useLoadingInline) {\n        return <LoadingInline />;\n      }\n      return <LoadingBox />;\n    }\n\n    const envVar = currentEnvVars.getEnvVarByTypeAndIndex(containerType, containerIndex);\n\n    const containerDropdown = currentEnvVars.isContainerArray ? (\n      <ContainerSelect\n        currentKey={rawEnvData[containerType][containerIndex].name}\n        containers={getContainersObjectForDropdown(rawEnvData.containers)}\n        initContainers={getContainersObjectForDropdown(rawEnvData.initContainers)}\n        onChange={this.selectContainer}\n      />\n    ) : null;\n\n    const owners = _.get(obj.metadata, 'ownerReferences', []).map((o, i) => (\n      <ResourceLink\n        key={i}\n        kind={referenceForOwnerRef(o)}\n        name={o.name}\n        namespace={obj.metadata.namespace}\n        title={o.uid}\n        inline\n      />\n    ));\n    const containerVars = (\n      <>\n        {readOnly && !_.isEmpty(owners) && (\n          <div className=\"co-toolbar__group co-toolbar__group--left\">\n            <Alert\n              isInline\n              className=\"co-alert col-md-11 col-xs-10\"\n              variant=\"info\"\n              title={t('public~Environment variables set from parent')}\n            >\n              {t('public~View environment for resource')}{' '}\n              {owners.length > 1 ? <>t('public~owners:') {owners}</> : owners}\n            </Alert>\n          </div>\n        )}\n        {currentEnvVars.isContainerArray && (\n          <div className=\"co-toolbar__group co-toolbar__group--left\">\n            <div className=\"co-toolbar__item\">\n              {containerType === 'containers'\n                ? t('public~Container:')\n                : t('public~Init container:')}\n            </div>\n            <div className=\"co-toolbar__item\">{containerDropdown}</div>\n          </div>\n        )}\n        <div className={classNames({ 'co-m-pane__body-group': !currentEnvVars.isCreate })}>\n          {!currentEnvVars.isCreate && (\n            <h3 className=\"co-section-heading-tertiary\">\n              {t('public~Single values (env)')}\n              {!readOnly && (\n                <FieldLevelHelp>\n                  <Trans t={t} ns=\"public\">\n                    Define environment variables as key-value pairs to store configuration settings.\n                    You can enter text or add values from a ConfigMap or Secret. Drag and drop\n                    environment variables to change the order in which they are run. A variable can\n                    reference any other variables that come before it in the list, for example{' '}\n                    <code className=\"co-code\">FULLDOMAIN = $(SUBDOMAIN).example.com</code>.\n                  </Trans>\n                </FieldLevelHelp>\n              )}\n            </h3>\n          )}\n          <NameValueEditorComponent\n            nameValueId={containerIndex}\n            nameValuePairs={envVar[EnvType.ENV]}\n            updateParentData={this.updateEnvVars}\n            nameString={t('public~Name')}\n            readOnly={readOnly}\n            allowSorting={true}\n            configMaps={configMaps}\n            secrets={secrets}\n            addConfigMapSecret={addConfigMapSecret}\n          />\n        </div>\n        {currentEnvVars.isContainerArray && (\n          <div className=\"co-m-pane__body-group environment-buttons\">\n            <h3 className=\"co-section-heading-tertiary\">\n              {t('public~All values from existing ConfigMaps or Secrets (envFrom)')}\n              {!readOnly && (\n                <FieldLevelHelp>\n                  <>\n                    {t(\n                      'public~Add new values by referencing an existing ConfigMap or Secret. Drag and drop environment variables within this section to change the order in which they are run.',\n                    )}\n                    <br />\n                    <strong>{t('public~Note:')}</strong>{' '}\n                    {t(\n                      'public~If identical values exist in both lists, the single value in the list above will take precedence.',\n                    )}\n                  </>\n                </FieldLevelHelp>\n              )}\n            </h3>\n            <EnvFromEditorComponent\n              nameValueId={containerIndex}\n              nameValuePairs={envVar[EnvType.ENV_FROM]}\n              updateParentData={this.updateEnvVars}\n              readOnly={readOnly}\n              configMaps={configMaps}\n              secrets={secrets}\n            />\n          </div>\n        )}\n      </>\n    );\n\n    return (\n      <div className={classNames({ 'co-m-pane__body': !currentEnvVars.isCreate })}>\n        {containerVars}\n        {!currentEnvVars.isCreate && (\n          <div className=\"co-m-pane__body-group\">\n            <div className=\"pf-v5-c-form environment-buttons\">\n              {errorMessage && (\n                <Alert isInline className=\"co-alert\" variant=\"danger\" title={errorMessage} />\n              )}\n              {stale && (\n                <Alert\n                  isInline\n                  className=\"co-alert\"\n                  variant=\"info\"\n                  title={t('public~The information on this page is no longer current.')}\n                >\n                  {t('public~Click Reload to update and lose edits, or Save Changes to overwrite.')}\n                </Alert>\n              )}\n              {success && (\n                <Alert\n                  isInline\n                  className=\"co-alert\"\n                  variant=\"success\"\n                  title={success}\n                  actionClose={<AlertActionCloseButton onClose={this.dismissSuccess} />}\n                />\n              )}\n              {!readOnly && (\n                <ActionGroup>\n                  <Button\n                    isDisabled={inProgress}\n                    type=\"submit\"\n                    variant=\"primary\"\n                    onClick={this.saveChanges}\n                    data-test=\"environment-save\"\n                  >\n                    {t('public~Save')}\n                  </Button>\n                  <Button\n                    isDisabled={inProgress}\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={this.reload}\n                  >\n                    {t('public~Reload')}\n                  </Button>\n                </ActionGroup>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst EnvironmentPage_ = connect(stateToProps)(UnconnectedEnvironmentPage);\nexport const EnvironmentPage = withTranslation()(EnvironmentPage_);\n\nEnvironmentPage.propTypes = {\n  obj: PropTypes.object,\n  rawEnvData: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  envPath: PropTypes.array.isRequired,\n  readOnly: PropTypes.bool.isRequired,\n  onChange: PropTypes.func,\n  addConfigMapSecret: PropTypes.bool,\n  useLoadingInline: PropTypes.bool,\n};\nEnvironmentPage.defaultProps = {\n  obj: {},\n  rawEnvData: {},\n  addConfigMapSecret: true,\n};\n"],"sourceRoot":""}