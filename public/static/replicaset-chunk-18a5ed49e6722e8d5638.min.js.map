{"version":3,"sources":["webpack:///./public/components/replicaset.jsx"],"names":["Details","obj","replicaSet","revision","t","className","text","resource","showPodSelector","showNodeSelector","showTolerations","containers","spec","template","heading","EnvironmentPage","props","loader","then","c","envPath","environmentComponent","rawEnvData","readOnly","ReplicaSetPods","showNodes","details","editYaml","pods","envEditor","events","ReplicaSetsDetailsPage","customActionMenu","kindObj","context","actions","options","loaded","variant","DROPDOWN","pages","kind","tableColumnClasses","columnClass","ReplicaSetTableRow","name","metadata","namespace","columnID","to","title","count1","status","replicas","count2","labels","timestamp","creationTimestamp","ReplicaSetsList","Header","sortField","transforms","id","sortFunc","Row","virtualize","ReplicaSetsPage","canCreate","ListComponent"],"mappings":"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","file":"replicaset-chunk-18a5ed49e6722e8d5638.min.js","sourcesContent":["// TODO file should be renamed replica-set.jsx to match convention\n\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport {\n  Kebab,\n  ContainerTable,\n  navFactory,\n  SectionHeading,\n  ResourceSummary,\n  ResourcePodCount,\n  AsyncComponent,\n  ResourceLink,\n  resourcePath,\n  LabelList,\n  OwnerReferences,\n  Timestamp,\n  PodsComponent,\n  RuntimeClass,\n} from './utils';\nimport { ResourceEventStream } from './events';\nimport { VolumesTable } from './volumes-table';\nimport {\n  LazyActionMenu,\n  ActionServiceProvider,\n  ActionMenu,\n  ActionMenuVariant,\n} from '@console/shared/src';\nimport { PodDisruptionBudgetField } from '@console/app/src/components/pdb/PodDisruptionBudgetField';\n\nimport { referenceFor, referenceForModel } from '../module/k8s';\n\nconst Details = ({ obj: replicaSet }) => {\n  const revision = _.get(replicaSet, [\n    'metadata',\n    'annotations',\n    'deployment.kubernetes.io/revision',\n  ]);\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~ReplicaSet details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={replicaSet} showPodSelector showNodeSelector showTolerations>\n              {revision && (\n                <>\n                  <dt>{t('public~Deployment revision')}</dt>\n                  <dd>{revision}</dd>\n                </>\n              )}\n            </ResourceSummary>\n          </div>\n          <div className=\"col-md-6\">\n            <dl className=\"co-m-pane__details\">\n              <ResourcePodCount resource={replicaSet} />\n              <RuntimeClass obj={replicaSet} />\n              <PodDisruptionBudgetField obj={replicaSet} />\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Containers')} />\n        <ContainerTable containers={replicaSet.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={replicaSet} heading={t('public~Volumes')} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst environmentComponent = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nconst ReplicaSetPods = (props) => <PodsComponent {...props} showNodes />;\n\nconst { details, editYaml, pods, envEditor, events } = navFactory;\nconst ReplicaSetsDetailsPage = (props) => {\n  const customActionMenu = (kindObj, obj) => {\n    const resourceKind = referenceForModel(kindObj);\n    const context = { [resourceKind]: obj };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  return (\n    <DetailsPage\n      {...props}\n      customActionMenu={customActionMenu}\n      pages={[\n        details(Details),\n        editYaml(),\n        pods(ReplicaSetPods),\n        envEditor(environmentComponent),\n        events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n\nconst kind = 'ReplicaSet';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst ReplicaSetTableRow = ({ obj }) => {\n  const { t } = useTranslation();\n  const resourceKind = referenceFor(obj);\n  const context = { [resourceKind]: obj };\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`}\n          title=\"pods\"\n        >\n          {t('public~{{count1}} of {{count2}} pods', {\n            count1: obj.status.replicas || 0,\n            count2: obj.spec.replicas,\n          })}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <OwnerReferences resource={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nconst ReplicaSetsList = (props) => {\n  const { t } = useTranslation();\n  const ReplicaSetTableHeader = () => [\n    {\n      title: t('public~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('public~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      id: 'namespace',\n    },\n    {\n      title: t('public~Status'),\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('public~Labels'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('public~Owner'),\n      sortField: 'metadata.ownerReferences[0].name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('public~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ReplicaSets')}\n      Header={ReplicaSetTableHeader}\n      Row={ReplicaSetTableRow}\n      virtualize\n    />\n  );\n};\nconst ReplicaSetsPage = (props) => {\n  const { canCreate = true } = props;\n  return (\n    <ListPage canCreate={canCreate} kind=\"ReplicaSet\" ListComponent={ReplicaSetsList} {...props} />\n  );\n};\n\nexport { ReplicaSetsList, ReplicaSetsPage, ReplicaSetsDetailsPage };\n"],"sourceRoot":""}