{"version":3,"sources":["webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/cluster-dashboard.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/details-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/inventory-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/activity-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/getting-started/getting-started-section.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/getting-started/cluster-setup-getting-started-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/getting-started/cluster-setup-identity-provider-link.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/getting-started/cluster-setup-alert-receiver-link.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/getting-started/explore-admin-features-getting-started-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/getting-started/constants.ts","webpack:///./public/components/dashboard/dashboards-page/dashboards.tsx","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/utils.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/context.ts","webpack:///./packages/console-shared/src/components/dashboard/status-card/OperatorStatusBody.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx","webpack:///./packages/console-shared/src/hooks/oauth.ts"],"names":["mainCards","Card","leftCards","rightCards","ClusterDashboard","infrastructure","infrastructureLoaded","infrastructureError","consoleCapabilityGettingStartedBannerIsEnabled","CONSOLE_CAPABILITY_GETTINGSTARTEDBANNER_IS_ENABLED","context","Provider","value","ClusterVersion","cv","t","desiredVersion","lastVersion","canUpgrade","Updating","className","to","UpdatesAvailable","clusterVersionResource","kind","namespaced","name","isList","DetailsCard","watchK8sResource","stopWatchK8sResource","openshiftFlag","OPENSHIFT","k8sVersion","setK8sVersion","k8sVersionError","setK8sVersionError","clusterVersionData","clusterVersionLoaded","clusterVersionError","detailItemsExtensions","customDetailItemsExtensions","version","fetch","error","serviceLevelTitle","clusterID","openShiftVersion","cvChannel","infrastructurePlatform","infrastuctureApiUrl","k8sGitVersion","isClickable","isSelectable","actions","hasNoOffset","title","isLoading","undefined","valueClassName","window","SERVER_FLAGS","branding","text","href","loading","map","e","Component","properties","component","key","uid","wrapper","children","props","ClusterInventoryItem","model","resolvedMapper","mapperLoader","additionalResources","expandedComponent","mainResource","crd","prop","getFirehoseResource","otherResources","mapper","setMapper","resourceData","resourceLoaded","resourceLoadError","resources","then","res","catch","console","additionalResourcesData","additionalResourcesLoaded","additionalResourcesLoadError","resourcesData","resourcesLoaded","resourcesLoadError","Object","keys","filter","optional","every","loaded","forEach","data","some","loadError","ExpandedComponent","loader","resource","dataTest","InventoryCard","itemExtensions","dynamicItemExtensions","replacementExtensions","dynamicReplacementExtensions","inventoryExtensions","mergedItems","mergeItems","replacements","item","find","r","dynamicMergedItems","mergeDynamicItems","dynamicReplacements","hasGutter","eventsResource","RecentEvent","events","moreLink","OngoingActivity","k8s","models","getIn","watchPrometheus","stopWatchPrometheusQuery","prometheusResults","resourceActivityExtensions","dynamicResourceActivityExtensions","resourceActivities","get","k8sResource","prometheusActivities","dynamicPrometheusActivities","a","index","queries","q","allResourceActivities","isActivity","timestamp","getTimestamp","allPrometheusActivities","queryResults","results","uniqueProp","queriesLoaded","ActivityCard","GettingStartedSection","showState","setShowState","showStateLoaded","isGettingStartedSectionOpen","setIsGettingStartedSectionOpen","SHOW","isOpen","setIsOpen","featured","ClusterSetupGettingStartedCard","identityProviderLink","links","Boolean","length","moreLinkURL","postInstallationMachineConfigurationTasks","id","external","icon","color","titleColor","description","useIdentityProviderLink","canEdit","oauthData","oauthLoaded","oauthLoadError","spec","identityProviders","useAlertReceiverLink","group","apiGroup","plural","namespace","verb","secret","watch","hasIncompleteReceivers","config","ExploreAdminFeaturesGettingStartedCard","canListPackageManifest","CAN_LIST_PACKAGE_MANIFEST","canListOperatorGroup","CAN_LIST_OPERATOR_GROUP","lightspeedIsAvailable","LIGHTSPEED_IS_AVAILABLE_TO_INSTALL","showLightSpeedLink","parsed","major","minor","USER_SETTINGS_KEY","getCardsOnPosition","cards","dynamicCards","position","c","span","getPluginTabPages","tabs","navSection","firstTabId","tab","tabCards","MAIN","LEFT","RIGHT","mapStateToProps","state","kindsInFlight","k8sModels","DashboardsPage","tabExtensions","cardExtensions","dynamicTabExtensions","dynamicCardExtensions","location","pluginPages","allPages","nameKey","badge","page","pathname","titleProviderValues","telemetryPrefix","titlePrefix","size","detail","pages","noStatusBox","useK8sGet","opts","setData","setLoaded","setLoadError","uniqueResource","prefix","OperatorRow","operatorStatus","isResolved","LoadingComponent","ResolvedComponent","operators","metadata","OperatorsPopup","operatorExtensions","dynamicOperatorSubsystems","sections","o","operatorResources","reduce","acc","getOperatorsWithStatuses","linkTo","viewAllLink","Row","operatorRowLoader","reverse","OperatorHealthItem","healthStatuses","health","NOT_AVAILABLE","LOADING","operatorStatuses","OK","importantStatuses","status","count","operatorsHealth","details","detailMessage","popupTitle","URLHealthItem","watchURL","stopWatchURL","urlResults","subsystem","modelExists","additionalResource","url","healthResult","healthResultError","k8sResult","healthState","healthHandler","message","popupBodyContent","popupComponent","hide","PrometheusHealthItem","response","popupClassname","popupKeepOnOutsideClick","responses","ResourceHealthItem","resourcesWithNamespace","imageManifestVuln","resourcesResult","ClusterDashboardContext","OperatorsSection","sortedOperatorStatuses","sort","b","localeCompare","operatorsHealthy","RowLoading","firstColumn","operatorStatusLength","secondColumn","toLowerCase","cvResource","DashboardAlerts","labelSelector","hasCVResource","CLUSTER_VERSION","alerts","cvLoaded","showClusterUpdate","Icon","alert","rule","StatusCard","subsystemExtensions","dynamicSubsystemExtensions","subsystems","s","filterSubsystems","popup","Promise","resolve","operatorSubsystemIndex","findIndex","healthItems","push","disallowedControlPlaneTopology","includes","controlPlaneTopology","operatorSubsystems","splice","useCanEditIdentityProviders","useOAuthData"],"mappings":"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","file":"dashboards-chunk-0107f88f0d6f23f763f2.min.js","sourcesContent":["import * as React from 'react';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { FLAGS } from '@console/shared';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { StatusCard } from './status-card';\nimport { DetailsCard } from './details-card';\nimport { InventoryCard } from './inventory-card';\nimport { UtilizationCard } from './utilization-card';\nimport { ActivityCard } from './activity-card';\nimport { useK8sGet } from '../../../utils/k8s-get-hook';\nimport { InfrastructureModel } from '../../../../models';\nimport { K8sResourceKind } from '../../../../module/k8s';\nimport { ClusterDashboardContext } from './context';\n\nimport { GettingStartedSection } from './getting-started/getting-started-section';\n\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nexport const ClusterDashboard: React.FC<{}> = () => {\n  const [infrastructure, infrastructureLoaded, infrastructureError] = useK8sGet<K8sResourceKind>(\n    InfrastructureModel,\n    'cluster',\n  );\n\n  const consoleCapabilityGettingStartedBannerIsEnabled = useFlag(\n    FLAGS.CONSOLE_CAPABILITY_GETTINGSTARTEDBANNER_IS_ENABLED,\n  );\n\n  const context = {\n    infrastructure,\n    infrastructureLoaded,\n    infrastructureError,\n  };\n\n  return (\n    <ClusterDashboardContext.Provider value={context}>\n      <Dashboard>\n        {consoleCapabilityGettingStartedBannerIsEnabled && <GettingStartedSection />}\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n      </Dashboard>\n    </ClusterDashboardContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardBody, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport {\n  BlueArrowCircleUpIcon,\n  FLAGS,\n  getInfrastructureAPIURL,\n  getInfrastructurePlatform,\n  isSingleNode,\n  useFlag,\n  useCanClusterUpgrade,\n} from '@console/shared';\nimport { ErrorBoundaryInline } from '@console/shared/src/components/error';\nimport {\n  useResolvedExtensions,\n  isOverviewDetailItem,\n  isCustomOverviewDetailItem,\n  WatchK8sResource,\n  CustomOverviewDetailItem as CustomOverviewDetailItemType,\n  OverviewDetailItem as OverviewDetailItemType,\n} from '@console/dynamic-plugin-sdk';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport { OverviewDetailItem } from '@openshift-console/plugin-shared/src';\n\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { ClusterVersionModel } from '../../../../models';\nimport {\n  ServiceLevel,\n  useServiceLevelTitle,\n  ServiceLevelText,\n  ServiceLevelLoading,\n} from '../../../utils/service-level';\nimport {\n  referenceForModel,\n  getOpenShiftVersion,\n  getK8sGitVersion,\n  ClusterVersionKind,\n  getClusterID,\n  getDesiredClusterVersion,\n  getLastCompletedUpdate,\n  getClusterUpdateStatus,\n  getClusterVersionChannel,\n  ClusterUpdateStatus,\n  getOCMLink,\n} from '../../../../module/k8s';\nimport { flagPending } from '../../../../reducers/features';\nimport { ExternalLink, LoadingInline } from '../../../utils';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { ClusterDashboardContext } from './context';\n\nconst ClusterVersion: React.FC<ClusterVersionProps> = ({ cv }) => {\n  const { t } = useTranslation();\n  const desiredVersion = getDesiredClusterVersion(cv);\n  const lastVersion = getLastCompletedUpdate(cv);\n  const canUpgrade = useCanClusterUpgrade();\n  const status = getClusterUpdateStatus(cv);\n\n  switch (status) {\n    case ClusterUpdateStatus.Updating:\n      return (\n        <>\n          <span className=\"co-select-to-copy\">{desiredVersion}</span>\n          <div>\n            <Link to=\"/settings/cluster/\">\n              <InProgressIcon className=\"co-icon-and-text__icon\" />\n              {t('public~Updating')}\n            </Link>\n          </div>\n        </>\n      );\n    case ClusterUpdateStatus.UpdatesAvailable:\n      return (\n        <>\n          <span className=\"co-select-to-copy\">{desiredVersion}</span>\n          {canUpgrade && (\n            <div>\n              <Link to=\"/settings/cluster?showVersions\" className=\"co-icon-space-l\">\n                <BlueArrowCircleUpIcon className=\"co-icon-space-r\" />\n                {t('public~Update cluster')}\n              </Link>\n            </div>\n          )}\n        </>\n      );\n    default:\n      return lastVersion ? (\n        <span className=\"co-select-to-copy\">{lastVersion}</span>\n      ) : (\n        <span className=\"text-secondary\">{t('public~Not available')}</span>\n      );\n  }\n};\n\nconst clusterVersionResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nexport const DetailsCard = withDashboardResources(\n  ({ watchK8sResource, stopWatchK8sResource }: DetailsCardProps) => {\n    const { t } = useTranslation();\n    const openshiftFlag = useFlag(FLAGS.OPENSHIFT);\n    const { infrastructure, infrastructureLoaded, infrastructureError } = React.useContext(\n      ClusterDashboardContext,\n    );\n    const [k8sVersion, setK8sVersion] = React.useState<Response>();\n    const [k8sVersionError, setK8sVersionError] = React.useState();\n    const [clusterVersionData, clusterVersionLoaded, clusterVersionError] = useK8sWatchResource<\n      ClusterVersionKind\n    >(clusterVersionResource);\n    const [detailItemsExtensions] = useResolvedExtensions<OverviewDetailItemType>(\n      isOverviewDetailItem,\n    );\n    const [customDetailItemsExtensions] = useResolvedExtensions<CustomOverviewDetailItemType>(\n      isCustomOverviewDetailItem,\n    );\n\n    React.useEffect(() => {\n      if (flagPending(openshiftFlag)) {\n        return;\n      }\n      const fetchK8sVersion = async () => {\n        try {\n          const version = await fetch('version');\n          setK8sVersion(version);\n        } catch (error) {\n          setK8sVersionError(error);\n        }\n      };\n      fetchK8sVersion();\n    }, [openshiftFlag, watchK8sResource, stopWatchK8sResource]);\n    const serviceLevelTitle = useServiceLevelTitle();\n\n    const clusterID = getClusterID(clusterVersionData);\n    const openShiftVersion = getOpenShiftVersion(clusterVersionData);\n    const cvChannel = getClusterVersionChannel(clusterVersionData);\n\n    const infrastructurePlatform = getInfrastructurePlatform(infrastructure);\n    const infrastuctureApiUrl = getInfrastructureAPIURL(infrastructure);\n\n    const k8sGitVersion = getK8sGitVersion(k8sVersion);\n\n    return (\n      <Card data-test-id=\"details-card\" isClickable isSelectable>\n        <CardHeader\n          actions={{\n            actions: (\n              <>\n                <Link to=\"/settings/cluster/\" data-test=\"details-card-view-settings\">\n                  {t('public~View settings')}\n                </Link>\n              </>\n            ),\n            hasNoOffset: false,\n            className: 'co-overview-card__actions',\n          }}\n        >\n          <CardTitle>{t('public~Details')}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          {flagPending(openshiftFlag) ? (\n            <LoadingInline />\n          ) : (\n            <DetailsBody>\n              {openshiftFlag ? (\n                <>\n                  <OverviewDetailItem\n                    title={t('public~Cluster API address')}\n                    isLoading={!infrastructureLoaded}\n                    error={\n                      !!infrastructureError || (infrastructure && !infrastuctureApiUrl)\n                        ? t('public~Not available')\n                        : undefined\n                    }\n                    valueClassName=\"co-select-to-copy\"\n                  >\n                    {infrastuctureApiUrl}\n                  </OverviewDetailItem>\n                  <OverviewDetailItem\n                    title={t('public~Cluster ID')}\n                    error={\n                      !!clusterVersionError || (clusterVersionLoaded && !clusterID)\n                        ? t('public~Not available')\n                        : undefined\n                    }\n                    isLoading={!clusterVersionLoaded}\n                  >\n                    <div className=\"co-select-to-copy\">{clusterID}</div>\n                    {window.SERVER_FLAGS.branding !== 'okd' &&\n                      window.SERVER_FLAGS.branding !== 'azure' && (\n                        <ExternalLink\n                          text={t('public~OpenShift Cluster Manager')}\n                          href={getOCMLink(clusterID)}\n                        />\n                      )}\n                  </OverviewDetailItem>\n                  <OverviewDetailItem\n                    title={t('public~Infrastructure provider')}\n                    error={\n                      !!infrastructureError || (infrastructure && !infrastructurePlatform)\n                        ? t('public~Not available')\n                        : undefined\n                    }\n                    isLoading={!infrastructureLoaded}\n                    valueClassName=\"co-select-to-copy\"\n                  >\n                    {infrastructurePlatform}\n                  </OverviewDetailItem>\n                  <OverviewDetailItem\n                    title={t('public~OpenShift version')}\n                    error={\n                      !!clusterVersionError || (clusterVersionLoaded && !openShiftVersion)\n                        ? t('public~Not available')\n                        : undefined\n                    }\n                    isLoading={!clusterVersionLoaded}\n                  >\n                    <ClusterVersion cv={clusterVersionData} />\n                  </OverviewDetailItem>\n\n                  <ServiceLevel\n                    clusterID={clusterID}\n                    loading={\n                      <OverviewDetailItem title={serviceLevelTitle}>\n                        <ServiceLevelLoading />\n                      </OverviewDetailItem>\n                    }\n                  >\n                    <OverviewDetailItem title={serviceLevelTitle}>\n                      {/* Service Level handles loading and error state */}\n                      <ServiceLevelText clusterID={clusterID} />\n                    </OverviewDetailItem>\n                  </ServiceLevel>\n\n                  <OverviewDetailItem\n                    title={t('public~Update channel')}\n                    isLoading={!clusterVersionLoaded && !clusterVersionError}\n                    error={\n                      !!clusterVersionError || (clusterVersionLoaded && !cvChannel)\n                        ? t('public~Not available')\n                        : undefined\n                    }\n                    valueClassName=\"co-select-to-copy\"\n                  >\n                    {cvChannel}\n                  </OverviewDetailItem>\n                  {isSingleNode(infrastructure) && (\n                    <OverviewDetailItem\n                      title={t('public~Control plane high availability')}\n                      isLoading={false}\n                      valueClassName=\"co-select-to-copy\"\n                    >\n                      {t('public~No (single control plane node)')}\n                    </OverviewDetailItem>\n                  )}\n                  {detailItemsExtensions.map((e) => {\n                    const Component = e.properties.component;\n                    return (\n                      <ErrorBoundaryInline\n                        key={e.uid}\n                        wrapper={({ children }) => (\n                          <OverviewDetailItem title=\"\">{children}</OverviewDetailItem>\n                        )}\n                      >\n                        <Component />\n                      </ErrorBoundaryInline>\n                    );\n                  })}\n                  {customDetailItemsExtensions.map((e) => {\n                    const { component: Component, error, isLoading, ...props } = e.properties;\n                    return (\n                      <ErrorBoundaryInline\n                        key={e.uid}\n                        wrapper={({ children }) => (\n                          <OverviewDetailItem title=\"\">{children}</OverviewDetailItem>\n                        )}\n                      >\n                        <OverviewDetailItem {...props} error={error?.()} isLoading={isLoading?.()}>\n                          <Component />\n                        </OverviewDetailItem>\n                      </ErrorBoundaryInline>\n                    );\n                  })}\n                </>\n              ) : (\n                <OverviewDetailItem\n                  key=\"kubernetes\"\n                  title={t('public~Kubernetes version')}\n                  error={\n                    !!k8sVersionError || (k8sVersion && !k8sGitVersion)\n                      ? t('public~Not available')\n                      : undefined\n                  }\n                  isLoading={!k8sVersion}\n                  valueClassName=\"co-select-to-copy\"\n                >\n                  {k8sGitVersion}\n                </OverviewDetailItem>\n              )}\n            </DetailsBody>\n          )}\n        </CardBody>\n      </Card>\n    );\n  },\n);\n\ntype DetailsCardProps = DashboardItemProps & {\n  openshiftFlag: boolean;\n};\n\ntype ClusterVersionProps = {\n  cv: ClusterVersionKind;\n};\n","import * as React from 'react';\nimport { Card, CardBody, CardHeader, CardTitle, Stack, StackItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ResourceInventoryItem,\n  StatusGroupMapper,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { ErrorBoundary } from '@console/shared/src/components/error';\n\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { K8sKind, referenceForModel, K8sResourceCommon } from '../../../../module/k8s';\nimport { AsyncComponent } from '../../../utils';\nimport {\n  useExtensions,\n  DashboardsOverviewInventoryItem,\n  DashboardsOverviewInventoryItemReplacement,\n  isDashboardsOverviewInventoryItem,\n  isDashboardsOverviewInventoryItemReplacement,\n  LazyLoader,\n} from '@console/plugin-sdk';\nimport {\n  useResolvedExtensions,\n  DashboardsOverviewInventoryItem as DynamicDashboardsOverviewInventoryItem,\n  DashboardsOverviewInventoryItemReplacement as DynamicDashboardsOverviewInventoryItemReplacement,\n  isDashboardsOverviewInventoryItem as isDynamicDashboardsOverviewInventoryItem,\n  isDashboardsOverviewInventoryItemReplacement as isDynamicDashboardsOverviewInventoryItemReplacement,\n  ResolvedExtension,\n  WatchK8sResources,\n  ClusterOverviewInventoryItem,\n  isClusterOverviewInventoryItem,\n} from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResource, useK8sWatchResources } from '../../../utils/k8s-watch-hook';\n\nconst mergeItems = (\n  items: DashboardsOverviewInventoryItem[],\n  replacements: DashboardsOverviewInventoryItemReplacement[],\n) =>\n  items.map(\n    (item) => replacements.find((r) => r.properties.model === item.properties.model) || item,\n  );\n\nconst mergeDynamicItems = (\n  dynamicItems: ResolvedExtension<DynamicDashboardsOverviewInventoryItem>[],\n  dynamicReplacements: ResolvedExtension<DynamicDashboardsOverviewInventoryItemReplacement>[],\n) =>\n  dynamicItems.map(\n    (item) => dynamicReplacements.find((r) => r.properties.model === item.properties.model) || item,\n  );\n\nconst getFirehoseResource = (model: K8sKind) => ({\n  isList: true,\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  prop: 'resource',\n});\n\nconst ClusterInventoryItem = withDashboardResources<ClusterInventoryItemProps>(\n  React.memo(\n    ({\n      model,\n      resolvedMapper,\n      mapperLoader,\n      additionalResources,\n      expandedComponent,\n    }: ClusterInventoryItemProps) => {\n      const mainResource = React.useMemo(() => getFirehoseResource(model), [model]);\n      const otherResources = React.useMemo(() => additionalResources || {}, [additionalResources]);\n      const [mapper, setMapper] = React.useState<StatusGroupMapper>();\n      const [resourceData, resourceLoaded, resourceLoadError] = useK8sWatchResource<\n        K8sResourceCommon[]\n      >(mainResource);\n      const resources = useK8sWatchResources(otherResources);\n      React.useEffect(() => {\n        mapperLoader &&\n          mapperLoader()\n            .then((res) => setMapper(() => res))\n            .catch(() => {\n              // eslint-disable-next-line no-console\n              console.error('Mapper does not exist in module');\n            });\n      }, [mapperLoader]);\n\n      const [\n        additionalResourcesData,\n        additionalResourcesLoaded,\n        additionalResourcesLoadError,\n      ] = React.useMemo(() => {\n        const resourcesData = {};\n        let resourcesLoaded = true;\n        let resourcesLoadError = false;\n\n        if (additionalResources) {\n          resourcesLoaded = Object.keys(additionalResources)\n            .filter((key) => !additionalResources[key].optional)\n            .every((key) => resources[key].loaded);\n          Object.keys(additionalResources).forEach((key) => {\n            resourcesData[key] = resources[key].data;\n          });\n          resourcesLoadError = Object.keys(additionalResources)\n            .filter((key) => !additionalResources[key].optional)\n            .some((key) => !!resources[key].loadError);\n        }\n\n        return [resourcesData, resourcesLoaded, resourcesLoadError];\n      }, [additionalResources, resources]);\n\n      const ExpandedComponent = React.useCallback(\n        () => (\n          <AsyncComponent\n            loader={expandedComponent}\n            resource={resourceData}\n            additionalResources={additionalResourcesData}\n          />\n        ),\n        [resourceData, additionalResourcesData, expandedComponent],\n      );\n\n      return (\n        <ResourceInventoryItem\n          isLoading={!resourceLoaded || !additionalResourcesLoaded}\n          error={!!resourceLoadError || additionalResourcesLoadError}\n          kind={model}\n          resources={resourceData}\n          mapper={mapper || resolvedMapper}\n          additionalResources={additionalResourcesData}\n          ExpandedComponent={expandedComponent ? ExpandedComponent : null}\n          dataTest=\"resource-inventory-item\"\n        />\n      );\n    },\n  ),\n);\n\nexport const InventoryCard = () => {\n  const itemExtensions = useExtensions<DashboardsOverviewInventoryItem>(\n    isDashboardsOverviewInventoryItem,\n  );\n  const [dynamicItemExtensions] = useResolvedExtensions<DynamicDashboardsOverviewInventoryItem>(\n    isDynamicDashboardsOverviewInventoryItem,\n  );\n\n  const replacementExtensions = useExtensions<DashboardsOverviewInventoryItemReplacement>(\n    isDashboardsOverviewInventoryItemReplacement,\n  );\n  const [dynamicReplacementExtensions] = useResolvedExtensions<\n    DynamicDashboardsOverviewInventoryItemReplacement\n  >(isDynamicDashboardsOverviewInventoryItemReplacement);\n\n  const [inventoryExtensions] = useResolvedExtensions<ClusterOverviewInventoryItem>(\n    isClusterOverviewInventoryItem,\n  );\n\n  const mergedItems = React.useMemo(() => mergeItems(itemExtensions, replacementExtensions), [\n    itemExtensions,\n    replacementExtensions,\n  ]);\n\n  const dynamicMergedItems = React.useMemo(\n    () => mergeDynamicItems(dynamicItemExtensions, dynamicReplacementExtensions),\n    [dynamicItemExtensions, dynamicReplacementExtensions],\n  );\n\n  const { t } = useTranslation();\n\n  return (\n    <Card data-test-id=\"inventory-card\">\n      <CardHeader>\n        <CardTitle>{t('public~Cluster inventory')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Stack hasGutter>\n          {mergedItems.map((item) => (\n            <StackItem key={item.properties.model.kind}>\n              <ClusterInventoryItem\n                model={item.properties.model}\n                mapperLoader={item.properties.mapper}\n                additionalResources={item.properties.additionalResources}\n                expandedComponent={item.properties.expandedComponent}\n              />\n            </StackItem>\n          ))}\n          {dynamicMergedItems.map((item) => (\n            <StackItem key={item.properties.model.kind}>\n              <ClusterInventoryItem\n                model={item.properties.model}\n                resolvedMapper={item.properties.mapper}\n                additionalResources={item.properties.additionalResources}\n              />\n            </StackItem>\n          ))}\n          {inventoryExtensions.map(({ uid, properties: { component: Component } }) => (\n            <ErrorBoundary key={uid}>\n              <StackItem>\n                <Component />\n              </StackItem>\n            </ErrorBoundary>\n          ))}\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\ntype ClusterInventoryItemProps = DashboardItemProps & {\n  model: K8sKind;\n  mapperLoader?: () => Promise<StatusGroupMapper>;\n  resolvedMapper?: StatusGroupMapper;\n  additionalResources?: WatchK8sResources<any>;\n  expandedComponent?: LazyLoader;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Map as ImmutableMap } from 'immutable';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { EventModel } from '../../../../models';\nimport { FirehoseResource, FirehoseResult } from '../../../utils';\nimport { EventKind, K8sKind } from '../../../../module/k8s';\nimport ActivityBody, {\n  RecentEventsBody,\n  OngoingActivityBody,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport {\n  useExtensions,\n  DashboardsOverviewResourceActivity,\n  DashboardsOverviewPrometheusActivity,\n  isDashboardsOverviewResourceActivity,\n  isDashboardsOverviewPrometheusActivity,\n} from '@console/plugin-sdk';\nimport {\n  useResolvedExtensions,\n  DashboardsOverviewResourceActivity as DynamicDashboardsOverviewResourceActivity,\n  DashboardsOverviewPrometheusActivity as DynamicDashboardsOverviewPrometheusActivity,\n  isDashboardsOverviewResourceActivity as isDynamicDashboardsOverviewResourceActivity,\n  isDashboardsOverviewPrometheusActivity as isDynamicDashboardsOverviewPrometheusActivity,\n  ResolvedExtension,\n} from '@console/dynamic-plugin-sdk';\nimport { uniqueResource } from './utils';\nimport { PrometheusResponse } from '../../../graphs';\nimport { Link } from 'react-router-dom-v5-compat';\n\nconst eventsResource: FirehoseResource = { isList: true, kind: EventModel.kind, prop: 'events' };\nconst viewEvents = '/k8s/all-namespaces/events';\n\nconst RecentEvent = withDashboardResources(\n  ({ watchK8sResource, stopWatchK8sResource, resources }) => {\n    React.useEffect(() => {\n      watchK8sResource(eventsResource);\n      return () => {\n        stopWatchK8sResource(eventsResource);\n      };\n    }, [watchK8sResource, stopWatchK8sResource]);\n    return (\n      <RecentEventsBody\n        events={resources.events as FirehoseResult<EventKind[]>}\n        moreLink={viewEvents}\n      />\n    );\n  },\n);\n\nconst mapStateToProps = ({ k8s }) => ({\n  models: k8s.getIn(['RESOURCES', 'models']),\n});\n\nconst OngoingActivity = connect(mapStateToProps)(\n  withDashboardResources(\n    ({\n      watchK8sResource,\n      stopWatchK8sResource,\n      resources,\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      prometheusResults,\n      models,\n    }: DashboardItemProps & OngoingActivityProps) => {\n      const resourceActivityExtensions = useExtensions<DashboardsOverviewResourceActivity>(\n        isDashboardsOverviewResourceActivity,\n      );\n      const [dynamicResourceActivityExtensions] = useResolvedExtensions<\n        DynamicDashboardsOverviewResourceActivity\n      >(isDynamicDashboardsOverviewResourceActivity);\n\n      const resourceActivities = React.useMemo(\n        () =>\n          [...resourceActivityExtensions, ...dynamicResourceActivityExtensions].filter(\n            (e) => !!models.get(e.properties.k8sResource.kind),\n          ),\n        [dynamicResourceActivityExtensions, models, resourceActivityExtensions],\n      );\n\n      const prometheusActivities = useExtensions<DashboardsOverviewPrometheusActivity>(\n        isDashboardsOverviewPrometheusActivity,\n      );\n      const [dynamicPrometheusActivities] = useResolvedExtensions<\n        DynamicDashboardsOverviewPrometheusActivity\n      >(isDynamicDashboardsOverviewPrometheusActivity);\n\n      React.useEffect(() => {\n        resourceActivities.forEach((a, index) => {\n          watchK8sResource(uniqueResource(a.properties.k8sResource, index));\n        });\n        [...prometheusActivities, ...dynamicPrometheusActivities].forEach((a) =>\n          a.properties.queries.forEach((q) => watchPrometheus(q)),\n        );\n        return () => {\n          resourceActivities.forEach((a, index) => {\n            stopWatchK8sResource(uniqueResource(a.properties.k8sResource, index));\n          });\n          [...prometheusActivities, ...dynamicPrometheusActivities].forEach((a) =>\n            a.properties.queries.forEach(stopWatchPrometheusQuery),\n          );\n        };\n      }, [\n        watchK8sResource,\n        stopWatchK8sResource,\n        watchPrometheus,\n        stopWatchPrometheusQuery,\n        resourceActivities,\n        prometheusActivities,\n        dynamicPrometheusActivities,\n      ]);\n\n      const allResourceActivities = React.useMemo(\n        () =>\n          _.flatten(\n            resourceActivities.map((a, index) => {\n              const k8sResources = _.get(\n                resources,\n                [uniqueResource(a.properties.k8sResource, index).prop, 'data'],\n                [],\n              ) as FirehoseResult['data'];\n              return k8sResources\n                .filter((r) => (a.properties.isActivity ? a.properties.isActivity(r) : true))\n                .map((r) => ({\n                  resource: r,\n                  timestamp: a.properties.getTimestamp ? a.properties.getTimestamp(r) : null,\n                  loader: (a as DashboardsOverviewResourceActivity)?.properties?.loader,\n                  component: (a as ResolvedExtension<DynamicDashboardsOverviewResourceActivity>)\n                    ?.properties?.component,\n                }));\n            }),\n          ),\n        [resourceActivities, resources],\n      );\n\n      const allPrometheusActivities = React.useMemo(\n        () =>\n          [...prometheusActivities, ...dynamicPrometheusActivities]\n            .filter((a) => {\n              const queryResults = a.properties.queries.map(\n                (q) => prometheusResults.getIn([q, 'data']) as PrometheusResponse,\n              );\n              return a.properties.isActivity(queryResults);\n            })\n            .map((a) => {\n              const queryResults = a.properties.queries.map(\n                (q) => prometheusResults.getIn([q, 'data']) as PrometheusResponse,\n              );\n              return {\n                loader: (a as DashboardsOverviewPrometheusActivity)?.properties.loader,\n                component: (a as ResolvedExtension<DynamicDashboardsOverviewPrometheusActivity>)\n                  ?.properties.component,\n                results: queryResults,\n              };\n            }),\n        [dynamicPrometheusActivities, prometheusActivities, prometheusResults],\n      );\n\n      const resourcesLoaded = React.useMemo(\n        () =>\n          resourceActivities.every((a, index) => {\n            const uniqueProp = uniqueResource(a.properties.k8sResource, index).prop;\n            return resources[uniqueProp]?.loaded || resources[uniqueProp]?.loadError;\n          }),\n        [resourceActivities, resources],\n      );\n\n      const queriesLoaded = React.useMemo(\n        () =>\n          prometheusActivities.every((a) =>\n            a.properties.queries.every(\n              (q) =>\n                prometheusResults.getIn([q, 'data']) || prometheusResults.getIn([q, 'loadError']),\n            ),\n          ),\n        [prometheusActivities, prometheusResults],\n      );\n\n      return (\n        <OngoingActivityBody\n          loaded={resourcesLoaded && queriesLoaded}\n          resourceActivities={allResourceActivities}\n          prometheusActivities={allPrometheusActivities}\n        />\n      );\n    },\n  ),\n);\n\nexport const ActivityCard: React.FC<{}> = React.memo(() => {\n  const { t } = useTranslation();\n  return (\n    <Card\n      data-test-id=\"activity-card\"\n      className=\"co-overview-card--gradient\"\n      isClickable\n      isSelectable\n    >\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to={viewEvents} data-test=\"view-events-link\">\n                {t('public~View events')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('public~Activity')}</CardTitle>\n      </CardHeader>\n      <ActivityBody className=\"co-overview-dashboard__activity-body\">\n        <OngoingActivity />\n        <RecentEvent />\n      </ActivityBody>\n    </Card>\n  );\n});\n\ntype OngoingActivityProps = {\n  models: ImmutableMap<string, K8sKind>;\n};\n","import * as React from 'react';\n\nimport {\n  FLAGS,\n  GETTING_STARTED_USER_SETTINGS_KEY_CLUSTER_DASHBOARD,\n  useUserSettings,\n} from '@console/shared';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport {\n  GettingStartedExpandableGrid,\n  GettingStartedShowState,\n  QuickStartGettingStartedCard,\n  useGettingStartedShowState,\n} from '@console/shared/src/components/getting-started';\n\nimport { ClusterSetupGettingStartedCard } from './cluster-setup-getting-started-card';\nimport { ExploreAdminFeaturesGettingStartedCard } from './explore-admin-features-getting-started-card';\nimport { USER_SETTINGS_KEY } from './constants';\n\nimport './getting-started-section.scss';\n\nexport const GettingStartedSection: React.FC = () => {\n  const openshiftFlag = useFlag(FLAGS.OPENSHIFT);\n\n  const [showState, setShowState, showStateLoaded] = useGettingStartedShowState(USER_SETTINGS_KEY);\n\n  const [isGettingStartedSectionOpen, setIsGettingStartedSectionOpen] = useUserSettings<boolean>(\n    GETTING_STARTED_USER_SETTINGS_KEY_CLUSTER_DASHBOARD,\n    true,\n  );\n\n  if (!openshiftFlag || !showStateLoaded || showState !== GettingStartedShowState.SHOW) {\n    return null;\n  }\n\n  return (\n    <div className=\"co-dashboard-getting-started-section\">\n      <GettingStartedExpandableGrid\n        isOpen={isGettingStartedSectionOpen}\n        setIsOpen={setIsGettingStartedSectionOpen}\n        setShowState={setShowState}\n      >\n        <ClusterSetupGettingStartedCard />\n        <QuickStartGettingStartedCard\n          featured={[\n            // All part of the console-operator:\n            // - Impersonate a user\n            'user-impersonation',\n            // - Monitor your sample application\n            'monitor-sampleapp',\n            // - Install the Red Hat Developer Hub (RHDH) operator (and create a RHDH instance)\n            'rhdh-installation-via-operator',\n            // - Install the Red Hat OpenShift Pipelines operator\n            'explore-pipelines',\n            // - Install the Red Hat OpenShift Serverless operator\n            'install-serverless',\n          ]}\n        />\n        <ExploreAdminFeaturesGettingStartedCard />\n      </GettingStartedExpandableGrid>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ClipboardCheckIcon } from '@patternfly/react-icons/dist/esm/icons/clipboard-check-icon';\n\nimport { useCanClusterUpgrade } from '@console/shared';\n\nimport {\n  GettingStartedCard,\n  GettingStartedLink,\n} from '@console/shared/src/components/getting-started';\n\nimport { useIdentityProviderLink } from './cluster-setup-identity-provider-link';\nimport { useAlertReceiverLink } from './cluster-setup-alert-receiver-link';\nimport { documentationURLs, getDocumentationURL, isManaged } from '../../../../utils';\n\nexport const ClusterSetupGettingStartedCard: React.FC = () => {\n  const { t } = useTranslation();\n\n  const canUpgrade = useCanClusterUpgrade();\n\n  const identityProviderLink = useIdentityProviderLink();\n  const alertReceiverLink = useAlertReceiverLink();\n\n  const links = [canUpgrade && identityProviderLink, alertReceiverLink].filter(Boolean);\n\n  if (links.length === 0) {\n    return null;\n  }\n\n  const moreLinkURL = getDocumentationURL(\n    documentationURLs.postInstallationMachineConfigurationTasks,\n  );\n\n  const moreLink: GettingStartedLink = {\n    id: 'machine-configuration',\n    title: t('public~View all steps in documentation'),\n    href: moreLinkURL,\n    external: true,\n  };\n\n  return (\n    <GettingStartedCard\n      id=\"cluster-setup\"\n      icon={<ClipboardCheckIcon color=\"var(--co-global--palette--blue-400)\" aria-hidden=\"true\" />}\n      title={t('public~Set up your cluster')}\n      titleColor={'var(--co-global--palette--blue-400)'}\n      description={t('public~Finish setting up your cluster with recommended configurations.')}\n      links={links}\n      moreLink={!isManaged() && moreLink}\n    />\n  );\n};\n","import { useTranslation } from 'react-i18next';\n\nimport { GettingStartedLink } from '@console/shared/src/components/getting-started';\n\nimport { OAuthModel } from '@console/internal/models';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { useCanEditIdentityProviders, useOAuthData } from '@console/shared/src/hooks/oauth';\n\nexport const useIdentityProviderLink = (): GettingStartedLink | null => {\n  const { t } = useTranslation();\n  const canEdit = useCanEditIdentityProviders();\n  const [oauthData, oauthLoaded, oauthLoadError] = useOAuthData(canEdit);\n\n  if (!canEdit || !oauthData || !oauthLoaded || oauthLoadError) {\n    return null;\n  }\n\n  const hasIdentityProviders = oauthData.spec?.identityProviders?.length > 0;\n  if (hasIdentityProviders) {\n    return null;\n  }\n\n  return {\n    id: 'identity-providers',\n    title: t('public~Add identity providers'),\n    href: resourcePathFromModel(OAuthModel, 'cluster'),\n  };\n};\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { GettingStartedLink } from '@console/shared/src/components/getting-started';\n\nimport { SecretModel } from '@console/internal/models';\nimport { SecretKind } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { getAlertmanagerConfig } from '@console/internal/components/monitoring/alertmanager/alertmanager-utils';\nimport { numberOfIncompleteReceivers } from '@console/internal/components/monitoring/alertmanager/alertmanager-config';\n\nconst useCanEditAlertManagerConfigSecret = () =>\n  useAccessReview({\n    group: SecretModel.apiGroup,\n    resource: SecretModel.plural,\n    namespace: 'openshift-monitoring',\n    name: 'alertmanager-main',\n    verb: 'patch',\n  });\n\nconst useAlertManagerConfigSecret = (watch: boolean) =>\n  useK8sWatchResource<SecretKind>(\n    watch\n      ? {\n          kind: SecretModel.kind,\n          isList: false,\n          namespaced: true,\n          namespace: 'openshift-monitoring',\n          name: 'alertmanager-main',\n        }\n      : null,\n  );\n\nexport const useAlertReceiverLink = (): GettingStartedLink | null => {\n  const { t } = useTranslation();\n  const canEdit = useCanEditAlertManagerConfigSecret();\n  const [secret] = useAlertManagerConfigSecret(canEdit);\n\n  const hasIncompleteReceivers = useMemo<boolean>(() => {\n    const { config } = getAlertmanagerConfig(secret);\n    return config ? numberOfIncompleteReceivers(config) > 0 : false;\n  }, [secret]);\n\n  if (canEdit && hasIncompleteReceivers) {\n    return {\n      id: 'alert-receivers',\n      title: t('public~Configure alert receivers'),\n      href: '/monitoring/alertmanagerconfig',\n    };\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport * as semver from 'semver';\nimport { useTranslation } from 'react-i18next';\nimport { FlagIcon } from '@patternfly/react-icons/dist/esm/icons/flag-icon';\nimport { FLAGS, useOpenShiftVersion } from '@console/shared';\nimport { useFlag } from '@console/shared/src/hooks/flag';\n\nimport {\n  GettingStartedCard,\n  GettingStartedLink,\n} from '@console/shared/src/components/getting-started';\nimport { lightspeedOperatorURL } from '@console/app/src/components/lightspeed/Lightspeed';\nimport { DOC_URL_OPENSHIFT_WHATS_NEW } from '../../../../utils';\n\nexport const ExploreAdminFeaturesGettingStartedCard: React.FC = () => {\n  const { t } = useTranslation();\n  const canListPackageManifest = useFlag(FLAGS.CAN_LIST_PACKAGE_MANIFEST);\n  const canListOperatorGroup = useFlag(FLAGS.CAN_LIST_OPERATOR_GROUP);\n  const lightspeedIsAvailable = useFlag(FLAGS.LIGHTSPEED_IS_AVAILABLE_TO_INSTALL);\n  const showLightSpeedLink =\n    canListPackageManifest && canListOperatorGroup && lightspeedIsAvailable;\n  const parsed = semver.parse(useOpenShiftVersion());\n  // Show only major and minor version.\n  const version = parsed ? `${parsed.major}.${parsed.minor}` : '';\n  const links: GettingStartedLink[] = React.useMemo(\n    () => [\n      {\n        id: 'openshift-ai',\n        title: t('public~OpenShift AI'),\n        description: t('public~Build, deploy, and manage AI-enabled applications.'),\n        href:\n          '/operatorhub/all-namespaces?keyword=openshift+ai&details-item=rhods-operator-redhat-operators-openshift-marketplace',\n      },\n      ...(showLightSpeedLink\n        ? [\n            {\n              id: 'lightspeed',\n              title: t('public~OpenShift Lightspeed'),\n              description: t('public~Your personal AI helper.'),\n              href: lightspeedOperatorURL,\n            },\n          ]\n        : [\n            {\n              id: 'new-translations',\n              title: t('public~French and Spanish now available'),\n              description: t('public~Console language options now include French and Spanish.'),\n              href: '/user-preferences/language',\n            },\n          ]),\n    ],\n    [showLightSpeedLink, t],\n  );\n\n  const moreLink: GettingStartedLink = {\n    id: 'whats-new',\n    title: t(\"public~See what's new in OpenShift {{version}}\", { version }),\n    href: DOC_URL_OPENSHIFT_WHATS_NEW,\n    external: true,\n  };\n\n  return (\n    <GettingStartedCard\n      id=\"admin-features\"\n      icon={<FlagIcon color=\"var(--co-global--palette--orange-400)\" aria-hidden=\"true\" />}\n      title={t('public~Explore new features and capabilities')}\n      titleColor={'var(--co-global--palette--orange-400)'}\n      links={links}\n      moreLink={moreLink}\n    />\n  );\n};\n","export const USER_SETTINGS_KEY = 'console.clusterDashboard.gettingStarted';\n","import * as React from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useTranslation } from 'react-i18next';\n\nimport { ClusterDashboard } from './cluster-dashboard/cluster-dashboard';\nimport { HorizontalNav, PageHeading, LoadingBox, Page, AsyncComponent } from '../../utils';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { PageTitleContext } from '@console/shared/src/components/pagetitle/PageTitleContext';\nimport {\n  useExtensions,\n  DashboardsCard,\n  DashboardsTab,\n  isDashboardsCard,\n  isDashboardsTab,\n} from '@console/plugin-sdk';\nimport {\n  DashboardsCard as DynamicDashboardsCard,\n  DashboardsTab as DynamicDashboardsTab,\n  isDashboardsCard as isDynamicDashboardsCard,\n  isDashboardsTab as isDynamicDashboardsTab,\n  GridPosition,\n  OverviewGridCard,\n} from '@console/dynamic-plugin-sdk';\nimport { RootState } from '../../../redux';\n\nexport const getCardsOnPosition = (\n  cards: DashboardsCard[],\n  dynamicCards: DynamicDashboardsCard[],\n  position: GridPosition,\n): OverviewGridCard[] => [\n  ...cards\n    .filter((c) => c.properties.position === position)\n    .map((c) => ({\n      Card: () => <AsyncComponent loader={c.properties.loader} />,\n      span: c.properties.span,\n    })),\n  ...dynamicCards\n    .filter((c) => c.properties.position === position)\n    .map((c) => ({\n      Card: () => <AsyncComponent loader={c.properties.component} />,\n      span: c.properties.span,\n    })),\n];\n\nexport const getPluginTabPages = (\n  tabs: (DashboardsTab | DynamicDashboardsTab)[],\n  cards: DashboardsCard[],\n  dynamicCards: DynamicDashboardsCard[],\n  navSection: string,\n  firstTabId: string,\n): Page[] => {\n  tabs = tabs.filter((t) => t.properties.navSection === navSection);\n  return tabs.map((tab) => {\n    const tabCards = cards.filter((c) => c.properties.tab === tab.properties.id);\n    return {\n      href: tab.properties.id === firstTabId ? '' : tab.properties.id,\n      name: tab.properties.title,\n      component: () => (\n        <Dashboard>\n          <DashboardGrid\n            mainCards={getCardsOnPosition(tabCards, dynamicCards, GridPosition.MAIN)}\n            leftCards={getCardsOnPosition(tabCards, dynamicCards, GridPosition.LEFT)}\n            rightCards={getCardsOnPosition(tabCards, dynamicCards, GridPosition.RIGHT)}\n          />\n        </Dashboard>\n      ),\n    };\n  });\n};\n\nconst DashboardsPage_: React.FC<DashboardsPageProps> = ({ kindsInFlight, k8sModels }) => {\n  const { t } = useTranslation();\n  const title = t('public~Overview');\n  const tabExtensions = useExtensions<DashboardsTab>(isDashboardsTab);\n  const cardExtensions = useExtensions<DashboardsCard>(isDashboardsCard);\n  const dynamicTabExtensions = useExtensions<DynamicDashboardsTab>(isDynamicDashboardsTab);\n  const dynamicCardExtensions = useExtensions<DynamicDashboardsCard>(isDynamicDashboardsCard);\n\n  const location = useLocation();\n\n  const pluginPages = React.useMemo(\n    () =>\n      getPluginTabPages(\n        [...tabExtensions, ...dynamicTabExtensions],\n        cardExtensions,\n        dynamicCardExtensions,\n        'home',\n        '',\n      ),\n    [tabExtensions, dynamicTabExtensions, cardExtensions, dynamicCardExtensions],\n  );\n\n  const allPages: Page[] = React.useMemo(\n    () => [\n      {\n        href: '',\n        // t('public~Cluster')\n        nameKey: 'public~Cluster',\n        component: ClusterDashboard,\n      },\n      ...pluginPages,\n    ],\n    [pluginPages],\n  );\n\n  const badge = React.useMemo(\n    () => allPages.find((page) => `/dashboards${page.href}` === location.pathname)?.badge,\n    [allPages, location.pathname],\n  );\n  const titleProviderValues = {\n    telemetryPrefix: 'Overview',\n    titlePrefix: title,\n  };\n\n  return kindsInFlight && k8sModels.size === 0 ? (\n    <LoadingBox />\n  ) : (\n    <>\n      <PageTitleContext.Provider value={titleProviderValues}>\n        <PageHeading title={title} detail={true} badge={badge} />\n        <HorizontalNav pages={allPages} noStatusBox />\n      </PageTitleContext.Provider>\n    </>\n  );\n};\n\nexport const mapStateToProps = (state: RootState) => ({\n  kindsInFlight: state.k8s.getIn(['RESOURCES', 'inFlight']),\n  k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\n\nexport const DashboardsPage = connect(mapStateToProps)(DashboardsPage_);\n\nexport type DashboardsPageProps = {\n  kindsInFlight: boolean;\n  k8sModels: ImmutableMap<string, any>;\n};\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","import { FirehoseResource } from '../../../utils';\n\nexport const uniqueResource = (\n  resource: FirehoseResource,\n  prefix: string | number,\n): FirehoseResource => ({\n  ...resource,\n  prop: `${prefix}-${resource.prop}`,\n});\n","import * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useTranslation } from 'react-i18next';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport {\n  DashboardsOverviewHealthOperator,\n  DashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthResourceSubsystem,\n  SubsystemHealth,\n  OperatorRowProps,\n  LazyLoader,\n} from '@console/plugin-sdk';\nimport {\n  ResolvedExtension,\n  DashboardsOverviewHealthOperator as DynamicDashboardsOverviewHealthOperator,\n  DashboardsOverviewHealthURLSubsystem as DynamicDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem as DynamicDashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthResourceSubsystem as DynamicDashboardsOverviewHealthResourceSubsystem,\n  WatchK8sResources,\n  WatchK8sResults,\n  ResourcesObject,\n} from '@console/dynamic-plugin-sdk';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { OperatorsSection } from '@console/shared/src/components/dashboard/status-card/OperatorStatusBody';\nimport {\n  getOperatorsHealthState,\n  getMostImportantStatuses,\n} from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { K8sKind } from '../../../../module/k8s';\nimport { FirehoseResourcesResult, AsyncComponent, resourcePath } from '../../../utils';\nimport { useK8sWatchResources } from '../../../utils/k8s-watch-hook';\nimport { withDashboardResources, DashboardItemProps } from '../../with-dashboard-resources';\nimport { uniqueResource } from './utils';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { ClusterDashboardContext } from './context';\n\nconst OperatorRow: React.FC<\n  OperatorRowProps & {\n    LoadingComponent: () => JSX.Element;\n    Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n    key: string;\n    isResolved: boolean;\n  }\n> = ({ operatorStatus, isResolved, key, Component, LoadingComponent }) => {\n  const ResolvedComponent = Component as React.ComponentType<OperatorRowProps>;\n  return isResolved ? (\n    <ResolvedComponent key={key} operatorStatus={operatorStatus} />\n  ) : (\n    <AsyncComponent\n      key={operatorStatus.operators[0].metadata.uid}\n      operatorStatus={operatorStatus}\n      loader={Component}\n      LoadingComponent={LoadingComponent}\n    />\n  );\n};\n\nexport const OperatorsPopup: React.FC<OperatorsPopupProps> = ({\n  resources,\n  operatorExtensions,\n  dynamicOperatorSubsystems,\n}) => {\n  const { t } = useTranslation();\n  const sections = [\n    ...operatorExtensions.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return (\n        <StackItem key={o.title}>\n          <OperatorsSection\n            resources={operatorResources}\n            getOperatorsWithStatuses={o.getOperatorsWithStatuses}\n            title={o.title}\n            linkTo={o.viewAllLink || resourcePath(o.resources[0].kind)}\n            Row={OperatorRow}\n            Component={o.operatorRowLoader}\n            isResolved={false}\n          />\n        </StackItem>\n      );\n    }),\n    ...dynamicOperatorSubsystems.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return (\n        <StackItem key={o.title}>\n          <OperatorsSection\n            resources={operatorResources}\n            getOperatorsWithStatuses={o.getOperatorsWithStatuses}\n            title={o.title}\n            linkTo={o.viewAllLink || resourcePath(o.resources[0].kind)}\n            Row={OperatorRow}\n            Component={o.operatorRowLoader}\n            isResolved\n          />\n        </StackItem>\n      );\n    }),\n  ].reverse();\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        {t(\n          'public~Operators create, configure, and manage applications by extending the Kubernetes API.',\n        )}\n      </StackItem>\n      {sections}\n    </Stack>\n  );\n};\n\nexport const OperatorHealthItem = withDashboardResources<OperatorHealthItemProps>(\n  ({\n    resources,\n    watchK8sResource,\n    stopWatchK8sResource,\n    operatorExtensions,\n    dynamicOperatorSubsystems,\n  }) => {\n    const { t } = useTranslation();\n    React.useEffect(() => {\n      operatorExtensions.forEach((o, index) =>\n        o.resources.forEach((r) => watchK8sResource(uniqueResource(r, index))),\n      );\n      return () => {\n        operatorExtensions.forEach((o, index) =>\n          o.resources.forEach((r) => stopWatchK8sResource(uniqueResource(r, index))),\n        );\n      };\n    }, [watchK8sResource, stopWatchK8sResource, operatorExtensions]);\n\n    const healthStatuses = operatorExtensions.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop] || {};\n        return acc;\n      }, {});\n      if (\n        Object.keys(operatorResources).some((resource) => operatorResources[resource].loadError)\n      ) {\n        return { health: HealthState.NOT_AVAILABLE };\n      }\n      if (Object.keys(operatorResources).some((resource) => !operatorResources[resource].loaded)) {\n        return { health: HealthState.LOADING };\n      }\n      const operatorStatuses = o.getOperatorsWithStatuses(operatorResources);\n      if (!operatorStatuses.length) {\n        return { health: HealthState.OK };\n      }\n      const importantStatuses = getMostImportantStatuses(operatorStatuses);\n      return {\n        health: importantStatuses[0].status.health,\n        count: importantStatuses.length,\n      };\n    });\n\n    const operatorsHealth = getOperatorsHealthState(healthStatuses, t);\n\n    return (\n      <HealthItem\n        title={t('public~Operators')}\n        state={operatorsHealth.health}\n        details={operatorsHealth.detailMessage}\n        popupTitle={t('public~Operator status')}\n      >\n        <OperatorsPopup\n          resources={resources}\n          operatorExtensions={operatorExtensions}\n          dynamicOperatorSubsystems={dynamicOperatorSubsystems}\n        />\n      </HealthItem>\n    );\n  },\n);\n\nexport const URLHealthItem = withDashboardResources<URLHealthItemProps>(\n  ({\n    watchURL,\n    stopWatchURL,\n    urlResults,\n    resources,\n    watchK8sResource,\n    stopWatchK8sResource,\n    subsystem,\n    models,\n  }) => {\n    const modelExists =\n      subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n      watchURL(\n        subsystem.url,\n        (subsystem as DashboardsOverviewHealthURLSubsystem<any>['properties']).fetch\n          ? (subsystem as DashboardsOverviewHealthURLSubsystem<any>['properties']).fetch\n          : undefined,\n      );\n      if (modelExists) {\n        watchK8sResource(subsystem.additionalResource);\n      }\n      return () => {\n        stopWatchURL(subsystem.url);\n        if (modelExists) {\n          stopWatchK8sResource(subsystem.additionalResource);\n        }\n      };\n    }, [watchURL, stopWatchURL, watchK8sResource, stopWatchK8sResource, subsystem, modelExists]);\n\n    const healthResult = urlResults.getIn([subsystem.url, 'data']);\n    const healthResultError = urlResults.getIn([subsystem.url, 'loadError']);\n\n    const k8sResult = subsystem.additionalResource\n      ? resources[subsystem.additionalResource.prop]\n      : null;\n    const healthState = subsystem.healthHandler(healthResult, healthResultError, k8sResult);\n\n    return (\n      <HealthItem\n        title={subsystem.title}\n        state={healthState.state}\n        details={healthState.message}\n        popupTitle={subsystem.popupTitle}\n        popupBodyContent={\n          subsystem.popupComponent\n            ? (hide) => (\n                <AsyncComponent\n                  loader={subsystem.popupComponent}\n                  healthResult={healthResult}\n                  healthResultError={healthResultError}\n                  k8sResult={k8sResult}\n                  hide={hide}\n                />\n              )\n            : undefined\n        }\n      />\n    );\n  },\n);\n\nexport const PrometheusHealthItem = withDashboardResources<PrometheusHealthItemProps>(\n  ({\n    watchK8sResource,\n    stopWatchK8sResource,\n    resources,\n    watchPrometheus,\n    stopWatchPrometheusQuery,\n    prometheusResults,\n    subsystem,\n    models,\n  }) => {\n    const { t } = useTranslation();\n    const { infrastructure } = React.useContext(ClusterDashboardContext);\n\n    const modelExists =\n      subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n      subsystem.queries.forEach((q) => watchPrometheus(q));\n      if (modelExists) {\n        watchK8sResource(subsystem.additionalResource);\n      }\n      return () => {\n        subsystem.queries.forEach((q) => stopWatchPrometheusQuery(q));\n        if (modelExists) {\n          stopWatchK8sResource(subsystem.additionalResource);\n        }\n      };\n    }, [\n      watchK8sResource,\n      stopWatchK8sResource,\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      subsystem,\n      modelExists,\n    ]);\n\n    const queryResults = React.useMemo(\n      () =>\n        subsystem.queries.map((q) => {\n          const [response, error] = getPrometheusQueryResponse(prometheusResults, q);\n          return {\n            response,\n            error,\n          };\n        }),\n      [prometheusResults, subsystem.queries],\n    );\n    const k8sResult = subsystem.additionalResource\n      ? resources[subsystem.additionalResource.prop]\n      : null;\n    const healthState = subsystem.healthHandler(queryResults, t, k8sResult, infrastructure);\n\n    return (\n      <HealthItem\n        title={subsystem.title}\n        state={healthState.state}\n        details={healthState.message}\n        popupTitle={subsystem.popupTitle}\n        popupClassname={subsystem.popupClassname}\n        popupKeepOnOutsideClick={subsystem.popupKeepOnOutsideClick}\n        popupBodyContent={\n          subsystem.popupComponent\n            ? (hide) => (\n                <AsyncComponent\n                  loader={subsystem.popupComponent}\n                  responses={queryResults}\n                  k8sResult={k8sResult}\n                  hide={hide}\n                />\n              )\n            : undefined\n        }\n      />\n    );\n  },\n);\n\nexport const ResourceHealthItem: React.FC<ResourceHealthItemProps> = ({ subsystem, namespace }) => {\n  const { t } = useTranslation();\n\n  const { title, resources, healthHandler, popupComponent, popupTitle } = subsystem;\n\n  const resourcesWithNamespace: WatchK8sResources<ResourcesObject> = React.useMemo(() => {\n    return {\n      ...resources,\n      ...(resources.imageManifestVuln && {\n        imageManifestVuln: { ...resources.imageManifestVuln, namespace },\n      }),\n    };\n  }, [resources, namespace]);\n\n  const resourcesResult: WatchK8sResults<ResourcesObject> = useK8sWatchResources(\n    resourcesWithNamespace,\n  );\n  const healthState: SubsystemHealth = healthHandler(resourcesResult, t);\n\n  return (\n    <HealthItem\n      title={title}\n      state={healthState.state}\n      details={healthState.message}\n      popupTitle={popupTitle}\n    >\n      {popupComponent && resourcesResult && (\n        <AsyncComponent loader={popupComponent} {...resourcesResult} namespace={namespace} />\n      )}\n    </HealthItem>\n  );\n};\n\ntype OperatorHealthItemProps = DashboardItemProps & {\n  operatorExtensions: DashboardsOverviewHealthOperator['properties'][];\n  dynamicOperatorSubsystems: ResolvedExtension<\n    DynamicDashboardsOverviewHealthOperator\n  >['properties'][];\n};\n\ntype URLHealthItemProps = DashboardItemProps & {\n  subsystem:\n    | DashboardsOverviewHealthURLSubsystem<any>['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthURLSubsystem<any>>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype PrometheusHealthItemProps = DashboardItemProps & {\n  subsystem:\n    | DashboardsOverviewHealthPrometheusSubsystem['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthPrometheusSubsystem>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype ResourceHealthItemProps = {\n  subsystem:\n    | DashboardsOverviewHealthResourceSubsystem['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthResourceSubsystem>['properties'];\n  namespace?: string;\n};\n\ntype OperatorsPopupProps = {\n  resources: FirehoseResourcesResult;\n  operatorExtensions: DashboardsOverviewHealthOperator['properties'][];\n  dynamicOperatorSubsystems: ResolvedExtension<\n    DynamicDashboardsOverviewHealthOperator\n  >['properties'][];\n};\n","import * as React from 'react';\nimport { K8sResourceKind } from '../../../../module/k8s';\n\nexport const ClusterDashboardContext = React.createContext<ClusterDashboardContext>({\n  infrastructureLoaded: true,\n  infrastructureError: null,\n});\n\n// eslint-disable-next-line no-redeclare\ntype ClusterDashboardContext = {\n  infrastructure?: K8sResourceKind;\n  infrastructureLoaded: boolean;\n  infrastructureError: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { FirehoseResourcesResult } from '@console/internal/components/utils';\nimport { GetOperatorsWithStatuses, LazyLoader, OperatorRowProps } from '@console/plugin-sdk';\nimport { getMostImportantStatuses } from './state-utils';\nimport { HealthState } from './states';\nimport StatusItem, { StatusPopupSection } from './StatusPopup';\n\nimport './operator-body.scss';\n\nexport const OperatorsSection: React.FC<OperatorsSectionProps> = ({\n  resources,\n  getOperatorsWithStatuses,\n  title,\n  linkTo,\n  Row,\n  Component,\n  isResolved,\n}) => {\n  const { t } = useTranslation();\n  const error = _.values(resources).some((r) => r.loadError);\n  const operatorStatuses = getOperatorsWithStatuses(resources);\n  const sortedOperatorStatuses = getMostImportantStatuses(operatorStatuses).sort((a, b) =>\n    a.operators[0].metadata.name.localeCompare(b.operators[0].metadata.name),\n  );\n  const operatorsHealthy = sortedOperatorStatuses.every((o) => o.status.health === HealthState.OK);\n  const RowLoading = React.useCallback(() => <div className=\"co-status__operator-skeleton\" />, []);\n  if (!operatorStatuses.length) {\n    return null;\n  }\n\n  return (\n    <StatusPopupSection\n      firstColumn={\n        <>\n          <span>{title}</span>\n          <span className=\"text-secondary co-status__operator-detail\">\n            {' '}\n            {t('console-shared~({{operatorStatusLength}} installed)', {\n              operatorStatusLength: operatorStatuses.length,\n            })}\n          </span>\n        </>\n      }\n      secondColumn={t('console-shared~Status')}\n    >\n      {error ? (\n        <div className=\"text-secondary\">{t('console-shared~Not available')}</div>\n      ) : (\n        !operatorsHealthy &&\n        sortedOperatorStatuses.map((operatorStatus) => (\n          <Row\n            key={operatorStatus.operators[0].metadata.uid}\n            Component={Component}\n            operatorStatus={operatorStatus}\n            LoadingComponent={RowLoading}\n            isResolved={isResolved}\n          />\n        ))\n      )}\n      <StatusItem\n        value={t('console-shared~All {{status}}', {\n          status: operatorStatuses[0].status.title.toLowerCase(),\n        })}\n        icon={operatorStatuses[0].status.icon}\n      >\n        <Link to={linkTo}>{t('console-shared~View all')}</Link>\n      </StatusItem>\n    </StatusPopupSection>\n  );\n};\n\ntype OperatorsSectionProps = {\n  resources: FirehoseResourcesResult;\n  getOperatorsWithStatuses: GetOperatorsWithStatuses;\n  title: string;\n  linkTo: string;\n  Row: React.ComponentType<\n    OperatorRowProps & {\n      LoadingComponent: () => JSX.Element;\n      Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n      key: string;\n      isResolved: boolean;\n    }\n  >;\n  isResolved: boolean;\n  Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useTranslation } from 'react-i18next';\nimport {\n  useExtensions,\n  DashboardsOverviewHealthSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthOperator,\n  isDashboardsOverviewHealthSubsystem,\n  isDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthURLSubsystem,\n  isDashboardsOverviewHealthPrometheusSubsystem,\n  isDashboardsOverviewHealthResourceSubsystem,\n  isDashboardsOverviewHealthOperator,\n} from '@console/plugin-sdk';\nimport {\n  DashboardsOverviewHealthSubsystem as DynamicDashboardsOverviewHealthSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem as DynamicDashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthURLSubsystem as DynamicDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthOperator as DynamicDashboardsOverviewHealthOperator,\n  isDashboardsOverviewHealthSubsystem as isDynamicDashboardsOverviewHealthSubsystem,\n  isDashboardsOverviewHealthURLSubsystem as isDynamicDashboardsOverviewHealthURLSubsystem,\n  isDashboardsOverviewHealthPrometheusSubsystem as isDynamicDashboardsOverviewHealthPrometheusSubsystem,\n  isResolvedDashboardsOverviewHealthURLSubsystem,\n  isResolvedDashboardsOverviewHealthPrometheusSubsystem,\n  isResolvedDashboardsOverviewHealthResourceSubsystem,\n  isResolvedDashboardsOverviewHealthOperator,\n  ResolvedExtension,\n  useResolvedExtensions,\n  WatchK8sResource,\n} from '@console/dynamic-plugin-sdk';\nimport { Gallery, GalleryItem, Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { BlueArrowCircleUpIcon, FLAGS, useCanClusterUpgrade } from '@console/shared';\n\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport AlertItem, {\n  StatusItem,\n} from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '../../../monitoring/utils';\nimport {\n  ClusterVersionKind,\n  referenceForModel,\n  hasAvailableUpdates,\n  K8sKind,\n  ObjectMetadata,\n} from '../../../../module/k8s';\nimport { ClusterVersionModel } from '../../../../models';\nimport { RootState } from '../../../../redux';\nimport {\n  OperatorHealthItem,\n  PrometheusHealthItem,\n  URLHealthItem,\n  ResourceHealthItem,\n} from './health-item';\nimport { useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { useNotificationAlerts } from '@console/shared/src/hooks/useNotificationAlerts';\n\nconst filterSubsystems = (\n  subsystems: (\n    | DashboardsOverviewHealthSubsystem\n    | ResolvedExtension<DynamicDashboardsOverviewHealthSubsystem>\n  )[],\n  k8sModels: ImmutableMap<string, K8sKind>,\n) =>\n  subsystems.filter((s) => {\n    if (\n      isDashboardsOverviewHealthURLSubsystem(s) ||\n      isDashboardsOverviewHealthPrometheusSubsystem(s) ||\n      isDynamicDashboardsOverviewHealthURLSubsystem(s) ||\n      isDynamicDashboardsOverviewHealthPrometheusSubsystem(s)\n    ) {\n      const subsystem = s as\n        | DashboardsOverviewHealthPrometheusSubsystem\n        | DashboardsOverviewHealthURLSubsystem\n        | ResolvedExtension<DynamicDashboardsOverviewHealthPrometheusSubsystem>\n        | ResolvedExtension<DynamicDashboardsOverviewHealthURLSubsystem>;\n      return subsystem.properties.additionalResource &&\n        !subsystem.properties.additionalResource.optional\n        ? !!k8sModels.get(subsystem.properties.additionalResource.kind)\n        : true;\n    }\n    return true;\n  });\n\nconst cvResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nexport const DashboardAlerts: React.FC<DashboardAlertsProps> = ({ labelSelector }) => {\n  const { t } = useTranslation();\n  const hasCVResource = useFlag(FLAGS.CLUSTER_VERSION);\n  const [alerts, , loadError] = useNotificationAlerts(labelSelector);\n  const [cv, cvLoaded] = useK8sWatchResource<ClusterVersionKind>(\n    hasCVResource ? cvResource : ({} as WatchK8sResource),\n  );\n  const canUpgrade = useCanClusterUpgrade();\n\n  const showClusterUpdate =\n    canUpgrade && hasCVResource && cvLoaded && hasAvailableUpdates(cv) && !labelSelector;\n  return (\n    <AlertsBody error={!_.isEmpty(loadError)}>\n      {showClusterUpdate && (\n        <StatusItem\n          key=\"clusterUpdate\"\n          Icon={BlueArrowCircleUpIcon}\n          message={t('public~A cluster version update is available')}\n        >\n          <Link to=\"/settings/cluster?showVersions\">{t('public~Update cluster')}</Link>\n        </StatusItem>\n      )}\n      {alerts.map((alert) => (\n        <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />\n      ))}\n    </AlertsBody>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\nexport const StatusCard = connect<StatusCardProps>(mapStateToProps)(({ k8sModels }) => {\n  const subsystemExtensions = useExtensions<DashboardsOverviewHealthSubsystem>(\n    isDashboardsOverviewHealthSubsystem,\n  );\n  const [dynamicSubsystemExtensions] = useResolvedExtensions<\n    DynamicDashboardsOverviewHealthSubsystem\n  >(isDynamicDashboardsOverviewHealthSubsystem);\n\n  const subsystems = React.useMemo(() => {\n    const filteredSubsystems = filterSubsystems(\n      [...subsystemExtensions, ...dynamicSubsystemExtensions],\n      k8sModels,\n    );\n    return filteredSubsystems.map((e) => {\n      if (\n        isResolvedDashboardsOverviewHealthURLSubsystem(e) ||\n        isResolvedDashboardsOverviewHealthPrometheusSubsystem(e) ||\n        isResolvedDashboardsOverviewHealthResourceSubsystem(e)\n      ) {\n        const popup = e.properties.popupComponent\n          ? { popupComponent: () => Promise.resolve(e.properties.popupComponent) }\n          : {};\n        return {\n          ...e,\n          properties: {\n            ...e.properties,\n            ...popup,\n          },\n        };\n      }\n      return e;\n    });\n  }, [subsystemExtensions, dynamicSubsystemExtensions, k8sModels]);\n\n  const operatorSubsystemIndex = React.useMemo(\n    () =>\n      subsystems.findIndex(\n        (e) =>\n          isDashboardsOverviewHealthOperator(e) || isResolvedDashboardsOverviewHealthOperator(e),\n      ),\n    [subsystems],\n  );\n  const { t } = useTranslation();\n  const healthItems: { title: string; Component: React.ReactNode }[] = [];\n  subsystems.forEach((subsystem) => {\n    if (\n      isDashboardsOverviewHealthURLSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthURLSubsystem(subsystem)\n    ) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <URLHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (\n      isDashboardsOverviewHealthPrometheusSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthPrometheusSubsystem(subsystem)\n    ) {\n      const { disallowedControlPlaneTopology } = subsystem.properties;\n      if (\n        disallowedControlPlaneTopology?.length &&\n        disallowedControlPlaneTopology.includes(window.SERVER_FLAGS.controlPlaneTopology)\n      ) {\n        return;\n      }\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <PrometheusHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (\n      isDashboardsOverviewHealthResourceSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthResourceSubsystem(subsystem)\n    ) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <ResourceHealthItem subsystem={subsystem.properties} />,\n      });\n    }\n  });\n\n  if (operatorSubsystemIndex !== -1) {\n    const operatorSubsystems: DashboardsOverviewHealthOperator['properties'][] = [];\n    const dynamicOperatorSubsystems: ResolvedExtension<\n      DynamicDashboardsOverviewHealthOperator\n    >['properties'][] = [];\n    subsystems.forEach((e) => {\n      if (isResolvedDashboardsOverviewHealthOperator(e)) {\n        dynamicOperatorSubsystems.push(e.properties);\n      } else if (isDashboardsOverviewHealthOperator(e)) {\n        operatorSubsystems.push(e.properties);\n      }\n    });\n    healthItems.splice(operatorSubsystemIndex, 0, {\n      title: 'Operators',\n      Component: (\n        <OperatorHealthItem\n          operatorExtensions={operatorSubsystems}\n          dynamicOperatorSubsystems={dynamicOperatorSubsystems}\n        />\n      ),\n    });\n  }\n\n  return (\n    <Card\n      data-test-id=\"status-card\"\n      className=\"co-overview-card--gradient\"\n      isClickable\n      isSelectable\n    >\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to=\"/monitoring/alerts\" data-test=\"status-card-view-alerts\">\n                {t('public~View alerts')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('public~Status')}</CardTitle>\n      </CardHeader>\n      <HealthBody>\n        <Gallery className=\"co-overview-status__health\" hasGutter>\n          {healthItems.map((item) => {\n            return (\n              <GalleryItem key={item.title} data-test={item.title}>\n                {item.Component}\n              </GalleryItem>\n            );\n          })}\n        </Gallery>\n      </HealthBody>\n      <DashboardAlerts />\n    </Card>\n  );\n});\n\ntype StatusCardProps = {\n  k8sModels: ImmutableMap<string, K8sKind>;\n};\n\ntype DashboardAlertsProps = {\n  labelSelector?: ObjectMetadata['labels'];\n};\n","import { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { OAuthModel } from '@console/internal/models';\nimport { OAuthKind, referenceForModel } from '@console/internal/module/k8s';\n\nexport const useCanEditIdentityProviders = () =>\n  useAccessReview({\n    group: OAuthModel.apiGroup,\n    resource: OAuthModel.plural,\n    name: 'cluster',\n    verb: 'patch',\n  });\n\nexport const useOAuthData = (canEdit: boolean) =>\n  useK8sWatchResource<OAuthKind>(\n    canEdit\n      ? {\n          kind: referenceForModel(OAuthModel),\n          isList: false,\n          namespaced: false,\n          name: 'cluster',\n        }\n      : null,\n  );\n"],"sourceRoot":""}