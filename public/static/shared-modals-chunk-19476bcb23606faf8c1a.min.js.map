{"version":3,"sources":["webpack:///./packages/console-app/src/components/pdb/modals/DeletePDBModal.tsx","webpack:///./packages/console-shared/src/components/modals/ConsolePluginModal.tsx","webpack:///./packages/console-shared/src/components/modals/DeleteResourceModal.tsx"],"names":["deletePDBModal","close","pdb","workloadName","submitError","setSubmitError","isSubmitting","setIsSubmitting","t","pdbName","metadata","name","onSubmit","e","preventDefault","then","catch","error","message","color","value","ns","errorMessage","inProgress","submitText","submitDanger","submitDisabled","cancel","ConsolePluginModal","props","consoleOperatorConfig","csvPluginsCount","handlePromise","pluginName","trusted","previouslyEnabled","enabled","setEnabled","event","patch","promise","className","autofocus","onChange","consolePluginModal","DeleteResourceForm","handleSubmit","resourceName","resourceType","actionLabel","actionLabelKey","values","status","isValid","submitLabel","type","text","DeleteResourceModal","actions","redirect","this","push","setStatus","initialValues","formikProps","deleteResourceModal"],"mappings":"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","file":"shared-modals-chunk-19476bcb23606faf8c1a.min.js","sourcesContent":["import * as React from 'react';\nimport { Form } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { global_warning_color_100 as warningColor } from '@patternfly/react-tokens/dist/js/global_warning_color_100';\nimport { useTranslation, Trans } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '@console/internal/components/factory/modal';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { k8sKill } from '@console/internal/module/k8s';\nimport { PodDisruptionBudgetModel } from '../../../models';\nimport { PodDisruptionBudgetKind } from '../types';\n\nconst DeletePDBModal: React.FC<DeletePDBModalProps> = ({ close, pdb, workloadName }) => {\n  const [submitError, setSubmitError] = React.useState<string>(null);\n  const [isSubmitting, setIsSubmitting] = React.useState<boolean>(false);\n  const { t } = useTranslation();\n  const pdbName = pdb.metadata.name;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    k8sKill(PodDisruptionBudgetModel, pdb)\n      .then(() => {\n        close();\n      })\n      .catch((error) => {\n        setSubmitError(\n          error?.message ||\n            t('console-app~Unknown error removing PodDisruptionBudget {{pdbName}}.', {\n              pdbName,\n            }),\n        );\n      });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <ModalTitle>\n        <ExclamationTriangleIcon color={warningColor.value} />{' '}\n        {t('console-app~Remove PodDisruptionBudget?')}\n      </ModalTitle>\n      <ModalBody>\n        {pdbName ? (\n          <>\n            <p>\n              <Trans t={t} ns=\"console-app\">\n                Are you sure you want to remove the PodDisruptionBudget <b>{{ pdbName }}</b> from{' '}\n                <b>{{ workloadName }}</b>?\n              </Trans>\n            </p>\n            <p>{t('console-app~The PodDisruptionBudget will be deleted.')}</p>\n          </>\n        ) : (\n          !submitError && <LoadingInline />\n        )}\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={submitError}\n        inProgress={isSubmitting}\n        submitText={t('console-app~Remove')}\n        submitDanger\n        submitDisabled={!!submitError}\n        cancel={close}\n      />\n    </Form>\n  );\n};\n\nexport const deletePDBModal = createModalLauncher(DeletePDBModal);\n\nexport type DeletePDBModalProps = ModalComponentProps & {\n  pdb: PodDisruptionBudgetKind;\n  workloadName: string;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { withHandlePromise, HandlePromiseProps } from '@console/internal/components/utils';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { k8sPatch, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  ConsolePluginRadioInputs,\n  ConsolePluginWarning,\n} from '@console/shared/src/components/utils';\nimport { getPluginPatch, isPluginEnabled } from '@console/shared/src/utils';\n\nexport const ConsolePluginModal = withHandlePromise((props: ConsolePluginModalProps) => {\n  const {\n    cancel,\n    close,\n    consoleOperatorConfig,\n    csvPluginsCount,\n    errorMessage,\n    handlePromise,\n    inProgress,\n    pluginName,\n    trusted,\n  } = props;\n  const previouslyEnabled = isPluginEnabled(consoleOperatorConfig, pluginName);\n  const { t } = useTranslation();\n  const [enabled, setEnabled] = React.useState(previouslyEnabled);\n  const submit = (event) => {\n    event.preventDefault();\n    const patch = getPluginPatch(consoleOperatorConfig, pluginName, enabled);\n    const promise = k8sPatch(ConsoleOperatorConfigModel, consoleOperatorConfig, [patch]);\n    handlePromise(promise, close);\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>\n        {csvPluginsCount > 1\n          ? t('console-shared~Console plugin enablement - {{plugin}}', { pluginName })\n          : t('console-shared~Console plugin enablement')}\n      </ModalTitle>\n      <ModalBody>\n        <p>\n          {csvPluginsCount\n            ? t(\n                'console-shared~This operator includes a console plugin which provides a custom interface that can be included in the console. Updating the enablement of this console plugin will prompt for the console to be refreshed once it has been updated. Make sure you trust this console plugin before enabling.',\n              )\n            : t(\n                'console-shared~This console plugin provides a custom interface that can be included in the console. Updating the enablement of this console plugin will prompt for the console to be refreshed once it has been updated. Make sure you trust this console plugin before enabling.',\n              )}\n        </p>\n        <ConsolePluginRadioInputs\n          autofocus\n          name={pluginName}\n          enabled={enabled}\n          onChange={setEnabled}\n        />\n        <ConsolePluginWarning\n          previouslyEnabled={previouslyEnabled}\n          enabled={enabled}\n          trusted={trusted}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={t('public~Save')}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const consolePluginModal = createModalLauncher(ConsolePluginModal);\n\nexport type ConsolePluginModalProps = {\n  consoleOperatorConfig: K8sResourceKind;\n  csvPluginsCount?: number;\n  pluginName: string;\n  trusted: boolean;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n} & HandlePromiseProps;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { Formik, FormikProps, FormikValues } from 'formik';\nimport { useTranslation, Trans } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { PromiseComponent, history } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { InputField } from '../formik-fields';\nimport { YellowExclamationTriangleIcon } from '../status';\n\ntype DeleteResourceModalProps = {\n  resourceName: string;\n  resourceType: string;\n  actionLabel?: string; // Used to send translated strings as action label.\n  actionLabelKey?: string; // Used to send translation key for action label.\n  redirect?: string;\n  onSubmit: (values: FormikValues) => Promise<K8sResourceKind[]>;\n  cancel?: () => void;\n  close?: () => void;\n};\n\ntype DeleteResourceModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n};\n\nconst DeleteResourceForm: React.FC<FormikProps<FormikValues> & DeleteResourceModalProps> = ({\n  handleSubmit,\n  resourceName,\n  resourceType,\n  actionLabel,\n  // t('console-shared~Delete')\n  actionLabelKey = 'console-shared~Delete',\n  isSubmitting,\n  cancel,\n  values,\n  status,\n}) => {\n  const { t } = useTranslation();\n  const isValid = values.resourceName === resourceName;\n  const submitLabel = actionLabel || t(actionLabelKey);\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-content\">\n      <ModalTitle>\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> {submitLabel} {resourceType}?\n      </ModalTitle>\n      <ModalBody>\n        <p>\n          {t(\n            `console-shared~This action cannot be undone. All associated Deployments, Routes, Builds, Pipelines, Storage/PVCs, Secrets, and ConfigMaps will be deleted.`,\n          )}\n        </p>\n        <p>\n          <Trans ns=\"console-shared\">\n            Confirm deletion by typing <strong className=\"co-break-word\">{{ resourceName }}</strong>{' '}\n            below:\n          </Trans>\n        </p>\n        <InputField type={TextInputTypes.text} name=\"resourceName\" />\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText={submitLabel}\n        submitDisabled={(status && !!status.submitError) || !isValid || isSubmitting}\n        cancel={cancel}\n        inProgress={isSubmitting}\n        submitDanger\n        errorMessage={status && status.submitError}\n      />\n    </form>\n  );\n};\n\nclass DeleteResourceModal extends PromiseComponent<\n  DeleteResourceModalProps,\n  DeleteResourceModalState\n> {\n  private handleSubmit = (values, actions) => {\n    const { onSubmit, close, redirect } = this.props;\n    return (\n      onSubmit &&\n      this.handlePromise(onSubmit(values))\n        .then(() => {\n          close();\n          redirect && history.push(redirect);\n        })\n        .catch((errorMessage) => {\n          actions.setStatus({ submitError: errorMessage });\n        })\n    );\n  };\n\n  render() {\n    const initialValues = {\n      resourceName: '',\n    };\n    return (\n      <Formik initialValues={initialValues} onSubmit={this.handleSubmit}>\n        {(formikProps) => <DeleteResourceForm {...formikProps} {...this.props} />}\n      </Formik>\n    );\n  }\n}\n\nexport const deleteResourceModal = createModalLauncher((props: DeleteResourceModalProps) => (\n  <DeleteResourceModal {...props} />\n));\n"],"sourceRoot":""}