{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/square-icon.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyToggle.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyExpanded.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopy.js"],"names":["SquareIcon","name","height","width","svgPath","yOffset","xOffset","ClipboardCopyToggle","_a","onClick","id","textId","contentId","isExpanded","props","Object","assign","type","variant","className","clipboardCopyToggleIcon","displayName","ClipboardCopyExpanded","super","this","children","onChange","isReadOnly","isCode","suppressContentEditableWarning","clipboardCopyExpandableContent","onInput","e","target","innerText","contentEditable","dir","defaultProps","ClipboardCopyVariant","ClipboardCopy","timer","componentDidUpdate","prevProps","prevState","newText","setState","text","textWhenExpanded","componentWillUnmount","window","clearTimeout","expandContent","_event","expanded","updateText","event","updateTextWhenExpanded","render","isBlock","exitDelay","maxWidth","entryDelay","onCopy","hoverTip","clickTip","textAriaLabel","toggleAriaLabel","position","additionalActions","ouiaId","ouiaSafe","divProps","clipboardCopy","modifiers","inline","block","state","prefix","clipboardCopyText","code","clipboardCopyActions","clipboardCopyActionsItem","copied","onTooltipHidden","clipboardCopyGroup","readOnlyVariant","undefined","value","Array","isArray","join","top","navigator","clipboard","writeText","toString","error","console","warn"],"mappings":"uGAAA,QACe,KACb,OAAU,iBACV,cAAiB,yBACjB,qBAAwB,kCACxB,yBAA4B,uCAC5B,+BAAkC,6CAClC,mBAAsB,gCACtB,kBAAqB,+BACrB,wBAA2B,sCAC3B,OAAU,kBACV,UAAa,CACX,SAAY,gBACZ,OAAU,cACV,MAAS,aACT,KAAQ,aAEV,UAAa,qB,kCCjBf,8CAEO,MASMA,EAAa,YATM,CAC9BC,KAAM,aACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,4GACTC,QAAS,EACTC,QAAS,K,yDCRX,uFAMO,MAAMC,EAAuBC,IAChC,IAAI,QAAEC,EAAO,GAAEC,EAAE,OAAEC,EAAM,UAAEC,EAAS,WAAEC,GAAa,GAAUL,EAAIM,EAAQ,iBAAON,EAAI,CAAC,UAAW,KAAM,SAAU,YAAa,eAC7H,OAAQ,gBAAoB,IAAQO,OAAOC,OAAO,CAAEC,KAAM,SAAUC,QAAS,UAAWT,QAASA,EAASC,GAAIA,EAAI,kBAAmB,GAAGA,KAAMC,IAAU,gBAAiBC,EAAW,gBAAiBC,GAAcC,GAC/M,gBAAoB,MAAO,CAAEK,UAAW,cAAI,IAAOC,0BAC/C,gBAAoB,IAAgB,CAAE,cAAe,YAEjEb,EAAoBc,YAAc,uB,kCCZlC,sEAIA,MAAMC,UAA8B,YAChC,YAAYR,GACRS,MAAMT,GAEV,SACI,MAAMN,EAAKgB,KAAKV,OAAO,UAAEK,EAAS,SAAEM,EAAQ,SAAEC,EAAQ,WAAEC,EAAU,OAAEC,GAAWpB,EAAIM,EAAQ,iBAAON,EAAI,CAAC,YAAa,WAAY,WAAY,aAAc,WAC1J,OAAQ,gBAAoB,MAAOO,OAAOC,OAAO,CAAEa,gCAAgC,EAAMV,UAAW,cAAI,IAAOW,+BAAgCX,GAAYY,QAAUC,GAAMN,EAASM,EAAGA,EAAEC,OAAOC,WAAYC,iBAAkBR,GAAcb,GAAQc,EAAS,gBAAoB,MAAO,CAAEQ,IAAK,OAASX,GAAYA,IAG5TH,EAAsBD,YAAc,wBACpCC,EAAsBe,aAAe,CACjCX,SAAU,OACVP,UAAW,GACXQ,YAAY,EACZC,QAAQ,I,kCClBZ,wKAsBO,IAAIU,GACX,SAAWA,GACPA,EAA6B,OAAI,SACjCA,EAAgC,UAAI,YACpCA,EAAoC,cAAI,iBAH5C,CAIGA,IAAyBA,EAAuB,KACnD,MAAMC,UAAsB,YACxB,YAAYzB,GACRS,MAAMT,GACNU,KAAKgB,MAAQ,KAEbhB,KAAKiB,mBAAqB,CAACC,EAAWC,KAClC,GAAID,EAAUjB,WAAaD,KAAKV,MAAMW,SAAU,CAC5C,MAAMmB,EAAUpB,KAAKV,MAAMW,SAC3BD,KAAKqB,SAAS,CAAEC,KAAMF,EAASG,iBAAkBH,MAGzDpB,KAAKwB,qBAAuB,KACpBxB,KAAKgB,OACLS,OAAOC,aAAa1B,KAAKgB,QAGjChB,KAAK2B,cAAiBC,IAClB5B,KAAKqB,SAAUF,IAAc,CACzBU,UAAWV,EAAUU,aAG7B7B,KAAK8B,WAAa,CAACC,EAAOT,KACtBtB,KAAKqB,SAAS,CAAEC,SAChBtB,KAAKV,MAAMY,SAAS6B,EAAOT,IAE/BtB,KAAKgC,uBAAyB,CAACD,EAAOT,KAClCtB,KAAKqB,SAAS,CAAEE,iBAAkBD,IAClCtB,KAAKV,MAAMY,SAAS6B,EAAOT,IAE/BtB,KAAKiC,OAAS,KACV,MAAMjD,EAAKgB,KAAKV,OAAO,WAEvBD,EAAU,SAAEa,EAAQ,WAEpBC,EAAU,OAAEC,EAAM,QAAE8B,EAAO,UAAEC,EAAS,SAAEC,EAAQ,WAAEC,EAAU,OAAEC,EAAM,SAAEC,EAAQ,SAAEC,EAAQ,cAAEC,EAAa,gBAAEC,EAAe,QAAEhD,EAAO,SAAEiD,EAAQ,UAAEhD,EAAS,kBAAEiD,EAAiB,OAAEC,EAAM,SAAEC,GAAa9D,EAAI+D,EAAW,iBAAO/D,EAAI,CAAC,aAAc,WAAY,aAAc,SAAU,UAAW,YAAa,WAAY,aAAc,SAAU,WAAY,WAAY,gBAAiB,kBAAmB,UAAW,WAAY,YAAa,oBAAqB,SAAU,aAIxc,OAAQ,gBAAoB,MAAOO,OAAOC,OAAO,CAAEG,UAAW,cAAI,IAAOqD,cAA2B,mBAAZtD,GAAgC,IAAOuD,UAAUC,OAAQhB,GAAW,IAAOe,UAAUE,MAAOnD,KAAKoD,MAAMvB,UAAY,IAAOoB,UAAUpB,SAAUlC,IAAcoD,EAAU,YAAahC,EAAclB,YAAagD,EAAQC,IAC9R,mBAAZpD,GAAiC,gBAAoB,IAAY,CAAE2D,OAAQ,IAAOnE,GAAQ,gBAAoB,WAAgB,MACzHkB,GAAW,gBAAoB,OAAQ,CAAET,UAAW,cAAI,IAAO2D,mBAAoBpE,GAAI,cAAkBA,GAAQc,KAAKoD,MAAM9B,MAC7HlB,GAAW,gBAAoB,OAAQ,CAAET,UAAW,cAAI,IAAO2D,kBAAmB,IAAOL,UAAUM,MAAOrE,GAAI,cAAkBA,GAAQc,KAAKoD,MAAM9B,MACnJ,gBAAoB,OAAQ,CAAE3B,UAAW,cAAI,IAAO6D,uBAChD,gBAAoB,OAAQ,CAAE7D,UAAW,cAAI,IAAO8D,2BAChD,gBAAoB,IAAqB,CAAE/D,QAAS,QAASyC,UAAWA,EAAWE,WAAYA,EAAYD,SAAUA,EAAUO,SAAUA,EAAUzD,GAAI,eAAeA,EAAMC,OAAQ,cAAcD,EAAM,aAAcqD,EAAUtD,QAAU8C,IAClOO,EAAOP,EAAO/B,KAAKoD,MAAM9B,MACzBtB,KAAKqB,SAAS,CAAEqC,QAAQ,KACzBC,gBAAiB,IAAM3D,KAAKqB,SAAS,CAAEqC,QAAQ,KAAY1D,KAAKoD,MAAMM,OAASlB,EAAWD,IACrGK,GAAqBA,KACjB,mBAAZlD,GAAiC,gBAAoB,IAAY,CAAE2D,OAAQ,IAAOnE,GAAQ,gBAAoB,WAAgB,KAC1H,gBAAoB,MAAO,CAAES,UAAW,cAAI,IAAOiE,qBACnC,cAAZlE,GAA4B,gBAAoB,IAAqB,CAAEL,WAAYW,KAAKoD,MAAMvB,SAAU5C,QAAU2C,IAC1G5B,KAAK2B,cAAcC,GACf5B,KAAKoD,MAAMvB,SACX7B,KAAKqB,SAAS,CAAEC,KAAMtB,KAAKoD,MAAM7B,mBAGjCvB,KAAKqB,SAAS,CAAEE,iBAAkBvB,KAAKoD,MAAM9B,QAElDpC,GAAI,UAAoBA,EAAMC,OAAQ,cAAkBD,EAAME,UAAW,WAAqBF,EAAM,aAAcwD,IACzH,gBAAoB,IAAWnD,OAAOC,OAAO,CAAEqE,gBAAiB1D,GAAcH,KAAKoD,MAAMvB,SAAW,eAAYiC,EAAW5D,SAAUF,KAAK8B,WAAYiC,MAAO/D,KAAKoD,MAAMvB,SAAW7B,KAAKoD,MAAM7B,iBAAmBvB,KAAKoD,MAAM9B,KAAMpC,GAAI,cAAcA,EAAM,aAAcuD,GAAkBrC,GAAU,CAAEQ,IAAK,SAC3S,gBAAoB,IAAqB,CAAEuB,UAAWA,EAAWE,WAAYA,EAAYD,SAAUA,EAAUO,SAAUA,EAAUzD,GAAI,eAAeA,EAAMC,OAAQ,cAAcD,EAAM,aAAcqD,EAAUtD,QAAU8C,IAChNO,EAAOP,EAAO/B,KAAKoD,MAAMvB,SAAW7B,KAAKoD,MAAM7B,iBAAmBvB,KAAKoD,MAAM9B,MAC7EtB,KAAKqB,SAAS,CAAEqC,QAAQ,KACzBC,gBAAiB,IAAM3D,KAAKqB,SAAS,CAAEqC,QAAQ,KAAY1D,KAAKoD,MAAMM,OAASlB,EAAWD,IACrGvC,KAAKoD,MAAMvB,UAAa,gBAAoB,IAAuB,CAAE1B,WAAYA,EAAYC,OAAQA,EAAQlB,GAAI,WAAWA,EAAMgB,SAAUF,KAAKgC,wBAA0BhC,KAAKoD,MAAM9B,UAElM,MAAMA,EAAO0C,MAAMC,QAAQjE,KAAKV,MAAMW,UAAYD,KAAKV,MAAMW,SAASiE,KAAK,IAAMlE,KAAKV,MAAMW,SAC5FD,KAAKoD,MAAQ,CACT9B,OACAO,SAAU7B,KAAKV,MAAMD,WACrBqE,QAAQ,EACRnC,iBAAkBD,IAI9BP,EAAclB,YAAc,gBAC5BkB,EAAcF,aAAe,CACzB0B,SAAU,oBACVC,SAAU,oCACVrC,YAAY,EACZd,YAAY,EACZe,QAAQ,EACRV,QAAS,SACTiD,SAAU,IAAgBwB,IAC1B/B,SAAU,QACVD,UAAW,KACXE,WAAY,IACZC,OAzG6B,CAACV,EAAQN,KACtC,IACI8C,UAAUC,UAAUC,UAAUhD,EAAKiD,YAEvC,MAAOC,GAEHC,QAAQC,KAAK,oGAAqG,+GAAgH,qGAAsG,mGAAoG,wEAE5aD,QAAQD,MAAMA,KAkGlBtE,SAAU,OACVuC,cAAe,iBACfC,gBAAiB,eACjBE,kBAAmB,KACnBE,UAAU","file":"vendors~knative-plugin/code-refs/knatifyComponent-chunk-d853cc5c9e7b9ebf29c6.min.js","sourcesContent":["import './clipboard-copy.css';\nexport default {\n  \"button\": \"pf-v5-c-button\",\n  \"clipboardCopy\": \"pf-v5-c-clipboard-copy\",\n  \"clipboardCopyActions\": \"pf-v5-c-clipboard-copy__actions\",\n  \"clipboardCopyActionsItem\": \"pf-v5-c-clipboard-copy__actions-item\",\n  \"clipboardCopyExpandableContent\": \"pf-v5-c-clipboard-copy__expandable-content\",\n  \"clipboardCopyGroup\": \"pf-v5-c-clipboard-copy__group\",\n  \"clipboardCopyText\": \"pf-v5-c-clipboard-copy__text\",\n  \"clipboardCopyToggleIcon\": \"pf-v5-c-clipboard-copy__toggle-icon\",\n  \"dirRtl\": \"pf-v5-m-dir-rtl\",\n  \"modifiers\": {\n    \"expanded\": \"pf-m-expanded\",\n    \"inline\": \"pf-m-inline\",\n    \"block\": \"pf-m-block\",\n    \"code\": \"pf-m-code\"\n  },\n  \"themeDark\": \"pf-v5-theme-dark\"\n};","import { createIcon } from '../createIcon';\n\nexport const SquareIconConfig = {\n  name: 'SquareIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const SquareIcon = createIcon(SquareIconConfig);\n\nexport default SquareIcon;","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Button } from '../Button';\nexport const ClipboardCopyToggle = (_a) => {\n    var { onClick, id, textId, contentId, isExpanded = false } = _a, props = __rest(_a, [\"onClick\", \"id\", \"textId\", \"contentId\", \"isExpanded\"]);\n    return (React.createElement(Button, Object.assign({ type: \"button\", variant: \"control\", onClick: onClick, id: id, \"aria-labelledby\": `${id} ${textId}`, \"aria-controls\": contentId, \"aria-expanded\": isExpanded }, props),\n        React.createElement(\"div\", { className: css(styles.clipboardCopyToggleIcon) },\n            React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))));\n};\nClipboardCopyToggle.displayName = 'ClipboardCopyToggle';\n//# sourceMappingURL=ClipboardCopyToggle.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs';\nimport { css } from '@patternfly/react-styles';\nclass ClipboardCopyExpanded extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const _a = this.props, { className, children, onChange, isReadOnly, isCode } = _a, props = __rest(_a, [\"className\", \"children\", \"onChange\", \"isReadOnly\", \"isCode\"]);\n        return (React.createElement(\"div\", Object.assign({ suppressContentEditableWarning: true, className: css(styles.clipboardCopyExpandableContent, className), onInput: (e) => onChange(e, e.target.innerText), contentEditable: !isReadOnly }, props), isCode ? React.createElement(\"pre\", { dir: \"ltr\" }, children) : children));\n    }\n}\nClipboardCopyExpanded.displayName = 'ClipboardCopyExpanded';\nClipboardCopyExpanded.defaultProps = {\n    onChange: () => undefined,\n    className: '',\n    isReadOnly: false,\n    isCode: false\n};\nexport { ClipboardCopyExpanded };\n//# sourceMappingURL=ClipboardCopyExpanded.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipPosition } from '../Tooltip';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nimport { getOUIAProps } from '../../helpers';\nexport const clipboardCopyFunc = (_event, text) => {\n    try {\n        navigator.clipboard.writeText(text.toString());\n    }\n    catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Clipboard API not found, this copy function will not work. This is likely because you're using an\", \"unsupported browser or you're not using HTTPS. \\n\\nIf you're a developer building an application which needs\", \"to support copying to the clipboard without the clipboard API, you'll have to create your own copy\", 'function and pass it to the ClipboardCopy component as the onCopy prop. For more information see', 'https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard');\n        // eslint-disable-next-line no-console\n        console.error(error);\n    }\n};\nexport var ClipboardCopyVariant;\n(function (ClipboardCopyVariant) {\n    ClipboardCopyVariant[\"inline\"] = \"inline\";\n    ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n    ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\nclass ClipboardCopy extends React.Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.componentDidUpdate = (prevProps, prevState) => {\n            if (prevProps.children !== this.props.children) {\n                const newText = this.props.children;\n                this.setState({ text: newText, textWhenExpanded: newText });\n            }\n        };\n        this.componentWillUnmount = () => {\n            if (this.timer) {\n                window.clearTimeout(this.timer);\n            }\n        };\n        this.expandContent = (_event) => {\n            this.setState((prevState) => ({\n                expanded: !prevState.expanded\n            }));\n        };\n        this.updateText = (event, text) => {\n            this.setState({ text });\n            this.props.onChange(event, text);\n        };\n        this.updateTextWhenExpanded = (event, text) => {\n            this.setState({ textWhenExpanded: text });\n            this.props.onChange(event, text);\n        };\n        this.render = () => {\n            const _a = this.props, { \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            isExpanded, onChange, // Don't pass to <div>\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            isReadOnly, isCode, isBlock, exitDelay, maxWidth, entryDelay, onCopy, hoverTip, clickTip, textAriaLabel, toggleAriaLabel, variant, position, className, additionalActions, ouiaId, ouiaSafe } = _a, divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\", \"ouiaId\", \"ouiaSafe\"]);\n            const textIdPrefix = 'text-input-';\n            const toggleIdPrefix = 'toggle-';\n            const contentIdPrefix = 'content-';\n            return (React.createElement(\"div\", Object.assign({ className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, this.state.expanded && styles.modifiers.expanded, className) }, divProps, getOUIAProps(ClipboardCopy.displayName, ouiaId, ouiaSafe)),\n                variant === 'inline-compact' && (React.createElement(GenerateId, { prefix: \"\" }, (id) => (React.createElement(React.Fragment, null,\n                    !isCode && (React.createElement(\"span\", { className: css(styles.clipboardCopyText), id: `${textIdPrefix}${id}` }, this.state.text)),\n                    isCode && (React.createElement(\"code\", { className: css(styles.clipboardCopyText, styles.modifiers.code), id: `${textIdPrefix}${id}` }, this.state.text)),\n                    React.createElement(\"span\", { className: css(styles.clipboardCopyActions) },\n                        React.createElement(\"span\", { className: css(styles.clipboardCopyActionsItem) },\n                            React.createElement(ClipboardCopyButton, { variant: \"plain\", exitDelay: exitDelay, entryDelay: entryDelay, maxWidth: maxWidth, position: position, id: `copy-button-${id}`, textId: `text-input-${id}`, \"aria-label\": hoverTip, onClick: (event) => {\n                                    onCopy(event, this.state.text);\n                                    this.setState({ copied: true });\n                                }, onTooltipHidden: () => this.setState({ copied: false }) }, this.state.copied ? clickTip : hoverTip)),\n                        additionalActions && additionalActions))))),\n                variant !== 'inline-compact' && (React.createElement(GenerateId, { prefix: \"\" }, (id) => (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: css(styles.clipboardCopyGroup) },\n                        variant === 'expansion' && (React.createElement(ClipboardCopyToggle, { isExpanded: this.state.expanded, onClick: (_event) => {\n                                this.expandContent(_event);\n                                if (this.state.expanded) {\n                                    this.setState({ text: this.state.textWhenExpanded });\n                                }\n                                else {\n                                    this.setState({ textWhenExpanded: this.state.text });\n                                }\n                            }, id: `${toggleIdPrefix}${id}`, textId: `${textIdPrefix}${id}`, contentId: `${contentIdPrefix}${id}`, \"aria-label\": toggleAriaLabel })),\n                        React.createElement(TextInput, Object.assign({ readOnlyVariant: isReadOnly || this.state.expanded ? 'default' : undefined, onChange: this.updateText, value: this.state.expanded ? this.state.textWhenExpanded : this.state.text, id: `text-input-${id}`, \"aria-label\": textAriaLabel }, (isCode && { dir: 'ltr' }))),\n                        React.createElement(ClipboardCopyButton, { exitDelay: exitDelay, entryDelay: entryDelay, maxWidth: maxWidth, position: position, id: `copy-button-${id}`, textId: `text-input-${id}`, \"aria-label\": hoverTip, onClick: (event) => {\n                                onCopy(event, this.state.expanded ? this.state.textWhenExpanded : this.state.text);\n                                this.setState({ copied: true });\n                            }, onTooltipHidden: () => this.setState({ copied: false }) }, this.state.copied ? clickTip : hoverTip)),\n                    this.state.expanded && (React.createElement(ClipboardCopyExpanded, { isReadOnly: isReadOnly, isCode: isCode, id: `content-${id}`, onChange: this.updateTextWhenExpanded }, this.state.text))))))));\n        };\n        const text = Array.isArray(this.props.children) ? this.props.children.join('') : this.props.children;\n        this.state = {\n            text,\n            expanded: this.props.isExpanded,\n            copied: false,\n            textWhenExpanded: text\n        };\n    }\n}\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline',\n    position: TooltipPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1500,\n    entryDelay: 300,\n    onCopy: clipboardCopyFunc,\n    onChange: () => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content',\n    additionalActions: null,\n    ouiaSafe: true\n};\nexport { ClipboardCopy };\n//# sourceMappingURL=ClipboardCopy.js.map"],"sourceRoot":""}