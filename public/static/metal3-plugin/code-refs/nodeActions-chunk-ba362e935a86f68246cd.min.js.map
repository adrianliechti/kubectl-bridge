{"version":3,"sources":["webpack:///./public/components/modals/confirm-modal.jsx","webpack:///./packages/metal3-plugin/src/components/maintenance/actions.tsx","webpack:///./packages/metal3-plugin/src/components/modals/StopNodeMaintenanceModal.tsx","webpack:///./packages/metal3-plugin/src/components/modals/StartNodeMaintenanceModal.tsx","webpack:///./packages/metal3-plugin/src/k8s/requests/node-maintenance/index.ts","webpack:///./packages/metal3-plugin/src/k8s/objects/node-maintenance/index.ts"],"names":["ConfirmModal","props","super","this","_submit","bind","_cancel","cancel","event","preventDefault","handlePromise","executeFn","supressNotifications","then","close","title","titleKey","message","messageKey","btnText","btnTextKey","cancelText","cancelTextKey","submitDanger","t","onSubmit","name","className","errorMessage","state","inProgress","submitText","propTypes","isRequired","confirmModal","useNodeMaintenanceActions","resource","maintenanceModel","maintenances","loading","loadError","isList","groupVersionKind","kind","version","apiVersion","group","apiGroup","namespaced","nodeMaintenance","metadata","action","id","label","cta","nodeName","insertBefore","reason","reasonLabel","ns","getMaintenanceModel","cephClusterResource","StartNodeMaintenanceModal","model","setReason","cephClusters","loaded","cephCluster","cephClusterHealthy","status","ceph","health","promise","hasGutter","fieldId","type","value","onChange","_event","variant","isInline","submitDisabled","startNodeMaintenanceModal","startNodeMaintenance","buildNodeMaintenance","generateName","spec"],"mappings":"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","file":"metal3-plugin/code-refs/nodeActions-chunk-ba362e935a86f68246cd.min.js","sourcesContent":["import * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport * as PropTypes from 'prop-types';\n\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent } from '../utils';\n\nclass ConfirmModal extends PromiseComponent {\n  constructor(props) {\n    super(props);\n    this._submit = this._submit.bind(this);\n    this._cancel = this.props.cancel.bind(this);\n  }\n\n  _submit(event) {\n    event.preventDefault();\n\n    this.handlePromise(\n      this.props.executeFn(null, {\n        supressNotifications: true,\n      }),\n    ).then(this.props.close);\n  }\n\n  render() {\n    const {\n      title,\n      titleKey,\n      message,\n      messageKey,\n      btnText,\n      btnTextKey,\n      cancelText,\n      cancelTextKey,\n      submitDanger,\n    } = this.props;\n\n    return (\n      <Translation>\n        {(t) => (\n          <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n            <ModalTitle>{titleKey ? t(titleKey) : title}</ModalTitle>\n            <ModalBody>{messageKey ? t(messageKey) : message}</ModalBody>\n            <ModalSubmitFooter\n              errorMessage={this.state.errorMessage}\n              inProgress={this.state.inProgress}\n              submitText={btnTextKey ? t(btnTextKey) : btnText || t('Confirm')}\n              cancel={this._cancel}\n              cancelText={cancelTextKey ? t(cancelTextKey) : cancelText || t('Cancel')}\n              submitDanger={submitDanger}\n            />\n          </form>\n        )}\n      </Translation>\n    );\n  }\n}\nConfirmModal.propTypes = {\n  btnText: PropTypes.node,\n  btnTextKey: PropTypes.string,\n  cancel: PropTypes.func.isRequired,\n  cancelText: PropTypes.node,\n  cancelTextKey: PropTypes.string,\n  close: PropTypes.func.isRequired,\n  executeFn: PropTypes.func.isRequired,\n  message: PropTypes.node,\n  messageKey: PropTypes.string,\n  title: PropTypes.node,\n  titleKey: PropTypes.string,\n  submitDanger: PropTypes.bool,\n};\n\nexport const confirmModal = createModalLauncher(ConfirmModal);\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Action, ExtensionHook, K8sResourceCommon } from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { useMaintenanceCapability } from '../../hooks/useMaintenanceCapability';\nimport { findNodeMaintenance } from '../../selectors';\nimport { startNodeMaintenanceModal } from '../modals/StartNodeMaintenanceModal';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\n\nexport const useNodeMaintenanceActions: ExtensionHook<Action[], NodeKind> = (resource) => {\n  const { t } = useTranslation();\n  const [maintenanceModel] = useMaintenanceCapability();\n\n  const [maintenances, loading, loadError] = useK8sWatchResource<K8sResourceCommon[]>({\n    isList: true,\n    groupVersionKind: {\n      kind: maintenanceModel.kind,\n      version: maintenanceModel.apiVersion,\n      group: maintenanceModel.apiGroup,\n    },\n    namespaced: false,\n  });\n\n  const actions = React.useMemo(() => {\n    const nodeMaintenance = findNodeMaintenance(maintenances, resource.metadata.name);\n\n    let action: Action = {\n      id: 'start-node-maintenance',\n      label: t('metal3-plugin~Start Maintenance'),\n      cta: () => startNodeMaintenanceModal({ nodeName: resource.metadata.name }),\n      insertBefore: 'edit-labels',\n    };\n\n    if (nodeMaintenance) {\n      action = {\n        id: 'stop-node-maintenance',\n        label: t('metal3-plugin~Stop Maintenance'),\n        cta: () => stopNodeMaintenanceModal(nodeMaintenance, t),\n        insertBefore: 'edit-labels',\n      };\n    }\n    return [action];\n  }, [maintenances, resource.metadata.name, t]);\n\n  return [actions, loading, loadError];\n};\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { Trans } from 'react-i18next';\nimport { confirmModal } from '@console/internal/components/modals/confirm-modal';\nimport { k8sKill, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  NodeMaintenanceModel,\n  NodeMaintenanceKubevirtBetaModel,\n  NodeMaintenanceKubevirtAlphaModel,\n} from '../../models';\nimport { getNodeMaintenanceReason, getNodeMaintenanceNodeName } from '../../selectors';\n\nconst getMaintenanceModel = (nodeMaintenance: K8sResourceKind) => {\n  if (\n    nodeMaintenance.apiVersion ===\n    `${NodeMaintenanceModel.apiGroup}/${NodeMaintenanceModel.apiVersion}`\n  ) {\n    return NodeMaintenanceModel;\n  }\n  if (\n    nodeMaintenance.apiVersion ===\n    `${NodeMaintenanceKubevirtBetaModel.apiGroup}/${NodeMaintenanceKubevirtBetaModel.apiVersion}`\n  ) {\n    return NodeMaintenanceKubevirtBetaModel;\n  }\n  return NodeMaintenanceKubevirtAlphaModel;\n};\n\nconst stopNodeMaintenanceModal = (nodeMaintenance: K8sResourceKind, t: TFunction) => {\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const reasonLabel = reason ? `(${reason})` : '';\n  const nodeName = getNodeMaintenanceNodeName(nodeMaintenance);\n  return confirmModal({\n    title: t('metal3-plugin~Stop maintenance'),\n    message: (\n      <Trans t={t} ns=\"metal3-plugin\">\n        Are you sure you want to stop maintenance <strong>{reasonLabel}</strong> on node{' '}\n        <strong>{nodeName}</strong>?\n      </Trans>\n    ),\n    btnText: t('metal3-plugin~Stop maintenance'),\n    executeFn: () => k8sKill(getMaintenanceModel(nodeMaintenance), nodeMaintenance),\n  });\n};\n\nexport default stopNodeMaintenanceModal;\n","import * as React from 'react';\nimport { Alert, FormGroup, Stack, StackItem, TextInput } from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { withHandlePromise, HandlePromiseProps } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { useMaintenanceCapability } from '../../hooks/useMaintenanceCapability';\nimport { startNodeMaintenance } from '../../k8s/requests/node-maintenance';\nimport { CephClusterModel } from '../../models';\n\nconst cephClusterResource = {\n  kind: referenceForModel(CephClusterModel),\n  namespaced: false,\n  isList: true,\n};\n\nexport type StartNodeMaintenanceModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    nodeName: string;\n  };\n\nconst StartNodeMaintenanceModal = withHandlePromise<StartNodeMaintenanceModalProps>((props) => {\n  const { t } = useTranslation();\n  const { nodeName, inProgress, errorMessage, handlePromise, close, cancel } = props;\n  const [model] = useMaintenanceCapability();\n\n  const [reason, setReason] = React.useState('');\n\n  const submit = (event) => {\n    event.preventDefault();\n    const promise = startNodeMaintenance(nodeName, reason, model);\n    return handlePromise(promise, close);\n  };\n\n  const [cephClusters, loaded] = useK8sWatchResource<K8sResourceKind[]>(cephClusterResource);\n  const cephCluster = cephClusters?.[0];\n  const cephClusterHealthy = cephCluster?.status?.ceph?.health === 'HEALTH_OK';\n\n  const action = t('metal3-plugin~Start Maintenance');\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{action}</ModalTitle>\n      <ModalBody>\n        <Stack hasGutter>\n          <StackItem>\n            {t(\n              'metal3-plugin~All managed workloads will be moved off of this node. New workloads and data will not be added to this node until maintenance is stopped.',\n            )}\n          </StackItem>\n          <StackItem>\n            <Trans ns=\"metal3-plugin\">\n              If the node does not exit maintenance within <strong>30 minutes</strong>, the cluster\n              will automatically rebuild the node{\"'\"}s data using replicated copies\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <FormGroup label=\"Reason\" fieldId=\"node-maintenance-reason\">\n              <TextInput\n                type=\"text\"\n                id=\"node-maintenance-reason\"\n                value={reason}\n                onChange={(_event, value) => setReason(value)}\n              />\n            </FormGroup>\n          </StackItem>\n          {!!cephCluster && !cephClusterHealthy && (\n            <StackItem>\n              <Alert\n                variant=\"warning\"\n                title={t('metal3-plugin~The Ceph storage cluster is not in a healthy state.')}\n                isInline\n              >\n                {t(\n                  'metal3-plugin~Maintenance should not be started until the health of the storage cluster is restored.',\n                )}\n              </Alert>\n            </StackItem>\n          )}\n        </Stack>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitDisabled={!loaded}\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={action}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const startNodeMaintenanceModal = createModalLauncher(StartNodeMaintenanceModal);\n","import { k8sCreate, K8sKind } from '@console/internal/module/k8s';\nimport { buildNodeMaintenance } from '../../objects/node-maintenance';\n\nexport const startNodeMaintenance = (nodeName: string, reason: string, model: K8sKind) => {\n  return k8sCreate(model, buildNodeMaintenance({ nodeName, reason, model }));\n};\n","import { apiVersionForModel, K8sKind } from '@console/internal/module/k8s';\n\nexport const buildNodeMaintenance = ({\n  generateName,\n  nodeName,\n  reason,\n  model,\n}: {\n  nodeName: string;\n  model: K8sKind;\n  generateName?: string;\n  reason?: string;\n}) => ({\n  apiVersion: apiVersionForModel(model),\n  kind: model.kind,\n  metadata: {\n    generateName: `${generateName || nodeName}-`,\n  },\n  spec: {\n    nodeName,\n    reason,\n  },\n});\n"],"sourceRoot":""}