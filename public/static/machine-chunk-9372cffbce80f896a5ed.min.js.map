{"version":3,"sources":["webpack:///./public/components/machine.tsx","webpack:///./packages/console-app/src/components/nodes/NodeIPList.tsx"],"names":["common","factory","menuActions","getExtensionsActionsForKind","machineReference","tableColumnInfo","className","id","columnClass","getMachineProviderState","obj","status","providerStatus","instanceState","MachineTableRow","activeColumnIDs","nodeName","region","zone","providerState","kind","name","metadata","namespace","actions","resource","MachineDetails","machineRole","instanceType","t","text","label","path","ips","expand","conditions","MachineList","props","machineTableColumns","title","sort","transforms","data","direction","columns","Row","MachinePage","selector","showTitle","hideLabelFilter","hideNameLabelFilters","hideColumnManagement","isExactSearch","machines","loaded","loadError","isList","machineFilter","type","filter","machine","filteredData","onFilterChange","labelPluralKey","undefined","groupVersionKind","unfilteredData","MachineDetailsPage","pages","details","editYaml","events","getResourceStatus","map","address","key","replace"],"mappings":"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","file":"machine-chunk-9372cffbce80f896a5ed.min.js","sourcesContent":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport {\n  getMachineAddresses,\n  getMachineInstanceType,\n  getMachineNodeName,\n  getMachineRegion,\n  getMachineRole,\n  getMachineZone,\n  Status,\n  getMachinePhase,\n} from '@console/shared';\nimport { ListPageBody, RowProps, TableColumn } from '@console/dynamic-plugin-sdk';\nimport { MachineModel } from '../models';\nimport { MachineKind, referenceForModel, Selector } from '../module/k8s';\nimport { Conditions } from './conditions';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { useExactSearch } from '@console/app/src/components/user-preferences/search';\nimport { DetailsPage } from './factory';\nimport ListPageFilter from './factory/ListPage/ListPageFilter';\nimport ListPageHeader from './factory/ListPage/ListPageHeader';\nimport { useListPageFilter } from './factory/ListPage/filter-hook';\nimport ListPageCreate from './factory/ListPage/ListPageCreate';\nimport {\n  DetailsItem,\n  Kebab,\n  NodeLink,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  navFactory,\n} from './utils';\nimport { ResourceEventStream } from './events';\nimport { useK8sWatchResource } from './utils/k8s-watch-hook';\nimport VirtualizedTable, { TableData } from './factory/Table/VirtualizedTable';\nimport { sortResourceByValue } from './factory/Table/sort';\nimport { useActiveColumns } from './factory/Table/active-columns-hook';\nimport { tableFilters } from './factory/table-filters';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(MachineModel), ...common];\nexport const machineReference = referenceForModel(MachineModel);\n\nconst tableColumnInfo = [\n  { className: '', id: 'name' },\n  { className: '', id: 'namespace' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-sm'), id: 'nodeRef' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-md'), id: 'phase' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'provider' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-xl'), id: 'region' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-xl'), id: 'avail' },\n  { className: Kebab.columnClass, id: '' },\n];\n\nconst getMachineProviderState = (obj: MachineKind): string =>\n  obj?.status?.providerStatus?.instanceState;\n\nconst MachineTableRow: React.FC<RowProps<MachineKind>> = ({ obj, activeColumnIDs }) => {\n  const nodeName = getMachineNodeName(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <>\n      <TableData\n        {...tableColumnInfo[0]}\n        className={classNames(tableColumnInfo[0].className, 'co-break-word')}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <ResourceLink\n          kind={machineReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        {...tableColumnInfo[1]}\n        className={classNames(tableColumnInfo[1].className, 'co-break-word')}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData {...tableColumnInfo[2]} activeColumnIDs={activeColumnIDs}>\n        {nodeName ? <NodeLink name={nodeName} /> : '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[3]} activeColumnIDs={activeColumnIDs}>\n        <Status status={getMachinePhase(obj)} />\n      </TableData>\n      <TableData {...tableColumnInfo[4]} activeColumnIDs={activeColumnIDs}>\n        {providerState ?? '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[5]} activeColumnIDs={activeColumnIDs}>\n        {region || '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[6]} activeColumnIDs={activeColumnIDs}>\n        {zone || '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[7]} activeColumnIDs={activeColumnIDs}>\n        <ResourceKebab actions={menuActions} kind={machineReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nconst MachineDetails: React.SFC<MachineDetailsProps> = ({ obj }: { obj: MachineKind }) => {\n  const nodeName = getMachineNodeName(obj);\n  const machineRole = getMachineRole(obj);\n  const instanceType = getMachineInstanceType(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Machine details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <DetailsItem label={t('public~Phase')} obj={obj} path=\"status.phase\">\n                  <Status status={getMachinePhase(obj)} />\n                </DetailsItem>\n                <DetailsItem\n                  label={t('public~Provider state')}\n                  obj={obj}\n                  path=\"status.providerStatus.instanceState\"\n                >\n                  {providerState}\n                </DetailsItem>\n                {nodeName && (\n                  <>\n                    <dt>{t('public~Node')}</dt>\n                    <dd>\n                      <NodeLink name={nodeName} />\n                    </dd>\n                  </>\n                )}\n                {machineRole && (\n                  <>\n                    <dt>{t('public~Machine role')}</dt>\n                    <dd>{machineRole}</dd>\n                  </>\n                )}\n                {instanceType && (\n                  <>\n                    <dt>{t('public~Instance type')}</dt>\n                    <dd>{instanceType}</dd>\n                  </>\n                )}\n                {region && (\n                  <>\n                    <dt>{t('public~Region')}</dt>\n                    <dd>{region}</dd>\n                  </>\n                )}\n                {zone && (\n                  <>\n                    <dt>{t('public~Availability zone')}</dt>\n                    <dd>{zone}</dd>\n                  </>\n                )}\n                <dt>{t('public~Machine addresses')}</dt>\n                <dd>\n                  <NodeIPList ips={getMachineAddresses(obj)} expand />\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={obj.status?.providerStatus?.conditions} />\n      </div>\n    </>\n  );\n};\n\ntype MachineListProps = {\n  data: MachineKind[];\n  unfilteredData: MachineKind[];\n  loaded: boolean;\n  loadError: any;\n};\n\nexport const MachineList: React.FC<MachineListProps> = (props) => {\n  const { t } = useTranslation();\n\n  const machineTableColumns = React.useMemo<TableColumn<MachineKind>[]>(\n    () => [\n      {\n        title: t('public~Name'),\n        sort: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[0].className },\n        id: tableColumnInfo[0].id,\n      },\n      {\n        title: t('public~Namespace'),\n        sort: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[1].className },\n        id: tableColumnInfo[1].id,\n      },\n      {\n        title: t('public~Node'),\n        sort: 'status.nodeRef.name',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[2].className },\n        id: tableColumnInfo[2].id,\n      },\n      {\n        title: t('public~Phase'),\n        sort: (data, direction) => data.sort(sortResourceByValue(direction, getMachinePhase)),\n        transforms: [sortable],\n        props: { className: tableColumnInfo[3].className },\n        id: tableColumnInfo[3].id,\n      },\n      {\n        title: t('public~Provider state'),\n        sort: 'status.providerStatus.instanceState',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[4].className },\n        id: tableColumnInfo[4].id,\n      },\n      {\n        title: t('public~Region'),\n        sort: \"metadata.labels['machine.openshift.io/region']\",\n        transforms: [sortable],\n        props: { className: tableColumnInfo[5].className },\n        id: tableColumnInfo[5].id,\n      },\n      {\n        title: t('public~Availability zone'),\n        sort: \"metadata.labels['machine.openshift.io/zone']\",\n        transforms: [sortable],\n        props: { className: tableColumnInfo[6].className },\n        id: tableColumnInfo[6].id,\n      },\n      {\n        title: '',\n        props: { className: tableColumnInfo[7].className },\n        id: tableColumnInfo[7].id,\n      },\n    ],\n    [t],\n  );\n\n  const [columns] = useActiveColumns({ columns: machineTableColumns });\n\n  return (\n    <VirtualizedTable<MachineKind>\n      {...props}\n      aria-label={t('public~Machines')}\n      label={t('public~Machines')}\n      columns={columns}\n      Row={MachineTableRow}\n    />\n  );\n};\n\nexport const MachinePage: React.FC<MachinePageProps> = ({\n  selector,\n  namespace,\n  showTitle = true,\n  hideLabelFilter,\n  hideNameLabelFilters,\n  hideColumnManagement,\n}) => {\n  const { t } = useTranslation();\n  const [isExactSearch] = useExactSearch();\n\n  const [machines, loaded, loadError] = useK8sWatchResource<MachineKind[]>({\n    kind: referenceForModel(MachineModel),\n    isList: true,\n    selector,\n    namespace,\n  });\n\n  // FIXME - there isn't a type for a simple filter like this nor is there an easy way to add this type\n  const machineFilter = [{ type: 'name', filter: tableFilters(isExactSearch).machine }];\n  //@ts-ignore\n  const [data, filteredData, onFilterChange] = useListPageFilter(machines, machineFilter);\n\n  return (\n    <>\n      <ListPageHeader title={showTitle ? t(MachineModel.labelPluralKey) : undefined}>\n        <ListPageCreate groupVersionKind={referenceForModel(MachineModel)}>\n          {t('public~Create machine')}\n        </ListPageCreate>\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter\n          data={data}\n          loaded={loaded}\n          onFilterChange={onFilterChange}\n          hideNameLabelFilters={hideNameLabelFilters}\n          hideLabelFilter={hideLabelFilter}\n          hideColumnManagement={hideColumnManagement}\n        />\n        <MachineList\n          data={filteredData}\n          unfilteredData={machines}\n          loaded={loaded}\n          loadError={loadError}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\nexport const MachineDetailsPage: React.SFC = (props) => (\n  <DetailsPage\n    {...props}\n    kind={machineReference}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(MachineDetails),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n    getResourceStatus={getMachinePhase}\n  />\n);\n\nexport type MachineDetailsProps = {\n  obj: MachineKind;\n};\n\nexport type MachinePageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: Selector;\n  hideLabelFilter?: boolean;\n  hideNameLabelFilters?: boolean;\n  hideColumnManagement?: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { NodeAddress } from '@console/dynamic-plugin-sdk/src/extensions/console-types';\nimport { DetailPropertyList, DetailPropertyListItem } from '@console/shared';\n\ntype NodeIPListProps = {\n  ips: NodeAddress[];\n  expand?: boolean;\n};\n\nconst NodeIPList: React.FC<NodeIPListProps> = ({ ips, expand = false }) => (\n  <DetailPropertyList>\n    {_.sortBy(ips, ['type']).map(\n      ({ type, address }) =>\n        address &&\n        (expand || type === 'InternalIP') && (\n          <DetailPropertyListItem\n            key={`{${type}/${address}`}\n            title={type.replace(/([a-z])([A-Z])/g, '$1 $2')}\n          >\n            {address}\n          </DetailPropertyListItem>\n        ),\n    )}\n  </DetailPropertyList>\n);\n\nexport default NodeIPList;\n"],"sourceRoot":""}