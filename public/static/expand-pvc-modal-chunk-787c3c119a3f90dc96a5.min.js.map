{"version":3,"sources":["webpack:///./public/components/modals/expand-pvc-modal.tsx"],"names":["ExpandPVCModal","props","baseValue","resource","defaultSize","split","string","requestSizeValue","setRequestSizeValue","requestSizeUnit","setRequestSizeUnit","errorMessage","setErrorMessage","inProgress","setInProgress","t","navigate","kind","onSubmit","e","preventDefault","patch","op","path","value","storage","then","close","catch","err","message","name","className","label","ns","resourceName","metadata","required","onChange","obj","unit","defaultRequestSizeUnit","defaultRequestSizeValue","dropdownUnits","Mi","Gi","Ti","testID","minValue","submitText","cancel","expandPVCModal"],"mappings":"6FAAA,+GAkBA,MAAMA,EAAiB,aAAmBC,IACxC,MAAMC,EAAY,aAAmB,aAAoBD,EAAME,WACzDC,EAAc,KAASC,MAAM,aAA4BH,GAAWI,SACnEC,EAAkBC,GAAuB,WAAeJ,EAAY,IAAM,KAC1EK,EAAiBC,GAAsB,WAAeN,EAAY,IAAM,OACxEO,EAAcC,GAAmB,cACjCC,EAAYC,GAAiB,YAAe,IAE7C,EAAEC,GAAM,2BACRC,EAAW,yBA6BX,KAAEC,EAAI,SAAEd,GAAaF,EAQ3B,OACE,wBAAMiB,SA/BQC,IACdA,EAAEC,iBACF,MAAMC,EAAQ,CACZ,CACEC,GAAI,UACJC,KAAM,2BACNC,MAAO,CAAEC,QAAS,GAAGlB,IAAmBE,OAG5CK,GAAc,GACd,aAASb,EAAMgB,KAAMhB,EAAME,SAAUkB,GAClCK,KAAMvB,IACLW,GAAc,GACdb,EAAM0B,QACNX,EAAS,aAAgBb,EAAU,aAAaA,OAEjDyB,MAAOC,IACNjB,EAAgBiB,EAAIC,SACpBhB,GAAc,MAaMiB,KAAK,OAAOC,UAAU,iBAC5C,gBAAC,IAAU,KAAEjB,EAAE,yBAA0B,CAAEE,KAAMA,EAAKgB,SACtD,gBAAC,IAAS,KACR,yBACE,gBAAC,QAAK,CAAClB,EAAGA,EAAGmB,GAAG,U,+BACe,IAC7B,0BAAQF,UAAU,iBAAiB,CAAEG,aAAchC,EAASiC,SAASL,M,KAAkB,I,sGAK3F,yBAAOC,UAAU,6BAA6BjB,EAAE,sBAChD,gBAAC,KAAgB,CACfgB,KAAMhB,EAAE,sBACRsB,UAAQ,EACRC,SAnD8BC,IACpC/B,EAAoB+B,EAAIf,OACxBd,EAAmB6B,EAAIC,OAkDjBC,uBAAwBhC,EACxBiC,wBAAyBnC,EACzBoC,cAzBc,CACpBC,GAAI,MACJC,GAAI,MACJC,GAAI,OAuBEC,OAAO,wBACPC,SAAU5C,EAAY,MAG1B,gBAAC,IAAiB,CAChBO,aAAcA,EACdE,WAAYA,EACZoC,WAAYlC,EAAE,iBACdmC,OAAQjD,EAAMiD,YAMTC,EAAiB,YAAoBnD","file":"expand-pvc-modal-chunk-787c3c119a3f90dc96a5.min.js","sourcesContent":["import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\n\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport {\n  RequestSizeInput,\n  resourceObjPath,\n  validate,\n  withHandlePromise,\n  HandlePromiseProps,\n  convertToBaseValue,\n  humanizeBinaryBytesWithoutB,\n} from '../utils';\nimport { k8sPatch, referenceFor, K8sKind, K8sResourceKind } from '../../module/k8s/';\nimport { getRequestedPVCSize } from '@console/shared';\n\n// Modal for expanding persistent volume claims\nconst ExpandPVCModal = withHandlePromise((props: ExpandPVCModalProps) => {\n  const baseValue = convertToBaseValue(getRequestedPVCSize(props.resource));\n  const defaultSize = validate.split(humanizeBinaryBytesWithoutB(baseValue).string);\n  const [requestSizeValue, setRequestSizeValue] = React.useState(defaultSize[0] || '');\n  const [requestSizeUnit, setRequestSizeUnit] = React.useState(defaultSize[1] || 'Gi');\n  const [errorMessage, setErrorMessage] = React.useState<string>();\n  const [inProgress, setInProgress] = React.useState(false);\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const handleRequestSizeInputChange = (obj) => {\n    setRequestSizeValue(obj.value);\n    setRequestSizeUnit(obj.unit);\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    const patch = [\n      {\n        op: 'replace',\n        path: '/spec/resources/requests',\n        value: { storage: `${requestSizeValue}${requestSizeUnit}` },\n      },\n    ];\n    setInProgress(true);\n    k8sPatch(props.kind, props.resource, patch)\n      .then((resource) => {\n        setInProgress(false);\n        props.close();\n        navigate(resourceObjPath(resource, referenceFor(resource)));\n      })\n      .catch((err) => {\n        setErrorMessage(err.message);\n        setInProgress(false);\n      });\n  };\n\n  const { kind, resource } = props;\n\n  const dropdownUnits = {\n    Mi: 'MiB',\n    Gi: 'GiB',\n    Ti: 'TiB',\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{t('public~Expand {{kind}}', { kind: kind.label })}</ModalTitle>\n      <ModalBody>\n        <p>\n          <Trans t={t} ns=\"public\">\n            Increase the capacity of PVC{' '}\n            <strong className=\"co-break-word\">{{ resourceName: resource.metadata.name }}.</strong>{' '}\n            Note that capacity can't be less than the current PVC size. This can be a time-consuming\n            process.\n          </Trans>\n        </p>\n        <label className=\"control-label co-required\">{t('public~Total size')}</label>\n        <RequestSizeInput\n          name={t('public~requestSize')}\n          required\n          onChange={handleRequestSizeInputChange}\n          defaultRequestSizeUnit={requestSizeUnit}\n          defaultRequestSizeValue={requestSizeValue}\n          dropdownUnits={dropdownUnits}\n          testID=\"pvc-expand-size-input\"\n          minValue={defaultSize[0]}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={t('public~Expand')}\n        cancel={props.cancel}\n      />\n    </form>\n  );\n});\n\nexport const expandPVCModal = createModalLauncher(ExpandPVCModal);\n\nexport type ExpandPVCModalProps = {\n  kind: K8sKind;\n  resource: K8sResourceKind;\n  cancel?: () => void;\n  close: () => void;\n} & HandlePromiseProps;\n"],"sourceRoot":""}