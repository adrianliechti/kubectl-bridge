{"version":3,"sources":["webpack:///./packages/knative-plugin/src/components/overview/OverviewDetailsKnativeResourcesTab.tsx","webpack:///./packages/knative-plugin/src/utils/usePodsForRevisions.ts","webpack:///./packages/knative-plugin/src/components/overview/RoutesUrlLink.tsx","webpack:///./packages/knative-plugin/src/components/overview/RevisionsOverviewList.tsx","webpack:///./packages/knative-plugin/src/components/overview/RevisionsOverviewListItem.tsx","webpack:///./packages/knative-plugin/src/components/overview/RoutesOverviewList.tsx","webpack:///./packages/knative-plugin/src/utils/resource-overview-utils.ts","webpack:///./packages/knative-plugin/src/components/overview/KSRoutes.tsx","webpack:///./packages/knative-plugin/src/components/overview/KSRoutesOverviewListItem.tsx","webpack:///./packages/knative-plugin/src/components/overview/RoutesOverviewListItem.tsx","webpack:///./packages/knative-plugin/src/components/overview/ConfigurationsOverviewList.tsx","webpack:///./packages/knative-plugin/src/components/overview/ConfigurationsOverviewListItem.tsx"],"names":["item","className","obj","ksroutes","revisions","configurations","service","resource","getSidebarResources","usePodsForRevisions","revisionIds","namespace","loaded","setLoaded","loadError","setLoadError","pods","setPods","Array","isArray","watchedResources","deployments","isList","kind","replicaSets","resources","updateResults","updatedResources","errorKey","Object","keys","find","key","message","length","every","revisionsPods","reduce","acc","uid","associatedDeployment","data","metadata","ownerReferences","controller","depObj","apiVersion","push","debouncedUpdateResources","urls","title","map","url","endsWith","isReadOnly","hoverTip","clickTip","link","text","additionalClassName","hideSectionHeading","t","canSetTrafficDistribution","group","apiGroup","plural","verb","traffic","status","name","filteredRevisions","revWithTraffic","revWithoutTraffic","element","revisionName","slice","to","searchQuery","params","URLSearchParams","append","toString","getRevisionsLink","revLength","variant","onClick","isDisabled","revision","current","deploymentData","availableReplicas","percent","trafficPercent","standalone","size","innerRadius","outerRadius","titleComponent","style","fontSize","showTooltip","route","routeLinks","uniqueRoutes","totalPercentage","totalPercent","routeLink","filterTrafficBasedOnResource","tr","getKnativeRoutesLinks","trafficData","filter","index","tag","groupTrafficByRevision","tData","ksroute","isPrivateKSVC","labels","configuration","latestCreatedRevisionName","latestReadyRevisionName"],"mappings":"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","file":"knative-overview-chunk-5f399571f7c165f89f34.min.js","sourcesContent":["import * as React from 'react';\nimport OperatorBackedOwnerReferences from '@console/internal/components/utils';\nimport { KnativeServiceOverviewItem } from '../../topology/topology-types';\nimport ConfigurationsOverviewList from './ConfigurationsOverviewList';\nimport RevisionsOverviewList from './RevisionsOverviewList';\nimport KSRoutesOverviewList from './RoutesOverviewList';\n\ntype OverviewDetailsResourcesTabProps = {\n  item: KnativeServiceOverviewItem;\n};\n\nconst getSidebarResources = (item: KnativeServiceOverviewItem) => {\n  const { obj, ksroutes, revisions, configurations } = item;\n\n  return (\n    <>\n      <RevisionsOverviewList revisions={revisions} service={obj} />\n      <KSRoutesOverviewList ksroutes={ksroutes} resource={obj} />\n      <ConfigurationsOverviewList configurations={configurations} />\n    </>\n  );\n};\n\nconst OverviewDetailsKnativeResourcesTab: React.FC<OverviewDetailsResourcesTabProps> = ({\n  item,\n}) => (\n  <div className=\"overview__sidebar-pane-body\">\n    <OperatorBackedOwnerReferences item={item} />\n    {getSidebarResources(item)}\n  </div>\n);\n\nexport default OverviewDetailsKnativeResourcesTab;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { DeploymentModel } from '@console/internal/models';\nimport {\n  apiVersionForModel,\n  K8sResourceCommon,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport {\n  getReplicaSetsForResource,\n  PodControllerOverviewItem,\n  useDeepCompareMemoize,\n  useDebounceCallback,\n} from '@console/shared';\n\nexport const usePodsForRevisions = (\n  revisionIds: string | string[],\n  namespace: string,\n): { loaded: boolean; loadError: string; pods: PodControllerOverviewItem[] } => {\n  const [loaded, setLoaded] = React.useState<boolean>(false);\n  const [loadError, setLoadError] = React.useState<string>('');\n  const [pods, setPods] = React.useState<PodControllerOverviewItem[]>([]);\n  const revisions = useDeepCompareMemoize(Array.isArray(revisionIds) ? revisionIds : [revisionIds]);\n  const watchedResources = React.useMemo(\n    () => ({\n      deployments: {\n        isList: true,\n        kind: 'Deployment',\n        namespace,\n      },\n      replicaSets: {\n        isList: true,\n        kind: 'ReplicaSet',\n        namespace,\n      },\n      pods: {\n        isList: true,\n        kind: 'Pod',\n        namespace,\n      },\n    }),\n    [namespace],\n  );\n\n  const resources = useK8sWatchResources<{ [key: string]: K8sResourceCommon[] }>(watchedResources);\n\n  const updateResults = React.useCallback(\n    (updatedResources) => {\n      const errorKey = Object.keys(updatedResources).find((key) => updatedResources[key].loadError);\n      if (errorKey) {\n        setLoadError(updatedResources[errorKey].loadError?.message);\n        return;\n      }\n      if (\n        Object.keys(updatedResources).length > 0 &&\n        Object.keys(updatedResources).every((key) => updatedResources[key].loaded)\n      ) {\n        const revisionsPods = revisions.reduce((acc, uid) => {\n          const associatedDeployment = _.filter(\n            updatedResources?.deployments?.data,\n            ({ metadata: { ownerReferences } }) =>\n              _.some(ownerReferences, {\n                uid,\n                controller: true,\n              }),\n          );\n          if (associatedDeployment?.[0]) {\n            const depObj: K8sResourceKind = {\n              ...associatedDeployment[0],\n              apiVersion: apiVersionForModel(DeploymentModel),\n              kind: DeploymentModel.kind,\n            };\n            acc.push(...getReplicaSetsForResource(depObj, updatedResources));\n          }\n          return acc;\n        }, []);\n        setLoaded(true);\n        setLoadError(null);\n        setPods(revisionsPods);\n      }\n    },\n    [revisions],\n  );\n\n  const debouncedUpdateResources = useDebounceCallback(updateResults, 250);\n\n  React.useEffect(() => {\n    debouncedUpdateResources(resources);\n  }, [debouncedUpdateResources, resources]);\n\n  return useDeepCompareMemoize({ loaded, loadError, pods });\n};\n","import * as React from 'react';\nimport { ClipboardCopy } from '@patternfly/react-core/dist/dynamic/components/ClipboardCopy';\nimport { ExternalLinkWithCopy } from '@console/internal/components/utils';\n\nexport type RoutesUrlLinkProps = {\n  urls: string[];\n  title?: string;\n};\n\nconst RoutesUrlLink: React.FC<RoutesUrlLinkProps> = ({ urls = [], title }) =>\n  urls.length > 0 && (\n    <>\n      {title && <span className=\"text-muted\">{title}: </span>}\n      {urls.map((url) =>\n        url?.endsWith('svc.cluster.local') ? (\n          <ClipboardCopy isReadOnly hoverTip=\"Copy\" clickTip=\"Copied\">\n            {url}\n          </ClipboardCopy>\n        ) : (\n          <ExternalLinkWithCopy\n            key={url}\n            link={url}\n            text={url}\n            additionalClassName=\"co-external-link--block\"\n          />\n        ),\n      )}\n    </>\n  );\n\nexport default RoutesUrlLink;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { SidebarSectionHeading, useAccessReview } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel, RevisionModel } from '../../models';\nimport { setTrafficDistributionModal } from '../modals';\nimport RevisionsOverviewListItem from './RevisionsOverviewListItem';\nimport './RevisionsOverviewList.scss';\n\nexport type RevisionsOverviewListProps = {\n  revisions: K8sResourceKind[];\n  service: K8sResourceKind;\n  hideSectionHeading?: boolean;\n};\n\nconst MAX_REVISIONS: number = 3;\n\nconst RevisionsOverviewList: React.FC<RevisionsOverviewListProps> = ({\n  revisions,\n  service,\n  hideSectionHeading,\n}) => {\n  const { t } = useTranslation();\n  const canSetTrafficDistribution = useAccessReview({\n    group: ServiceModel.apiGroup,\n    resource: ServiceModel.plural,\n    namespace: service.metadata.namespace,\n    verb: 'update',\n  });\n\n  const namespace = service.metadata?.namespace;\n  const traffic = service.status?.traffic;\n  const name = service.metadata?.name;\n\n  const filteredRevisions: K8sResourceKind[] = React.useMemo(() => {\n    if (!revisions || !revisions.length) {\n      return [];\n    }\n    const [revWithTraffic, revWithoutTraffic] = _.partition(revisions, (element) => {\n      return traffic ? _.find(traffic, { revisionName: element.metadata?.name }) : false;\n    }).map((element) => _.sortBy(element, ['metadata.creationTimestamp']));\n    return revWithTraffic.length < MAX_REVISIONS\n      ? _.concat(revWithTraffic, revWithoutTraffic.slice(0, MAX_REVISIONS - revWithTraffic.length))\n      : revWithTraffic;\n  }, [revisions, traffic]);\n\n  const getRevisionsLink = () => {\n    const url = `/search/ns/${namespace}`;\n    const searchQuery = `serving.knative.dev/service=${name}`;\n    const params = new URLSearchParams();\n    params.append('kind', referenceForModel(RevisionModel));\n    params.append('q', searchQuery);\n    return `${url}?${params.toString()}`;\n  };\n\n  return (\n    <>\n      {!hideSectionHeading && (\n        <SidebarSectionHeading\n          text={t('knative-plugin~Revisions')}\n          className=\"revision-overview-list\"\n        >\n          {revisions?.length > MAX_REVISIONS && (\n            <Link className=\"sidebar__section-view-all\" to={getRevisionsLink()}>\n              {t('knative-plugin~View all ({{revLength}})', { revLength: revisions.length })}\n            </Link>\n          )}\n\n          {canSetTrafficDistribution && (\n            <Button\n              variant=\"secondary\"\n              onClick={() => setTrafficDistributionModal({ obj: service })}\n              isDisabled={!(revisions && revisions.length)}\n            >\n              {t('knative-plugin~Set traffic distribution')}\n            </Button>\n          )}\n        </SidebarSectionHeading>\n      )}\n      {_.isEmpty(revisions) ? (\n        <span className=\"text-muted\">\n          {t('knative-plugin~No Revisions found for this resource.')}\n        </span>\n      ) : (\n        <ul className=\"list-group\">\n          {_.map(filteredRevisions, (revision) => (\n            <RevisionsOverviewListItem\n              key={revision.metadata.uid}\n              revision={revision}\n              service={service}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default RevisionsOverviewList;\n","import * as React from 'react';\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sResourceKind, OwnerReference, referenceForModel } from '@console/internal/module/k8s';\nimport { PodStatus } from '@console/shared';\nimport { RevisionModel } from '../../models';\nimport { getTrafficByRevision } from '../../utils/get-knative-resources';\nimport { usePodsForRevisions } from '../../utils/usePodsForRevisions';\nimport RoutesUrlLink from './RoutesUrlLink';\n\nimport './RevisionsOverviewListItem.scss';\n\nexport type RevisionsOverviewListItemProps = {\n  revision: K8sResourceKind;\n  service: K8sResourceKind;\n};\n\nconst RevisionsOverviewListItem: React.FC<RevisionsOverviewListItemProps> = ({\n  revision,\n  service,\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = revision;\n  const { pods } = usePodsForRevisions(revision.metadata.uid, namespace);\n  const current = pods?.[0];\n  const deploymentData = current?.obj?.metadata.ownerReferences?.[0] || ({} as OwnerReference);\n  const availableReplicas = current?.obj?.status?.availableReplicas || '0';\n  const { urls = [], percent: trafficPercent } = getTrafficByRevision(name, service);\n  return (\n    <li className=\"list-group-item\">\n      <div className=\"row\">\n        <div className=\"col-sm-8 col-xs-9\">\n          <ResourceLink kind={referenceForModel(RevisionModel)} name={name} namespace={namespace} />\n        </div>\n        {trafficPercent && (\n          <span className=\"col-sm-4 col-xs-3 pf-v5-u-text-align-right\">{trafficPercent}</span>\n        )}\n      </div>\n      {deploymentData.name && (\n        <div className=\"odc-revision-deployment-list\">\n          <div className=\"row\">\n            <div className=\"col-sm-8 col-xs-9\">\n              <ResourceLink\n                kind={deploymentData.kind}\n                name={deploymentData.name}\n                namespace={namespace}\n              />\n            </div>\n            <div className=\"col-sm-4 col-xs-3\">\n              <div className=\"odc-revision-deployment-list__pod\">\n                <PodStatus\n                  standalone\n                  data={current ? current.pods : []}\n                  size={25}\n                  innerRadius={8}\n                  outerRadius={12}\n                  title={availableReplicas}\n                  titleComponent={<ChartLabel style={{ fontSize: '10px' }} />}\n                  showTooltip={false}\n                />\n              </div>\n            </div>\n          </div>\n          {urls.length > 0 && (\n            <div className=\"row\">\n              <div className=\"col-sm-12\">\n                <RoutesUrlLink urls={urls} />\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </li>\n  );\n};\n\nexport default RevisionsOverviewListItem;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '../../models';\nimport { RoutesOverviewListItem as routeLinkProps } from '../../types';\nimport { getKnativeRoutesLinks, groupTrafficByRevision } from '../../utils/resource-overview-utils';\nimport KSRoutes from './KSRoutes';\nimport RoutesOverviewListItem from './RoutesOverviewListItem';\n\nexport type RoutesOverviewListProps = {\n  ksroutes: K8sResourceKind[];\n  resource: K8sResourceKind;\n};\n\nconst RoutesOverviewList: React.FC<RoutesOverviewListProps> = ({ ksroutes, resource }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <SidebarSectionHeading text={t('knative-plugin~Routes')} />\n      {_.isEmpty(ksroutes) ? (\n        <span className=\"text-muted\">{t('knative-plugin~No Routes found for this resource.')}</span>\n      ) : (\n        <ul className=\"list-group\">\n          {_.map(ksroutes, (route) => {\n            const routeLinks: routeLinkProps[] = getKnativeRoutesLinks(route, resource);\n            if (resource.kind === ServiceModel.kind) {\n              return <KSRoutes key={route.metadata.uid} route={route} />;\n            }\n            if (routeLinks.length > 0) {\n              const { urls: uniqueRoutes, percent: totalPercentage } = groupTrafficByRevision(\n                route,\n                resource,\n              );\n              return (\n                <RoutesOverviewListItem\n                  key={route.metadata.uid}\n                  uniqueRoutes={uniqueRoutes}\n                  totalPercent={totalPercentage}\n                  routeLink={routeLinks[0]}\n                />\n              );\n            }\n            return null;\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default RoutesOverviewList;\n","import { K8sResourceKind, referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel as knServiceModel, RevisionModel } from '../models';\nimport { Traffic, RoutesOverviewListItem } from '../types';\n\nexport const filterTrafficBasedOnResource = (resource) => (tr: Traffic) =>\n  referenceFor(resource) === referenceForModel(knServiceModel) ||\n  (referenceFor(resource) === referenceForModel(RevisionModel) &&\n    tr.revisionName === resource.metadata.name);\n/**\n * Return the knative routes list items.\n * @param route\n * @param resource | resource can be a knative service or revision;\n */\nexport const getKnativeRoutesLinks = (\n  route: K8sResourceKind,\n  resource: K8sResourceKind,\n): RoutesOverviewListItem[] => {\n  if (!route.status) {\n    return [];\n  }\n  const {\n    metadata: { name, namespace },\n    status: { url = '', traffic: trafficData = [{ revisionName: resource.metadata.name }] },\n  } = route;\n\n  return trafficData\n    .filter(filterTrafficBasedOnResource(resource))\n    .map((traffic: Traffic, index: number) => ({\n      uid: `${traffic.revisionName}-${traffic?.tag ? traffic?.tag : 'tag'}-${index}`,\n      url,\n      percent: traffic.percent ? `${traffic.percent}%` : '',\n      name,\n      namespace,\n    }));\n};\n\n/**\n * Return the grouped knative resource by revision name.\n * @param route\n * @param resource | resource can be a knative service or revision;\n */\nexport const groupTrafficByRevision = (route: K8sResourceKind, resource: K8sResourceKind) => {\n  if (!route.status) {\n    return [];\n  }\n  const {\n    status: { traffic: trafficData = [{ revisionName: resource.metadata.name }] },\n  } = route;\n\n  const tData = trafficData.filter(filterTrafficBasedOnResource(resource)).reduce(\n    (acc, traffic: Traffic) => {\n      traffic.url && acc.urls.push(traffic.url);\n      acc.percent += traffic.percent ? traffic.percent : 0;\n      return acc;\n    },\n    {\n      urls: [],\n      percent: 0,\n    },\n  );\n  return { ...tData, percent: tData.percent ? `${tData.percent}%` : '' };\n};\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport KSRoutesOverviewListItem from './KSRoutesOverviewListItem';\n\ntype KSRoutesProps = {\n  route: K8sResourceKind;\n};\n\nconst KSRoutes: React.FC<KSRoutesProps> = ({ route }) => (\n  <>\n    <KSRoutesOverviewListItem ksroute={route} />\n  </>\n);\n\nexport default KSRoutes;\n","import * as React from 'react';\nimport { ClipboardCopy } from '@patternfly/react-core/dist/dynamic/components/ClipboardCopy';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLink, ExternalLinkWithCopy } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { PRIVATE_KNATIVE_SERVING_LABEL } from '../../const';\nimport { RouteModel } from '../../models';\n\ntype KSRoutesOverviewListItemProps = {\n  ksroute: K8sResourceKind;\n};\n\nconst KSRoutesOverviewListItem: React.FC<KSRoutesOverviewListItemProps> = ({ ksroute }) => {\n  const { t } = useTranslation();\n  const {\n    metadata: { name, namespace },\n    status,\n  } = ksroute;\n\n  const isPrivateKSVC =\n    ksroute?.metadata?.labels?.[PRIVATE_KNATIVE_SERVING_LABEL] === 'cluster-local';\n\n  return (\n    <li className=\"list-group-item\">\n      <div className=\"row\">\n        <div className=\"col-xs-12\">\n          <ResourceLink kind={referenceForModel(RouteModel)} name={name} namespace={namespace} />\n          {status?.url?.length > 0 && (\n            <>\n              <span className=\"text-muted\">{t('knative-plugin~Location:')} </span>\n              {isPrivateKSVC ? (\n                <ClipboardCopy isReadOnly hoverTip=\"Copy\" clickTip=\"Copied\">\n                  {status.url}\n                </ClipboardCopy>\n              ) : (\n                <ExternalLinkWithCopy\n                  link={status.url}\n                  text={status.url}\n                  additionalClassName=\"co-external-link--block\"\n                />\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default KSRoutesOverviewListItem;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RouteModel } from '../../models';\nimport { RoutesOverviewListItem } from '../../types';\nimport RoutesUrlLink from './RoutesUrlLink';\n\nexport type RoutesOverviewListItemProps = {\n  routeLink: RoutesOverviewListItem;\n  uniqueRoutes?: string[];\n  totalPercent?: string;\n};\n\nconst RoutesOverviewListItem: React.FC<RoutesOverviewListItemProps> = ({\n  routeLink: { url, name, namespace, percent },\n  totalPercent,\n  uniqueRoutes,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <li className=\"list-group-item\">\n      <div className=\"row\">\n        <div className=\"col-xs-10\">\n          <ResourceLink kind={referenceForModel(RouteModel)} name={name} namespace={namespace} />\n        </div>\n        {percent.length > 0 && (\n          <span className=\"col-xs-2 pf-v5-u-text-align-right\">{totalPercent || percent}</span>\n        )}\n      </div>\n      {url.length > 0 && <RoutesUrlLink urls={[url]} title={t('knative-plugin~Location')} />}\n      {uniqueRoutes?.length > 0 && (\n        <RoutesUrlLink urls={uniqueRoutes} title={t('knative-plugin~Unique Route')} />\n      )}\n    </li>\n  );\n};\n\nexport default RoutesOverviewListItem;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport ConfigurationsOverviewListItem from './ConfigurationsOverviewListItem';\n\nexport type ConfigurationsOverviewListProps = {\n  configurations: K8sResourceKind[];\n};\n\nconst ConfigurationsOverviewList: React.FC<ConfigurationsOverviewListProps> = ({\n  configurations,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <SidebarSectionHeading text={t('knative-plugin~Configurations')} />\n      {_.isEmpty(configurations) ? (\n        <span className=\"text-muted\">\n          {t('knative-plugin~No configurations found for this resource.')}\n        </span>\n      ) : (\n        <ul className=\"list-group\">\n          {_.map(configurations, (configuration) => (\n            <ConfigurationsOverviewListItem\n              key={configuration.metadata.uid}\n              configuration={configuration}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default ConfigurationsOverviewList;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { ConfigurationModel } from '../../models';\n\nexport type ConfigurationsOverviewListItemProps = {\n  configuration: K8sResourceKind;\n};\n\nconst ConfigurationsOverviewListItem: React.FC<ConfigurationsOverviewListItemProps> = ({\n  configuration: {\n    metadata: { name, namespace },\n    status: { latestCreatedRevisionName, latestReadyRevisionName },\n  },\n}) => {\n  const { t } = useTranslation();\n  return (\n    <li className=\"list-group-item\">\n      <ResourceLink\n        kind={referenceForModel(ConfigurationModel)}\n        name={name}\n        namespace={namespace}\n      />\n      <span className=\"text-muted\">{t('knative-plugin~Latest created Revision name:')} </span>\n      <span>{latestCreatedRevisionName}</span>\n      <br />\n      <span className=\"text-muted\">{t('knative-plugin~Latest ready Revision name:')} </span>\n      <span>{latestReadyRevisionName}</span>\n    </li>\n  );\n};\nexport default ConfigurationsOverviewListItem;\n"],"sourceRoot":""}