{"version":3,"sources":["webpack:///./packages/topology/src/operators/actions/serviceBindings.ts","webpack:///./packages/topology/src/operators/components/const.ts"],"names":["createServiceBinding","source","target","serviceBindingName","Promise","reject","targetName","metadata","name","namespace","sourceName","sourceGroup","apiVersion","targetGroup","serviceBinding","kind","spec","application","group","version","resource","plural","services","detectBindingResources","createServiceBindingConnection","sourceResource","getData","resources","obj","targetResource","model","then","getCreateConnector","createHints","includes","getType","TYPE_OPERATOR_BACKED_SERVICE","OPERATOR_GROUP_WIDTH","OPERATOR_GROUP_HEIGHT","OPERATOR_GROUP_PADDING"],"mappings":"6FACA,iKAYO,MAAMA,EAAuB,CAClCC,EACAC,EACAC,KAEA,IAAKF,IAAWC,GAAUD,IAAWC,EACnC,OAAOE,QAAQC,SAGjB,MAAMC,EAAaJ,EAAOK,SAASC,MAC7B,UAAEC,EAAWD,KAAME,GAAeT,EAAOM,SACzCI,EAAc,IAAQV,EAAOW,WAAY,KACzCC,EAAc,IAAQX,EAAOU,WAAY,KAEzCE,EAAiB,CACrBF,WAAY,YAAmB,KAC/BG,KAAM,IAAoBA,KAC1BR,SAAU,CACRC,KAAML,EACNM,aAEFO,KAAM,CACJC,YAAa,CACXT,KAAME,EACNQ,MAAOP,EAAY,GACnBQ,QAASR,EAAY,GACrBS,SAAU,aAAS,aAAanB,IAASoB,QAE3CC,SAAU,CACR,CACEJ,MAAOL,EAAY,GACnBM,QAASN,EAAY,GACrBE,KAAMb,EAAOa,KACbP,KAAMF,IAGViB,wBAAwB,IAI5B,OAAO,aAAU,IAAqBT,IAGlCU,EAAiC,CAACvB,EAAcC,K,QACpD,MAAMuB,EAAiBxB,EAAOyB,UAAUN,WAAsC,QAA1B,EAAAnB,EAAOyB,UAAUC,iBAAS,eAAEC,KAC1EC,EAAiB3B,EAAOwB,UAAUN,WAAsC,QAA1B,EAAAlB,EAAOwB,UAAUC,iBAAS,eAAEC,KAChF,OAAO,YAAoB,CACzBE,MAAO,aAAS,aAAaL,IAC7BxB,OAAQwB,EACRvB,OAAQ2B,IACPE,KAAK,IAAM,OAGHC,EAAqB,CAACC,EAAuBhC,EAAcC,IAEpE+B,GACAA,EAAYC,SAAS,yBACrBhC,EAAOiC,YAAc,IAEdX,EAEF,M,kCC1ET,sJAEO,MAAMY,EAA+B,0BAE/BC,EAAuB,IACvBC,EAAwB,IACxBC,EAAyB","file":"operators-service-bindings-chunk-68745c2d9c2da961aa0f.min.js","sourcesContent":["import { Node } from '@patternfly/react-topology';\nimport * as _ from 'lodash';\nimport { serviceBindingModal } from '@console/app/src/components/modals/service-binding';\nimport {\n  k8sCreate,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  apiVersionForModel,\n} from '@console/internal/module/k8s';\nimport { ServiceBindingModel } from '@console/service-binding-plugin/src/models';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from '../components/const';\n\nexport const createServiceBinding = (\n  source: K8sResourceKind,\n  target: K8sResourceKind,\n  serviceBindingName: string,\n): Promise<K8sResourceKind> => {\n  if (!source || !target || source === target) {\n    return Promise.reject();\n  }\n\n  const targetName = target.metadata.name;\n  const { namespace, name: sourceName } = source.metadata;\n  const sourceGroup = _.split(source.apiVersion, '/');\n  const targetGroup = _.split(target.apiVersion, '/');\n\n  const serviceBinding = {\n    apiVersion: apiVersionForModel(ServiceBindingModel),\n    kind: ServiceBindingModel.kind,\n    metadata: {\n      name: serviceBindingName,\n      namespace,\n    },\n    spec: {\n      application: {\n        name: sourceName,\n        group: sourceGroup[0],\n        version: sourceGroup[1],\n        resource: modelFor(referenceFor(source)).plural,\n      },\n      services: [\n        {\n          group: targetGroup[0],\n          version: targetGroup[1],\n          kind: target.kind,\n          name: targetName,\n        },\n      ],\n      detectBindingResources: true,\n    },\n  };\n\n  return k8sCreate(ServiceBindingModel, serviceBinding);\n};\n\nconst createServiceBindingConnection = (source: Node, target: Node) => {\n  const sourceResource = source.getData().resource || source.getData().resources?.obj;\n  const targetResource = target.getData().resource || target.getData().resources?.obj;\n  return serviceBindingModal({\n    model: modelFor(referenceFor(sourceResource)),\n    source: sourceResource,\n    target: targetResource,\n  }).then(() => null);\n};\n\nexport const getCreateConnector = (createHints: string[], source: Node, target: Node) => {\n  if (\n    createHints &&\n    createHints.includes('createServiceBinding') &&\n    target.getType() === TYPE_OPERATOR_BACKED_SERVICE\n  ) {\n    return createServiceBindingConnection;\n  }\n  return null;\n};\n","import { GROUP_HEIGHT, GROUP_PADDING, GROUP_WIDTH } from '../../const';\n\nexport const TYPE_OPERATOR_BACKED_SERVICE = 'operator-backed-service';\n\nexport const OPERATOR_GROUP_WIDTH = GROUP_WIDTH;\nexport const OPERATOR_GROUP_HEIGHT = GROUP_HEIGHT;\nexport const OPERATOR_GROUP_PADDING = GROUP_PADDING;\n"],"sourceRoot":""}