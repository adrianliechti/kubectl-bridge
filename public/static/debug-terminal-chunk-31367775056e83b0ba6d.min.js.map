{"version":3,"sources":["webpack:///./public/components/debug-terminal.tsx"],"names":["getDebugPod","debugPodName","podToDebug","containerName","debugPod","annotations","metadata","resourceVersion","uid","managedFields","name","ownerReferences","labels","Object","keys","filter","k","find","prefix","startsWith","reduce","res","assign","generateName","spec","restartPolicy","containers","forEach","container","command","stdin","stdinOnce","tty","args","readinessProbe","livenessProbe","host","nodeName","status","DebugTerminalError","error","description","className","variant","isInline","title","DebugTerminalInner","initialContainer","t","infoMessage","phase","containerStatuses","state","terminated","message","obj","DebugTerminal","podData","errorMessage","setErrorMessage","generatedDebugPodName","setGeneratedDebugPodName","podNamespace","namespace","podContainerName","replace","podToCreate","deleteDebugPod","podToDelete","e","console","warn","newDebugPod","closeTab","event","preventDefault","window","addEventListener","removeEventListener","loaded","err","isList","kind","DebugTerminalPage","params","podName","ns","pathname","url","detail","data","breadcrumbs","path","displayName"],"mappings":"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","file":"debug-terminal-chunk-31367775056e83b0ba6d.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useParams, useLocation } from 'react-router-dom-v5-compat';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { LoadingBox, PageHeading } from '@console/internal/components/utils';\nimport { ObjectMetadata, PodKind, k8sCreate, k8sKillByName } from '@console/internal/module/k8s';\nimport { PodExecLoader } from '@console/internal/components/pod';\nimport { PodModel } from '@console/internal/models';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n\nimport { resourcePath } from './utils/resource-link';\nimport { getBreadcrumbPath } from '@console/internal/components/utils/breadcrumbs';\nimport { isWindowsPod } from '../module/k8s/pods';\n\nconst pickWorkloadAnnotations = (\n  annotations: ObjectMetadata['annotations'],\n): ObjectMetadata['annotations'] =>\n  Object.keys(annotations)\n    .filter((k) =>\n      ['resources.workload.openshift.io/', 'target.workload.openshift.io/'].find((prefix) =>\n        k.startsWith(prefix),\n      ),\n    )\n    .reduce((res, k) => Object.assign(res, { [k]: annotations[k] }), {});\n\nconst getDebugPod = (debugPodName: string, podToDebug: PodKind, containerName: string) => {\n  const debugPod: PodKind = _.cloneDeep(podToDebug);\n  delete debugPod.metadata.resourceVersion;\n  delete debugPod.metadata.uid;\n  delete debugPod.metadata.managedFields;\n  delete debugPod.metadata.name;\n  delete debugPod.metadata.ownerReferences;\n  delete debugPod.metadata.labels;\n  debugPod.metadata.annotations = pickWorkloadAnnotations(debugPod.metadata.annotations);\n  debugPod.metadata.annotations['debug.openshift.io/source-container'] = containerName;\n  debugPod.metadata.annotations[\n    'debug.openshift.io/source-resource'\n  ] = `/v1, Resource=pods/${podToDebug?.metadata?.name}`;\n  debugPod.metadata.generateName = debugPodName;\n  debugPod.spec.restartPolicy = 'Never';\n\n  debugPod.spec.containers.forEach((container) => {\n    container.command = isWindowsPod(podToDebug) ? ['cmd'] : ['/bin/sh'];\n    container.stdin = true;\n    container.stdinOnce = true;\n    container.tty = true;\n    delete container?.args;\n    delete container?.readinessProbe;\n    delete container?.livenessProbe;\n  });\n  delete debugPod.spec.host;\n  delete debugPod.spec.nodeName;\n  delete debugPod.status;\n\n  return debugPod;\n};\n\nconst DebugTerminalError: React.FC<DebugTerminalErrorProps> = ({ error, description }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <Alert variant=\"danger\" isInline title={error}>\n        <p>{description}</p>\n      </Alert>\n    </div>\n  );\n};\n\nconst DebugTerminalInner: React.FC<DebugTerminalInnerProps> = ({ debugPod, initialContainer }) => {\n  const { t } = useTranslation();\n  const infoMessage = (\n    <Alert\n      variant=\"info\"\n      isInline\n      title={t(\n        'public~This temporary pod has a modified entrypoint command to debug a failing container. The pod will be deleted when the terminal window is closed.',\n      )}\n    />\n  );\n  switch (debugPod?.status?.phase) {\n    case 'Failed':\n    case 'Unknown':\n      return (\n        <DebugTerminalError\n          error={<>{t('public~The debug pod failed.')}</>}\n          description={\n            debugPod.status.containerStatuses?.[0]?.state?.terminated?.message ||\n            debugPod.status.message\n          }\n        />\n      );\n    case 'Running':\n      return (\n        <PodExecLoader\n          obj={debugPod}\n          initialContainer={initialContainer}\n          infoMessage={infoMessage}\n        />\n      );\n    case 'Pending':\n      return <LoadingBox>{debugPod.status.phase}</LoadingBox>;\n    default:\n      return <LoadingBox />;\n  }\n};\n\nexport const DebugTerminal: React.FC<DebugTerminalProps> = ({ podData, containerName }) => {\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [generatedDebugPodName, setGeneratedDebugPodName] = React.useState('');\n  const { t } = useTranslation();\n  const podNamespace = podData?.metadata.namespace;\n  const podContainerName = containerName || podData?.spec.containers[0].name;\n  const debugPodName = `${podData?.metadata?.name?.replace(/\\./g, '-')}-debug-`;\n  const podToCreate = React.useMemo(() => {\n    return getDebugPod(debugPodName, podData, podContainerName);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [debugPodName, podContainerName]);\n\n  React.useEffect(() => {\n    const deleteDebugPod = async (podToDelete) => {\n      try {\n        await k8sKillByName(PodModel, podToDelete, podNamespace);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Could not delete container terminal debug pod.', e);\n      }\n    };\n    let newDebugPod;\n    const closeTab = (event) => {\n      event.preventDefault();\n      deleteDebugPod(newDebugPod.metadata.name);\n    };\n    const createDebugPod = async () => {\n      try {\n        newDebugPod = await k8sCreate(PodModel, podToCreate);\n        setGeneratedDebugPodName(newDebugPod?.metadata?.name);\n      } catch (e) {\n        setErrorMessage(e.message);\n      }\n    };\n    createDebugPod();\n\n    window.addEventListener('beforeunload', closeTab);\n    return () => {\n      if (newDebugPod) {\n        deleteDebugPod(newDebugPod.metadata.name);\n      }\n      window.removeEventListener('beforeunload', closeTab);\n    };\n  }, [debugPodName, podNamespace, podToCreate]);\n\n  const [debugPod, loaded, err] = useK8sWatchResource<PodKind>(\n    generatedDebugPodName\n      ? {\n          isList: false,\n          kind: 'Pod',\n          name: generatedDebugPodName,\n          namespace: podNamespace,\n        }\n      : {},\n  );\n\n  if (errorMessage) {\n    return <DebugTerminalError error={errorMessage} />;\n  }\n\n  if (generatedDebugPodName) {\n    if (err) {\n      return <DebugTerminalError error={err.message || t('public~The debug pod failed.')} />;\n    }\n    if (loaded) {\n      return <DebugTerminalInner initialContainer={containerName} debugPod={debugPod} />;\n    }\n  }\n\n  return <LoadingBox />;\n};\n\nexport const DebugTerminalPage: React.FC<DebugTerminalPageProps> = () => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const { podName, ns, name } = params;\n  const { pathname: url } = useLocation();\n\n  const [podData, loaded, err] = useK8sWatchResource<PodKind>({\n    isList: false,\n    kind: 'Pod',\n    name: podName,\n    namespace: ns,\n  });\n\n  return (\n    <div>\n      <Helmet>\n        <title>{t('public~Debug {{name}}', { name })}</title>\n      </Helmet>\n      <PageHeading\n        detail\n        title={t('public~Debug {{name}}', { name })}\n        kind=\"Pod\"\n        obj={{ data: podData }}\n        breadcrumbs={[\n          { name: t('public~Pods'), path: getBreadcrumbPath(params, 'pods') },\n          {\n            name: podName,\n            path: resourcePath('Pod', podName, ns),\n          },\n          {\n            name: t('public~Container details'),\n            path: `${resourcePath('Pod', podName, ns)}/containers/${name}`,\n          },\n          { name: t('public~Debug container'), path: url },\n        ]}\n      />\n      {loaded && !err && <DebugTerminal podData={podData} containerName={name} />}\n      {err && <LoadingBox>{err}</LoadingBox>}\n      {!loaded && <LoadingBox />}\n    </div>\n  );\n};\n\nDebugTerminalPage.displayName = 'DebugTerminalPage';\n\ntype DebugTerminalErrorProps = {\n  error: React.ReactNode;\n  description?: string;\n};\n\ntype DebugTerminalInnerProps = {\n  debugPod: PodKind;\n  initialContainer?: string;\n};\n\ntype DebugTerminalProps = {\n  podData: PodKind;\n  containerName: string;\n};\n\ntype DebugTerminalPageProps = {\n  obj: PodKind;\n};\n"],"sourceRoot":""}