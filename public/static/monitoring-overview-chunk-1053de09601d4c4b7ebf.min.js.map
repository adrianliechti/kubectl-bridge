{"version":3,"sources":["webpack:///./packages/dev-console/src/components/monitoring/overview/MonitoringTab.tsx","webpack:///./packages/dev-console/src/components/monitoring/overview/MonitoringOverview.tsx","webpack:///./packages/dev-console/src/components/monitoring/overview/MonitoringMetrics.tsx","webpack:///./packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboardGraph.tsx","webpack:///./packages/dev-console/src/components/monitoring/queries.ts","webpack:///./packages/dev-console/src/components/monitoring/overview/MonitoringOverviewAlerts.tsx","webpack:///./packages/dev-console/src/components/monitoring/overview/monitoring-overview-alerts-utils.ts","webpack:///./packages/dev-console/src/components/monitoring/overview/MonitoringOverviewEvents.tsx"],"names":["item","monitoringAlerts","kind","metadata","uid","name","namespace","obj","podData","loadError","loaded","resources","res","isList","prop","fieldSelector","pods","forEach","pod","push","resource","props","t","resourceEvents","firingAlerts","expanded","setExpanded","length","find","events","data","onToggle","id","index","indexOf","newExpanded","slice","className","asDefinitionList","headingLevel","onClick","isExpanded","includes","isFilled","isHidden","alerts","titleText","icon","to","toLowerCase","workloadName","workloadType","q","key","title","graphType","chartType","query","humanize","byteDataType","GraphTypes","PrometheusGraphLink","ariaChartLinkLabel","queries","params","URLSearchParams","set","toString","area","timespan","pollInterval","endTime","dispatch","onZoom","from","replace","isClickable","isSelectable","actions","hasNoOffset","hideControls","defaultTimespan","defaultSamples","isStack","fixedEndTime","formatSeriesTitle","labels","showLegend","topWorkloadMetricsQueries","BinaryBytes","DecimalBytes","MonitoringOverviewAlerts","activePerspective","sortedAlerts","alert","activeAt","annotations","message","severity","alertname","rule","alertDetailsPageLink","variant","isInline","getAlertType","Critical","Info","None","Warning","e","alignSelf","default","lastTimestamp","format","Date","type","involvedObject"],"mappings":"6FAAA,mDAwDe,UA7CqC,EAAGA,WACrD,MAAM,iBAAEC,GAAqBD,GACvB,KACJE,EACAC,UAAU,IAAEC,EAAG,KAAEC,EAAI,UAAEC,IACrBN,EAAKO,KACH,QAAEC,EAAO,UAAEC,EAAS,OAAEC,GAAW,aAAeV,EAAKO,IAAKP,EAAKO,IAAIL,KAAMI,GAEzEK,EAAY,UAAc,KAC9B,MAAMC,EAAM,CACV,CACEC,QAAQ,EACRX,KAAM,QACNI,YACAQ,KAAM,iBACNC,cAAe,sBAAsBX,yBAA2BC,yBAA4BH,MAgBhG,OAZIQ,IAAWD,IAAaD,aAAO,EAAPA,EAASQ,OACnCR,EAAQQ,KAAKC,QAASC,IACpB,MAAMH,EAAgB,sBAAsBG,EAAIf,SAASC,2BAA2Bc,EAAIf,SAASE,4BAA4B,WAASH,OACtIU,EAAIO,KAAK,CACPN,QAAQ,EACRX,KAAM,QACNI,UAAWY,EAAIf,SAASG,UACxBQ,KAAMI,EAAIf,SAASC,IACnBW,oBAICH,GACN,CAACV,EAAME,EAAKC,EAAMC,EAAWI,EAAQD,EAAWD,IAEnD,OACE,gBAAC,IAAQ,CAACG,UAAWA,GACnB,gBAAC,IAAkB,CACjBS,SAAUpB,EAAKO,IACfS,MAAOR,aAAO,EAAPA,EAASQ,OAAsB,GACtCf,iBAAkBA,O,kCClD1B,gNA8Ke,IA3IgDoB,I,UAC7D,MAAM,EAAEC,GAAM,4BACR,SAAEF,EAAQ,KAAEJ,EAAI,eAAEO,EAAc,iBAAEtB,GAAqBoB,EACvDG,EAAe,aAAgBvB,IAC9BwB,EAAUC,GAAe,WAAe,CAC7C,aACIF,EAAaG,OAAS,EAAI,CAAC,qBAAuB,KAGxD,IACGJ,IACAA,EAAeb,QACfM,GAAQA,EAAKY,KAAMV,IAASG,EAAMH,EAAIf,SAASC,OAASiB,EAAMH,EAAIf,SAASC,KAAKM,QAEjF,OAAO,gBAAC,IAAU,MAGpB,IAAImB,EAAS,IAAIN,EAAeO,MAC5Bd,GACFA,EAAKC,QAASC,IACZ,MAAMV,EAAUa,EAAMH,EAAIf,SAASC,KAC/BI,GACFqB,EAAOV,QAAQX,EAAQsB,QAK7BD,EAAS,qBAAWA,GAEpB,MAAME,EAAYC,IAChB,MAAMC,EAAQR,EAASS,QAAQF,GACzBG,EACJF,GAAS,EACL,IAAIR,EAASW,MAAM,EAAGH,MAAWR,EAASW,MAAMH,EAAQ,EAAGR,EAASE,SACpE,IAAIF,EAAUO,GACpBN,EAAYS,IAGd,OACE,uBAAKE,UAAU,2BACb,gBAAC,IAAS,CACRC,kBAAkB,EAClBD,UAAU,4CACVE,aAAa,MAEZf,EAAaG,OAAS,GACrB,gBAAC,IAAa,KACZ,gBAAC,IAAe,CACda,QAAS,KACPT,EAAS,sBAEXU,WAAYhB,EAASiB,SAAS,qBAC9BV,GAAG,oBACHK,UAAU,0CAEV,gBAAC,IAAK,KACJ,gBAAC,IAAS,KAAEf,EAAE,sBACd,gBAAC,IAAS,CAACqB,UAAQ,IACnB,gBAAC,IAAS,KACR,gBAAC,IAAK,KAAE1C,EAAiB0B,WAI/B,gBAAC,IAAgB,CACfU,UAAU,uCACVL,GAAG,4BACHY,UAAWnB,EAASiB,SAAS,sBAE7B,gBAAC,IAAwB,CAACG,OAAQrB,MAKxC,gBAAC,IAAa,KACZ,gBAAC,IAAe,CACdgB,QAAS,KACPT,EAAS,YAEXU,WAAYhB,EAASiB,SAAS,WAC9BV,GAAG,WAEFV,EAAE,uBAEL,gBAAC,IAAgB,CAACU,GAAG,kBAAkBY,UAAWnB,EAASiB,SAAS,YACjEtB,EAASlB,OAAS,wBAAsBA,KACvC,gBAAC,IAAU,KACT,gBAAC,IAAgB,CACf4C,UAAW,gCAAGxB,EAAE,gCAChByB,KACE,gBAAC,IAAc,CACbV,UAAU,4CACVU,KAAM,MAGVR,aAAa,OAEf,gBAAC,IAAc,KACZjB,EAAE,wEAIP,gCACE,uBAAKe,UAAU,uDACb,gBAAC,OAAI,CACHW,GAAI,sBACgB,QAAlB,EAAA5B,aAAQ,EAARA,EAAUjB,gBAAQ,eAAEG,yEAEF,QAAlB,EAAAc,aAAQ,EAARA,EAAUjB,gBAAQ,eAAEE,aACC,QAAd,EAAAe,aAAQ,EAARA,EAAUlB,YAAI,eAAE+C,gBAAe,YAC9B,2BAET3B,EAAE,gCAGP,gBAAC,IAAc,CAACF,SAAUA,OAMlC,gBAAC,IAAa,KACZ,gBAAC,IAAe,CACdoB,QAAS,KACPT,EAAS,eAEXU,WAAYhB,EAASiB,SAAS,cAC9BV,GAAG,cAEFV,EAAE,0BAEL,gBAAC,IAAgB,CAACU,GAAG,qBAAqBY,UAAWnB,EAASiB,SAAS,eACrE,gBAAC,IAAwB,CAACb,OAAQA,U,kCCtK9C,wDAmCe,IA5BQ,EAAGT,e,UACxB,MAAM,EAAEE,GAAM,2BAEd,IAD8B,cAE5B,OAAO,KAGT,MAAMhB,EAA8B,QAAlB,EAAAc,aAAQ,EAARA,EAAUjB,gBAAQ,eAAEG,UAChC4C,EAAiC,QAAlB,EAAA9B,aAAQ,EAARA,EAAUjB,gBAAQ,eAAEE,KACnC8C,EAA6B,QAAd,EAAA/B,aAAQ,EAARA,EAAUlB,YAAI,eAAE+C,cAErC,OACE,gCACG,IAAM,YAA0B3B,GAAK8B,GACpC,gBAAC,IAAiC,CAChCC,IAAKD,EAAEE,MACPA,MAAOF,EAAEE,MACThD,UAAWA,EACXiD,UAAWH,EAAEI,UACbC,MAAOL,EAAEK,MAAM,CAAEnD,YAAW4C,eAAcC,iBAC1CO,SAAUN,EAAEM,SACZC,aAAcP,EAAEO,mB,kCC5B1B,IAcYC,EAdZ,gHAcA,SAAYA,GACV,cACA,cAFF,CAAYA,MAAU,KAKtB,MAAMC,EAAsB,EAAGJ,QAAOnD,YAAWwD,yBAC/C,MAAM,EAAExC,GAAM,2BACRyC,EAAU,IAAU,IAAYN,IACtC,IAAKM,EAAQpC,OACX,OAAO,KAET,MAAMqC,EAAS,IAAIC,gBAEnB,OADAF,EAAQ9C,QAAQ,CAACmC,EAAGnB,IAAU+B,EAAOE,IAAI,QAAQjC,EAASmB,IAExD,gBAAC,OAAI,cACSU,EACZd,GAAI,sBAAsB1C,aAAqB0D,EAAOG,cAErD7C,EAAE,wBAkFM,IA9DkE,EAC/EmC,QACAnD,YACAgD,QACAC,YAAYK,EAAWQ,KACvBC,WACAC,eACAC,cAEA,MAAM,EAAEjD,GAAM,2BACRkD,EAAW,wBACXC,EAAS,cACb,CAACC,EAAM1B,KACLwB,EAAS,YAAqBxB,EAAI,QAClCwB,EAAS,YAAsBxB,EAAK0B,EAAM,SAE5C,CAACF,IAEH,OACE,gBAAC,IAAI,CACHnC,UAAU,6DAA4D,YAC3DiB,EAAML,cAAc0B,QAAQ,OAAQ,KAC/CC,aAAW,EACXC,cAAY,GAEZ,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gBAACjB,EAAmB,CAClBvD,UAAWA,EACXmD,MAAOA,EACPK,mBAAoBxC,EAAE,wCAAyC,CAC7DgC,YAINyB,aAAa,EACb1C,UAAW,8BAGb,gBAAC,IAAS,KAAEiB,IAEd,gBAAC,IAAQ,KACP,gBAAC,eAAY,CACX0B,cAAY,EACZC,gBAhDgB,KAiDhBC,eAhDc,GAiDd5E,UAAWA,EACXyD,QAAS,CAACN,GACV0B,QAAS5B,IAAcK,EAAWQ,KAClCC,SAAUA,EACVC,aAAcA,EACdc,aAAcb,EACdc,kBAAoBC,GAAWA,EAAOpE,IACtCuD,OAAQA,EACRc,YAAU,Q,yDC1GpB,sCAkBY3B,EAlBZ,mCAkBA,SAAYA,GACV,cACA,cAFF,CAAYA,MAAU,KAKf,MA+FM4B,EAA6BlE,GAAoC,CAC5E,CACEgC,MAAOhC,EAAE,wBACTkC,UAAWI,EAAWQ,KACtBV,SAAU,KACVC,aAAc,IAAc8B,YAC5BhC,MAAO,IACL,yVAKJ,CACEH,MAAOhC,EAAE,2BACTkC,UAAWI,EAAWQ,KACtBV,SAAU,KACVC,aAAc,IAAc8B,YAC5BhC,MAAO,IACL,oUAKJ,CACEH,MAAOhC,EAAE,gCACTkC,UAAWI,EAAWQ,KACtBV,SAAU,KACVC,aAAc,IAAc+B,aAC5BjC,MAAO,IACL,oU,kCCpJN,sFAeA,MAAMkC,EAAoE,EAAG9C,aAC3E,MAAO+C,GAAqB,eACtBC,EAAe,aAAqBhD,GAE1C,OACE,uBAAKR,UAAU,kCACZ,IAAMwD,EAAeC,IACpB,MAAM,SACJC,EACAC,aAAa,QAAEC,GACfX,QAAQ,SAAEY,EAAQ,UAAEC,EAAS,UAAE7F,GAC/B8F,MAAM,KAAE/F,EAAI,GAAE2B,IACZ8D,EACEO,EACkB,UAAtBT,EACI,sBAAsB5D,KAAM,YAAe8D,EAAMR,UACjD,sBAAsBhF,YAAoB0B,KAAM,YAAe8D,EAAMR,UAC3E,OACE,gBAAC,IAAK,CACJgB,QAAS,YAAaJ,GACtBK,UAAQ,EACRjD,MAAO,gBAAC,OAAI,CAACN,GAAIqD,GAAuBhG,GACxCgD,IAAK,GAAG8C,KAAanE,KAEpBiE,EACD,uBAAK5D,UAAU,6CACb,yBAAOA,UAAU,kBAAkB,YAAQ0D,UAU1C,O,kCCnDf,8CAEO,MAAMS,EAAgBN,IAC3B,OAAQA,GACN,KAAK,IAAcO,SACjB,MAAO,SAET,KAAK,IAAcC,KACnB,KAAK,IAAcC,KACjB,MAAO,OAET,KAAK,IAAcC,QACnB,QACE,MAAO,a,yDCbb,oGAoDe,IArC2D,EAAG/E,aAC3E,MAAM,EAAEP,GAAM,2BACd,OACE,uBAAKe,UAAU,yBACX,IAAUR,GA2BV,uBAAKQ,UAAU,kBAAkBf,EAAE,2CA1BnC,IAAMO,EAASgF,GAEX,uBAAKxE,UAAU,oCAAoCgB,IAAKwD,EAAE1G,SAASC,KACjE,gBAAC,IAAI,CAAC0G,UAAW,CAAEC,QAAS,sBAC1B,gBAAC,IAAQ,CAACzD,MAAOuD,EAAEG,cAAe3E,UAAU,kBACzC,IAAc4E,OAAO,IAAIC,KAAK,sBAAYL,MAEjC,YAAXA,EAAEM,MACD,gBAAC,IAAQ,KACP,gBAAC,KAA6B,CAAC9E,UAAU,yCAG7C,gBAAC,IAAQ,KACP,gBAAC,KAAY,CACXnC,KAAM,aAAa2G,EAAEO,gBACrB9G,UAAWuG,EAAEO,eAAe9G,UAC5BD,KAAMwG,EAAEO,eAAe/G,KACvBiD,MAAOuD,EAAEO,eAAehH,QAI9B,uBAAKiC,UAAU,wCAAwCwE,EAAEZ,c","file":"monitoring-overview-chunk-1053de09601d4c4b7ebf.min.js","sourcesContent":["import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { PodModel } from '@console/internal/models';\nimport { PodKind } from '@console/internal/module/k8s';\nimport { OverviewItem, usePodsWatcher } from '@console/shared';\nimport MonitoringOverview from './MonitoringOverview';\n\ntype MonitoringTabProps = {\n  item: OverviewItem;\n};\n\nconst MonitoringTab: React.FC<MonitoringTabProps> = ({ item }) => {\n  const { monitoringAlerts } = item;\n  const {\n    kind,\n    metadata: { uid, name, namespace },\n  } = item.obj;\n  const { podData, loadError, loaded } = usePodsWatcher(item.obj, item.obj.kind, namespace);\n\n  const resources = React.useMemo(() => {\n    const res = [\n      {\n        isList: true,\n        kind: 'Event',\n        namespace,\n        prop: 'resourceEvents',\n        fieldSelector: `involvedObject.uid=${uid},involvedObject.name=${name},involvedObject.kind=${kind}`,\n      },\n    ];\n\n    if (loaded && !loadError && podData?.pods) {\n      podData.pods.forEach((pod) => {\n        const fieldSelector = `involvedObject.uid=${pod.metadata.uid},involvedObject.name=${pod.metadata.name},involvedObject.kind=${PodModel.kind}`;\n        res.push({\n          isList: true,\n          kind: 'Event',\n          namespace: pod.metadata.namespace,\n          prop: pod.metadata.uid,\n          fieldSelector,\n        });\n      });\n    }\n    return res;\n  }, [kind, uid, name, namespace, loaded, loadError, podData]);\n\n  return (\n    <Firehose resources={resources}>\n      <MonitoringOverview\n        resource={item.obj}\n        pods={(podData?.pods as PodKind[]) || []}\n        monitoringAlerts={monitoringAlerts}\n      />\n    </Firehose>\n  );\n};\n\nexport default MonitoringTab;\n","import * as React from 'react';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionToggle,\n  AccordionContent,\n  Split,\n  SplitItem,\n  Badge,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { Alert } from '@console/dynamic-plugin-sdk';\nimport { sortEvents } from '@console/internal/components/events';\nimport { FirehoseResult, LoadingBox } from '@console/internal/components/utils';\nimport { DeploymentConfigModel } from '@console/internal/models';\nimport { K8sResourceKind, EventKind, PodKind } from '@console/internal/module/k8s';\nimport { getFiringAlerts } from '@console/shared';\nimport WorkloadGraphs from './MonitoringMetrics';\nimport MonitoringOverviewAlerts from './MonitoringOverviewAlerts';\nimport MonitoringOverviewEvents from './MonitoringOverviewEvents';\nimport './MonitoringOverview.scss';\n\ntype MonitoringOverviewProps = {\n  resource: K8sResourceKind;\n  pods?: PodKind[];\n  resourceEvents?: FirehoseResult<EventKind[]>;\n  monitoringAlerts: Alert[];\n};\n\nconst MonitoringOverview: React.FC<MonitoringOverviewProps> = (props) => {\n  const { t } = useTranslation();\n  const { resource, pods, resourceEvents, monitoringAlerts } = props;\n  const firingAlerts = getFiringAlerts(monitoringAlerts);\n  const [expanded, setExpanded] = React.useState([\n    'metrics',\n    ...(firingAlerts.length > 0 ? ['monitoring-alerts'] : []),\n  ]);\n\n  if (\n    !resourceEvents ||\n    !resourceEvents.loaded ||\n    (pods && pods.find((pod) => !props[pod.metadata.uid] || !props[pod.metadata.uid].loaded))\n  ) {\n    return <LoadingBox />;\n  }\n\n  let events = [...resourceEvents.data];\n  if (pods) {\n    pods.forEach((pod) => {\n      const podData = props[pod.metadata.uid];\n      if (podData) {\n        events.push(...podData.data);\n      }\n    });\n  }\n\n  events = sortEvents(events);\n\n  const onToggle = (id: string) => {\n    const index = expanded.indexOf(id);\n    const newExpanded =\n      index >= 0\n        ? [...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length)]\n        : [...expanded, id];\n    setExpanded(newExpanded);\n  };\n\n  return (\n    <div className=\"odc-monitoring-overview\">\n      <Accordion\n        asDefinitionList={false}\n        className=\"odc-monitoring-overview__metric-accordion\"\n        headingLevel=\"h5\"\n      >\n        {firingAlerts.length > 0 && (\n          <AccordionItem>\n            <AccordionToggle\n              onClick={() => {\n                onToggle('monitoring-alerts');\n              }}\n              isExpanded={expanded.includes('monitoring-alerts')}\n              id=\"monitoring-alerts\"\n              className=\"odc-monitoring-overview__alerts-toggle\"\n            >\n              <Split>\n                <SplitItem>{t('devconsole~Alerts')}</SplitItem>\n                <SplitItem isFilled />\n                <SplitItem>\n                  <Badge>{monitoringAlerts.length}</Badge>\n                </SplitItem>\n              </Split>\n            </AccordionToggle>\n            <AccordionContent\n              className=\"odc-monitoring-overview__alerts-body\"\n              id=\"monitoring-alerts-content\"\n              isHidden={!expanded.includes('monitoring-alerts')}\n            >\n              <MonitoringOverviewAlerts alerts={firingAlerts} />\n            </AccordionContent>\n          </AccordionItem>\n        )}\n\n        <AccordionItem>\n          <AccordionToggle\n            onClick={() => {\n              onToggle('metrics');\n            }}\n            isExpanded={expanded.includes('metrics')}\n            id=\"metrics\"\n          >\n            {t('devconsole~Metrics')}\n          </AccordionToggle>\n          <AccordionContent id=\"metrics-content\" isHidden={!expanded.includes('metrics')}>\n            {resource.kind === DeploymentConfigModel.kind ? (\n              <EmptyState>\n                <EmptyStateHeader\n                  titleText={<>{t('devconsole~No metrics found')}</>}\n                  icon={\n                    <EmptyStateIcon\n                      className=\"odc-monitoring-overview__empty-state-icon\"\n                      icon={InfoCircleIcon}\n                    />\n                  }\n                  headingLevel=\"h2\"\n                />\n                <EmptyStateBody>\n                  {t('devconsole~Deployment Configuration metrics are not yet supported.')}\n                </EmptyStateBody>\n              </EmptyState>\n            ) : (\n              <>\n                <div className=\"odc-monitoring-overview__view-monitoring-dashboards\">\n                  <Link\n                    to={`/dev-monitoring/ns/${\n                      resource?.metadata?.namespace\n                    }?dashboard=grafana-dashboard-k8s-resources-workload&workload=${\n                      resource?.metadata?.name\n                    }&type=${resource?.kind?.toLowerCase()}`}\n                    data-test=\"observe-dashboards-link\"\n                  >\n                    {t('devconsole~View dashboards')}\n                  </Link>\n                </div>\n                <WorkloadGraphs resource={resource} />\n              </>\n            )}\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem>\n          <AccordionToggle\n            onClick={() => {\n              onToggle('all-events');\n            }}\n            isExpanded={expanded.includes('all-events')}\n            id=\"all-events\"\n          >\n            {t('devconsole~All events')}\n          </AccordionToggle>\n          <AccordionContent id=\"all-events-content\" isHidden={!expanded.includes('all-events')}>\n            <MonitoringOverviewEvents events={events} />\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  );\n};\n\nexport default MonitoringOverview;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { usePrometheusGate } from '@console/shared/src/hooks/usePrometheusGate';\nimport ConnectedMonitoringDashboardGraph from '../dashboard/MonitoringDashboardGraph';\nimport { topWorkloadMetricsQueries } from '../queries';\n\nconst WorkloadGraphs = ({ resource }) => {\n  const { t } = useTranslation();\n  const prometheusIsAvailable = usePrometheusGate();\n  if (!prometheusIsAvailable) {\n    return null;\n  }\n\n  const namespace = resource?.metadata?.namespace;\n  const workloadName = resource?.metadata?.name;\n  const workloadType = resource?.kind?.toLowerCase();\n\n  return (\n    <>\n      {_.map(topWorkloadMetricsQueries(t), (q) => (\n        <ConnectedMonitoringDashboardGraph\n          key={q.title}\n          title={q.title}\n          namespace={namespace}\n          graphType={q.chartType}\n          query={q.query({ namespace, workloadName, workloadType })}\n          humanize={q.humanize}\n          byteDataType={q.byteDataType}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default WorkloadGraphs;\n","import * as React from 'react';\nimport { Card, CardBody, CardHeader, CardTitle } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { dashboardsSetEndTime, dashboardsSetTimespan } from '@console/internal/actions/observe';\nimport { Humanize } from '@console/internal/components/utils';\nimport { QueryBrowser } from '@console/shared/src/components/query-browser';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport './MonitoringDashboardGraph.scss';\n\nexport enum GraphTypes {\n  area = 'Area',\n  line = 'Line',\n}\n\nconst PrometheusGraphLink = ({ query, namespace, ariaChartLinkLabel }) => {\n  const { t } = useTranslation();\n  const queries = _.compact(_.castArray(query));\n  if (!queries.length) {\n    return null;\n  }\n  const params = new URLSearchParams();\n  queries.forEach((q, index) => params.set(`query${index}`, q));\n  return (\n    <Link\n      aria-label={ariaChartLinkLabel}\n      to={`/dev-monitoring/ns/${namespace}/metrics?${params.toString()}`}\n    >\n      {t('devconsole~Inspect')}\n    </Link>\n  );\n};\n\ntype MonitoringDashboardGraphProps = {\n  title: string;\n  query: string;\n  namespace: string;\n  graphType?: GraphTypes;\n  humanize: Humanize;\n  byteDataType: ByteDataTypes;\n  timespan?: number;\n  pollInterval?: number;\n  endTime?: number;\n};\n\nconst DEFAULT_TIME_SPAN = 30 * 60 * 1000;\nconst DEFAULT_SAMPLES = 30;\n\nexport const MonitoringDashboardGraph: React.FC<MonitoringDashboardGraphProps> = ({\n  query,\n  namespace,\n  title,\n  graphType = GraphTypes.area,\n  timespan,\n  pollInterval,\n  endTime,\n}) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const onZoom = React.useCallback(\n    (from, to) => {\n      dispatch(dashboardsSetEndTime(to, 'dev'));\n      dispatch(dashboardsSetTimespan(to - from, 'dev'));\n    },\n    [dispatch],\n  );\n  return (\n    <Card\n      className=\"monitoring-dashboards__card odc-monitoring-dashboard-graph\"\n      data-test={title.toLowerCase().replace(/\\s+/g, '-')}\n      isClickable\n      isSelectable\n    >\n      <CardHeader\n        actions={{\n          actions: (\n            <PrometheusGraphLink\n              namespace={namespace}\n              query={query}\n              ariaChartLinkLabel={t('devconsole~View metrics for {{title}}', {\n                title,\n              })}\n            />\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <QueryBrowser\n          hideControls\n          defaultTimespan={DEFAULT_TIME_SPAN}\n          defaultSamples={DEFAULT_SAMPLES}\n          namespace={namespace}\n          queries={[query]}\n          isStack={graphType === GraphTypes.area}\n          timespan={timespan}\n          pollInterval={pollInterval}\n          fixedEndTime={endTime}\n          formatSeriesTitle={(labels) => labels.pod}\n          onZoom={onZoom}\n          showLegend\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default MonitoringDashboardGraph;\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport {\n  Humanize,\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n} from '@console/internal/components/utils';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\n\nexport interface MonitoringQuery {\n  query: _.TemplateExecutor;\n  chartType: GraphTypes;\n  title: string;\n  humanize: Humanize;\n  byteDataType: ByteDataTypes;\n  id?: string;\n}\n\nexport enum GraphTypes {\n  area = 'Area',\n  line = 'Line',\n}\n\nexport const metricsQuery = (t: TFunction) => ({\n  PODS_BY_CPU: t('devconsole~CPU usage'),\n  PODS_BY_MEMORY: t('devconsole~Memory usage'),\n  PODS_BY_FILESYSTEM: t('devconsole~Filesystem usage'),\n  PODS_BY_NETWORK_IN: t('devconsole~Receive bandwidth'),\n  PODS_BY_NETWORK_OUT: t('devconsole~Transmit bandwidth'),\n  RATE_OF_RECEIVED_PACKETS: t('devconsole~Rate of received packets'),\n  RATE_OF_TRANSMITTED_PACKETS: t('devconsole~Rate of transmitted packets'),\n  RATE_OF_RECEIVED_PACKETS_DROPPED: t('devconsole~Rate of received packets dropped'),\n  RATE_OF_TRANSMITTED_PACKETS_DROPPED: t('devconsole~Rate of transmitted packets dropped'),\n});\n\nexport const monitoringDashboardQueries = (t: TFunction): MonitoringQuery[] => [\n  {\n    query: _.template(\n      `sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace='<%= namespace %>'}) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~CPU usage'),\n    humanize: humanizeCpuCores,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'cpu_usage',\n  },\n  {\n    query: _.template(\n      `sum(container_memory_working_set_bytes{container!=\"\", namespace='<%= namespace %>'}) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~Memory usage'),\n    humanize: humanizeBinaryBytes,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'memory_usage',\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_receive_bytes_total{namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~Receive bandwidth'),\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'receive_bandwidth',\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_transmit_bytes_total{namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~Transmit bandwidth'),\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'transmit_bandwidth',\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_receive_packets_total{namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~Rate of received packets'),\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'rate_of_received_packets',\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_total{namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~Rate of transmitted packets'),\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'rate_of_transmitted_packets',\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_receive_packets_dropped_total{namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~Rate of received packets dropped'),\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'rate_of_received_packets_dropped',\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_dropped_total{namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: t('devconsole~Rate of transmitted packets dropped'),\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    id: 'rate_of_transmitted_packets_dropped',\n  },\n];\n\nexport const topWorkloadMetricsQueries = (t: TFunction): MonitoringQuery[] => [\n  {\n    title: t('devconsole~CPU usage'),\n    chartType: GraphTypes.area,\n    humanize: humanizeCpuCores,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    query: _.template(\n      `sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace='<%= namespace %>'}\n          * on(namespace,pod) group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{\n          namespace='<%= namespace %>', workload='<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: t('devconsole~Memory usage'),\n    chartType: GraphTypes.area,\n    humanize: humanizeBinaryBytes,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    query: _.template(\n      `sum(container_memory_working_set_bytes{namespace='<%= namespace %>', container!=\"\"}\n          * on(namespace,pod) group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{\n          namespace='<%= namespace %>', workload='<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: t('devconsole~Receive bandwidth'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_bytes_total{namespace='<%= namespace %>'}[4h])\n          * on (namespace,pod) group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{\n          namespace='<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n];\n\nexport const workloadMetricsQueries = (t: TFunction): MonitoringQuery[] => [\n  {\n    title: t('devconsole~Transmit bandwidth'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_bytes_total{namespace=~'<%= namespace %>'}[4h])\n         * on (namespace,pod) group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{\n         namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: t('devconsole~Rate of received packets'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_packets_total{namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: t('devconsole~Rate of transmitted packets'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_total{namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: t('devconsole~Rate of received packets dropped'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_packets_dropped_total{namespace=~'<%= namespace %>'}[4h])* on (namespace,pod) group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: t('devconsole~Rate of transmitted packets dropped'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_dropped_total{namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)\n      group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)\n      `,\n    ),\n  },\n  {\n    title: t('devconsole~Average Container bandwidth by Pod: received'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `avg(irate(container_network_receive_bytes_total{namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: t('devconsole~Average Container bandwidth by Pod: transmitted'),\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `avg(irate(container_network_transmit_bytes_total{namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) namespace_workload_pod:kube_pod_owner:relabel{namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n];\n\nconst getMetricsQuery = (id: string, t: TFunction): _.TemplateExecutor => {\n  const queryObject = _.find(monitoringDashboardQueries(t), (q) => q.id === id);\n  return queryObject?.query;\n};\n\nconst topMetricsQueries = (t: TFunction) => ({\n  PODS_BY_CPU: getMetricsQuery('cpu_usage', t),\n  PODS_BY_MEMORY: getMetricsQuery('memory_usage', t),\n  PODS_BY_FILESYSTEM: _.template(\n    `topk(25, sort_desc(sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= namespace %>'}) BY (pod, namespace)))`,\n  ),\n  PODS_BY_NETWORK_IN: getMetricsQuery('receive_bandwidth', t),\n  PODS_BY_NETWORK_OUT: getMetricsQuery('transmit_bandwidth', t),\n  RATE_OF_RECEIVED_PACKETS: getMetricsQuery('rate_of_received_packets', t),\n  RATE_OF_TRANSMITTED_PACKETS: getMetricsQuery('rate_of_transmitted_packets', t),\n  RATE_OF_RECEIVED_PACKETS_DROPPED: getMetricsQuery('rate_of_received_packets_dropped', t),\n  RATE_OF_TRANSMITTED_PACKETS_DROPPED: getMetricsQuery('rate_of_transmitted_packets_dropped', t),\n});\n\nexport const getTopMetricsQueries = (namespace: string, t: TFunction) => ({\n  [metricsQuery(t).PODS_BY_CPU]: topMetricsQueries(t).PODS_BY_CPU({ namespace }),\n  [metricsQuery(t).PODS_BY_MEMORY]: topMetricsQueries(t).PODS_BY_MEMORY({ namespace }),\n  [metricsQuery(t).PODS_BY_FILESYSTEM]: topMetricsQueries(t).PODS_BY_FILESYSTEM({\n    namespace,\n  }),\n  [metricsQuery(t).PODS_BY_NETWORK_IN]: topMetricsQueries(t).PODS_BY_NETWORK_IN({\n    namespace,\n  }),\n  [metricsQuery(t).PODS_BY_NETWORK_OUT]: topMetricsQueries(t).PODS_BY_NETWORK_OUT({\n    namespace,\n  }),\n  [metricsQuery(t).RATE_OF_RECEIVED_PACKETS]: topMetricsQueries(t).RATE_OF_RECEIVED_PACKETS({\n    namespace,\n  }),\n  [metricsQuery(t).RATE_OF_TRANSMITTED_PACKETS]: topMetricsQueries(t).RATE_OF_TRANSMITTED_PACKETS({\n    namespace,\n  }),\n  [metricsQuery(t).RATE_OF_RECEIVED_PACKETS_DROPPED]: topMetricsQueries(\n    t,\n  ).RATE_OF_RECEIVED_PACKETS_DROPPED({\n    namespace,\n  }),\n  [metricsQuery(t).RATE_OF_TRANSMITTED_PACKETS_DROPPED]: topMetricsQueries(\n    t,\n  ).RATE_OF_TRANSMITTED_PACKETS_DROPPED({\n    namespace,\n  }),\n});\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { Alert as AlertType, useActivePerspective } from '@console/dynamic-plugin-sdk';\nimport { labelsToParams } from '@console/internal/components/monitoring/utils';\nimport { fromNow } from '@console/internal/components/utils/datetime';\nimport { sortMonitoringAlerts } from '@console/shared';\nimport { getAlertType } from './monitoring-overview-alerts-utils';\nimport './MonitoringOverviewAlerts.scss';\n\ninterface MonitoringOverviewAlertsProps {\n  alerts: AlertType[];\n}\n\nconst MonitoringOverviewAlerts: React.FC<MonitoringOverviewAlertsProps> = ({ alerts }) => {\n  const [activePerspective] = useActivePerspective();\n  const sortedAlerts = sortMonitoringAlerts(alerts);\n\n  return (\n    <div className=\"odc-monitoring-overview-alerts\">\n      {_.map(sortedAlerts, (alert: AlertType) => {\n        const {\n          activeAt,\n          annotations: { message },\n          labels: { severity, alertname, namespace },\n          rule: { name, id },\n        } = alert;\n        const alertDetailsPageLink =\n          activePerspective === 'admin'\n            ? `/monitoring/alerts/${id}?${labelsToParams(alert.labels)}`\n            : `/dev-monitoring/ns/${namespace}/alerts/${id}?${labelsToParams(alert.labels)}`;\n        return (\n          <Alert\n            variant={getAlertType(severity)}\n            isInline\n            title={<Link to={alertDetailsPageLink}>{name}</Link>}\n            key={`${alertname}-${id}`}\n          >\n            {message}\n            <div className=\"odc-monitoring-overview-alerts__timestamp\">\n              <small className=\"text-secondary\">{fromNow(activeAt)}</small>\n            </div>\n          </Alert>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const InternalMonitoringOverviewAlerts = MonitoringOverviewAlerts;\nexport default MonitoringOverviewAlerts;\n","import { AlertSeverity } from '@console/dynamic-plugin-sdk';\n\nexport const getAlertType = (severity: string): 'danger' | 'warning' | 'info' => {\n  switch (severity) {\n    case AlertSeverity.Critical: {\n      return 'danger';\n    }\n    case AlertSeverity.Info:\n    case AlertSeverity.None: {\n      return 'info';\n    }\n    case AlertSeverity.Warning:\n    default: {\n      return 'warning';\n    }\n  }\n};\n","import * as React from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { getLastTime } from '@console/internal/components/events';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { timeFormatter } from '@console/internal/components/utils/datetime';\nimport { referenceFor, EventKind } from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport './MonitoringOverviewEvents.scss';\n\ninterface MonitoringOverviewEventsProps {\n  events: EventKind[];\n}\n\nconst MonitoringOverviewEvents: React.FC<MonitoringOverviewEventsProps> = ({ events }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"odc-monitoring-events\">\n      {!_.isEmpty(events) ? (\n        _.map(events, (e: EventKind) => {\n          return (\n            <div className=\"odc-monitoring-events__event-item\" key={e.metadata.uid}>\n              <Flex alignSelf={{ default: 'alignSelfBaseline' }}>\n                <FlexItem title={e.lastTimestamp} className=\"text-secondary\">\n                  {timeFormatter.format(new Date(getLastTime(e)))}\n                </FlexItem>\n                {e.type === 'Warning' && (\n                  <FlexItem>\n                    <YellowExclamationTriangleIcon className=\"odc-monitoring-events__warning-icon\" />\n                  </FlexItem>\n                )}\n                <FlexItem>\n                  <ResourceLink\n                    kind={referenceFor(e.involvedObject)}\n                    namespace={e.involvedObject.namespace}\n                    name={e.involvedObject.name}\n                    title={e.involvedObject.uid}\n                  />\n                </FlexItem>\n              </Flex>\n              <div className=\"odc-monitoring-events__event-message\">{e.message}</div>\n            </div>\n          );\n        })\n      ) : (\n        <div className=\"text-secondary\">{t('devconsole~There are no recent events.')}</div>\n      )}\n    </div>\n  );\n};\n\nexport default MonitoringOverviewEvents;\n"],"sourceRoot":""}