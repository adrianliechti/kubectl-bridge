{"version":3,"sources":["webpack:///./public/components/storage-class.tsx","webpack:///./packages/console-app/src/components/modals/restore-pvc/restore-pvc-modal.tsx","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./public/components/storage/shared.ts","webpack:///./packages/console-app/src/components/access-modes/access-mode.tsx","webpack:///./public/components/utils/storage-class-dropdown.tsx","webpack:///./packages/console-app/src/components/volume-modes/volume-mode.tsx"],"names":["StorageClassReference","common","factory","menuActions","getExtensionsActionsForKind","isDefaultClass","storageClass","annotations","tableColumnClasses","columnClass","StorageClassDetails","obj","t","className","text","resource","label","path","StorageClassTableRow","kind","name","metadata","provisioner","reclaimPolicy","actions","StorageClassList","props","Header","title","sortField","transforms","Row","virtualize","displayName","StorageClassPage","ListComponent","canCreate","filterLabel","createProps","to","createButtonText","StorageClassDetailsPage","pages","details","editYaml","RestorePVCModal","close","cancel","errorMessage","inProgress","handlePromise","restorePVCName","setPVCName","volumeSnapshotAnnotations","snapshotBaseSize","status","restoreSize","snapshotHumanizedSize","requestedSize","setRequestedSize","value","requestedUnit","setRequestedUnit","unit","pvcSC","setPVCStorageClass","validSize","restoreAccessMode","setRestoreAccessMode","updatedProvisioner","setUpdatedProvisioner","namespace","snapshotName","pvcResource","pvcResourceLoaded","pvcResourceLoadError","spec","source","persistentVolumeClaimName","pvcStorageClassName","storageClassName","scResource","scResourceLoaded","scResourceLoadError","volumeMode","setVolumeMode","onSubmit","event","preventDefault","restorePVCTemplate","apiVersion","dataSource","apiGroup","accessModes","resources","requests","storage","ns","newPVC","push","isRequired","fieldId","type","id","onChange","_event","updatedStorageClass","filter","scObj","required","selectedKey","loaded","loadError","availableAccessModes","split","accessMode","availableVolumeMode","defaultRequestSizeUnit","defaultRequestSizeValue","dropdownUnits","isInputDisabled","variant","icon","resourceKind","hasGutter","span","timestamp","creationTimestamp","readyToUse","string","submitDisabled","submitText","useK8sGet","opts","data","setData","setLoaded","setLoadError","error","snapshotPVCStorageClassAnnotation","snapshotPVCAccessModeAnnotation","snapshotPVCVolumeModeAnnotation","initialAccessModes","initialVolumeModes","provisionerAccessModeMapping","Object","freeze","Filesystem","Block","partialMatch","getAccessModeOptions","getVolumeModeRadios","i","Ki","Mi","Gi","Ti","Pi","Ei","getProvisionerModeMapping","key","includes","getAccessModeForProvisioner","ignoreReadOnly","modeMapping","keys","map","mode","flat","Set","modes","getVolumeModeForProvisioner","getPVCAccessModes","res","find","AccessModeSelector","filterByVolumeMode","description","pvcInitialAccessMode","allowedAccessModes","setAllowedAccessModes","setAccessMode","changeAccessMode","isOpen","setIsOpen","selected","setSelected","onToggleClick","selectOptions","option","disabled","val","isDisabled","isSelected","onSelect","onOpenChange","open","toggle","toggleRef","ref","onClick","isExpanded","style","width","shouldFocusToggleOnSelect","StorageClassDropdownInnerWithTranslation","state","items","this","defaultClass","autocompleteFilter","item","getTitle","kindLabel","setState","UNSAFE_componentWillReceiveProps","nextProps","desc","unorderedItems","noStorageClass","StorageClass","default","parameters","zone","sc","reduce","acc","selectedItem","sort","forEach","nextState","describedBy","noSelection","StorageClassDropdownEntry","StorageClassDropdownNoStorageClassOption","itemsAvailableToShow","hideClassName","htmlFor","dropDownClassName","autocompletePlaceholder","dataTest","menuClassName","StorageClassDropdownInner","StorageClassDropdown","prop","isList","storageClassProperties","storageClassDescriptionLine","join","VolumeModeSelector","pvcInitialVolumeMode","allowedVolumeModes","changeVolumeMode","length","radio","currentTarget","inline","checked"],"mappings":"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","file":"restore-pvc-modal-chunk-cacfaed9b1fa353efdea.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport * as classNames from 'classnames';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport {\n  DetailsItem,\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  detailsPage,\n  navFactory,\n} from './utils';\nimport { StorageClassResourceKind, K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { StorageClassModel } from '../models';\n\nexport const StorageClassReference: K8sResourceKindReference = 'StorageClass';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(StorageClassModel), ...common];\n\nconst defaultClassAnnotation = 'storageclass.kubernetes.io/is-default-class';\nconst betaDefaultStorageClassAnnotation = 'storageclass.beta.kubernetes.io/is-default-class';\nexport const isDefaultClass = (storageClass: K8sResourceKind) => {\n  const annotations = _.get(storageClass, 'metadata.annotations') || {};\n  return (\n    annotations[defaultClassAnnotation] === 'true' ||\n    annotations[betaDefaultStorageClassAnnotation] === 'true'\n  );\n};\n\nconst tableColumnClasses = [\n  'pf-v5-u-w-42-on-md',\n  'pf-v5-u-w-42-on-md',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-16-on-md',\n  Kebab.columnClass,\n];\n\nconst StorageClassDetails: React.FC<StorageClassDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~StorageClass details')} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj}>\n              <DetailsItem label={t('public~Provisioner')} obj={obj} path=\"provisioner\" />\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <DetailsItem label={t('public~Reclaim policy')} obj={obj} path=\"reclaimPolicy\" />\n              <dt>{t('public~Default class')}</dt>\n              <dd>{isDefaultClass(obj) ? t('public~True') : t('public~False')}</dd>\n              <DetailsItem\n                label={t('public~Volume binding mode')}\n                obj={obj}\n                path=\"volumeBindingMode\"\n              />\n            </dl>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst StorageClassTableRow: React.FC<RowFunctionArgs<StorageClassResourceKind>> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink kind={StorageClassReference} name={obj.metadata.name}>\n          {isDefaultClass(obj) && (\n            <span className=\"small text-muted co-resource-item__help-text\">\n              &ndash; {t('public~Default')}\n            </span>\n          )}\n        </ResourceLink>\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        {obj.provisioner}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{obj.reclaimPolicy || '-'}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={StorageClassReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const StorageClassList: React.FC = (props) => {\n  const { t } = useTranslation();\n  const StorageClassTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Provisioner'),\n        sortField: 'provisioner',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Reclaim policy'),\n        sortField: 'reclaimPolicy',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~StorageClasses')}\n      Header={StorageClassTableHeader}\n      Row={StorageClassTableRow}\n      virtualize\n    />\n  );\n};\nStorageClassList.displayName = 'StorageClassList';\n\nexport const StorageClassPage: React.FC<StorageClassPageProps> = (props) => {\n  const createProps = {\n    to: '/k8s/cluster/storageclasses/~new/form',\n  };\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {..._.omit(props, 'mock')}\n      title={t('public~StorageClasses')}\n      kind={StorageClassReference}\n      ListComponent={StorageClassList}\n      canCreate={true}\n      filterLabel={props.filterLabel}\n      createProps={createProps}\n      createButtonText={t('public~Create StorageClass')}\n    />\n  );\n};\nexport const StorageClassDetailsPage: React.FC = (props) => {\n  const pages = [navFactory.details(detailsPage(StorageClassDetails)), navFactory.editYaml()];\n  return (\n    <DetailsPage {...props} kind={StorageClassReference} menuActions={menuActions} pages={pages} />\n  );\n};\nStorageClassDetailsPage.displayName = 'StorageClassDetailsPage';\n\nexport type StorageClassDetailsProps = {\n  obj: any;\n};\n\nexport type StorageClassPageProps = {\n  filterLabel: string;\n  namespace: string;\n};\n","import * as React from 'react';\nimport {\n  FormGroup,\n  FormHelperText,\n  Grid,\n  GridItem,\n  HelperText,\n  HelperTextItem,\n  TextInput,\n} from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { VolumeModeSelector } from '@console/app/src/components/volume-modes/volume-mode';\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '@console/internal/components/factory';\nimport {\n  dropdownUnits,\n  snapshotPVCStorageClassAnnotation,\n  snapshotPVCAccessModeAnnotation,\n  snapshotPVCVolumeModeAnnotation,\n} from '@console/internal/components/storage/shared';\nimport {\n  HandlePromiseProps,\n  ResourceIcon,\n  withHandlePromise,\n  history,\n  RequestSizeInput,\n  Timestamp,\n  resourcePathFromModel,\n  convertToBaseValue,\n  humanizeBinaryBytesWithoutB,\n  humanizeBinaryBytes,\n} from '@console/internal/components/utils';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { StorageClassDropdown } from '@console/internal/components/utils/storage-class-dropdown';\nimport {\n  NamespaceModel,\n  PersistentVolumeClaimModel,\n  VolumeSnapshotModel,\n  StorageClassModel,\n} from '@console/internal/models';\nimport {\n  k8sCreate,\n  VolumeSnapshotKind,\n  StorageClassResourceKind,\n  PersistentVolumeClaimKind,\n} from '@console/internal/module/k8s';\nimport {\n  getName,\n  getNamespace,\n  Status,\n  isCephProvisioner,\n  getAnnotations,\n  RedExclamationCircleIcon,\n  onlyPvcSCs,\n} from '@console/shared';\nimport { AccessModeSelector } from '../../access-modes/access-mode';\n\nimport './restore-pvc-modal.scss';\n\nconst RestorePVCModal = withHandlePromise<RestorePVCModalProps>(\n  ({ close, cancel, resource, errorMessage, inProgress, handlePromise }) => {\n    const { t } = useTranslation();\n    const [restorePVCName, setPVCName] = React.useState(`${getName(resource) || 'pvc'}-restore`);\n    const volumeSnapshotAnnotations = getAnnotations(resource);\n    const snapshotBaseSize = convertToBaseValue(resource?.status?.restoreSize ?? '0');\n    const snapshotHumanizedSize = humanizeBinaryBytesWithoutB(snapshotBaseSize);\n    const [requestedSize, setRequestedSize] = React.useState(snapshotHumanizedSize.value);\n    const [requestedUnit, setRequestedUnit] = React.useState(snapshotHumanizedSize.unit);\n    const [pvcSC, setPVCStorageClass] = React.useState('');\n    const requestedBytes = convertToBaseValue(requestedSize + requestedUnit);\n    const validSize = requestedBytes >= snapshotBaseSize;\n    const [restoreAccessMode, setRestoreAccessMode] = React.useState('');\n    const [updatedProvisioner, setUpdatedProvisioner] = React.useState('');\n    const namespace = getNamespace(resource);\n    const snapshotName = getName(resource);\n\n    const [pvcResource, pvcResourceLoaded, pvcResourceLoadError] = useK8sGet<\n      PersistentVolumeClaimKind\n    >(PersistentVolumeClaimModel, resource?.spec?.source?.persistentVolumeClaimName, namespace);\n\n    const pvcStorageClassName = pvcResource?.spec?.storageClassName;\n    const [scResource, scResourceLoaded, scResourceLoadError] = useK8sGet<StorageClassResourceKind>(\n      StorageClassModel,\n      pvcStorageClassName,\n    );\n\n    const [volumeMode, setVolumeMode] = React.useState('');\n    const requestedSizeInputChange = ({ value, unit }) => {\n      setRequestedSize(value);\n      setRequestedUnit(unit);\n    };\n\n    const handleStorageClass = (updatedStorageClass: StorageClassResourceKind) => {\n      setPVCStorageClass(updatedStorageClass?.metadata.name || '');\n      setUpdatedProvisioner(updatedStorageClass?.provisioner);\n    };\n\n    const submit = (event: React.FormEvent<EventTarget>) => {\n      event.preventDefault();\n      const restorePVCTemplate: PersistentVolumeClaimKind = {\n        apiVersion: PersistentVolumeClaimModel.apiVersion,\n        kind: PersistentVolumeClaimModel.kind,\n        metadata: {\n          name: restorePVCName,\n          namespace,\n        },\n        spec: {\n          storageClassName: pvcSC,\n          dataSource: {\n            name: snapshotName,\n            kind: VolumeSnapshotModel.kind,\n            apiGroup: VolumeSnapshotModel.apiGroup,\n          },\n          accessModes: [restoreAccessMode],\n          volumeMode,\n          resources: {\n            requests: {\n              storage: `${requestedSize}${requestedUnit}`,\n            },\n          },\n        },\n      };\n\n      return handlePromise(\n        k8sCreate(PersistentVolumeClaimModel, restorePVCTemplate, { ns: namespace }),\n        (newPVC) => {\n          close();\n          history.push(\n            resourcePathFromModel(PersistentVolumeClaimModel, newPVC.metadata.name, namespace),\n          );\n        },\n      );\n    };\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>{t('console-app~Restore as new PVC')}</ModalTitle>\n        <ModalBody>\n          <p>\n            <Trans t={t} ns=\"console-app\">\n              When restore action for snapshot <strong>{{ snapshotName }}</strong> is finished a new\n              crash-consistent PVC copy will be created.\n            </Trans>\n          </p>\n          <FormGroup\n            label={t('console-app~Name')}\n            isRequired\n            fieldId=\"pvc-name\"\n            className=\"co-restore-pvc-modal__input\"\n          >\n            <TextInput\n              isRequired\n              type=\"text\"\n              id=\"pvc-name\"\n              data-test=\"pvc-name\"\n              name=\"restore-pvc-modal__name\"\n              value={restorePVCName}\n              onChange={(_event, value: string) => setPVCName(value)}\n            />\n          </FormGroup>\n          <FormGroup fieldId=\"restore-storage-class\" className=\"co-restore-pvc-modal__input\">\n            {!pvcStorageClassName || !scResourceLoaded ? (\n              <div className=\"skeleton-text\" />\n            ) : (\n              <StorageClassDropdown\n                onChange={handleStorageClass}\n                filter={(scObj: StorageClassResourceKind) =>\n                  onlyPvcSCs(scObj, scResourceLoadError, scResource)\n                }\n                id=\"restore-storage-class\"\n                required\n                selectedKey={volumeSnapshotAnnotations?.[snapshotPVCStorageClassAnnotation]}\n              />\n            )}\n          </FormGroup>\n          <AccessModeSelector\n            onChange={setRestoreAccessMode}\n            className=\"co-restore-pvc-modal__input\"\n            provisioner={updatedProvisioner}\n            loaded={pvcResourceLoaded}\n            loadError={pvcResourceLoadError}\n            pvcResource={pvcResource}\n            availableAccessModes={volumeSnapshotAnnotations?.[\n              snapshotPVCAccessModeAnnotation\n            ]?.split(',')}\n          />\n          <VolumeModeSelector\n            onChange={setVolumeMode}\n            className=\"co-restore-pvc-modal__input\"\n            provisioner={updatedProvisioner}\n            pvcResource={pvcResource}\n            accessMode={restoreAccessMode}\n            storageClass={pvcSC}\n            loaded={pvcResourceLoaded}\n            availableVolumeMode={volumeSnapshotAnnotations?.[snapshotPVCVolumeModeAnnotation]}\n          />\n          <FormGroup\n            label={t('console-app~Size')}\n            isRequired\n            fieldId=\"pvc-size\"\n            className=\"co-restore-pvc-modal__input co-restore-pvc-modal__ocs-size\"\n          >\n            {!!pvcStorageClassName && scResourceLoaded ? (\n              <RequestSizeInput\n                name=\"requestSize\"\n                onChange={requestedSizeInputChange}\n                defaultRequestSizeUnit={requestedUnit}\n                defaultRequestSizeValue={requestedSize}\n                dropdownUnits={dropdownUnits}\n                isInputDisabled={scResourceLoadError || isCephProvisioner(scResource?.provisioner)}\n                required\n              />\n            ) : (\n              <div className=\"skeleton-text\" />\n            )}\n\n            {!validSize && (\n              <FormHelperText>\n                <HelperText>\n                  <HelperTextItem variant=\"error\" icon={<RedExclamationCircleIcon />}>\n                    {t(\n                      'console-app~Size should be equal or greater than the restore size of snapshot.',\n                    )}\n                  </HelperTextItem>\n                </HelperText>\n              </FormHelperText>\n            )}\n          </FormGroup>\n          <div className=\"co-restore-pvc-modal__details-section\">\n            <p className=\"text-muted\">\n              {t('console-app~{{resourceKind}} details', {\n                resourceKind: VolumeSnapshotModel.label,\n              })}\n            </p>\n            <Grid hasGutter>\n              <GridItem span={6}>\n                <div className=\"co-restore-pvc-modal__pvc-details\">\n                  <strong>{t('console-app~Created at')}</strong>\n                  <span>\n                    <Timestamp timestamp={resource?.metadata?.creationTimestamp} />\n                  </span>\n                </div>\n                <div className=\"co-restore-pvc-modal__pvc-details\">\n                  <strong>{t('console-app~Status')}</strong>\n                  <Status status={resource?.status?.readyToUse ? 'Ready' : 'Not Ready'} />\n                </div>\n                <div className=\"co-restore-pvc-modal__pvc-details\">\n                  <strong>{t('console-app~Size')}</strong>\n                  <p>{humanizeBinaryBytes(snapshotBaseSize).string}</p>\n                </div>\n              </GridItem>\n              <GridItem span={6}>\n                <div className=\"co-restore-pvc-modal__pvc-details\">\n                  <strong>{t('console-app~Namespace')}</strong>\n                  <div>\n                    <ResourceIcon kind={NamespaceModel.kind} />\n                    <span>{namespace}</span>\n                  </div>\n                </div>\n                <div className=\"co-restore-pvc-modal__pvc-details\">\n                  <strong>{t('console-app~API version')}</strong>\n                  <p>{resource?.apiVersion}</p>\n                </div>\n              </GridItem>\n            </Grid>\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          submitDisabled={!pvcSC || !validSize}\n          inProgress={inProgress}\n          errorMessage={errorMessage}\n          submitText={t('console-app~Restore')}\n          cancel={cancel}\n        />\n      </form>\n    );\n  },\n);\n\ntype RestorePVCModalProps = {\n  resource: VolumeSnapshotKind;\n} & HandlePromiseProps &\n  ModalComponentProps;\n\nexport default createModalLauncher(RestorePVCModal);\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\n\nexport const cephRBDProvisionerSuffix = 'rbd.csi.ceph.com';\n\nexport const snapshotPVCStorageClassAnnotation = 'snapshot.storage.kubernetes.io/pvc-storage-class';\nexport const snapshotPVCAccessModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-access-modes';\nexport const snapshotPVCVolumeModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-volume-mode';\n\ntype AccessMode = 'ReadWriteOnce' | 'ReadWriteMany' | 'ReadOnlyMany' | 'ReadWriteOncePod';\ntype VolumeMode = 'Filesystem' | 'Block';\n\nexport const initialAccessModes: AccessMode[] = [\n  'ReadWriteOnce',\n  'ReadWriteMany',\n  'ReadOnlyMany',\n  'ReadWriteOncePod',\n];\nexport const initialVolumeModes: VolumeMode[] = ['Filesystem', 'Block'];\n\ntype PartialMatch = { partialMatch?: boolean };\ntype ModeMapping = {\n  [volumeMode in VolumeMode]?: AccessMode[];\n};\ntype AccessModeMapping = ModeMapping & PartialMatch;\n\ntype ProvisionerAccessModeMapping = {\n  [provisioner: string]: AccessModeMapping;\n};\n\n// See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes and\n// https://docs.openshift.com/container-platform/4.15/storage/understanding-persistent-storage.html for more details\nexport const provisionerAccessModeMapping: ProvisionerAccessModeMapping = Object.freeze({\n  'kubernetes.io/no-provisioner': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/aws-ebs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/gce-pd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/glusterfs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/cinder': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-file': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-disk': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/quobyte': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/rbd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/vsphere-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/portworx-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/scaleio': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/storageos': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  // Since 4.6 new provisioners names will be without the 'kubernetes.io/' prefix.\n  'manila.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'ebs.csi.aws.com': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'block.csi.ibm.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'csi.ovirt.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'cinder.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'pd.csi.storage.gke.io': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'cephfs.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'rbd.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'file.csi.azure.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n});\n\nexport const getAccessModeOptions = () => [\n  {\n    value: 'ReadWriteOnce',\n    title: i18next.t('public~Single user (RWO)'),\n  },\n  {\n    value: 'ReadWriteMany',\n    title: i18next.t('public~Shared access (RWX)'),\n  },\n  {\n    value: 'ReadOnlyMany',\n    title: i18next.t('public~Read only (ROX)'),\n  },\n  {\n    value: 'ReadWriteOncePod',\n    title: i18next.t('public~Read write once pod (RWOP)'),\n  },\n];\n\nexport const getVolumeModeRadios = () => [\n  {\n    value: 'Filesystem',\n    title: i18next.t('public~Filesystem'),\n  },\n  {\n    value: 'Block',\n    title: i18next.t('public~Block'),\n  },\n];\n\nexport const dropdownUnits = {\n  i: 'B',\n  Ki: 'KiB',\n  Mi: 'MiB',\n  Gi: 'GiB',\n  Ti: 'TiB',\n  Pi: 'PiB',\n  Ei: 'EiB',\n};\n\nexport const getProvisionerModeMapping = (provisioner: string): ModeMapping =>\n  _.omit(\n    _.find(provisionerAccessModeMapping, (value: AccessModeMapping, key: string) => {\n      if (value?.partialMatch && provisioner?.includes(key)) {\n        return true;\n      }\n      if (key === provisioner) {\n        return true;\n      }\n      return false;\n    }) || {},\n    'partialMatch',\n  );\n\nexport const getAccessModeForProvisioner = (\n  provisioner: string,\n  ignoreReadOnly?: boolean,\n  volumeMode?: string,\n): AccessMode[] => {\n  let accessModes: AccessMode[];\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    accessModes = volumeMode\n      ? modeMapping[volumeMode]\n      : Object.keys(modeMapping)\n          .map((mode) => modeMapping[mode])\n          .flat();\n  } else {\n    accessModes = initialAccessModes;\n  }\n\n  // remove duplicate in accessModes\n  accessModes = [...new Set(accessModes)];\n\n  // Ignore ReadOnly related access for create-pvc\n  return ignoreReadOnly ? accessModes.filter((modes) => modes !== 'ReadOnlyMany') : accessModes;\n};\n\nexport const getVolumeModeForProvisioner = (\n  provisioner: string,\n  accessMode: string,\n): VolumeMode[] => {\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    return accessMode\n      ? (Object.keys(modeMapping).filter((volumeMode) =>\n          modeMapping[volumeMode].includes(accessMode),\n        ) as VolumeMode[])\n      : (Object.keys(modeMapping) as VolumeMode[]);\n  }\n  return initialVolumeModes;\n};\n","import * as React from 'react';\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectList,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  getAccessModeForProvisioner,\n  getAccessModeOptions,\n} from '@console/internal/components/storage/shared';\nimport { PersistentVolumeClaimKind } from '@console/internal/module/k8s';\n\nexport const getPVCAccessModes = (resource: PersistentVolumeClaimKind, key: string) =>\n  _.reduce(\n    resource?.spec?.accessModes,\n    (res, value) => {\n      const mode = getAccessModeOptions().find((accessMode) => accessMode.value === value);\n      if (mode) {\n        res.push(mode[key]);\n      }\n      return res;\n    },\n    [],\n  );\n\nexport const AccessModeSelector: React.FC<AccessModeSelectorProps> = (props) => {\n  const {\n    className,\n    pvcResource,\n    filterByVolumeMode,\n    onChange,\n    loaded,\n    provisioner,\n    availableAccessModes = [],\n    description,\n    ignoreReadOnly,\n  } = props;\n\n  const { t } = useTranslation();\n  const pvcInitialAccessMode = pvcResource\n    ? getPVCAccessModes(pvcResource, 'value')\n    : availableAccessModes;\n  const volumeMode: string = pvcResource?.spec?.volumeMode;\n\n  const [allowedAccessModes, setAllowedAccessModes] = React.useState<string[]>();\n  const [accessMode, setAccessMode] = React.useState<string>();\n\n  const changeAccessMode = React.useCallback(\n    (mode: string) => {\n      setAccessMode(mode);\n      onChange(mode);\n    },\n    [onChange],\n  );\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState<string>(\n    getAccessModeOptions().find((mode) => mode.value === pvcInitialAccessMode[0]).title,\n  );\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (_event: undefined, value: { val: string; label: string }) => {\n    setIsOpen(!isOpen);\n    setSelected(value.label);\n    changeAccessMode(value.val);\n  };\n  const selectOptions = getAccessModeOptions().map((option) => {\n    const disabled = !allowedAccessModes?.includes(option.value);\n    return (\n      <SelectOption\n        key={option.title}\n        value={{ val: option.value, label: option.title }}\n        isDisabled={disabled}\n        isSelected={accessMode === option.value}\n      >\n        {option.title}\n      </SelectOption>\n    );\n  });\n\n  const toggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle\n      ref={toggleRef}\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n      style={\n        {\n          width: '200px',\n        } as React.CSSProperties\n      }\n    >\n      {selected}\n    </MenuToggle>\n  );\n\n  React.useEffect(() => {\n    if (loaded) {\n      setAllowedAccessModes(\n        getAccessModeForProvisioner(\n          provisioner,\n          ignoreReadOnly,\n          filterByVolumeMode ? volumeMode : null,\n        ),\n      );\n    }\n  }, [filterByVolumeMode, ignoreReadOnly, loaded, provisioner, volumeMode]);\n\n  React.useEffect(() => {\n    // Make sure the default or already checked option button value is from any one of allowed the access mode\n    if (allowedAccessModes) {\n      if (!accessMode && allowedAccessModes.includes(pvcInitialAccessMode[0])) {\n        // To view the same access mode value of pvc\n        changeAccessMode(pvcInitialAccessMode[0]);\n      } else if (!allowedAccessModes.includes(accessMode)) {\n        // Old access mode will be disabled\n        changeAccessMode(allowedAccessModes[0]);\n      }\n    }\n  }, [accessMode, allowedAccessModes, changeAccessMode, pvcInitialAccessMode]);\n\n  return (\n    <FormGroup\n      label={t('console-app~Access mode')}\n      isRequired\n      fieldId=\"access-mode\"\n      className={className}\n    >\n      {loaded && allowedAccessModes && (\n        <Select\n          isOpen={isOpen}\n          selected={selected}\n          onSelect={onSelect}\n          onOpenChange={(open) => setIsOpen(open)}\n          toggle={toggle}\n          shouldFocusToggleOnSelect\n        >\n          <SelectList>{selectOptions}</SelectList>\n        </Select>\n      )}\n\n      {allowedAccessModes && allowedAccessModes && description && (\n        <p className=\"help-block\" id=\"access-mode-help\">\n          {description}\n        </p>\n      )}\n      {(!loaded || !allowedAccessModes) && <div className=\"skeleton-text\" />}\n    </FormGroup>\n  );\n};\n\ntype AccessModeSelectorProps = {\n  className?: string;\n  pvcResource?: PersistentVolumeClaimKind;\n  filterByVolumeMode?: boolean;\n  onChange: (accessMode: string) => void;\n  availableAccessModes?: string[];\n  loaded: boolean;\n  loadError?: any;\n  provisioner: string;\n  description?: string;\n  ignoreReadOnly?: boolean;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\n/* eslint-disable import/named */\nimport { WithTranslation, withTranslation } from 'react-i18next';\n\nimport { Firehose, LoadingInline, Dropdown, ResourceName, ResourceIcon } from '.';\nimport { isDefaultClass } from '../storage-class';\nimport * as classNames from 'classnames';\n\n/* Component StorageClassDropdown - creates a dropdown list of storage classes */\n\nexport class StorageClassDropdownInnerWithTranslation extends React.Component<\n  StorageClassDropdownInnerProps,\n  StorageClassDropdownInnerState\n> {\n  readonly state: StorageClassDropdownInnerState = {\n    items: {},\n    name: this.props.name,\n    selectedKey: this.props.selectedKey,\n    title: <LoadingInline />,\n    defaultClass: this.props.defaultClass,\n  };\n\n  UNSAFE_componentWillMount() {\n    this.UNSAFE_componentWillReceiveProps(this.props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { loaded, loadError, resources, t } = nextProps;\n\n    if (loadError) {\n      this.setState({\n        title: (\n          <div className=\"cos-error-title\">\n            {t('public~Error loading {{desc}}', { desc: nextProps.desc })}\n          </div>\n        ),\n      });\n      return;\n    }\n    if (!loaded) {\n      return;\n    }\n\n    const state = {\n      items: {},\n      title: {},\n      defaultClass: '',\n    };\n    let unorderedItems = {};\n    const noStorageClass = t('public~No default StorageClass');\n    _.map(resources.StorageClass.data, (resource) => {\n      unorderedItems[resource.metadata.name] = {\n        kindLabel: 'StorageClass',\n        name: resource.metadata.name,\n        description: _.get(resource, 'metadata.annotations.description', ''),\n        default: isDefaultClass(resource),\n        accessMode: _.get(\n          resource,\n          ['metadata', 'annotations', 'storage.alpha.openshift.io/access-mode'],\n          '',\n        ),\n        provisioner: resource.provisioner,\n        parameters: resource.parameters,\n        type: _.get(resource, 'parameters.type', ''),\n        zone: _.get(resource, 'parameters.zone', ''),\n        resource,\n      };\n    });\n\n    //Filter if user provides a custom function\n    if (nextProps.filter) {\n      unorderedItems = Object.keys(unorderedItems)\n        .filter((sc) => nextProps.filter(unorderedItems[sc]))\n        .reduce((acc, key) => {\n          acc[key] = unorderedItems[key];\n          return acc;\n        }, {});\n    }\n\n    // Determine if there is a default storage class\n    state.defaultClass = _.findKey(unorderedItems, 'default');\n    const { selectedKey } = this.state;\n    if (!state.defaultClass) {\n      // Add No Storage Class option if there is not a default storage class\n      unorderedItems[''] = { kindLabel: '', name: noStorageClass };\n    }\n\n    if (!this.props.loaded || !selectedKey || !unorderedItems[selectedKey || state.defaultClass]) {\n      state.title = <span className=\"text-muted\">{t('public~Select StorageClass')}</span>;\n    }\n\n    const selectedItem = unorderedItems[selectedKey || state.defaultClass];\n    if (selectedItem) {\n      state.title = this.getTitle(selectedItem);\n    }\n\n    Object.keys(unorderedItems)\n      .sort()\n      .forEach((key) => {\n        state.items[key] = unorderedItems[key];\n      });\n    this.setState(state);\n  }\n\n  componentDidMount() {\n    const { defaultClass } = this.state;\n    if (defaultClass) {\n      this.onChange(defaultClass);\n    }\n  }\n\n  componentDidUpdate() {\n    const { defaultClass, selectedKey } = this.state;\n    if (selectedKey) {\n      this.onChange(selectedKey);\n    } else if (defaultClass) {\n      this.onChange(defaultClass);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !_.isEqual(this.state, nextState);\n  }\n\n  autocompleteFilter = (text, item) => fuzzy(text, item.props.name);\n\n  getTitle = (storageClass) => {\n    return storageClass.kindLabel ? (\n      <ResourceName kind=\"StorageClass\" name={storageClass.name} />\n    ) : (\n      <span>{storageClass.name}</span>\n    );\n  };\n\n  onChange = (key) => {\n    const storageClass = _.get(this.state, ['items', key], {});\n    this.setState(\n      {\n        selectedKey: key,\n        title: this.getTitle(storageClass),\n      },\n      () => this.props.onChange(storageClass.resource),\n    );\n  };\n\n  render() {\n    const { id, loaded, describedBy, noSelection, t } = this.props;\n    const items = {};\n    _.each(\n      this.state.items,\n      (props, key) =>\n        (items[key] = key ? (\n          <StorageClassDropdownEntry {...props} />\n        ) : (\n          <StorageClassDropdownNoStorageClassOption {...props} />\n        )),\n    );\n\n    const { selectedKey, defaultClass } = this.state;\n\n    // Only show the dropdown if 'no storage class' is not the only option which depends on defaultClass\n    const itemsAvailableToShow = defaultClass || _.size(items) > 1;\n    return (\n      <>\n        {loaded && itemsAvailableToShow && (\n          <div>\n            <label\n              className={classNames('control-label', this.props.hideClassName, {\n                'co-required': this.props.required,\n              })}\n              htmlFor={id}\n            >\n              {t('public~StorageClass')}\n            </label>\n            <Dropdown\n              className=\"co-storage-class-dropdown\"\n              dropDownClassName=\"dropdown--full-width\"\n              autocompleteFilter={this.autocompleteFilter}\n              autocompletePlaceholder={t('public~Select StorageClass')}\n              items={items}\n              selectedKey={selectedKey}\n              title={this.state.title}\n              onChange={this.onChange}\n              id={id}\n              dataTest={this.props?.['data-test']}\n              noSelection={noSelection}\n              menuClassName=\"dropdown-menu--text-wrap\"\n            />\n            {describedBy && (\n              <p className=\"help-block\" id={describedBy}>\n                {t('public~StorageClass for the new claim')}\n              </p>\n            )}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport const StorageClassDropdownInner = withTranslation()(\n  StorageClassDropdownInnerWithTranslation,\n);\n\nexport const StorageClassDropdown = (props) => {\n  return (\n    <Firehose resources={[{ kind: 'StorageClass', prop: 'StorageClass', isList: true }]}>\n      <StorageClassDropdownInner {...props} />\n    </Firehose>\n  );\n};\n\nconst StorageClassDropdownEntry = (props) => {\n  const storageClassProperties = [\n    props.default ? ' (default)' : '',\n    props.description,\n    props.accessMode,\n    props.provisioner,\n    props.type,\n    props.zone,\n  ];\n  const storageClassDescriptionLine = _.compact(storageClassProperties).join(' | ');\n  return (\n    <span className=\"co-resource-item\">\n      <ResourceIcon kind={props.kindLabel} />\n      <span className=\"co-resource-item__resource-name\">\n        {props.name}\n        <div className=\"text-muted small\"> {storageClassDescriptionLine}</div>\n      </span>\n    </span>\n  );\n};\n\nconst StorageClassDropdownNoStorageClassOption = (props) => {\n  return (\n    <span className=\"co-resource-item\">\n      <span className=\"co-resource-item__resource-name\">{props.name}</span>\n    </span>\n  );\n};\n\nexport type StorageClassDropdownInnerState = {\n  items: any;\n  name: string;\n  selectedKey: string;\n  title: React.ReactNode;\n  defaultClass: string;\n};\n\nexport type StorageClassDropdownInnerProps = WithTranslation & {\n  id?: string;\n  loaded?: boolean;\n  resources?: any;\n  name: string;\n  onChange: (object) => void;\n  describedBy: string;\n  defaultClass: string;\n  required?: boolean;\n  hideClassName?: string;\n  filter?: (param) => boolean;\n  noSelection?: boolean;\n  selectedKey?: string;\n};\n","import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { RadioInput } from '@console/internal/components/radio';\nimport {\n  getVolumeModeRadios,\n  getVolumeModeForProvisioner,\n  initialVolumeModes,\n} from '@console/internal/components/storage/shared';\nimport { FieldLevelHelp } from '@console/internal/components/utils';\nimport { PersistentVolumeClaimKind } from '@console/internal/module/k8s';\n\nexport const VolumeModeSelector: React.FC<VolumeModeSelectorProps> = (props) => {\n  const {\n    className,\n    pvcResource,\n    accessMode,\n    onChange,\n    provisioner,\n    storageClass,\n    availableVolumeMode,\n    loaded,\n  } = props;\n\n  const { t } = useTranslation();\n  const pvcInitialVolumeMode: string = pvcResource\n    ? pvcResource?.spec?.volumeMode\n    : availableVolumeMode ?? initialVolumeModes[0];\n\n  const [volumeMode, setVolumeMode] = React.useState<string>();\n  const allowedVolumeModes: string[] = React.useMemo(\n    () => (loaded ? getVolumeModeForProvisioner(provisioner, accessMode) : []),\n    [loaded, provisioner, accessMode],\n  );\n\n  const changeVolumeMode = React.useCallback(\n    (mode: string) => {\n      setVolumeMode(mode);\n      onChange(mode);\n    },\n    [onChange],\n  );\n\n  React.useEffect(() => {\n    if (!allowedVolumeModes.length) {\n      return;\n    }\n    // Make sure the default or already checked radio button value is from any one of allowed the access mode\n    if (!volumeMode && allowedVolumeModes.includes(pvcInitialVolumeMode)) {\n      // To view the same volume mode value of pvc\n      changeVolumeMode(pvcInitialVolumeMode);\n    } else if (!allowedVolumeModes.includes(volumeMode)) {\n      // Old volume mode will be disabled\n      changeVolumeMode(allowedVolumeModes[0]);\n    }\n  }, [volumeMode, allowedVolumeModes, onChange, pvcInitialVolumeMode, changeVolumeMode]);\n\n  return (\n    <FormGroup\n      fieldId=\"volume-mode\"\n      className={className}\n      label={t('console-app~Volume mode')}\n      isRequired\n    >\n      {allowedVolumeModes.length === 1 ? (\n        <>\n          {allowedVolumeModes[0]}\n          <FieldLevelHelp>\n            <Trans t={t} ns=\"console-app\">\n              Only {{ volumeMode }} volume mode is available for {{ storageClass }} with{' '}\n              {{ accessMode }} access mode\n            </Trans>\n          </FieldLevelHelp>\n        </>\n      ) : (\n        getVolumeModeRadios().map((radio) => (\n          <RadioInput\n            {...radio}\n            key={radio.value}\n            onChange={(event) => changeVolumeMode(event.currentTarget.value)}\n            inline\n            checked={radio.value === volumeMode}\n            name=\"volumeMode\"\n            disabled={!allowedVolumeModes.includes(radio.value)}\n          />\n        ))\n      )}\n    </FormGroup>\n  );\n};\n\ntype VolumeModeSelectorProps = {\n  className?: string;\n  pvcResource?: PersistentVolumeClaimKind;\n  accessMode: string;\n  onChange: (volumeMode: string) => void;\n  provisioner: string;\n  storageClass: string;\n  availableVolumeMode?: string;\n  loaded: boolean;\n};\n"],"sourceRoot":""}