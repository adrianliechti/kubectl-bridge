{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager/src/components/topology/sidebar/index.ts","webpack:///./packages/topology/src/operators/components/const.ts","webpack:///./packages/operator-lifecycle-manager/src/components/operand/operand-link.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/k8s-resource.tsx","webpack:///./packages/topology/src/components/side-bar/TopologyGroupResourcesPanel.tsx","webpack:///./packages/topology/src/components/side-bar/TopologyGroupResourceList.tsx","webpack:///./packages/topology/src/components/side-bar/TopologyGroupResourceItem.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/topology/sidebar/resource-link.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/topology/sidebar/details-sections.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/topology/sidebar/resource-sections.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/topology/sidebar/TopologyOperatorBackedResources.tsx"],"names":["TYPE_OPERATOR_BACKED_SERVICE","OPERATOR_GROUP_WIDTH","OPERATOR_GROUP_HEIGHT","OPERATOR_GROUP_PADDING","csvNameFromWindow","window","location","pathname","split","find","part","i","allParts","plural","OperandLink","props","namespace","name","obj","metadata","csvName","reference","to","classes","inline","className","kind","onClick","displayName","DEFAULT_RESOURCES","version","apiVersion","tableColumnClasses","ResourceTableRow","customData","linkFor","providedAPI","status","phase","timestamp","creationTimestamp","ResourceTable","t","Header","title","sortField","transforms","Row","EmptyMsg","virtualize","flattenCsvResources","parentObj","resources","resource","data","item","reduce","owned","ownerReferences","some","ref","uid","concat","linkForCsvResource","Resources","firehoseResources","map","group","substring","indexOf","model","crd","namespaced","prop","filterLabel","rowFilters","type","filterGroupName","reducer","items","id","flatten","ListComponent","manifestResources","releaseNamespace","linkForResource","resourceKinds","includes","push","sort","a","b","localeCompare","lists","filter","length","key","text","labelPlural","r1","r2","resourceNamespace","link","getOperatorBackedPanelResourceLink","element","getType","getData","owner","DetailsSection","useOperatorBackedPanelDetailsSection","undefined","ResourceSection","resourcesList","csv","isList","loaded","loadError","label","useOperatorBackedPanelResourceSection","OperatorResources","OperatorResourcesGetter","modelReference","acc","descriptor","optional","getManagedByCSVResourceLink"],"mappings":"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","file":"operator-lifecycle-manager/code-refs/topologySidebar-chunk-ba7cfe2a28def4c5ba2e.min.js","sourcesContent":["export * from './resource-link';\nexport * from './details-sections';\nexport * from './resource-sections';\n","import { GROUP_HEIGHT, GROUP_PADDING, GROUP_WIDTH } from '../../const';\n\nexport const TYPE_OPERATOR_BACKED_SERVICE = 'operator-backed-service';\n\nexport const OPERATOR_GROUP_WIDTH = GROUP_WIDTH;\nexport const OPERATOR_GROUP_HEIGHT = GROUP_HEIGHT;\nexport const OPERATOR_GROUP_PADDING = GROUP_PADDING;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { referenceForModel, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '../../models';\n\nexport const csvNameFromWindow = () =>\n  window.location.pathname\n    .split('/')\n    .find(\n      (part, i, allParts) =>\n        allParts[i - 1] === referenceForModel(ClusterServiceVersionModel) ||\n        allParts[i - 1] === ClusterServiceVersionModel.plural,\n    );\n\nexport const OperandLink: React.FC<OperandLinkProps> = (props) => {\n  const { namespace, name } = props.obj.metadata;\n  const csvName = props.csvName || csvNameFromWindow();\n\n  const reference = referenceFor(props.obj);\n  const to = namespace\n    ? `/k8s/ns/${namespace}/${ClusterServiceVersionModel.plural}/${csvName}/${reference}/${name}`\n    : `/k8s/cluster/${reference}/${name}`;\n  const classes = classNames('co-resource-item', {\n    'co-resource-item--inline': props.inline,\n  });\n\n  return (\n    <span className={classes}>\n      <ResourceIcon kind={referenceFor(props.obj)} />\n      <Link\n        to={to}\n        className=\"co-resource-item__resource-name\"\n        onClick={props.onClick}\n        data-test-operand-link={name}\n        data-test={name}\n      >\n        {name}\n      </Link>\n    </span>\n  );\n};\n\nexport type OperandLinkProps = {\n  obj: K8sResourceKind;\n  csvName?: string;\n  onClick?: () => void;\n  inline?: boolean;\n};\n\nOperandLink.displayName = 'OperandLink';\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport {\n  MultiListPage,\n  Table,\n  TableData,\n  Flatten,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  ResourceLink,\n  Timestamp,\n  ConsoleEmptyState,\n  FirehoseResource,\n} from '@console/internal/components/utils';\nimport {\n  ConfigMapModel,\n  DeploymentModel,\n  JobModel,\n  PodModel,\n  ReplicaSetModel,\n  SecretModel,\n  ServiceModel,\n} from '@console/internal/models';\nimport {\n  K8sResourceKind,\n  kindForReference,\n  modelFor,\n  referenceForGroupVersionKind,\n  K8sResourceCommon,\n} from '@console/internal/module/k8s';\nimport { Status } from '@console/shared';\nimport { RouteParams } from '@console/shared/src/types';\nimport { CRDDescription, ProvidedAPI } from '../types';\nimport { OperandLink } from './operand/operand-link';\nimport { providedAPIForReference } from './index';\n\nconst DEFAULT_RESOURCES: CRDDescription['resources'] = [\n  { kind: DeploymentModel.kind, version: DeploymentModel.apiVersion },\n  { kind: ServiceModel.kind, version: ServiceModel.apiVersion },\n  { kind: ReplicaSetModel.kind, version: ReplicaSetModel.apiVersion },\n  { kind: PodModel.kind, version: PodModel.apiVersion },\n  { kind: SecretModel.kind, version: SecretModel.apiVersion },\n  { kind: ConfigMapModel.kind, version: ConfigMapModel.apiVersion },\n  { kind: JobModel.kind, version: JobModel.apiVersion },\n];\n\nconst tableColumnClasses = [\n  '',\n  'pf-v5-u-w-16-on-md',\n  'pf-m-hidden pf-m-visible-on-lg pf-v5-u-w-16-on-lg',\n  'pf-m-hidden pf-m-visible-on-sm',\n];\n\nexport const ResourceTableRow: React.FC<RowFunctionArgs<\n  K8sResourceKind,\n  {\n    linkFor: (obj: K8sResourceKind, providedAPI: ProvidedAPI) => JSX.Element;\n    providedAPI: ProvidedAPI;\n  }\n>> = ({ obj, customData: { linkFor, providedAPI } }) => (\n  <>\n    <TableData className={tableColumnClasses[0]}>{linkFor(obj, providedAPI)}</TableData>\n    <TableData className={tableColumnClasses[1]}>{obj.kind}</TableData>\n    <TableData className={tableColumnClasses[2]}>\n      <Status status={obj?.status?.phase ?? 'Created'} />\n    </TableData>\n    <TableData className={tableColumnClasses[3]}>\n      <Timestamp timestamp={obj.metadata.creationTimestamp} />\n    </TableData>\n  </>\n);\n\nexport const ResourceTable: React.FC<ResourceTableProps> = (props) => {\n  const { t } = useTranslation();\n  const ResourceTableHeader = () => [\n    {\n      title: t('olm~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('olm~Kind'),\n      sortField: 'kind',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('olm~Status'),\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('olm~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~Operand Resources')}\n      Header={ResourceTableHeader}\n      Row={ResourceTableRow}\n      EmptyMsg={() => (\n        <ConsoleEmptyState title={t('olm~No resources found')}>\n          {t('olm~There are no Kubernetes resources used by this operand.')}\n        </ConsoleEmptyState>\n      )}\n      virtualize\n    />\n  );\n};\n\nexport const flattenCsvResources = (\n  parentObj: K8sResourceCommon,\n): Flatten<{ [key: string]: K8sResourceCommon[] }, K8sResourceCommon[]> => (resources) => {\n  return _.flatMap(resources, (resource, kind: string) =>\n    _.map(resource.data, (item) => ({ ...item, kind })),\n  ).reduce((owned, resource) => {\n    return (resource.metadata.ownerReferences || []).some(\n      (ref) =>\n        ref.uid === parentObj.metadata.uid ||\n        owned.some(({ metadata }) => metadata.uid === ref.uid),\n    )\n      ? owned.concat([resource])\n      : owned;\n  }, []);\n};\n\n// NOTE: This is us building the `ownerReferences` graph client-side\n// FIXME: Comparing `kind` is not enough to determine if an object is a custom resource\nexport const linkForCsvResource = (\n  obj: K8sResourceKind,\n  providedAPI: ProvidedAPI,\n  csvName?: string,\n) =>\n  obj.metadata.namespace &&\n  (providedAPI?.resources ?? []).some(({ kind, name }) => name && kind === obj.kind) ? (\n    <OperandLink obj={obj} csvName={csvName} />\n  ) : (\n    <ResourceLink kind={obj.kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n  );\n\ntype ResourcesPageRouteParams = RouteParams<'plural'>;\n\nexport const Resources: React.FC<ResourcesProps> = (props) => {\n  const { t } = useTranslation();\n  const { plural } = useParams<ResourcesPageRouteParams>();\n  const providedAPI = providedAPIForReference(props.customData, plural);\n\n  const firehoseResources = (providedAPI?.resources ?? DEFAULT_RESOURCES).map(\n    ({ name, kind, version }): FirehoseResource => {\n      const group = name ? name.substring(name.indexOf('.') + 1) : '';\n      const reference = group ? referenceForGroupVersionKind(group)(version)(kind) : kind;\n      const model = modelFor(reference);\n      return {\n        kind: model && !model.crd ? kind : reference,\n        namespaced: model ? model.namespaced : true,\n        prop: kind,\n      };\n    },\n  );\n\n  const customData = React.useMemo(\n    () => ({\n      linkFor: linkForCsvResource,\n      providedAPI,\n    }),\n    [providedAPI],\n  );\n\n  return (\n    <MultiListPage\n      filterLabel={t('olm~Resources by name')}\n      resources={firehoseResources}\n      rowFilters={[\n        {\n          type: 'clusterserviceversion-resource-kind',\n          filterGroupName: t('olm~Kind'),\n          reducer: ({ kind }) => kindForReference(kind),\n          items: firehoseResources.map(({ kind }) => ({\n            id: kindForReference(kind),\n            title: kindForReference(kind),\n          })),\n        },\n      ]}\n      flatten={flattenCsvResources(props.obj)}\n      namespace={props.obj.metadata.namespace}\n      ListComponent={ResourceTable}\n      customData={customData}\n    />\n  );\n};\n\nexport type ResourcesProps = {\n  obj: K8sResourceKind;\n  customData: any;\n};\n\nexport type ResourceListProps = {};\n\nexport type ResourceTableProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: K8sResourceKind[];\n  linkFor: (obj: K8sResourceKind, providedAPI: ProvidedAPI) => JSX.Element;\n  providedAPI: ProvidedAPI;\n};\n\nResourceTable.displayName = 'ResourceTable';\nResources.displayName = 'Resources';\n","import * as React from 'react';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport TopologyGroupResourceList from './TopologyGroupResourceList';\n\ntype TopologyGroupResourcesPanelProps = {\n  manifestResources: K8sResourceKind[];\n  releaseNamespace: string;\n  linkForResource?: (obj: K8sResourceKind) => React.ReactElement;\n};\n\nconst TopologyGroupResourcesPanel: React.FC<TopologyGroupResourcesPanelProps> = ({\n  manifestResources,\n  releaseNamespace,\n  linkForResource,\n}) => {\n  const kinds = manifestResources\n    .reduce((resourceKinds, resource) => {\n      const kind = referenceFor(resource);\n      if (!resourceKinds.includes(kind)) {\n        resourceKinds.push(kind);\n      }\n      return resourceKinds;\n    }, [])\n    .sort((a, b) => a.localeCompare(b));\n\n  return kinds.reduce((lists, kind) => {\n    const model = modelFor(kind);\n    const resources = manifestResources.filter((resource) => resource.kind === model.kind);\n    if (resources.length) {\n      lists.push(\n        <div key={model.kind}>\n          <SidebarSectionHeading text={model.labelPlural} />\n          <TopologyGroupResourceList\n            resources={resources}\n            releaseNamespace={releaseNamespace}\n            linkForResource={linkForResource}\n          />\n        </div>,\n      );\n    }\n    return lists;\n  }, []);\n};\n\nexport default TopologyGroupResourcesPanel;\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport TopologyGroupResourceItem from './TopologyGroupResourceItem';\n\ntype TopologyGroupResourceListProps = {\n  resources: K8sResourceKind[];\n  releaseNamespace: string;\n  linkForResource?: (obj: K8sResourceKind) => React.ReactElement;\n};\n\nconst TopologyGroupResourceList: React.FC<TopologyGroupResourceListProps> = ({\n  resources,\n  releaseNamespace,\n  linkForResource,\n}) => {\n  return (\n    <ul className=\"list-group\">\n      {resources\n        .sort((r1, r2) => r1.metadata.name.localeCompare(r2.metadata.name))\n        .map((resource) => (\n          <TopologyGroupResourceItem\n            key={resource.metadata.name}\n            item={resource}\n            releaseNamespace={releaseNamespace}\n            linkForResource={linkForResource}\n          />\n        ))}\n    </ul>\n  );\n};\n\nexport default TopologyGroupResourceList;\n","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceFor, modelFor } from '@console/internal/module/k8s';\n\ntype TopologyGroupResourceItemProps = {\n  item: K8sResourceKind;\n  releaseNamespace: string;\n  linkForResource?: (obj: K8sResourceKind) => React.ReactElement;\n};\n\nconst TopologyGroupResourceItem: React.FC<TopologyGroupResourceItemProps> = ({\n  item,\n  releaseNamespace,\n  linkForResource,\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = item;\n  const kind = referenceFor(item);\n  const model = modelFor(kind);\n  const resourceNamespace = model.namespaced ? namespace || releaseNamespace : null;\n  const link = linkForResource ? (\n    linkForResource(item)\n  ) : (\n    <ResourceLink kind={kind} name={name} namespace={resourceNamespace} />\n  );\n  return (\n    <li className=\"list-group-item container-fluid\">\n      <div className=\"row\">\n        <span className=\"col-xs-12\">{link}</span>\n      </div>\n    </li>\n  );\n};\n\nexport default TopologyGroupResourceItem;\n","import * as React from 'react';\nimport { GraphElement } from '@patternfly/react-topology';\nimport { ManagedByOperatorResourceLink } from '@console/internal/components/utils/managed-by';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from '@console/topology/src/operators/components/const';\n\nexport const getOperatorBackedPanelResourceLink = (element: GraphElement) => {\n  if (element.getType() !== TYPE_OPERATOR_BACKED_SERVICE) return undefined;\n  const item = element.getData();\n  const { name, resource, data } = item;\n  const { csvName } = data;\n  return (\n    <ManagedByOperatorResourceLink\n      csvName={csvName}\n      namespace={resource.metadata.namespace}\n      owner={{\n        name,\n        kind: resource.kind,\n        uid: resource.metadata.uid,\n        apiVersion: resource.apiVersion,\n      }}\n    />\n  );\n};\n","import * as React from 'react';\nimport { GraphElement } from '@patternfly/react-topology';\nimport { useTranslation } from 'react-i18next';\nimport { DetailsTabSectionExtensionHook } from '@console/dynamic-plugin-sdk/src/extensions/topology-details';\nimport { ResourceSummary, SectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from '@console/topology/src/operators/components/const';\n\nconst DetailsSection: React.FC<{ resource: K8sResourceKind }> = ({ resource }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"overview__sidebar-pane-body\">\n      <SectionHeading text={t('olm~Operator details')} />\n      <ResourceSummary resource={resource} />\n    </div>\n  );\n};\n\nexport const useOperatorBackedPanelDetailsSection: DetailsTabSectionExtensionHook = (\n  element: GraphElement,\n) => {\n  if (element.getType() !== TYPE_OPERATOR_BACKED_SERVICE) {\n    return [undefined, true, undefined];\n  }\n  const data = element.getData();\n  const section = <DetailsSection resource={data.resource} />;\n  return [section, true, undefined];\n};\n","import * as React from 'react';\nimport { GraphElement } from '@patternfly/react-topology';\nimport { DetailsTabSectionExtensionHook } from '@console/dynamic-plugin-sdk/src/extensions/topology-details';\nimport { TopologyDataObject } from '@console/dynamic-plugin-sdk/src/extensions/topology-types';\nimport { StatusBox } from '@console/internal/components/utils';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from '@console/topology/src/operators/components/const';\nimport { ClusterServiceVersionModel } from '../../../models';\nimport { ClusterServiceVersionKind } from '../../../types';\nimport TopologyOperatorBackedResources from './TopologyOperatorBackedResources';\nimport { OperatorGroupData } from './types';\n\nconst ResourceSection: React.FC<{ item: TopologyDataObject<OperatorGroupData> }> = ({ item }) => {\n  const { resource, data } = item;\n  const { namespace } = resource.metadata;\n  const { csvName } = data;\n\n  const resourcesList = React.useMemo(() => {\n    return {\n      csv: {\n        kind: referenceForModel(ClusterServiceVersionModel),\n        name: csvName,\n        namespace,\n        isList: false,\n      },\n    };\n  }, [csvName, namespace]);\n\n  const resources = useK8sWatchResources(resourcesList);\n\n  return (\n    <StatusBox\n      data={resources.csv.data}\n      loaded={resources.csv.loaded}\n      loadError={resources.csv.loadError}\n      label=\"Operator Resources\"\n    >\n      <TopologyOperatorBackedResources\n        item={item}\n        csv={resources.csv.data as ClusterServiceVersionKind}\n      />\n    </StatusBox>\n  );\n};\n\nexport const useOperatorBackedPanelResourceSection: DetailsTabSectionExtensionHook = (\n  element: GraphElement,\n) => {\n  if (element.getType() !== TYPE_OPERATOR_BACKED_SERVICE) {\n    return [undefined, true, undefined];\n  }\n  const section = <ResourceSection item={element.getData()} />;\n  return [section, true, undefined];\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { TopologyDataObject } from '@console/dynamic-plugin-sdk/src/extensions/topology-types';\nimport { Firehose, ResourceIcon, StatusBox } from '@console/internal/components/utils';\nimport {\n  GroupVersionKind,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  referenceForGroupVersionKind,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport {\n  ClusterServiceVersionKind,\n  ClusterServiceVersionModel,\n  CRDDescription,\n  providedAPIForReference,\n} from '@console/operator-lifecycle-manager/src';\nimport {\n  flattenCsvResources,\n  linkForCsvResource,\n} from '@console/operator-lifecycle-manager/src/components/k8s-resource';\nimport TopologyGroupResourcesPanel from '@console/topology/src/components/side-bar/TopologyGroupResourcesPanel';\nimport { OperatorGroupData } from './types';\n\ntype OperatorResourcesProps = {\n  namespace: string;\n  resources?: {\n    [kind: string]: { data: K8sResourceKind[] };\n  };\n  loaded?: boolean;\n  loadError?: string;\n  flatten: (resources: { [kind: string]: { data: K8sResourceKind[] } }) => K8sResourceKind[];\n  linkForResource?: (obj: K8sResourceKind) => React.ReactElement;\n};\n\nconst OperatorResources: React.FC<OperatorResourcesProps> = ({\n  namespace,\n  resources,\n  loaded,\n  loadError,\n  flatten,\n  linkForResource,\n}) => {\n  const { t } = useTranslation();\n  const manifestResources = flatten(resources);\n  return (\n    <StatusBox\n      data={manifestResources}\n      loaded={loaded}\n      loadError={loadError}\n      label={t('olm~Resources')}\n    >\n      <TopologyGroupResourcesPanel\n        manifestResources={manifestResources}\n        releaseNamespace={namespace}\n        linkForResource={linkForResource}\n      />\n    </StatusBox>\n  );\n};\n\ntype OperatorResourcesGetterProps = {\n  modelReference: GroupVersionKind;\n  csv: ClusterServiceVersionKind;\n  namespace: string;\n  flatten: (resources: { [kind: string]: { data: K8sResourceKind[] } }) => K8sResourceKind[];\n};\n\nconst OperatorResourcesGetter: React.FC<OperatorResourcesGetterProps> = ({\n  csv,\n  modelReference,\n  namespace,\n  flatten,\n}) => {\n  const providedAPI = providedAPIForReference(csv, modelReference);\n  const linkForResource = (obj: K8sResourceKind) => {\n    return linkForCsvResource(obj, providedAPI, csv.metadata.name);\n  };\n  const defaultResources = [\n    'Deployment',\n    'Service',\n    'ReplicaSet',\n    'Pod',\n    'Secret',\n    'ConfigMap',\n    'Job',\n  ];\n  const resourcesToGet =\n    providedAPI?.resources ??\n    (defaultResources.map((kind) => ({\n      kind,\n    })) as CRDDescription['resources']);\n\n  const firehoseResources = resourcesToGet.reduce((acc, descriptor) => {\n    const { name, kind, version } = descriptor;\n    const group = name ? name.substring(name.indexOf('.') + 1) : '';\n    const reference = group ? referenceForGroupVersionKind(group)(version)(kind) : kind;\n    const model = modelFor(reference);\n    acc.push({\n      prop: kind,\n      kind: model && !model.crd ? kind : reference,\n      namespaced: model ? model.namespaced : true,\n      namespace,\n      isList: true,\n      optional: true,\n    });\n    return acc;\n  }, []);\n\n  return (\n    <Firehose resources={firehoseResources}>\n      <OperatorResources\n        namespace={namespace}\n        flatten={flatten}\n        linkForResource={linkForResource}\n      />\n    </Firehose>\n  );\n};\n\ntype TopologyOperatorBackedResourcesProps = {\n  item: TopologyDataObject<OperatorGroupData>;\n  csv: ClusterServiceVersionKind;\n};\n\nconst TopologyOperatorBackedResources: React.FC<TopologyOperatorBackedResourcesProps> = ({\n  item,\n  csv,\n}) => {\n  const { t } = useTranslation();\n  const { resource } = item;\n  const { namespace } = resource.metadata;\n  const reference = referenceFor(resource);\n  const flatten = flattenCsvResources(resource);\n  const getManagedByCSVResourceLink = () => {\n    const model = modelFor(referenceFor(csv));\n    const { name } = csv.metadata;\n    const { kind } = model;\n\n    const link = `/k8s/ns/${namespace}/${referenceForModel(ClusterServiceVersionModel)}/${name}`;\n\n    return (\n      <div className=\"co-m-pane__heading-owner\">\n        {t('olm~Managed by')}{' '}\n        <span className=\"co-resource-item\">\n          <ResourceIcon kind={kind} />\n          <Link\n            to={link}\n            className=\"co-resource-item__resource-name\"\n            data-test-operand-link={name}\n            data-test={name}\n          >\n            {name}\n          </Link>\n        </span>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"overview__sidebar-pane-body\">\n      {getManagedByCSVResourceLink()}\n      <OperatorResourcesGetter\n        csv={csv}\n        flatten={flatten}\n        namespace={namespace}\n        modelReference={reference}\n      />\n    </div>\n  );\n};\n\nexport default TopologyOperatorBackedResources;\n"],"sourceRoot":""}