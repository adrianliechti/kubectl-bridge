{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager/src/components/install-plan.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-install-page.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/deprecated-operator-warnings/deprecated-operator-warnings.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/cluster-service-version-logo.tsx","webpack:///./packages/operator-lifecycle-manager/src/operator.svg","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-preview-modal.tsx","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js"],"names":["tableColumnClasses","columnClass","componentsTableColumnClasses","InstallPlanTableRow","obj","t","className","kind","namespace","metadata","name","phase","status","spec","clusterServiceVersionNames","map","csvName","key","title","ownerReferences","filter","ref","uid","actions","factory","common","resource","EmptyMsg","InstallPlansList","props","Header","sortField","transforms","Row","InstallPlansPage","params","ns","resources","namespaced","prop","flatten","installPlan","showTitle","ListComponent","updateUser","isOpenShift","user","username","NeedInstallPlanPermissions","OPENSHIFT","setUsername","apiGroup","variant","isInline","InstallPlanDetails","needsApproval","approval","Manual","approved","canPatchInstallPlans","group","plural","verb","to","text","showAnnotations","plan","accumulator","sourceName","sourceNamespace","add","toJS","getCatalogSources","conditions","InstallPlanPreview","hideApprovalBlock","setNeedsApproval","subscription","find","stepsByCSV","reduce","acc","step","update","resolving","steps","concat","toArray","length","isDisabled","onClick","op","path","value","then","catch","error","toString","push","includes","type","stepResource","InstallPlanDetailsPage","pages","details","editYaml","href","nameKey","component","menuActions","getExtensionsActionsForKind","displayName","ViewInstalledOperatorsButton","singleNamespaceText","allNamespacesText","InstallFailedMessage","hasInitializationResource","annotations","InitializationResource","InstallNeedsApprovalMessage","subscriptionObj","installObj","approve","installObjIsInstallPlan","CreateInitializationResourceButton","disabled","initializationResource","reference","button","item","InitializationResourceRequiredMessage","initializationResourceKind","initializationResourceNamespace","description","badgeAlt","icon","content","InstallSucceededMessage","onError","InstallingMessage","reason","message","OperatorInstallLogo","notFound","currentCSV","catalogNamespace","pkg","packageManifests","loaded","loadError","groupVersionKind","version","apiVersion","selector","matchLabels","fieldSelector","isList","pkgManifest","channels","channel","ch","currentCSVDesc","provider","startingCSV","OperatorInstallStatus","targetNamespace","loading","clusterServiceVersion","data","state","installPlanName","installPlanRef","installPlans","ip","isStatusSucceeded","isStatusFailed","isApprovalNeeded","indicator","size","installMessage","id","OperatorInstallStatusPage","installPageResources","optional","DeprecatedOperatorType","findDeprecation","deprecation","f","findDeprecatedOperator","deprecatedPackage","PackageDeprecated","deprecatedChannel","ChannelDeprecated","deprecatedVersion","VersionDeprecated","DeprecatedOperatorWarningBadge","color","DeprecatedOperatorWarningIcon","dataTest","DeprecatedOperatorWarningAlert","dismissible","alertVisible","setAlertVisible","actionClose","onClose","ClusterServiceVersionLogo","imgSrc","mediatype","base64data","src","alt","module","exports","cancel","linkTo","JSON","parse","manifest","inProgress","installPlanPreviewModal","FormAlert","_a","children","Object","assign","form"],"mappings":"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","file":"operator-lifecycle-manager/code-refs/install-chunk-4e5870b50a94a819c582.min.js","sourcesContent":["import * as React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Map as ImmutableMap, Set as ImmutableSet, fromJS } from 'immutable';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { getUser } from '@console/dynamic-plugin-sdk';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  MultiListPage,\n  DetailsPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  SectionHeading,\n  ConsoleEmptyState,\n  ResourceLink,\n  ResourceKebab,\n  Kebab,\n  ResourceIcon,\n  navFactory,\n  ResourceSummary,\n  history,\n  HintBlock,\n  useAccessReview,\n} from '@console/internal/components/utils';\nimport { authSvc } from '@console/internal/module/auth';\nimport {\n  apiGroupForReference,\n  referenceFor,\n  referenceForModel,\n  referenceForOwnerRef,\n  k8sPatch,\n  apiVersionForReference,\n  UserInfo,\n} from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { FLAGS, GreenCheckCircleIcon, Status, useFlag } from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n  CatalogSourceModel,\n} from '../models';\nimport { InstallPlanKind, InstallPlanApproval, Step } from '../types';\nimport { installPlanPreviewModal } from './modals/installplan-preview-modal';\nimport { requireOperatorGroup } from './operator-group';\nimport { InstallPlanReview, referenceForStepResource } from './index';\n\nconst tableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl', 'pf-v5-c-table__td'),\n  Kebab.columnClass,\n];\n\nconst componentsTableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n];\n\nexport const InstallPlanTableRow: React.FC<RowFunctionArgs> = ({ obj }) => {\n  const { t } = useTranslation();\n  const phaseFor = (phase: InstallPlanKind['status']['phase']) => <Status status={phase} />;\n  return (\n    <>\n      {/* Name */}\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(InstallPlanModel)}\n          namespace={obj.metadata.namespace}\n          name={obj.metadata.name}\n        />\n      </TableData>\n\n      {/* Namespace */}\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n\n      {/* Status */}\n      <TableData className={tableColumnClasses[2]}>\n        {phaseFor(obj.status?.phase ?? 'Unknown')}\n      </TableData>\n\n      {/* Components */}\n      <TableData className={tableColumnClasses[3]}>\n        <ul className=\"pf-v5-c-list pf-m-plain\">\n          {obj.spec.clusterServiceVersionNames.map((csvName) => (\n            <li key={csvName}>\n              {obj.status?.phase === 'Complete' ? (\n                <ResourceLink\n                  kind={referenceForModel(ClusterServiceVersionModel)}\n                  name={csvName}\n                  namespace={obj.metadata.namespace}\n                  title={csvName}\n                />\n              ) : (\n                <>\n                  <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                  {csvName}\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </TableData>\n\n      {/* Subscriptions */}\n      <TableData className={tableColumnClasses[4]}>\n        {(obj.metadata.ownerReferences || [])\n          .filter((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel))\n          .map((ref) => (\n            <ul key={ref.uid} className=\"pf-v5-c-list pf-m-plain\">\n              <li>\n                <ResourceLink\n                  kind={referenceForModel(SubscriptionModel)}\n                  name={ref.name}\n                  namespace={obj.metadata.namespace}\n                  title={ref.uid}\n                />\n              </li>\n            </ul>\n          )) || <span className=\"text-muted\">{t('olm~None')}</span>}\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={Kebab.factory.common}\n          kind={referenceForModel(InstallPlanModel)}\n          resource={obj}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst EmptyMsg: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('olm~No InstallPlans found')}>\n      {t('olm~InstallPlans are created automatically by subscriptions or manually using the CLI.')}\n    </ConsoleEmptyState>\n  );\n};\n\nexport const InstallPlansList = requireOperatorGroup((props: InstallPlansListProps) => {\n  const { t } = useTranslation();\n  const InstallPlanTableHeader = () => {\n    return [\n      {\n        title: t('olm~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('olm~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('olm~Status'),\n        sortField: 'status.phase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('olm~Components'),\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('olm~Subscriptions'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~InstallPlans')}\n      Header={InstallPlanTableHeader}\n      Row={InstallPlanTableRow}\n      EmptyMsg={EmptyMsg}\n    />\n  );\n});\n\nconst getCatalogSources = (\n  installPlan: InstallPlanKind,\n): { sourceName: string; sourceNamespace: string }[] =>\n  _.reduce(\n    installPlan?.status?.plan || [],\n    (accumulator, { resource: { sourceName, sourceNamespace } }) =>\n      accumulator.add(fromJS({ sourceName, sourceNamespace })),\n    ImmutableSet(),\n  ).toJS();\n\nexport const InstallPlansPage: React.FC<InstallPlansPageProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const namespace = props.namespace || params?.ns;\n  return (\n    <MultiListPage\n      {...props}\n      namespace={namespace}\n      resources={[\n        {\n          kind: referenceForModel(InstallPlanModel),\n          namespace,\n          namespaced: true,\n          prop: 'installPlan',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.installPlan, 'data', [])}\n      title={t('olm~InstallPlans')}\n      showTitle={false}\n      ListComponent={InstallPlansList}\n    />\n  );\n};\n\nconst updateUser = (isOpenShift: boolean, user: UserInfo): string => {\n  if (!isOpenShift) {\n    return authSvc.name();\n  }\n  return user?.username;\n};\n\nexport const NeedInstallPlanPermissions: React.FC<NeedInstallPlanPermissionsProps> = ({\n  installPlan,\n}) => {\n  const isOpenShift = useFlag(FLAGS.OPENSHIFT);\n  const user: UserInfo = useSelector<RootState, object>(getUser);\n\n  const [username, setUsername] = React.useState(updateUser(isOpenShift, user));\n\n  React.useEffect(() => {\n    setUsername(updateUser(isOpenShift, user));\n  }, [isOpenShift, user]);\n\n  const { t } = useTranslation();\n\n  const apiGroup = apiGroupForReference(referenceFor(installPlan));\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title={t('olm~Missing sufficient privileges for manual InstallPlan approval')}\n    >\n      {username\n        ? t(\n            'olm~User \"{{user}}\" does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { user: username, apiGroup, namespace: installPlan.metadata.namespace },\n          )\n        : t(\n            'olm~User does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { apiGroup, namespace: installPlan.metadata.namespace },\n          )}\n    </Alert>\n  );\n};\n\nexport const InstallPlanDetails: React.FC<InstallPlanDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const needsApproval =\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false;\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return (\n    <>\n      {needsApproval && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <p>\n              {t(\n                'olm~Inspect the requirements for the components specified in this InstallPlan before approving.',\n              )}\n            </p>\n            <Link\n              to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                obj.metadata.name\n              }/components`}\n            >\n              <Button variant=\"primary\">{t('olm~Preview InstallPlan')}</Button>\n            </Link>\n          </HintBlock>\n        </div>\n      )}\n      {needsApproval && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~InstallPlan details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('olm~Status')}</dt>\n                <dd>\n                  <Status status={obj.status?.phase ?? t('olm~Unknown')} />\n                </dd>\n                <dt>{t('olm~Components')}</dt>\n                {(obj.spec.clusterServiceVersionNames || []).map((csvName) => (\n                  <dd key={csvName}>\n                    {obj.status.phase === 'Complete' ? (\n                      <ResourceLink\n                        kind={referenceForModel(ClusterServiceVersionModel)}\n                        name={csvName}\n                        namespace={obj.metadata.namespace}\n                        title={csvName}\n                      />\n                    ) : (\n                      <>\n                        <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                        {csvName}\n                      </>\n                    )}\n                  </dd>\n                ))}\n                <dt>{t('olm~CatalogSources')}</dt>\n                {getCatalogSources(obj).map(({ sourceName, sourceNamespace }) => (\n                  <dd key={`${sourceNamespace}-${sourceName}`}>\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={sourceName}\n                      namespace={sourceNamespace}\n                      title={sourceName}\n                    />\n                  </dd>\n                ))}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions conditions={obj.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const InstallPlanPreview: React.FC<InstallPlanPreviewProps> = ({\n  obj,\n  hideApprovalBlock,\n}) => {\n  const { t } = useTranslation();\n  const [needsApproval, setNeedsApproval] = React.useState(\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false,\n  );\n  const subscription = obj?.metadata?.ownerReferences.find(\n    (ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel),\n  );\n\n  const plan = obj?.status?.plan || [];\n  const stepsByCSV = plan\n    .reduce(\n      (acc, step) => acc.update(step.resolving, [], (steps) => steps.concat([step])),\n      ImmutableMap<string, Step[]>(),\n    )\n    .toArray();\n\n  const approve = () =>\n    k8sPatch(InstallPlanModel, obj, [{ op: 'replace', path: '/spec/approved', value: true }])\n      .then(() => setNeedsApproval(false))\n      .catch((error) => errorModal({ error: error.toString() }));\n\n  const stepStatus = (status: Step['status']) => (\n    <>\n      {status === 'Present' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status === 'Created' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status}\n    </>\n  );\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return plan.length > 0 ? (\n    <>\n      {needsApproval && !hideApprovalBlock && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      {needsApproval && !hideApprovalBlock && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <InstallPlanReview installPlan={obj} />\n            <div className=\"pf-v5-c-form\">\n              <div className=\"pf-v5-c-form__actions\">\n                <Button variant=\"primary\" isDisabled={!needsApproval} onClick={() => approve()}>\n                  {needsApproval ? t('olm~Approve') : t('olm~Approved')}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  isDisabled={false}\n                  onClick={() =>\n                    history.push(\n                      `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(SubscriptionModel)}/${\n                        subscription.name\n                      }?showDelete=true`,\n                    )\n                  }\n                >\n                  {t('olm~Deny')}\n                </Button>\n              </div>\n            </div>\n          </HintBlock>\n        </div>\n      )}\n      {stepsByCSV.map((steps) => (\n        <div key={steps[0].resolving} className=\"co-m-pane__body\">\n          <SectionHeading text={steps[0].resolving} />\n          <div className=\"co-table-container\">\n            <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n              <thead className=\"pf-v5-c-table__thead\">\n                <tr className=\"pf-v5-c-table__tr\">\n                  <th className={componentsTableColumnClasses[0]}>{t('olm~Name')}</th>\n                  <th className={componentsTableColumnClasses[1]}>{t('olm~Kind')}</th>\n                  <th className={componentsTableColumnClasses[2]}>{t('olm~Status')}</th>\n                  <th className={componentsTableColumnClasses[3]}>{t('olm~API version')}</th>\n                </tr>\n              </thead>\n              <tbody className=\"pf-v5-c-table__tbody\">\n                {steps.map((step) => (\n                  <tr\n                    key={`${referenceForStepResource(step.resource)}-${step.resource.name}`}\n                    className=\"pf-v5-c-table__tr\"\n                  >\n                    <td className={componentsTableColumnClasses[0]}>\n                      {['Present', 'Created'].includes(step.status) ? (\n                        <ResourceLink\n                          kind={referenceForStepResource(step.resource)}\n                          namespace={obj.metadata.namespace}\n                          name={step.resource.name}\n                          title={step.resource.name}\n                        />\n                      ) : (\n                        <>\n                          <ResourceIcon kind={referenceForStepResource(step.resource)} />\n                          <Button\n                            type=\"button\"\n                            onClick={() => installPlanPreviewModal({ stepResource: step.resource })}\n                            variant=\"link\"\n                          >\n                            {step.resource.name}\n                          </Button>\n                        </>\n                      )}\n                    </td>\n                    <td className={componentsTableColumnClasses[1]}>{step.resource.kind}</td>\n                    <td className={componentsTableColumnClasses[2]}>{stepStatus(step.status)}</td>\n                    <td className={componentsTableColumnClasses[3]}>\n                      {apiVersionForReference(referenceForStepResource(step.resource))}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ))}\n    </>\n  ) : (\n    <div className=\"co-m-pane__body\">\n      <ConsoleEmptyState title={t('olm~No components resolved')}>\n        {t('olm~This InstallPlan has not been fully resolved yet.')}\n      </ConsoleEmptyState>\n    </div>\n  );\n};\n\nexport const InstallPlanDetailsPage: React.FC = (props) => {\n  const params = useParams();\n  return (\n    <DetailsPage\n      {...props}\n      namespace={params.ns}\n      kind={referenceForModel(InstallPlanModel)}\n      name={params.name}\n      pages={[\n        navFactory.details(InstallPlanDetails),\n        navFactory.editYaml(),\n        // t('olm~Components')\n        { href: 'components', nameKey: 'olm~Components', component: InstallPlanPreview },\n      ]}\n      menuActions={[\n        ...Kebab.getExtensionsActionsForKind(InstallPlanModel),\n        ...Kebab.factory.common,\n      ]}\n    />\n  );\n};\n\nexport type InstallPlansListProps = {};\n\nexport type InstallPlansPageProps = {\n  namespace?: string;\n};\n\nexport type InstallPlanDetailsProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanPreviewProps = {\n  obj: InstallPlanKind;\n  hideApprovalBlock?: boolean;\n};\n\nexport type InstallPlanPreviewState = {\n  needsApproval: boolean;\n  error?: string;\n};\n\nexport type NeedInstallPlanPermissionsProps = {\n  installPlan: InstallPlanKind;\n  user?: UserInfo;\n};\n\nInstallPlansPage.displayName = 'InstallPlansPage';\n","import * as React from 'react';\nimport {\n  ActionGroup,\n  Alert,\n  Bullseye,\n  Button,\n  Card,\n  CardBody,\n  Icon,\n  Spinner,\n} from '@patternfly/react-core';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { ResourceStatus, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  Firehose,\n  FirehoseResult,\n  LoadingInline,\n  ResourceLink,\n  resourcePathFromModel,\n  useAccessReview,\n} from '@console/internal/components/utils';\nimport {\n  k8sPatch,\n  referenceForModel,\n  referenceFor,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared/src/components/status/icons';\nimport { RouteParams } from '@console/shared/src/types';\nimport {\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  PackageManifestModel,\n  SubscriptionModel,\n} from '../models';\nimport {\n  ClusterServiceVersionKind,\n  SubscriptionKind,\n  InstallPlanKind,\n  PackageManifestKind,\n} from '../types';\nimport { ClusterServiceVersionLogo } from './cluster-service-version-logo';\nimport { InstallPlanPreview, NeedInstallPlanPermissions } from './install-plan';\nimport { OLMAnnotation } from './operator-hub';\nimport { getInitializationResource } from './operator-hub/operator-hub-utils';\nimport { iconFor, InstallPlanReview } from './index';\n\nconst ViewInstalledOperatorsButton: React.FC<ViewOperatorButtonProps> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const singleNamespaceText = t('olm~View installed Operators in Namespace {{namespace}}', {\n    namespace,\n  });\n  const allNamespacesText = t('olm~View installed Operators in all Namespaces');\n  return (\n    <div className=\"co-operator-install-page__link\">\n      <Link\n        data-test=\"view-installed-operators-btn\"\n        to={resourcePathFromModel(ClusterServiceVersionModel, null, namespace)}\n      >\n        {namespace ? singleNamespaceText : allNamespacesText}\n      </Link>\n    </div>\n  );\n};\n\nconst InstallFailedMessage: React.FC<InstallFailedMessageProps> = ({ namespace, csvName, obj }) => {\n  const { t } = useTranslation();\n  const hasInitializationResource =\n    obj?.metadata?.annotations?.[OLMAnnotation.InitializationResource];\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Operator installation failed')}\n      </h2>\n      <p>\n        {t('olm~The operator did not install successfully.')}\n        {hasInitializationResource && (\n          <>\n            &nbsp;\n            {t(\"olm~The required custom resource can be created in the Operator's details view.\")}\n          </>\n        )}\n      </p>\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        <Link to={resourcePathFromModel(ClusterServiceVersionModel, csvName, namespace)}>\n          <Button variant=\"primary\">{t('olm~View error')}</Button>\n        </Link>\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nconst InstallNeedsApprovalMessage: React.FC<InstallNeedsApprovalMessageProps> = ({\n  namespace,\n  subscriptionObj,\n  installObj,\n  approve,\n}) => {\n  const { t } = useTranslation();\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace,\n    verb: 'patch',\n  });\n\n  const installObjIsInstallPlan = installObj.kind === 'InstallPlan';\n\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Manual approval required')}\n      </h2>\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        <InstallPlanReview installPlan={installObj} />\n        {((installObjIsInstallPlan && canPatchInstallPlans) || !installObjIsInstallPlan) && (\n          <>\n            <Button variant=\"primary\" onClick={approve}>\n              {t('olm~Approve')}\n            </Button>\n            <Link\n              to={`${resourcePathFromModel(\n                SubscriptionModel,\n                subscriptionObj?.metadata?.name,\n                namespace,\n              )}?showDelete=true`}\n            >\n              <Button className=\"co-clusterserviceversion__button\" variant=\"secondary\">\n                {t('olm~Deny')}\n              </Button>\n            </Link>\n          </>\n        )}\n        {!canPatchInstallPlans && installObjIsInstallPlan && (\n          <NeedInstallPlanPermissions installPlan={installObj as InstallPlanKind} />\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nexport const CreateInitializationResourceButton: React.FC<InitializationResourceButtonProps> = ({\n  disabled,\n  initializationResource,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const reference = referenceFor(initializationResource);\n  const kind = initializationResource?.kind;\n  const button = (\n    <Button aria-disabled={disabled} isDisabled={disabled} variant=\"primary\">\n      {t('olm~Create {{item}}', { item: kind })}\n    </Button>\n  );\n\n  return disabled ? (\n    button\n  ) : (\n    <Link\n      to={`${resourcePathFromModel(\n        ClusterServiceVersionModel,\n        obj.metadata.name,\n        obj.metadata.namespace,\n      )}/${reference}/~new?useInitializationResource`}\n    >\n      {button}\n    </Link>\n  );\n};\n\nconst InitializationResourceRequiredMessage: React.FC<InitializationResourceRequiredMessageProps> = ({\n  initializationResource,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const initializationResourceKind = initializationResource?.kind;\n  const initializationResourceNamespace = initializationResource?.metadata?.namespace;\n  const description = obj?.metadata?.annotations?.description;\n  return (\n    <div className=\"co-clusterserviceversion__box\">\n      <span className=\"co-resource-item\">\n        <ResourceLink\n          kind={initializationResourceKind}\n          name={initializationResourceKind}\n          namespace={initializationResourceNamespace}\n        />\n        <ResourceStatus badgeAlt>\n          <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Required')} />\n        </ResourceStatus>\n      </span>\n      <SyncMarkdownView content={description} />\n    </div>\n  );\n};\n\nconst InstallSucceededMessage: React.FC<InstallSuccededMessageProps> = ({\n  namespace,\n  csvName,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const initializationResource = getInitializationResource(obj?.metadata?.annotations, {\n    onError: (error) => errorModal({ error }),\n  });\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Installed operator')}: &nbsp;\n        {initializationResource ? t('olm~custom resource required') : t('olm~ready for use')}\n      </h2>\n      {initializationResource && (\n        <>\n          <span>\n            {t(\n              'olm~The Operator has installed successfully. Create the required custom resource to be able to use this Operator.',\n            )}\n          </span>\n          <InitializationResourceRequiredMessage\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        </>\n      )}\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        {initializationResource ? (\n          <CreateInitializationResourceButton\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        ) : (\n          <Link to={resourcePathFromModel(ClusterServiceVersionModel, csvName, namespace)}>\n            <Button variant=\"primary\">{t('olm~View Operator')}</Button>\n          </Link>\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nconst InstallingMessage: React.FC<InstallingMessageProps> = ({ namespace, obj }) => {\n  const { t } = useTranslation();\n  const reason = (obj as ClusterServiceVersionKind)?.status?.reason || '';\n  const message = (obj as ClusterServiceVersionKind)?.status?.message || '';\n  const initializationResource = getInitializationResource(obj?.metadata?.annotations, {\n    onError: (error) => errorModal({ error }),\n  });\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">{t('olm~Installing Operator')}</h2>\n      {reason && (\n        <p className=\"text-muted\">\n          {reason}: {message}\n        </p>\n      )}\n      <p>\n        {t('olm~The Operator is being installed. This may take a few minutes.')}\n        {initializationResource && (\n          <>\n            &nbsp;\n            {t(\n              'olm~Once the Operator is installed the required custom resource will be available for creation.',\n            )}\n          </>\n        )}\n      </p>\n      {initializationResource && (\n        <InitializationResourceRequiredMessage\n          initializationResource={initializationResource}\n          obj={obj}\n        />\n      )}\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        {initializationResource && (\n          <CreateInitializationResourceButton\n            disabled\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\ntype OperatorInstallStatusPageRouteParams = RouteParams<\n  'pkg' | 'catalogNamespace' | 'currentCSV' | 'targetNamespace'\n>;\n\nconst OperatorInstallLogo = ({ subscription }) => {\n  const { t } = useTranslation();\n  const notFound = t('olm~Not found');\n  const { currentCSV, catalogNamespace, pkg } = useParams<OperatorInstallStatusPageRouteParams>();\n  const [packageManifests, loaded, loadError] = useK8sWatchResource<PackageManifestKind[]>({\n    groupVersionKind: {\n      group: PackageManifestModel.apiGroup,\n      version: PackageManifestModel.apiVersion,\n      kind: PackageManifestModel.kind,\n    },\n    selector: {\n      matchLabels: {\n        'catalog-namespace': catalogNamespace,\n      },\n    },\n    fieldSelector: `metadata.name=${pkg}`,\n    isList: true,\n  });\n  const pkgManifest = packageManifests?.[0];\n  if (!loaded) {\n    return <LoadingInline />;\n  }\n\n  if (loadError || !pkgManifest) {\n    return (\n      <ClusterServiceVersionLogo\n        icon={null}\n        displayName={loadError ? t('olm~Error: {{loadError}}', { loadError }) : notFound}\n      />\n    );\n  }\n  const channels = pkgManifest?.status?.channels || [];\n  const channel = channels.find((ch) => ch.currentCSV === currentCSV) || channels[0];\n  const displayName = channel?.currentCSVDesc?.displayName || notFound;\n  const provider = pkgManifest?.status?.provider?.name || '';\n  const startingCSV = subscription?.spec?.startingCSV;\n\n  return (\n    <ClusterServiceVersionLogo\n      displayName={displayName}\n      icon={iconFor(pkgManifest)}\n      provider={provider}\n      version={startingCSV}\n    />\n  );\n};\n\nconst OperatorInstallStatus: React.FC<OperatorInstallPageProps> = ({ resources }) => {\n  const { t } = useTranslation();\n  const { currentCSV, targetNamespace } = useParams<OperatorInstallStatusPageRouteParams>();\n  let loading = true;\n  let status = '';\n  let installObj: ClusterServiceVersionKind | InstallPlanKind =\n    resources?.clusterServiceVersion?.data;\n  const subscription = resources?.subscription?.data;\n  status = installObj?.status?.phase;\n  if (installObj && status) {\n    loading = false;\n  } else if (subscription) {\n    // There is no ClusterServiceVersion for the package, so look at Subscriptions/InstallPlans\n    loading = false;\n    status = subscription?.status?.state || null;\n    const installPlanName = subscription?.status?.installPlanRef?.name || '';\n    const installPlan: InstallPlanKind = resources?.installPlans?.data?.find(\n      (ip) => ip.metadata.name === installPlanName,\n    );\n    if (installPlan) {\n      installObj = installPlan;\n    }\n  }\n\n  const isStatusSucceeded = status === 'Succeeded';\n  const isStatusFailed = status === 'Failed';\n  const isApprovalNeeded =\n    installObj?.spec?.approval === 'Manual' && installObj?.spec?.approved === false;\n\n  const approve = () => {\n    k8sPatch(InstallPlanModel, installObj, [\n      { op: 'replace', path: '/spec/approved', value: true },\n    ]).catch((error) => {\n      errorModal({ error: error.toString() });\n    });\n  };\n\n  let indicator = <Spinner size=\"lg\" />;\n  if (isStatusFailed) {\n    indicator = (\n      <Icon size=\"lg\">\n        <RedExclamationCircleIcon />\n      </Icon>\n    );\n  }\n  if (isApprovalNeeded) {\n    indicator = (\n      <Icon size=\"lg\">\n        <YellowExclamationTriangleIcon />\n      </Icon>\n    );\n  }\n  if (isStatusSucceeded) {\n    indicator = (\n      <Icon size=\"lg\">\n        <GreenCheckCircleIcon />\n      </Icon>\n    );\n  }\n\n  let installMessage = <InstallingMessage namespace={targetNamespace} obj={installObj} />;\n  if (isStatusFailed) {\n    installMessage = (\n      <InstallFailedMessage namespace={targetNamespace} obj={installObj} csvName={currentCSV} />\n    );\n  } else if (isApprovalNeeded) {\n    installMessage = (\n      <InstallNeedsApprovalMessage\n        namespace={targetNamespace}\n        subscriptionObj={subscription}\n        installObj={installObj}\n        approve={approve}\n      />\n    );\n  } else if (isStatusSucceeded) {\n    installMessage = (\n      <InstallSucceededMessage namespace={targetNamespace} csvName={currentCSV} obj={installObj} />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"co-operator-install-page__main\">\n        <Helmet>\n          <title>{t('olm~Installing Operator')}</title>\n        </Helmet>\n        <Bullseye>\n          <div id=\"operator-install-page\">\n            {loading && (\n              <div className=\"co-operator-install-page__indicator\">\n                {t('olm~Installing...')} <Spinner size=\"lg\" />\n              </div>\n            )}\n            {!loading && isStatusFailed && (\n              <Alert variant=\"danger\" isInline title=\"Installation Failed\">\n                {status}: {(installObj as ClusterServiceVersionKind)?.status?.message || ''}\n              </Alert>\n            )}\n            {!loading && (\n              <Card>\n                <CardBody>\n                  <div className=\"co-operator-install-page__pkg-indicator\">\n                    <div>\n                      <OperatorInstallLogo subscription={resources.subscription.data} />\n                    </div>\n                    <div>{indicator}</div>\n                  </div>\n                </CardBody>\n              </Card>\n            )}\n            {!loading && (\n              <Card>\n                <CardBody>{installMessage}</CardBody>\n              </Card>\n            )}\n          </div>\n        </Bullseye>\n      </div>\n      {!loading && isApprovalNeeded && (\n        <InstallPlanPreview obj={installObj as InstallPlanKind} hideApprovalBlock />\n      )}\n    </>\n  );\n};\n\nexport const OperatorInstallStatusPage: React.FC<OperatorInstallPageProps> = () => {\n  const { pkg, currentCSV, targetNamespace } = useParams<OperatorInstallStatusPageRouteParams>();\n\n  const installPageResources = [\n    {\n      kind: referenceForModel(ClusterServiceVersionModel),\n      namespaced: true,\n      isList: false,\n      name: currentCSV,\n      namespace: targetNamespace,\n      prop: 'clusterServiceVersion',\n    },\n    {\n      kind: referenceForModel(SubscriptionModel),\n      namespaced: true,\n      isList: false,\n      name: pkg,\n      namespace: targetNamespace,\n      optional: true,\n      prop: 'subscription',\n    },\n    {\n      kind: referenceForModel(InstallPlanModel),\n      prop: 'installPlans',\n      namespaced: true,\n      namespace: targetNamespace,\n      isList: true,\n      optional: true,\n    },\n  ];\n\n  return (\n    <Firehose resources={installPageResources}>\n      <OperatorInstallStatus />\n    </Firehose>\n  );\n};\n\nexport type OperatorInstallPageProps = {\n  resources?: {\n    clusterServiceVersion: FirehoseResult<ClusterServiceVersionKind>;\n    subscription: FirehoseResult<SubscriptionKind>;\n    installPlans: FirehoseResult<InstallPlanKind[]>;\n  };\n};\ntype InstallSuccededMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n  csvName: string;\n};\ntype InstallNeedsApprovalMessageProps = {\n  namespace: string;\n  subscriptionObj: SubscriptionKind;\n  installObj: ClusterServiceVersionKind | InstallPlanKind;\n  approve: () => void;\n};\ntype InstallingMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n};\ntype InstallFailedMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n  csvName: string;\n};\ntype InitializationResourceRequiredMessageProps = {\n  initializationResource: K8sResourceKind;\n  obj: ClusterServiceVersionKind | InstallPlanKind | SubscriptionKind;\n};\ntype InitializationResourceButtonProps = {\n  disabled?: boolean;\n  initializationResource: K8sResourceKind;\n  obj: ClusterServiceVersionKind | InstallPlanKind | SubscriptionKind;\n};\ntype ViewOperatorButtonProps = {\n  namespace: string;\n};\n","import * as React from 'react';\nimport { Label, FormAlert, Alert, Tooltip, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { YellowExclamationTriangleIcon } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\nimport { SubscriptionKind } from '../../types';\n\nexport enum DeprecatedOperatorType {\n  PackageDeprecated = 'PackageDeprecated',\n  ChannelDeprecated = 'ChannelDeprecated',\n  VersionDeprecated = 'BundleDeprecated',\n}\nconst findDeprecation = (obj: SubscriptionKind, type: string): DeprecatedOperatorWarning => {\n  return { deprecation: obj?.status?.conditions?.find((f) => f.type === type) };\n};\n\nexport const findDeprecatedOperator = (\n  obj: SubscriptionKind,\n): {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n} => {\n  return {\n    deprecatedPackage: findDeprecation(obj, DeprecatedOperatorType.PackageDeprecated),\n    deprecatedChannel: findDeprecation(obj, DeprecatedOperatorType.ChannelDeprecated),\n    deprecatedVersion: findDeprecation(obj, DeprecatedOperatorType.VersionDeprecated),\n  };\n};\n\nexport const DeprecatedOperatorWarningBadge: React.FC<DeprecatedOperatorWarningBadge> = ({\n  deprecation,\n  className,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <Label\n        data-test=\"deprecated-operator-warning-badge\"\n        color=\"orange\"\n        className={className}\n        icon={<YellowExclamationTriangleIcon />}\n      >\n        {t('olm~Deprecated')}\n      </Label>\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningIcon: React.FC<DeprecatedOperatorWarningIcon> = ({\n  deprecation,\n  dataTest,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <YellowExclamationTriangleIcon dataTest={dataTest} className=\"pf-v5-u-ml-xs\" />\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningAlert: React.FC<DeprecatedOperatorWarningProps> = ({\n  deprecatedPackage,\n  deprecatedChannel,\n  deprecatedVersion,\n  dismissible,\n}) => {\n  const { t } = useTranslation();\n  const [alertVisible, setAlertVisible] = React.useState<boolean>(true);\n\n  return (\n    alertVisible && (\n      <FormAlert className=\"pf-v5-u-my-md\">\n        <Alert\n          variant=\"warning\"\n          title={t('olm~Deprecated warnings')}\n          aria-live=\"polite\"\n          isInline\n          actionClose={\n            dismissible && <AlertActionCloseButton onClose={() => setAlertVisible(false)} />\n          }\n        >\n          <div data-test=\"deprecated-operator-warning-package\">\n            {deprecatedPackage?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-channel\">\n            {deprecatedChannel?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-version\">\n            {deprecatedVersion?.deprecation?.message}\n          </div>\n        </Alert>\n      </FormAlert>\n    )\n  );\n};\n\ntype DeprecatedOperatorWarningBadge = {\n  className?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningIcon = {\n  dataTest?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningProps = {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n  dismissible?: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\nimport operatorLogo from '../operator.svg';\nimport { ClusterServiceVersionIcon } from '../types';\nimport { DeprecatedOperatorWarningBadge } from './deprecated-operator-warnings/deprecated-operator-warnings';\n\nexport const ClusterServiceVersionLogo: React.FC<ClusterServiceVersionLogoProps> = (props) => {\n  const { icon, displayName, provider, version, deprecation } = props;\n  const { t } = useTranslation();\n\n  const imgSrc: string = _.isString(icon)\n    ? icon\n    : _.isEmpty(icon)\n    ? operatorLogo\n    : `data:${icon.mediatype};base64,${icon.base64data}`;\n\n  return (\n    <div className=\"co-clusterserviceversion-logo\">\n      <div className=\"co-clusterserviceversion-logo__icon\">\n        <span className=\"co-catalog-item-icon__bg\">\n          <img\n            className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n            src={imgSrc}\n            alt={displayName}\n            aria-hidden\n          />\n        </span>\n      </div>\n      <div className=\"co-clusterserviceversion-logo__name\">\n        <h1 className=\"co-clusterserviceversion-logo__name__clusterserviceversion\">\n          {displayName}{' '}\n          {deprecation && (\n            <DeprecatedOperatorWarningBadge className=\"pf-v5-u-ml-sm\" deprecation={deprecation} />\n          )}\n        </h1>\n        {provider && (\n          <span className=\"co-clusterserviceversion-logo__name__provider text-muted\">\n            {t('olm~{{version}} provided by {{provider}}', {\n              version: version || '',\n              provider: _.get(provider, 'name', provider),\n            })}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\nexport type ClusterServiceVersionLogoProps = {\n  displayName: string;\n  icon: ClusterServiceVersionIcon | string;\n  provider?: { name: string } | string;\n  version?: string;\n} & DeprecatedOperatorWarning;\n","module.exports = __webpack_public_path__ + \"assets/packages/operator-lifecycle-manager/src/operator.svg\";","import * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { safeDump } from 'js-yaml';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalFooter,\n} from '@console/internal/components/factory/modal';\nimport { ResourceLink, CopyToClipboard } from '@console/internal/components/utils';\nimport { StepResource } from '../../types';\nimport { referenceForStepResource } from '../index';\n\nconst InstallPlanPreview: React.FC<InstallPlanPreviewModalProps> = ({ cancel, stepResource }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>\n        {t('olm~InstallPlan Preview')}{' '}\n        <ResourceLink\n          linkTo={false}\n          name={stepResource.name}\n          kind={referenceForStepResource(stepResource)}\n        />\n      </ModalTitle>\n      <ModalBody>\n        <CopyToClipboard value={safeDump(JSON.parse(stepResource.manifest))} />\n      </ModalBody>\n      <ModalFooter inProgress={false}>\n        <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__actions--right pf-v5-c-form__group--no-top-margin\">\n          <Button type=\"button\" variant=\"secondary\" onClick={() => cancel()}>\n            {t('public~OK')}\n          </Button>\n        </ActionGroup>\n      </ModalFooter>\n    </div>\n  );\n};\n\nexport const installPlanPreviewModal = createModalLauncher<InstallPlanPreviewModalProps>(\n  InstallPlanPreview,\n);\n\nexport type InstallPlanPreviewModalProps = {\n  stepResource: StepResource;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nInstallPlanPreview.displayName = 'InstallPlanPreview';\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nexport const FormAlert = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (\n    // There are currently no associated styles with the pf-v5-c-form_alert class.\n    // Therefore, it does not exist in react-styles\n    React.createElement(\"div\", Object.assign({}, props, { className: css(`${styles.form}__alert`, className) }), children));\n};\nFormAlert.displayName = 'FormAlert';\n//# sourceMappingURL=FormAlert.js.map"],"sourceRoot":""}