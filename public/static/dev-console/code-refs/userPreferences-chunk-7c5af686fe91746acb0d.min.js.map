{"version":3,"sources":["webpack:///./packages/dev-console/src/components/user-preferences/index.ts","webpack:///./packages/dev-console/src/components/user-preferences/usePreferredRoutingOptions.tsx","webpack:///./packages/dev-console/src/components/user-preferences/SecureRouteFields.tsx"],"names":["PREFERRED_SECURE_ROUTING_OPTIONS_USER_SETTING_KEY","usePreferredRoutingOptions","preferredRoutingOptions","setPreferredRoutingOptions","preferredRoutingOptionsLoaded","secure","tlsTermination","insecureTraffic","t","fireTelemetryEvent","isTLSTerminationOpen","setIsTLSTerminationOpen","isInsecureTrafficOpen","setIsInsecureTrafficOpen","terminationOptions","EDGE","PASSTHROUGH","REENCRYPT","tlsTerminationSelectOptions","Object","keys","map","tlsTerminationOption","key","value","insecureTrafficOptions","None","Redirect","Allow","insecureTrafficSelectOptions","insecureTrafficOption","onSecureRouteChecked","_event","checked","property","onTLSTerminationToggle","onInsecureTrafficToggle","onTLSTerminationSelect","_","selection","toString","onInsecureTrafficSelect","className","id","label","isChecked","onChange","description","isDisabled","fieldId","isOpen","onSelect","selected","onOpenChange","toggle","toggleRef","isFullWidth","ref","onClick","isExpanded","placeholder","style","maxHeight","shouldFocusToggleOnSelect"],"mappings":"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","file":"dev-console/code-refs/userPreferences-chunk-7c5af686fe91746acb0d.min.js","sourcesContent":["export { default as SecureRouteFields } from './SecureRouteFields';\n","import { Dispatch, SetStateAction } from 'react';\nimport { useUserSettings } from '@console/shared';\n\nexport const PREFERRED_SECURE_ROUTING_OPTIONS_USER_SETTING_KEY =\n  'devconsole.import.secureRoutingOptions';\n\ntype RoutingOptions = {\n  secure: boolean;\n  tlsTermination?: string;\n  insecureTraffic?: string;\n};\n\nexport const usePreferredRoutingOptions = (): [\n  RoutingOptions,\n  Dispatch<SetStateAction<RoutingOptions>>,\n  boolean,\n] => {\n  const [\n    preferredRoutingOptions,\n    setPreferredRoutingOptions,\n    preferredRoutingOptionsLoaded,\n  ] = useUserSettings<RoutingOptions>(PREFERRED_SECURE_ROUTING_OPTIONS_USER_SETTING_KEY, {\n    secure: true,\n    tlsTermination: 'edge',\n    insecureTraffic: 'Redirect',\n  });\n  return [preferredRoutingOptions, setPreferredRoutingOptions, preferredRoutingOptionsLoaded];\n};\n","import * as React from 'react';\nimport {\n  Checkbox,\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  Select,\n  SelectList,\n  SelectOption,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { useTelemetry } from '@console/shared/src/hooks/useTelemetry';\nimport {\n  TerminationType,\n  InsecureTrafficType,\n  PassthroughInsecureTrafficType,\n} from '../import/import-types';\nimport {\n  PREFERRED_SECURE_ROUTING_OPTIONS_USER_SETTING_KEY,\n  usePreferredRoutingOptions,\n} from './usePreferredRoutingOptions';\n\nconst SecureRouteFields: React.FC = () => {\n  const { t } = useTranslation();\n  const fireTelemetryEvent = useTelemetry();\n  const [\n    preferredRoutingOptions,\n    setPreferredRoutingOptions,\n    preferredRoutingOptionsLoaded,\n  ] = usePreferredRoutingOptions();\n  const { secure, tlsTermination, insecureTraffic } =\n    preferredRoutingOptionsLoaded && preferredRoutingOptions;\n  const [isTLSTerminationOpen, setIsTLSTerminationOpen] = React.useState<boolean>(false);\n  const [isInsecureTrafficOpen, setIsInsecureTrafficOpen] = React.useState<boolean>(false);\n\n  const terminationOptions = React.useMemo(() => {\n    return {\n      [TerminationType.EDGE]: t('devconsole~Edge'),\n      [TerminationType.PASSTHROUGH]: t('devconsole~Passthrough'),\n      [TerminationType.REENCRYPT]: t('devconsole~Re-encrypt'),\n    };\n  }, [t]);\n\n  const tlsTerminationSelectOptions: JSX.Element[] = React.useMemo(() => {\n    return Object.keys(terminationOptions).map((tlsTerminationOption) => (\n      <SelectOption key={tlsTerminationOption} value={tlsTerminationOption}>\n        {terminationOptions[tlsTerminationOption]}\n      </SelectOption>\n    ));\n  }, [terminationOptions]);\n\n  const insecureTrafficOptions = React.useMemo(() => {\n    return tlsTermination === TerminationType.PASSTHROUGH\n      ? {\n          [PassthroughInsecureTrafficType.None]: t('devconsole~None'),\n          [PassthroughInsecureTrafficType.Redirect]: t('devconsole~Redirect'),\n        }\n      : {\n          [InsecureTrafficType.None]: t('devconsole~None'),\n          [InsecureTrafficType.Allow]: t('devconsole~Allow'),\n          [InsecureTrafficType.Redirect]: t('devconsole~Redirect'),\n        };\n  }, [t, tlsTermination]);\n\n  const insecureTrafficSelectOptions: JSX.Element[] = React.useMemo(() => {\n    return Object.keys(insecureTrafficOptions).map((insecureTrafficOption) => (\n      <SelectOption key={insecureTrafficOption} value={insecureTrafficOption}>\n        {insecureTrafficOptions[insecureTrafficOption]}\n      </SelectOption>\n    ));\n  }, [insecureTrafficOptions]);\n\n  const onSecureRouteChecked = React.useCallback(\n    (_event: React.FormEvent<HTMLInputElement>, checked: boolean) => {\n      setPreferredRoutingOptions({\n        secure: checked,\n        tlsTermination,\n        insecureTraffic,\n      });\n      fireTelemetryEvent('User Preference Changed', {\n        property: PREFERRED_SECURE_ROUTING_OPTIONS_USER_SETTING_KEY,\n      });\n    },\n    [fireTelemetryEvent, insecureTraffic, setPreferredRoutingOptions, tlsTermination],\n  );\n\n  const onTLSTerminationToggle = () => {\n    setIsTLSTerminationOpen(!isTLSTerminationOpen);\n  };\n\n  const onInsecureTrafficToggle = () => {\n    setIsInsecureTrafficOpen(!isInsecureTrafficOpen);\n  };\n\n  const onTLSTerminationSelect = React.useCallback(\n    (_, selection: string) => {\n      if (typeof selection === 'undefined') {\n        return;\n      }\n\n      setPreferredRoutingOptions({\n        secure,\n        tlsTermination: selection.toString(),\n        insecureTraffic,\n      });\n      setIsTLSTerminationOpen(false);\n      fireTelemetryEvent('User Preference Changed', {\n        property: PREFERRED_SECURE_ROUTING_OPTIONS_USER_SETTING_KEY,\n      });\n    },\n    [fireTelemetryEvent, insecureTraffic, secure, setPreferredRoutingOptions],\n  );\n\n  const onInsecureTrafficSelect = React.useCallback(\n    (_, selection: string) => {\n      setPreferredRoutingOptions({\n        secure,\n        tlsTermination,\n        insecureTraffic: selection.toString(),\n      });\n      setIsInsecureTrafficOpen(false);\n      fireTelemetryEvent('User Preference Changed', {\n        property: PREFERRED_SECURE_ROUTING_OPTIONS_USER_SETTING_KEY,\n      });\n    },\n    [fireTelemetryEvent, secure, setPreferredRoutingOptions, tlsTermination],\n  );\n\n  const tlsTerminationToggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle\n      isFullWidth\n      id=\"tls-termination\"\n      ref={toggleRef}\n      onClick={onTLSTerminationToggle}\n      isExpanded={isTLSTerminationOpen}\n      isDisabled={!preferredRoutingOptionsLoaded}\n      placeholder={t('devconsole~Select termination type')}\n      aria-label={t('devconsole~Select termination type')}\n      style={\n        {\n          maxHeight: '300px',\n        } as React.CSSProperties\n      }\n    >\n      {terminationOptions[tlsTermination]}\n    </MenuToggle>\n  );\n\n  const insecureTrafficToggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle\n      isFullWidth\n      ref={toggleRef}\n      id=\"insecure-traffic\"\n      onClick={onInsecureTrafficToggle}\n      isExpanded={isInsecureTrafficOpen}\n      isDisabled={!preferredRoutingOptionsLoaded}\n      placeholder={t('devconsole~Select insecure traffic type')}\n      aria-label={t('devconsole~Select insecure traffic type')}\n      style={\n        {\n          maxHeight: '300px',\n        } as React.CSSProperties\n      }\n    >\n      {insecureTrafficOptions[insecureTraffic]}\n    </MenuToggle>\n  );\n\n  return (\n    <div className=\"pf-v5-c-form\">\n      <span className=\"co-help-text\">\n        {t(\n          'devconsole~The defaults below will only apply to the Import from Git and Deploy Image forms when creating Deployments or Deployment Configs.',\n        )}\n      </span>\n      <Checkbox\n        id=\"secure-route-checkbox\"\n        data-test=\"secure-route-checkbox\"\n        label={t('devconsole~Secure route')}\n        isChecked={secure}\n        data-checked-state={secure}\n        onChange={onSecureRouteChecked}\n        aria-label={t('devconsole~Secure route')}\n        description={t(\n          'devconsole~Routes can be secured using several TLS termination types for serving certificates.',\n        )}\n        isDisabled={!preferredRoutingOptionsLoaded}\n        className=\"odc-secure-route-fields__secure-route\"\n      />\n\n      <FormGroup fieldId=\"tls-termination\" label={t('devconsole~TLS termination')}>\n        <Select\n          id=\"tls-termination-select\"\n          isOpen={isTLSTerminationOpen}\n          onSelect={onTLSTerminationSelect}\n          selected={tlsTermination}\n          onOpenChange={onTLSTerminationToggle}\n          toggle={tlsTerminationToggle}\n          shouldFocusToggleOnSelect\n        >\n          <SelectList>{tlsTerminationSelectOptions}</SelectList>\n        </Select>\n      </FormGroup>\n      <FormGroup fieldId=\"insecure-traffic\" label={t('devconsole~Insecure traffic')}>\n        <Select\n          id=\"insecure-traffic-select\"\n          isOpen={isInsecureTrafficOpen}\n          selected={insecureTraffic}\n          onSelect={onInsecureTrafficSelect}\n          onOpenChange={onInsecureTrafficToggle}\n          toggle={insecureTrafficToggle}\n          shouldFocusToggleOnSelect\n        >\n          <SelectList>{insecureTrafficSelectOptions}</SelectList>\n        </Select>\n\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              {t('devconsole~Policy for traffic on insecure schemes like HTTP.')}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </div>\n  );\n};\n\nexport default SecureRouteFields;\n"],"sourceRoot":""}