{"version":3,"sources":["webpack:///./public/components/image-stream.tsx","webpack:///./packages/dev-console/src/components/health-checks/index.ts","webpack:///./packages/pipelines-plugin/src/models/index.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/const.ts","webpack:///./packages/pipelines-plugin/src/types/index.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-filter-reducer.ts","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/import-types.ts","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/pipelines-plugin/src/models/pipelines.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-utils.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts","webpack:///./packages/pipelines-plugin/src/types/coreTekton.ts","webpack:///./packages/pipelines-plugin/src/types/pipelineRun.ts","webpack:///./packages/pipelines-plugin/src/types/taskRun.ts","webpack:///./packages/pipelines-plugin/src/types/computedStatus.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-augment.ts","webpack:///./packages/pipelines-plugin/src/components/repository/consts.ts","webpack:///./packages/dev-console/src/components/import/import-validation-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-metrics/pipeline-metrics-utils.ts","webpack:///./packages/dev-console/src/components/import/serverless/serverless-utils.ts","webpack:///./packages/pipelines-plugin/src/components/repository/repository-form-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pac/const.ts","webpack:///./packages/pipelines-plugin/src/const.ts","webpack:///./packages/dev-console/src/utils/imagestream-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/modals/common/utils.ts","webpack:///./packages/dev-console/src/components/health-checks/create-health-checks-probe-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-types.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/modals/common/const.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-resource/pipelineResource-utils.ts","webpack:///./public/components/image-stream-timeline.tsx","webpack:///./packages/shipwright-plugin/src/types.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/modals/start-pipeline/submit-utils.ts","webpack:///./packages/pipelines-plugin/src/components/import/pipeline/pipeline-template-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-utils.ts","webpack:///./packages/dev-console/src/components/edit-application/edit-application-utils.ts","webpack:///./packages/dev-console/src/components/import/upload-jar-validation-utils.ts","webpack:///./packages/dev-console/src/components/import/deployImage-validation-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/HealthChecks.tsx","webpack:///./packages/dev-console/src/components/health-checks/HealthCheckProbe.tsx","webpack:///./packages/dev-console/src/components/health-checks/ProbeForm.tsx","webpack:///./packages/dev-console/src/components/health-checks/RequestTypeForms.tsx","webpack:///./packages/dev-console/src/components/health-checks/HealthChecksPage.tsx","webpack:///./packages/dev-console/src/components/health-checks/AddHealthChecksForm.tsx","webpack:///./packages/dev-console/src/components/health-checks/AddHealthChecks.tsx"],"names":["getAnnotationTags","specTag","split","getBuilderTags","imageStream","statusTags","getStatusTags","spec","tags","tag","annotationTags","isBuilderTag","name","getBuilderTagsSortedByVersion","sort","a","b","v1","v2","localeCompare","getMostRecentBuilderTag","isBuilder","common","factory","menuActions","getExtensionsActionsForKind","ImageStreamTagsRow","statusTag","imageStreamStatus","latest","from","referencesTag","image","created","dockerRepositoryCheck","t","className","kind","metadata","namespace","title","linkTo","timestamp","ExampleDockerCommandPopover","publicImageRepository","pushCommand","pullCommand","headerContent","minWidth","bodyContent","value","ns","href","text","type","variant","ImageStreamsDetails","obj","imageRepository","imageCount","specTagByName","importErrors","status","acc","importErrorCondition","conditions","condition","push","message","warning","alerts","error","i","key","resource","ImageStreamHistory","imageStreamStatusTags","imageStreamTags","imageStreamName","imageStreamNamespace","displayName","pages","details","editYaml","history","ImageStreamsDetailsPage","props","tableColumnClasses","columnClass","ImageStreamsTableRow","columnID","labels","creationTimestamp","actions","ImageStreamsList","ImageStreamsTableHeader","sortField","transforms","id","Header","Row","virtualize","buildPhase","build","phase","ImageStreamsPage","ListComponent","canCreate","StartedByLabel","StartedByAnnotation","TektonTaskAnnotation","TaskProviders","TektonTaskLabel","TektonResourceLabel","PipelineResourceType","VolumeTypes","SecretAnnotationId","Git","Image","PIPELINE_GA_VERSION","TRIGGERS_GA_VERSION","PIPELINE_UNSIMPLIFIED_METRICS_VERSION","PIPELINE_SERVICE_ACCOUNT","PIPELINE_RUN_AUTO_START_FAILED","DEFAULT_CHART_HEIGHT","DEFAULT_LEGEND_CHART_HEIGHT","DEFAULT_SAMPLES","preferredNameAnnotation","chainsSignedAnnotation","PIPELINE_NAMESPACE","PIPELINERUN_TEMPLATE_NAMESPACE","PIPELINE_CONFIG_NAME","PipelineMetricsLevel","FLAG_TEKTON_V1_ENABLED","FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER","FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER","SucceedConditionReason","pipelineRunStatus","pipelineRun","length","succeedCondition","find","c","cancelledCondition","reason","PipelineRunStopped","PipelineRunCancelled","includes","Cancelling","Succeeded","Failed","Running","TaskRunCancelled","Cancelled","PipelineRunStopping","TaskRunStopping","CreateContainerConfigError","ExceededNodeResources","ExceededResourceQuota","PipelineRunPending","Pending","ConditionCheckFailed","Skipped","pipelineRunStatusTitle","pipelineFilterReducer","pipeline","latestRun","Other","pipelineTitleFilterReducer","pipelineRunTitleFilterReducer","pipelineRunFilterReducer","pipelineStatusFilter","filters","selected","all","pipelineRunStatusFilter","phases","taskRunFilterReducer","taskRun","taskRunFilterTitleReducer","flexStyle","display","flex","flexDirection","margin","subTitle","fullWidth","children","flexLayout","extraMargin","dataTest","style","PipelineType","hostnameRegex","pathRegex","gitUrlRegex","projectNameValidationSchema","shape","matches","required","applicationNameValidationSchema","selectedKey","max","when","is","then","deploymentValidationSchema","replicas","transform","cv","undefined","test","min","Number","MAX_SAFE_INTEGER","maxSafeInteger","resourcesValidationSchema","oneOf","OpenShift","Kubernetes","KnativeService","serverlessValidationSchema","scaling","minpods","maxpods","limit","this","parent","concurrencytarget","concurrencylimit","concurrencyutilization","autoscale","autoscalewindow","autoscalewindowUnit","unit","convertToSec","domainMapping","of","excludeEmptyString","domainName","routeValidationSchema","secure","tls","termination","hostname","path","unknownTargetPort","typeError","integer","limitsValidationSchema","cpu","request","requestUnit","limitUnit","ensure","memory","imageValidationSchema","strategy","gitValidationSchema","url","showGitType","dockerValidationSchema","containerPort","dockerfilePath","devfileValidationSchema","devfilePath","devfileContent","devfileHasError","devfileSuggestedResources","buildValidationSchema","isiValidationSchema","importFlowPipelineTemplateValidationSchema","isPipelineEnabled","buildOption","pipelineType","PIPELINES","PAC","templateSelected","color","PipelineModel","apiGroup","apiVersion","label","labelKey","labelPluralKey","plural","abbr","namespaced","labelPlural","crd","PipelineModelV1Beta1","PipelineRunModel","PipelineRunModelV1Beta1","TaskModel","TaskModelV1Beta1","TaskRunModel","TaskRunModelV1Beta1","CustomRunModelV1Beta1","PipelineResourceModel","ClusterTaskModel","ConditionModel","TriggerBindingModel","ClusterTriggerBindingModel","TriggerTemplateModel","EventListenerModel","RepositoryModel","TektonConfigModel","TektonHubModel","TektonResultModel","task","resources","inputs","runAfter","ListFilterId","ListFilterLabels","PipelineResourceListFilterId","PullRequest","Cluster","Storage","CloudEvent","appendPipelineRunStatus","taskRuns","isFinallyTasks","finally","tasks","map","Idle","tr","pipelineTask","taskStatus","mTask","pipelineTaskName","completionTime","startTime","date","Date","getTime","duration","getPipelineTasks","out","taskList","forEach","flag","taskRef","nextToFlag","splice","getFinallyTasksWithStatus","containerToLogSourceStatus","container","state","lastState","waiting","terminated","getLatestPipelineRunStatus","pipelineRuns","latestPipelineRun","PipelineNotStarted","getPipelineRunParams","pipelineParams","param","default","getPipelineRunWorkspaces","pipelineWorkspaces","workspace","data","calculateDuration","endTime","long","start","durationInSeconds","pipelineRunDuration","run","updateServiceAccount","secretName","originalServiceAccount","updateImagePullSecrets","updatedServiceAccount","secrets","imagePullSecrets","associateServiceAccountToSecret","secret","isImageSecret","serviceAccount","s","catch","err","getAnnotationKey","secretType","suffix","getSecretAnnotations","annotation","existingAnnotations","count","annotationKey","pipelinesTab","kindObj","getMatchedPVCs","pvcResources","ownerResourceName","ownerResourceKind","filter","pvc","ownerReferences","some","reference","getPipeline","pipelines","p","getTriggerTemplates","triggerTemplates","tt","resourcetemplates","rt","pipelineRef","getEventListeners","eventListeners","reduce","et","triggers","template","ref","returnValidPipelineModel","returnValidPipelineRunModel","returnValidTaskModel","TaskRunResultsAnnotations","TaskRunResultsAnnotationValue","TaskRunResults","getSbomTaskRun","taskruns","annotations","KEY","SBOM","hasExternalLink","sbomTaskRun","TYPE","EXTERNAL_LINK","getSbomLink","results","taskResults","r","getImageUrl","PipelineRun","pipelineResults","IMAGE_REPOSITORY","taskRunStatus","getPipelineRunStatus","conditionsMessage","match","result","trim","totalSucceeded","Completed","Incomplete","isInteger","bitBucketUserNameRegex","MetricsLevel","LevelTypes","DurationTypes","PipelineRunGroupVersionKind","group","version","TaskRunGroupVersionKind","ComputedStatus","CustomRunStatus","getLatestRun","runs","field","pipelineSpec","succeededCondition","augmentRunsToData","pipelineruns","prsForPipeline","pr","getRunStatusColor","pftoken","FailedToStart","getPipelineFromPipelineRun","pipelineName","getTaskStatus","pipelinerun","totalTasks","executedPipeline","totalPipelineRunTasks","totalPipelineRunCustomTasks","plrTasks","Object","keys","tRun","plrTaskLength","skippedTaskLength","skippedTasks","pipelineRunHasFailure","pipelineRunIsCancelled","unhandledTasks","getResourceModelFromTaskKind","getSafeTaskResourceKind","getResourceModelFromBindingKind","getSafeBindingResourceKind","getModelReferenceFromTaskKind","model","countRunningTasks","taskStatuses","shouldHidePipelineRunStop","shouldHidePipelineRunStopForTaskRunStatus","taskRunStatusObj","shouldHidePipelineRunCancel","shouldHidePipelineRunCancelForTaskRunStatus","RepositoryFields","RepoAnnotationFields","RepositoryRuntimes","RepositoryLabels","REPOSITORY","URL_REPO","URL_ORG","SHA","EVENT_TYPE","RepositoryAnnotations","SHA_MESSAGE","SHA_URL","REPO_URL","BRANCH","PacConfigurationTypes","defaultRepositoryFormValues","gitUrl","githubAppAvailable","gitProvider","INVALID","method","showOverviewPage","yamlData","webhook","token","user","autoAttach","AccessTokenDocLinks","GITHUB","GITLAB","BITBUCKET","WebhookDocLinks","gitProviderTypesHosts","validationSchema","project","application","git","docker","devfile","deployment","serverless","route","limits","healthChecks","pac","hasDomain","domain","startsWith","detectGitType","GITEA","UNSURE","createComponentName","nameString","kebabCaseStr","detectGitRepoName","replace","pop","PipelineQuery","MetricsQueryPrefix","metricsQueries","prefix","TEKTON_PIPELINES_CONTROLLER","PIPELINE_TASK_LEVEL","PIPELINE_SUCCESS_RATIO","NUMBER_OF_PIPELINE_RUNS","PIPELINERUN_TASKRUN_LEVEL","PIPELINE_RUN_TASK_RUN_DURATION","PIPELINE_RUN_DURATION","UNSIMPLIFIED_METRICS_LEVEL","formatValue","v","string","toExponential","formatPositiveValue","Math","abs","formatDate","format","formatTimeSeriesValues","samples","span","metric","values","newValues","y","x","setHours","isNaN","end","step","getRangeVectorData","response","xMutator","yMutator","parseFloat","time","getXaxisValues","timespan","xValues","oneDayDuration","numDays","round","d","now","setDate","getDate","slice","getDuration","seconds","sec","hr","floor","PipelineMetricsTimeRangeOptions","getTransformedDataPoints","previousValue","val","currentValue","getAutoscaleWindow","autoscaleValue","defaultAutoscalewindowUnit","DOMAIN_MAPPING_KSVC_INFO_REGEX","removeKsvcInfoFromDomainMapping","dm","getOtherKsvcFromDomainMapping","currentKsvcName","removeDuplicateDomainMappings","allDomainMappings","connectedDomainMappings","Set","n","hasOtherKsvcDomainMappings","RegExp","getAllOtherDomainMappingInUse","domainMappings","serviceName","selectedDomain","dryRunOpt","dryRun","repositoryValidationSchema","accessToken","secretRef","pipelinesAccessTokenValidationSchema","importFlowRepositoryValidationSchema","repository","pipelineEnabled","createRepositoryResources","secretObj","webhookSecret","encodedSecret","encode","detectedGitType","repositoryName","generateName","opaque","stringData","queryParams","createTokenSecret","op","gitHost","source","git_provider","webhook_secret","createRemoteWebhook","loaded","webhookURL","gitService","authToken","sslVerification","decode","createRepoWebhook","recommendRepositoryName","getPipelineRunTemplate","runtime","repoName","runTimeTemplate","pipelineRunTemplateCfg","labelSelector","matchLabels","e","console","log","pipelineRunTemplate","getFallbackTemplate","getPipelineRunDefaultTemplate","healthChecksValidationSchema","containerName","showForm","enabled","modified","periodSeconds","initialDelaySeconds","failureThreshold","timeoutSeconds","successThreshold","requestType","httpGet","port","tcpSocket","exec","command","healthChecksProbesValidationSchema","readinessProbe","livenessProbe","startupProbe","PAC_GH_APP_NEW","PAC_GH_APP_DOC","PAC_GH_APP_MANIFEST_API","EVENT_LISTNER_NAME","PAC_SECRET_NAME","PAC_GH_APP_NAME","PAC_INFO","PAC_TEMPLATE_DEFAULT","FLAG_OPENSHIFT_PIPELINE","FLAG_OPENSHIFT_PIPELINE_AS_CODE","FLAG_OPENSHIFT_PIPELINE_CONDITION","CLUSTER_PIPELINE_NS","PIPELINE_RUNTIME_LABEL","PIPELINE_RUNTIME_VERSION_LABEL","PIPELINE_STRATEGY_LABEL","PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY","FUNC_PIPELINE_RUNTIME_LABEL","ARTIFACTHUB_API_BASE_URL","DELETED_RESOURCE_IN_K8S_ANNOTATION","RESOURCE_LOADED_FROM_RESULTS_ANNOTATION","imageStreamLabels","getSampleRepo","sampleRepo","getSampleRef","sampleRef","getSampleContextDir","sampleContextDir","getPorts","imageStreamImage","portSpec","parts","parseInt","protocol","toUpperCase","warn","portsFromSpec","dockerImageMetadata","Config","ExposedPorts","ContainerConfig","makePortName","toLowerCase","prettifyName","first","prep","letter","normalizeBuilderImages","imageStreams","Array","isArray","builderImages","recentTag","description","iconClass","iconUrl","getTagDataWithDisplayName","imageTags","selectedTag","defaultName","imageTag","getSuggestedName","imageName","RegistryType","BuilderImagesNamespace","imageRegistryType","External","Internal","getImageStreamTags","getSortedTags","getProjectResource","isList","prop","getImageStreamResource","getPipelineRunGenerateName","getPipelineRunData","options","getPipelineName","workspaces","latestRunParams","params","newPipelineRun","serviceAccountName","migratePipelineRun","getDefaultVolumeClaimTemplate","volumeClaimTemplate","accessModes","requests","storage","getServerlessFunctionDefaultPersistentVolumeClaim","finalizers","storageClassName","volumeMode","supportWorkspaceDefaults","preselectPVC","workspaceSetting","EmptyDirectory","emptyDir","PVC","persistentVolumeClaim","claimName","optional","NoWorkspace","convertPipelineToModalData","alwaysCreateResources","parameters","selection","convertMapToNameValueArray","getPipelineRunFromForm","formValues","pipelineRunData","constructProbeData","resourceType","ContainerCommand","HTTPGET","scheme","TCPSocket","convertResourceDataToFormData","resourceData","toString","getHealthChecksData","containerIndex","containers","ReadinessProbe","LivenessProbe","StartupProbe","getProbesData","HealthChecksProbeType","RequestType","CREATE_PIPELINE_RESOURCE","initialResourceFormValues","revision","location","dir","cluster","username","password","insecure","cadata","getDefinedObj","objData","createPipelineResource","secretResp","resourceName","pipelineResource","fieldName","secretKey","createSecretResource","secretResource","getImageStreamTagName","ImageStreamTimelineItem","linkToTag","referenceAndSHA","dockerImageReference","simple","isTagVersionLatest","comparedTag","comparedTagPosition","orderedTagArray","orderedTag","ImageStreamTimeline","tagsArray","items","timeline","ComputedBuildRunStatus","ClusterBuildStrategy","ReadableClusterBuildStrategies","BUILDAH","S2I","UNKNOWN","getHealthChecksProbeConfig","probe","formTitle","formSubtitle","healthChecksDefaultValues","httpHeaders","healthChecksProbeInitialData","processResources","toCreateResources","index","createdResources","Promise","resourceValues","resourceSubmit","indexLookup","creationIndex","indexOf","submitStartPipeline","processWorkspaces","pipelineRunResource","resolve","getPipelineParams","gitRef","gitDir","buildEnv","isDockerPipeline","createPipelineForImportFlow","createPipelineRunForImportFlow","isServerlessFunctionPipeline","pipelineInitialValues","VolumeClaimTemplate","secretOpen","updatePipelineForImportFlow","updatedPipeline","pipelineRuntimeOrVersionChanged","resourceVersion","updateHealthChecksProbe","updatedResource","HealthCheckContext","viewOnly","useViewOnlyAccess","verb","ApplicationFlowType","getFlowTypePageTitle","flowType","Dockerfile","Container","JarUpload","BuildSourceType","getBuildSourceType","buildConfig","getResourcesType","getFlowType","buildStrategy","buildType","Source","Binary","Docker","getValidationSchema","checkIfTriggerExists","resourceKind","trigger","imageChangeParams","automatic","getKsvcRouteData","ports","create","targetPort","defaultUnknownPort","getRouteLabels","allLabels","allRouteLabels","getRouteData","routeData","disable","insecureEdgeTerminationPolicy","caCertificate","certificate","destinationCACertificate","getBuildData","shipwrightBuild","gitType","BUILDS","SHIPWRIGHT_BUILD","DISABLED","getBuildOption","buildStrategyType","shipwrightClusterBuildStrategyType","buildStrategyData","env","config","option","clusterBuildStrategy","getServerlessData","serverlessData","autoscalewindowAnnotation","containerConcurrency","getDeploymentData","deploymentData","imagePullPolicy","Always","imageTrigger","JSON","parse","paused","getUserLabels","getIconInitialValues","editAppResource","runtimeLabel","runtimeIcon","getGitAndDockerfileInitialValues","currentImage","sourceStrategy","isUrlValidating","getGitDataFromPipeline","getGitDataFromShipwrightBuild","uri","getGitDataFromBuildConfig","dockerStrategy","recommended","tagObj","isRecommending","couldNotRecommend","deployImageInitialValues","searchTerm","registry","allowInsecureRegistry","isi","isSearchingForImage","getExternalImageValues","appResource","getInitialValues","appResources","appName","editAppResourceData","buildConfigData","shipwrightBuildData","pipelineData","commonValues","appGroupName","formType","PIPELINE","pacHasError","import","showEditImportStrategy","selectedStrategy","priority","detectedFiles","getCommonInitialValues","gitDockerValues","fileUploadValues","iconValues","externalImageValues","internalImageValues","imageStreamList","imageStreamData","isAllowInsecureRegistry","importPolicy","getExternalImageInitialValues","imageStreamTag","getInternalImageInitialValues","fileName","jarFileName","javaArgs","args","fileUpload","getFileUploadValues","fileNameRegex","fileUploadValidationSchema","getAppName","shift","deployValidationSchema","probeType","setFieldValue","temporaryProbeData","setTemporaryProbeData","showProbe","handleDeleteProbe","handleReset","handleSubmit","handleAddProbe","link","onClick","onSubmit","onClose","plain","isInline","healthCheckProbeAdded","content","position","noHealthCheckProbe","icon","addHealthCheckProbe","renderProbe","errors","RequestTypeOptions","disabled","getRequestTypeForm","maxWidth","helpText","isDisabled","afterInput","renderPortField","placeholder","HTTPRequestTypeForm","initialNameValuePairs","nameValue","setNameValue","portFieldName","handleNameValuePairs","nameValuePairs","updatedNameValuePairs","valueFrom","fieldId","valueString","addString","readOnly","allowSorting","updateParentData","TCPRequestTypeForm","CommandRequestTypeForm","commands","addLabel","disableDeleteRow","isReadOnly","currentContainer","loadError","initialValues","setStatus","goBack","onReset","formikProps","isSubmitting","dirty","currentKey","setCurrentKey","healthCheckAdded","containersByKey","pageTitle","kindForCRDResource","isFormClean","healthURL","applicationHealth","Provider","component","target","inline","onChange","errorMessage","json","submitLabel","disableSubmit","resetLabel","hideSubmit"],"mappings":"gGAAA,42BA0BA,MAGaA,EAAqBC,GAChC,IAAMA,EAAS,mBAAoB,IAAIC,MAAM,WAalCC,EAAkBC,IAC7B,MAAMC,EANc,CAACD,IACrB,MAAMC,EAAa,IAAMD,EAAa,eACtC,OAAO,IAAQC,EAAY,QAIRC,CAAcF,GACjC,OAAO,IAASA,EAAYG,KAAKC,KAAOC,GAbrB,CAACR,IAEpB,MAAMS,EAAiBV,EAAkBC,GACzC,OAAO,IAAWS,EAAgB,aAAe,IAAWA,EAAgB,WAU5BC,CAAaF,IAAQJ,EAAWI,EAAIG,QAIzEC,EAAiCT,GACrCD,EAAeC,GAAaU,KAAK,EAAGF,KAAMG,IAAOH,KAAMI,MAC5D,MAAMC,EAAK,SAAcF,GACnBG,EAAK,SAAcF,GACzB,OAAKC,GAAOC,EAGPD,EAGAC,EAGE,WAAgBD,EAAIC,IAFjB,EAHD,EAHAH,EAAEI,cAAcH,KAYhBI,EAA2BhB,IACtC,MAAMI,EAAOK,EAA8BT,GAC3C,OAAO,IAAOI,IAMHa,EAAajB,IAAkC,IAAUD,EAAeC,KAE/E,OAAEkB,GAAW,IAAMC,QACnBC,EAAc,IAAI,IAAMC,4BAA4B,uBAAsBH,GAE1EI,EAAyD,EAC7DtB,cACAH,UACA0B,gBAEA,MAAMC,EAAoB,IAAMxB,EAAa,UACvCyB,EAAS,IAAMF,EAAW,CAAC,QAAS,IACpCG,EAAO,IAAM7B,EAAS,QACtB8B,EAAgD,mBAAhC,IAAM9B,EAAS,aAC/B+B,EAAQ,IAAMH,EAAQ,SACtBI,EAAU,IAAMJ,EAAQ,WACxBK,EAAwB,IAAM9B,EAAa,CAC/C,WACA,cACA,8CAEI,EAAE+B,GAAM,2BACd,OACE,uBAAKC,UAAU,OACb,uBAAKA,UAAU,4CACb,gBAAC,eAAY,CACXC,KAzEiD,iBA0EjDzB,KAAM,YAAsBR,EAAYkC,SAAS1B,KAAMe,EAAUlB,KACjE8B,UAAWnC,EAAYkC,SAASC,UAChCC,MAAOb,EAAUlB,IACjBgC,SAAUT,KAGd,wBAAMI,UAAU,2CACbN,GAAQC,GACP,gBAAC,eAAY,CACXM,KAnF+C,iBAoF/CzB,KAAMkB,EAAKlB,KACX2B,UAAWnC,EAAYkC,SAASC,UAChCC,MAAOV,EAAKlB,OAGfkB,IAASC,GAAiB,gCAAGD,EAAKlB,OACjCkB,GAAQ,wBAAMM,UAAU,cAAcD,EAAE,yBAE5C,wBAAMC,UAAU,6CACZR,GAAqBM,GACrB,gCACE,gBAAC,KAA6B,M,IACvBC,EAAE,8BAGXP,IAAsBM,IAA0BJ,GAAQ,gCAAGK,EAAE,2BAE7DP,IAAsBM,GAAyBJ,GAAQ,gCAAGK,EAAE,sBAC7DP,GAAqBI,GAAS,gCAAGA,GACjCJ,IAAsBI,GACrB,gCACE,gBAAC,KAA6B,M,IACvBG,EAAE,uDAIf,uBAAKC,UAAU,gCACZH,GAAW,gBAAC,YAAS,CAACS,UAAWT,KAChCA,GAAW,OAMRU,EAA0E,EACrFvC,cACAK,UAEA,MAAMmC,EAAwB,IAAMxC,EAAa,uCAC3C,EAAE+B,GAAM,2BACd,IAAKS,EACH,OAAO,KAET,MACMC,EAAc,eAAeD,KAAyBnC,GAAO,UAC7DqC,EAAc,eAAeF,KAAyBnC,GAAO,UAEnE,OACE,gBAAC,IAAO,CACNsC,cAAe,gCAAGZ,EAAE,mCACpBC,UAAU,qCACVY,SAAS,QACTC,YACE,2BACE,yBACGd,EACC,qGAGJ,2BACA,yBAAIA,EAAE,iDACN,gBAAC,IAAe,CAACe,MAlBJ,sBAmBb,2BACA,yBAAIf,EAAE,6CACN,gBAAC,IAAe,CAACe,MAAOL,IACxB,2BACA,yBAAIV,EAAE,+CACN,gBAAC,IAAe,CAACe,MAAOJ,IACxB,2BACA,yBACE,gBAAC,QAAK,CAACX,EAAGA,EAAGgB,GAAG,U,yDACwC,wCAAwB,I,YACpE,KAEZ,gBAAC,IAAY,CAACC,KAAM,IAAgBC,KAAMlB,EAAE,2BAKlD,gBAAC,IAAM,CAACC,UAAU,sBAAsBkB,KAAK,SAASC,QAAQ,QAC5D,gBAAC,IAAkB,CAACnB,UAAU,oBAC7BD,EAAE,mFAMEqB,EAA2D,EAAGC,IAAKrD,MAC9E,MAAM,EAAE+B,GAAM,2BAkBRuB,EAAkB,IAAMtD,EAAa,gCACrCwC,EAAwB,IAAMxC,EAAa,sCAC3CuD,EAAa,IAAMvD,EAAa,sBAChCwD,EAAgB,IAAQxD,EAAYG,KAAKC,KAAM,QAC/CqD,EAnBG,IAAYzD,EAAY0D,OAAOtD,KAAM,CAACuD,EAAKtD,KAChD,MAAMuD,EAAuB,IAC3BvD,EAAIwD,WACHC,GAAiC,kBAAnBA,EAAUZ,MAAiD,UAArBY,EAAUJ,QAEjEE,GACED,EAAII,KACFhC,EAAE,2DAA4D,CAC5D1B,IAAK,GAAGL,EAAYkC,SAAS1B,QAAQH,EAAIA,MACzC2D,QAASJ,EAAqBI,aAYxC,OACE,2BACE,uBAAKhC,UAAU,oBACX,IAAUyB,IACV,gBAAC,IAAe,CACdN,QAAS,IAAac,QACtBC,OAAQ,IAAMT,EAAc,CAACU,EAAOC,IAClC,gBAAC,WAAc,CAACC,IAAKD,GAAID,MAI/B,gBAAC,IAAc,CAAClB,KAAMlB,EAAE,gCACxB,uBAAKC,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,IAAe,CAACsC,SAAUtE,GACxBsD,GAAmB,0BAAKvB,EAAE,4BAC1BuB,GAAmB,0BAAKA,GACxBd,GAAyB,0BAAKT,EAAE,mCAChCS,GAAyB,0BAAKA,GAC/B,0BAAKT,EAAE,uBACP,0BAAKwB,GAA0B,IAEjC,gBAAChB,EAA2B,CAACvC,YAAaA,OAIhD,uBAAKgC,UAAU,mBACb,gBAAC,IAAc,CAACiB,KAAMlB,EAAE,iBACvB,IAAU/B,EAAY0D,OAAOtD,MAC5B,wBAAM4B,UAAU,cAAcD,EAAE,mBAEhC,uBAAKC,UAAU,OACb,uBAAKA,UAAU,6CACb,uBAAKA,UAAU,6BACb,uBAAKA,UAAU,8BAA8BD,EAAE,gBAC/C,uBAAKC,UAAU,8BAA8BD,EAAE,gBAC/C,uBAAKC,UAAU,+BAA+BD,EAAE,sBAChD,uBAAKC,UAAU,gCAAgCD,EAAE,yBAEnD,uBAAKC,UAAU,yBACZ,IAAMhC,EAAY0D,OAAOtD,KAAOmB,GAC/B,gBAACD,EAAkB,CACjB+C,IAAK9C,EAAUlB,IACfL,YAAaA,EACbH,QAAS2D,EAAcjC,EAAUlB,KACjCkB,UAAWA,WAYzBgD,EAAwD,EAAGlB,IAAKrD,MACpE,MAAMwE,EAAwB,IAAMxE,EAAa,eACjD,OACE,gBAAC,IAAmB,CAClByE,gBAAiBD,EACjBE,gBAAiB1E,EAAYkC,SAAS1B,KACtCmE,qBAAsB3E,EAAYkC,SAASC,aAIjDoC,EAAmBK,YAAc,qBAEjC,MAAMC,EAAQ,CACZ,aAAWC,QAAQ1B,GACnB,aAAW2B,WACX,aAAWC,QAAQT,IAERU,EAAsCC,GACjD,gBAAC,IAAW,iBAAKA,EAAK,CAAEjD,KAhR8B,cAgRDb,YAAaA,EAAayD,MAAOA,KAExFI,EAAwBL,YAAc,0BAEtC,MAAMO,EAAqB,CACzB,GACA,GACA,iCACA,iCACA,IAAMC,aAGFC,EAAmE,EAAGhC,SAExE,gCACE,gBAAC,IAAS,CAACrB,UAAWmD,EAAmB,IACvC,gBAAC,eAAY,CACXlD,KAjS8C,cAkS9CzB,KAAM6C,EAAInB,SAAS1B,KACnB2B,UAAWkB,EAAInB,SAASC,aAG5B,gBAAC,IAAS,CACRH,UAAW,EAAWmD,EAAmB,GAAI,iBAC7CG,SAAS,aAET,gBAAC,eAAY,CAACrD,KAAK,YAAYzB,KAAM6C,EAAInB,SAASC,aAEpD,gBAAC,IAAS,CAACH,UAAWmD,EAAmB,IACvC,gBAAC,IAAS,CAAClD,KA7SqC,cA6SRsD,OAAQlC,EAAInB,SAASqD,UAE/D,gBAAC,IAAS,CAACvD,UAAWmD,EAAmB,IACvC,gBAAC,YAAS,CAAC7C,UAAWe,EAAInB,SAASsD,qBAErC,gBAAC,IAAS,CAACxD,UAAWmD,EAAmB,IACvC,gBAAC,IAAa,CAACM,QAASrE,EAAaa,KAnTW,cAmTkBqC,SAAUjB,MAMvEqC,EAA+BR,IAC1C,MAAM,EAAEnD,GAAM,2BACR4D,EAA0B,IACvB,CACL,CACEvD,MAAOL,EAAE,eACT6D,UAAW,gBACXC,WAAY,CAAC,KACbX,MAAO,CAAElD,UAAWmD,EAAmB,KAEzC,CACE/C,MAAOL,EAAE,oBACT6D,UAAW,qBACXC,WAAY,CAAC,KACbX,MAAO,CAAElD,UAAWmD,EAAmB,IACvCW,GAAI,aAEN,CACE1D,MAAOL,EAAE,iBACT6D,UAAW,kBACXC,WAAY,CAAC,KACbX,MAAO,CAAElD,UAAWmD,EAAmB,KAEzC,CACE/C,MAAOL,EAAE,kBACT6D,UAAW,6BACXC,WAAY,CAAC,KACbX,MAAO,CAAElD,UAAWmD,EAAmB,KAEzC,CACE/C,MAAO,GACP8C,MAAO,CAAElD,UAAWmD,EAAmB,MAM7C,OAFAQ,EAAwBf,YAAc,0BAGpC,gBAAC,IAAK,iBACAM,EAAK,cACGnD,EAAE,uBACdgE,OAAQJ,EACRK,IAAKX,EACLY,YAAU,MAKhBP,EAAiBd,YAAc,mBAExB,MAAMsB,EAAcC,GAAUA,EAAMzC,OAAO0C,MAErCC,GAAsDnB,IACjE,MAAM,EAAEnD,GAAM,2BACd,OACE,gBAAC,IAAQ,iBACHmD,EAAK,CACT9C,MAAOL,EAAE,uBACTE,KAnXkD,cAoXlDqE,cAAeZ,EACfa,WAAW,MAKjBF,GAAiBzB,YAAc,wB,kCCpZ/B,yE,kCCAA,4iC,kCCAA,IAAY4B,EAGAC,EAGAC,EAOAC,EAMAC,EAIAC,EAOAC,EAOAC,EASAC,EA9CZ,63BAAYR,GACV,+CADF,CAAYA,MAAc,KAG1B,SAAYC,GACV,0CADF,CAAYA,MAAmB,KAG/B,SAAYC,GACV,gDACA,yBACA,qCACA,8CACA,wCALF,CAAYA,MAAoB,KAOhC,SAAYC,GACV,mBACA,wBACA,wBACA,4BAJF,CAAYA,MAAa,KAMzB,SAAYC,GACV,mDACA,sCAFF,CAAYA,MAAe,KAI3B,SAAYC,GACV,iCACA,uCACA,+BACA,yCAJF,CAAYA,MAAmB,KAO/B,SAAYC,GACV,YACA,gBACA,oBACA,oBAJF,CAAYA,MAAoB,KAOhC,SAAYC,GACV,4BACA,kCACA,wBACA,kBACA,YACA,4CANF,CAAYA,MAAW,KASvB,SAAYC,GACV,YACA,iBAFF,CAAYA,MAAkB,KAM3BA,EAAmBC,IACnBD,EAAmBE,MAFf,MAKMC,EAAsB,QACtBC,EAAsB,QACtBC,EAAwC,QACxCC,EAA2B,WAC3BC,EAAiC,wCAEjCC,EAAuB,IACvBC,EAA8B,IAG9BC,EAAkB,GAGlBC,EAA0B,sCAC1BC,EAAyB,2BAEzBC,EAAqB,sBACrBC,EAAiC,YACjCC,EAAuB,SAEpC,IAAYC,GAAZ,SAAYA,GACV,sCACA,kDACA,kCACA,4CAJF,CAAYA,MAAoB,KAOzB,MAAMC,EAAyB,yBACzBC,EACX,2CACWC,EACX,4C,kCCvFF,yS,kCCAA,wVAIYC,EAJZ,oCAIA,SAAYA,GACV,2CACA,2CACA,sCACA,wBACA,4CACA,0CACA,oCACA,0DACA,gDACA,gDACA,8CAXF,CAAYA,MAAsB,KAc3B,MAAMC,EAAqBC,I,MAChC,MAAMzE,EAAa,IAAMyE,EAAa,CAAC,SAAU,cAAe,IAChE,GAA0B,IAAtBzE,EAAW0E,OAAc,OAAO,KAEpC,MAAMC,EAAmB3E,EAAW4E,KAAMC,GAAiB,cAAXA,EAAExF,MAC5CyF,EAAqB9E,EAAW4E,KAAMC,GAAmB,cAAbA,EAAEE,QAEpD,GACE,CACER,EAAuBS,mBACvBT,EAAuBU,sBACvBC,SAAyB,QAAhB,EAAAT,EAAYnI,YAAI,eAAEuD,UAC5BiF,EAED,OAAO,IAAeK,WAGxB,IAAKR,IAAqBA,EAAiB9E,OACzC,OAAO,KAGT,MAAMA,EACwB,SAA5B8E,EAAiB9E,OACb,IAAeuF,UACa,UAA5BT,EAAiB9E,OACjB,IAAewF,OACf,IAAeC,QAErB,GAAIX,EAAiBI,QAAUJ,EAAiBI,SAAWlF,EACzD,OAAQ8E,EAAiBI,QACvB,KAAKR,EAAuBU,qBAC5B,KAAKV,EAAuBgB,iBAC5B,KAAKhB,EAAuBiB,UAC5B,KAAKjB,EAAuBS,mBAC1B,OAAO,IAAeQ,UACxB,KAAKjB,EAAuBkB,oBAC5B,KAAKlB,EAAuBmB,gBAC1B,OAAO,IAAeL,OACxB,KAAKd,EAAuBoB,2BAC5B,KAAKpB,EAAuBqB,sBAC5B,KAAKrB,EAAuBsB,sBAC5B,KAAKtB,EAAuBuB,mBAC1B,OAAO,IAAeC,QACxB,KAAKxB,EAAuByB,qBAC1B,OAAO,IAAeC,QACxB,QACE,OAAOpG,EAGb,OAAOA,GAKIqG,EAA0BzB,IACrC,MAAM5E,EAAS2E,EAAkBC,GACjC,IAAK5E,EAAQ,MAAO,IACpB,OAAQA,GACN,KAAK,IAAe2F,UAClB,OAAO,IAAQtH,EAAE,8BACnB,KAAK,IAAemH,OAClB,OAAO,IAAQnH,EAAE,2BACnB,KAAK,IAAekH,UAClB,OAAO,IAAQlH,EAAE,8BACnB,KAAK,IAAe6H,QAClB,OAAO,IAAQ7H,EAAE,4BACnB,KAAK,IAAeoH,QAClB,OAAO,IAAQpH,EAAE,4BACnB,KAAK,IAAe+H,QAClB,OAAO,IAAQ/H,EAAE,4BACnB,KAAK,IAAeiH,WAClB,OAAO,IAAQjH,EAAE,+BACnB,QACE,OAAO2B,IAIAsG,EAAyBC,GAC/BA,EAASC,WACP7B,EAAkB4B,EAASC,YADF,IAAeC,MAIpCC,EAA8BH,GACpCA,EAASC,WACPH,EAAuBE,EAASC,YADP,IAIrBG,EAAiC/B,GAC7ByB,EAAuBzB,IACrB,IAENgC,EAA4BhC,GACxBD,EAAkBC,IAChB,IAAe6B,MAGrBI,EAAuB,CAACC,EAASP,K,MAC5C,IAAKO,IAAYA,EAAQC,WAAaD,EAAQC,SAASlC,OACrD,OAAO,EAET,MAAM7E,EAASsG,EAAsBC,GACrC,OAAuB,QAAhB,EAAAO,EAAQC,gBAAQ,eAAE1B,SAASrF,MAAY,IAAW8G,EAAQE,IAAKhH,IAG3DiH,EAA0B,CAACC,EAAQX,K,MAC9C,IAAKW,IAAWA,EAAOH,WAAaG,EAAOH,SAASlC,OAClD,OAAO,EAGT,MAAM7E,EAAS4G,EAAyBL,GACxC,OAAsB,QAAf,EAAAW,EAAOH,gBAAQ,eAAE1B,SAASrF,MAAY,IAAWkH,EAAOF,IAAKhH,IAezDmH,EAAwBC,GACpBzC,EAAkByC,IAChB,IAAeX,MAGrBY,EAA6BD,GACzBf,EAAuBe,IACrB,K,kCCtJnB,6CAgBA,MAAME,EAAiC,CACrCC,QAAS,OACTC,KAAM,EACNC,cAAe,SACfC,OAAQ,qCA2BK,IAxBiC,EAC9ChJ,QACAiJ,WACAC,YACAC,WACAC,aACAC,cACAC,WACAC,WAEA,uBACE3J,UAAW,IAAG,eAAgB,CAC5B,mBAAoBsJ,EACpB,iCAAkCG,IAEpCE,MAAK,+BAAQH,EAAaR,EAAY,IAASW,GAAS,IAAG,YAChDD,GAEVtJ,GAAS,sBAAIJ,UAAU,6BAA6BI,GACpDiJ,GAAY,gBAAC,IAAc,KAAEA,GAC7BE,I,kCCzCL,IAAYK,EAAZ,2CAAYA,GACV,YACA,sBAFF,CAAYA,MAAY,M,kCCDxB,8kBASA,MAAMC,EAAgB,oEAChBC,EAAY,SAGLC,EAAc,8JAgBdC,EAA8B,WAAaC,MAAM,CAC5DzL,KAAM,WAEH0L,QArBoB,kCAuBnB,yHAEDC,SAAS,cAGDC,EAAkC,WAAaH,MAAM,CAChEI,YAAa,WACb7L,KAAM,WAEH8L,IAAI,GAAI,wCACRC,KAAK,cAAe,CACnBC,GAAI,IACJC,KAAM,WAAaN,SAAS,gBAIrBO,EAA8B3K,GACzC,WAAakK,MAAM,CACjBU,SAAU,WAEPC,UAAWC,GAAQ,IAAQA,QAAMC,EAAYD,GAC7CE,KAAK,YAAUhL,EAAE,6CACjBiL,IAAI,EAAGjL,EAAE,4DACTuK,IACCW,OAAOC,iBACPnL,EAAE,0EAA2E,CAC3EoL,eAAgBF,OAAOC,oBAG1BH,KAAK,CACJvM,KAAM,UACNuM,KAAOjK,QAAoBgK,IAAVhK,EACjBkB,QAASjC,EAAE,8CAINqL,EAA4B,WAEtCC,MAAM,CAAC,IAAUC,UAAW,IAAUC,WAAY,IAAUC,iBAC5DrB,WAEUsB,EAA8B1L,GACzC,WAAawK,KAAK,YAAa,CAC7BC,GAAI,IAAUgB,eACdf,KAAM,WAAaR,MAAM,CACvByB,QAAS,SAAW,CAClBC,QAAS,WAENf,UAAWC,GAAQ,IAAQA,QAAMC,EAAYD,GAC7CE,KAAK,YAAUhL,EAAE,6CACjBiL,IAAI,EAAGjL,EAAE,4DACTuK,IACCW,OAAOC,iBACPnL,EAAE,0EAA2E,CAC3EoL,eAAgBF,OAAOC,oBAG7BU,QAAS,WAENhB,UAAWC,GAAQ,IAAQA,QAAMC,EAAYD,GAC7CE,KAAK,YAAUhL,EAAE,6CACjBiL,IAAI,EAAGjL,EAAE,4DACTuK,IACCW,OAAOC,iBACPnL,EAAE,0EAA2E,CAC3EoL,eAAgBF,OAAOC,oBAG1BH,KAAK,CACJ,KAAKc,GACH,MAAM,QAAEF,GAAYG,KAAKC,OACzB,OAAOF,GAAQA,GAASF,GAE1B3J,QAASjC,EAAE,oEAEfiM,kBAAmB,WAEhBpB,UAAWC,GAAQ,IAAQA,QAAMC,EAAYD,GAC7CE,KAAK,YAAUhL,EAAE,uDACjBiL,IAAI,EAAGjL,EAAE,sEACTuK,IACCW,OAAOC,iBACPnL,EAAE,oFAAqF,CACrFoL,eAAgBF,OAAOC,oBAG7Be,iBAAkB,WAEfrB,UAAWC,GAAQ,IAAQA,QAAMC,EAAYD,GAC7CE,KAAK,YAAUhL,EAAE,sDACjBiL,IAAI,EAAGjL,EAAE,qEACTuK,IACCW,OAAOC,iBACPnL,EAAE,mFAAoF,CACpFoL,eAAgBF,OAAOC,oBAG7BgB,uBAAwB,WAErBtB,UAAWC,GAAQ,IAAQA,QAAMC,EAAYD,GAC7CG,IAAI,EAAGjL,EAAE,kEACTuK,IAAI,IAAKvK,EAAE,kEACdoM,UAAW,WAAalC,MAAM,CAC5BmC,gBAAiB,WAEdxB,UAAWC,GAAQ,IAAQA,QAAMC,EAAYD,GAC7CE,KAAK,CACJ,KAAKqB,GACH,GAAIA,EAAiB,CACnB,MAAM,oBAAEC,GAAwBP,KAAKC,OAC/BjL,EAjIH,EAACA,EAAewL,KACnC,OAAQA,GACN,IAAK,IACH,OAAe,GAARxL,EAET,IAAK,IACH,OAAe,KAARA,EAET,QACE,OAAOA,IAwHmByL,CAAaH,EAAiBC,GAC5C,OAAOvL,GAAS,GAAKA,GAAS,KAEhC,OAAO,GAETkB,QAASjC,EAAE,gEAInByM,cAAe,UAAYC,GACzB,WAEG7B,UAAU,KACVV,QAAQL,EAAe,CACtB7H,QAASjC,EACP,4IAEF2M,oBAAoB,IAErB3B,KACC,2BACAhL,EAAE,oFACF,SAAU4M,GACR,OAAOA,EAAW7O,MAAM,KAAKyI,QAAU,UAOxCqG,EAAyB7M,GACpC,WAAakK,MAAM,CACjB4C,OAAQ,YACRC,IAAK,WAAavC,KAAK,SAAU,CAC/BC,IAAI,EACJC,KAAM,SAAW,CACfsC,YAAa,WAAa5C,SAASpK,EAAE,qDAGzCiN,SAAU,WAEP9C,QAAQL,EAAe,CACtB7H,QAASjC,EACP,yIAEF2M,oBAAoB,IAErBpC,IAAI,IAAKvK,EAAE,qDACdkN,KAAM,WAAa/C,QAAQJ,EAAW,CACpC9H,QAASjC,EAAE,sCACX2M,oBAAoB,IAEtBQ,kBAAmB,WAEhBC,UAAUpN,EAAE,wCACZqN,QAAQrN,EAAE,wCACViL,IAAI,EAAGjL,EAAE,iDACTuK,IAAI,MAAOvK,EAAE,mDAGPsN,EAA0BtN,GACrC,WAAakK,MAAM,CACjBqD,IAAK,WAAarD,MAAM,CACtBsD,QAAS,WAEN3C,UAAW2C,GAAa,IAAQA,QAAWzC,EAAYyC,GACvDvC,IAAI,EAAGjL,EAAE,2DACTgL,KAAK,CACJ,KAAKwC,GACH,MAAM,YAAEC,EAAW,MAAE3B,EAAK,UAAE4B,GAAc3B,KAAKC,OAC/C,YAAcjB,IAAVe,GAEA,aAAmB,GAAG0B,IAAUC,MAChC,aAAmB,GAAG3B,IAAQ4B,MAKpCzL,QAASjC,EAAE,iEAEfyN,YAAa,SAAWzN,EAAE,iDAAiD2N,SAC3ED,UAAW,SAAW1N,EAAE,iDAAiD2N,SACzE7B,MAAO,WAEJjB,UAAWiB,GAAW,IAAQA,QAASf,EAAYe,GACnDb,IAAI,EAAGjL,EAAE,yDACTgL,KAAK,CACJ,KAAKc,GACH,MAAM,QAAE0B,EAAO,YAAEC,EAAW,UAAEC,GAAc3B,KAAKC,OACjD,YAAcjB,IAAVe,GAEA,aAAmB,GAAGA,IAAQ4B,MAC9B,aAAmB,GAAGF,IAAUC,MAKtCxL,QAASjC,EAAE,sEAGjB4N,OAAQ,WAAa1D,MAAM,CACzBsD,QAAS,WAEN3C,UAAW2C,GAAa,IAAQA,QAAWzC,EAAYyC,GACvDvC,IAAI,EAAGjL,EAAE,2DACTgL,KAAK,CACJ,KAAKwC,GACH,MAAM,YAAEC,EAAW,MAAE3B,EAAK,UAAE4B,GAAc3B,KAAKC,OAC/C,YAAcjB,IAAVe,GAEA,aAAmB,GAAG0B,IAAUC,MAChC,aAAmB,GAAG3B,IAAQ4B,MAKpCzL,QAASjC,EAAE,oEAEfyN,YAAa,SAAWzN,EAAE,sCAC1B8L,MAAO,WAEJjB,UAAWiB,GAAW,IAAQA,QAASf,EAAYe,GACnDb,IAAI,EAAGjL,EAAE,yDACTgL,KAAK,CACJ,KAAKc,GACH,MAAM,QAAE0B,EAAO,YAAEC,EAAW,UAAEC,GAAc3B,KAAKC,OACjD,YAAcjB,IAAVe,GAEA,aAAmB,GAAG0B,IAAUC,MAChC,aAAmB,GAAG3B,IAAQ4B,MAKpCzL,QAASjC,EAAE,uEAEf0N,UAAW,SAAW1N,EAAE,0CAIjB6N,EAAyB7N,GACpC,WAAawK,KAAK,QAAS,CACzBC,GAAKrG,GAA6B,WAAnBA,EAAM0J,SACrBpD,KAAM,WAAaR,MAAM,CACvBxB,SAAU,WAAa0B,SAASpK,EAAE,wBAClC1B,IAAK,WAAa8L,SAASpK,EAAE,4BAItB+N,EAAuB/N,GAClC,WAAakK,MAAM,CACjB8D,IAAK,WAEFzD,IAAI,IAAMvK,EAAE,qEACZmK,QAAQH,EAAahK,EAAE,gCACvBoK,SAASpK,EAAE,wBACdmB,KAAM,WAAaqJ,KAAK,cAAe,CACrCC,IAAI,EACJC,KAAM,WAEHN,SAASpK,EAAE,6EAEhBiO,YAAa,cAGJC,EAA0BlO,GACrC,WAAawK,KAAK,QAAS,CACzBC,GAAKrG,GAA6B,WAAnBA,EAAM0J,SACrBpD,KAAM,WAAaR,MAAM,CACvBiE,cAAe,WAEZnD,KAAK,YAAUhL,EAAE,oDACpBoO,eAAgB,WAAahE,SAASpK,EAAE,4BAIjCqO,EAA2BrO,GACtC,WAAawK,KAAK,QAAS,CACzBC,GAAKrG,GAA6B,YAAnBA,EAAM0J,SACrBpD,KAAM,WAAaR,MAAM,CACvBoE,YAAa,WAAalE,SAASpK,EAAE,wBACrCuO,eAAgB,WAEbtD,IAAI,EAAGjL,EAAE,wBACToK,SAASpK,EAAE,wBACdwO,gBAAiB,YAAclD,MAAM,EAAC,IACtCmD,0BAA2B,WAAarE,SAASpK,EAAE,4BAI5C0O,EAAwB,WAAaxE,MAAM,CACtD4D,SAAU,aAMCa,EAAuB3O,GAClC,WAAakK,MAAM,CACjBzL,KAAM,WAAa2L,SAASpK,EAAE,wBAC9BH,MAAO,WAAauK,SAASpK,EAAE,wBAC/B1B,IAAK,WACLqD,OAAQ,WAAayI,SAASpK,EAAE,0BAGvB4O,EAA6C,WAEvDpE,KAAK,CAAC,UAAW,eAAgB,QAAS,CACzCC,GAAI,CAACoE,EAAmBC,EAAaC,KAClCF,GAAqBC,IAAgB,IAAaE,YACnDD,IAAiB,IAAaE,IAChCvE,KAAM,WAAaR,MAAM,CACvBgF,iBAAkB,WAAa9E,gB,kCCrWrC,srBAGA,MAAM+E,EAAQ,wBAAiBpO,MAElBqO,EAAyB,CACpCC,SAAU,aACVC,WAAY,KACZC,MAAO,WAEPC,SAAU,4BAEVC,eAAgB,6BAChBC,OAAQ,YACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,WACN6D,GAAI,WACJ8L,YAAa,YACbC,KAAK,EACLX,SAGWY,EAAgC,CAC3CV,SAAU,aACVC,WAAY,UACZC,MAAO,WAEPC,SAAU,4BAEVC,eAAgB,6BAChBC,OAAQ,YACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,WACN6D,GAAI,WACJ8L,YAAa,YACbC,KAAK,EACLX,SAGWa,EAA4B,CACvCX,SAAU,aACVC,WAAY,KACZC,MAAO,cAEPC,SAAU,+BAEVC,eAAgB,gCAChBC,OAAQ,eACRC,KAAM,MACNC,YAAY,EACZ1P,KAAM,cACN6D,GAAI,cACJ8L,YAAa,eACbC,KAAK,EACLX,SAGWc,EAAmC,CAC9CZ,SAAU,aACVC,WAAY,UACZC,MAAO,cAEPC,SAAU,+BAEVC,eAAgB,gCAChBC,OAAQ,eACRC,KAAM,MACNC,YAAY,EACZ1P,KAAM,cACN6D,GAAI,cACJ8L,YAAa,eACbC,KAAK,EACLX,SAGWe,EAAqB,CAChCb,SAAU,aACVC,WAAY,KACZC,MAAO,OAEPC,SAAU,wBAEVC,eAAgB,yBAChBC,OAAQ,QACRC,KAAM,IACNC,YAAY,EACZ1P,KAAM,OACN6D,GAAI,OACJ8L,YAAa,QACbC,KAAK,EACLX,SAGWgB,EAA4B,CACvCd,SAAU,aACVC,WAAY,UACZC,MAAO,OAEPC,SAAU,wBAEVC,eAAgB,yBAChBC,OAAQ,QACRC,KAAM,IACNC,YAAY,EACZ1P,KAAM,OACN6D,GAAI,OACJ8L,YAAa,QACbC,KAAK,EACLX,SAGWiB,EAAwB,CACnCf,SAAU,aACVC,WAAY,KACZC,MAAO,UAEPC,SAAU,2BAEVC,eAAgB,4BAChBC,OAAQ,WACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,UACN6D,GAAI,UACJ8L,YAAa,WACbC,KAAK,EACLX,SAGWkB,EAA+B,CAC1ChB,SAAU,aACVC,WAAY,UACZC,MAAO,UAEPC,SAAU,2BAEVC,eAAgB,4BAChBC,OAAQ,WACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,UACN6D,GAAI,UACJ8L,YAAa,WACbC,KAAK,EACLX,SAGWmB,EAAiC,CAC5CjB,SAAU,aACVC,WAAY,UACZC,MAAO,YAEPC,SAAU,6BAEVC,eAAgB,8BAChBC,OAAQ,aACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,YACN6D,GAAI,YACJ8L,YAAa,aACbC,KAAK,EACLX,SAGWoB,EAAiC,CAC5ClB,SAAU,aACVC,WAAY,WACZC,MAAO,mBAEPC,SAAU,oCAEVC,eAAgB,qCAChBC,OAAQ,oBACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,mBACN6D,GAAI,mBACJ8L,YAAa,oBACbC,KAAK,EACLX,SAGWqB,EAA4B,CACvCnB,SAAU,aACVC,WAAY,UACZC,MAAO,cAEPC,SAAU,+BAEVC,eAAgB,gCAChBC,OAAQ,eACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,cACN6D,GAAI,cACJ8L,YAAa,eACbC,KAAK,EACLX,SAGWsB,EAA0B,CACrCpB,SAAU,aACVC,WAAY,WACZC,MAAO,YAEPC,SAAU,6BAEVC,eAAgB,8BAChBC,OAAQ,aACRC,KAAM,IACNC,YAAY,EACZ1P,KAAM,YACN6D,GAAI,YACJ8L,YAAa,aACbC,KAAK,EACLX,SAGWuB,EAA+B,CAC1CrB,SAAU,sBACVC,WAAY,UACZC,MAAO,iBAEPC,SAAU,kCAEVC,eAAgB,mCAChBC,OAAQ,kBACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,iBACN6D,GAAI,iBACJ8L,YAAa,kBACbC,KAAK,EACLX,SAGWwB,EAAsC,CACjDtB,SAAU,sBACVC,WAAY,UACZC,MAAO,wBAEPC,SAAU,yCAEVC,eAAgB,0CAChBC,OAAQ,yBACRC,KAAM,MACNC,YAAY,EACZ1P,KAAM,wBACN6D,GAAI,wBACJ8L,YAAa,yBACbC,KAAK,EACLX,SAGWyB,EAAgC,CAC3CvB,SAAU,sBACVC,WAAY,UACZC,MAAO,kBAEPC,SAAU,mCAEVC,eAAgB,oCAChBC,OAAQ,mBACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,kBACN6D,GAAI,kBACJ8L,YAAa,mBACbC,KAAK,EACLX,SAGW0B,EAA8B,CACzCxB,SAAU,sBACVC,WAAY,UACZC,MAAO,gBAEPC,SAAU,iCAEVC,eAAgB,kCAChBC,OAAQ,iBACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,gBACN6D,GAAI,gBACJ8L,YAAa,iBACbC,KAAK,EACLX,SAGW2B,EAA2B,CACtCzB,SAAU,6BACVC,WAAY,WACZC,MAAO,aAEPC,SAAU,8BAEVC,eAAgB,gCAChBC,OAAQ,eACRC,KAAM,IACNC,YAAY,EACZ1P,KAAM,aACN6D,GAAI,aACJ8L,YAAa,eACbC,KAAK,EACLX,SAGW4B,EAA6B,CACxC1B,SAAU,sBACVC,WAAY,WACZC,MAAO,eAEPC,SAAU,gCAEVC,eAAgB,iCAChBC,OAAQ,gBACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,eACN6D,GAAI,eACJ8L,YAAa,gBACbC,KAAK,GAGMkB,EAA0B,CACrC3B,SAAU,sBACVC,WAAY,WACZC,MAAO,YAEPC,SAAU,6BAEVC,eAAgB,8BAChBC,OAAQ,aACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,YACN6D,GAAI,YACJ8L,YAAa,aACbC,KAAK,GAGMmB,EAA6B,CACxC5B,SAAU,sBACVC,WAAY,WACZC,MAAO,eAEPC,SAAU,gCAEVC,eAAgB,iCAChBC,OAAQ,gBACRC,KAAM,KACNC,YAAY,EACZ1P,KAAM,eACN6D,GAAI,eACJ8L,YAAa,gBACbC,KAAK,I,kCCvWP,slCA6EO,MAOMhO,EACSoP,GAClBA,EAAKC,WACLD,EAAKC,UAAUC,QACfF,EAAKC,UAAUC,OAAO5K,OAAS,KAC7B0K,EAAKC,UAAUC,OAAO,GAAGzR,KALlBmC,EAMaoP,GAAgCA,EAAKG,UAAYH,EAAKG,SAAS7K,OAAS,EAGlG,IAAY8K,GAAZ,SAAYA,GACV,oBACA,kBACA,wBACA,wBACA,YALF,CAAYA,MAAY,KAQjB,MAAMC,EAAmB,CAC9B,CAACD,EAAalK,SAAU,IAAQpH,EAAE,4BAClC,CAACsR,EAAanK,QAAS,IAAQnH,EAAE,2BACjC,CAACsR,EAAapK,WAAY,IAAQlH,EAAE,8BACpC,CAACsR,EAAahK,WAAY,IAAQtH,EAAE,8BACpC,CAACsR,EAAalJ,OAAQ,IAAQpI,EAAE,2BAGlC,IAAYwR,GAAZ,SAAYA,GACV,YACA,4BACA,gBACA,oBACA,oBACA,0BANF,CAAYA,MAA4B,KAUrCA,EAA6BtM,IAC7BsM,EAA6BC,YAC7BD,EAA6BrM,MAC7BqM,EAA6BE,QAC7BF,EAA6BG,QAC7BH,EAA6BI,WANzB,MAeMC,EAA0B,CACrC3J,EACA3B,EACAuL,EACAC,GAAiB,MAEFA,EAAiB7J,EAAS9J,KAAK4T,QAAU9J,EAAS9J,KAAK6T,QAAU,IAEnEC,IAAKhB,I,MAChB,IAAK3K,EAAY5E,OACf,OAAOuP,EAET,IAAKY,GAAgC,IAApBA,EAAStL,OACxB,OAAID,EAAYnI,KAAKuD,SAAW,IAAuBoF,qBAC9C,IAAQmK,EAAM,CAAEvP,OAAQ,CAAEkF,OAAQ,IAAeS,aAEtDf,EAAYnI,KAAKuD,SAAW,IAAuBiG,mBAC9C,IAAQsJ,EAAM,CAAEvP,OAAQ,CAAEkF,OAAQ,IAAesL,QAEnD,IAAQjB,EAAM,CAAEvP,OAAQ,CAAEkF,OAAQ,IAAeM,UAG1D,MAAM4B,EAAU,IACd+I,EACCM,GAAOA,EAAGjS,SAASqD,OAAO,IAAoB6O,gBAAkBnB,EAAKzS,MAElE6T,EAA4BvJ,aAAO,EAAPA,EAASpH,OAErC4Q,EAAQ,IAAQrB,EAAM,CAC1BvP,QAA2B,QAAnB,EAAA4E,aAAW,EAAXA,EAAa5E,cAAM,eAAEmQ,UACzB,IAAM,IAAOvL,EAAY5E,OAAOmQ,SAAU,CAAEU,iBAAkBtB,EAAKzS,OAAS,UAC5E6T,IAGN,GAAIC,EAAM5Q,QAAU4Q,EAAM5Q,OAAO8Q,gBAAkBF,EAAM5Q,OAAO+Q,UAAW,CACzE,MAAMC,EACJ,IAAIC,KAAKL,EAAM5Q,OAAO8Q,gBAAgBI,UACtC,IAAID,KAAKL,EAAM5Q,OAAO+Q,WAAWG,UACnCN,EAAM5Q,OAAOmR,SAAW,YAAyBH,GAUnD,OAPKJ,EAAM5Q,OAEA4Q,EAAM5Q,QAAU4Q,EAAM5Q,OAAOG,WACtCyQ,EAAM5Q,OAAOkF,OAAS,YAAkB0L,IAAU,IAAe1K,QACxD0K,EAAM5Q,SAAW4Q,EAAM5Q,OAAOkF,SACvC0L,EAAM5Q,OAAOkF,OAAS,IAAegB,SAJrC0K,EAAM5Q,OAAS,CAAEkF,OAAQ,IAAegB,SAMnC0K,IAIEQ,EAAmB,CAC9B7K,EACA3B,EAA+B,CAC7B+I,WAAY,GACZnP,SAAU,GACVD,KAAM,cACN9B,KAAM,IAER0T,K,MAGA,MAAMkB,EAAM,GACZ,KAAkB,QAAb,EAAA9K,EAAS9J,YAAI,eAAE6T,QAAS,IAAU/J,EAAS9J,KAAK6T,OACnD,OAAOe,EAET,MAAMC,EAAWpB,EAAwB3J,EAAU3B,EAAauL,GAoEhE,OAjEAmB,EAASC,QAAShC,IACXpP,EAA6BoP,IAAUpP,EAAiCoP,KACxD,IAAf8B,EAAIxM,QACNwM,EAAIhR,KAAK,IAEXgR,EAAI,GAAGhR,KAAKkP,MAKhB+B,EAASC,QAAShC,I,MAChB,IAAKpP,EAAiCoP,IAASpP,EAA6BoP,GAAO,CACjF,IAAIiC,EAAOH,EAAIxM,OAAS,EACxB,IAAK,IAAInE,EAAI,EAAGA,EAAI2Q,EAAIxM,OAAQnE,IAC9B,IAAK,MAAMrC,KAAKgT,EAAI3Q,IAEP,QAAT,EAAArC,EAAEoT,eAAO,eAAE3U,QAASyS,EAAKC,UAAUC,OAAO,GAAGzR,KAAK,IAClDK,EAAEvB,OAASyS,EAAKC,UAAUC,OAAO,GAAGzR,KAAK,KAEzCwT,EAAO9Q,GAIb,MAAMgR,EAAaL,EAAIG,EAAO,GAAKH,EAAIG,EAAO,GAAK,KAEjDE,GACAA,EAAW,IACXA,EAAW,GAAGlC,WACdkC,EAAW,GAAGlC,UAAUC,QACxBiC,EAAW,GAAGlC,UAAUC,OAAO,IAC/BiC,EAAW,GAAGlC,UAAUC,OAAO,GAAGzR,MAClC0T,EAAW,GAAGlC,UAAUC,OAAO,GAAGzR,KAAK,IACvC0T,EAAW,GAAGlC,UAAUC,OAAO,GAAGzR,KAAK,KAAOuR,EAAKC,UAAUC,OAAO,GAAGzR,KAAK,GAE5E0T,EAAWrR,KAAKkP,GAEhB8B,EAAIM,OAAOH,EAAO,EAAG,EAAG,CAACjC,OAM/B+B,EAASC,QAAShC,I,MAChB,GAAIpP,EAAiCoP,GAAO,CAC1C,IAAIiC,EAAOH,EAAIxM,OAAS,EACxB,IAAK,IAAInE,EAAI,EAAGA,EAAI2Q,EAAIxM,OAAQnE,IAC9B,IAAK,MAAMrC,KAAKgT,EAAI3Q,IACL,QAAT,EAAArC,EAAEoT,eAAO,eAAE3U,QAASyS,EAAKG,SAAS,IAAMrR,EAAEvB,OAASyS,EAAKG,SAAS,KACnE8B,EAAO9Q,GAIb,MAAMgR,EAAaL,EAAIG,EAAO,GAAKH,EAAIG,EAAO,GAAK,KAEjDE,GACAA,EAAW,GAAGhC,UACdgC,EAAW,GAAGhC,SAAS,IACvBgC,EAAW,GAAGhC,SAAS,KAAOH,EAAKG,SAAS,GAE5CgC,EAAWrR,KAAKkP,GAEhB8B,EAAIM,OAAOH,EAAO,EAAG,EAAG,CAACjC,OAIxB8B,GAGIO,EAA4B,CACvCrL,EACA3B,EACAuL,IACGD,EAAwB3J,EAAU3B,EAAauL,GAAU,GAEjD0B,EAA8BC,IACzC,IAAKA,EACH,OAAO,IAET,MAAM,MAAEC,EAAK,UAAEC,GAAcF,EAC7B,OAAIC,EAAME,UAAY,IAAUD,GACvB,IAELD,EAAME,QACD,IAELF,EAAMG,WACD,IAEF,KAWIC,EACXC,IAEA,IAAKA,GAAwC,IAAxBA,EAAavN,OAEhC,MAAO,CAAEwN,kBAAmB,KAAMrS,OAAQ,IAAesS,oBAG3D,MAAMD,EAAoB,YAAaD,EAAc,qBAErD,IAAKC,EAEH,MAAO,CAAEA,kBAAmB,KAAMrS,OAAQ,IAAesS,oBAG3D,IAAItS,EAAiB,YAAyBqS,GAK9C,MAJe,MAAXrS,IACFA,EAAS,IAAekG,SAGnB,CACLmM,oBACArS,WAISuS,EAAwBC,GAEjCA,GACAA,EAAejC,IAAKkC,IAAU,CAC5B3V,KAAM2V,EAAM3V,KACZsC,MAAOqT,EAAMC,WAKNC,EACXC,GAGEA,GACAA,EAAmBrC,IAAKsC,GAAe,OAAD,QACpC/V,KAAM+V,EAAU/V,MACb+V,EAAUC,OAKNC,EAAoB,CAAChC,EAAmBiC,EAAkBC,KACrE,MAAMC,EAAQ,IAAIjC,KAAKF,GAAWG,UAE5BiC,IADMH,EAAU,IAAI/B,KAAK+B,GAAS9B,WAAY,IAAID,MAAOC,WAC9BgC,GAAS,IAC1C,OAAO,YAAYC,EAAmBF,IAG3BG,EAAuBC,I,YAClC,MAAMtC,EAAkC,QAAtB,EAAW,QAAX,EAAAsC,aAAG,EAAHA,EAAKrT,cAAM,eAAE+Q,iBAAS,QAAI,KACtCD,EAA4C,QAA3B,EAAW,QAAX,EAAAuC,aAAG,EAAHA,EAAKrT,cAAM,eAAE8Q,sBAAc,QAAI,KAGtD,OAAKC,IAAeD,GAA6C,YAA3B,YAAkBuC,GAC/C,IAEFN,EAAkBhC,EAAWD,GAAgB,IAGzCwC,EAAuB,CAClCC,EACAC,EACAC,KAEA,MAAMC,EAAwB,IAAYF,GAQ1C,OAPAE,EAAsBC,QAAU,IAAID,EAAsBC,QAAS,CAAE7W,KAAMyW,IACvEE,IACFC,EAAsBE,iBAAmB,IACpCF,EAAsBE,iBACzB,CAAE9W,KAAMyW,KAGL,aAAU,sBAAqBG,IAG3BG,EAAkC,CAC7CC,EACArV,EACAsV,KAEA,aAAO,sBAAqB,IAA0BtV,GACnDsK,KAAMiL,SAC0E5K,IAA3E,IAAO4K,EAAeL,QAAUM,GAAMA,EAAEnX,OAASgX,EAAOtV,SAAS1B,OACnEwW,EAAqBQ,EAAOtV,SAAS1B,KAAMkX,EAAgBD,KAG9DG,MAAOC,IACN,qBAAW,CAAE1T,MAAO0T,EAAI7T,aASxB8T,EAAmB,CAACC,EAAoBC,IAExCD,IAAe,IAAmB9Q,IAC7B,cAAuB,IAAmBA,OAAO+Q,IAEtDD,IAAe,IAAmB7Q,MAC7B,cAAuB,IAAmBA,SAAS8Q,IAErD,KAGIC,EAAuB,CAClCC,EACAC,EAAiD,MAEjD,IAAIC,EAAQ,EACRC,EAAgBP,EAAiBI,aAAU,EAAVA,EAAY7T,IAAK+T,GACtD,IAAKC,EACH,OAAOF,EAET,KACEA,EAAoBE,IACpBF,EAAoBE,MAAmBH,aAAU,EAAVA,EAAYpV,QAEnDuV,EAAgBP,EAAiBI,aAAU,EAAVA,EAAY7T,MAAO+T,GAGtD,OAAO,OAAP,wBAAYD,GAAmB,CAAE,CAACE,GAAgBH,aAAU,EAAVA,EAAYpV,SAGnDwV,EAAgBC,IAC3B,OAAQA,EAAQtW,MACd,KAAK,gBAAcA,KACnB,KAAK,YAAUA,KACf,KAAK,qBAAmBA,KACtB,MAAO,GACT,KAAK,mBAAiBA,KACpB,MAAO,gBACT,KAAK,wBAAsBA,KACzB,MAAO,qBACT,KAAK,iBAAeA,KAClB,MAAO,aACT,KAAK,eAAaA,KAChB,MAAO,YACT,KAAK,mBAAiBA,KACpB,MAAO,gBACT,KAAK,uBAAqBA,KACxB,MAAO,oBACT,KAAK,sBAAoBA,KACvB,MAAO,mBACT,KAAK,6BAA2BA,KAC9B,MAAO,2BACT,KAAK,kBAAgBA,KACnB,MAAO,eACT,QACE,OAAO,OAIAuW,EAAiB,CAC5BC,EACAC,EACAC,IAEOF,EAAaG,OAAQC,IAC1B,MAAM,gBAAEC,EAAkB,IAAOD,EAAI3W,SAErC,OAAO4W,EAAgBC,KACpBC,GAAcA,EAAUxY,OAASkY,GAAqBM,EAAU/W,OAAS0W,KAKnEM,EAAc,CAAC3U,EAA2B4U,IACpCA,EAAUzQ,KAAM0Q,GAAoBA,EAAEjX,SAAS1B,OAAS8D,EAASpC,SAAS1B,MAIhF4Y,EAAsB,CACjCnP,EACAoP,IAEwBA,EAAiBT,OACtCU,KACGA,EAAGnZ,KAAKoZ,kBAAkB9Q,KACzB+Q,IAAM,MAAC,OAAmB,QAAnB,EAAAA,EAAGrZ,KAAKsZ,mBAAW,eAAEjZ,QAASyJ,EAAS/H,SAAS1B,QAMnDkZ,EAAoB,CAC/BL,EACAM,IAE+BA,EAAeC,OAAO,CAACjW,EAAKkW,KACxCA,EAAG1Z,KAAK2Z,SAASlB,OAAQ7W,GACxCsX,EAAiB5Q,KAAM6Q,IAAM,MAAC,OAAAA,aAAE,EAAFA,EAAIpX,SAAS1B,SAAoB,QAAX,EAAAuB,aAAC,EAADA,EAAGgY,gBAAQ,eAAEC,QAEtDzR,OAAS,GACpB5E,EAAII,KAAK8V,GAEJlW,GACN,IAIQsW,EAA4BhQ,GACX,uBAAxBA,EAASoH,WACJ,uBAEF,gBAGI6I,EAA+B5R,GACX,uBAA3BA,EAAY+I,WACP,0BAEF,mBAGI8I,EAAwBlH,GACX,uBAApBA,EAAK5B,WACA,mBAEF,YAGT,IAAY+I,EAKAC,EAIAC,GATZ,SAAYF,GACV,yBACA,2BAFF,CAAYA,MAAyB,KAKrC,SAAYC,GACV,gCADF,CAAYA,MAA6B,KAIzC,SAAYC,GACV,+BACA,sBACA,4BACA,4BAJF,CAAYA,MAAc,KAOnB,MAAMC,EAAkBC,GAC7BA,aAAQ,EAARA,EAAU/R,KACP0L,IAAM,QAAC,OAAyB,QAAzB,EAAY,QAAZ,EAAAA,aAAE,EAAFA,EAAIjS,gBAAQ,eAAEuY,mBAAW,eAAGL,EAA0BM,QAASJ,EAAeK,OAG7EC,EAAmBC,I,QAC9B,OAAkC,QAAlC,EAAqB,QAArB,EAAAA,aAAW,EAAXA,EAAa3Y,gBAAQ,eAAEuY,mBAAW,eAAGL,EAA0BU,SAC/DT,EAA8BU,eAEnBC,EAAeH,I,YAC1B,OAEC,QAFD,EAAkE,QAAlE,GAAoB,QAAnB,EAAAA,aAAW,EAAXA,EAAanX,cAAM,eAAEuX,WAA8B,QAAnB,EAAAJ,aAAW,EAAXA,EAAanX,cAAM,eAAEwX,oBAAY,eAAEzS,KACjE0S,GAAMA,EAAE3a,OAAS8Z,EAAeK,aAClC,eAAE7X,OAEQsY,EAAeC,I,YAC1B,OAEC,QAFD,EAAsE,QAAtE,GAAoB,QAAnB,EAAAA,aAAW,EAAXA,EAAa3X,cAAM,eAAEuX,WAA8B,QAAnB,EAAAI,aAAW,EAAXA,EAAa3X,cAAM,eAAE4X,wBAAgB,eAAE7S,KACrE0S,GAAMA,EAAE3a,OAAS8Z,EAAeiB,yBAClC,eAAEzY,OAEQ0Y,EAAiB1Q,I,QAC5B,KAAgC,QAA3B,EAAe,QAAf,EAAAA,aAAO,EAAPA,EAASpH,cAAM,eAAEG,kBAAU,eAAE0E,QAChC,OAAO,IAAeqB,QAGxB,OAD+B,YAAkBkB,IAItC2Q,GAAwBnT,I,UACnC,MAAMoT,EAEL,QAFyB,EAA+B,QAA/B,EAAmB,QAAnB,EAAApT,aAAW,EAAXA,EAAa5E,cAAM,eAAEG,kBAAU,eAAE4E,KACxD3E,GAAkC,eAApBA,aAAS,EAATA,EAAWZ,cAC3B,eAAEc,QAGGkI,EAAUwP,aAAiB,EAAjBA,EAAmBC,MAAM,2BAEnCC,EAAgC,GACtC1P,WAAS+I,QAAS0G,IAChB,MAAOtX,EAAKvB,GAAS6Y,EAAM7b,MAAM,gBACjC8b,EAAOvX,EAAIwX,QAAU5O,OAAOnK,EAAM+Y,UAGpC,MAAMC,IACHF,aAAM,EAANA,EAAQG,YAAa,KAAMH,aAAM,EAANA,EAAQ1S,SAAU,KAAM0S,aAAM,EAANA,EAAQvS,YAAa,GAc3E,MAZqC,CACnCF,SAASyS,aAAM,EAANA,EAAQI,aAAc,EAC/B/S,UAAW6S,GAAkB,EAC7BzS,WAAWuS,aAAM,EAANA,EAAQvS,YAAa,EAChCH,QAAQ0S,aAAM,EAANA,EAAQ1S,SAAU,EAC1BY,SAAS8R,aAAM,EAANA,EAAQ9R,UAAW,EAC5BiS,WAAWH,aAAM,EAANA,EAAQG,YAAa,EAChC/S,YAAY4S,aAAM,EAANA,EAAQvS,YAAa,EACjC2M,mBAAoB,EACpBpM,QAAS,K,kCC1lBb,oEAAO,MAAMqS,EAAajY,IAAY,CACpC+I,KAAKjK,GACa,MAATA,GAAiBmK,OAAOgP,UAAUnZ,GAE3CkB,YAGWkY,EAAyB,iC,kCCqEtC,IAAYC,EAOAC,EAOAC,EAdZ,+GAAYF,GACV,wEACA,wDACA,gEACA,gDAJF,CAAYA,MAAY,KAOxB,SAAYC,GACV,sBACA,4BACA,cACA,oBAJF,CAAYA,MAAU,KAOtB,SAAYC,GACV,wBACA,wBACA,wBAHF,CAAYA,MAAa,M,yDCyFzB,kCAAO,MAAMC,EAAmD,CAC9DC,MAAO,aACPC,QAAS,KACTva,KAAM,gB,gFCtIR,kCAAO,MAAMwa,EAA+C,CAC1DF,MAAO,aACPC,QAAS,KACTva,KAAM,Y,kCCnDR,IAAYya,EAgBAC,EAhBZ,2CAAYD,GACV,0BACA,wBACA,kBACA,oBAEA,+BACA,gCACA,0CACA,oBACA,wBACA,oBACA,cACA,YAbF,CAAYA,MAAc,KAgB1B,SAAYC,GACV,8BADF,CAAYA,MAAe,M,kCChB3B,ijBAmDO,MAAMC,EAAe,CAACC,EAAyBC,KACpD,KAAKD,GAAUA,EAAKtU,OAAS,GAAOuU,GAClC,OAAO,KAET,IAAI5S,EAAY2S,EAAK,GACrB,GAAc,sBAAVC,EACF,IAAK,IAAI1Y,EAAI,EAAGA,EAAIyY,EAAKtU,OAAQnE,IAC/B8F,EACE2S,EAAKzY,IACLyY,EAAKzY,GAAGlC,UACR2a,EAAKzY,GAAGlC,SAAS4a,IACjB,IAAInI,KAAKkI,EAAKzY,GAAGlC,SAAS4a,IAAU,IAAInI,KAAKzK,EAAUhI,SAAS4a,IAC5DD,EAAKzY,GACL8F,OAEH,GAAc,cAAV4S,GAAmC,mBAAVA,EAClC,IAAK,IAAI1Y,EAAI,EAAGA,EAAIyY,EAAKtU,OAAQnE,IAC/B8F,EACE2S,EAAKzY,IACLyY,EAAKzY,GAAGV,QACRmZ,EAAKzY,GAAGV,OAAOoZ,IACf,IAAInI,KAAKkI,EAAKzY,GAAGV,OAAOoZ,IAAU,IAAInI,KAAKzK,EAAUxG,OAAOoZ,IACxDD,EAAKzY,GACL8F,OAGRA,EAAY2S,EAAKA,EAAKtU,OAAS,GASjC,OAPK2B,EAAUxG,SACbwG,EAAY,OAAH,wBAAQA,GAAS,CAAExG,OAAQ,CAAEqZ,aAAc,CAAE/I,MAAO,QAE1D9J,EAAUxG,OAAOsZ,qBACpB9S,EAAUxG,OAAS,OAAH,wBAAQwG,EAAUxG,QAAM,CAAEsZ,mBAAoB,MAEhE9S,EAAUxG,OAAOsZ,mBAAqB,YAAyB9S,GACxDA,GAGI+S,EAAoB,CAC/B/D,EACAgE,IAEOhE,EAAUjF,IAAKhK,IACpB,MAAMkT,EAAiBD,EAAatE,OACjCwE,IAAM,MAAC,OAAkB,QAAlB,EAAAA,EAAGlb,SAASqD,cAAM,eAAG,0BAA2B0E,EAAS/H,SAAS1B,OAG5E,OADAyJ,EAASC,UAAY0S,EAAaO,EAAgB,qBAC3ClT,IAIEoT,EAAqB3Z,IAChC,OAAQA,GACN,KAAK,IAAeuF,UAClB,MAAO,CAAEjF,QAAS,IAAQjC,EAAE,8BAA+Bub,QAAS,yBACtE,KAAK,IAAepU,OAClB,MAAO,CAAElF,QAAS,IAAQjC,EAAE,2BAA4Bub,QAAS,2BACnE,KAAK,IAAeC,cAClB,MAAO,CACLvZ,QAAS,IAAQjC,EAAE,gDACnBub,QAAS,2BAEb,KAAK,IAAenU,QAEpB,KAAK,IAAe,eAClB,MAAO,CAAEnF,QAAS,IAAQjC,EAAE,4BAA6Bub,QAAS,wBAEpE,KAAK,IAAexT,QAClB,MAAO,CAAE9F,QAAS,IAAQjC,EAAE,4BAA6Bub,QAAS,yBACpE,KAAK,IAAejU,UAClB,MAAO,CAAErF,QAAS,IAAQjC,EAAE,8BAA+Bub,QAAS,yBACtE,KAAK,IAAetU,WAClB,MAAO,CAAEhF,QAAS,IAAQjC,EAAE,+BAAgCub,QAAS,yBACvE,KAAK,IAAepJ,KACpB,KAAK,IAAetK,QAClB,MAAO,CAAE5F,QAAS,IAAQjC,EAAE,4BAA6Bub,QAAS,wBACpE,QACE,MAAO,CACLtZ,QAAS,IAAQjC,EAAE,gDACnBub,QAAS,0BAQJE,EAA8BlV,I,cACzC,MAAMmV,GACyB,QAA7B,EAAqB,QAArB,EAAAnV,aAAW,EAAXA,EAAapG,gBAAQ,eAAEqD,cAAM,eAAG,IAAoB0E,aAAkC,QAArB,EAAA3B,aAAW,EAAXA,EAAapG,gBAAQ,eAAE1B,MACpFuc,GAAkC,QAAnB,EAAAzU,aAAW,EAAXA,EAAa5E,cAAM,eAAEqZ,gBAAiC,QAAjB,EAAAzU,aAAW,EAAXA,EAAanI,YAAI,eAAE4c,cAC7E,OAAKU,GAAiBV,EAGf,CACL1L,WAAY,YAAmB,iBAC/BpP,KAAM,gBAAcA,KACpBC,SAAU,CACR1B,KAAMid,EACNtb,UAAWmG,EAAYpG,SAASC,WAElChC,KAAM4c,GATC,MAqCEW,EAAgB,CAC3BC,EACA1T,EACA4J,K,cAEA,MAAM+J,EA7B6B,CAACC,I,YACpC,IAAKA,EACH,OAAO,EAIT,OAF8D,QAA1C,IAAqB,QAArB,EAAAA,EAAiB1d,YAAI,eAAE6T,QAAS,IAAIzL,cAAM,QAAI,IACA,QAA5C,IAAqB,QAArB,EAAAsV,EAAiB1d,YAAI,eAAE4T,UAAW,IAAIxL,cAAM,QAAI,IAwBnDuV,CAAsB7T,GApBA,CAAC4T,I,YAC1C,IAAKA,EACH,OAAO,EAUT,OALU,QAFP,IAAqB,QAArB,EAAAA,EAAiB1d,YAAI,eAAE6T,QAAS,IAAI4E,OAClC3F,IAAQ,QAAC,MAAuB,UAAX,QAAZ,EAAAA,EAAKkC,eAAO,eAAElT,OAA0C,iBAAX,QAAZ,EAAAgR,EAAKkC,eAAO,eAAElT,QACzDsG,cAAM,QAAI,IAIJ,QAFP,IAAqB,QAArB,EAAAsV,EAAiB1d,YAAI,eAAE4T,UAAW,IAAI6E,OACpC3F,IAAQ,QAAC,MAAuB,UAAX,QAAZ,EAAAA,EAAKkC,eAAO,eAAElT,OAA0C,iBAAX,QAAZ,EAAAgR,EAAKkC,eAAO,eAAElT,QACzDsG,cAAM,QAAI,IASuCwV,CAA4B9T,GAC3E+T,EAAW,K,MACf,OAAuB,QAAnB,EAAAL,aAAW,EAAXA,EAAaja,cAAM,eAAEmQ,UAChBoK,OAAOC,KAAKP,EAAYja,OAAOmQ,UAEpCA,EACKA,aAAQ,EAARA,EAAUI,IAAKkK,GAASA,EAAKjc,SAAS1B,MAExC,IAEH4d,EAAgBJ,IAAWzV,OAC3B8V,IAAwC,QAAnB,EAAAV,aAAW,EAAXA,EAAaja,cAAM,eAAE4a,eAAgB,IAAI/V,OAC9D8L,EAAyB,CAC7B2B,mBAAoB,EACpBpM,QAAS,EACTT,QAAS,EACTF,UAAW,EACXC,OAAQ,EACRG,UAAW,EACXS,QAASuU,GAGX,IAAuB,QAAnB,EAAAV,aAAW,EAAXA,EAAaja,cAAM,eAAEmQ,WAAYA,EAAU,CAC7CmK,IAAW/I,QAASnK,IAClB,MAAMpH,EAAS,aACbmQ,aAAQ,EAARA,EAAUpL,KAAM0V,GAASA,EAAKjc,SAAS1B,OAASsK,KAC9C6S,EAAYja,OAAOmQ,SAAS/I,IAEjB,cAAXpH,EACF2Q,EAAW,IAAepL,aACN,YAAXvF,EACT2Q,EAAW,IAAelL,WACN,WAAXzF,EACT2Q,EAAW,IAAenL,UACN,cAAXxF,EACT2Q,EAAW,IAAehL,aAE1BgL,EAAW,IAAezK,aAI9B,MAAM2U,EAAwBlK,EAAW,IAAenL,QAAU,EAC5DsV,EACJ,YAAyBb,KAAiB,IAAetU,UACrDoV,EACJb,GAAcQ,EAAgBR,EAAaQ,EAAgBC,EAAoBT,EAE7EW,GAAyBC,EAC3BnK,EAAW,IAAehL,YAAcoV,EAExCpK,EAAW,IAAezK,UAAY6U,MAGS,WAAb,QAApC,EAA+B,QAA/B,EAAmB,QAAnB,EAAAd,aAAW,EAAXA,EAAaja,cAAM,eAAEG,kBAAU,eAAG,UAAE,eAAEH,UACtCia,aAAW,EAAXA,EAAaxd,KAAKuD,UAAW,IAAuBoF,qBAEpDuL,EAAW,IAAehL,WAAauU,GAC9BD,aAAW,EAAXA,EAAaxd,KAAKuD,UAAW,IAAuBiG,mBAC7D0K,EAAW,IAAezK,UAAYgU,EAEtCvJ,EAAW,IAAe2B,sBAE5B,OAAO3B,GAGIqK,EAAgCzc,GACvCA,IAAS,mBAAiBA,KACrB,mBAELA,IAAS,YAAUA,WAAiB6K,IAAT7K,EACtB,YAEF,KAGI0c,EAA2B1c,IACrCyc,EAA6Bzc,IAAS,aAAWA,KAEvC2c,EAAmC3c,GAC1CA,IAAS,6BAA2BA,KAC/B,6BAELA,IAAS,sBAAoBA,WAAiB6K,IAAT7K,EAChC,sBAEF,KAGI4c,EAA8B5c,IACxC2c,EAAgC3c,IAAS,uBAAqBA,KAapD6c,EAAiC7c,IAC5C,MAAM8c,EAAQL,EAA6Bzc,GAC3C,OAAO,aAAkB8c,IAGdC,EAAoB,CAC/B1W,EACAuL,KAEA,MAAMoL,EAAepL,GAAY6J,EAAcpV,OAAawE,EAAW+G,GACvE,OAAOoL,aAAY,EAAZA,EAAc9V,SAGV+V,EAA4B,CACvC5W,EACAuL,MAGEvL,IACC0W,EAAkB1W,EAAauL,GAAY,GAC1C,YAAyBvL,KAAiB,IAAea,UAGlDgW,EAA4C,CACvD7W,EACA8W,MAGE9W,KACC8W,aAAgB,EAAhBA,EAAkBjW,SAAU,GAC3B,YAAyBb,KAAiB,IAAea,UAGlDkW,EAA8B,CACzC/W,EACAuL,MAGEvL,GACA0W,EAAkB1W,EAAauL,GAAY,GAC3C,YAAyBvL,KAAiB,IAAee,WAGhDiW,EAA8C,CACzDhX,EACA8W,MAGE9W,IACA8W,aAAgB,EAAhBA,EAAkBjW,SAAU,GAC5B,YAAyBb,KAAiB,IAAee,Y,kCCjV7D,wVAGYkW,EAQAC,EAOAC,EAlBZ,WAGA,SAAYF,GACV,0BACA,qBACA,oBACA,YACA,yBALF,CAAYA,MAAgB,KAQ5B,SAAYC,GACV,4BACA,oBACA,sBACA,kBAJF,CAAYA,MAAoB,KAOhC,SAAYC,GACV,cACA,kBACA,kBACA,cAJF,CAAYA,MAAkB,KAOvB,MAAMC,EAAqD,CAChE,CAACH,EAAiBI,YAAa,wCAC/B,CAACJ,EAAiBK,UAAW,4CAC7B,CAACL,EAAiBM,SAAU,qCAC5B,CAACN,EAAiBO,KAAM,iCACxB,CAACP,EAAiBQ,YAAa,yCAGpBC,EAA8D,CACzE,CAACR,EAAqBS,aAAc,uCACpC,CAACT,EAAqBU,SAAU,qCAChC,CAACV,EAAqBW,UAAW,sCACjC,CAACX,EAAqBY,QAAS,qCAKjC,IAAYC,GAAZ,SAAYA,GACV,kBACA,oBAFF,CAAYA,MAAqB,KAK1B,MAAMC,EAAoD,CAC/DC,OAAQ,GACRC,oBAAoB,EACpBC,YAAa,IAAYC,QACzBlgB,KAAM,GACNmgB,OAAQ,SACRC,kBAAkB,EAClBC,SAAU,GACVC,QAAS,CACPC,MAAO,GACPJ,OAAQ,QACRnJ,OAAQ,GACRzH,IAAK,GACLiR,KAAM,GACNC,YAAY,IAIHC,EAAsB,CACjC,CAAC,IAAYC,QACX,kHACF,CAAC,IAAYC,QAAS,sEACtB,CAAC,IAAYC,WAAY,qEAGdC,EAAkB,CAC7B,CAAC,IAAYH,QACX,uFACF,CAAC,IAAYC,QACX,mGACF,CAAC,IAAYC,WAAY,uEAGdE,EAAwB,CAAC,aAAc,gBAAiB,e,kCC/ErE,+MAuBO,MAAMC,EAAoBzf,GAC/B,WAAakK,MAAM,CACjBzL,KAAM,aAAqBuB,GAC3B0f,QAAS,IACTC,YAAa,IACb9f,MAAO,YAAsBG,GAC7B4f,IAAK,YAAoB5f,GACzB6f,OAAQ,YAAuB7f,GAC/B8f,QAAS,YAAwB9f,GACjC+f,WAAY,YAA2B/f,GACvCggB,WAAY,YAA2BhgB,GACvCigB,MAAO,YAAsBjgB,GAC7BkgB,OAAQ,YAAuBlgB,GAC/BoE,MAAO,IACP+M,UAAW,IACXgP,aAAc,YAAmCngB,GACjDogB,IAAK,YAAqCpgB,GAC1CkI,SAAU,MAGRmY,EAAY,CAACrS,EAAasS,IAE5BtS,EAAIuS,WAAW,WAAWD,OAC1BtS,EAAIuS,WAAW,eAAeD,OAC9BtS,EAAIhH,SAAS,IAAIsZ,MAIRE,EAAiBxS,GACvB,IAAYhD,KAAKgD,GAIlBqS,EAAUrS,EAAK,cACV,IAAYoR,OAEjBiB,EAAUrS,EAAK,iBACV,IAAYsR,UAEjBe,EAAUrS,EAAK,cACV,IAAYqR,OAEjBgB,EAAUrS,EAAK,cAAgBA,EAAIhH,SAAS,SACvC,IAAYyZ,MAGd,IAAYC,OAfV,IAAY/B,QAkBVgC,EAAuBC,IAClC,GAAI,KAAU5V,KAAK4V,GACjB,OAAOA,EAGT,MAAMC,EAAe,IAAYD,GACjC,OAAOA,EAAWhH,MAAM,QAAUiH,EAAajH,MAAM,OACjD,OAAOiH,EACPA,GAGOC,EAAqB9S,IAChC,IAAK,IAAYhD,KAAKgD,GACpB,OAEF,MAAMvP,EAAOuP,EAAI+S,QAAQ,MAAO,IAAIhjB,MAAM,KAAKijB,MAC/C,OAAOL,EAAoBliB,K,kCCzF7B,0XA4BYwiB,EAOAC,EAnCZ,iGA4BA,SAAYD,GACV,oDACA,gDACA,kEACA,kDAJF,CAAYA,MAAa,KAOzB,SAAYC,GACV,kBACA,4DAFF,CAAYA,MAAkB,KAKvB,MAAMC,EAAiB,CAC5BC,EAAiBF,EAAmBG,+BACjC,CACH,CAAC,IAAqBC,qBAAsB,CAC1C,CAACL,EAAcM,wBAAyB,IACnCH,EAAH,4FAEF,CAACH,EAAcO,yBAA0B,IACvC,OAAOJ,+FAGX,CAAC,IAAqBK,2BAA4B,CAChD,CAACR,EAAcO,yBAA0B,IACvC,+BAA+BJ,yFAEjC,CAACH,EAAcS,gCAAiC,IAC9C,OAAON,wHAET,CAACH,EAAcU,uBAAwB,IACrC,OAAOP,0GAET,CAACH,EAAcM,wBAAyB,IACtC,mBAAmBH,qGAGvB,CAAC,IAAqBQ,4BAA6B,CACjD,CAACX,EAAcO,yBAA0B,IACvC,+BAA+BJ,wGAEjC,CAACH,EAAcS,gCAAiC,IAC9C,OAAON,qIAET,CAACH,EAAcU,uBAAwB,IACrC,OAAOP,uHAET,CAACH,EAAcM,wBAAyB,IACtC,mBAAmBH,sHAOZS,EAAeC,IACzBA,EAAI,EAAI,IAAM,IAHW,CAACA,GACrB,IAANA,GAAYA,GAAK,MAASA,EAAI,KAAQ,aAAiBA,GAAGC,OAASD,EAAEE,cAAc,GAE9DC,CAAoBC,KAAKC,IAAIL,IACvCM,EAAczP,GAClB,IAAoB0P,OAAO1P,GAEvB2P,EAAyB,CAACzI,EAA0B0I,EAAiBC,KAChF,MAAM,OAAEC,EAAM,OAAEC,GAAW7I,EACrB8I,EAAY,IAAMD,EAASZ,IAC/B,MAAMc,EAAI1X,OAAO4W,EAAE,IACnB,MAAO,CACLe,EAAG,IAAIjQ,KAAK,IAAIA,KAAY,IAAPkP,EAAE,IAAWgB,SAAS,EAAG,EAAG,EAAG,IACpDF,EAAG1X,OAAO6X,MAAMH,GAAK,KAAOA,EAC5BH,YAME5N,EAAQ3J,OAAO,IAAMyX,EAAW,UAChCK,EAAM9X,OAAO,IAAM,IAAOyX,GAAY,MACtCM,EAAOT,EAAOD,EAQpB,OAPA,IAAQ1N,EAAOmO,EAAKC,GAAM/P,QAAQ,CAAClT,EAAGqC,KACpC,MAAMwgB,EAAI,IAAIjQ,KAAK5S,GACf,IAAM2iB,EAAW,CAACtgB,EAAG,MAAQwgB,GAC/BF,EAAUrP,OAAOjR,EAAG,EAAG,CAAEwgB,IAAGD,EAAG,KAAMH,aAIlCE,GAKIO,EAAqB,CAChCC,EACAC,EACAC,K,MAEA,MAAMnK,GAAwB,QAAd,EAAAiK,aAAQ,EAARA,EAAU1O,YAAI,eAAEoF,SAAU,GAC1C,OAAOX,aAAO,EAAPA,EAAShH,IAAKkH,I,MACnB,OAAgB,QAAT,EAAAA,aAAC,EAADA,EAAGsJ,cAAM,eAAExQ,IAAI,EAAE2Q,EAAGD,M,QACzB,MAAO,CACLC,EAAgB,QAAb,EAAAO,aAAQ,EAARA,EAAWhK,UAAE,QAAI,IAAIxG,KAAS,IAAJiQ,GAC7BD,EAAgB,QAAb,EAAAS,aAAQ,EAARA,EAAWT,UAAE,QAAIU,WAAWV,GAC/BH,OAAQrJ,aAAC,EAADA,EAAGqJ,OACXc,KAAMV,QAMDW,EAAkBC,IAC7B,MAAMC,EAAU,GAChB,IAAKD,EAAU,OAAOC,EACtB,MAAMC,EAAiB,YAAwB,MACzCC,EAAU1B,KAAK2B,MAAMJ,EAAWE,GAChCG,EAAI,IAAIlR,KAAKA,KAAKmR,OAExB,IADAD,EAAEhB,SAAS,EAAG,EAAG,EAAG,GACbY,EAAQld,OAAS,EAAIod,GAC1BF,EAAQ1hB,KAAK8hB,EAAEjR,WACfiR,EAAEE,QAAQF,EAAEG,UAAY,GAE1B,OAAOP,EAAQQ,MAAM,EAAGN,IAGbO,EAAc,CAACC,EAAiBxP,KAC3C,GAAgB,IAAZwP,EACF,OAAO,IAAQpkB,EAAE,oCAEnB,IAAIqkB,EAAMnC,KAAK2B,MAAMO,GACjBnZ,EAAM,EACNqZ,EAAK,EACLxR,EAAW,GA2Bf,OA1BIuR,GAAO,KACTpZ,EAAMiX,KAAKqC,MAAMF,EAAM,IACvBA,GAAO,IAELpZ,GAAO,KACTqZ,EAAKpC,KAAKqC,MAAMtZ,EAAM,IACtBA,GAAO,IAELqZ,EAAK,IACPxR,GAAY8B,EACR,IAAQ5U,EAAE,kCAAmC,CAAEqW,MAAOiO,IACtD,IAAQtkB,EAAE,2BAA4B,CAAEskB,OAC5CxR,GAAY,KAEV7H,EAAM,IACR6H,GAAY8B,EACR,IAAQ5U,EAAE,oCAAqC,CAAEqW,MAAOpL,IACxD,IAAQjL,EAAE,4BAA6B,CAAEiL,QAC7C6H,GAAY,KAEVuR,EAAM,IACRvR,GAAY8B,EACR,IAAQ5U,EAAE,oCAAqC,CAAEqW,MAAOgO,IACxD,IAAQrkB,EAAE,4BAA6B,CAAEqkB,SAGxCvR,EAASgH,QAGL0K,EAAkC,KAAM,CACnD,KAAM,IAAQxkB,EAAE,0BAChB,KAAM,IAAQA,EAAE,2BAChB,KAAM,IAAQA,EAAE,2BAChB,KAAM,IAAQA,EAAE,4BAChB,KAAM,IAAQA,EAAE,4BAChB,KAAM,IAAQA,EAAE,8BAGLykB,EAA4BhQ,IACvC,IAAIiQ,EAAgB,EACpB,OAAO,IAASjQ,EAAM,KAAKvC,IAAKyS,IAC9B,MAAMC,EAAeD,EAAI/B,EAAI8B,EAE7B,OADAA,GAAiBC,EAAI/B,EACd,OAAP,wBAAY+B,GAAG,CAAE/B,EAAGgC,Q,kCCvMxB,iOAIO,MAAMC,EAAsBC,IACjC,MACOH,EAAKpY,GAAQuY,aAAc,EAAdA,EAAgBlL,MADhB,sBAEpB,MAAO,CACLvN,gBAAiBnB,OAAOyZ,IAAQ,GAChCrY,oBAAqBC,GAAQ,IAC7BwY,2BAA4BxY,GAAQ,MAIlCyY,EAAiC,iBAE1BC,EAAmCC,GAC9CA,EAAGnE,QAAQiE,EAAgC,IAEhCG,EAAgC,CAC3CD,EACAE,K,MAEA,KAAY,QAAP,EAAAF,EAAG9mB,YAAI,eAAE6Z,KAAK,OAAO,KAC1B,MAAM,WAAE3I,EAAU,KAAEpP,EAAI,KAAEzB,GAASymB,EAAG9mB,KAAK6Z,IAC3C,OAAO,YAAmB,OAAkB3I,GAC1CpP,IAAS,IAAaA,MACtBzB,IAAS2mB,EACP3mB,EACA,MAGO4mB,EAAgC,CAC3CC,EACAC,IAEO,IACF,IAAIC,IACLF,aAAiB,EAAjBA,EACIzO,OAAQqO,MACRK,aAAuB,EAAvBA,EAAyB/e,QAAS,KAC9B+e,aAAuB,EAAvBA,EAAyBve,SAASie,EAAgCC,MAGvEhT,IAAKuT,GAAMR,EAAgCQ,MAKvCC,EAA8BjZ,GACzCA,EAAcuK,KAAMkO,GAAO,IAAIS,OAAOX,GAAgCha,KAAKka,IAEhEU,EAAgC,CAC3CC,EACApR,EAA0B,GAC1BqR,IAEAD,EACGhP,OAAQiN,GAAM4B,EAA2B,CAAC5B,KAC1C5R,IAAKgT,I,QACJ,MAAMa,EAAiBtR,aAAI,EAAJA,EAAM/N,KAC1Bod,GAAMA,EAAE3jB,SAAS1B,OAASwmB,EAAgCC,IAE7D,OAAOa,IAA0C,QAAxB,EAAmB,QAAnB,EAAAA,EAAe3nB,YAAI,eAAE6Z,WAAG,eAAExZ,QAASqnB,EACxDC,EACA,OAELlP,OAAQiN,KAAQA,I,ktBC1Cd,MAAMkC,EAAY,CAAEC,OAAQ,OAEtBC,EAA8BlmB,GACzC,WAAakK,MAAM,CACjBzL,KAAM,WAEH0L,QAAQ,KAAW,CAClBlI,QAASjC,EACP,+IAEF2M,oBAAoB,IAErBvC,SAASpK,EAAE,8BACdwe,OAAQ,WAELrU,QAAQ,IAAanK,EAAE,sCACvBoK,SAASpK,EAAE,8BACdmmB,YAAa,WACbpH,QAAS,WAENvU,KAAK,cAAe,CACnBC,GAAI,IAAY6U,UAChB5U,KAAM,WAAaR,MAAM,CACvB+U,KAAM,WAEH9U,QAAQ,IAAwB,CAC/BlI,QAASjC,EACP,4JAEF2M,oBAAoB,IAErBvC,SAASpK,EAAE,kCAGjBwK,KAAK,CAAC,SAAU,cAAe,UAAW,CACzCC,GAAI,CAACmU,EAAQF,EAAaF,IACxBA,KAAYE,IAAgB,IAAYU,QAAUR,IAAW,IAAYQ,QAC3E1U,KAAM,WAAaR,MAAM,CACvB8U,MAAO,WAAahU,KAAK,gBAAiB,YAAY,WACpD,OAAOe,KAAKC,OAAOgT,OAASjT,KAAKC,OAAOoa,aAE1CA,UAAW,WAAapb,KAAK,gBAAiB,YAAY,WACxD,OAAOe,KAAKC,OAAOgT,OAASjT,KAAKC,OAAOoa,mBAMvCC,EAAwCrmB,GACnD,WAAakK,MAAM,CACjB6U,QAAS,WAENvU,KAAK,cAAe,CACnBC,GAAI,IAAY6U,UAChB5U,KAAM,WAAaR,MAAM,CACvB+U,KAAM,WAEH9U,QAAQ,KAAW,CAClBlI,QAASjC,EACP,+IAEF2M,oBAAoB,IAErBvC,SAASpK,EAAE,kCAGjBwK,KAAK,CAAC,SAAU,cAAe,UAAW,CACzCC,GAAI,CAACmU,EAAQF,EAAaF,IACxBA,GACAE,KACEA,IAAgB,IAAYU,QAAUR,IAAW,IAAYQ,QACjE1U,KAAM,WAAaR,MAAM,CACvB8U,MAAO,WAAahU,KAAK,gBAAiB,YAAY,WACpD,OAAOe,KAAKC,OAAOgT,OAASjT,KAAKC,OAAOoa,aAE1CA,UAAW,WAAapb,KAAK,gBAAiB,YAAY,WACxD,OAAOe,KAAKC,OAAOgT,OAASjT,KAAKC,OAAOoa,mBAMvCE,EAAwCtmB,GAC5C,WAAakK,MAAM,CACxBqc,WAAY,WAAa/b,KAAK,CAAC,eAAgB,mBAAoB,CACjEC,GAAI,CAACsE,EAAcyX,IAAoBzX,IAAiB,IAAaE,KAAOuX,EAC5E9b,KAAM2b,EAAqCrmB,OAK3CqgB,EAAY,CAACrS,EAAasS,IAE5BtS,EAAIuS,WAAW,WAAWD,OAC1BtS,EAAIuS,WAAW,eAAeD,OAC9BtS,EAAIhH,SAAS,IAAIsZ,MAIRE,EAAiBxS,GACvB,IAAYhD,KAAKgD,GAIlBqS,EAAUrS,EAAK,cACV,IAAYoR,OAEjBiB,EAAUrS,EAAK,iBACV,IAAYsR,UAEjBe,EAAUrS,EAAK,cACV,IAAYqR,OAGd,IAAYqB,OAZV,IAAY/B,QAiDV8H,EAA4B,CACvC/D,EACAtiB,EACAoD,EAAoC,GACpCyiB,IAC6B,OAAD,6B,UAC5B,MAAM,KACJxnB,EAAI,OACJ+f,EACAO,SAAS,UAAE2H,EAAS,OAAE9H,EAAM,MAAEI,EAAOvJ,OAAQkR,EAAa,KAAE1H,IAC1DyD,EACEkE,EAAgB,SAAOC,OAAOF,GAC9BG,EAAkBtG,EAAchC,GACtC,IAAI/I,EACAuJ,GAAoB,UAAXJ,EACXnJ,OAjDsB,EACxBsR,EACA9H,EACAD,EACA5e,EACA0mB,EACAH,EACAV,IACG,OAAD,6BACF,MAAMxR,EAAmB,CACvBnF,WAAY,cAAYA,WACxBpP,KAAM,cAAYA,KAClBC,SAAU,CACR6mB,aAAiBD,EAAH,UACd3mB,aAEFe,KAAM,aAAW8lB,OACjBC,WAAY,OAAF,sBACR,iBAAkBlI,GACd2H,GAAiB,CAAE,iBAAkBA,IACrCG,IAAoB,IAAYxH,WAAa,CAC/C,eAAgB,SAAOuH,OAAO,GAAG5H,KAAQD,QAK/C,OAAO,YAAkB,CACvBhC,MAAO,cACPvI,OACAzT,GAAIZ,EACJ+mB,YAAalB,EAASD,EAAY,QAmBnBoB,CACb3oB,EACAwgB,EACAD,EACA5e,EACA0mB,EACAH,EACAV,GAGS,WAAXrH,GACA8H,IACe,QAAf,EAAAA,aAAS,EAATA,EAAWjS,YAAI,eAAG,qBAAsBmS,UAElC,YAAiB,CACrB5J,MAAO,cACPza,SAAUmkB,EACVjS,KAAM,CAAC,CAAE4S,GAAI,UAAWna,KAAM,uBAAwBnM,MAAO,SAAO8lB,OAAOF,QAG/E,MAAMW,EAAU,EAAY9I,GAAQ+I,OAC9BnB,EAAY3Q,GAAUiR,EACtBjS,EAAO,CACXvU,KAAM,kBAAgBA,KACtBoP,WAAY,sCACZnP,SAAU,OAAF,QACN1B,OACA2B,aACIoD,GAAU,IAEhBpF,KAAM,OAAF,QACF4P,IAAKwQ,GACD4H,GAAyB,eAAZkB,EACb,CAEEE,aAAc,OAAF,sCACL,IAAsBxgB,SAASsgB,GAA8B,GAAnB,CAAEtZ,IAAKsZ,IACtC,kBAAZA,EACA,CACErI,QAEF,IACAmH,EACA,CACE3Q,OAAQ,CACNhX,KAAyB,QAAnB,EAAA2nB,aAAS,EAATA,EAAWjmB,gBAAQ,eAAE1B,KAC3B6D,IAAK,kBAGPmlB,eAAgB,CACdhpB,KAAyB,QAAnB,EAAA2nB,aAAS,EAATA,EAAWjmB,gBAAQ,eAAE1B,KAC3B6D,IAAK,mBAGT,KAGR,KAWR,aAPuB,YAAkB,CACvC0a,MAAO,kBACPvI,OACAzT,GAAIZ,EACJ+mB,YAAalB,EAASD,EAAY,QAMzB0B,EAAsB,CACjChF,EACAtC,EACAuH,IACqB,OAAD,6B,UACpB,MAAM,OACJnJ,EACAO,SAAS,OAAEH,EAAM,MAAEI,EAAOvJ,OAAQkR,EAAe3Y,IAAK4Z,EAAU,UAAElB,EAAS,KAAEzH,IAC3EyD,EACEoE,EAAkBtG,EAAchC,GAChCqJ,EAAa,YAAcrJ,EAAQsI,GAEzC,IAKIgB,EALAC,GAAkB,EAClBJ,GAAsD,WAAnC,QAAT,EAAAvH,aAAG,EAAHA,EAAK3L,YAAI,eAAG,+BACxBsT,GAAkB,GAKlBD,EADEhB,IAAoB,IAAYxH,UAErB,UAAXV,EACI,SAAOiI,OAAO,GAAG5H,KAAQD,KACzB,SAAOgJ,OAAsB,QAAf,EAAAtB,aAAS,EAATA,EAAWjS,YAAI,eAAG,iBAEf,UAAXmK,EAAqBI,EAAQ,SAAOgJ,OAAsB,QAAf,EAAAtB,aAAS,EAATA,EAAWjS,YAAI,eAAG,mBAU3E,aAPoCoT,EAAWI,kBAC7CH,EACAF,EACAG,EACApB,MAaSuB,EAA2Bla,IACtC,IAAK,IAAYhD,KAAKgD,GACpB,OAEF,MAAMvP,EAAOuP,EAAI+S,QAAQ,MAAO,IAAIhjB,MAAM,KAAKijB,MAC/C,OAZmCJ,EAYPniB,EAXxB,KAAUuM,KAAK4V,GACV,OAAOA,EAET,OAAO,IAAYA,GAJQ,IAACA,GAsHxBuH,EAAyB,CACpCC,EACAC,IACoB,OAAD,6B,MACnB,IAAIC,EACJ,IACE,MAAOC,SAAgC,YAAoC,CACzEvL,MAAO,iBACPmK,YAAa,CACXnmB,GAAI,IACJwnB,cAAe,CACbC,YAAa,CACX,uCAAwC,IAAmBL,IAAYA,OAK/EE,EAA8C,QAA5B,EAAAC,aAAsB,EAAtBA,EAAwB9T,YAAI,eAAEuD,SAChD,MAAO0Q,GACPC,QAAQC,IAAI,oCAAqCF,GAGnD,OAD4BJ,eAvCe,CAAOD,GAAsC,OAAD,6B,MACvF,IAAIQ,EAtF6B,CAACR,GAA6B,yEAGvDA,UAAY,sgFAmFMS,CAAoBT,GAC9C,IACE,MAAMrQ,QAAiB,YAA8B,CACnDgF,MAAO,iBACPhc,GAAI,IACJvC,KAAM,OAEU,QAAd,EAAAuZ,aAAQ,EAARA,EAAUvD,YAAI,eAAEuD,YAClB6Q,EAAsB7Q,EAASvD,KAAKuD,UAEtC,MAAO0Q,GACPC,QAAQC,IAAI,oCAAqCF,GAGnD,OAAOG,KAwB+CE,CAA8BV,O,kCCrbtF,+CAEA,MAAMte,EAAY,SAILif,EAAgChpB,GAC3C,WAAakK,MAAM,CACjB+e,cAAe,WACfC,SAAU,YACVC,QAAS,YACTC,SAAU,YACV3U,KAAM,WAAajK,KAAK,WAAY,CAClCC,IAAI,EACJC,KAAM,WAAaR,MAAM,CACvBmf,cAAe,WAEZhc,QAAQrN,EAAE,yCACViL,IAAI,EAAGjL,EAAE,0DACTuK,IAfc,WAeCvK,EAAE,2DACpBspB,oBAAqB,WAElBjc,QAAQrN,EAAE,yCACViL,IAAI,EAAGjL,EAAE,iEACTuK,IApBc,WAoBCvK,EAAE,2DACpBupB,iBAAkB,WAEflc,QAAQrN,EAAE,yCACViL,IAAI,EAAGjL,EAAE,qEACZwpB,eAAgB,WAEbnc,QAAQrN,EAAE,yCACViL,IAAI,EAAGjL,EAAE,2DACTuK,IA7Bc,WA6BCvK,EAAE,2DACpBypB,iBAAkB,WAEfpc,QAAQrN,EAAE,yCACViL,IAAI,EAAGjL,EAAE,qEACTuK,IAlCc,WAkCCvK,EAAE,2DACpB0pB,YAAa,WACbC,QAAS,WAAanf,KAAK,cAAe,CACxCC,GAAI,UACJC,KAAM,SAAW,CACfwC,KAAM,WAAa/C,QAAQJ,EAAW,CACpC9H,QAASjC,EAAE,sCACX2M,oBAAoB,IAEtBid,KAAM,WAAaxf,SAASpK,EAAE,4BAGlC6pB,UAAW,WAAarf,KAAK,cAAe,CAC1CC,GAAI,YACJC,KAAM,SAAW,CACfkf,KAAM,WAAaxf,SAASpK,EAAE,4BAGlC8pB,KAAM,WAAatf,KAAK,cAAe,CACrCC,GAAI,UACJC,KAAM,SAAW,CACfqf,QAAS,UAAYrd,GAAG,WAAatC,SAASpK,EAAE,mCAO/CgqB,EAAsChqB,GACjD,WAAakK,MAAM,CACjB+f,eAAgBjB,EAA6BhpB,GAC7CkqB,cAAelB,EAA6BhpB,GAC5CmqB,aAAcnB,EAA6BhpB,M,kCCvE/C,gRAAO,MAAMoqB,EAAiB,uCACjBC,EACX,oGACWC,EAA0B,uCAC1BC,EAAqB,gCACrBC,EAAkB,2BAClBC,EAAkB,2BAClBC,EAAW,yBACXC,EAAuB,yC,kCCRpC,wZAAO,MAAMC,EAA0B,qBAC1BC,EAAkC,6BAClCC,EAAoC,+BACpCC,EAAsB,YACtBC,EAAyB,gCACzBC,EAAiC,wCACjCC,EAA0B,iCAC1BC,EAAmD,oCACnDC,EAA8B,+BAC9BC,EAA2B,gCAC3BC,EAAqC,0BACrCC,EAA0C,sC,kCCVvD,uoBAuCO,MAAMC,EAAoB,CAAC,yBAA0B,4BAE/CC,EAAiBntB,IAAO,QAAC,OAA4B,QAA5B,EAAgB,QAAhB,EAAAA,aAAG,EAAHA,EAAKoa,mBAAW,eAAEgT,kBAAU,QAAI,IACzDC,EAAgBrtB,IAAO,QAAC,OAA2B,QAA3B,EAAgB,QAAhB,EAAAA,aAAG,EAAHA,EAAKoa,mBAAW,eAAEkT,iBAAS,QAAI,IACvDC,EAAuBvtB,IAAO,QAAC,OAAkC,QAAlC,EAAgB,QAAhB,EAAAA,aAAG,EAAHA,EAAKoa,mBAAW,eAAEoT,wBAAgB,QAAI,IA8BrEC,EAAYC,I,gBAIvB,MA9BoB,CAACC,GACd,IACLA,EACA,CAACpS,EAAyB9Y,EAAOuB,KAC/B,MAAM4pB,EAAQ5pB,EAAIvE,MAAM,KACH,IAAjBmuB,EAAM1lB,QACR0lB,EAAMlqB,KAAK,OAGb,MAAMmM,EAAgBge,SAASD,EAAM,GAAI,IAWzC,OAVI,IAAW/d,GACb0L,EAAO7X,KAAK,CACVmM,gBACAie,SAAUF,EAAM,GAAGG,gBAIrB1D,QAAQ2D,KAAK,iCAAkChqB,GAG1CuX,GAET,IAQK0S,EAF+C,QAApD,EAA4C,QAA5C,EAAuB,QAAvB,EAAAP,aAAgB,EAAhBA,EAAkBnsB,aAAK,eAAE2sB,2BAAmB,eAAEC,cAAM,eAAEC,gBACO,QAA7D,EAA4C,QAA5C,EAAuB,QAAvB,EAAAV,aAAgB,EAAhBA,EAAkBnsB,aAAK,eAAE2sB,2BAAmB,eAAEG,uBAAe,eAAED,gBAKtDE,EAAgBhD,GAC3B,GAAGA,EAAKzb,iBAAiByb,EAAKwC,WAAWS,cAE9BC,EAAgBruB,GACpBA,EAAKsiB,QAAQ,gBAAiB,CAACgM,EAAOC,EAAMC,KACzCD,GAAQ,KAAOC,EAAOZ,eAIrBa,EACXC,IAEaC,MAAMC,QAAQF,GAAgBA,EAAe,CAACA,IAC1BtW,OAAQ5Y,GAAgB,oBAAUA,IAExC4Z,OAAO,CAACyV,EAAwCrvB,K,UACzE,MAAMI,EAAO,wCAA8BJ,GACrCsvB,EAAY,kCAAwBtvB,IACpC,KAAEQ,GAASR,EAAYkC,SACvB0C,EAAgD,QAAlC,EAAqB,QAArB,EAAA5E,aAAW,EAAXA,EAAakC,gBAAQ,eAAEuY,mBAAW,eAAG,6BACnD8U,EAAoC,QAAtB,EAAAD,aAAS,EAATA,EAAW7U,mBAAW,eAAE8U,YACtC5qB,EAAuB3E,EAAYkC,SAASC,UAC5CC,EAAQwC,GAAeA,EAAY2D,OAAS,GAAK3D,EAAciqB,EAAaruB,GAC5EgvB,EAAY,YAAmBF,GAC/BG,EAAU,YAAqBD,GAarC,OAXAH,EAAc7uB,GAAQ,CACpB6C,IAAKrD,EACLQ,OACAoE,cACA2qB,cACAntB,QACAqtB,UACArvB,OACAkvB,YACA3qB,wBAEK0qB,GACN,IAGQK,EAA4B,CACvCC,EACAC,EACAC,K,QAEA,MAAMC,EAAW,IAAOH,EAAW,CAAEnvB,KAAMovB,IAG3C,MAAO,CAACE,EAFgE,QAApD,EAAqB,QAArB,EAAAA,aAAQ,EAARA,EAAUrV,mBAAW,eAAG,oCAA4B,QAAIoV,IAKjEE,EAAoBvvB,IAC/B,IAAKA,EACH,OAEF,MAAMwvB,EAAoB,IAAOxvB,EAAKV,MAAM,MAC5C,OAAO,IAAQkwB,EAAUlwB,MAAM,gBAGjC,IAAYmwB,EAIAC,GAJZ,SAAYD,GACV,sBACA,sBAFF,CAAYA,MAAY,KAIxB,SAAYC,GACV,wBADF,CAAYA,MAAsB,KAG3B,MAAMC,EAAqBpuB,IACzB,CACLquB,SAAU,CACRttB,MAAOmtB,EAAaG,SACpB9e,MAAOvP,EAAE,iDAEXsuB,SAAU,CACRvtB,MAAOmtB,EAAaI,SACpB/e,MAAOvP,EAAE,yDAuBFuuB,EAAsBtwB,IACdA,IAAgB,IAAUA,GAnBlB,CAACA,GACrB,IAAUA,EAAY0D,OAAOtD,OAASJ,EAAY0D,OAAOtD,KAAKmI,OACjEvI,EAAY0D,OAAOtD,KAAKM,KAAK,EAAGL,IAAKM,IAAON,IAAKO,MAC/C,MAAMC,EAAK,SAAcF,GACnBG,EAAK,SAAcF,GACzB,OAAKC,GAAOC,EAGPD,EAGAC,EAGE,WAAgBD,EAAIC,IAFjB,EAHD,EAHAH,EAAEI,cAAcH,KAU3B,GAGwD2vB,CAAcvwB,GAAe,IACvE4Z,OAAO,CAACxZ,GAAQC,UAChCD,EAAKC,GAAOA,EACLD,GACN,IAGQowB,EAAqB,IACzB,CACL,CACEC,QAAQ,EACRxuB,KAAM,eAAaA,KACnByuB,KAAM,eAAa5qB,KAKZ6qB,EAA0BxuB,IACrC,MAAMmC,EAAW,GASjB,OARInC,GACFmC,EAASP,KAAK,CACZ0sB,QAAQ,EACRxuB,KAAM,mBAAiBA,KACvByuB,KAAM,mBAAiB5qB,GACvB3D,cAGGmC,I,kCChNT,sTAyCO,MAiCMssB,EAA8BtoB,I,MACzC,OAAIA,EAAYpG,SAAS6mB,aAChBzgB,EAAYpG,SAAS6mB,cAGK,QAAzB,EAAAzgB,EAAYpG,SAAS1B,YAAI,eAAEsiB,QAAQ,kBAAmB,KAAzD,KAGI+N,EAAqB,CAChC5mB,EAAyB,KACzBC,EACA4mB,K,gBAEA,IAAK7mB,IAAaC,EAGhB,OADAwgB,QAAQvmB,MAAM,wDACP,KAGT,MAAMsZ,EAjCuB,EAACxT,EAAyBC,K,UACvD,OAAID,EACKA,EAAS/H,SAAS1B,KAGvB0J,EAEgC,QAAhC,EAA0B,QAA1B,EAAAA,EAAU/J,KAAKsZ,mBAAW,eAAEjZ,YAAI,SACD,QAA9B,EAAA0J,EAAUhI,SAASuY,mBAAW,eAAG,OAA4BvQ,EAAUhI,SAAS1B,KAG9E,MAsBcuwB,CAAgB9mB,EAAUC,GAEzC8mB,EAAa9mB,aAAS,EAATA,EAAW/J,KAAK6wB,WAE7BC,EAAkB/mB,aAAS,EAATA,EAAW/J,KAAK+wB,OAClChb,EAAiBjM,aAAQ,EAARA,EAAU9J,KAAK+wB,OAChCA,EAASD,GAAmB,YAAqB/a,GAGjDuE,EAAc,IAClB,GACkB,QAAlB,EAAAxQ,aAAQ,EAARA,EAAU/H,gBAAQ,eAAEuY,YACD,QAAnB,EAAAvQ,aAAS,EAATA,EAAWhI,gBAAQ,eAAEuY,YACrB,CACE,CAAC,IAAoBuG,MAAO,iBAE7B9W,aAAS,EAATA,EAAW/J,KAAKsZ,gBACiB,QAA/B,EAAAvP,aAAS,EAATA,EAAWhI,SAASuY,mBAAW,eAAG,OAA4B,CAC7D,CAAC,KAA0BgD,WAG1BhD,EAAY,2DACZA,EAAY,qCACZA,EAAY,iCACZA,EAAY,oCACZA,EAAY,oCACZA,EAAY,YACZA,EAAY,KAuCnB,MAtHgC,CAACnS,IACjC,IAAI6oB,EAAiB7oB,EAGrB,GAAI,IAAM6oB,EADiB,uBACoB,CAG7C,MAAMC,EAAqB,IAAMD,EAJR,uBAKzBA,EAAiB,IAAOA,EAAgB,CALf,wBAMzBA,EAAiB,IAAQA,EAAgB,CACvChxB,KAAM,CACJixB,wBAKN,OAAOD,GAsGAE,CArCgB,CACrBhgB,WAAYpH,EAAWA,EAASoH,WAAanH,EAAUmH,WACvDpP,KAAM,mBAAiBA,KACvBC,SAAU,OAAF,yBACF4uB,aAAO,EAAPA,EAAS/H,cACT,CACEA,aAAiBtL,EAAH,KAEhB,CACEjd,UACgCsM,KAAX,QAAnB,EAAA5C,aAAS,EAATA,EAAWhI,gBAAQ,eAAE1B,MACjB,GAAGowB,EAA2B1mB,KAAa,iBAC3C,GAAGuT,KAAgB,mBACzB,CACNhD,cACAtY,UAAW8H,EAAWA,EAAS/H,SAASC,UAAY+H,EAAUhI,SAASC,UACvEoD,OAAQ,IACN,GACkB,QAAlB,EAAA0E,aAAQ,EAARA,EAAU/H,gBAAQ,eAAEqD,OACD,QAAnB,EAAA2E,aAAS,EAATA,EAAWhI,gBAAQ,eAAEqD,SACpB2E,aAAS,EAATA,EAAW/J,KAAKsZ,cAAexP,IAAa,CAC3C,sBAAuBwT,MAI7Btd,KAAM,OAAF,qDACE+J,aAAS,EAATA,EAAW/J,OAAQ,MAClB+J,aAAS,EAATA,EAAW/J,KAAKsZ,cAAexP,IAAa,CAC/CwP,YAAa,CACXjZ,KAAMid,KAGNyT,GAAU,CAAEA,WAAS,CACzBF,aACAttB,OAAQ,UAMD4tB,EAAiC7T,IACrC,CACL8T,oBAAqB,CACnBrvB,SAAU,CACRqD,OAAQ,CAAE,CAAC,IAAoB0E,UAAWwT,IAE5Ctd,KAAM,CACJqxB,YAAa,CAAC,iBACdte,UAAW,CACTue,SAAU,CACRC,QAAS,YAQRC,EACXlU,IAEO,CACL8T,oBAAqB,CACnBrvB,SAAU,CACR0vB,WAAY,CAAC,gCACbrsB,OAAQ,CACN,CAAC,IAAoB0E,UAAWwT,EAChC,qBAAsB,OACtB,uBAAwB,OACxB,4BAA6BA,IAGjCtd,KAAM,CACJqxB,YAAa,CAAC,iBACdte,UAAW,CACTue,SAAU,CACRC,QAAS,QAGbG,iBAAkB,UAClBC,WAAY,iBAMdC,EAA4BC,GAChCzb,IAEA,IAAI0b,EAAwD,CAC1D/uB,KAAM,IAAYgvB,eAClB1b,KAAM,CAAE2b,SAAU,KAoBpB,OAjBIH,IACFC,EAAmB,CACjB/uB,KAAM,IAAYkvB,IAClB5b,KAAM,CACJ6b,sBAAuB,CACrBC,UAAWN,MAKfzb,EAAUgc,WACZN,EAAmB,CACjB/uB,KAAM,IAAYsvB,YAClBhc,KAAM,KAIH,OAAP,wBACKD,GACA0b,IAIMQ,EAA6B,CACxCxoB,EACAyoB,GAAiC,EACjCV,EAAuB,MAEvB,MACE9vB,UAAU,UAAEC,GACZhC,MAAM,OAAE+wB,EAAM,UAAEhe,IACdjJ,EAEJ,MAAO,CACL9H,YACAwwB,YAAazB,GAAU,IAAIjd,IAAKkC,GAAW,OAAD,wBACrCA,GAAK,CACRrT,MAAOqT,EAAMC,WAEflD,WAAYA,GAAa,IAAIe,IAAK3P,IAA6B,CAC7D9D,KAAM8D,EAAS9D,KACfoyB,UAAWF,EAAwB,IAA2B,GAC9Dlc,KAAM,OAAF,wBACC,IAA0BlS,EAASpB,OAAK,CAC3CA,KAAMoB,EAASpB,UAGnB8tB,YAAa/mB,EAAS9J,KAAK6wB,YAAc,IAAI/c,IAAI8d,EAAyBC,MAIjEa,EAA8B5e,GAGlCgK,OAAOC,KAAKjK,GAAKA,IAAKzT,IAEpB,CAAEA,OAAMsC,MADDmR,EAAIzT,MAwBTsyB,EAAyB,CACpC7oB,EACA8oB,EACAxtB,EACAkV,EACAqW,KAEA,MAAM,WAAE6B,EAAU,WAAE3B,GAAe+B,EAE7BC,EAAmC,CACvC9wB,SAAU,CACRuY,cACAlV,UAEFpF,KAAM,CACJsZ,YAAa,CACXjZ,KAAMyJ,EAAS/H,SAAS1B,MAE1B0wB,OAAQyB,EAAW1e,IAAI,EAAGzT,OAAMsC,YAA8B,CAAGtC,OAAMsC,WACvEkuB,WAAY,YAAyBA,KAGzC,OAAOH,EAAmB5mB,EAAU+oB,EAAiBlC,K,kCC7TvD,gIAWO,MAAMmC,EAAqB,CAChCzc,EACA0c,K,MA0BA,OAxBkB,OAAH,4GACT1c,EAAK8U,kBAAoB,CAAEA,iBAAkB,IAAY9U,EAAK8U,oBAC9D9U,EAAKgV,kBAAoB,CAAEA,iBAAkB,IAAYhV,EAAKgV,oBAC9DhV,EAAKiV,cAAgB,IAAY0H,kBAAoB,CACvDtH,KAAMrV,EAAKqV,OAETrV,EAAKiV,cAAgB,IAAY2H,SAAW,CAC9C1H,QAAS,OAAF,wBACFlV,EAAKA,EAAKiV,cAAY,CACzB4H,QAA8B,QAAtB,EAAA7c,EAAKA,EAAKiV,oBAAY,eAAE4H,QAAS7c,EAAKA,EAAKiV,aAAa4H,OAAO,GAAK,OAC5E1H,KAAMuH,IAAiB,IAAU1lB,eAAiB,EAAI,IAAYgJ,EAAKkV,QAAQC,UAG/EnV,EAAKiV,cAAgB,IAAY6H,WAAa,CAChD1H,UAAW,CACTD,KAAMuH,IAAiB,IAAU1lB,eAAiB,EAAI,IAAYgJ,EAAKoV,UAAUD,SAGjFnV,EAAK6U,qBAAuB,CAC9BA,oBAAqB,IAAY7U,EAAK6U,uBAEpC7U,EAAK4U,eAAiB,CAAEA,cAAe,IAAY5U,EAAK4U,iBACxD5U,EAAK+U,gBAAkB,CAAEA,eAAgB,IAAY/U,EAAK+U,mBAYrDgI,EACXC,I,kBAR6Bhd,EAU7B,OAAO,OAAP,oDACKgd,GAAY,CACf/H,aAZ2BjV,EAYCgd,EAX1B,IAAMhd,EAAM,IAAY4c,SAAiB,IAAYA,QACrD,IAAM5c,EAAM,IAAY8c,WAAmB,IAAYA,UACvD,IAAM9c,EAAM,gBAAwB,IAAY2c,iBAC7C,IASL7H,kBAA+C,QAA7B,EAAAkI,EAAalI,wBAAgB,eAAEmI,aAAc,GAC/DjI,kBAA+C,QAA7B,EAAAgI,EAAahI,wBAAgB,eAAEiI,aAAc,GAC/DpI,qBAAqD,QAAhC,EAAAmI,EAAanI,2BAAmB,eAAEoI,aAAc,GACrErI,eAAyC,QAA1B,EAAAoI,EAAapI,qBAAa,eAAEqI,aAAc,GACzDlI,gBAA2C,QAA3B,EAAAiI,EAAajI,sBAAc,eAAEkI,aAAc,KACvDD,EAAa9H,SAAW,CAC1BA,QAAS,OAAF,wBACF8H,EAAa9H,SAAO,CACvBC,MAA+B,QAAzB,EAAA6H,EAAa9H,QAAQC,YAAI,eAAE8H,aAAc,GAC/CJ,OAAwC,SAAhCG,EAAa9H,QAAQ2H,YAAoBvmB,EAAY,CAAC,aAG9D0mB,EAAa5H,WAAa,CAC5BA,UAAW,CAAED,MAAiC,QAA3B,EAAA6H,EAAa5H,UAAUD,YAAI,eAAE8H,aAAc,OAKvDC,EAAsB,CACjCpvB,EACAqvB,EAAyB,K,wBAEzB,MAAMC,EAAuD,QAA1C,EAA8B,QAA9B,EAAwB,QAAxB,EAAc,QAAd,EAAAtvB,aAAQ,EAARA,EAAUnE,YAAI,eAAE4Z,gBAAQ,eAAE5Z,YAAI,eAAEyzB,kBAAU,QAAI,GAC3D5H,EACgE,QAApE,EAA4B,QAA5B,EAAA4H,aAAU,EAAVA,EAAaD,UAAe,eAAG,IAAsBE,uBAAe,QAAI,GACpE5H,EAC+D,QAAnE,EAA4B,QAA5B,EAAA2H,aAAU,EAAVA,EAAaD,UAAe,eAAG,IAAsBG,sBAAc,QAAI,GACnE5H,EAC8D,QAAlE,EAA4B,QAA5B,EAAA0H,aAAU,EAAVA,EAAaD,UAAe,eAAG,IAAsBI,qBAAa,QAAI,GAkCxE,MAhCqB,CACnB/H,eAAgB,CACdf,UAAU,EACVE,UAAU,EACVD,SAAU,IAAUc,GACpBxV,KAAO,IAAUwV,GAIb,IAA0BxV,KAH1B,OAAD,UACM+c,EAA8BvH,KAIzCC,cAAe,CACbhB,UAAU,EACVE,UAAU,EACVD,SAAU,IAAUe,GACpBzV,KAAO,IAAUyV,GAIb,IAA0BzV,KAH1B,OAAD,UACM+c,EAA8BtH,KAIzCC,aAAc,CACZjB,UAAU,EACVE,UAAU,EACVD,SAAU,IAAUgB,GACpB1V,KAAO,IAAU0V,GAIb,IAA0B1V,KAH1B,OAAD,UACM+c,EAA8BrH,OAQhC8H,EAAgB,CAAC9R,EAAoCgR,KAChE,MAAM,eAAElH,EAAc,cAAEC,EAAa,aAAEC,GAAiBhK,EACxD,OAAO,OAAP,sCACM8J,EAAed,QACf,CAAEc,eAAgBiH,EAAmBjH,EAAexV,KAAM0c,IAC1D,IACAjH,EAAcf,QACd,CAAEe,cAAegH,EAAmBhH,EAAczV,KAAM0c,IACxD,IACAA,IAAiB,IAAU1lB,iBAAkB0e,aAAY,EAAZA,EAAchB,SAC3D,CAAEgB,aAAc+G,EAAmB/G,EAAa1V,OAChD,M,kCCjIR,IAAYyd,EAMAC,EANZ,6EAAYD,GACV,kCACA,gCACA,8BAHF,CAAYA,MAAqB,KAMjC,SAAYC,GACV,oBACA,6BACA,wBAHF,CAAYA,MAAW,M,kCCRvB,kFAEO,MAAMC,EAA2B,6BAE3BC,EAA4B,CACvC,CAAC,IAAqBzS,KAAM,CAC1BuP,OAAQ,CACNnhB,IAAK,GACLskB,SAAU,KAGd,CAAC,IAAqBzyB,OAAQ,CAC5BsvB,OAAQ,CACNnhB,IAAK,KAGT,CAAC,IAAqB2hB,SAAU,CAC9BR,OAAQ,CACNhuB,KAAM,GACNoxB,SAAU,GACVC,IAAK,KAGT,CAAC,IAAqBC,SAAU,CAC9BtD,OAAQ,CACN1wB,KAAM,GACNuP,IAAK,GACL0kB,SAAU,GACVC,SAAU,GACVC,SAAU,IAEZtd,QAAS,CACPud,OAAQ,GACR7T,MAAO,O,yDCjCb,2JAWO,MAAM8T,EAAiBC,GACrB,IAASA,EAAUjR,GAAM,IAAcA,IAAM,IAASA,IAAY,KAANA,GAGxDkR,EAAyB,CACpC7D,EACAhuB,EACAf,EACA6yB,KAEA,MAAMC,EAAe,GAAG/xB,KAAQ,YAAe,KACzCgyB,EAAoC,CACxC7jB,WAAY,sBACZpP,KAAM,wBAAsBA,KAC5BC,SAAU,CACR1B,KAAMy0B,EACN9yB,aAEFhC,KAAM,OAAF,QACF+C,OACAguB,OAAQ,YAA2B2D,EAAc3D,KAC7C8D,GAAc,CAChB3d,QAAS,IAAM2d,EAAWxe,KAAM,CAAC1T,EAAOtC,KAC/B,CACL20B,UAAW30B,EACX40B,UAAW50B,EACXyW,WAAY+d,EAAW9yB,SAAS1B,WAO1C,OAAO,aAAU,wBAAuB00B,IAG7BG,EAAuB,CAClC7d,EACAtU,EACAf,KAEA,MACMmzB,EAAiB,CACrBjkB,WAAY,KACZpP,KAAM,SACNC,SAAU,CACR1B,KALiB,GAAG0C,YAAe,YAAe,KAMlDf,aAEF8mB,WAAY4L,EAAcrd,IAE5B,OAAO,aAAU,cAAa8d,K,kCC9DhC,0LAWA,MAEaC,EAAwB,CAAC7wB,EAAyBrE,IAC7D,GAAGqE,KAAmBrE,IAElBm1B,EAAkE,EACtEn1B,MACAqE,kBACAC,uBACA8wB,gBAEA,MAAMC,EAAkB,IAAQr1B,EAAIs1B,qBAAsB,KAC1D,OACE,gCACE,0BACE,uBAAK3zB,UAAU,2CACb,wBAAMA,UAAU,8CACd,gBAAC,IAAU,OAEb,uBAAKA,UAAU,4CACb,gBAAC,YAAS,CAACM,UAAWjC,EAAIwB,QAAS+zB,QAAQ,MAI/C,uBAAK5zB,UAAU,2CACb,wBAAMA,UAAU,wCAChB,uBAAKA,UAAU,uCACb,gBAAC,eAAY,CACXC,KA5B6C,iBA6B7CzB,KAAM+0B,EAAsB7wB,EAAiBrE,EAAIA,KACjD8B,UAAWwC,EACXvC,MAAO/B,EAAIA,IACXgC,OAAQozB,IAEV,uBAAKzzB,UAAU,gB,QAAqB0zB,EAAgB,IACpD,uBAAK1zB,UAAU,gBAAgB0zB,EAAgB,SASrDG,EAAqB,CACzBC,EACAC,EACAC,IAGED,IACA,IAAYC,EAAkBC,GAAwBA,EAAW51B,MAAQy1B,GAIhEI,EAA0D,EACrEzxB,kBACAC,kBACAC,2BAEA,MAAM,EAAE5C,GAAM,2BACd,IAAK,IAAO0C,EAAiB,SAC3B,OAAO,gBAAC,IAAQ,CAAC6M,MAAOvP,EAAE,mBAE5B,MAAMo0B,EAAuB,IAC3B,IAAM1xB,EAAiB,EAAGpE,MAAK+1B,WACtB,IAAMA,EAAO,EAAGv0B,UAAS8zB,2BAA2B,CACzDt1B,MACAwB,UACA8zB,4BAIAK,EAAkB,IAAUG,EAAW,CAAC,WAAY,CAAC,SACrDE,EAAW,IAAML,EAAiB,CAAC31B,EAAc+D,IAEnD,gBAACoxB,EAAuB,CACtBnxB,IAAKhE,EAAIs1B,qBACTt1B,IAAKA,EACLqE,gBAAiBA,EACjBC,qBAAsBA,EACtB8wB,UAAWI,EAAmBx1B,EAAIA,IAAK+D,EAAG4xB,MAKhD,OACE,gCACE,sBAAIh0B,UAAU,iCACXq0B,EACD,2BACE,wBAAMr0B,UAAU,8CACd,gBAAC,IAAU,Y,kCCrEvB,IAAYs0B,EASAC,EAXZ,sGAEA,SAAYD,GACV,oBACA,oBACA,wBACA,kBACA,oBALF,CAAYA,MAAsB,KASlC,SAAYC,GACV,oBACA,wBACA,oBAHF,CAAYA,MAAoB,KAMzB,MAAMC,EAAuE,CAElF,CAACD,EAAqBE,SAAU,4BAEhC,CAACF,EAAqBG,KAAM,oCAC5B,CAACH,EAAqBI,SAAU,8B,kCCrDlC,oHAEO,MAAMC,EAA6B,CAACC,EAAe90B,KACxD,OAAQ80B,GACN,KAAK,IAAsBhD,eACzB,MAAO,CACLiD,UAAW/0B,EAAE,8BACbg1B,aAAch1B,EACZ,yMAIN,KAAK,IAAsB+xB,cACzB,MAAO,CACLgD,UAAW/0B,EAAE,6BACbg1B,aAAch1B,EACZ,+HAIN,KAAK,IAAsBgyB,aACzB,MAAO,CACL+C,UAAW/0B,EAAE,4BACbg1B,aAAch1B,EACZ,8IAIN,QACE,SAIOi1B,EAAkD,CAC7D/L,UAAU,EACVC,SAAS,EACTC,UAAU,EACV3U,KAAM,CACJ8U,iBAAkB,IAClBG,YAAa,IAAY2H,QACzB1H,QAAS,CACP2H,YAAQvmB,EACRmC,KAAM,IACN0c,KAAM,OACNsL,YAAa,IAEfrL,UAAW,CACTD,KAAM,QAERE,KAAM,CAAEC,QAAS,CAAC,KAClBT,oBAAqB,IACrBD,cAAe,KACfG,eAAgB,IAChBC,iBAAkB,MAIT0L,EAA+B,CAC1ClL,eAAgBgL,EAChB/K,cAAe+K,EACf9K,aAAc8K,I,uaChDT,MAeDG,EACJ1S,GACqC,OAAD,6BACpC,MAAM,UAAEtiB,EAAS,UAAE+Q,GAAcuR,EAE3B2S,EAAoElkB,EAAU0G,OAClF,CAACjW,EAAKW,EAAU+yB,IACP/yB,EAASsuB,YAAc,IAA2B,OAAD,wBAAMjvB,GAAG,CAAE,CAAC0zB,GAAQ/yB,IAAaX,EAE3F,IAEI2zB,QAAyBC,QAAQ7sB,IACrCuT,OAAOwG,OAAO2S,GAAmBnjB,IAAK3P,GA3BZ,EAC5BkzB,EACAr1B,IAC+B,OAAD,6BAC9B,MACEqU,MAAM,OAAE0a,EAAM,QAAE7Z,EAAO,KAAEnU,IACvBs0B,EAEJ,OAAOngB,EACH,YAAqBA,EAASnU,EAAMf,GAAWsK,KAAMuoB,GAC5C,YAAuB9D,EAAQhuB,EAAMf,EAAW6yB,IAEzD,YAAuB9D,EAAQhuB,EAAMf,MAeYs1B,CAAenzB,EAAUnC,KAE9E,IAAKm1B,GAAgD,IAA5BA,EAAiB/uB,OAAc,OAAOkc,EAE/D,MAAMiT,EAAczZ,OAAOC,KAAKkZ,GAChC,OAAO,OAAP,wBACK3S,GAAM,CACTvR,UAAWA,EAAUe,IACnB,CAAC3P,EAAU+yB,KACT,GAAID,EAAkBC,GAAQ,CAC5B,MAAMM,EAAgBD,EAAYE,QAAQP,EAAM5D,YAChD,OAAO,OAAP,wBACKnvB,GAAQ,CACXsuB,UAAW0E,EAAiBK,GAAez1B,SAAS1B,OAGxD,OAAO8D,SAiBFuzB,EAAsB,CACjCpT,EACAxa,EACA1E,EACAkV,IAC6B,OAAD,6BAC5B,IAAIsY,EAAatO,EACjBsO,QAAmBoE,EAAiBpE,GACpCA,EAnBwB,CAACtO,IACzB,MAAM,WAAEuM,GAAevM,EAEvB,OAAKuM,GAAoC,IAAtBA,EAAWzoB,OAEvB,OAAP,wBACKkc,GAAM,CACTuM,WAAYA,EAAWpY,OAAQrC,GAAcA,EAAUrT,OAAS,IAAYsvB,eAJ3B/N,GAgBtCqT,CAAkB/E,GAE/B,MAAMgF,QAA6C,aACjD,mBACA,YAAuB9tB,EAAU8oB,EAAYxtB,EAAQkV,IAGvD,OAAO8c,QAAQS,QAAQD,O,yiBChEzB,MAAM3c,EAAc,CAAC5a,EAAc2B,IAC1B,oDAAoDA,KAAa3B,IAgB7Dy3B,EAAoB,CAC/B/G,EACA1wB,EACA2B,EACAoe,EACA2X,EACAC,EACAhoB,EACA9P,EACA+3B,KAEQlH,GAAU,IAAIjd,IAAKkC,IACzB,OAAQA,EAAM3V,MACZ,IAAK,WACH,OAAO,OAAP,wBAAY2V,GAAK,CAAEC,QAAS5V,IAC9B,IAAK,WACH,OAAO,OAAP,wBAAY2V,GAAK,CAAEC,QAASmK,IAC9B,IAAK,eACH,OAAO,OAAP,wBAAYpK,GAAK,CAAEC,QAAS8hB,GAAU,KACxC,IAAK,eACH,OAAO,OAAP,wBAAY/hB,GAAK,CAAEC,QAAS+hB,EAAOrV,QAAQ,MAAO,KAAO3M,EAAMC,UACjE,IAAK,aACH,OAAO,OAAP,wBAAYD,GAAK,CAAEC,QAASgF,EAAY5a,EAAM2B,KAChD,IAAK,aACH,OAAO,OAAP,wBAAYgU,GAAK,CAAEC,QAASjG,IAC9B,IAAK,UACH,OAAO,OAAP,wBAAYgG,GAAK,CAAEC,QAAS/V,GAAO8V,EAAMC,UAC3C,IAAK,aACH,OAAO,OAAP,wBAAYD,GAAK,CAAEC,QAASgiB,GAAYjiB,EAAMC,UAChD,QACE,OAAOD,KAcFkiB,EAAoBte,IAAmC,QAClE,MAA0D,YAAhC,QAA1B,EAAkB,QAAlB,EAAAA,aAAQ,EAARA,EAAU7X,gBAAQ,eAAEqD,cAAM,eAAG,OAElB+yB,EAA8B,CACzC93B,EACA2B,EACAoe,EACA2X,EACAC,EACAluB,EACAkG,EACA9P,EACA+3B,EACA7yB,EAAoC,KACjC,OAAD,6B,MACF,MAAMwU,EAAW,IAAY9P,EAAS8P,UA8BtC,OA5BAA,EAAS7X,SAAW,CAClB1B,KAAM,GAAGA,EACT2B,YACAoD,OAAQ,OAAF,oDACgB,QAAjB,EAAAwU,EAAS7X,gBAAQ,eAAEqD,QACnBA,GAAM,CACT,6BAA8B/E,EAC9B,yBAA0BA,KACrB63B,EAAiBte,IAAa,CACjC,CAAC,KAAiC1Z,KAKxC0Z,EAAS5Z,KAAK+wB,OACZnX,EAAS5Z,KAAK+wB,QACd+G,EACEle,EAAS5Z,KAAK+wB,OACd1wB,EACA2B,EACAoe,EACA2X,EACAC,EACAhoB,EACA9P,EACA+3B,GAGG,aAAU,gBAAere,EAAU,CAAEhX,GAAIZ,OAGrCo2B,EACXtuB,GAC6B,OAAD,6B,QAC5B,MAAMuuB,EACqD,UAA/B,QAA1B,EAAkB,QAAlB,EAAAvuB,aAAQ,EAARA,EAAU/H,gBAAQ,eAAEqD,cAAM,eAAG,yBACzBkzB,EAAqB,+BACtB,YAA2BxuB,IAAS,CACvC+mB,YAAa/mB,EAAS9J,KAAK6wB,YAAc,IAAI/c,IAAKsC,I,QAA+B,sCAC5EA,GAAS,CACZrT,KAAM,IAAYw1B,oBAClBliB,KAAMgiB,EACF,YAAoE,QAAlB,EAAAvuB,aAAQ,EAARA,EAAU/H,gBAAQ,eAAE1B,MACtE,YAAgD,QAAlB,EAAAyJ,aAAQ,EAARA,EAAU/H,gBAAQ,eAAE1B,UAExDm4B,YAAY,IAEd,OAAO,YAAoBF,EAAuBxuB,MAEvC2uB,EAA8B,CACzC3uB,EACA8P,EACAvZ,EACA2B,EACAoe,EACA2X,EACAC,EACAhoB,EACA9P,EACA+3B,EACA7yB,EAAoC,KACV,OAAD,6B,MACzB,IAAIszB,EAAkB,IAAY5uB,GAoClC,OAlCK8P,GA1FwC,EAC7CA,EACA9P,K,YAEA,OAAiB,QAAjB,EAAA8P,EAAS7X,gBAAQ,eAAEqD,OAAO,SACP,QAAjB,EAAA0E,EAAS/H,gBAAQ,eAAEqD,OAAO,QACX,QAAjB,EAAAwU,EAAS7X,gBAAQ,eAAEqD,OAAO,SACP,QAAjB,EAAA0E,EAAS/H,gBAAQ,eAAEqD,OAAO,OAyFtBuzB,CAAgC/e,EAAU9P,KAC5C4uB,EAAkB,IAAY9e,GAC9B8e,EAAgB32B,SAAW,CACzB62B,gBAAiB9uB,EAAS/H,SAAS62B,gBACnCv4B,KAAM,GAAGA,EACT2B,YACAoD,OAAQ,OAAF,oDACgB,QAAjB,EAAAwU,EAAS7X,gBAAQ,eAAEqD,QACnBA,GAAM,CACT,6BAA8B/E,EAC9B,yBAA0BA,KACrB63B,EAAiBte,IAAa,CAAE,CAAC,KAAiC1Z,MAK7Ew4B,EAAgB14B,KAAK+wB,OAAS+G,EAC5Ble,EAAS5Z,KAAK+wB,OACd1wB,EACA2B,EACAoe,EACA2X,EACAC,EACAhoB,EACA9P,EACA+3B,IA9BFS,EAAgB32B,SAASqD,OAAS,IAAO,OAAD,wBACjCszB,EAAgB32B,SAASqD,QAAWA,GACzC,8BA+BG,aAAU,gBAAeszB,EAAiB12B,EAAW3B,O,kCCxM9D,wLAaO,MAAMw4B,EAA0B,CACrCvU,EACAngB,EACAkR,KAEA,MACE0M,cAAc,eAAE8J,EAAc,cAAEC,EAAa,aAAEC,GAAc,cAC7DlB,EAAa,aACb9I,GACEuC,EACEwU,EAAkB,IAAY30B,GAC9BqvB,EAAiB,IAAYsF,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAY,CAChF,OACA5I,IA4BF,OA1BAiO,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAWD,GAAkB,OAAH,wBACxDne,GACA,YAAc0M,EAAc,YAAiB5d,KAG7C0nB,EAAed,UAClB+N,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAWD,GAAkB,IAC9DsF,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAWD,GAC9C,GAAG,IAAsBE,iBAIxB5H,EAAcf,UACjB+N,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAWD,GAAkB,IAC9DsF,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAWD,GAC9C,GAAG,IAAsBG,gBAIxB5H,EAAahB,UAChB+N,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAWD,GAAkB,IAC9DsF,EAAgB94B,KAAK4Z,SAAS5Z,KAAKyzB,WAAWD,GAC9C,GAAG,IAAsBI,eAItBkF,GAOIC,EAAqB,wBAAsC,CAAEC,UAAU,IAEvEC,EAAqB90B,IAChC,MAAMya,EAAQ,aAAS,aAAaza,IAQpC,OAPsB,aAAgB,CACpCiY,MAAOwC,EAAM3N,SACb9M,SAAUya,EAAMtN,OAChBjR,KAAM8D,EAASpC,SAAS1B,KACxB2B,UAAWmC,EAASpC,SAASC,UAC7Bk3B,KAAM,a,kCCrEV,geAkDYC,EAlDZ,wQAkDA,SAAYA,GACV,wBACA,sCACA,2BACA,8BAJF,CAAYA,MAAmB,KAOxB,MAAMC,EAAwBC,IACnC,OAAQA,GACN,KAAKF,EAAoBryB,IAEvB,MAAO,6BACT,KAAKqyB,EAAoBG,WAEvB,MAAO,oCACT,KAAKH,EAAoBI,UAEvB,MAAO,0BACT,KAAKJ,EAAoBK,UAEvB,MAAO,6BACT,QACE,OAAOH,IAIb,IAAYI,GAAZ,SAAYA,GACV,YACA,kBAFF,CAAYA,MAAe,KAK3B,MAEMC,EAAsBC,IAAwC,QAClE,OAAyB,QAAzB,EAAiB,QAAjB,EAAAA,aAAW,EAAXA,EAAa35B,YAAI,eAAEmpB,cAAM,eAAEpmB,MAEhB62B,EAAoBz1B,IAC/B,OAAQA,EAASrC,MACf,KAAK,wBAAsBA,KACzB,OAAO,IAAUqL,UACnB,KAAK,kBAAgBrL,KACnB,OAAO,IAAUsL,WACnB,KAAK,aAAajJ,KAAc,aAAkB,KAAgB,IAAarC,KAAO,GACpF,OAAO,IAAUuL,eACnB,QACE,OAAO,OAIAwsB,EAAc,CAACC,EAAuBC,KACjD,OAAQD,GACN,KAAK,oBAAkBE,OACrB,OAAOD,IAAcN,EAAgBQ,OACjCd,EAAoBK,UACpBL,EAAoBryB,IAC1B,KAAK,oBAAkBozB,OACrB,OAAOf,EAAoBG,WAC7B,QACE,OAAOH,EAAoBI,YAIpBY,EAAsB,CACjCL,EACAC,KAEA,OAAQD,GACN,KAAK,oBAAkBE,OACrB,OAAOD,IAAcN,EAAgBQ,OAAS,IAAsB,IACtE,KAAK,oBAAkBC,OACrB,OAAO,IACT,QACE,OAAO,MAIAE,EAAuB,CAClCzgB,EACA5W,EACAs3B,MAES,IAAO1gB,EAAW2gB,I,MACzB,OAAID,IAAiB,wBAAsBv4B,MAAiB,gBAATiB,EAC1Cu3B,EAAQv3B,OAASA,IAAiC,QAAzB,EAAAu3B,EAAQC,yBAAiB,eAAEC,WAEtDF,EAAQv3B,OAASA,IAgDf03B,EAAoBt2B,I,oBAC/B,MAAM,SAAEpC,EAAQ,KAAE/B,GAASmE,EACrBsvB,EAA6C,QAAhC,EAAoB,QAApB,EAAc,QAAd,EAAAzzB,aAAI,EAAJA,EAAM4Z,gBAAQ,eAAE5Z,YAAI,eAAEyzB,kBAAU,QAAI,GACjDjI,EAAiD,QAA1C,EAA2B,QAA3B,EAAsB,QAAtB,EAAe,QAAf,EAAAiI,aAAU,EAAVA,EAAa,UAAE,eAAEiH,aAAK,eAAG,UAAE,eAAE3qB,qBAAa,QAAI,GAO3D,MANkB,CAChB4qB,OAA8D,mBAAtC,QAAhB,EAAA54B,aAAQ,EAARA,EAAUqD,cAAM,eAAG,MAC3B2J,kBAAmB,IAAWyc,GAC9BoP,WAAY,IAAWpP,GACvBqP,mBAAoB,OAiBXC,EAAiB,CAC5BjZ,EACA1d,KAEA,MAAM42B,EAAY,IAAM52B,EAAU,kBAAmB,IAC/C62B,EAAiB,IAAMnZ,EAAO,kBAAmB,IAKvD,OAJ4B,IAAOmZ,EAAgB,CAhBjD,MACA,6BACA,2BACA,4BACA,mCACA,qCACA,uCAYGld,OAAOC,KAAKgd,MAKNE,EAAe,CAACpZ,EAAwB1d,K,YACnD,IAAI+2B,EAAY,CACdC,SAAU,IAAUtZ,GACpB8Y,QAAS,IAAU9Y,GACnB+Y,WAAY,IAAM/Y,EAAO,uBAAwB,IACjD9S,kBAAmB,IAAoD,QAAzC,EAA6B,QAA7B,EAAiB,QAAjB,EAAW,QAAX,EAAA8S,aAAK,EAALA,EAAO7hB,YAAI,eAAEwrB,YAAI,eAAEoP,kBAAU,eAAEj7B,MAAM,YAAI,eAAG,KAAO,GACjFk7B,mBAAoB,KACpB/rB,KAAM,IAAM+S,EAAO,YAAa,IAChChT,SAAU,IAAMgT,EAAO,YAAa,IACpCnT,OAAQ,IAAMmT,EAAO,wBACrBlT,IAAK,CACHC,YAAa,IAAMiT,EAAO,uBAAwB,MAClDuZ,8BAA+B,IAAMvZ,EAAO,yCAA0C,MACtFwZ,cAAe,IAAMxZ,EAAO,yBAA0B,IACtDyZ,YAAa,IAAMzZ,EAAO,uBAAwB,IAClD0Z,yBAA0B,IAAM1Z,EAAO,oCAAqC,IAC5E3d,IAAK,IAAM2d,EAAO,eAAgB,KAEpCzc,OAAQ01B,EAAejZ,EAAO1d,IAQhC,OANIy1B,EAAiBz1B,KAAc,IAAUkJ,iBAC3C6tB,EAAY,OAAH,wBACJA,GACAT,EAAiBt2B,KAGjB+2B,GAoBIM,EAAe,CAC1B7B,EACA8B,EACA3xB,EACA4xB,KAEA,MAAMhrB,EAvBe,EACrBipB,EACA8B,EACA3xB,IAEI6vB,EACK,IAAagC,OAElBF,EACK,IAAaG,iBAElB9xB,EACK,IAAa8G,UAEf,IAAairB,SASAC,CAAenC,EAAa8B,EAAiB3xB,GACjE,IAAIiyB,EACAC,EACAC,EAEJ,GAAIvrB,IAAgB,IAAairB,OAC/BI,EAAoB,IAAMpC,EAAa,qBAAsB,SACxD,GAAIjpB,IAAgB,IAAakrB,iBAEtC,OADAI,EAAqC,IAAMP,EAAiB,qBAAsB,IAC1EO,GACN,KAAK,IAAqB1F,QACxByF,EAAoB,oBAAkB7B,OACtC,MACF,KAAK,IAAqB3D,IACxBwF,EAAoB,oBAAkB/B,OACtC,MACF,QACE+B,EAAoB,GAI1B,GAAIrrB,IAAgB,IAAairB,OAC/B,OAAQI,GACN,KAAK,oBAAkB/B,OACrBiC,EAAoB,IAAMtC,EAAa,gCACvC,MACF,KAAK,oBAAkBO,OACrB+B,EAAoB,IAAMtC,EAAa,gCACvC,MACF,QACEsC,EAAoB,CAAEC,IAAK,SAEtBxrB,IAAgB,IAAakrB,mBACtCK,EAAoB,IAAMR,EAAiB,SAG7C,MAAM9hB,EAAW,IAAMggB,EAAa,iBAgBpC,MAd6B,CAC3BuC,KAAKD,aAAiB,EAAjBA,EAAmBC,MAAO,GAC/BviB,SAAU,CACRgH,QAASyZ,EAAqBzgB,EAAU,IAAiB+hB,IACzDj6B,MAAO24B,EAAqBzgB,EAAU,eACtCwiB,OAAQ/B,EAAqBzgB,EAAU,iBAEzCjK,SACEqsB,IACC,YAAiBjyB,GAAY,oBAAkBowB,OAAS,oBAAkBF,QAC7E7Q,OAAQ,CAAEpmB,KAAM22B,EAAmBC,IACnCyC,OAAQ1rB,EACR2rB,qBAAsBL,IAKbM,EAAqBn4B,IAChC,IAAIo4B,EAAiC,CACnChvB,QAAS,CACPC,QAAS,GACTC,QAAS,GACTI,kBAAmB,GACnBC,iBAAkB,GAClBE,UAAW,CACTC,gBAAiB,GACjBC,oBAAqB,IACrByY,2BAA4B,KAE9B5Y,uBAAwB,IAE1BM,cAAe,IAEjB,GAAIurB,EAAiBz1B,KAAc,IAAUkJ,eAAgB,CAC3D,MACErN,MACE4Z,UAAU,SAAE7X,EAAQ,KAAE/B,KAEtBmE,EACEmW,EAAcvY,aAAQ,EAARA,EAAUuY,YACxBkiB,GAA4BliB,aAAW,EAAXA,EAAc,OAAuC,IACjF,gBAAErM,EAAe,oBAAEC,EAAmB,2BAAEyY,GAA+B,YAC3E6V,GAEFD,EAAiB,CACfhvB,QAAS,CACPC,SAAS8M,aAAW,EAAXA,EAAc,OAAgC,GACvD7M,SAAS6M,aAAW,EAAXA,EAAc,OAAgC,GACvDzM,mBAAmByM,aAAW,EAAXA,EAAc,OAAyC,GAC1ExM,kBAAkB9N,aAAI,EAAJA,EAAMy8B,uBAAwB,GAChDzuB,UAAW,CACTC,kBACAC,sBACAyY,8BAEF5Y,wBAAwBuM,aAAW,EAAXA,EAAc,OAA8C,IAEtFjM,cAAe,IAGnB,OAAOkuB,GAGIG,EAAqBv4B,I,gCAChC,MAAMw4B,EAAiC,CACrCT,IAAK,GACL1vB,SAAU,EACVmN,SAAU,CAAElY,OAAO,EAAM06B,QAAQ,IAE7B9mB,EAAqD,QAAzC,EAA6B,QAA7B,EAAuB,QAAvB,EAAa,QAAb,EAAAlR,EAASnE,YAAI,eAAE4Z,gBAAQ,eAAE5Z,YAAI,eAAEyzB,kBAAU,eAAEnrB,KAAMC,IAAK,MACtE,OAACpE,EAASpC,SAAS1B,KAA8B,QAAxB,EAAA8D,EAASpC,SAASqD,cAAM,eAAG,2BAA2BwD,SAASL,EAAElI,QAEtF67B,EAAoB,QAAd,EAAA7mB,aAAS,EAATA,EAAW6mB,WAAG,QAAI,GAC9B,OAAQtC,EAAiBz1B,IACvB,KAAK,IAAUkJ,eACb,OAAO,OAAP,wBACKsvB,GAAc,CACjBT,MACAviB,SAAU,CACRlY,OAAO4T,aAAS,EAATA,EAAWunB,mBAAoB,IAAgBC,UAG5D,KAAK,IAAU1vB,UAAW,CACxB,MAAMwM,EAAwB,QAAb,EAAAxV,EAASnE,YAAI,eAAE2Z,SAChC,MAAO,CACLuiB,MACAviB,SAAU,CACRlY,MAAO24B,EAAqBzgB,EAAU,cAAexV,EAASrC,MAC9Dq6B,OAAQ/B,EAAqBzgB,EAAU,iBAEzCnN,SAAiC,QAAvB,EAAa,QAAb,EAAArI,EAASnE,YAAI,eAAEwM,gBAAQ,QAAI,GAGzC,KAAK,IAAUY,WAAY,CACzB,MAAM0vB,EAEL,QAFoB,EAAAC,KAAKC,MACuC,QAA/D,EAA8B,QAA9B,EAAiB,QAAjB,EAAA74B,EAASpC,gBAAQ,eAAEuY,mBAAW,eAAG,sCAA8B,QAAI,aACpE,eAAG,GACJ,MAAO,CACL4hB,MACAviB,SAAU,CACRlY,MAAgC,WAAzBq7B,aAAY,EAAZA,EAAcG,SAEvBzwB,SAAiC,QAAvB,EAAa,QAAb,EAAArI,EAASnE,YAAI,eAAEwM,gBAAQ,QAAI,GAGzC,QACE,OAAOmwB,IAIAO,EAAiB/4B,IAC5B,MAAM42B,EAAY,IAAM52B,EAAU,kBAAmB,IAErD,OADmB,IAAO42B,EAlOnB,CACL,MACA,6BACA,2BACA,4BACA,mCACA,qCACA,uCA+QSoC,EAAwBC,I,QACnC,MAAMC,EAAgD,QAAjC,EAAyB,QAAzB,EAAAD,aAAe,EAAfA,EAAiBr7B,gBAAQ,eAAEqD,cAAM,eAAG,4BAEzD,MAAO,CACLk4B,YAFkBD,GAAgB,YAAQA,GAAgBA,EAAe,OAMhEE,EAAmC,CAC9C5D,EACA8B,EACA3xB,K,kCAEA,GAAI,IAAU6vB,IAAgB,IAAU8B,IAAoB,IAAU3xB,GACpE,MAAO,GAGT,MAAM0zB,EAAe,IAA+D,QAAvD,EAAiD,QAAjD,EAA2C,QAA3C,EAA2B,QAA3B,EAAiB,QAAjB,EAAA7D,aAAW,EAAXA,EAAa35B,YAAI,eAAE0P,gBAAQ,eAAE+tB,sBAAc,eAAEl8B,YAAI,eAAElB,YAAI,QAAI,GAAI,KACtFmhB,EAAO,IAAUmY,GAElB,IAAU8B,GAtVc,CAAC3xB,I,kBAC9B,MAAMinB,EAAuB,QAAd,EAAAjnB,aAAQ,EAARA,EAAU9J,YAAI,eAAE+wB,OACzBnhB,EAAmE,QAA5D,EAAmD,QAAnD,EAAAmhB,aAAM,EAANA,EAAQzoB,KAAM0N,GAA0B,cAAhBA,aAAK,EAALA,EAAO3V,cAAoB,eAAE4V,eAAO,QAAI,GAG7E,MAAO,CACLrG,MACAiK,IAJ0E,QAAhE,EAAuD,QAAvD,EAAAkX,aAAM,EAANA,EAAQzoB,KAAM0N,GAA0B,kBAAhBA,aAAK,EAALA,EAAO3V,cAAwB,eAAE4V,eAAO,QAAI,GAK9Eme,IAJ0E,QAAhE,EAAuD,QAAvD,EAAArD,aAAM,EAANA,EAAQzoB,KAAM0N,GAA0B,kBAAhBA,aAAK,EAALA,EAAO3V,cAAwB,eAAE4V,eAAO,QAAI,IAK9ElT,KAAM,YAAc6M,GACpBC,aAAa,EACbwH,OAAQ,GACRqmB,iBAAiB,IA4UfC,CAAuB7zB,GAxUS,CAAC2xB,I,YACrC,MAAM7rB,EAA6C,QAAvC,EAAkC,QAAlC,EAA6B,QAA7B,EAAqB,QAArB,EAAA6rB,aAAe,EAAfA,EAAiBz7B,YAAI,eAAEmpB,cAAM,eAAE3H,WAAG,eAAE5R,WAAG,QAAI,GAUvD,MATgB,CACdA,MACA7M,KAAM,YAAc6M,GACpBiK,IAAK,IAAM4hB,EAAiB,2BAA4B,IACxDrH,IAAK,IAAMqH,EAAiB,yBAA0B,IACtD5rB,aAAa,EACbwH,OAAQ,IAAMokB,EAAiB,8BAA+B,IAC9DiC,iBAAiB,IA8TfE,CAA8BnC,GArWK,CAAC9B,I,YACxC,MAAM/pB,EAAyC,QAAnC,EAA8B,QAA9B,EAAyB,QAAzB,EAAiB,QAAjB,EAAA+pB,aAAW,EAAXA,EAAa35B,YAAI,eAAEmpB,cAAM,eAAE3H,WAAG,eAAEqc,WAAG,QAAI,GAUnD,MATgB,CACdjuB,MACA7M,KAAM,YAAc6M,GACpBiK,IAAK,IAAM8f,EAAa,sBAAuB,IAC/CvF,IAAK,IAAMuF,EAAa,yBAA0B,IAClD9pB,aAAa,EACbwH,OAAQ,IAAMsiB,EAAa,gCAAiC,IAC5D+D,iBAAiB,IA0VfI,CAA0BnE,GAuB9B,MAnBsB,CACpBnY,MACAC,OAAQ,CACNzR,gBAC6C,QAA3C,EAA2B,QAA3B,EAAiB,QAAjB,EAAA2pB,aAAW,EAAXA,EAAa35B,YAAI,eAAE0P,gBAAQ,eAAEquB,sBAAc,eAAE/tB,kBACwB,QAArE,EAAsB,QAAtB,EAAc,QAAd,EAAAlG,aAAQ,EAARA,EAAU9J,YAAI,eAAE+wB,cAAM,eAAEzoB,KAAM0N,GAA0B,gBAAhBA,aAAK,EAALA,EAAO3V,cAAsB,eAAE4V,UACvE,cAEJxU,MAAO,CACL6I,UAAoC,QAA1B,EAAkB,QAAlB,EAAAR,aAAQ,EAARA,EAAU/H,gBAAQ,eAAEqD,cAAM,eAAG,OAA2Bo4B,EAAa,IAAM,GACrFQ,YAAa,GACb99B,KAA+B,QAA1B,EAAkB,QAAlB,EAAA4J,aAAQ,EAARA,EAAU/H,gBAAQ,eAAEqD,cAAM,eAAG,OAAmCo4B,EAAa,IAAM,GACxFS,OAAQ,GACRvD,MAAO,GACPwD,gBAAgB,EAChBC,mBAAmB,GAErBn4B,MAAOw1B,EAAa7B,EAAa8B,EAAiB3xB,EAAU0X,EAAIze,QAKvDq7B,EAA2B,CACtCC,WAAY,GACZC,SAAU,WACVC,uBAAuB,EACvB1+B,YAAa,CACX4B,MAAO,GACPvB,IAAK,GACL8B,UAAW,IAEbw8B,IAAK,CACHn+B,KAAM,GACNoB,MAAO,GACPvB,IAAK,GACLqD,OAAQ,CAAExB,SAAU,GAAIwB,OAAQ,IAChCm3B,MAAO,IAETj5B,MAAO,CACLpB,KAAM,GACNoB,MAAO,GACPvB,IAAK,GACLqD,OAAQ,CAAExB,SAAU,GAAIwB,OAAQ,IAChCm3B,MAAO,IAET10B,MAAO,CACLk2B,IAAK,GACLviB,SAAU,GACVjK,SAAU,IAEZ+uB,qBAAqB,GA8CVC,EAA0BC,IACrC,MAAMt+B,EAAO,IAAMs+B,EAAa,yCAA0C,MAC1E,OAAI,IAAUA,KAAiBt+B,EACtB+9B,EAEF,OAAP,wBACKA,GAAwB,CAC3BC,WAAYh+B,EACZi+B,SAAU,IAAarO,SACvBpwB,YAAa,OAAF,UACNu+B,EAAyBv+B,gBAsBrB++B,EAAmB,CAC9BC,EACAC,EACA98B,K,cAEA,MAAM+8B,EAAkD,QAA5B,EAAAF,EAAazB,uBAAe,eAAE/mB,KACpD6kB,EAA8B,QAAlB,EAAA2D,EAAahd,aAAK,eAAExL,KAChC2oB,EAA0C,QAAxB,EAAAH,EAAalF,mBAAW,eAAEtjB,KAC5C4oB,EAAkD,QAA5B,EAAAJ,EAAapD,uBAAe,eAAEplB,KACpD6oB,EAAoC,QAArB,EAAAL,EAAa/0B,gBAAQ,eAAEuM,KAEtC8oB,EAlN8B,EACpC/B,EACAvb,EACAqd,EACA7+B,EACA2B,KAEA,MAAMo9B,EAAe,IAAMhC,EAAiB,gDAsC5C,MArC4B,CAC1BiC,SAAU,OACVh/B,OACAkhB,YAAa,CACXlhB,KAAM++B,GAAgB,GACtBlzB,YAAakzB,GAAgB,KAE/B9d,QAAS,CACPjhB,KAAM2B,GAER6f,MAAOoZ,EAAapZ,EAAOub,GAC3BrqB,UAAW6mB,EAAiBwD,GAC5Bxb,WAAY0a,EAAkBc,GAC9BtzB,SAAU,CACRihB,SAAU,IAAUmU,GACpBn8B,KAAM,IAAau8B,UAErBtd,IAAK,CACHud,aAAa,EACbpX,WAAY,OAAF,UACL,MAGPxG,WAAY+a,EAAkBU,GAC9Bh4B,OAAQ83B,EAAcE,GACtBtb,OAAQ,aAA0Bsb,GAClCrb,aAAc,YAAoBqb,GAClCoC,OAAQ,CACNC,wBAAwB,EACxBC,iBAAkB,CAChBr/B,KAAM,GACN0C,KAAM,IAAewzB,IACrBoJ,SAAU,EACVC,cAAe,OAyKAC,CACnBd,EACA7D,EACAgE,EACAJ,EACA98B,GAEI89B,EAAkBvC,EACtByB,EACAC,EACAC,GAEF,IAAIa,EAAmB,GACnBC,EAAa,GACbC,EAAsB,GACtBC,EAAsB,GAqB1B,OApBI,IAAUJ,IACZE,EAAa7C,EAAqB4B,GAClCkB,EAxGyC,CAACpB,I,gBAC5C,MAAMsB,EAA2C,QAAzB,EAAAtB,aAAY,EAAZA,EAAch/B,mBAAW,eAAEwW,KACnD,GAAI,IAAU8pB,GACZ,MAAO,GAET,MAAMtgC,EAAc,IAAUsgC,EAAiB,CAAC,4BAA6B,CAAC,SACxEC,EAA8C,QAA5B,EAAsB,QAAtB,EAAgB,QAAhB,EAAAvgC,aAAW,EAAXA,EAAc,UAAE,eAAEG,YAAI,eAAEC,YAAI,eAAG,GACjDI,EAA4B,QAArB,EAAA+/B,aAAe,EAAfA,EAAiB7+B,YAAI,eAAElB,KAC9BggC,GAAuD,QAA7B,EAAAD,aAAe,EAAfA,EAAiBE,oBAAY,eAAE9L,YAAY,EAC3E,OAAO,OAAP,wBACK4J,GAAwB,CAC3BC,WAAYh+B,EACZi+B,SAAU,WACVC,sBAAuB8B,EACvBxgC,YAAa,OAAF,UACNu+B,EAAyBv+B,gBAyFR0gC,CAA8B1B,GACpDqB,EAAsB,IAAUD,GArFS,CAAC7C,IAC5C,MAAM54B,EAAuB,IAC3B44B,EACA,wDACA,IAEI74B,EAAkB,IAAM64B,EAAiB,8CAA+C,IACxFoD,EAAiB,IACrBpD,EACA,sDACA,IAEF,OAAO,OAAP,wBACKgB,GAAwB,CAC3BE,SAAU,IAAapO,SACvBrwB,YAAa,CACX4B,MAAO8C,EACPrE,IAAKsgC,EACLx+B,UAAWwC,MAoETi8B,CAA8B1B,GAC9B,IAEF,IAAUkB,IACT,IAAMC,EAAqB,oBAC3B,IAAMA,EAAqB,uBAExBnB,aAAmB,EAAnBA,EAAqBj9B,QAAS,IAAaA,OAC7Co+B,EAAsB,GACtBD,EAAsBvB,EAAuBK,KAGxBrF,EAAmBsF,KA5kBYvF,EAAgBQ,SA6kBxE8F,EA7D+B,EAAC57B,EAA2Bw1B,K,0BAC7D,MAAM7E,EAAe3wB,EAASpC,SAAS1B,KACjCqgC,EAAyD,QAA9C,EAAiC,QAAjC,EAAoB,QAApB,EAAA/G,EAAY53B,gBAAQ,eAAEuY,mBAAW,eAAEqmB,mBAAW,QAAI,GAC7DC,EAGqD,QAFzD,EAEkD,QAFlD,EAEO,QAFP,EACwD,QADxD,EAAyC,QAAzC,EAA6B,QAA7B,EAAuB,QAAvB,EAAa,QAAb,EAAAz8B,EAASnE,YAAI,eAAE4Z,gBAAQ,eAAE5Z,YAAI,eAAEyzB,kBAAU,eACrCnrB,KAAM+M,GAAcA,EAAUhV,OAASy0B,UAAa,eACpDoH,WAAG,eAAE5zB,KAAMu4B,GAAuB,cAAdA,EAAKxgC,aAAqB,eAAEsC,aAAK,QAAI,GAC/D,OAAO,OAAP,QACEm+B,WAAY,CACVzgC,KAAMqgC,EACN/9B,MAAO,GACPi+B,aAECzD,EAAqBh5B,KAgDL48B,CAAoBhC,EAAqBC,IAGvD,OAAP,gFACKG,GACAa,GACAD,GACAD,GACAG,GACAC,K,kCCvqBP,uHAgBO,MAAMc,EAAgB,YAEhBC,EAA8Br/B,GACzC,WAAakK,MAAM,CACjBzL,KAAM,WAEH0L,QAAQi1B,EAAe,CACtBn9B,QAASjC,EAAE,oCAEZuK,IAAI,IAAKvK,EAAE,qDACXoK,SAASpK,EAAE,wBACdg/B,SAAU,aAGDvf,EAAoBzf,GAC/B,WAAakK,MAAM,CACjBzL,KAAM,aAAqBuB,GAC3Bk/B,WAAYG,EAA2Br/B,GACvC0f,QAAS,IACTC,YAAa,IACb9f,MAAO,YAAsBG,GAC7B+f,WAAY,YAA2B/f,GACvCggB,WAAY,YAA2BhgB,GACvCigB,MAAO,YAAsBjgB,GAC7BkgB,OAAQ,YAAuBlgB,GAC/BoE,MAAO,IACP+M,UAAW,IACXgP,aAAc,YAAmCngB,KAGxCs/B,EAAc7gC,IACzB,GAAK2gC,EAAcp0B,KAAKvM,GAGxB,OAAO,IAAYA,EAAKV,MAAM,KAAKwhC,W,kCClDrC,2EAcO,MAAMC,EAA0Bx/B,GACrC,WAAakK,MAAM,CACjBwV,QAAS,IACTC,YAAa,IACblhB,KAAM,aAAqBuB,GAC3B48B,IAAK,YAAoB58B,GACzBggB,WAAY,YAA2BhgB,GACvC+f,WAAY,YAA2B/f,GACvCigB,MAAO,YAAsBjgB,GAC7BkgB,OAAQ,YAAuBlgB,GAC/BmR,UAAW,IACXgP,aAAc,YAAmCngB,M,kCC1BrD,mDAuBe,IAZmC,EAAGK,QAAO8wB,kBAC1D,gBAAC,IAAW,CAAC9wB,MAAOA,GAClB,gBAAC,IAAgB,CAACo/B,UAAW,IAAsB3N,iBAEnD,gBAAC,IAAgB,CAAC2N,UAAW,IAAsB1N,gBAElDZ,IAAiB,IAAU1lB,gBAC1B,gBAAC,IAAgB,CAACg0B,UAAW,IAAsBzN,iB,kCClBzD,0GAsIe,IArH2C,EAAGyN,gB,MAC3D,MAAM,EAAEz/B,GAAM,4BAEZ0iB,QAAQ,aAAEvC,GAAc,cACxBuf,GACE,eACE,SAAEtI,GAAa,aAAiB,MAC/BuI,EAAoBC,GAAyB,aAC9CC,EAAY,KAChBH,EAAc,gBAAgBD,cAAsB,GACpDG,EAAsBzf,aAAY,EAAZA,EAAesf,GAAWhrB,OAG5CqrB,EAAoB,K,MACxBJ,EAAc,gBAAgBD,EAAa,MACd,QAAzB,EAAAtf,aAAY,EAAZA,EAAesf,UAAU,eAAErW,UAC7BsW,EAAc,gBAAgBD,cAAsB,GAEpDC,EAAc,gBAAgBD,cAAsB,IAIlDM,EAAc,K,OACY,QAAzB,EAAA5f,aAAY,EAAZA,EAAesf,UAAU,eAAEtW,UAG9BuW,EAAc,gBAAgBD,cAAsB,GACpDC,EAAc,gBAAgBD,SAAkBE,IAHhDD,EAAc,gBAAgBD,EAAa,KAK7CC,EAAc,gBAAgBD,cAAsB,IAGhDO,EAAe,KACnBN,EAAc,gBAAgBD,cAAsB,GACpDC,EAAc,gBAAgBD,aAAqB,GACnDC,EAAc,gBAAgBD,cAAsB,IAGhDQ,EAAiB,KACrBP,EAAc,gBAAgBD,cAAsB,IAuDtD,OACE,gCACE,uBAAKx/B,UAAU,gEACZ,YAA2Bw/B,EAAWz/B,GAAG+0B,WAChB,QAAzB,EAAA5U,aAAY,EAAZA,EAAesf,UAAU,eAAEtW,UAC1B,gBAAC,IAAM,CACLlpB,UAAU,wBACVmB,QAAS,IAAc8+B,KACvBC,QAASN,G,KAGR,GAAc7/B,EAAXo3B,EAAa,kBAAuB,sBAAsBp3B,EAAE,wBAItE,uBAAKC,UAAU,6BACZ,YAA2Bw/B,EAAWz/B,GAAGg1B,cAE5C,uBAAK/0B,UAAU,6CAtEC,M,QAClB,OAA6B,QAAzB,EAAAkgB,aAAY,EAAZA,EAAesf,UAAU,eAAEvW,UACtB,gBAAC,IAAS,CAACkX,SAAUJ,EAAcK,QAASN,EAAaN,UAAWA,KAEhD,QAAzB,EAAAtf,aAAY,EAAZA,EAAesf,UAAU,eAAEtW,SAE3B,gCACE,gBAAC,IAAM,CACLlpB,UAAU,uCACVmB,QAAS,IAAck/B,MACvBC,UAAQ,EACRJ,QAASN,GAET,wBAAM5/B,UAAU,sCACd,gBAAC,IAAoB,MAAI,IACxBD,EAAE,6CAA8C,CAC/CwgC,sBAAuB,YAA2Bf,EAAWz/B,GAAG+0B,eAIpEqC,GACA,gBAAC,IAAO,CAACqJ,QAASzgC,EAAE,qBAAsB0gC,SAAS,SACjD,gBAAC,IAAM,CACLzgC,UAAU,yBACVmB,QAAS,IAAck/B,MACvBH,QAASL,GAET,gBAAC,IAAe,SAOrB1I,EACLp3B,EAAE,uCAAwC,CACxC2gC,mBAAoB,YAA2BlB,EAAWz/B,GAAG+0B,YAG/D,gBAAC,IAAM,CACL90B,UAAU,wBACVmB,QAAS,IAAc8+B,KACvBC,QAASF,EACTW,KAAM,gBAAC,IAAc,OAEpB5gC,EAAE,yCAA0C,CAC3C6gC,oBAAqB,YAA2BpB,EAAWz/B,GAAG+0B,cAwBN+L,O,kCCjIlE,6GAwHe,IArF6B,EAAGV,WAAUC,UAASZ,gB,UAChE,MAAM,EAAEz/B,GAAM,4BAEZ0iB,QAAQ,aAAEvC,GAAc,OACxB4gB,GACE,eACE,SAAE3J,GAAa,aAAiB,KAChC4J,EAAqB,CACzBrX,QAAS3pB,EAAE,uBACX+pB,QAAS/pB,EAAE,gCACX6pB,UAAW7pB,EAAE,0BAEf,OACE,uBAAKC,UAAU,8BACb,gBAAC,IAAW,KACV,gBAAC,IAAa,CACZxB,KAAM,gBAAgBghC,qBACtBlwB,MAAOvP,EAAE,mBACTq0B,MAAO2M,EACP3gC,MAAO,IAAYgxB,QACnB4P,SAAU7J,EACV7tB,WAAS,IAxCQ,EAACxI,EAAe0+B,KACzC,OAAQ1+B,GACN,KAAK,IAAYswB,QACf,OAAO,gBAAC,IAAmB,CAACoO,UAAWA,IACzC,KAAK,IAAYrO,iBACf,OAAO,gBAAC,IAAsB,CAACqO,UAAWA,IAC5C,KAAK,IAAYlO,UACf,OAAO,gBAAC,IAAkB,CAACkO,UAAWA,IACxC,QACE,OAAO,OAiCJyB,CAAkD,QAA/B,EAAyB,QAAzB,EAAA/gB,aAAY,EAAZA,EAAesf,UAAU,eAAEhrB,YAAI,eAAEiV,YAAa+V,GAClE,gBAAC,KAAU,CACTt+B,KAAM,IAAeD,KACrBzC,KAAM,gBAAgBghC,0BACtBlwB,MAAOvP,EAAE,gCACT4J,MAAO,CAAEu3B,SAAU,QACnBC,SAAUphC,EACR,yFAEFqhC,WAAYjK,IAEd,gBAAC,KAAU,CACTj2B,KAAM,IAAeD,KACrBzC,KAAM,gBAAgBghC,0BACtBlwB,MAAOvP,EAAE,gCACT4J,MAAO,CAAEu3B,SAAU,QACnBC,SAAUphC,EACR,4GAEFqhC,WAAYjK,IAEd,gBAAC,KAAe,CACdj2B,KAAM,IAAeD,KACrBzC,KAAM,gBAAgBghC,6BACtBlwB,MAAOvP,EAAE,4BACTohC,SAAUphC,EACR,sFAEFshC,WAAY,gBAAC,IAAc,KAAEthC,EAAE,uBAC/B4J,MAAO,CAAEu3B,SAAU,QACnBE,WAAYjK,IAEd,gBAAC,KAAe,CACdj2B,KAAM,IAAeD,KACrBzC,KAAM,gBAAgBghC,uBACtBlwB,MAAOvP,EAAE,qBACTohC,SAAUphC,EAAE,8CACZshC,WAAY,gBAAC,IAAc,KAAEthC,EAAE,uBAC/B4J,MAAO,CAAEu3B,SAAU,QACnBE,WAAYjK,IAEd,gBAAC,KAAe,CACdj2B,KAAM,IAAeD,KACrBzC,KAAM,gBAAgBghC,wBACtBlwB,MAAOvP,EAAE,sBACTohC,SAAUphC,EACR,iHAEFshC,WAAY,gBAAC,IAAc,KAAEthC,EAAE,uBAC/B4J,MAAO,CAAEu3B,SAAU,QACnBE,WAAYjK,KAGhB,gBAAC,IAAoB,CACnBgJ,SAAWhJ,OAAsBrsB,EAAXq1B,EACtBC,QAASA,EACTgB,YAAa,IAA8B,QAApB,EAAAN,aAAM,EAANA,EAAQ5gB,oBAAY,eAAGsf,S,kCClHtD,2NAeO,MAAM8B,EAAkB,CAC7BnO,EACAjC,EACAiG,EACAp3B,IAEImxB,IAAiB,IAAU1lB,eAE3B,gBAAC,KAAU,CACTtK,KAAM,IAAeD,KACrBzC,KAAK,eACL8Q,MAAOvP,EAAE,mBACTwhC,YAAY,IACZH,YAAU,IAKd,gBAAC,KAAU,CACTlgC,KAAM,IAAeD,KACrBzC,KAAM20B,EACN7jB,MAAOvP,EAAE,mBACTqhC,WAAYjK,EACZhtB,UAAQ,IAKDq3B,EAAsD,EAAGhC,gB,UACpE,MAAM,EAAEz/B,GAAM,4BAEZ0iB,QAAQ,aAAEvC,EAAY,UAAEhP,GAAW,cACnCuuB,GACE,eACE,SAAEtI,GAAa,aAAiB,KAChClC,EAAsD,QAAxC,EAA+B,QAA/B,EAAyB,QAAzB,EAAA/U,aAAY,EAAZA,EAAesf,UAAU,eAAEhrB,YAAI,eAAEkV,eAAO,eAAEuL,YACxDwM,EAAyB,IAAUxM,GAErC,CAAC,CAAC,GAAI,KADNA,EAAYhjB,IAAKyS,GAAQ,IAASA,KAE/Bgd,EAAWC,GAAgB,WAAeF,GAC3CG,EAAgB,gBAAgBpC,sBAEhCqC,EAAuB,cAC3B,EAAGC,qBACD,MAAMC,EAAwB,IAC5BD,EAAe7vB,IAAI,EAAEzT,EAAMsC,KACrB,IAAWA,GACN,CAAEtC,OAAMwjC,UAAWlhC,GAExBA,EAAMyF,OACD,CAAE/H,OAAMsC,SAEV,OAGX6gC,EAAaG,GACbrC,EAAc,gBAAgBD,6BAAsCuC,IAEtE,CAACtC,EAAeD,IAElB,OACE,gCACE,gBAAC,IAAa,CACZhhC,KAAM,gBAAgBghC,wBACtBlwB,MAAOvP,EAAE,wBACTe,MAAM,QACNsgC,WAAYjK,IAEd,gBAAC,IAAS,CACR8K,QAAS,aAAW,gBAAgBzC,6BAAsC,cAC1EhhC,KAAM,gBAAgBghC,6BACtBlwB,MAAOvP,EAAE,4BAET,gBAAC,kBAAe,CACd+hC,eAAgBJ,EAChBQ,YAAaniC,EAAE,oBACf4gB,WAAY5gB,EAAE,0BACdoiC,UAAWpiC,EAAE,yBACbqiC,SAAUjL,EACVkL,cAAc,EACdC,iBAAkBT,KAGtB,gBAAC,KAAU,CACT3gC,KAAM,IAAeD,KACrBzC,KAAM,gBAAgBghC,sBACtBlwB,MAAOvP,EAAE,mBACTwhC,YAAY,IACZH,WAAYjK,IAEbmK,EAAgBM,EAAe1wB,EAAWimB,EAAUp3B,KAK9CwiC,EAAqD,EAAG/C,gBACnE,MAAM,EAAEz/B,GAAM,4BAEZ0iB,QAAQ,UAAEvR,IACR,eACE,SAAEimB,GAAa,aAAiB,KAEtC,OAAOmK,EADe,gBAAgB9B,wBACAtuB,EAAWimB,EAAUp3B,IAGhDyiC,EAAyD,EAAGhD,gB,UACvE,MAAM,EAAEz/B,GAAM,4BAEZ0iB,QAAQ,aAAEvC,IACR,eACE,SAAEiX,GAAa,aAAiB,KAChCsL,GAAgD,QAArC,EAA+B,QAA/B,EAAyB,QAAzB,EAAAviB,aAAY,EAAZA,EAAesf,UAAU,eAAEhrB,YAAI,eAAEqV,YAAI,eAAEC,UAAW,CAAC,IACpE,OACE,gBAAC,KAAe,CACdtrB,KAAM,gBAAgBghC,sBACtBlwB,MAAOvP,EAAE,sBACT2iC,SAAU3iC,EAAE,0BACZwhC,YAAaxhC,EAAE,uBACfohC,SAAUphC,EAAE,uDACZoK,UAAQ,EACRw4B,iBAAsC,IAApBF,EAASl8B,OAC3Bq8B,WAAYzL,M,gFCxIlB,oCAwBe,IAnBoB,KACjC,MAAM,GAAEp2B,EAAE,KAAEd,EAAI,KAAEzB,EAAI,cAAEwqB,GAAkB,sBACpC1mB,EAA+B,CACnC,CACErC,OACAE,UAAWY,EACX0tB,QAAQ,EACRjwB,OACAkwB,KAAM,aAIV,OACE,gBAAC,IAAQ,CAACxd,UAAW5O,GACnB,gBAAC,IAAmB,CAACugC,iBAAkB7Z,O,kCCnB7C,6HAkFe,IAhEiD,EAC9D1mB,WACAugC,uBAEA,MAAM,EAAE9iC,GAAM,2BACd,IAAKuC,EAASolB,QAAU,IAAUplB,EAASwgC,WACzC,OAAO,gBAAC,IAAU,MAGpB,GAAIxgC,EAASwgC,UACX,OAAO,gBAAC,KAAS,CAACpb,OAAQplB,EAASolB,OAAQob,UAAWxgC,EAASwgC,YAGjE,MAAMtvB,EAAY,IAChBlR,EAASkS,KAAKrW,KAAK4Z,SAAS5Z,KAAKyzB,WAChCpd,GAASA,EAAKhW,OAASqkC,GAG1B,GAAI,IAAUrvB,GACZ,OAAO,uBAAKxT,UAAU,6BAA6BD,EAAE,mCAGvD,MAYM4xB,EAAiB,IAAYrvB,EAASkS,KAAKrW,KAAK4Z,SAAS5Z,KAAKyzB,WAAY,CAC9E,OACAiR,IAEIE,EAAgB,CACpB7iB,aAAc,YAAoB5d,EAASkS,KAAMmd,GACjD3I,cAAexV,EAAUhV,KACzB0S,UAAW,YAAiB5O,EAASkS,OAGvC,OACE,gBAAC,IAAM,CACLuuB,cAAeA,EACfvjB,iBAAkB,WAAavV,MAAM,CACnCiW,aAAc,YAAmCngB,KAEnDogC,SA5BiB,CAAC1d,EAAQhf,KAC5B,MAAMwzB,EAAkB,YAAwBxU,EAAQngB,EAASkS,KAAMhB,GAEvE,OAAO,aAAU,aAAS,aAAalR,EAASkS,OAAQyiB,GACrDxsB,KAAK,KACJhH,EAAQu/B,UAAU,CAAE7gC,MAAO,KAC3B,KAAQ8gC,WAETrtB,MAAOC,IACNpS,EAAQu/B,UAAU,CAAElC,OAAQjrB,OAoB9BqtB,QAAS,KAAQD,QAEfE,GACA,gBAAC,IAAe,eACd7gC,SAAUA,EAASkS,KACnBquB,iBAAkBA,GACdM,O,kCC3Ed,iLA+Ie,IAhHqE,EAClF7gC,WACAugC,mBACA9C,eACAD,cACAgB,SACAp/B,SACA0hC,eACA3D,gBACAhd,SACA4gB,Y,cAEA,MAAMlM,EAAW,YAAkB70B,IAC7B,EAAEvC,GAAM,4BACPujC,EAAYC,GAAiB,WAAeV,GAC7CjR,EAA2C,QAA9B,EAAwB,QAAxB,EAAc,QAAd,EAAAtvB,aAAQ,EAARA,EAAUnE,YAAI,eAAE4Z,gBAAQ,eAAE5Z,YAAI,eAAEyzB,WAC7C4R,EAAmB,IACvB5R,EACCpe,GAAcA,EAAUwW,gBAAkBxW,EAAUyW,eAAiBzW,EAAU0W,cAE5EuZ,EAAkB,IAAQ7R,EAAY,QACtC8R,EACF3jC,EADcyjC,EACZ,gCACA,iCACA,KACJvjC,EACAC,UAAU,KAAE1B,EAAI,UAAE2B,IAChBmC,EACEqhC,EAAqB,aAAarhC,GAClCk2B,EAAe,aAASmL,GAAoB9zB,IAAM8zB,EAAqB1jC,EACvE2jC,EAAc,IAAQnhB,EAAOvC,aAAc,CAAEiJ,UAAU,IAEvD0a,EAAY,aAAoB,KAAkBC,mBAexD,OACE,gBAAC,IAAmBC,SAAQ,CAACjjC,MAAO,CAAEq2B,aACpC,gBAAC,IAAM,KACL,6BAAQuM,IAEV,gBAAC,IAAW,CACVtjC,MACE,gCACGsjC,GACC,gBACA,gBAAC,IAAM,CAACviC,QAAQ,OAAO6iC,UAAU,IAAIhjC,KAAM6iC,EAAWI,OAAO,UAC1DlkC,EAAE,yB,IAA0B,gBAAC,IAAmB,UAM3D,gBAAC,IAAI,CAACogC,SAAWhJ,OAA0BrsB,EAAfi1B,GAC1B,uBAAK//B,UAAU,+BACb,qBAAGA,UAAU,oCACX,gBAAC,QAAK,CAACD,EAAGA,EAAGgB,GAAG,c,oBACI,IAClB,gBAAC,KAAY,CACXd,KAAM,aAAaqC,GACnB9D,KAAMA,EACN2B,UAAWA,EACXC,MAAO5B,EACP0lC,QAAM,MAIZ,qBAAGlkC,UAAU,oCACVD,EAAE,wB,KACF,IAAO6xB,GAAc,EACpB,gBAAC,IAAe,CACd0R,WAAYA,EACZ1R,WAAY6R,EACZU,SAlDiBnb,IAC7B,MAAM2I,EAAiB,IAAYrvB,EAASnE,KAAK4Z,SAAS5Z,KAAKyzB,WAAY,CACzE,OACA5I,IAEFua,EAAcva,GACdyW,EAAc,gBAAiBzW,GAC/ByW,EAAc,eAAgB,YAAoBn9B,EAAUqvB,IAC5D,KAAQ7Q,QACN,WAAW3gB,KAAaq4B,KAAgBh6B,gBAAmBwqB,sBA4CnD,gBAAC,KAAY,CACX/oB,KAAM,iBAAeA,KACrBzB,KAAMozB,EAAW,GAAGpzB,KACpB6B,QAAQ,EACR6jC,QAAM,KAIZ,2BACA,gBAAC,IAAY,CAAChT,aAAc,YAAiB5uB,MAE/C,gBAAC,IAAU,CACTw9B,YAAaA,EACbsE,aAAc1iC,IAA8B,QAApB,EAAc,QAAd,EAAAA,aAAM,EAANA,EAAQo/B,cAAM,eAAEuD,YAAI,eAAEriC,SAC9CohC,aAAcA,EACdkB,YAAgCvkC,EAAnByjC,EAAqB,kBAAuB,kBACzDe,cAAeX,IAAgBP,IAAU,IAAUvC,IAAWsC,EAC9DoB,WAAYzkC,EAAE,qBACd0kC,WAAYtN,Q","file":"dev-console/code-refs/healthChecks-chunk-2e1663cb705614c24167.min.js","sourcesContent":["import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport * as _ from 'lodash-es';\nimport * as semver from 'semver';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { AlertVariant, Button, Popover } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamModel } from '../models';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport { DOC_URL_PODMAN } from './utils';\nimport { CopyToClipboard } from './utils/copy-to-clipboard';\nimport { ExpandableAlert } from './utils/alerts';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { SectionHeading } from './utils/headings';\nimport { LabelList } from './utils/label-list';\nimport { navFactory } from './utils/horizontal-nav';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { Timestamp } from './utils/timestamp';\nimport { ImageStreamTimeline, getImageStreamTagName } from './image-stream-timeline';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\n\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getAnnotationTags = (specTag: any) =>\n  _.get(specTag, 'annotations.tags', '').split(/\\s*,\\s*/);\n\nconst isBuilderTag = (specTag: any) => {\n  // A spec tag has annotations tags, which is a comma-delimited string (e.g., 'builder,httpd').\n  const annotationTags = getAnnotationTags(specTag);\n  return _.includes(annotationTags, 'builder') && !_.includes(annotationTags, 'hidden');\n};\n\nconst getStatusTags = (imageStream: K8sResourceKind): any => {\n  const statusTags = _.get(imageStream, 'status.tags');\n  return _.keyBy(statusTags, 'tag');\n};\n\nexport const getBuilderTags = (imageStream: K8sResourceKind): any[] => {\n  const statusTags = getStatusTags(imageStream);\n  return _.filter(imageStream.spec.tags, (tag) => isBuilderTag(tag) && statusTags[tag.name]);\n};\n\n// Sort tags in reverse order by semver, falling back to a string comparison if not a valid version.\nexport const getBuilderTagsSortedByVersion = (imageStream: K8sResourceKind): any[] => {\n  return getBuilderTags(imageStream).sort(({ name: a }, { name: b }) => {\n    const v1 = semver.coerce(a);\n    const v2 = semver.coerce(b);\n    if (!v1 && !v2) {\n      return a.localeCompare(b);\n    }\n    if (!v1) {\n      return 1;\n    }\n    if (!v2) {\n      return -1;\n    }\n    return semver.rcompare(v1, v2);\n  });\n};\n\nexport const getMostRecentBuilderTag = (imageStream: K8sResourceKind) => {\n  const tags = getBuilderTagsSortedByVersion(imageStream);\n  return _.head(tags);\n};\n\n// An image stream is a builder image if\n// - It has a spec tag annotated with `builder` and not `hidden`\n// - It has a corresponding status tag\nexport const isBuilder = (imageStream: K8sResourceKind) => !_.isEmpty(getBuilderTags(imageStream));\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamModel), ...common];\n\nconst ImageStreamTagsRow: React.SFC<ImageStreamTagsRowProps> = ({\n  imageStream,\n  specTag,\n  statusTag,\n}) => {\n  const imageStreamStatus = _.get(imageStream, 'status');\n  const latest = _.get(statusTag, ['items', 0]);\n  const from = _.get(specTag, 'from');\n  const referencesTag = _.get(specTag, 'from.kind') === 'ImageStreamTag';\n  const image = _.get(latest, 'image');\n  const created = _.get(latest, 'created');\n  const dockerRepositoryCheck = _.has(imageStream, [\n    'metadata',\n    'annotations',\n    'openshift.io/image.dockerRepositoryCheck',\n  ]);\n  const { t } = useTranslation();\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-2 col-sm-4 col-xs-4 co-break-word\">\n        <ResourceLink\n          kind={ImageStreamTagsReference}\n          name={getImageStreamTagName(imageStream.metadata.name, statusTag.tag)}\n          namespace={imageStream.metadata.namespace}\n          title={statusTag.tag}\n          linkTo={!!image}\n        />\n      </div>\n      <span className=\"col-md-3 col-sm-4 col-xs-8 co-break-all\">\n        {from && referencesTag && (\n          <ResourceLink\n            kind={ImageStreamTagsReference}\n            name={from.name}\n            namespace={imageStream.metadata.namespace}\n            title={from.name}\n          />\n        )}\n        {from && !referencesTag && <>{from.name}</>}\n        {!from && <span className=\"text-muted\">{t('public~pushed image')}</span>}\n      </span>\n      <span className=\"col-md-4 col-sm-4 hidden-xs co-break-all\">\n        {!imageStreamStatus && dockerRepositoryCheck && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~Unable to resolve')}\n          </>\n        )}\n        {!imageStreamStatus && !dockerRepositoryCheck && !from && <>{t('public~Not synced yet')}</>}\n        {/* We have no idea why in this case  */}\n        {!imageStreamStatus && !dockerRepositoryCheck && from && <>{t('public~Unresolved')}</>}\n        {imageStreamStatus && image && <>{image}</>}\n        {imageStreamStatus && !image && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~There is no image associated with this tag')}\n          </>\n        )}\n      </span>\n      <div className=\"col-md-3 hidden-sm hidden-xs\">\n        {created && <Timestamp timestamp={created} />}\n        {!created && '-'}\n      </div>\n    </div>\n  );\n};\n\nexport const ExampleDockerCommandPopover: React.FC<ImageStreamManipulationHelpProps> = ({\n  imageStream,\n  tag,\n}) => {\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const { t } = useTranslation();\n  if (!publicImageRepository) {\n    return null;\n  }\n  const loginCommand = 'oc registry login';\n  const pushCommand = `docker push ${publicImageRepository}:${tag || '<tag>'}`;\n  const pullCommand = `docker pull ${publicImageRepository}:${tag || '<tag>'}`;\n\n  return (\n    <Popover\n      headerContent={<>{t('public~Image registry commands')}</>}\n      className=\"co-example-docker-command__popover\"\n      minWidth=\"600px\"\n      bodyContent={\n        <div>\n          <p>\n            {t(\n              'public~Create a new ImageStreamTag by pushing an image to this ImageStream with the desired tag.',\n            )}\n          </p>\n          <br />\n          <p>{t('public~Authenticate to the internal registry')}</p>\n          <CopyToClipboard value={loginCommand} />\n          <br />\n          <p>{t('public~Push an image to this ImageStream')}</p>\n          <CopyToClipboard value={pushCommand} />\n          <br />\n          <p>{t('public~Pull an image from this ImageStream')}</p>\n          <CopyToClipboard value={pullCommand} />\n          <br />\n          <p>\n            <Trans t={t} ns=\"public\">\n              Red Hat Enterprise Linux users may use the equivalent <strong>podman</strong>{' '}\n              commands.{' '}\n            </Trans>\n            <ExternalLink href={DOC_URL_PODMAN} text={t('public~Learn more.')} />\n          </p>\n        </div>\n      }\n    >\n      <Button className=\"hidden-sm hidden-xs\" type=\"button\" variant=\"link\">\n        <QuestionCircleIcon className=\"co-icon-space-r\" />\n        {t('public~Do you need to work with this ImageStream outside of the web console?')}\n      </Button>\n    </Popover>\n  );\n};\n\nexport const ImageStreamsDetails: React.SFC<ImageStreamsDetailsProps> = ({ obj: imageStream }) => {\n  const { t } = useTranslation();\n\n  const getImportErrors = (): string[] => {\n    return _.transform(imageStream.status.tags, (acc, tag: any) => {\n      const importErrorCondition = _.find(\n        tag.conditions,\n        (condition) => condition.type === 'ImportSuccess' && condition.status === 'False',\n      );\n      importErrorCondition &&\n        acc.push(\n          t('public~Unable to sync image for tag {{tag}}. {{message}}', {\n            tag: `${imageStream.metadata.name}:${tag.tag}`,\n            message: importErrorCondition.message,\n          }),\n        );\n    });\n  };\n\n  const imageRepository = _.get(imageStream, 'status.dockerImageRepository');\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const imageCount = _.get(imageStream, 'status.tags.length');\n  const specTagByName = _.keyBy(imageStream.spec.tags, 'name');\n  const importErrors = getImportErrors();\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        {!_.isEmpty(importErrors) && (\n          <ExpandableAlert\n            variant={AlertVariant.warning}\n            alerts={_.map(importErrors, (error, i) => (\n              <React.Fragment key={i}>{error}</React.Fragment>\n            ))}\n          />\n        )}\n        <SectionHeading text={t('public~ImageStream details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={imageStream}>\n              {imageRepository && <dt>{t('public~Image repository')}</dt>}\n              {imageRepository && <dd>{imageRepository}</dd>}\n              {publicImageRepository && <dt>{t('public~Public image repository')}</dt>}\n              {publicImageRepository && <dd>{publicImageRepository}</dd>}\n              <dt>{t('public~Image count')}</dt>\n              <dd>{imageCount ? imageCount : 0}</dd>\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Tags')} />\n        {_.isEmpty(imageStream.status.tags) ? (\n          <span className=\"text-muted\">{t('public~No tags')}</span>\n        ) : (\n          <div className=\"row\">\n            <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n              <div className=\"row co-m-table-grid__head\">\n                <div className=\"col-md-2 col-sm-4 col-xs-4\">{t('public~Name')}</div>\n                <div className=\"col-md-3 col-sm-4 col-xs-8\">{t('public~From')}</div>\n                <div className=\"col-md-4 col-sm-4 hidden-xs\">{t('public~Identifier')}</div>\n                <div className=\"col-md-3 hidden-sm hidden-xs\">{t('public~Last updated')}</div>\n              </div>\n              <div className=\"co-m-table-grid__body\">\n                {_.map(imageStream.status.tags, (statusTag) => (\n                  <ImageStreamTagsRow\n                    key={statusTag.tag}\n                    imageStream={imageStream}\n                    specTag={specTagByName[statusTag.tag]}\n                    statusTag={statusTag}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ImageStreamHistory: React.FC<ImageStreamHistoryProps> = ({ obj: imageStream }) => {\n  const imageStreamStatusTags = _.get(imageStream, 'status.tags');\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamHistory.displayName = 'ImageStreamHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamHistory),\n];\nexport const ImageStreamsDetailsPage: React.SFC = (props) => (\n  <DetailsPage {...props} kind={ImageStreamsReference} menuActions={menuActions} pages={pages} />\n);\nImageStreamsDetailsPage.displayName = 'ImageStreamsDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  Kebab.columnClass,\n];\n\nconst ImageStreamsTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={ImageStreamsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={ImageStreamsReference} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={ImageStreamsReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const ImageStreamsList: React.SFC = (props) => {\n  const { t } = useTranslation();\n  const ImageStreamsTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Labels'),\n        sortField: 'metadata.labels',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Created'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[4] },\n      },\n    ];\n  };\n  ImageStreamsTableHeader.displayName = 'ImageStreamsTableHeader';\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ImageStreams')}\n      Header={ImageStreamsTableHeader}\n      Row={ImageStreamsTableRow}\n      virtualize\n    />\n  );\n};\n\nImageStreamsList.displayName = 'ImageStreamsList';\n\nexport const buildPhase = (build) => build.status.phase;\n\nexport const ImageStreamsPage: React.SFC<ImageStreamsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      title={t('public~ImageStreams')}\n      kind={ImageStreamsReference}\n      ListComponent={ImageStreamsList}\n      canCreate={true}\n    />\n  );\n};\n\nImageStreamsPage.displayName = 'ImageStreamsListPage';\n\ntype ImageStreamTagsRowProps = {\n  imageStream: K8sResourceKind;\n  specTag: any;\n  statusTag: any;\n};\n\ntype ImageStreamHistoryProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamManipulationHelpProps = {\n  imageStream: K8sResourceKind;\n  tag?: string;\n};\n\nexport type ImageStreamsDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamsPageProps = {\n  filterLabel: string;\n};\n","export { default as HealthChecksPage } from './HealthChecksPage';\n","export * from './pipelines';\n","export enum StartedByLabel {\n  triggers = 'triggers.tekton.dev/eventlistener',\n}\nexport enum StartedByAnnotation {\n  user = 'pipeline.openshift.io/started-by',\n}\nexport enum TektonTaskAnnotation {\n  minVersion = ' tekton.dev/pipelines.minVersion',\n  tags = 'tekton.dev/tags',\n  categories = 'tekton.dev/categories',\n  installedFrom = 'openshift.io/installed-from',\n  semVersion = 'openshift.io/sem-version',\n}\nexport enum TaskProviders {\n  redhat = 'Red Hat',\n  community = 'Community',\n  tektonHub = 'TektonHub',\n  artifactHub = 'ArtifactHub',\n}\nexport enum TektonTaskLabel {\n  providerType = 'operator.tekton.dev/provider-type',\n  version = 'app.kubernetes.io/version',\n}\nexport enum TektonResourceLabel {\n  pipeline = 'tekton.dev/pipeline',\n  pipelinerun = 'tekton.dev/pipelineRun',\n  taskrun = 'tekton.dev/taskRun',\n  pipelineTask = 'tekton.dev/pipelineTask',\n}\n\nexport enum PipelineResourceType {\n  git = 'git',\n  image = 'image',\n  cluster = 'cluster',\n  storage = 'storage',\n}\n\nexport enum VolumeTypes {\n  NoWorkspace = 'noWorkspace',\n  EmptyDirectory = 'emptyDirectory',\n  ConfigMap = 'configMap',\n  Secret = 'secret',\n  PVC = 'pvc',\n  VolumeClaimTemplate = 'volumeClaimTemplate',\n}\n\nexport enum SecretAnnotationId {\n  Git = 'git',\n  Image = 'docker',\n}\n\nexport const SecretAnnotationType = {\n  [SecretAnnotationId.Git]: 'Git Server',\n  [SecretAnnotationId.Image]: 'Image Registry',\n};\n\nexport const PIPELINE_GA_VERSION = '1.4.0';\nexport const TRIGGERS_GA_VERSION = '1.6.0';\nexport const PIPELINE_UNSIMPLIFIED_METRICS_VERSION = '1.5.2';\nexport const PIPELINE_SERVICE_ACCOUNT = 'pipeline';\nexport const PIPELINE_RUN_AUTO_START_FAILED = `bridge/pipeline-run-auto-start-failed`;\n\nexport const DEFAULT_CHART_HEIGHT = 275;\nexport const DEFAULT_LEGEND_CHART_HEIGHT = 375;\nexport const DEFAULT_TIME_RANGE = '1w';\nexport const DEFAULT_REFRESH_INTERVAL = '30s';\nexport const DEFAULT_SAMPLES = 60;\n\n// Annotation for referencing pipeline name in case of PipelineRun with no reference to a Pipeline (embedded pipeline)\nexport const preferredNameAnnotation = 'pipeline.openshift.io/preferredName';\nexport const chainsSignedAnnotation = 'chains.tekton.dev/signed';\n\nexport const PIPELINE_NAMESPACE = 'openshift-pipelines';\nexport const PIPELINERUN_TEMPLATE_NAMESPACE = 'openshift';\nexport const PIPELINE_CONFIG_NAME = 'config';\n\nexport enum PipelineMetricsLevel {\n  PIPELINE_TASK_LEVEL = 'pipeline/task',\n  PIPELINERUN_TASKRUN_LEVEL = 'pipelinerun/taskrun',\n  UNSUPPORTED_LEVEL = 'unsupported',\n  UNSIMPLIFIED_METRICS_LEVEL = 'unsimplified',\n}\n\nexport const FLAG_TEKTON_V1_ENABLED = 'FLAG_TEKTON_V1_ENABLED';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER';\n","export * from './coreTekton';\nexport * from './pipeline';\nexport * from './pipelineRun';\nexport * from './pipelineResource';\nexport * from './task';\nexport * from './taskRun';\nexport * from './computedStatus';\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { ComputedStatus } from '../types';\n\nexport enum SucceedConditionReason {\n  PipelineRunCancelled = 'StoppedRunFinally',\n  PipelineRunStopped = 'CancelledRunFinally',\n  TaskRunCancelled = 'TaskRunCancelled',\n  Cancelled = 'Cancelled',\n  PipelineRunStopping = 'PipelineRunStopping',\n  PipelineRunPending = 'PipelineRunPending',\n  TaskRunStopping = 'TaskRunStopping',\n  CreateContainerConfigError = 'CreateContainerConfigError',\n  ExceededNodeResources = 'ExceededNodeResources',\n  ExceededResourceQuota = 'ExceededResourceQuota',\n  ConditionCheckFailed = 'ConditionCheckFailed',\n}\n\nexport const pipelineRunStatus = (pipelineRun): ComputedStatus => {\n  const conditions = _.get(pipelineRun, ['status', 'conditions'], []);\n  if (conditions.length === 0) return null;\n\n  const succeedCondition = conditions.find((c) => c.type === 'Succeeded');\n  const cancelledCondition = conditions.find((c) => c.reason === 'Cancelled');\n\n  if (\n    [\n      SucceedConditionReason.PipelineRunStopped,\n      SucceedConditionReason.PipelineRunCancelled,\n    ].includes(pipelineRun.spec?.status) &&\n    !cancelledCondition\n  ) {\n    return ComputedStatus.Cancelling;\n  }\n\n  if (!succeedCondition || !succeedCondition.status) {\n    return null;\n  }\n\n  const status =\n    succeedCondition.status === 'True'\n      ? ComputedStatus.Succeeded\n      : succeedCondition.status === 'False'\n      ? ComputedStatus.Failed\n      : ComputedStatus.Running;\n\n  if (succeedCondition.reason && succeedCondition.reason !== status) {\n    switch (succeedCondition.reason) {\n      case SucceedConditionReason.PipelineRunCancelled:\n      case SucceedConditionReason.TaskRunCancelled:\n      case SucceedConditionReason.Cancelled:\n      case SucceedConditionReason.PipelineRunStopped:\n        return ComputedStatus.Cancelled;\n      case SucceedConditionReason.PipelineRunStopping:\n      case SucceedConditionReason.TaskRunStopping:\n        return ComputedStatus.Failed;\n      case SucceedConditionReason.CreateContainerConfigError:\n      case SucceedConditionReason.ExceededNodeResources:\n      case SucceedConditionReason.ExceededResourceQuota:\n      case SucceedConditionReason.PipelineRunPending:\n        return ComputedStatus.Pending;\n      case SucceedConditionReason.ConditionCheckFailed:\n        return ComputedStatus.Skipped;\n      default:\n        return status;\n    }\n  }\n  return status;\n};\n\n// Converts the PipelineRun (and TaskRun) condition status into a human readable string.\n// See also tkn cli implementation at https://github.com/tektoncd/cli/blob/release-v0.15.0/pkg/formatted/k8s.go#L54-L83\nexport const pipelineRunStatusTitle = (pipelineRun): string => {\n  const status = pipelineRunStatus(pipelineRun);\n  if (!status) return '-';\n  switch (status) {\n    case ComputedStatus.Cancelled:\n      return i18next.t('pipelines-plugin~Cancelled');\n    case ComputedStatus.Failed:\n      return i18next.t('pipelines-plugin~Failed');\n    case ComputedStatus.Succeeded:\n      return i18next.t('pipelines-plugin~Succeeded');\n    case ComputedStatus.Pending:\n      return i18next.t('pipelines-plugin~Pending');\n    case ComputedStatus.Running:\n      return i18next.t('pipelines-plugin~Running');\n    case ComputedStatus.Skipped:\n      return i18next.t('pipelines-plugin~Skipped');\n    case ComputedStatus.Cancelling:\n      return i18next.t('pipelines-plugin~Cancelling');\n    default:\n      return status;\n  }\n};\n\nexport const pipelineFilterReducer = (pipeline): ComputedStatus => {\n  if (!pipeline.latestRun) return ComputedStatus.Other;\n  return pipelineRunStatus(pipeline.latestRun) || ComputedStatus.Other;\n};\n\nexport const pipelineTitleFilterReducer = (pipeline): string => {\n  if (!pipeline.latestRun) return '-';\n  return pipelineRunStatusTitle(pipeline.latestRun) || '-';\n};\n\nexport const pipelineRunTitleFilterReducer = (pipelineRun): string => {\n  const status = pipelineRunStatusTitle(pipelineRun);\n  return status || '-';\n};\nexport const pipelineRunFilterReducer = (pipelineRun): ComputedStatus => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const pipelineStatusFilter = (filters, pipeline) => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const status = pipelineFilterReducer(pipeline);\n  return filters.selected?.includes(status) || !_.includes(filters.all, status);\n};\n\nexport const pipelineRunStatusFilter = (phases, pipeline) => {\n  if (!phases || !phases.selected || !phases.selected.length) {\n    return true;\n  }\n\n  const status = pipelineRunFilterReducer(pipeline);\n  return phases.selected?.includes(status) || !_.includes(phases.all, status);\n};\n\nexport const pipelineResourceFilterReducer = (pipelineResource): string => {\n  return pipelineResource.spec.type;\n};\n\nexport const pipelineResourceTypeFilter = (filters, pipelineResource): boolean => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const type = pipelineResourceFilterReducer(pipelineResource);\n  return filters.selected?.includes(type) || !_.includes(filters.all, type);\n};\n\nexport const taskRunFilterReducer = (taskRun): ComputedStatus => {\n  const status = pipelineRunStatus(taskRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const taskRunFilterTitleReducer = (taskRun): string => {\n  const status = pipelineRunStatusTitle(taskRun);\n  return status || '-';\n};\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { PipelineKind } from '../../types';\n\nexport enum PipelineType {\n  PAC = 'pac',\n  PIPELINE = 'pipeline',\n}\nexport interface PipelineData {\n  enabled: boolean;\n  type?: PipelineType;\n  template?: PipelineKind;\n}\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { BuildOptions, Resources } from './import-types';\nimport { removeKsvcInfoFromDomainMapping } from './serverless/serverless-utils';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nconst convertToSec = (value: number, unit: string): number => {\n  switch (unit) {\n    case 'm': {\n      return value * 60;\n    }\n    case 'h': {\n      return value * 3600;\n    }\n    default: {\n      return value;\n    }\n  }\n};\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    replicas: yup\n      .number()\n      .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n      .test(isInteger(t('devconsole~Replicas must be an integer.')))\n      .min(0, t('devconsole~Replicas must be greater than or equal to 0.'))\n      .max(\n        Number.MAX_SAFE_INTEGER,\n        t('devconsole~Replicas must be lesser than or equal to {{maxSafeInteger}}.', {\n          maxSafeInteger: Number.MAX_SAFE_INTEGER,\n        }),\n      )\n      .test({\n        name: 'isEmpty',\n        test: (value) => value !== undefined,\n        message: t('devconsole~This field cannot be empty.'),\n      }),\n  });\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = (t: TFunction) =>\n  yup.object().when('resources', {\n    is: Resources.KnativeService,\n    then: yup.object().shape({\n      scaling: yup.object({\n        minpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Min Pods must be an integer.')))\n          .min(0, t('devconsole~Min Pods must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Min Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        maxpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Max Pods must be an integer.')))\n          .min(1, t('devconsole~Max Pods must be greater than or equal to 1.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Max Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          )\n          .test({\n            test(limit) {\n              const { minpods } = this.parent;\n              return limit ? limit >= minpods : true;\n            },\n            message: t('devconsole~Max Pods must be greater than or equal to Min Pods.'),\n          }),\n        concurrencytarget: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency target must be an integer.')))\n          .min(0, t('devconsole~Concurrency target must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency target must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencylimit: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency limit must be an integer.')))\n          .min(0, t('devconsole~Concurrency limit must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency limit must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencyutilization: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .min(0, t('devconsole~Concurrency utilization must be between 0 and 100.'))\n          .max(100, t('devconsole~Concurrency utilization must be between 0 and 100.')),\n        autoscale: yup.object().shape({\n          autoscalewindow: yup\n            .number()\n            .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n            .test({\n              test(autoscalewindow) {\n                if (autoscalewindow) {\n                  const { autoscalewindowUnit } = this.parent;\n                  const value = convertToSec(autoscalewindow, autoscalewindowUnit);\n                  return value >= 6 && value <= 3600;\n                }\n                return true;\n              },\n              message: t('devconsole~Autoscale window must be between 6s and 1h.'),\n            }),\n        }),\n      }),\n      domainMapping: yup.array().of(\n        yup\n          .string()\n          .transform(removeKsvcInfoFromDomainMapping)\n          .matches(hostnameRegex, {\n            message: t(\n              'devconsole~Domain name must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n            ),\n            excludeEmptyString: true,\n          })\n          .test(\n            'domainname-has-segements',\n            t('devconsole~Domain name must consist of at least two segments separated by dots.'),\n            function (domainName: string) {\n              return domainName.split('.').length >= 2;\n            },\n          ),\n      ),\n    }),\n  });\n\nexport const routeValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    secure: yup.boolean(),\n    tls: yup.object().when('secure', {\n      is: true,\n      then: yup.object({\n        termination: yup.string().required(t('devconsole~Please select a termination type.')),\n      }),\n    }),\n    hostname: yup\n      .string()\n      .matches(hostnameRegex, {\n        message: t(\n          'devconsole~Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.')),\n    path: yup.string().matches(pathRegex, {\n      message: t('devconsole~Path must start with /.'),\n      excludeEmptyString: true,\n    }),\n    unknownTargetPort: yup\n      .number()\n      .typeError(t('devconsole~Port must be an integer.'))\n      .integer(t('devconsole~Port must be an integer.'))\n      .min(1, t('devconsole~Port must be between 1 and 65535.'))\n      .max(65535, t('devconsole~Port must be between 1 and 65535.')),\n  });\n\nexport const limitsValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    cpu: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limitUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${limit}${limitUnit}`) >=\n                convertToBaseValue(`${request}${requestUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU limit must be greater than or equal to request.'),\n        }),\n    }),\n    memory: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory limit must be greater than or equal to request.'),\n        }),\n      limitUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n    }),\n  });\n\nexport const imageValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Source',\n    then: yup.object().shape({\n      selected: yup.string().required(t('devconsole~Required')),\n      tag: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const gitValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    url: yup\n      .string()\n      .max(2000, t('devconsole~Please enter a URL that is less then 2000 characters.'))\n      .matches(gitUrlRegex, t('devconsole~Invalid Git URL.'))\n      .required(t('devconsole~Required')),\n    type: yup.string().when('showGitType', {\n      is: true,\n      then: yup\n        .string()\n        .required(t('devconsole~We failed to detect the Git type. Please choose a Git type.')),\n    }),\n    showGitType: yup.boolean(),\n  });\n\nexport const dockerValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Docker',\n    then: yup.object().shape({\n      containerPort: yup\n        .number()\n        .test(isInteger(t('devconsole~Container port should be an integer'))),\n      dockerfilePath: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const devfileValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Devfile',\n    then: yup.object().shape({\n      devfilePath: yup.string().required(t('devconsole~Required')),\n      devfileContent: yup\n        .string()\n        .min(1, t('devconsole~Required'))\n        .required(t('devconsole~Required')),\n      devfileHasError: yup.boolean().oneOf([false]),\n      devfileSuggestedResources: yup.object().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = (t: TFunction) =>\n  yup.string().required(t('devconsole~Required'));\n\nexport const isiValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup.string().required(t('devconsole~Required')),\n    image: yup.object().required(t('devconsole~Required')),\n    tag: yup.string(),\n    status: yup.string().required(t('devconsole~Required')),\n  });\n\nexport const importFlowPipelineTemplateValidationSchema = yup\n  .object()\n  .when(['enabled', 'build.option', 'type'], {\n    is: (isPipelineEnabled, buildOption, pipelineType) =>\n      (isPipelineEnabled || buildOption === BuildOptions.PIPELINES) &&\n      pipelineType !== PipelineType.PAC,\n    then: yup.object().shape({\n      templateSelected: yup.string().required(),\n    }),\n  });\n","import { chart_color_green_400 as tektonGroupColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { K8sKind } from '@console/internal/module/k8s';\n\nconst color = tektonGroupColor.value;\n\nexport const PipelineModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const CustomRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'CustomRun',\n  // t('pipelines-plugin~CustomRun')\n  labelKey: 'pipelines-plugin~CustomRun',\n  // t('pipelines-plugin~CustomRuns')\n  labelPluralKey: 'pipelines-plugin~CustomRuns',\n  plural: 'customruns',\n  abbr: 'CR',\n  namespaced: true,\n  kind: 'CustomRun',\n  id: 'customrun',\n  labelPlural: 'CustomRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'PipelineResource',\n  // t('pipelines-plugin~PipelineResource')\n  labelKey: 'pipelines-plugin~PipelineResource',\n  // t('pipelines-plugin~PipelineResources')\n  labelPluralKey: 'pipelines-plugin~PipelineResources',\n  plural: 'pipelineresources',\n  abbr: 'PR',\n  namespaced: true,\n  kind: 'PipelineResource',\n  id: 'pipelineresource',\n  labelPlural: 'PipelineResources',\n  crd: true,\n  color,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTask',\n  // t('pipelines-plugin~ClusterTask')\n  labelKey: 'pipelines-plugin~ClusterTask',\n  // t('pipelines-plugin~ClusterTasks')\n  labelPluralKey: 'pipelines-plugin~ClusterTasks',\n  plural: 'clustertasks',\n  abbr: 'CT',\n  namespaced: false,\n  kind: 'ClusterTask',\n  id: 'clustertask',\n  labelPlural: 'ClusterTasks',\n  crd: true,\n  color,\n};\n\nexport const ConditionModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Condition',\n  // t('pipelines-plugin~Condition')\n  labelKey: 'pipelines-plugin~Condition',\n  // t('pipelines-plugin~Conditions')\n  labelPluralKey: 'pipelines-plugin~Conditions',\n  plural: 'conditions',\n  abbr: 'C',\n  namespaced: true,\n  kind: 'Condition',\n  id: 'condition',\n  labelPlural: 'Conditions',\n  crd: true,\n  color,\n};\n\nexport const TriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerBinding',\n  // t('pipelines-plugin~TriggerBinding')\n  labelKey: 'pipelines-plugin~TriggerBinding',\n  // t('pipelines-plugin~TriggerBindings')\n  labelPluralKey: 'pipelines-plugin~TriggerBindings',\n  plural: 'triggerbindings',\n  abbr: 'TB',\n  namespaced: true,\n  kind: 'TriggerBinding',\n  id: 'triggerbinding',\n  labelPlural: 'TriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const ClusterTriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBinding')\n  labelKey: 'pipelines-plugin~ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBindings')\n  labelPluralKey: 'pipelines-plugin~ClusterTriggerBindings',\n  plural: 'clustertriggerbindings',\n  abbr: 'CTB',\n  namespaced: false,\n  kind: 'ClusterTriggerBinding',\n  id: 'clustertriggerbinding',\n  labelPlural: 'ClusterTriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const TriggerTemplateModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplate')\n  labelKey: 'pipelines-plugin~TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplates')\n  labelPluralKey: 'pipelines-plugin~TriggerTemplates',\n  plural: 'triggertemplates',\n  abbr: 'TT',\n  namespaced: true,\n  kind: 'TriggerTemplate',\n  id: 'triggertemplate',\n  labelPlural: 'TriggerTemplates',\n  crd: true,\n  color,\n};\n\nexport const EventListenerModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'EventListener',\n  // t('pipelines-plugin~EventListener')\n  labelKey: 'pipelines-plugin~EventListener',\n  // t('pipelines-plugin~EventListeners')\n  labelPluralKey: 'pipelines-plugin~EventListeners',\n  plural: 'eventlisteners',\n  abbr: 'EL',\n  namespaced: true,\n  kind: 'EventListener',\n  id: 'eventlistener',\n  labelPlural: 'EventListeners',\n  crd: true,\n  color,\n};\n\nexport const RepositoryModel: K8sKind = {\n  apiGroup: 'pipelinesascode.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Repository',\n  // t('pipelines-plugin~Repository')\n  labelKey: 'pipelines-plugin~Repository',\n  // t('pipelines-plugin~Repositories')\n  labelPluralKey: 'pipelines-plugin~Repositories',\n  plural: 'repositories',\n  abbr: 'R',\n  namespaced: true,\n  kind: 'Repository',\n  id: 'repository',\n  labelPlural: 'Repositories',\n  crd: true,\n  color,\n};\n\nexport const TektonConfigModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonConfig',\n  // t('pipelines-plugin~TektonConfig')\n  labelKey: 'pipelines-plugin~TektonConfig',\n  // t('pipelines-plugin~TektonConfigs')\n  labelPluralKey: 'pipelines-plugin~TektonConfigs',\n  plural: 'tektonconfigs',\n  abbr: 'TC',\n  namespaced: false,\n  kind: 'TektonConfig',\n  id: 'tektonconfig',\n  labelPlural: 'TektonConfigs',\n  crd: true,\n};\n\nexport const TektonHubModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonHub',\n  // t('pipelines-plugin~TektonHub')\n  labelKey: 'pipelines-plugin~TektonHub',\n  // t('pipelines-plugin~TektonHubs')\n  labelPluralKey: 'pipelines-plugin~TektonHubs',\n  plural: 'tektonhubs',\n  abbr: 'TH',\n  namespaced: false,\n  kind: 'TektonHub',\n  id: 'tektonhub',\n  labelPlural: 'TektonHubs',\n  crd: true,\n};\n\nexport const TektonResultModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonResult',\n  // t('pipelines-plugin~TektonResult')\n  labelKey: 'pipelines-plugin~TektonResult',\n  // t('pipelines-plugin~TektonResults')\n  labelPluralKey: 'pipelines-plugin~TektonResults',\n  plural: 'tektonresults',\n  abbr: 'TR',\n  namespaced: false,\n  kind: 'TektonResult',\n  id: 'tektonresult',\n  labelPlural: 'TektonResults',\n  crd: true,\n};\n","import { formatPrometheusDuration } from '@openshift-console/plugin-shared/src/datetime/prometheus';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport {\n  LOG_SOURCE_RESTARTING,\n  LOG_SOURCE_WAITING,\n  LOG_SOURCE_RUNNING,\n  LOG_SOURCE_TERMINATED,\n} from '@console/internal/components/utils';\nimport { ServiceAccountModel } from '@console/internal/models';\nimport {\n  ContainerStatus,\n  k8sUpdate,\n  k8sGet,\n  SecretKind,\n  K8sResourceCommon,\n  K8sKind,\n  K8sResourceKind,\n  PersistentVolumeClaimKind,\n  K8sModel,\n} from '@console/internal/module/k8s';\nimport {\n  PIPELINE_SERVICE_ACCOUNT,\n  SecretAnnotationId,\n  TektonResourceLabel,\n} from '../components/pipelines/const';\nimport { PipelineModalFormWorkspace } from '../components/pipelines/modals/common/types';\nimport { getDuration } from '../components/pipelines/pipeline-metrics/pipeline-metrics-utils';\nimport { EventListenerKind, TriggerTemplateKind } from '../components/pipelines/resource-types';\nimport {\n  PipelineRunModel,\n  TaskRunModel,\n  PipelineResourceModel,\n  ConditionModel,\n  ClusterTaskModel,\n  TriggerTemplateModel,\n  TriggerBindingModel,\n  ClusterTriggerBindingModel,\n  PipelineModel,\n  TaskModel,\n  EventListenerModel,\n  RepositoryModel,\n  PipelineModelV1Beta1,\n  PipelineRunModelV1Beta1,\n  TaskModelV1Beta1,\n} from '../models';\nimport {\n  ComputedStatus,\n  PipelineRunKind,\n  PipelineRunParam,\n  PipelineRunWorkspace,\n  PipelineTask,\n  PipelineKind,\n  TaskRunKind,\n  TektonParam,\n  TaskRunStatus,\n  TaskKind,\n  PLRTaskRunData,\n  PipelineRunStatusType,\n} from '../types';\nimport { TaskStatus, getLatestRun } from './pipeline-augment';\nimport {\n  pipelineRunFilterReducer,\n  pipelineRunStatus,\n  SucceedConditionReason,\n} from './pipeline-filter-reducer';\n\ninterface ServiceAccountSecretNames {\n  [name: string]: string;\n}\n\nexport type ServiceAccountType = {\n  secrets: ServiceAccountSecretNames[];\n  imagePullSecrets: ServiceAccountSecretNames[];\n} & K8sResourceCommon;\n\nexport const TaskStatusClassNameMap = {\n  'In Progress': 'is-running',\n  Succeeded: 'is-done',\n  Failed: 'is-error',\n  Idle: 'is-idle',\n};\n\nexport const conditions = {\n  hasFromDependency: (task: PipelineTask): boolean =>\n    task.resources &&\n    task.resources.inputs &&\n    task.resources.inputs.length > 0 &&\n    !!task.resources.inputs[0].from,\n  hasRunAfterDependency: (task: PipelineTask): boolean => task.runAfter && task.runAfter.length > 0,\n};\n\nexport enum ListFilterId {\n  Running = 'Running',\n  Failed = 'Failed',\n  Succeeded = 'Succeeded',\n  Cancelled = 'Cancelled',\n  Other = '-',\n}\n\nexport const ListFilterLabels = {\n  [ListFilterId.Running]: i18next.t('pipelines-plugin~Running'),\n  [ListFilterId.Failed]: i18next.t('pipelines-plugin~Failed'),\n  [ListFilterId.Succeeded]: i18next.t('pipelines-plugin~Succeeded'),\n  [ListFilterId.Cancelled]: i18next.t('pipelines-plugin~Cancelled'),\n  [ListFilterId.Other]: i18next.t('pipelines-plugin~Other'),\n};\n\nexport enum PipelineResourceListFilterId {\n  Git = 'git',\n  PullRequest = 'pullRequest',\n  Image = 'image',\n  Cluster = 'cluster',\n  Storage = 'storage',\n  CloudEvent = 'cloudEvent',\n}\n\nexport const PipelineResourceListFilterLabels = {\n  [PipelineResourceListFilterId.Git]: 'Git',\n  [PipelineResourceListFilterId.PullRequest]: 'Pull Request',\n  [PipelineResourceListFilterId.Image]: 'Image',\n  [PipelineResourceListFilterId.Cluster]: 'Cluster',\n  [PipelineResourceListFilterId.Storage]: 'Storage',\n  [PipelineResourceListFilterId.CloudEvent]: 'Cloud Event',\n};\n\n/**\n * Appends the pipeline run status to each tasks in the pipeline.\n * @param pipeline\n * @param pipelineRun\n * @param isFinallyTasks\n */\nexport const appendPipelineRunStatus = (\n  pipeline,\n  pipelineRun,\n  taskRuns: TaskRunKind[],\n  isFinallyTasks = false,\n) => {\n  const tasks = (isFinallyTasks ? pipeline.spec.finally : pipeline.spec.tasks) || [];\n\n  return tasks.map((task) => {\n    if (!pipelineRun.status) {\n      return task;\n    }\n    if (!taskRuns || taskRuns.length === 0) {\n      if (pipelineRun.spec.status === SucceedConditionReason.PipelineRunCancelled) {\n        return _.merge(task, { status: { reason: ComputedStatus.Cancelled } });\n      }\n      if (pipelineRun.spec.status === SucceedConditionReason.PipelineRunPending) {\n        return _.merge(task, { status: { reason: ComputedStatus.Idle } });\n      }\n      return _.merge(task, { status: { reason: ComputedStatus.Failed } });\n    }\n\n    const taskRun = _.find(\n      taskRuns,\n      (tr) => tr.metadata.labels[TektonResourceLabel.pipelineTask] === task.name,\n    );\n    const taskStatus: TaskRunStatus = taskRun?.status;\n\n    const mTask = _.merge(task, {\n      status: pipelineRun?.status?.taskRuns\n        ? _.get(_.find(pipelineRun.status.taskRuns, { pipelineTaskName: task.name }), 'status')\n        : taskStatus,\n    });\n    // append task duration\n    if (mTask.status && mTask.status.completionTime && mTask.status.startTime) {\n      const date =\n        new Date(mTask.status.completionTime).getTime() -\n        new Date(mTask.status.startTime).getTime();\n      mTask.status.duration = formatPrometheusDuration(date);\n    }\n    // append task status\n    if (!mTask.status) {\n      mTask.status = { reason: ComputedStatus.Pending };\n    } else if (mTask.status && mTask.status.conditions) {\n      mTask.status.reason = pipelineRunStatus(mTask) || ComputedStatus.Pending;\n    } else if (mTask.status && !mTask.status.reason) {\n      mTask.status.reason = ComputedStatus.Pending;\n    }\n    return mTask;\n  });\n};\n\nexport const getPipelineTasks = (\n  pipeline: PipelineKind,\n  pipelineRun: PipelineRunKind = {\n    apiVersion: '',\n    metadata: {},\n    kind: 'PipelineRun',\n    spec: {},\n  },\n  taskRuns: TaskRunKind[],\n): PipelineTask[][] => {\n  // Each unit in 'out' array is termed as stage | out = [stage1 = [task1], stage2 = [task2,task3], stage3 = [task4]]\n  const out = [];\n  if (!pipeline.spec?.tasks || _.isEmpty(pipeline.spec.tasks)) {\n    return out;\n  }\n  const taskList = appendPipelineRunStatus(pipeline, pipelineRun, taskRuns);\n\n  // Step 1: Push all nodes without any dependencies in different stages\n  taskList.forEach((task) => {\n    if (!conditions.hasFromDependency(task) && !conditions.hasRunAfterDependency(task)) {\n      if (out.length === 0) {\n        out.push([]);\n      }\n      out[0].push(task);\n    }\n  });\n\n  // Step 2: Push nodes with 'from' dependency and stack similar tasks in a stage\n  taskList.forEach((task) => {\n    if (!conditions.hasRunAfterDependency(task) && conditions.hasFromDependency(task)) {\n      let flag = out.length - 1;\n      for (let i = 0; i < out.length; i++) {\n        for (const t of out[i]) {\n          if (\n            t.taskRef?.name === task.resources.inputs[0].from[0] ||\n            t.name === task.resources.inputs[0].from[0]\n          ) {\n            flag = i;\n          }\n        }\n      }\n      const nextToFlag = out[flag + 1] ? out[flag + 1] : null;\n      if (\n        nextToFlag &&\n        nextToFlag[0] &&\n        nextToFlag[0].resources &&\n        nextToFlag[0].resources.inputs &&\n        nextToFlag[0].resources.inputs[0] &&\n        nextToFlag[0].resources.inputs[0].from &&\n        nextToFlag[0].resources.inputs[0].from[0] &&\n        nextToFlag[0].resources.inputs[0].from[0] === task.resources.inputs[0].from[0]\n      ) {\n        nextToFlag.push(task);\n      } else {\n        out.splice(flag + 1, 0, [task]);\n      }\n    }\n  });\n\n  // Step 3: Push nodes with 'runAfter' dependencies and stack similar tasks in a stage\n  taskList.forEach((task) => {\n    if (conditions.hasRunAfterDependency(task)) {\n      let flag = out.length - 1;\n      for (let i = 0; i < out.length; i++) {\n        for (const t of out[i]) {\n          if (t.taskRef?.name === task.runAfter[0] || t.name === task.runAfter[0]) {\n            flag = i;\n          }\n        }\n      }\n      const nextToFlag = out[flag + 1] ? out[flag + 1] : null;\n      if (\n        nextToFlag &&\n        nextToFlag[0].runAfter &&\n        nextToFlag[0].runAfter[0] &&\n        nextToFlag[0].runAfter[0] === task.runAfter[0]\n      ) {\n        nextToFlag.push(task);\n      } else {\n        out.splice(flag + 1, 0, [task]);\n      }\n    }\n  });\n  return out;\n};\n\nexport const getFinallyTasksWithStatus = (\n  pipeline: PipelineKind,\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n) => appendPipelineRunStatus(pipeline, pipelineRun, taskRuns, true);\n\nexport const containerToLogSourceStatus = (container: ContainerStatus): string => {\n  if (!container) {\n    return LOG_SOURCE_WAITING;\n  }\n  const { state, lastState } = container;\n  if (state.waiting && !_.isEmpty(lastState)) {\n    return LOG_SOURCE_RESTARTING;\n  }\n  if (state.waiting) {\n    return LOG_SOURCE_WAITING;\n  }\n  if (state.terminated) {\n    return LOG_SOURCE_TERMINATED;\n  }\n  return LOG_SOURCE_RUNNING;\n};\n\nexport type LatestPipelineRunStatus = {\n  latestPipelineRun: PipelineRunKind;\n  status: string;\n};\n\n/**\n * Takes pipeline runs and produces a latest pipeline run state.\n */\nexport const getLatestPipelineRunStatus = (\n  pipelineRuns: PipelineRunKind[],\n): LatestPipelineRunStatus => {\n  if (!pipelineRuns || pipelineRuns.length === 0) {\n    // Not enough data to build the current state\n    return { latestPipelineRun: null, status: ComputedStatus.PipelineNotStarted };\n  }\n\n  const latestPipelineRun = getLatestRun(pipelineRuns, 'creationTimestamp');\n\n  if (!latestPipelineRun) {\n    // Without the latestRun we will not have progress to show\n    return { latestPipelineRun: null, status: ComputedStatus.PipelineNotStarted };\n  }\n\n  let status: string = pipelineRunFilterReducer(latestPipelineRun);\n  if (status === '-') {\n    status = ComputedStatus.Pending;\n  }\n\n  return {\n    latestPipelineRun,\n    status,\n  };\n};\n\nexport const getPipelineRunParams = (pipelineParams: TektonParam[]): PipelineRunParam[] => {\n  return (\n    pipelineParams &&\n    pipelineParams.map((param) => ({\n      name: param.name,\n      value: param.default,\n    }))\n  );\n};\n\nexport const getPipelineRunWorkspaces = (\n  pipelineWorkspaces: PipelineModalFormWorkspace[],\n): PipelineRunWorkspace[] => {\n  return (\n    pipelineWorkspaces &&\n    pipelineWorkspaces.map((workspace) => ({\n      name: workspace.name,\n      ...workspace.data,\n    }))\n  );\n};\n\nexport const calculateDuration = (startTime: string, endTime?: string, long?: boolean) => {\n  const start = new Date(startTime).getTime();\n  const end = endTime ? new Date(endTime).getTime() : new Date().getTime();\n  const durationInSeconds = (end - start) / 1000;\n  return getDuration(durationInSeconds, long);\n};\n\nexport const pipelineRunDuration = (run: PipelineRunKind | TaskRunKind): string => {\n  const startTime = run?.status?.startTime ?? null;\n  const completionTime = run?.status?.completionTime ?? null;\n\n  // Duration cannot be computed if start time is missing or a completed/failed pipeline/task has no end time\n  if (!startTime || (!completionTime && pipelineRunStatus(run) !== 'Running')) {\n    return '-';\n  }\n  return calculateDuration(startTime, completionTime, true);\n};\n\nexport const updateServiceAccount = (\n  secretName: string,\n  originalServiceAccount: ServiceAccountType,\n  updateImagePullSecrets: boolean,\n): Promise<ServiceAccountType> => {\n  const updatedServiceAccount = _.cloneDeep(originalServiceAccount);\n  updatedServiceAccount.secrets = [...updatedServiceAccount.secrets, { name: secretName }];\n  if (updateImagePullSecrets) {\n    updatedServiceAccount.imagePullSecrets = [\n      ...updatedServiceAccount.imagePullSecrets,\n      { name: secretName },\n    ];\n  }\n  return k8sUpdate(ServiceAccountModel, updatedServiceAccount);\n};\n\nexport const associateServiceAccountToSecret = (\n  secret: SecretKind,\n  namespace: string,\n  isImageSecret: boolean,\n) => {\n  k8sGet(ServiceAccountModel, PIPELINE_SERVICE_ACCOUNT, namespace)\n    .then((serviceAccount) => {\n      if (_.find(serviceAccount.secrets, (s) => s.name === secret.metadata.name) === undefined) {\n        updateServiceAccount(secret.metadata.name, serviceAccount, isImageSecret);\n      }\n    })\n    .catch((err) => {\n      errorModal({ error: err.message });\n    });\n};\n\ntype KeyValuePair = {\n  key: string;\n  value: string;\n};\n\nconst getAnnotationKey = (secretType: string, suffix: number) => {\n  const annotationPrefix = 'tekton.dev';\n  if (secretType === SecretAnnotationId.Git) {\n    return `${annotationPrefix}/${SecretAnnotationId.Git}-${suffix}`;\n  }\n  if (secretType === SecretAnnotationId.Image) {\n    return `${annotationPrefix}/${SecretAnnotationId.Image}-${suffix}`;\n  }\n  return null;\n};\n\nexport const getSecretAnnotations = (\n  annotation: KeyValuePair,\n  existingAnnotations: { [key: string]: string } = {},\n) => {\n  let count = 0;\n  let annotationKey = getAnnotationKey(annotation?.key, count);\n  if (!annotationKey) {\n    return existingAnnotations;\n  }\n  while (\n    existingAnnotations[annotationKey] &&\n    existingAnnotations[annotationKey] !== annotation?.value\n  ) {\n    annotationKey = getAnnotationKey(annotation?.key, ++count);\n  }\n\n  return { ...existingAnnotations, [annotationKey]: annotation?.value };\n};\n\nexport const pipelinesTab = (kindObj: K8sKind) => {\n  switch (kindObj.kind) {\n    case PipelineModel.kind:\n    case TaskModel.kind:\n    case EventListenerModel.kind:\n      return '';\n    case PipelineRunModel.kind:\n      return 'pipeline-runs';\n    case PipelineResourceModel.kind:\n      return 'pipeline-resources';\n    case ConditionModel.kind:\n      return 'conditions';\n    case TaskRunModel.kind:\n      return 'task-runs';\n    case ClusterTaskModel.kind:\n      return 'cluster-tasks';\n    case TriggerTemplateModel.kind:\n      return 'trigger-templates';\n    case TriggerBindingModel.kind:\n      return 'trigger-bindings';\n    case ClusterTriggerBindingModel.kind:\n      return 'cluster-trigger-bindings';\n    case RepositoryModel.kind:\n      return 'repositories';\n    default:\n      return null;\n  }\n};\n\nexport const getMatchedPVCs = (\n  pvcResources: PersistentVolumeClaimKind[],\n  ownerResourceName: string,\n  ownerResourceKind: string,\n): PersistentVolumeClaimKind[] => {\n  return pvcResources.filter((pvc) => {\n    const { ownerReferences = [] } = pvc.metadata;\n\n    return ownerReferences.some(\n      (reference) => reference.name === ownerResourceName && reference.kind === ownerResourceKind,\n    );\n  });\n};\n\nexport const getPipeline = (resource: K8sResourceKind, pipelines: PipelineKind[]): PipelineKind => {\n  const pipeline = pipelines.find((p: PipelineKind) => p.metadata.name === resource.metadata.name);\n  return pipeline;\n};\n\nexport const getTriggerTemplates = (\n  pipeline: PipelineKind,\n  triggerTemplates: TriggerTemplateKind[],\n): TriggerTemplateKind[] => {\n  const triggerTemplate = triggerTemplates.filter(\n    (tt: TriggerTemplateKind) =>\n      !!tt.spec.resourcetemplates.find(\n        (rt) => rt.spec.pipelineRef?.name === pipeline.metadata.name,\n      ),\n  );\n  return triggerTemplate;\n};\n\nexport const getEventListeners = (\n  triggerTemplates: TriggerTemplateKind[],\n  eventListeners: EventListenerKind[],\n): EventListenerKind[] => {\n  const resourceEventListeners = eventListeners.reduce((acc, et: EventListenerKind) => {\n    const triggers = et.spec.triggers.filter((t) =>\n      triggerTemplates.find((tt) => tt?.metadata.name === t?.template?.ref),\n    );\n    if (triggers.length > 0) {\n      acc.push(et);\n    }\n    return acc;\n  }, []);\n  return resourceEventListeners;\n};\n\nexport const returnValidPipelineModel = (pipeline: PipelineKind): K8sModel => {\n  if (pipeline.apiVersion === 'tekton.dev/v1beta1') {\n    return PipelineModelV1Beta1;\n  }\n  return PipelineModel;\n};\n\nexport const returnValidPipelineRunModel = (pipelineRun: PipelineRunKind): K8sModel => {\n  if (pipelineRun.apiVersion === 'tekton.dev/v1beta1') {\n    return PipelineRunModelV1Beta1;\n  }\n  return PipelineRunModel;\n};\n\nexport const returnValidTaskModel = (task: TaskKind): K8sModel => {\n  if (task.apiVersion === 'tekton.dev/v1beta1') {\n    return TaskModelV1Beta1;\n  }\n  return TaskModel;\n};\n\nexport enum TaskRunResultsAnnotations {\n  KEY = 'task.results.key',\n  TYPE = 'task.results.type',\n}\n\nexport enum TaskRunResultsAnnotationValue {\n  EXTERNAL_LINK = 'external-link',\n}\n\nexport enum TaskRunResults {\n  IMAGE_REPOSITORY = 'IMAGE_URL',\n  SBOM = 'LINK_TO_SBOM',\n  SCAN_OUTPUT = 'SCAN_OUTPUT',\n  TEST_OUTPUT = 'TEST_OUTPUT',\n}\n\nexport const getSbomTaskRun = (taskruns: TaskRunKind[]): TaskRunKind =>\n  taskruns?.find(\n    (tr) => tr?.metadata?.annotations?.[TaskRunResultsAnnotations.KEY] === TaskRunResults.SBOM,\n  );\n\nexport const hasExternalLink = (sbomTaskRun: TaskRunKind): boolean =>\n  sbomTaskRun?.metadata?.annotations?.[TaskRunResultsAnnotations.TYPE] ===\n  TaskRunResultsAnnotationValue.EXTERNAL_LINK;\n\nexport const getSbomLink = (sbomTaskRun: TaskRunKind): string | undefined =>\n  (sbomTaskRun?.status?.results || sbomTaskRun?.status?.taskResults)?.find(\n    (r) => r.name === TaskRunResults.SBOM,\n  )?.value;\n\nexport const getImageUrl = (PipelineRun: PipelineRunKind): string | undefined =>\n  (PipelineRun?.status?.results || PipelineRun?.status?.pipelineResults)?.find(\n    (r) => r.name === TaskRunResults.IMAGE_REPOSITORY,\n  )?.value;\n\nexport const taskRunStatus = (taskRun: TaskRunKind | PLRTaskRunData): ComputedStatus => {\n  if (!taskRun?.status?.conditions?.length) {\n    return ComputedStatus.Pending;\n  }\n  const status: ComputedStatus = pipelineRunStatus(taskRun);\n  return status;\n};\n\nexport const getPipelineRunStatus = (pipelineRun: PipelineRunKind): TaskStatus => {\n  const conditionsMessage = pipelineRun?.status?.conditions?.find(\n    (condition) => condition?.type === 'Succeeded',\n  )?.message;\n\n  // Extracting key-value pairs using updated regular expression\n  const matches = conditionsMessage?.match(/(\\w+)(?::\\s*|\\s+)(\\d+)/g);\n  // Creating the object dynamically\n  const result: PipelineRunStatusType = {};\n  matches?.forEach((match) => {\n    const [key, value] = match.split(/(?::\\s*|\\s+)/);\n    result[key.trim()] = Number(value.trim());\n  });\n\n  const totalSucceeded =\n    (result?.Completed || 0) - (result?.Failed || 0) - (result?.Cancelled || 0);\n\n  const taskRunStatusObj: TaskStatus = {\n    Running: result?.Incomplete || 0,\n    Succeeded: totalSucceeded || 0,\n    Cancelled: result?.Cancelled || 0,\n    Failed: result?.Failed || 0,\n    Skipped: result?.Skipped || 0,\n    Completed: result?.Completed || 0,\n    Cancelling: result?.Cancelled || 0,\n    PipelineNotStarted: 0,\n    Pending: 0,\n  };\n\n  return taskRunStatusObj;\n};\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n\nexport const bitBucketUserNameRegex = /^[a-z]([a-z0-9_]-?)*[a-z0-9]$/;\n","import { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\n\nexport type ResourceTarget = 'inputs' | 'outputs';\n\nexport type TektonParam = {\n  default?: string | string[];\n  description?: string;\n  name: string;\n  type?: 'string' | 'array';\n};\n\nexport type TektonTaskSteps = {\n  // TODO: Figure out required fields\n  name: string;\n  args?: string[];\n  command?: string[];\n  image?: string;\n  resources?: {}[] | {};\n  env?: { name: string; value: string }[];\n  script?: string[];\n};\n\nexport type TaskResult = {\n  name: string;\n  description?: string;\n};\n\nexport type TektonTaskSpec = {\n  metadata?: {};\n  description?: string;\n  steps: TektonTaskSteps[];\n  params?: TektonParam[];\n  resources?: TektonResourceGroup<TektonResource>;\n  results?: TaskResult[];\n  workspaces?: TektonWorkspace[];\n};\n\nexport type TektonResourceGroup<ResourceType> = {\n  inputs?: ResourceType[];\n  outputs?: ResourceType[];\n};\n\n/** Deprecated upstream - Workspaces are replacing Resources */\nexport type TektonResource = {\n  name: string;\n  optional?: boolean;\n  type: string; // TODO: limit to known strings\n};\n\nexport type TektonWorkspace = {\n  name: string;\n  description?: string;\n  mountPath?: string;\n  readOnly?: boolean;\n  optional?: boolean;\n};\n\nexport type TektonResultsRun = {\n  name: string;\n  value: string;\n};\n\nexport interface Addon {\n  enablePipelinesAsCode: boolean;\n  params: Param[];\n}\n\nexport interface Param {\n  name: string;\n  value: string;\n}\n\nexport interface Dashboard {\n  readonly: boolean;\n}\n\nexport enum MetricsLevel {\n  METRICS_PIPELINERUN_DURATION_TYPE = 'metrics.pipelinerun.duration-type',\n  METRICS_PIPELINERUN_LEVEL = 'metrics.pipelinerun.level',\n  METRICS_TASKRUN_DURATION_TYPE = 'metrics.taskrun.duration-type',\n  METRICS_TASKRUN_LEVEL = 'metrics.taskrun.level',\n}\n\nexport enum LevelTypes {\n  PIPELINE = 'pipeline',\n  PIPELINERUN = 'pipelinerun',\n  TASK = 'task',\n  TASKRUN = 'taskrun',\n}\n\nexport enum DurationTypes {\n  HISTOGRAM = 'histogram',\n  LASTVALUE = 'lastvalue',\n  NAMESPACE = 'namespace',\n}\n\nexport interface Pipeline {\n  'default-service-account': string;\n  'disable-affinity-assistant': boolean;\n  'disable-creds-init': boolean;\n  'enable-api-fields': string;\n  'enable-custom-tasks': boolean;\n  'enable-tekton-oci-bundles': boolean;\n  [MetricsLevel.METRICS_PIPELINERUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_PIPELINERUN_LEVEL]: LevelTypes;\n  [MetricsLevel.METRICS_TASKRUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_TASKRUN_LEVEL]: LevelTypes;\n  params: Param[];\n  'require-git-ssh-secret-known-hosts': boolean;\n  'running-in-environment-with-injected-sidecars': boolean;\n  'scope-when-expressions-to-task': boolean;\n}\n\nexport interface Pruner {\n  keep: number;\n  resources: string[];\n  schedule: string;\n}\n\nexport interface Trigger {\n  'default-service-account': string;\n  'enable-api-fields': string;\n}\n\nexport interface Spec {\n  addon: Addon;\n  config: {};\n  dashboard: Dashboard;\n  hub: {};\n  params: Param[];\n  pipeline: Pipeline;\n  profile: string;\n  pruner: Pruner;\n  targetNamespace: string;\n  trigger: Trigger;\n}\n\nexport interface Status {\n  conditions: TektonConfigCondition[];\n}\n\nexport interface TektonConfigCondition {\n  lastTransitionTime: string;\n  status: string;\n  type: string;\n}\n\nexport type TektonConfig = K8sResourceCommon & {\n  spec: Spec;\n  status: Status;\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  ObjectMetadata,\n} from '@console/internal/module/k8s';\nimport { TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineKind, PipelineSpec } from './pipeline';\n\nexport type PLRTaskRunStep = {\n  container: string;\n  imageID?: string;\n  name: string;\n  waiting?: {\n    reason: string;\n  };\n  running?: {\n    startedAt: string;\n  };\n  terminated?: {\n    containerID: string;\n    exitCode: number;\n    finishedAt: string;\n    reason: string;\n    startedAt: string;\n    message?: string;\n  };\n};\n\nexport type PLRTaskRunData = {\n  pipelineTaskName: string;\n  status: {\n    completionTime?: string;\n    conditions: Condition[];\n    /** Can be empty */\n    podName: string;\n    startTime: string;\n    steps?: PLRTaskRunStep[];\n    taskSpec?: TektonTaskSpec;\n    taskResults?: { name: string; value: string }[]; // in tekton v1 taskResults is renamed to results\n    results?: { name: string; value: string }[];\n  };\n};\n\nexport type PLRTaskRuns = {\n  [taskRunName: string]: PLRTaskRunData;\n};\n\nexport type VolumeTypeSecret = {\n  secretName: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypeConfigMaps = {\n  name: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypePVC = {\n  claimName: string;\n};\n\nexport type PersistentVolumeClaimType = {\n  persistentVolumeClaim: VolumeTypePVC;\n};\n\nexport type VolumeClaimTemplateType = {\n  volumeClaimTemplate: VolumeTypeClaim;\n};\nexport type VolumeTypeClaim = {\n  metadata?: ObjectMetadata;\n  spec: {\n    accessModes: string[];\n    resources: {\n      requests: {\n        storage: string;\n      };\n    };\n    storageClassName?: string;\n    volumeMode?: string;\n  };\n};\n\nexport type Condition = {\n  type: string;\n  status: string;\n  reason?: string;\n  message?: string;\n  lastTransitionTime?: string;\n};\n\nexport type ChildReferences = {\n  apiVersion: string;\n  kind: string;\n  name: string;\n  pipelineTaskName: string;\n};\n\nexport type PipelineRunEmbeddedResourceParam = { name: string; value: string };\nexport type PipelineRunEmbeddedResource = {\n  name: string;\n  resourceSpec: {\n    params: PipelineRunEmbeddedResourceParam[];\n    type: string;\n  };\n};\nexport type PipelineRunReferenceResource = {\n  name: string;\n  resourceRef: {\n    name: string;\n  };\n};\nexport type PipelineRunResource = PipelineRunReferenceResource | PipelineRunEmbeddedResource;\n\nexport type PipelineRunWorkspace = {\n  name: string;\n  [volumeType: string]:\n    | VolumeTypeSecret\n    | VolumeTypeConfigMaps\n    | VolumeTypePVC\n    | VolumeTypeClaim\n    | {};\n};\n\nexport type PipelineRunParam = {\n  name: string;\n  value: string | string[];\n\n  // TODO: To be validated\n  input?: string;\n  output?: string;\n  resource?: object;\n};\n\nexport type PipelineRunStatus = {\n  succeededCondition?: string;\n  creationTimestamp?: string;\n  conditions?: Condition[];\n  startTime?: string;\n  completionTime?: string;\n  taskRuns?: PLRTaskRuns;\n  pipelineSpec: PipelineSpec;\n  skippedTasks?: {\n    name: string;\n  }[];\n  pipelineResults?: TektonResultsRun[]; // in tekton v1 pipelineResults is renamed to results\n  results?: TektonResultsRun[];\n  childReferences?: ChildReferences[];\n};\n\nexport type PipelineRunKind = K8sResourceCommon & {\n  spec: {\n    pipelineRef?: { name: string };\n    pipelineSpec?: PipelineSpec;\n    params?: PipelineRunParam[];\n    workspaces?: PipelineRunWorkspace[];\n    resources?: PipelineRunResource[];\n    serviceAccountName?: string;\n    timeout?: string;\n    // Only used in a single case - cancelling a pipeline; should not be copied between PLRs\n    status?: 'StoppedRunFinally' | 'PipelineRunPending' | 'CancelledRunFinally';\n    // In tekton v1 ServiceAccountName is moved\n    // to TaskRunTemplate as TaskRunTemplate.ServiceAccountName\n    taskRunTemplate?: {\n      serviceAccountName?: string;\n    };\n  };\n  status?: PipelineRunStatus;\n};\n\nexport type PipelineWithLatest = PipelineKind & {\n  latestRun?: PipelineRunKind;\n};\n\nexport const PipelineRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'PipelineRun',\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  PersistentVolumeClaimKind,\n} from '@console/internal/module/k8s';\nimport { TektonResource, TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineTaskParam, PipelineTaskRef } from './pipeline';\nimport {\n  Condition,\n  PLRTaskRunStep,\n  VolumeTypeConfigMaps,\n  VolumeTypePVC,\n  VolumeTypeSecret,\n} from './pipelineRun';\n\nexport type TaskRunWorkspace = {\n  name: string;\n  volumeClaimTemplate?: PersistentVolumeClaimKind;\n  persistentVolumeClaim?: VolumeTypePVC;\n  configMap?: VolumeTypeConfigMaps;\n  emptyDir?: {};\n  secret?: VolumeTypeSecret;\n  subPath?: string;\n};\n\nexport type TaskRunStatus = {\n  completionTime?: string;\n  conditions?: Condition[];\n  podName?: string;\n  startTime?: string;\n  steps?: PLRTaskRunStep[];\n  taskResults?: TektonResultsRun[]; // in tekton v1 taskResults is renamed to results\n  results?: TektonResultsRun[];\n};\n\nexport type TaskRunKind = K8sResourceCommon & {\n  spec: {\n    taskRef?: PipelineTaskRef;\n    taskSpec?: TektonTaskSpec;\n    serviceAccountName?: string;\n    params?: PipelineTaskParam[];\n    resources?: TektonResource[];\n    timeout?: string;\n    workspaces?: TaskRunWorkspace[];\n  };\n  status?: TaskRunStatus;\n};\n\nexport const TaskRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'TaskRun',\n};\n\nexport type PipelineRunStatusType = {\n  Completed?: number;\n  Failed?: number;\n  Skipped?: number;\n  Cancelled?: number;\n  Incomplete?: number;\n  PipelineNotStarted?: number;\n  Pending?: number;\n  Running?: number;\n  Succeeded?: number;\n};\n","export enum ComputedStatus {\n  Cancelling = 'Cancelling',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Running = 'Running',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'In Progress' = 'In Progress',\n  FailedToStart = 'FailedToStart',\n  PipelineNotStarted = 'PipelineNotStarted',\n  Skipped = 'Skipped',\n  Cancelled = 'Cancelled',\n  Pending = 'Pending',\n  Idle = 'Idle',\n  Other = '-',\n}\n\nexport enum CustomRunStatus {\n  RunCancelled = 'RunCancelled',\n}\n","import { chart_color_black_400 as skippedColor } from '@patternfly/react-tokens/dist/js/chart_color_black_400';\nimport { chart_color_black_500 as cancelledColor } from '@patternfly/react-tokens/dist/js/chart_color_black_500';\nimport { chart_color_blue_100 as pendingColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_300 as runningColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_green_400 as successColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { global_danger_color_100 as failureColor } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport i18next from 'i18next';\nimport {\n  K8sKind,\n  referenceForModel,\n  GroupVersionKind,\n  apiVersionForModel,\n} from '@console/internal/module/k8s';\nimport { TektonResourceLabel } from '../components/pipelines/const';\nimport {\n  ClusterTaskModel,\n  ClusterTriggerBindingModel,\n  TaskModel,\n  TriggerBindingModel,\n  PipelineModel,\n} from '../models';\nimport { ComputedStatus, PipelineKind, PipelineRunKind, PipelineTask, TaskRunKind } from '../types';\nimport { pipelineRunFilterReducer, SucceedConditionReason } from './pipeline-filter-reducer';\n\ninterface Metadata {\n  name: string;\n  namespace?: string;\n}\n\nexport interface PropPipelineData {\n  metadata: Metadata;\n  latestRun?: PipelineRunKind;\n}\n\nexport interface StatusMessage {\n  message: string;\n  pftoken: { name: string; value: string; var: string };\n}\n\nexport interface TaskStatus {\n  PipelineNotStarted: number;\n  Pending: number;\n  Running: number;\n  Succeeded: number;\n  Cancelled: number;\n  Failed: number;\n  Skipped: number;\n  Completed?: number;\n  Cancelling?: number;\n}\n\nexport const getLatestRun = (runs: PipelineRunKind[], field: string): PipelineRunKind => {\n  if (!runs || !(runs.length > 0) || !field) {\n    return null;\n  }\n  let latestRun = runs[0];\n  if (field === 'creationTimestamp') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].metadata &&\n        runs[i].metadata[field] &&\n        new Date(runs[i].metadata[field]) > new Date(latestRun.metadata[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else if (field === 'startTime' || field === 'completionTime') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].status &&\n        runs[i].status[field] &&\n        new Date(runs[i].status[field]) > new Date(latestRun.status[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else {\n    latestRun = runs[runs.length - 1];\n  }\n  if (!latestRun.status) {\n    latestRun = { ...latestRun, status: { pipelineSpec: { tasks: [] } } };\n  }\n  if (!latestRun.status.succeededCondition) {\n    latestRun.status = { ...latestRun.status, succeededCondition: '' };\n  }\n  latestRun.status.succeededCondition = pipelineRunFilterReducer(latestRun);\n  return latestRun;\n};\n\nexport const augmentRunsToData = (\n  pipelines: PropPipelineData[],\n  pipelineruns: PipelineRunKind[],\n): PropPipelineData[] => {\n  return pipelines.map((pipeline) => {\n    const prsForPipeline = pipelineruns.filter(\n      (pr) => pr.metadata.labels?.['tekton.dev/pipeline'] === pipeline.metadata.name,\n    );\n    pipeline.latestRun = getLatestRun(prsForPipeline, 'creationTimestamp');\n    return pipeline;\n  });\n};\n\nexport const getRunStatusColor = (status: string): StatusMessage => {\n  switch (status) {\n    case ComputedStatus.Succeeded:\n      return { message: i18next.t('pipelines-plugin~Succeeded'), pftoken: successColor };\n    case ComputedStatus.Failed:\n      return { message: i18next.t('pipelines-plugin~Failed'), pftoken: failureColor };\n    case ComputedStatus.FailedToStart:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun failed to start'),\n        pftoken: failureColor,\n      };\n    case ComputedStatus.Running:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n    case ComputedStatus['In Progress']:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n\n    case ComputedStatus.Skipped:\n      return { message: i18next.t('pipelines-plugin~Skipped'), pftoken: skippedColor };\n    case ComputedStatus.Cancelled:\n      return { message: i18next.t('pipelines-plugin~Cancelled'), pftoken: cancelledColor };\n    case ComputedStatus.Cancelling:\n      return { message: i18next.t('pipelines-plugin~Cancelling'), pftoken: cancelledColor };\n    case ComputedStatus.Idle:\n    case ComputedStatus.Pending:\n      return { message: i18next.t('pipelines-plugin~Pending'), pftoken: pendingColor };\n    default:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun not started yet'),\n        pftoken: pendingColor,\n      };\n  }\n};\n\nexport const truncateName = (name: string, length: number): string =>\n  name.length < length ? name : `${name.slice(0, length - 1)}...`;\n\nexport const getPipelineFromPipelineRun = (pipelineRun: PipelineRunKind): PipelineKind => {\n  const pipelineName =\n    pipelineRun?.metadata?.labels?.[TektonResourceLabel.pipeline] || pipelineRun?.metadata?.name;\n  const pipelineSpec = pipelineRun?.status?.pipelineSpec || pipelineRun?.spec?.pipelineSpec;\n  if (!pipelineName || !pipelineSpec) {\n    return null;\n  }\n  return {\n    apiVersion: apiVersionForModel(PipelineModel),\n    kind: PipelineModel.kind,\n    metadata: {\n      name: pipelineName,\n      namespace: pipelineRun.metadata.namespace,\n    },\n    spec: pipelineSpec,\n  };\n};\n\nexport const totalPipelineRunTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalTasks = (executedPipeline.spec?.tasks || []).length ?? 0;\n  const finallyTasks = (executedPipeline.spec?.finally || []).length ?? 0;\n  return totalTasks + finallyTasks;\n};\n\nexport const totalPipelineRunCustomTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalCustomTasks =\n    (executedPipeline.spec?.tasks || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  const finallyCustomTasks =\n    (executedPipeline.spec?.finally || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  return totalCustomTasks + finallyCustomTasks;\n};\n\nexport const getTaskStatus = (\n  pipelinerun: PipelineRunKind,\n  pipeline: PipelineKind,\n  taskRuns: TaskRunKind[],\n): TaskStatus => {\n  const totalTasks = totalPipelineRunTasks(pipeline) - totalPipelineRunCustomTasks(pipeline);\n  const plrTasks = (): string[] => {\n    if (pipelinerun?.status?.taskRuns) {\n      return Object.keys(pipelinerun.status.taskRuns);\n    }\n    if (taskRuns) {\n      return taskRuns?.map((tRun) => tRun.metadata.name);\n    }\n    return [];\n  };\n  const plrTaskLength = plrTasks().length;\n  const skippedTaskLength = (pipelinerun?.status?.skippedTasks || []).length;\n  const taskStatus: TaskStatus = {\n    PipelineNotStarted: 0,\n    Pending: 0,\n    Running: 0,\n    Succeeded: 0,\n    Failed: 0,\n    Cancelled: 0,\n    Skipped: skippedTaskLength,\n  };\n\n  if (pipelinerun?.status?.taskRuns || taskRuns) {\n    plrTasks().forEach((taskRun) => {\n      const status = pipelineRunFilterReducer(\n        taskRuns?.find((tRun) => tRun.metadata.name === taskRun) ||\n          pipelinerun.status.taskRuns[taskRun],\n      );\n      if (status === 'Succeeded') {\n        taskStatus[ComputedStatus.Succeeded]++;\n      } else if (status === 'Running') {\n        taskStatus[ComputedStatus.Running]++;\n      } else if (status === 'Failed') {\n        taskStatus[ComputedStatus.Failed]++;\n      } else if (status === 'Cancelled') {\n        taskStatus[ComputedStatus.Cancelled]++;\n      } else {\n        taskStatus[ComputedStatus.Pending]++;\n      }\n    });\n\n    const pipelineRunHasFailure = taskStatus[ComputedStatus.Failed] > 0;\n    const pipelineRunIsCancelled =\n      pipelineRunFilterReducer(pipelinerun) === ComputedStatus.Cancelled;\n    const unhandledTasks =\n      totalTasks >= plrTaskLength ? totalTasks - plrTaskLength - skippedTaskLength : totalTasks;\n\n    if (pipelineRunHasFailure || pipelineRunIsCancelled) {\n      taskStatus[ComputedStatus.Cancelled] += unhandledTasks;\n    } else {\n      taskStatus[ComputedStatus.Pending] += unhandledTasks;\n    }\n  } else if (\n    pipelinerun?.status?.conditions?.[0]?.status === 'False' ||\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunCancelled\n  ) {\n    taskStatus[ComputedStatus.Cancelled] = totalTasks;\n  } else if (pipelinerun?.spec.status === SucceedConditionReason.PipelineRunPending) {\n    taskStatus[ComputedStatus.Pending] += totalTasks;\n  } else {\n    taskStatus[ComputedStatus.PipelineNotStarted]++;\n  }\n  return taskStatus;\n};\n\nexport const getResourceModelFromTaskKind = (kind: string): K8sKind => {\n  if (kind === ClusterTaskModel.kind) {\n    return ClusterTaskModel;\n  }\n  if (kind === TaskModel.kind || kind === undefined) {\n    return TaskModel;\n  }\n  return null;\n};\n\nexport const getSafeTaskResourceKind = (kind: string): string =>\n  (getResourceModelFromTaskKind(kind) || TaskModel).kind;\n\nexport const getResourceModelFromBindingKind = (kind: string): K8sKind => {\n  if (kind === ClusterTriggerBindingModel.kind) {\n    return ClusterTriggerBindingModel;\n  }\n  if (kind === TriggerBindingModel.kind || kind === undefined) {\n    return TriggerBindingModel;\n  }\n  return null;\n};\n\nexport const getSafeBindingResourceKind = (kind: string): string =>\n  (getResourceModelFromBindingKind(kind) || TriggerBindingModel).kind;\n\nexport const getResourceModelFromTask = (task: PipelineTask): K8sKind => {\n  const {\n    taskRef: { kind },\n  } = task;\n\n  return getResourceModelFromTaskKind(kind);\n};\n\nexport const pipelineRefExists = (pipelineRun: PipelineRunKind): boolean =>\n  !!pipelineRun.spec.pipelineRef?.name;\n\nexport const getModelReferenceFromTaskKind = (kind: string): GroupVersionKind => {\n  const model = getResourceModelFromTaskKind(kind);\n  return referenceForModel(model);\n};\n\nexport const countRunningTasks = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): number => {\n  const taskStatuses = taskRuns && getTaskStatus(pipelineRun, undefined, taskRuns);\n  return taskStatuses?.Running;\n};\n\nexport const shouldHidePipelineRunStop = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    (countRunningTasks(pipelineRun, taskRuns) > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunStopForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    (taskRunStatusObj?.Running > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunCancel = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    countRunningTasks(pipelineRun, taskRuns) > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n\nexport const shouldHidePipelineRunCancelForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    taskRunStatusObj?.Running > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n","import { GitProvider } from '@console/git-service/src';\nimport { RepositoryFormValues } from './types';\n\nexport enum RepositoryFields {\n  REPOSITORY = 'Repository',\n  URL_REPO = 'RepoUrl',\n  URL_ORG = 'RepoOrg',\n  SHA = 'sha',\n  EVENT_TYPE = 'EventType',\n}\n\nexport enum RepoAnnotationFields {\n  SHA_MESSAGE = 'sha_message',\n  SHA_URL = 'sha_url',\n  REPO_URL = 'repo_url',\n  BRANCH = 'Branch',\n}\n\nexport enum RepositoryRuntimes {\n  golang = 'go',\n  nodejs = 'nodejs',\n  python = 'python',\n  java = 'java',\n}\n\nexport const RepositoryLabels: Record<RepositoryFields, string> = {\n  [RepositoryFields.REPOSITORY]: 'pipelinesascode.tekton.dev/repository',\n  [RepositoryFields.URL_REPO]: 'pipelinesascode.tekton.dev/url-repository',\n  [RepositoryFields.URL_ORG]: 'pipelinesascode.tekton.dev/url-org',\n  [RepositoryFields.SHA]: 'pipelinesascode.tekton.dev/sha',\n  [RepositoryFields.EVENT_TYPE]: 'pipelinesascode.tekton.dev/event-type',\n};\n\nexport const RepositoryAnnotations: Record<RepoAnnotationFields, string> = {\n  [RepoAnnotationFields.SHA_MESSAGE]: 'pipelinesascode.tekton.dev/sha-title',\n  [RepoAnnotationFields.SHA_URL]: 'pipelinesascode.tekton.dev/sha-url',\n  [RepoAnnotationFields.REPO_URL]: 'pipelinesascode.tekton.dev/repo-url',\n  [RepoAnnotationFields.BRANCH]: 'pipelinesascode.tekton.dev/branch',\n};\n\nexport const baseURL = 'https://github.com';\n\nexport enum PacConfigurationTypes {\n  GITHUB = 'github',\n  WEBHOOK = 'webhook',\n}\n\nexport const defaultRepositoryFormValues: RepositoryFormValues = {\n  gitUrl: '',\n  githubAppAvailable: false,\n  gitProvider: GitProvider.INVALID,\n  name: '',\n  method: 'github',\n  showOverviewPage: false,\n  yamlData: ``,\n  webhook: {\n    token: '',\n    method: 'token',\n    secret: '',\n    url: '',\n    user: '',\n    autoAttach: false,\n  },\n};\n\nexport const AccessTokenDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token',\n  [GitProvider.GITLAB]: 'https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/',\n};\n\nexport const WebhookDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/developers/webhooks-and-events/webhooks/creating-webhooks',\n  [GitProvider.GITLAB]:\n    'https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#configure-a-webhook-in-gitlab',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/manage-webhooks/',\n};\n\nexport const gitProviderTypesHosts = ['github.com', 'bitbucket.org', 'gitlab.com'];\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { GitProvider } from '@console/git-service/src';\nimport { importFlowRepositoryValidationSchema } from '@console/pipelines-plugin/src/components/repository/repository-form-utils';\nimport { nameValidationSchema, nameRegex } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  gitValidationSchema,\n  dockerValidationSchema,\n  buildValidationSchema,\n  gitUrlRegex,\n  resourcesValidationSchema,\n  devfileValidationSchema,\n  importFlowPipelineTemplateValidationSchema,\n} from './validation-schema';\n\nexport const validationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: nameValidationSchema(t),\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    image: imageValidationSchema(t),\n    git: gitValidationSchema(t),\n    docker: dockerValidationSchema(t),\n    devfile: devfileValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    build: buildValidationSchema,\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n    pac: importFlowRepositoryValidationSchema(t),\n    pipeline: importFlowPipelineTemplateValidationSchema,\n  });\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  if (hasDomain(url, 'gitea.com') || url.includes('gitea')) {\n    return GitProvider.GITEA;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nexport const createComponentName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return nameString;\n  }\n\n  const kebabCaseStr = _.kebabCase(nameString);\n  return nameString.match(/^\\d/) || kebabCaseStr.match(/^\\d/)\n    ? `ocp-${kebabCaseStr}`\n    : kebabCaseStr;\n};\n\nexport const detectGitRepoName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createComponentName(name);\n};\n","import { parsePrometheusDuration } from '@openshift-console/plugin-shared/src/datetime/prometheus';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport {\n  DataPoint,\n  PrometheusResponse,\n  PrometheusResult,\n} from '@console/internal/components/graphs';\nimport { humanizeNumberSI } from '@console/internal/components/utils';\nimport { dateFormatterNoYear } from '@console/internal/components/utils/datetime';\nimport { PipelineKind } from '../../../types';\nimport { PipelineMetricsLevel } from '../const';\n\nexport interface GraphData {\n  chartName: string;\n  hasData: boolean;\n}\nexport interface PipelineMetricsGraphProps {\n  pipeline: PipelineKind;\n  timespan: number;\n  queryPrefix: string;\n  metricsLevel: string;\n  interval: number;\n  width?: number;\n\n  loaded?: boolean;\n  onLoad?: (g: GraphData) => void;\n}\nexport enum PipelineQuery {\n  NUMBER_OF_PIPELINE_RUNS = 'NUMBER_OF_PIPELINE_RUNS',\n  PIPELINE_RUN_DURATION = 'PIPELINE_RUN_DURATION',\n  PIPELINE_RUN_TASK_RUN_DURATION = 'PIPELINE_RUN_TASK_RUN_DURATION',\n  PIPELINE_SUCCESS_RATIO = 'PIPELINE_SUCCESS_RATIO',\n}\n\nexport enum MetricsQueryPrefix {\n  TEKTON = 'tekton',\n  TEKTON_PIPELINES_CONTROLLER = 'tekton_pipelines_controller',\n}\n\nexport const metricsQueries = (\n  prefix: string = MetricsQueryPrefix.TEKTON_PIPELINES_CONTROLLER,\n) => ({\n  [PipelineMetricsLevel.PIPELINE_TASK_LEVEL]: {\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"}`,\n    ),\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})`,\n    ),\n  },\n  [PipelineMetricsLevel.PIPELINERUN_TASKRUN_LEVEL]: {\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(count by (pipelinerun) (${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"}))`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_TASK_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_taskrun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})  by (pipelinerun, task)`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})  by (pipelinerun)`,\n    ),\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `count(sort_desc(${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})) by(status)`,\n    ),\n  },\n  [PipelineMetricsLevel.UNSIMPLIFIED_METRICS_LEVEL]: {\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(count by (pipelinerun) (${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"}))`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_TASK_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_taskrun_duration_seconds_sum{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})  by (pipelinerun, task)`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds_sum{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})  by (pipelinerun)`,\n    ),\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `count(sort_desc(${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})) by(status)`,\n    ),\n  },\n});\n\nconst formatPositiveValue = (v: number): string =>\n  v === 0 || (v >= 0.001 && v < 1e23) ? humanizeNumberSI(v).string : v.toExponential(1);\nexport const formatValue = (v: number): string =>\n  (v < 0 ? '-' : '') + formatPositiveValue(Math.abs(v));\nexport const formatDate = (date: Date) => {\n  return dateFormatterNoYear.format(date);\n};\nexport const formatTimeSeriesValues = (result: PrometheusResult, samples: number, span: number) => {\n  const { metric, values } = result;\n  const newValues = _.map(values, (v) => {\n    const y = Number(v[1]);\n    return {\n      x: new Date(new Date(v[0] * 1000).setHours(0, 0, 0, 0)),\n      y: Number.isNaN(y) ? null : y,\n      metric,\n    };\n  });\n\n  // The data may have missing values, so we fill those gaps with nulls so that the graph correctly\n  // shows the missing values as gaps in the line\n  const start = Number(_.get(newValues, '[0].x'));\n  const end = Number(_.get(_.last(newValues), 'x'));\n  const step = span / samples;\n  _.range(start, end, step).forEach((t, i) => {\n    const x = new Date(t);\n    if (_.get(newValues, [i, 'x']) > x) {\n      newValues.splice(i, 0, { x, y: null, metric });\n    }\n  });\n\n  return newValues;\n};\n\ntype XMutator = (x: any) => Date | string;\ntype YMutator = (y: any) => number;\nexport const getRangeVectorData = (\n  response: PrometheusResponse,\n  xMutator: XMutator,\n  yMutator?: YMutator,\n) => {\n  const results = response?.data?.result || [];\n  return results?.map((r) => {\n    return r?.values?.map(([x, y]) => {\n      return {\n        x: xMutator?.(r) ?? new Date(x * 1000),\n        y: yMutator?.(y) ?? parseFloat(y),\n        metric: r?.metric,\n        time: x,\n      };\n    });\n  });\n};\n\nexport const getXaxisValues = (timespan: number): number[] => {\n  const xValues = [];\n  if (!timespan) return xValues;\n  const oneDayDuration = parsePrometheusDuration('1d');\n  const numDays = Math.round(timespan / oneDayDuration);\n  const d = new Date(Date.now());\n  d.setHours(0, 0, 0, 0);\n  while (xValues.length - 1 < numDays) {\n    xValues.push(d.getTime());\n    d.setDate(d.getDate() - 1);\n  }\n  return xValues.slice(0, numDays);\n};\n\nexport const getDuration = (seconds: number, long?: boolean): string => {\n  if (seconds === 0) {\n    return i18next.t('pipelines-plugin~less than a sec');\n  }\n  let sec = Math.round(seconds);\n  let min = 0;\n  let hr = 0;\n  let duration = '';\n  if (sec >= 60) {\n    min = Math.floor(sec / 60);\n    sec %= 60;\n  }\n  if (min >= 60) {\n    hr = Math.floor(min / 60);\n    min %= 60;\n  }\n  if (hr > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} hour', { count: hr })\n      : i18next.t('pipelines-plugin~{{hr}}h', { hr });\n    duration += ' ';\n  }\n  if (min > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} minute', { count: min })\n      : i18next.t('pipelines-plugin~{{min}}m', { min });\n    duration += ' ';\n  }\n  if (sec > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} second', { count: sec })\n      : i18next.t('pipelines-plugin~{{sec}}s', { sec });\n  }\n\n  return duration.trim();\n};\n\nexport const PipelineMetricsTimeRangeOptions = () => ({\n  '1d': i18next.t('pipelines-plugin~1 day'),\n  '3d': i18next.t('pipelines-plugin~3 days'),\n  '1w': i18next.t('pipelines-plugin~1 week'),\n  '2w': i18next.t('pipelines-plugin~2 weeks'),\n  '3w': i18next.t('pipelines-plugin~3 weeks'),\n  '4w': i18next.t('pipelines-plugin~4 weeks'),\n});\n\nexport const getTransformedDataPoints = (data: DataPoint[]): DataPoint[] => {\n  let previousValue = 0;\n  return _.sortBy(data, 'x').map((val) => {\n    const currentValue = val.y - previousValue;\n    previousValue += val.y;\n    return { ...val, y: currentValue };\n  });\n};\n","import { apiVersionForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin/src';\nimport { AutoscaleWindowType } from '../import-types';\n\nexport const getAutoscaleWindow = (autoscaleValue: string): AutoscaleWindowType => {\n  const windowRegEx = /^[0-9]+|[a-zA-Z]*/g;\n  const [val, unit] = autoscaleValue?.match(windowRegEx);\n  return {\n    autoscalewindow: Number(val) || '',\n    autoscalewindowUnit: unit || 's',\n    defaultAutoscalewindowUnit: unit || 's',\n  };\n};\n\nconst DOMAIN_MAPPING_KSVC_INFO_REGEX = / *\\([^)]*\\) */g;\n\nexport const removeKsvcInfoFromDomainMapping = (dm: string) =>\n  dm.replace(DOMAIN_MAPPING_KSVC_INFO_REGEX, '');\n\nexport const getOtherKsvcFromDomainMapping = (\n  dm: K8sResourceKind,\n  currentKsvcName: string,\n): string | null => {\n  if (!dm.spec?.ref) return null;\n  const { apiVersion, kind, name } = dm.spec.ref;\n  return apiVersionForModel(ServiceModel) === apiVersion &&\n    kind === ServiceModel.kind &&\n    name !== currentKsvcName\n    ? name\n    : null;\n};\n\nexport const removeDuplicateDomainMappings = (\n  allDomainMappings: string[],\n  connectedDomainMappings: string[],\n): string[] => {\n  return [\n    ...new Set(\n      allDomainMappings\n        ?.filter((dm) =>\n          connectedDomainMappings?.length > 0\n            ? connectedDomainMappings?.includes(removeKsvcInfoFromDomainMapping(dm))\n            : true,\n        )\n        .map((n) => removeKsvcInfoFromDomainMapping(n)),\n    ),\n  ];\n};\n\nexport const hasOtherKsvcDomainMappings = (domainMapping: string[]): boolean =>\n  domainMapping.some((dm) => new RegExp(DOMAIN_MAPPING_KSVC_INFO_REGEX).test(dm));\n\nexport const getAllOtherDomainMappingInUse = (\n  domainMappings: string[],\n  data: K8sResourceKind[] = [],\n  serviceName: string,\n): K8sResourceKind[] =>\n  domainMappings\n    .filter((d) => hasOtherKsvcDomainMappings([d]))\n    .map((dm) => {\n      const selectedDomain = data?.find(\n        (d) => d.metadata.name === removeKsvcInfoFromDomainMapping(dm),\n      );\n      return selectedDomain && selectedDomain.spec?.ref?.name !== serviceName\n        ? selectedDomain\n        : null;\n    })\n    .filter((d) => !!d);\n","import * as GitUrlParse from 'git-url-parse';\nimport { TFunction } from 'i18next';\nimport { Base64 } from 'js-base64';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { gitUrlRegex } from '@console/dev-console/src/components/import/validation-schema';\nimport { bitBucketUserNameRegex } from '@console/dev-console/src/utils/yup-validation-util';\nimport {\n  k8sCreateResource,\n  k8sGetResource,\n  k8sListResourceItems,\n  k8sPatchResource,\n} from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { getGitService, GitProvider } from '@console/git-service/src';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { ConfigMapModel, SecretModel } from '@console/internal/models';\nimport { ConfigMapKind, SecretKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { nameRegex } from '@console/shared/src';\nimport { RepositoryModel } from '../../models';\nimport { PipelineType } from '../import/import-types';\nimport { PAC_TEMPLATE_DEFAULT } from '../pac/const';\nimport { PIPELINERUN_TEMPLATE_NAMESPACE } from '../pipelines/const';\nimport { RepositoryRuntimes, gitProviderTypesHosts } from './consts';\nimport { RepositoryFormValues } from './types';\n\nexport const dryRunOpt = { dryRun: 'All' };\n\nexport const repositoryValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .matches(nameRegex, {\n        message: t(\n          'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .required(t('pipelines-plugin~Required')),\n    gitUrl: yup\n      .string()\n      .matches(gitUrlRegex, t('pipelines-plugin~Invalid Git URL.'))\n      .required(t('pipelines-plugin~Required')),\n    accessToken: yup.string(),\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(bitBucketUserNameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers, underscores and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl && !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const pipelinesAccessTokenValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(nameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl &&\n          gitProvider &&\n          !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const importFlowRepositoryValidationSchema = (t: TFunction) => {\n  return yup.object().shape({\n    repository: yup.object().when(['pipelineType', 'pipelineEnabled'], {\n      is: (pipelineType, pipelineEnabled) => pipelineType === PipelineType.PAC && pipelineEnabled,\n      then: pipelinesAccessTokenValidationSchema(t),\n    }),\n  });\n};\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nconst createTokenSecret = async (\n  repositoryName: string,\n  user: string,\n  token: string,\n  namespace: string,\n  detectedGitType: GitProvider,\n  webhookSecret?: string,\n  dryRun?: boolean,\n) => {\n  const data: SecretKind = {\n    apiVersion: SecretModel.apiVersion,\n    kind: SecretModel.kind,\n    metadata: {\n      generateName: `${repositoryName}-token-`,\n      namespace,\n    },\n    type: SecretType.opaque,\n    stringData: {\n      'provider.token': token,\n      ...(webhookSecret && { 'webhook.secret': webhookSecret }),\n      ...(detectedGitType === GitProvider.BITBUCKET && {\n        'webhook.auth': Base64.encode(`${user}:${token}`),\n      }),\n    },\n  };\n\n  return k8sCreateResource({\n    model: SecretModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n};\n\nexport const createRepositoryResources = async (\n  values: RepositoryFormValues,\n  namespace: string,\n  labels: { [key: string]: string } = {},\n  dryRun?: boolean,\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    gitUrl,\n    webhook: { secretObj, method, token, secret: webhookSecret, user },\n  } = values;\n  const encodedSecret = Base64.encode(webhookSecret);\n  const detectedGitType = detectGitType(gitUrl);\n  let secret: SecretKind;\n  if (token && method === 'token') {\n    secret = await createTokenSecret(\n      name,\n      user,\n      token,\n      namespace,\n      detectedGitType,\n      webhookSecret,\n      dryRun,\n    );\n  } else if (\n    method === 'secret' &&\n    secretObj &&\n    secretObj?.data?.['webhook.secret'] !== encodedSecret\n  ) {\n    await k8sPatchResource({\n      model: SecretModel,\n      resource: secretObj,\n      data: [{ op: 'replace', path: `/data/webhook.secret`, value: Base64.encode(webhookSecret) }],\n    });\n  }\n  const gitHost = GitUrlParse(gitUrl).source;\n  const secretRef = secret || secretObj;\n  const data = {\n    kind: RepositoryModel.kind,\n    apiVersion: 'pipelinesascode.tekton.dev/v1alpha1',\n    metadata: {\n      name,\n      namespace,\n      ...(labels || {}),\n    },\n    spec: {\n      url: gitUrl,\n      ...(secretRef || gitHost !== 'github.com'\n        ? {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            git_provider: {\n              ...(!gitProviderTypesHosts.includes(gitHost) ? { url: gitHost } : {}),\n              ...(gitHost === 'bitbucket.org'\n                ? {\n                    user,\n                  }\n                : {}),\n              ...(secretRef\n                ? {\n                    secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'provider.token',\n                    },\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    webhook_secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'webhook.secret',\n                    },\n                  }\n                : {}),\n            },\n          }\n        : {}),\n    },\n  };\n\n  const resource = await k8sCreateResource({\n    model: RepositoryModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n\n  return resource;\n};\n\nexport const createRemoteWebhook = async (\n  values: RepositoryFormValues,\n  pac: ConfigMapKind,\n  loaded: boolean,\n): Promise<boolean> => {\n  const {\n    gitUrl,\n    webhook: { method, token, secret: webhookSecret, url: webhookURL, secretObj, user },\n  } = values;\n  const detectedGitType = detectGitType(gitUrl);\n  const gitService = getGitService(gitUrl, detectedGitType);\n\n  let sslVerification = true;\n  if (loaded && pac?.data?.['webhook-ssl-verification'] === 'false') {\n    sslVerification = false;\n  }\n\n  let authToken: string;\n  if (detectedGitType === GitProvider.BITBUCKET) {\n    authToken =\n      method === 'token'\n        ? Base64.encode(`${user}:${token}`)\n        : Base64.decode(secretObj?.data?.['webhook.auth']);\n  } else {\n    authToken = method === 'token' ? token : Base64.decode(secretObj?.data?.['provider.token']);\n  }\n\n  const webhookCreationStatus = await gitService.createRepoWebhook(\n    authToken,\n    webhookURL,\n    sslVerification,\n    webhookSecret,\n  );\n\n  return webhookCreationStatus;\n};\n\nexport const createRepositoryName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return `git-${nameString}`;\n  }\n  return `git-${_.kebabCase(nameString)}`;\n};\n\nexport const recommendRepositoryName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createRepositoryName(name);\n};\n\nexport const getFallbackTemplate = (repoName: string): string => `apiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: ${repoName ?? 'pull_request'}\n  annotations:\n    # The event we are targeting as seen from the webhook payload\n    # this can be an array too, i.e: [pull_request, push]\n    pipelinesascode.tekton.dev/on-event: \"[pull_request, push]\"\n\n    # The branch or tag we are targeting (ie: main, refs/tags/*)\n    pipelinesascode.tekton.dev/on-target-branch: \"main\"\n\n    # Fetch the git-clone task from hub, we are able to reference later on it\n    # with taskRef and it will automatically be embedded into our pipeline.\n    pipelinesascode.tekton.dev/task: \"git-clone\"\n\n    # You can add more tasks in here to reuse, browse the one you like from here\n    # https://hub.tekton.dev/\n    # example:\n    # pipelinesascode.tekton.dev/task-2: \"[maven, buildah]\"\n\n    # How many runs we want to keep attached to this event\n    pipelinesascode.tekton.dev/max-keep-runs: \"5\"\nspec:\n  params:\n    # The variable with brackets are special to Pipelines as Code\n    # They will automatically be expanded with the events from Github.\n    - name: repo_url\n      value: \"{{ repo_url }}\"\n    - name: revision\n      value: \"{{ revision }}\"\n  pipelineSpec:\n    params:\n      - name: repo_url\n      - name: revision\n    workspaces:\n      - name: source\n      - name: basic-auth\n    tasks:\n      - name: fetch-repository\n        taskRef:\n          name: git-clone\n        workspaces:\n          - name: output\n            workspace: source\n          - name: basic-auth\n            workspace: basic-auth\n        params:\n          - name: url\n            value: $(params.repo_url)\n          - name: revision\n            value: $(params.revision)\n\n      # Customize this task if you like, or just do a taskRef\n      # to one of the hub task.\n      - name: noop-task\n        runAfter:\n          - fetch-repository\n        workspaces:\n          - name: source\n            workspace: source\n        taskSpec:\n          workspaces:\n            - name: source\n          steps:\n            - name: noop-task\n              image: registry.access.redhat.com/ubi9/ubi-micro\n              workingDir: $(workspaces.source.path)\n              script: |\n                exit 0\n  workspaces:\n  - name: source\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n  # This workspace will inject secret to help the git-clone task to be able to\n  # checkout the private repositories\n  - name: basic-auth\n    secret:\n      secretName: \"{{ git_auth_secret }}\"`;\n\nexport const getPipelineRunDefaultTemplate = async (repoName: string): Promise<string> => {\n  let pipelineRunTemplate = getFallbackTemplate(repoName);\n  try {\n    const template = await k8sGetResource<ConfigMapKind>({\n      model: ConfigMapModel,\n      ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n      name: PAC_TEMPLATE_DEFAULT,\n    });\n    if (template?.data?.template) {\n      pipelineRunTemplate = template.data.template;\n    }\n  } catch (e) {\n    console.log('failed to fetch default template:', e); // eslint-disable-line no-console\n  }\n\n  return pipelineRunTemplate;\n};\n\nexport const getPipelineRunTemplate = async (\n  runtime: string,\n  repoName: string,\n): Promise<string> => {\n  let runTimeTemplate;\n  try {\n    const [pipelineRunTemplateCfg] = await k8sListResourceItems<ConfigMapKind>({\n      model: ConfigMapModel,\n      queryParams: {\n        ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n        labelSelector: {\n          matchLabels: {\n            'pipelinesascode.openshift.io/runtime': RepositoryRuntimes[runtime] || runtime,\n          },\n        },\n      },\n    });\n    runTimeTemplate = pipelineRunTemplateCfg?.data?.template;\n  } catch (e) {\n    console.log('failed to fetch runtime template:', e); // eslint-disable-line no-console\n  }\n  const pipelineRunTemplate = runTimeTemplate ?? (await getPipelineRunDefaultTemplate(repoName));\n  return pipelineRunTemplate;\n};\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\n\nconst pathRegex = /^\\/.*$/;\n\nexport const MAX_INT32 = 2147483647;\n\nexport const healthChecksValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    containerName: yup.string(),\n    showForm: yup.boolean(),\n    enabled: yup.boolean(),\n    modified: yup.boolean(),\n    data: yup.object().when('showForm', {\n      is: true,\n      then: yup.object().shape({\n        periodSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Period must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        initialDelaySeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(0, t('devconsole~Initial delay must be greater than or equal to 0.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        failureThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Failure threshold must be greater than or equal to 1.')),\n        timeoutSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Timeout must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        successThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Success threshold must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        requestType: yup.string(),\n        httpGet: yup.object().when('requestType', {\n          is: 'httpGet',\n          then: yup.object({\n            path: yup.string().matches(pathRegex, {\n              message: t('devconsole~Path must start with /.'),\n              excludeEmptyString: true,\n            }),\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        tcpSocket: yup.object().when('requestType', {\n          is: 'tcpSocket',\n          then: yup.object({\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        exec: yup.object().when('requestType', {\n          is: 'command',\n          then: yup.object({\n            command: yup.array().of(yup.string().required(t('devconsole~Required'))),\n          }),\n        }),\n      }),\n    }),\n  });\n\nexport const healthChecksProbesValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    readinessProbe: healthChecksValidationSchema(t),\n    livenessProbe: healthChecksValidationSchema(t),\n    startupProbe: healthChecksValidationSchema(t),\n  });\n","export const PAC_GH_APP_NEW = 'https://github.com/settings/apps/new';\nexport const PAC_GH_APP_DOC =\n  'https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#about-github-apps';\nexport const PAC_GH_APP_MANIFEST_API = 'https://api.github.com/app-manifests';\nexport const EVENT_LISTNER_NAME = 'pipelines-as-code-interceptor';\nexport const PAC_SECRET_NAME = 'pipelines-as-code-secret';\nexport const PAC_GH_APP_NAME = 'pipelines-ci-clustername';\nexport const PAC_INFO = 'pipelines-as-code-info';\nexport const PAC_TEMPLATE_DEFAULT = 'pipelines-as-code-pipelinerun-generic';\n","export const FLAG_OPENSHIFT_PIPELINE = 'OPENSHIFT_PIPELINE';\nexport const FLAG_OPENSHIFT_PIPELINE_AS_CODE = 'OPENSHIFT_PIPELINE_AS_CODE';\nexport const FLAG_OPENSHIFT_PIPELINE_CONDITION = 'OPENSHIFT_PIPELINE_CONDITION';\nexport const CLUSTER_PIPELINE_NS = 'openshift';\nexport const PIPELINE_RUNTIME_LABEL = 'pipeline.openshift.io/runtime';\nexport const PIPELINE_RUNTIME_VERSION_LABEL = 'pipeline.openshift.io/runtime-version';\nexport const PIPELINE_STRATEGY_LABEL = 'pipeline.openshift.io/strategy';\nexport const PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY = 'pipeline.preferredPipelinePageTab';\nexport const FUNC_PIPELINE_RUNTIME_LABEL = 'function.knative.dev/runtime';\nexport const ARTIFACTHUB_API_BASE_URL = 'https://artifacthub.io/api/v1';\nexport const DELETED_RESOURCE_IN_K8S_ANNOTATION = 'resource.deleted.in.k8s';\nexport const RESOURCE_LOADED_FROM_RESULTS_ANNOTATION = 'resource.loaded.from.tektonResults';\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as semver from 'semver';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { ContainerPort, K8sResourceKind, K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  description: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getSampleRepo = (tag) => tag?.annotations?.sampleRepo ?? '';\nexport const getSampleRef = (tag) => tag?.annotations?.sampleRef ?? '';\nexport const getSampleContextDir = (tag) => tag?.annotations?.sampleContextDir ?? '';\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage): ContainerPort[] => {\n  const portSpec =\n    imageStreamImage?.image?.dockerImageMetadata?.Config?.ExposedPorts ||\n    imageStreamImage?.image?.dockerImageMetadata?.ContainerConfig?.ExposedPorts;\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceCommon | K8sResourceCommon[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = imageStream?.metadata?.annotations?.['openshift.io/display-name'];\n    const description = recentTag?.annotations?.description;\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      description,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = imageTag?.annotations?.['openshift.io/display-name'] ?? defaultName;\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = (t: TFunction) => {\n  return {\n    External: {\n      value: RegistryType.External,\n      label: t('devconsole~Image name from external registry'),\n    },\n    Internal: {\n      value: RegistryType.Internal,\n      label: t('devconsole~Image stream tag from internal registry'),\n    },\n  };\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n","import * as _ from 'lodash';\nimport { getActiveUserName } from '@console/internal/actions/ui';\nimport { getRandomChars } from '@console/shared';\nimport {\n  DELETED_RESOURCE_IN_K8S_ANNOTATION,\n  RESOURCE_LOADED_FROM_RESULTS_ANNOTATION,\n} from '../../../../const';\nimport { PipelineRunModel } from '../../../../models';\nimport {\n  PipelineKind,\n  TektonResource,\n  PipelineRunKind,\n  PipelineRunEmbeddedResource,\n  PipelineRunEmbeddedResourceParam,\n  PipelineRunReferenceResource,\n  PipelineRunResource,\n  VolumeClaimTemplateType,\n  TektonWorkspace,\n  PipelineRunParam,\n} from '../../../../types';\nimport { getPipelineRunParams, getPipelineRunWorkspaces } from '../../../../utils/pipeline-utils';\nimport {\n  TektonResourceLabel,\n  VolumeTypes,\n  preferredNameAnnotation,\n  StartedByAnnotation,\n} from '../../const';\nimport { CREATE_PIPELINE_RESOURCE, initialResourceFormValues } from './const';\nimport {\n  CommonPipelineModalFormikValues,\n  PipelineModalFormResource,\n  PipelineModalFormWorkspace,\n  PipelineModalFormWorkspaceStructure,\n} from './types';\n\n/**\n * Migrates a PipelineRun from one version to another to support auto-upgrades with old (and invalid) PipelineRuns.\n *\n * Note: Each check within this method should be driven by the apiVersion number if the API is properly up-versioned\n * for these breaking changes. (should be done moving from 0.10.x forward)\n */\nexport const migratePipelineRun = (pipelineRun: PipelineRunKind): PipelineRunKind => {\n  let newPipelineRun = pipelineRun;\n\n  const serviceAccountPath = 'spec.serviceAccount';\n  if (_.has(newPipelineRun, serviceAccountPath)) {\n    // .spec.serviceAccount was removed for .spec.serviceAccountName in 0.9.x\n    // Note: apiVersion was not updated for this change and thus we cannot gate this change behind a version number\n    const serviceAccountName = _.get(newPipelineRun, serviceAccountPath);\n    newPipelineRun = _.omit(newPipelineRun, [serviceAccountPath]);\n    newPipelineRun = _.merge(newPipelineRun, {\n      spec: {\n        serviceAccountName,\n      },\n    });\n  }\n\n  return newPipelineRun;\n};\n\nexport const getPipelineName = (pipeline?: PipelineKind, latestRun?: PipelineRunKind): string => {\n  if (pipeline) {\n    return pipeline.metadata.name;\n  }\n\n  if (latestRun) {\n    return (\n      latestRun.spec.pipelineRef?.name ??\n      (latestRun.metadata.annotations?.[preferredNameAnnotation] || latestRun.metadata.name)\n    );\n  }\n  return null;\n};\n\nexport const getPipelineRunGenerateName = (pipelineRun: PipelineRunKind): string => {\n  if (pipelineRun.metadata.generateName) {\n    return pipelineRun.metadata.generateName;\n  }\n\n  return `${pipelineRun.metadata.name?.replace(/-[a-z0-9]{5,6}$/, '')}-`;\n};\n\nexport const getPipelineRunData = (\n  pipeline: PipelineKind = null,\n  latestRun?: PipelineRunKind,\n  options?: { generateName: boolean },\n): PipelineRunKind => {\n  if (!pipeline && !latestRun) {\n    // eslint-disable-next-line no-console\n    console.error('Missing parameters, unable to create new PipelineRun');\n    return null;\n  }\n\n  const pipelineName = getPipelineName(pipeline, latestRun);\n\n  const workspaces = latestRun?.spec.workspaces;\n\n  const latestRunParams = latestRun?.spec.params;\n  const pipelineParams = pipeline?.spec.params;\n  const params = latestRunParams || getPipelineRunParams(pipelineParams);\n  // TODO: We should craft a better method to allow us to provide configurable annotations and labels instead of\n  // blinding merging existing content from potential real Pipeline and PipelineRun resources\n  const annotations = _.merge(\n    {},\n    pipeline?.metadata?.annotations,\n    latestRun?.metadata?.annotations,\n    {\n      [StartedByAnnotation.user]: getActiveUserName(),\n    },\n    !latestRun?.spec.pipelineRef &&\n      !latestRun?.metadata.annotations?.[preferredNameAnnotation] && {\n        [preferredNameAnnotation]: pipelineName,\n      },\n  );\n  delete annotations['kubectl.kubernetes.io/last-applied-configuration'];\n  delete annotations['tekton.dev/v1beta1TaskRuns'];\n  delete annotations['results.tekton.dev/log'];\n  delete annotations['results.tekton.dev/record'];\n  delete annotations['results.tekton.dev/result'];\n  delete annotations[DELETED_RESOURCE_IN_K8S_ANNOTATION];\n  delete annotations[RESOURCE_LOADED_FROM_RESULTS_ANNOTATION];\n\n  const newPipelineRun = {\n    apiVersion: pipeline ? pipeline.apiVersion : latestRun.apiVersion,\n    kind: PipelineRunModel.kind,\n    metadata: {\n      ...(options?.generateName\n        ? {\n            generateName: `${pipelineName}-`,\n          }\n        : {\n            name:\n              latestRun?.metadata?.name !== undefined\n                ? `${getPipelineRunGenerateName(latestRun)}${getRandomChars()}`\n                : `${pipelineName}-${getRandomChars()}`,\n          }),\n      annotations,\n      namespace: pipeline ? pipeline.metadata.namespace : latestRun.metadata.namespace,\n      labels: _.merge(\n        {},\n        pipeline?.metadata?.labels,\n        latestRun?.metadata?.labels,\n        (latestRun?.spec.pipelineRef || pipeline) && {\n          'tekton.dev/pipeline': pipelineName,\n        },\n      ),\n    },\n    spec: {\n      ...(latestRun?.spec || {}),\n      ...((latestRun?.spec.pipelineRef || pipeline) && {\n        pipelineRef: {\n          name: pipelineName,\n        },\n      }),\n      ...(params && { params }),\n      workspaces,\n      status: null,\n    },\n  };\n  return migratePipelineRun(newPipelineRun);\n};\n\nexport const getDefaultVolumeClaimTemplate = (pipelineName: string): VolumeClaimTemplateType => {\n  return {\n    volumeClaimTemplate: {\n      metadata: {\n        labels: { [TektonResourceLabel.pipeline]: pipelineName },\n      },\n      spec: {\n        accessModes: ['ReadWriteOnce'],\n        resources: {\n          requests: {\n            storage: '1Gi',\n          },\n        },\n      },\n    },\n  };\n};\n\nexport const getServerlessFunctionDefaultPersistentVolumeClaim = (\n  pipelineName: string,\n): VolumeClaimTemplateType => {\n  return {\n    volumeClaimTemplate: {\n      metadata: {\n        finalizers: ['kubernetes.io/pvc-protection'],\n        labels: {\n          [TektonResourceLabel.pipeline]: pipelineName,\n          'boson.dev/function': 'true',\n          'function.knative.dev': 'true',\n          'function.knative.dev/name': pipelineName,\n        },\n      },\n      spec: {\n        accessModes: ['ReadWriteOnce'],\n        resources: {\n          requests: {\n            storage: '1Gi',\n          },\n        },\n        storageClassName: 'gp3-csi',\n        volumeMode: 'Filesystem',\n      },\n    },\n  };\n};\n\nconst supportWorkspaceDefaults = (preselectPVC: string) => (\n  workspace: TektonWorkspace,\n): PipelineModalFormWorkspace => {\n  let workspaceSetting: PipelineModalFormWorkspaceStructure = {\n    type: VolumeTypes.EmptyDirectory,\n    data: { emptyDir: {} },\n  };\n\n  if (preselectPVC) {\n    workspaceSetting = {\n      type: VolumeTypes.PVC,\n      data: {\n        persistentVolumeClaim: {\n          claimName: preselectPVC,\n        },\n      },\n    };\n  }\n  if (workspace.optional) {\n    workspaceSetting = {\n      type: VolumeTypes.NoWorkspace,\n      data: {},\n    };\n  }\n\n  return {\n    ...workspace,\n    ...workspaceSetting,\n  };\n};\n\nexport const convertPipelineToModalData = (\n  pipeline: PipelineKind,\n  alwaysCreateResources: boolean = false,\n  preselectPVC: string = '',\n): CommonPipelineModalFormikValues => {\n  const {\n    metadata: { namespace },\n    spec: { params, resources },\n  } = pipeline;\n\n  return {\n    namespace,\n    parameters: (params || []).map((param) => ({\n      ...param,\n      value: param.default, // setup the default if it exists\n    })),\n    resources: (resources || []).map((resource: TektonResource) => ({\n      name: resource.name,\n      selection: alwaysCreateResources ? CREATE_PIPELINE_RESOURCE : '',\n      data: {\n        ...initialResourceFormValues[resource.type],\n        type: resource.type,\n      },\n    })),\n    workspaces: (pipeline.spec.workspaces || []).map(supportWorkspaceDefaults(preselectPVC)),\n  };\n};\n\nexport const convertMapToNameValueArray = (map: {\n  [key: string]: any;\n}): PipelineRunEmbeddedResourceParam[] => {\n  return Object.keys(map).map((name) => {\n    const value = map[name];\n    return { name, value };\n  });\n};\n\nexport const convertResources = (resource: PipelineModalFormResource): PipelineRunResource => {\n  if (resource.selection === CREATE_PIPELINE_RESOURCE) {\n    return {\n      name: resource.name,\n      resourceSpec: {\n        params: convertMapToNameValueArray(resource.data.params),\n        type: resource.data.type,\n      },\n    } as PipelineRunEmbeddedResource;\n  }\n\n  return {\n    name: resource.name,\n    resourceRef: {\n      name: resource.selection,\n    },\n  } as PipelineRunReferenceResource;\n};\n\nexport const getPipelineRunFromForm = (\n  pipeline: PipelineKind,\n  formValues: CommonPipelineModalFormikValues,\n  labels?: { [key: string]: string },\n  annotations?: { [key: string]: string },\n  options?: { generateName: boolean },\n) => {\n  const { parameters, workspaces } = formValues;\n\n  const pipelineRunData: PipelineRunKind = {\n    metadata: {\n      annotations,\n      labels,\n    },\n    spec: {\n      pipelineRef: {\n        name: pipeline.metadata.name,\n      },\n      params: parameters.map(({ name, value }): PipelineRunParam => ({ name, value })),\n      workspaces: getPipelineRunWorkspaces(workspaces),\n    },\n  };\n  return getPipelineRunData(pipeline, pipelineRunData, options);\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { Resources, HealthChecksFormData } from '../import/import-types';\nimport { healthChecksDefaultValues } from './health-checks-probe-utils';\nimport {\n  HealthCheckProbeData,\n  RequestType,\n  HealthChecksProbeType,\n  HealthCheckFormProbeData,\n} from './health-checks-types';\n\nexport const constructProbeData = (\n  data: HealthCheckFormProbeData,\n  resourceType?: Resources,\n): HealthCheckProbeData => {\n  const probeData = {\n    ...(data.failureThreshold && { failureThreshold: _.toInteger(data.failureThreshold) }),\n    ...(data.successThreshold && { successThreshold: _.toInteger(data.successThreshold) }),\n    ...(data.requestType === RequestType.ContainerCommand && {\n      exec: data.exec,\n    }),\n    ...(data.requestType === RequestType.HTTPGET && {\n      httpGet: {\n        ...data[data.requestType],\n        scheme: data[data.requestType]?.scheme ? data[data.requestType].scheme[0] : 'HTTP',\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.httpGet.port),\n      },\n    }),\n    ...(data.requestType === RequestType.TCPSocket && {\n      tcpSocket: {\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.tcpSocket.port),\n      },\n    }),\n    ...(data.initialDelaySeconds && {\n      initialDelaySeconds: _.toInteger(data.initialDelaySeconds),\n    }),\n    ...(data.periodSeconds && { periodSeconds: _.toInteger(data.periodSeconds) }),\n    ...(data.timeoutSeconds && { timeoutSeconds: _.toInteger(data.timeoutSeconds) }),\n  };\n  return probeData;\n};\n\nexport const getRequestType = (data: HealthCheckProbeData) => {\n  if (_.has(data, RequestType.HTTPGET)) return RequestType.HTTPGET;\n  if (_.has(data, RequestType.TCPSocket)) return RequestType.TCPSocket;\n  if (_.has(data, 'exec.command')) return RequestType.ContainerCommand;\n  return '';\n};\n\nexport const convertResourceDataToFormData = (\n  resourceData: HealthCheckProbeData,\n): HealthCheckFormProbeData => {\n  return {\n    ...resourceData,\n    requestType: getRequestType(resourceData),\n    failureThreshold: resourceData.failureThreshold?.toString() || '',\n    successThreshold: resourceData.successThreshold?.toString() || '',\n    initialDelaySeconds: resourceData.initialDelaySeconds?.toString() || '',\n    periodSeconds: resourceData.periodSeconds?.toString() || '',\n    timeoutSeconds: resourceData.timeoutSeconds?.toString() || '',\n    ...(resourceData.httpGet && {\n      httpGet: {\n        ...resourceData.httpGet,\n        port: resourceData.httpGet.port?.toString() || '',\n        scheme: resourceData.httpGet.scheme === 'HTTP' ? undefined : ['HTTPS'],\n      },\n    }),\n    ...(resourceData.tcpSocket && {\n      tcpSocket: { port: resourceData.tcpSocket.port?.toString() || '' },\n    }),\n  };\n};\n\nexport const getHealthChecksData = (\n  resource: K8sResourceKind,\n  containerIndex: number = 0,\n): HealthChecksFormData => {\n  const containers = resource?.spec?.template?.spec?.containers ?? [];\n  const readinessProbe: HealthCheckProbeData =\n    containers?.[containerIndex]?.[HealthChecksProbeType.ReadinessProbe] ?? {};\n  const livenessProbe: HealthCheckProbeData =\n    containers?.[containerIndex]?.[HealthChecksProbeType.LivenessProbe] ?? {};\n  const startupProbe: HealthCheckProbeData =\n    containers?.[containerIndex]?.[HealthChecksProbeType.StartupProbe] ?? {};\n\n  const healthChecks = {\n    readinessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(readinessProbe),\n      data: !_.isEmpty(readinessProbe)\n        ? {\n            ...convertResourceDataToFormData(readinessProbe),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    livenessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(livenessProbe),\n      data: !_.isEmpty(livenessProbe)\n        ? {\n            ...convertResourceDataToFormData(livenessProbe),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    startupProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(startupProbe),\n      data: !_.isEmpty(startupProbe)\n        ? {\n            ...convertResourceDataToFormData(startupProbe),\n          }\n        : healthChecksDefaultValues.data,\n    },\n  };\n  return healthChecks;\n};\n\nexport const getProbesData = (healthChecks: HealthChecksFormData, resourceType?: Resources) => {\n  const { readinessProbe, livenessProbe, startupProbe } = healthChecks;\n  return {\n    ...(readinessProbe.enabled\n      ? { readinessProbe: constructProbeData(readinessProbe.data, resourceType) }\n      : {}),\n    ...(livenessProbe.enabled\n      ? { livenessProbe: constructProbeData(livenessProbe.data, resourceType) }\n      : {}),\n    ...(resourceType !== Resources.KnativeService && startupProbe?.enabled\n      ? { startupProbe: constructProbeData(startupProbe.data) }\n      : {}),\n  };\n};\n","import { NameValuePair } from '@console/shared';\n\nexport enum HealthChecksProbeType {\n  ReadinessProbe = 'readinessProbe',\n  LivenessProbe = 'livenessProbe',\n  StartupProbe = 'startupProbe',\n}\n\nexport enum RequestType {\n  HTTPGET = 'httpGet',\n  ContainerCommand = 'command',\n  TCPSocket = 'tcpSocket',\n}\nexport interface HealthCheckProbeData {\n  failureThreshold: number;\n  initialDelaySeconds: number;\n  periodSeconds: number;\n  timeoutSeconds: number;\n  successThreshold: number;\n  requestType?: string;\n  exec?: { command?: string[] };\n  httpGet?: {\n    scheme: string;\n    path: string;\n    port: number;\n    httpHeaders: NameValuePair[];\n  };\n  tcpSocket?: {\n    port: number;\n  };\n}\n\nexport interface HealthCheckFormProbeData {\n  failureThreshold: string;\n  initialDelaySeconds: string;\n  periodSeconds: string;\n  timeoutSeconds: string;\n  successThreshold: string;\n  requestType?: string;\n  exec?: { command?: string[] };\n  httpGet?: {\n    scheme: string[];\n    path: string;\n    port: string;\n    httpHeaders: NameValuePair[];\n  };\n  tcpSocket?: {\n    port: string;\n  };\n}\nexport interface HealthCheckFormProbe {\n  showForm?: boolean;\n  enabled?: boolean;\n  modified?: boolean;\n  data: HealthCheckFormProbeData;\n}\n","import { PipelineResourceType } from '../../const';\n\nexport const CREATE_PIPELINE_RESOURCE = '#CREATE_PIPELINE_RESOURCE#';\n\nexport const initialResourceFormValues = {\n  [PipelineResourceType.git]: {\n    params: {\n      url: '',\n      revision: '',\n    },\n  },\n  [PipelineResourceType.image]: {\n    params: {\n      url: '',\n    },\n  },\n  [PipelineResourceType.storage]: {\n    params: {\n      type: '',\n      location: '',\n      dir: '',\n    },\n  },\n  [PipelineResourceType.cluster]: {\n    params: {\n      name: '',\n      url: '',\n      username: '',\n      password: '',\n      insecure: '',\n    },\n    secrets: {\n      cadata: '',\n      token: '',\n    },\n  },\n};\n","import * as _ from 'lodash';\nimport { SecretModel } from '@console/internal/models';\nimport { k8sCreate, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getRandomChars } from '@console/shared/src/utils/utils';\nimport { PipelineResourceModel } from '../../../models';\nimport { convertMapToNameValueArray } from '../modals/common/utils';\n\nexport interface ParamData {\n  [key: string]: any;\n}\n\nexport const getDefinedObj = (objData: ParamData): ParamData => {\n  return _.omitBy(objData, (v) => _.isUndefined(v) || _.isNull(v) || v === '');\n};\n\nexport const createPipelineResource = (\n  params: ParamData,\n  type: string,\n  namespace: string,\n  secretResp?: K8sResourceKind,\n): Promise<K8sResourceKind> => {\n  const resourceName = `${type}-${getRandomChars(6)}`;\n  const pipelineResource: K8sResourceKind = {\n    apiVersion: 'tekton.dev/v1alpha1',\n    kind: PipelineResourceModel.kind,\n    metadata: {\n      name: resourceName,\n      namespace,\n    },\n    spec: {\n      type,\n      params: convertMapToNameValueArray(getDefinedObj(params)),\n      ...(secretResp && {\n        secrets: _.map(secretResp.data, (value, name) => {\n          return {\n            fieldName: name,\n            secretKey: name,\n            secretName: secretResp.metadata.name,\n          };\n        }),\n      }),\n    },\n  };\n\n  return k8sCreate(PipelineResourceModel, pipelineResource);\n};\n\nexport const createSecretResource = (\n  secret: ParamData,\n  type: string,\n  namespace: string,\n): Promise<K8sResourceKind> => {\n  const resourceName = `${type}-secret-${getRandomChars(6)}`;\n  const secretResource = {\n    apiVersion: 'v1',\n    kind: 'Secret',\n    metadata: {\n      name: resourceName,\n      namespace,\n    },\n    stringData: getDefinedObj(secret),\n  };\n  return k8sCreate(SecretModel, secretResource);\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CircleIcon } from '@patternfly/react-icons/dist/esm/icons/circle-icon';\nimport { SquareIcon } from '@patternfly/react-icons/dist/esm/icons/square-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { K8sResourceKindReference } from '../module/k8s';\nimport { ResourceLink } from './utils/resource-link';\nimport { Timestamp } from './utils/timestamp';\nimport { EmptyBox } from './utils/status-box';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getImageStreamTagName = (imageStreamName: string, tag: string): string =>\n  `${imageStreamName}:${tag}`;\n\nconst ImageStreamTimelineItem: React.FC<ImageStreamTimelineItemProps> = ({\n  tag,\n  imageStreamName,\n  imageStreamNamespace,\n  linkToTag,\n}) => {\n  const referenceAndSHA = _.split(tag.dockerImageReference, '@');\n  return (\n    <>\n      <li>\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__circle-icon\">\n            <CircleIcon />\n          </span>\n          <div className=\"co-images-stream-tag-timeline__timestamp\">\n            <Timestamp timestamp={tag.created} simple={true} />\n          </div>\n        </div>\n\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__line\" />\n          <div className=\"co-images-stream-tag-timeline__info\">\n            <ResourceLink\n              kind={ImageStreamTagsReference}\n              name={getImageStreamTagName(imageStreamName, tag.tag)}\n              namespace={imageStreamNamespace}\n              title={tag.tag}\n              linkTo={linkToTag}\n            />\n            <div className=\"co-break-all\">from {referenceAndSHA[0]}</div>\n            <div className=\"co-break-all\">{referenceAndSHA[1]}</div>\n          </div>\n        </div>\n      </li>\n    </>\n  );\n};\n\n// check is the compared tag version, is the latest version in a sorted array of all tag versions\nconst isTagVersionLatest = (\n  comparedTag: string,\n  comparedTagPosition: number,\n  orderedTagArray: TagMeta[],\n) => {\n  return (\n    comparedTagPosition ===\n    _.findIndex(orderedTagArray, (orderedTag: TagMeta) => orderedTag.tag === comparedTag)\n  );\n};\n\nexport const ImageStreamTimeline: React.FC<ImageStreamTimelineProps> = ({\n  imageStreamTags,\n  imageStreamName,\n  imageStreamNamespace,\n}) => {\n  const { t } = useTranslation();\n  if (!_.some(imageStreamTags, 'items')) {\n    return <EmptyBox label={t('public~Images')} />;\n  }\n  const tagsArray: TagMeta[] = _.flatten(\n    _.map(imageStreamTags, ({ tag, items }) => {\n      return _.map(items, ({ created, dockerImageReference }) => ({\n        tag,\n        created,\n        dockerImageReference,\n      }));\n    }),\n  );\n  const orderedTagArray = _.orderBy(tagsArray, ['created'], ['desc']);\n  const timeline = _.map(orderedTagArray, (tag: TagMeta, i: number) => {\n    return (\n      <ImageStreamTimelineItem\n        key={tag.dockerImageReference}\n        tag={tag}\n        imageStreamName={imageStreamName}\n        imageStreamNamespace={imageStreamNamespace}\n        linkToTag={isTagVersionLatest(tag.tag, i, orderedTagArray)}\n      />\n    );\n  });\n\n  return (\n    <>\n      <ul className=\"co-images-stream-tag-timeline\">\n        {timeline}\n        <div>\n          <span className=\"co-images-stream-tag-timeline__square-icon\">\n            <SquareIcon />\n          </span>\n        </div>\n      </ul>\n    </>\n  );\n};\n\ntype ImageStreamTimelineItemProps = {\n  tag: TagMeta;\n  imageStreamName: string;\n  imageStreamNamespace: string;\n  linkToTag: boolean;\n};\n\ntype TagMeta = {\n  created: string;\n  tag: string;\n  dockerImageReference: string;\n};\n\ntype ImageStreamTimelineProps = {\n  imageStreamTags: any[];\n  imageStreamName: string;\n  imageStreamNamespace: string;\n};\n","import { IBuild as IBuildV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/Build';\nimport { IBuildRun as IBuildRunV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/ClusterBuildStrategy';\nimport { IBuild as IBuildV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/Build';\nimport { IBuildRun as IBuildRunV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/ClusterBuildStrategy';\nimport { K8sResourceCondition } from '@console/internal/module/k8s';\n\n// Add missing latestBuild to Build\nexport type Build =\n  | (IBuildV1Alpha1 & { latestBuild?: BuildRun })\n  | (IBuildV1Beta1 & { latestBuild?: BuildRun });\n\nexport type BuildSpec = IBuildV1Alpha1['spec'] & IBuildV1Beta1['spec'];\n\nexport type BuildStatus = IBuildV1Alpha1['status'] & IBuildV1Beta1['status'];\n\nexport type ClusterBuildStrategyKind = IClusterBuildStrategyV1Alpha1 | IClusterBuildStrategyV1Beta1;\n\nexport type BuildStrategyKind = IBuildStrategyV1Alpha1 | IBuildStrategyV1Beta1;\n\n// Make status.conditions compatible with @console/internal/components/conditions props\nexport type BuildRun =\n  | (IBuildRunV1Alpha1 & {\n      status?: { conditions?: K8sResourceCondition[]; latestTaskRunRef?: string };\n    })\n  | (IBuildRunV1Beta1 & {\n      status?: { conditions?: K8sResourceCondition[]; taskRunName?: string };\n    });\n\n// The enum values need to match the dynamic-plugin `Status` `status` prop.\n// A translation (title) is added in the BuildRunStatus component.\nexport enum ComputedBuildRunStatus {\n  PENDING = 'Pending',\n  RUNNING = 'Running',\n  SUCCEEDED = 'Succeeded',\n  FAILED = 'Failed',\n  UNKNOWN = 'Unknown',\n}\n\n/** WARNING: The enum values corresponds to the `metadata.name` of the ClusterBuildStrategy CRs */\nexport enum ClusterBuildStrategy {\n  BUILDAH = 'buildah',\n  S2I = 'source-to-image',\n  UNKNOWN = 'unknown',\n}\n\nexport const ReadableClusterBuildStrategies: Record<ClusterBuildStrategy, string> = {\n  // t('shipwright-plugin~Buildah')\n  [ClusterBuildStrategy.BUILDAH]: `shipwright-plugin~Buildah`,\n  // t('shipwright-plugin~Source-to-Image')\n  [ClusterBuildStrategy.S2I]: `shipwright-plugin~Source-to-Image`,\n  [ClusterBuildStrategy.UNKNOWN]: `shipwright-plugin~Unknown`,\n};\n","import { TFunction } from 'i18next';\nimport { HealthChecksProbeType, RequestType, HealthCheckFormProbe } from './health-checks-types';\n\nexport const getHealthChecksProbeConfig = (probe: string, t: TFunction) => {\n  switch (probe) {\n    case HealthChecksProbeType.ReadinessProbe: {\n      return {\n        formTitle: t('devconsole~Readiness probe'),\n        formSubtitle: t(\n          \"devconsole~A readiness probe checks if the Container is ready to handle requests. A failed readiness probe means that a Container should not receive any traffic from a proxy, even if it's running.\",\n        ),\n      };\n    }\n    case HealthChecksProbeType.LivenessProbe: {\n      return {\n        formTitle: t('devconsole~Liveness probe'),\n        formSubtitle: t(\n          'devconsole~A liveness probe checks if the Container is still running. If the liveness probe fails the Container is killed.',\n        ),\n      };\n    }\n    case HealthChecksProbeType.StartupProbe: {\n      return {\n        formTitle: t('devconsole~Startup probe'),\n        formSubtitle: t(\n          'devconsole~A startup probe checks if the application within the Container is started. If the startup probe fails the Container is killed.',\n        ),\n      };\n    }\n    default:\n      return undefined;\n  }\n};\n\nexport const healthChecksDefaultValues: HealthCheckFormProbe = {\n  showForm: false,\n  enabled: false,\n  modified: false,\n  data: {\n    failureThreshold: '3',\n    requestType: RequestType.HTTPGET,\n    httpGet: {\n      scheme: undefined,\n      path: '/',\n      port: '8080',\n      httpHeaders: [],\n    },\n    tcpSocket: {\n      port: '8080',\n    },\n    exec: { command: [''] },\n    initialDelaySeconds: '0',\n    periodSeconds: '10',\n    timeoutSeconds: '1',\n    successThreshold: '1',\n  },\n};\n\nexport const healthChecksProbeInitialData = {\n  readinessProbe: healthChecksDefaultValues,\n  livenessProbe: healthChecksDefaultValues,\n  startupProbe: healthChecksDefaultValues,\n};\n","import { k8sCreate, K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRunModel } from '../../../../models';\nimport { PipelineKind, PipelineRunKind } from '../../../../types';\nimport { VolumeTypes } from '../../const';\nimport {\n  createPipelineResource,\n  createSecretResource,\n} from '../../pipeline-resource/pipelineResource-utils';\nimport { CREATE_PIPELINE_RESOURCE } from '../common/const';\nimport { PipelineModalFormResource } from '../common/types';\nimport { getPipelineRunFromForm } from '../common/utils';\nimport { StartPipelineFormValues } from './types';\n\nexport const resourceSubmit = async (\n  resourceValues: PipelineModalFormResource,\n  namespace: string,\n): Promise<K8sResourceCommon> => {\n  const {\n    data: { params, secrets, type },\n  } = resourceValues;\n\n  return secrets\n    ? createSecretResource(secrets, type, namespace).then((secretResp) => {\n        return createPipelineResource(params, type, namespace, secretResp);\n      })\n    : createPipelineResource(params, type, namespace);\n};\n\nconst processResources = async (\n  values: StartPipelineFormValues,\n): Promise<StartPipelineFormValues> => {\n  const { namespace, resources } = values;\n\n  const toCreateResources: { [index: string]: PipelineModalFormResource } = resources.reduce(\n    (acc, resource, index) => {\n      return resource.selection === CREATE_PIPELINE_RESOURCE ? { ...acc, [index]: resource } : acc;\n    },\n    {},\n  );\n  const createdResources = await Promise.all(\n    Object.values(toCreateResources).map((resource) => resourceSubmit(resource, namespace)),\n  );\n  if (!createdResources || createdResources.length === 0) return values;\n\n  const indexLookup = Object.keys(toCreateResources);\n  return {\n    ...values,\n    resources: resources.map(\n      (resource, index): PipelineModalFormResource => {\n        if (toCreateResources[index]) {\n          const creationIndex = indexLookup.indexOf(index.toString());\n          return {\n            ...resource,\n            selection: createdResources[creationIndex].metadata.name,\n          };\n        }\n        return resource;\n      },\n    ),\n  };\n};\n\nconst processWorkspaces = (values: StartPipelineFormValues): StartPipelineFormValues => {\n  const { workspaces } = values;\n\n  if (!workspaces || workspaces.length === 0) return values;\n\n  return {\n    ...values,\n    workspaces: workspaces.filter((workspace) => workspace.type !== VolumeTypes.NoWorkspace),\n  };\n};\n\nexport const submitStartPipeline = async (\n  values: StartPipelineFormValues,\n  pipeline: PipelineKind,\n  labels?: { [key: string]: string },\n  annotations?: { [key: string]: string },\n): Promise<PipelineRunKind> => {\n  let formValues = values;\n  formValues = await processResources(formValues);\n  formValues = processWorkspaces(formValues);\n\n  const pipelineRunResource: PipelineRunKind = await k8sCreate(\n    PipelineRunModel,\n    getPipelineRunFromForm(pipeline, formValues, labels, annotations),\n  );\n\n  return Promise.resolve(pipelineRunResource);\n};\n","import * as _ from 'lodash';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport {\n  NameValueFromPair,\n  NameValuePair,\n} from '@console/shared/src/components/formik-fields/field-types';\nimport {\n  PIPELINE_RUNTIME_LABEL,\n  PIPELINE_RUNTIME_VERSION_LABEL,\n  PIPELINE_STRATEGY_LABEL,\n} from '../../../const';\nimport { PipelineModel } from '../../../models';\nimport { PipelineKind, PipelineRunKind, TektonParam, TektonWorkspace } from '../../../types';\nimport { VolumeTypes } from '../../pipelines/const';\nimport {\n  convertPipelineToModalData,\n  getDefaultVolumeClaimTemplate,\n  getServerlessFunctionDefaultPersistentVolumeClaim,\n} from '../../pipelines/modals/common/utils';\nimport { submitStartPipeline } from '../../pipelines/modals/start-pipeline/submit-utils';\nimport { StartPipelineFormValues } from '../../pipelines/modals/start-pipeline/types';\nimport { createPipelineResource } from '../../pipelines/pipeline-resource/pipelineResource-utils';\nimport { PipelineData } from '../import-types';\n\nconst getImageUrl = (name: string, namespace: string) => {\n  return `image-registry.openshift-image-registry.svc:5000/${namespace}/${name}`;\n};\n\nexport const createGitResource = (url: string, namespace: string, ref: string = 'master') => {\n  const params = { url, revision: ref };\n  return createPipelineResource(params, 'git', namespace);\n};\n\nexport const createImageResource = (name: string, namespace: string) => {\n  const params = {\n    url: getImageUrl(name, namespace),\n  };\n\n  return createPipelineResource(params, 'image', namespace);\n};\n\nexport const getPipelineParams = (\n  params: TektonParam[],\n  name: string,\n  namespace: string,\n  gitUrl: string,\n  gitRef: string,\n  gitDir: string,\n  dockerfilePath: string,\n  tag: string,\n  buildEnv: any,\n) => {\n  return (params || []).map((param) => {\n    switch (param.name) {\n      case 'APP_NAME':\n        return { ...param, default: name };\n      case 'GIT_REPO':\n        return { ...param, default: gitUrl };\n      case 'GIT_REVISION':\n        return { ...param, default: gitRef || '' };\n      case 'PATH_CONTEXT':\n        return { ...param, default: gitDir.replace(/^\\//, '') || param.default };\n      case 'IMAGE_NAME':\n        return { ...param, default: getImageUrl(name, namespace) };\n      case 'DOCKERFILE':\n        return { ...param, default: dockerfilePath };\n      case 'VERSION':\n        return { ...param, default: tag || param.default };\n      case 'BUILD_ENVS':\n        return { ...param, default: buildEnv || param.default };\n      default:\n        return param;\n    }\n  });\n};\n\nexport const pipelineRuntimeOrVersionChanged = (\n  template: PipelineKind,\n  pipeline: PipelineKind,\n): boolean =>\n  template.metadata?.labels[PIPELINE_RUNTIME_LABEL] !==\n    pipeline.metadata?.labels[PIPELINE_RUNTIME_LABEL] ||\n  template.metadata?.labels[PIPELINE_RUNTIME_VERSION_LABEL] !==\n    pipeline.metadata?.labels[PIPELINE_RUNTIME_VERSION_LABEL];\n\nexport const isDockerPipeline = (template: PipelineKind): boolean =>\n  template?.metadata?.labels?.[PIPELINE_STRATEGY_LABEL] === 'docker';\n\nexport const createPipelineForImportFlow = async (\n  name: string,\n  namespace: string,\n  gitUrl: string,\n  gitRef: string,\n  gitDir: string,\n  pipeline: PipelineData,\n  dockerfilePath: string,\n  tag: string,\n  buildEnv: (NameValuePair | NameValueFromPair)[],\n  labels: { [key: string]: string } = {},\n) => {\n  const template = _.cloneDeep(pipeline.template);\n\n  template.metadata = {\n    name: `${name}`,\n    namespace,\n    labels: {\n      ...template.metadata?.labels,\n      ...labels,\n      'app.kubernetes.io/instance': name,\n      'app.kubernetes.io/name': name,\n      ...(!isDockerPipeline(template) && {\n        [PIPELINE_RUNTIME_VERSION_LABEL]: tag,\n      }),\n    },\n  };\n\n  template.spec.params =\n    template.spec.params &&\n    getPipelineParams(\n      template.spec.params,\n      name,\n      namespace,\n      gitUrl,\n      gitRef,\n      gitDir,\n      dockerfilePath,\n      tag,\n      buildEnv,\n    );\n\n  return k8sCreate(PipelineModel, template, { ns: namespace });\n};\n\nexport const createPipelineRunForImportFlow = async (\n  pipeline: PipelineKind,\n): Promise<PipelineRunKind> => {\n  const isServerlessFunctionPipeline =\n    pipeline?.metadata?.labels?.['function.knative.dev'] === 'true';\n  const pipelineInitialValues: StartPipelineFormValues = {\n    ...convertPipelineToModalData(pipeline),\n    workspaces: (pipeline.spec.workspaces || []).map((workspace: TektonWorkspace) => ({\n      ...workspace,\n      type: VolumeTypes.VolumeClaimTemplate,\n      data: isServerlessFunctionPipeline\n        ? getServerlessFunctionDefaultPersistentVolumeClaim(pipeline?.metadata?.name)\n        : getDefaultVolumeClaimTemplate(pipeline?.metadata?.name),\n    })),\n    secretOpen: false,\n  };\n  return submitStartPipeline(pipelineInitialValues, pipeline);\n};\nexport const updatePipelineForImportFlow = async (\n  pipeline: PipelineKind,\n  template: PipelineKind,\n  name: string,\n  namespace: string,\n  gitUrl: string,\n  gitRef: string,\n  gitDir: string,\n  dockerfilePath: string,\n  tag: string,\n  buildEnv: (NameValuePair | NameValueFromPair)[],\n  labels: { [key: string]: string } = {},\n): Promise<PipelineKind> => {\n  let updatedPipeline = _.cloneDeep(pipeline);\n\n  if (!template) {\n    updatedPipeline.metadata.labels = _.omit(\n      { ...updatedPipeline.metadata.labels, ...labels },\n      'app.kubernetes.io/instance',\n    );\n  } else {\n    if (pipelineRuntimeOrVersionChanged(template, pipeline)) {\n      updatedPipeline = _.cloneDeep(template);\n      updatedPipeline.metadata = {\n        resourceVersion: pipeline.metadata.resourceVersion,\n        name: `${name}`,\n        namespace,\n        labels: {\n          ...template.metadata?.labels,\n          ...labels,\n          'app.kubernetes.io/instance': name,\n          'app.kubernetes.io/name': name,\n          ...(!isDockerPipeline(template) && { [PIPELINE_RUNTIME_VERSION_LABEL]: tag }),\n        },\n      };\n    }\n\n    updatedPipeline.spec.params = getPipelineParams(\n      template.spec.params,\n      name,\n      namespace,\n      gitUrl,\n      gitRef,\n      gitDir,\n      dockerfilePath,\n      tag,\n      buildEnv,\n    );\n  }\n  return k8sUpdate(PipelineModel, updatedPipeline, namespace, name);\n};\n","import { createContext } from 'react';\nimport * as _ from 'lodash';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport {\n  K8sResourceKind,\n  ContainerSpec,\n  referenceFor,\n  modelFor,\n} from '@console/internal/module/k8s';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { getProbesData } from './create-health-checks-probe-utils';\nimport { HealthChecksProbeType } from './health-checks-types';\n\nexport const updateHealthChecksProbe = (\n  values,\n  resource: K8sResourceKind,\n  container: ContainerSpec,\n): K8sResourceKind => {\n  const {\n    healthChecks: { readinessProbe, livenessProbe, startupProbe },\n    containerName,\n    healthChecks,\n  } = values;\n  const updatedResource = _.cloneDeep(resource);\n  const containerIndex = _.findIndex(updatedResource.spec.template.spec.containers, [\n    'name',\n    containerName,\n  ]);\n  updatedResource.spec.template.spec.containers[containerIndex] = {\n    ...container,\n    ...getProbesData(healthChecks, getResourcesType(resource)),\n  };\n\n  if (!readinessProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.ReadinessProbe}`,\n    );\n  }\n\n  if (!livenessProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.LivenessProbe}`,\n    );\n  }\n\n  if (!startupProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.StartupProbe}`,\n    );\n  }\n\n  return updatedResource;\n};\n\ntype HealthCheckContextType = {\n  viewOnly: boolean;\n};\n\nexport const HealthCheckContext = createContext<HealthCheckContextType>({ viewOnly: false });\n\nexport const useViewOnlyAccess = (resource: K8sResourceKind): boolean => {\n  const model = modelFor(referenceFor(resource));\n  const hasEditAccess = useAccessReview({\n    group: model.apiGroup,\n    resource: model.plural,\n    name: resource.metadata.name,\n    namespace: resource.metadata.namespace,\n    verb: 'update',\n  });\n  return !hasEditAccess;\n};\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { ImportStrategy } from '@console/git-service/src';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport { hasIcon } from '@console/internal/components/catalog/catalog-item-icon';\nimport { DeploymentConfigModel, DeploymentModel } from '@console/internal/models';\nimport {\n  K8sResourceKind,\n  referenceFor,\n  referenceForModel,\n  ImagePullPolicy,\n} from '@console/internal/module/k8s';\nimport {\n  KNATIVE_AUTOSCALEWINDOW_ANNOTATION,\n  KNATIVE_CONCURRENCYTARGET_ANNOTATION,\n  KNATIVE_CONCURRENCYUTILIZATION_ANNOTATION,\n  KNATIVE_MAXSCALE_ANNOTATION,\n  KNATIVE_MINSCALE_ANNOTATION,\n  PRIVATE_KNATIVE_SERVING_LABEL,\n  ServiceModel,\n} from '@console/knative-plugin';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { isDockerPipeline } from '@console/pipelines-plugin/src/components/import/pipeline/pipeline-template-utils';\nimport { defaultRepositoryFormValues } from '@console/pipelines-plugin/src/components/repository/consts';\nimport {\n  PIPELINE_RUNTIME_LABEL,\n  PIPELINE_RUNTIME_VERSION_LABEL,\n} from '@console/pipelines-plugin/src/const';\nimport { PipelineKind } from '@console/pipelines-plugin/src/types';\nimport { getLimitsDataFromResource } from '@console/shared/src';\nimport { ClusterBuildStrategy } from '@console/shipwright-plugin/src/types';\nimport { UNASSIGNED_KEY } from '@console/topology/src/const';\nimport { RegistryType } from '../../utils/imagestream-utils';\nimport { getHealthChecksData } from '../health-checks/create-health-checks-probe-utils';\nimport { deployValidationSchema } from '../import/deployImage-validation-utils';\nimport {\n  Resources,\n  DeploymentData,\n  GitReadableTypes,\n  ServerlessData,\n  BuildOptions,\n  BuildData,\n} from '../import/import-types';\nimport {\n  detectGitType,\n  validationSchema as importValidationSchema,\n} from '../import/import-validation-utils';\nimport { getAutoscaleWindow } from '../import/serverless/serverless-utils';\nimport { validationSchema as jarValidationSchema } from '../import/upload-jar-validation-utils';\nimport { AppResources } from './edit-application-types';\n\nexport enum ApplicationFlowType {\n  Git = 'Import from Git',\n  Dockerfile = 'Import from Dockerfile',\n  Container = 'Deploy Image',\n  JarUpload = 'Upload JAR file',\n}\n\nexport const getFlowTypePageTitle = (flowType: ApplicationFlowType): string => {\n  switch (flowType) {\n    case ApplicationFlowType.Git:\n      // t('devconsole~Import from Git')\n      return 'devconsole~Import from Git';\n    case ApplicationFlowType.Dockerfile:\n      // t('devconsole~Import from Dockerfile')\n      return 'devconsole~Import from Dockerfile';\n    case ApplicationFlowType.Container:\n      // t('devconsole~Deploy Image')\n      return 'devconsole~Deploy Image';\n    case ApplicationFlowType.JarUpload:\n      // t('devconsole~Upload JAR file')\n      return 'devconsole~Upload JAR file';\n    default:\n      return flowType;\n  }\n};\n\nexport enum BuildSourceType {\n  Git = 'Git',\n  Binary = 'Binary',\n}\n\nconst isFromJarUpload = (type: string): boolean => type === BuildSourceType.Binary;\n\nconst getBuildSourceType = (buildConfig: K8sResourceKind): string =>\n  buildConfig?.spec?.source?.type;\n\nexport const getResourcesType = (resource: K8sResourceKind): Resources => {\n  switch (resource.kind) {\n    case DeploymentConfigModel.kind:\n      return Resources.OpenShift;\n    case DeploymentModel.kind:\n      return Resources.Kubernetes;\n    case referenceFor(resource) === referenceForModel(ServiceModel) ? ServiceModel.kind : '':\n      return Resources.KnativeService;\n    default:\n      return null;\n  }\n};\n\nexport const getFlowType = (buildStrategy: string, buildType?: string): ApplicationFlowType => {\n  switch (buildStrategy) {\n    case BuildStrategyType.Source:\n      return buildType === BuildSourceType.Binary\n        ? ApplicationFlowType.JarUpload\n        : ApplicationFlowType.Git;\n    case BuildStrategyType.Docker:\n      return ApplicationFlowType.Dockerfile;\n    default:\n      return ApplicationFlowType.Container;\n  }\n};\n\nexport const getValidationSchema = (\n  buildStrategy: string,\n  buildType?: string,\n): ((t: TFunction) => any) => {\n  switch (buildStrategy) {\n    case BuildStrategyType.Source:\n      return buildType === BuildSourceType.Binary ? jarValidationSchema : importValidationSchema;\n    case BuildStrategyType.Docker:\n      return importValidationSchema;\n    default:\n      return deployValidationSchema;\n  }\n};\n\nexport const checkIfTriggerExists = (\n  triggers: { [key: string]: any }[],\n  type: string,\n  resourceKind?: string,\n) => {\n  return !!_.find(triggers, (trigger) => {\n    if (resourceKind === DeploymentConfigModel.kind && type === 'ImageChange') {\n      return trigger.type === type && trigger.imageChangeParams?.automatic;\n    }\n    return trigger.type === type;\n  });\n};\n\nexport const getGitDataFromBuildConfig = (buildConfig: K8sResourceKind) => {\n  const url = buildConfig?.spec?.source?.git?.uri ?? '';\n  const gitData = {\n    url,\n    type: detectGitType(url),\n    ref: _.get(buildConfig, 'spec.source.git.ref', ''),\n    dir: _.get(buildConfig, 'spec.source.contextDir', ''),\n    showGitType: false,\n    secret: _.get(buildConfig, 'spec.source.sourceSecret.name', ''),\n    isUrlValidating: false,\n  };\n  return gitData;\n};\n\nconst getGitDataFromPipeline = (pipeline: PipelineKind) => {\n  const params = pipeline?.spec?.params;\n  const url = (params?.find((param) => param?.name === 'GIT_REPO')?.default ?? '') as string;\n  const ref = params?.find((param) => param?.name === 'GIT_REVISION')?.default ?? '';\n  const dir = params?.find((param) => param?.name === 'PATH_CONTEXT')?.default ?? '/';\n  return {\n    url,\n    ref,\n    dir,\n    type: detectGitType(url),\n    showGitType: false,\n    secret: '',\n    isUrlValidating: false,\n  };\n};\n\nconst getGitDataFromShipwrightBuild = (shipwrightBuild: K8sResourceKind) => {\n  const url = shipwrightBuild?.spec?.source?.git?.url ?? '';\n  const gitData = {\n    url,\n    type: detectGitType(url),\n    ref: _.get(shipwrightBuild, 'spec.source.git.revision', ''),\n    dir: _.get(shipwrightBuild, 'spec.source.contextDir', ''),\n    showGitType: false,\n    secret: _.get(shipwrightBuild, 'spec.source.git.cloneSecret', ''),\n    isUrlValidating: false,\n  };\n  return gitData;\n};\n\nexport const getKsvcRouteData = (resource: K8sResourceKind) => {\n  const { metadata, spec } = resource;\n  const containers = spec?.template?.spec?.containers ?? [];\n  const port = containers?.[0]?.ports?.[0]?.containerPort ?? '';\n  const routeData = {\n    create: metadata?.labels?.[PRIVATE_KNATIVE_SERVING_LABEL] !== 'cluster-local',\n    unknownTargetPort: _.toString(port),\n    targetPort: _.toString(port),\n    defaultUnknownPort: 8080,\n  };\n  return routeData;\n};\n\nexport const getDefaultLabels = () => {\n  return [\n    'app',\n    'app.kubernetes.io/instance',\n    'app.openshift.io/runtime',\n    'app.kubernetes.io/part-of',\n    'app.openshift.io/runtime-version',\n    'app.openshift.io/runtime-namespace',\n    'networking.knative.dev/visibility',\n  ];\n};\n\nexport const getRouteLabels = (\n  route: K8sResourceKind,\n  resource: K8sResourceKind,\n): Record<string, string> => {\n  const allLabels = _.get(resource, 'metadata.labels', {});\n  const allRouteLabels = _.get(route, 'metadata.labels', {});\n  const filteredRouteLabels = _.omit(allRouteLabels, [\n    ...getDefaultLabels(),\n    ...Object.keys(allLabels),\n  ]);\n  return filteredRouteLabels;\n};\n\nexport const getRouteData = (route: K8sResourceKind, resource: K8sResourceKind) => {\n  let routeData = {\n    disable: !_.isEmpty(route),\n    create: !_.isEmpty(route),\n    targetPort: _.get(route, 'spec.port.targetPort', ''),\n    unknownTargetPort: _.toString(route?.spec?.port?.targetPort?.split('-')?.[0]) || '',\n    defaultUnknownPort: 8080,\n    path: _.get(route, 'spec.path', ''),\n    hostname: _.get(route, 'spec.host', ''),\n    secure: _.has(route, 'spec.tls.termination'),\n    tls: {\n      termination: _.get(route, 'spec.tls.termination', null),\n      insecureEdgeTerminationPolicy: _.get(route, 'spec.tls.insecureEdgeTerminationPolicy', null),\n      caCertificate: _.get(route, 'spec.tls.caCertificate', ''),\n      certificate: _.get(route, 'spec.tls.certificate', ''),\n      destinationCACertificate: _.get(route, 'spec.tls.destinationCACertificate', ''),\n      key: _.get(route, 'spec.tls.key', ''),\n    },\n    labels: getRouteLabels(route, resource),\n  };\n  if (getResourcesType(resource) === Resources.KnativeService) {\n    routeData = {\n      ...routeData,\n      ...getKsvcRouteData(resource),\n    };\n  }\n  return routeData;\n};\n\nconst getBuildOption = (\n  buildConfig: K8sResourceKind,\n  shipwrightBuild: K8sResourceKind,\n  pipeline: PipelineKind,\n) => {\n  if (buildConfig) {\n    return BuildOptions.BUILDS;\n  }\n  if (shipwrightBuild) {\n    return BuildOptions.SHIPWRIGHT_BUILD;\n  }\n  if (pipeline) {\n    return BuildOptions.PIPELINES;\n  }\n  return BuildOptions.DISABLED;\n};\n\nexport const getBuildData = (\n  buildConfig: K8sResourceKind,\n  shipwrightBuild: K8sResourceKind,\n  pipeline: PipelineKind,\n  gitType: string,\n) => {\n  const buildOption = getBuildOption(buildConfig, shipwrightBuild, pipeline);\n  let buildStrategyType: BuildStrategyType | string;\n  let shipwrightClusterBuildStrategyType: ClusterBuildStrategy;\n  let buildStrategyData;\n\n  if (buildOption === BuildOptions.BUILDS) {\n    buildStrategyType = _.get(buildConfig, 'spec.strategy.type', '');\n  } else if (buildOption === BuildOptions.SHIPWRIGHT_BUILD) {\n    shipwrightClusterBuildStrategyType = _.get(shipwrightBuild, 'spec.strategy.name', '');\n    switch (shipwrightClusterBuildStrategyType) {\n      case ClusterBuildStrategy.BUILDAH:\n        buildStrategyType = BuildStrategyType.Docker;\n        break;\n      case ClusterBuildStrategy.S2I:\n        buildStrategyType = BuildStrategyType.Source;\n        break;\n      default:\n        buildStrategyType = '';\n    }\n  }\n\n  if (buildOption === BuildOptions.BUILDS) {\n    switch (buildStrategyType) {\n      case BuildStrategyType.Source:\n        buildStrategyData = _.get(buildConfig, 'spec.strategy.sourceStrategy');\n        break;\n      case BuildStrategyType.Docker:\n        buildStrategyData = _.get(buildConfig, 'spec.strategy.dockerStrategy');\n        break;\n      default:\n        buildStrategyData = { env: [] };\n    }\n  } else if (buildOption === BuildOptions.SHIPWRIGHT_BUILD) {\n    buildStrategyData = _.get(shipwrightBuild, 'spec');\n  }\n\n  const triggers = _.get(buildConfig, 'spec.triggers');\n\n  const buildData: BuildData = {\n    env: buildStrategyData?.env || [],\n    triggers: {\n      webhook: checkIfTriggerExists(triggers, GitReadableTypes[gitType]),\n      image: checkIfTriggerExists(triggers, 'ImageChange'),\n      config: checkIfTriggerExists(triggers, 'ConfigChange'),\n    },\n    strategy:\n      buildStrategyType ||\n      (isDockerPipeline(pipeline) ? BuildStrategyType.Docker : BuildStrategyType.Source),\n    source: { type: getBuildSourceType(buildConfig) },\n    option: buildOption,\n    clusterBuildStrategy: shipwrightClusterBuildStrategyType,\n  };\n  return buildData;\n};\n\nexport const getServerlessData = (resource: K8sResourceKind): ServerlessData => {\n  let serverlessData: ServerlessData = {\n    scaling: {\n      minpods: '',\n      maxpods: '',\n      concurrencytarget: '',\n      concurrencylimit: '',\n      autoscale: {\n        autoscalewindow: '',\n        autoscalewindowUnit: 's',\n        defaultAutoscalewindowUnit: 's',\n      },\n      concurrencyutilization: '',\n    },\n    domainMapping: [],\n  };\n  if (getResourcesType(resource) === Resources.KnativeService) {\n    const {\n      spec: {\n        template: { metadata, spec },\n      },\n    } = resource;\n    const annotations = metadata?.annotations;\n    const autoscalewindowAnnotation = annotations?.[KNATIVE_AUTOSCALEWINDOW_ANNOTATION] || '';\n    const { autoscalewindow, autoscalewindowUnit, defaultAutoscalewindowUnit } = getAutoscaleWindow(\n      autoscalewindowAnnotation,\n    );\n    serverlessData = {\n      scaling: {\n        minpods: annotations?.[KNATIVE_MINSCALE_ANNOTATION] || '',\n        maxpods: annotations?.[KNATIVE_MAXSCALE_ANNOTATION] || '',\n        concurrencytarget: annotations?.[KNATIVE_CONCURRENCYTARGET_ANNOTATION] || '',\n        concurrencylimit: spec?.containerConcurrency || '',\n        autoscale: {\n          autoscalewindow,\n          autoscalewindowUnit,\n          defaultAutoscalewindowUnit,\n        },\n        concurrencyutilization: annotations?.[KNATIVE_CONCURRENCYUTILIZATION_ANNOTATION] || '',\n      },\n      domainMapping: [],\n    };\n  }\n  return serverlessData;\n};\n\nexport const getDeploymentData = (resource: K8sResourceKind) => {\n  const deploymentData: DeploymentData = {\n    env: [],\n    replicas: 1,\n    triggers: { image: true, config: true },\n  };\n  const container = resource.spec?.template?.spec?.containers?.find((c) =>\n    [resource.metadata.name, resource.metadata.labels?.['app.kubernetes.io/name']].includes(c.name),\n  );\n  const env = container?.env ?? [];\n  switch (getResourcesType(resource)) {\n    case Resources.KnativeService:\n      return {\n        ...deploymentData,\n        env,\n        triggers: {\n          image: container?.imagePullPolicy === ImagePullPolicy.Always,\n        },\n      };\n    case Resources.OpenShift: {\n      const triggers = resource.spec?.triggers;\n      return {\n        env,\n        triggers: {\n          image: checkIfTriggerExists(triggers, 'ImageChange', resource.kind),\n          config: checkIfTriggerExists(triggers, 'ConfigChange'),\n        },\n        replicas: resource.spec?.replicas ?? 1,\n      };\n    }\n    case Resources.Kubernetes: {\n      const imageTrigger = JSON.parse(\n        resource.metadata?.annotations?.['image.openshift.io/triggers'] ?? '[]',\n      )?.[0];\n      return {\n        env,\n        triggers: {\n          image: imageTrigger?.paused === 'false',\n        },\n        replicas: resource.spec?.replicas ?? 1,\n      };\n    }\n    default:\n      return deploymentData;\n  }\n};\n\nexport const getUserLabels = (resource: K8sResourceKind) => {\n  const allLabels = _.get(resource, 'metadata.labels', {});\n  const userLabels = _.omit(allLabels, getDefaultLabels());\n  return userLabels;\n};\n\nexport const getCommonInitialValues = (\n  editAppResource: K8sResourceKind,\n  route: K8sResourceKind,\n  pipelineData: PipelineKind,\n  name: string,\n  namespace: string,\n) => {\n  const appGroupName = _.get(editAppResource, 'metadata.labels[\"app.kubernetes.io/part-of\"]');\n  const commonInitialValues = {\n    formType: 'edit',\n    name,\n    application: {\n      name: appGroupName || '',\n      selectedKey: appGroupName || UNASSIGNED_KEY,\n    },\n    project: {\n      name: namespace,\n    },\n    route: getRouteData(route, editAppResource),\n    resources: getResourcesType(editAppResource),\n    serverless: getServerlessData(editAppResource),\n    pipeline: {\n      enabled: !_.isEmpty(pipelineData),\n      type: PipelineType.PIPELINE,\n    },\n    pac: {\n      pacHasError: false,\n      repository: {\n        ...defaultRepositoryFormValues,\n      },\n    },\n    deployment: getDeploymentData(editAppResource),\n    labels: getUserLabels(editAppResource),\n    limits: getLimitsDataFromResource(editAppResource),\n    healthChecks: getHealthChecksData(editAppResource),\n    import: {\n      showEditImportStrategy: true,\n      selectedStrategy: {\n        name: '',\n        type: ImportStrategy.S2I,\n        priority: 0,\n        detectedFiles: [],\n      },\n    },\n  };\n  return commonInitialValues;\n};\n\nexport const getIconInitialValues = (editAppResource: K8sResourceKind) => {\n  const runtimeLabel = editAppResource?.metadata?.labels?.['app.openshift.io/runtime'];\n  const runtimeIcon = runtimeLabel && hasIcon(runtimeLabel) ? runtimeLabel : null;\n  return {\n    runtimeIcon,\n  };\n};\n\nexport const getGitAndDockerfileInitialValues = (\n  buildConfig: K8sResourceKind,\n  shipwrightBuild: K8sResourceKind,\n  pipeline: PipelineKind,\n) => {\n  if (_.isEmpty(buildConfig) && _.isEmpty(shipwrightBuild) && _.isEmpty(pipeline)) {\n    return {};\n  }\n\n  const currentImage = _.split(buildConfig?.spec?.strategy?.sourceStrategy?.from?.name ?? '', ':');\n  const git = !_.isEmpty(buildConfig)\n    ? getGitDataFromBuildConfig(buildConfig)\n    : !_.isEmpty(shipwrightBuild)\n    ? getGitDataFromShipwrightBuild(shipwrightBuild)\n    : getGitDataFromPipeline(pipeline);\n  const initialValues = {\n    git,\n    docker: {\n      dockerfilePath:\n        buildConfig?.spec?.strategy?.dockerStrategy?.dockerfilePath ||\n        pipeline?.spec?.params?.find((param) => param?.name === 'DOCKERFILE')?.default ||\n        'Dockerfile',\n    },\n    image: {\n      selected: pipeline?.metadata?.labels?.[PIPELINE_RUNTIME_LABEL] || currentImage[0] || '',\n      recommended: '',\n      tag: pipeline?.metadata?.labels?.[PIPELINE_RUNTIME_VERSION_LABEL] || currentImage[1] || '',\n      tagObj: {},\n      ports: [],\n      isRecommending: false,\n      couldNotRecommend: false,\n    },\n    build: getBuildData(buildConfig, shipwrightBuild, pipeline, git.type),\n  };\n  return initialValues;\n};\n\nexport const deployImageInitialValues = {\n  searchTerm: '',\n  registry: 'external',\n  allowInsecureRegistry: false,\n  imageStream: {\n    image: '',\n    tag: '',\n    namespace: '',\n  },\n  isi: {\n    name: '',\n    image: {},\n    tag: '',\n    status: { metadata: {}, status: '' },\n    ports: [],\n  },\n  image: {\n    name: '',\n    image: {},\n    tag: '',\n    status: { metadata: {}, status: '' },\n    ports: [],\n  },\n  build: {\n    env: [],\n    triggers: {},\n    strategy: '',\n  },\n  isSearchingForImage: false,\n};\n\nexport const getExternalImageInitialValues = (appResources: AppResources) => {\n  const imageStreamList = appResources?.imageStream?.data;\n  if (_.isEmpty(imageStreamList)) {\n    return {};\n  }\n  const imageStream = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n  const imageStreamData = imageStream?.[0]?.spec?.tags?.[0];\n  const name = imageStreamData?.from?.name;\n  const isAllowInsecureRegistry = imageStreamData?.importPolicy?.insecure || false;\n  return {\n    ...deployImageInitialValues,\n    searchTerm: name,\n    registry: 'external',\n    allowInsecureRegistry: isAllowInsecureRegistry,\n    imageStream: {\n      ...deployImageInitialValues.imageStream,\n    },\n  };\n};\n\nexport const getInternalImageInitialValues = (editAppResource: K8sResourceKind) => {\n  const imageStreamNamespace = _.get(\n    editAppResource,\n    'metadata.labels[\"app.openshift.io/runtime-namespace\"]',\n    '',\n  );\n  const imageStreamName = _.get(editAppResource, 'metadata.labels[\"app.openshift.io/runtime\"]', '');\n  const imageStreamTag = _.get(\n    editAppResource,\n    'metadata.labels[\"app.openshift.io/runtime-version\"]',\n    '',\n  );\n  return {\n    ...deployImageInitialValues,\n    registry: RegistryType.Internal,\n    imageStream: {\n      image: imageStreamName,\n      tag: imageStreamTag,\n      namespace: imageStreamNamespace,\n    },\n  };\n};\n\nexport const getExternalImageValues = (appResource: K8sResourceKind) => {\n  const name = _.get(appResource, 'spec.template.spec.containers[0].image', null);\n  if (_.isEmpty(appResource) || !name) {\n    return deployImageInitialValues;\n  }\n  return {\n    ...deployImageInitialValues,\n    searchTerm: name,\n    registry: RegistryType.External,\n    imageStream: {\n      ...deployImageInitialValues.imageStream,\n    },\n  };\n};\n\nexport const getFileUploadValues = (resource: K8sResourceKind, buildConfig: K8sResourceKind) => {\n  const resourceName = resource.metadata.name;\n  const fileName = buildConfig.metadata?.annotations?.jarFileName ?? '';\n  const javaArgs: string =\n    resource.spec?.template?.spec?.containers\n      ?.find((container) => container.name === resourceName)\n      ?.env?.find((args) => args.name === 'JAVA_ARGS')?.value ?? '';\n  return {\n    fileUpload: {\n      name: fileName,\n      value: '',\n      javaArgs,\n    },\n    ...getIconInitialValues(resource),\n  };\n};\n\nexport const getInitialValues = (\n  appResources: AppResources,\n  appName: string,\n  namespace: string,\n) => {\n  const editAppResourceData = appResources.editAppResource?.data;\n  const routeData = appResources.route?.data;\n  const buildConfigData = appResources.buildConfig?.data;\n  const shipwrightBuildData = appResources.shipwrightBuild?.data;\n  const pipelineData = appResources.pipeline?.data;\n\n  const commonValues = getCommonInitialValues(\n    editAppResourceData,\n    routeData,\n    pipelineData,\n    appName,\n    namespace,\n  );\n  const gitDockerValues = getGitAndDockerfileInitialValues(\n    buildConfigData,\n    shipwrightBuildData,\n    pipelineData,\n  );\n  let fileUploadValues = {};\n  let iconValues = {};\n  let externalImageValues = {};\n  let internalImageValues = {};\n  if (_.isEmpty(gitDockerValues)) {\n    iconValues = getIconInitialValues(editAppResourceData);\n    externalImageValues = getExternalImageInitialValues(appResources);\n    internalImageValues = _.isEmpty(externalImageValues)\n      ? getInternalImageInitialValues(editAppResourceData)\n      : {};\n    if (\n      _.isEmpty(externalImageValues) &&\n      !_.get(internalImageValues, 'imageStream.tag') &&\n      !_.get(internalImageValues, 'imageStream.image')\n    ) {\n      if (editAppResourceData?.kind === ServiceModel.kind) {\n        internalImageValues = {};\n        externalImageValues = getExternalImageValues(editAppResourceData);\n      }\n    }\n  } else if (isFromJarUpload(getBuildSourceType(buildConfigData))) {\n    fileUploadValues = getFileUploadValues(editAppResourceData, buildConfigData);\n  }\n\n  return {\n    ...commonValues,\n    ...iconValues,\n    ...fileUploadValues,\n    ...gitDockerValues,\n    ...externalImageValues,\n    ...internalImageValues,\n  };\n};\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { nameValidationSchema } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  buildValidationSchema,\n  resourcesValidationSchema,\n} from './validation-schema';\n\nexport const fileNameRegex = /\\.(jar)$/i;\n\nexport const fileUploadValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .matches(fileNameRegex, {\n        message: t('devconsole~Must be a JAR file.'),\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.'))\n      .required(t('devconsole~Required')),\n    javaArgs: yup.string(),\n  });\n\nexport const validationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: nameValidationSchema(t),\n    fileUpload: fileUploadValidationSchema(t),\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    image: imageValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    build: buildValidationSchema,\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n  });\n\nexport const getAppName = (name: string) => {\n  if (!fileNameRegex.test(name)) {\n    return undefined;\n  }\n  return _.kebabCase(name.split('.').shift());\n};\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\nimport { nameValidationSchema } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  isiValidationSchema,\n  resourcesValidationSchema,\n} from './validation-schema';\n\nexport const deployValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    name: nameValidationSchema(t),\n    isi: isiValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n  });\n","import * as React from 'react';\nimport { Resources } from '../import/import-types';\nimport FormSection from '../import/section/FormSection';\nimport { HealthChecksProbeType } from './health-checks-types';\nimport HealthCheckProbe from './HealthCheckProbe';\n\ninterface HealthChecksProps {\n  title?: string;\n  resourceType: Resources;\n}\n\nconst HealthChecks: React.FC<HealthChecksProps> = ({ title, resourceType }) => (\n  <FormSection title={title}>\n    <HealthCheckProbe probeType={HealthChecksProbeType.ReadinessProbe} />\n\n    <HealthCheckProbe probeType={HealthChecksProbeType.LivenessProbe} />\n\n    {resourceType !== Resources.KnativeService && (\n      <HealthCheckProbe probeType={HealthChecksProbeType.StartupProbe} />\n    )}\n  </FormSection>\n);\n\nexport default HealthChecks;\n","import * as React from 'react';\nimport { Button, ButtonVariant, Tooltip } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { GreenCheckCircleIcon } from '@console/shared';\nimport { getHealthChecksProbeConfig, healthChecksDefaultValues } from './health-checks-probe-utils';\nimport { HealthCheckProbeData } from './health-checks-types';\nimport { HealthCheckContext } from './health-checks-utils';\nimport ProbeForm from './ProbeForm';\nimport './HealthCheckProbe.scss';\n\ninterface HealthCheckProbeProps {\n  probeType: string;\n}\n\nconst HealthCheckProbe: React.FC<HealthCheckProbeProps> = ({ probeType }) => {\n  const { t } = useTranslation();\n  const {\n    values: { healthChecks },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const { viewOnly } = React.useContext(HealthCheckContext);\n  const [temporaryProbeData, setTemporaryProbeData] = React.useState<HealthCheckProbeData>();\n  const showProbe = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, true);\n    setTemporaryProbeData(healthChecks?.[probeType].data);\n  };\n\n  const handleDeleteProbe = () => {\n    setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n    if (healthChecks?.[probeType]?.modified) {\n      setFieldValue(`healthChecks.${probeType}.modified`, false);\n    } else {\n      setFieldValue(`healthChecks.${probeType}.modified`, true);\n    }\n  };\n\n  const handleReset = () => {\n    if (!healthChecks?.[probeType]?.enabled) {\n      setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n    } else {\n      setFieldValue(`healthChecks.${probeType}.showForm`, false);\n      setFieldValue(`healthChecks.${probeType}.data`, temporaryProbeData);\n    }\n    setFieldValue(`healthChecks.${probeType}.modified`, false);\n  };\n\n  const handleSubmit = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, false);\n    setFieldValue(`healthChecks.${probeType}.enabled`, true);\n    setFieldValue(`healthChecks.${probeType}.modified`, true);\n  };\n\n  const handleAddProbe = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, true);\n  };\n\n  const renderProbe = () => {\n    if (healthChecks?.[probeType]?.showForm) {\n      return <ProbeForm onSubmit={handleSubmit} onClose={handleReset} probeType={probeType} />;\n    }\n    if (healthChecks?.[probeType]?.enabled) {\n      return (\n        <>\n          <Button\n            className=\"odc-heath-check-probe__successButton\"\n            variant={ButtonVariant.plain}\n            isInline\n            onClick={showProbe}\n          >\n            <span className=\"odc-heath-check-probe__successText\">\n              <GreenCheckCircleIcon />{' '}\n              {t('devconsole~{{healthCheckProbeAdded}} added', {\n                healthCheckProbeAdded: getHealthChecksProbeConfig(probeType, t).formTitle,\n              })}\n            </span>\n          </Button>\n          {!viewOnly && (\n            <Tooltip content={t('devconsole~Remove')} position=\"right\">\n              <Button\n                className=\"pf-m-plain--align-left\"\n                variant={ButtonVariant.plain}\n                onClick={handleDeleteProbe}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </Tooltip>\n          )}\n        </>\n      );\n    }\n    return viewOnly ? (\n      t('devconsole~No {{noHealthCheckProbe}}', {\n        noHealthCheckProbe: getHealthChecksProbeConfig(probeType, t).formTitle,\n      })\n    ) : (\n      <Button\n        className=\"pf-m-link--align-left\"\n        variant={ButtonVariant.link}\n        onClick={handleAddProbe}\n        icon={<PlusCircleIcon />}\n      >\n        {t('devconsole~Add {{addHealthCheckProbe}}', {\n          addHealthCheckProbe: getHealthChecksProbeConfig(probeType, t).formTitle,\n        })}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"co-section-heading-tertiary odc-heath-check-probe__formTitle\">\n        {getHealthChecksProbeConfig(probeType, t).formTitle}\n        {healthChecks?.[probeType]?.enabled && (\n          <Button\n            className=\"pf-m-link--align-left\"\n            variant={ButtonVariant.link}\n            onClick={showProbe}\n          >\n            &nbsp;&nbsp;\n            {`${viewOnly ? t('devconsole~View') : t('devconsole~Edit')} ${t('devconsole~Probe')}`}\n          </Button>\n        )}\n      </div>\n      <div className=\"pf-v5-c-form__helper-text\">\n        {getHealthChecksProbeConfig(probeType, t).formSubtitle}\n      </div>\n      <div className=\"co-toolbar__group co-toolbar__group--left\">{renderProbe()}</div>\n    </>\n  );\n};\n\nexport default HealthCheckProbe;\n","import * as React from 'react';\nimport { TextInputTypes, InputGroupText } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { InputGroupField, InputField, DropdownField, ActionGroupWithIcons } from '@console/shared';\nimport FormSection from '../import/section/FormSection';\nimport { RequestType } from './health-checks-types';\nimport { HealthCheckContext } from './health-checks-utils';\nimport {\n  HTTPRequestTypeForm,\n  TCPRequestTypeForm,\n  CommandRequestTypeForm,\n} from './RequestTypeForms';\nimport './ProbeForm.scss';\n\nconst getRequestTypeForm = (value: string, probeType: string) => {\n  switch (value) {\n    case RequestType.HTTPGET:\n      return <HTTPRequestTypeForm probeType={probeType} />;\n    case RequestType.ContainerCommand:\n      return <CommandRequestTypeForm probeType={probeType} />;\n    case RequestType.TCPSocket:\n      return <TCPRequestTypeForm probeType={probeType} />;\n    default:\n      return null;\n  }\n};\n\ninterface ProbeFormProps {\n  onSubmit: () => void;\n  onClose: () => void;\n  probeType: string;\n}\n\nconst ProbeForm: React.FC<ProbeFormProps> = ({ onSubmit, onClose, probeType }) => {\n  const { t } = useTranslation();\n  const {\n    values: { healthChecks },\n    errors,\n  } = useFormikContext<FormikValues>();\n  const { viewOnly } = React.useContext(HealthCheckContext);\n  const RequestTypeOptions = {\n    httpGet: t('devconsole~HTTP GET'),\n    command: t('devconsole~Container command'),\n    tcpSocket: t('devconsole~TCP socket'),\n  };\n  return (\n    <div className=\"odc-heath-check-probe-form\">\n      <FormSection>\n        <DropdownField\n          name={`healthChecks.${probeType}.data.requestType`}\n          label={t('devconsole~Type')}\n          items={RequestTypeOptions}\n          title={RequestType.HTTPGET}\n          disabled={viewOnly}\n          fullWidth\n        />\n        {getRequestTypeForm(healthChecks?.[probeType]?.data?.requestType, probeType)}\n        <InputField\n          type={TextInputTypes.text}\n          name={`healthChecks.${probeType}.data.failureThreshold`}\n          label={t('devconsole~Failure threshold')}\n          style={{ maxWidth: '100%' }}\n          helpText={t(\n            'devconsole~How many times the probe will try starting or restarting before giving up.',\n          )}\n          isDisabled={viewOnly}\n        />\n        <InputField\n          type={TextInputTypes.text}\n          name={`healthChecks.${probeType}.data.successThreshold`}\n          label={t('devconsole~Success threshold')}\n          style={{ maxWidth: '100%' }}\n          helpText={t(\n            'devconsole~How many consecutive successes for the probe to be considered successful after having failed.',\n          )}\n          isDisabled={viewOnly}\n        />\n        <InputGroupField\n          type={TextInputTypes.text}\n          name={`healthChecks.${probeType}.data.initialDelaySeconds`}\n          label={t('devconsole~Initial delay')}\n          helpText={t(\n            'devconsole~How long to wait after the Container starts before checking its health.',\n          )}\n          afterInput={<InputGroupText>{t('devconsole~seconds')}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n          isDisabled={viewOnly}\n        />\n        <InputGroupField\n          type={TextInputTypes.text}\n          name={`healthChecks.${probeType}.data.periodSeconds`}\n          label={t('devconsole~Period')}\n          helpText={t('devconsole~How often to perform the probe.')}\n          afterInput={<InputGroupText>{t('devconsole~seconds')}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n          isDisabled={viewOnly}\n        />\n        <InputGroupField\n          type={TextInputTypes.text}\n          name={`healthChecks.${probeType}.data.timeoutSeconds`}\n          label={t('devconsole~Timeout')}\n          helpText={t(\n            'devconsole~How long to wait for the probe to finish, if the time is exceeded, the probe is considered failed.',\n          )}\n          afterInput={<InputGroupText>{t('devconsole~seconds')}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n          isDisabled={viewOnly}\n        />\n      </FormSection>\n      <ActionGroupWithIcons\n        onSubmit={!viewOnly ? onSubmit : undefined}\n        onClose={onClose}\n        isDisabled={!_.isEmpty(errors?.healthChecks?.[probeType])}\n      />\n    </div>\n  );\n};\n\nexport default ProbeForm;\n","import * as React from 'react';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { InputField, CheckboxField, getFieldId, TextColumnField } from '@console/shared';\nimport { Resources } from '../import/import-types';\nimport { HealthCheckContext } from './health-checks-utils';\n\ninterface RequestTypeFormProps {\n  probeType?: string;\n}\n\nexport const renderPortField = (\n  fieldName: string,\n  resourceType: Resources,\n  viewOnly: boolean,\n  t: TFunction,\n) => {\n  if (resourceType === Resources.KnativeService) {\n    return (\n      <InputField\n        type={TextInputTypes.text}\n        name=\"knative-port\"\n        label={t('devconsole~Port')}\n        placeholder=\"0\"\n        isDisabled\n      />\n    );\n  }\n  return (\n    <InputField\n      type={TextInputTypes.text}\n      name={fieldName}\n      label={t('devconsole~Port')}\n      isDisabled={viewOnly}\n      required\n    />\n  );\n};\n\nexport const HTTPRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const { t } = useTranslation();\n  const {\n    values: { healthChecks, resources },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const { viewOnly } = React.useContext(HealthCheckContext);\n  const httpHeaders = healthChecks?.[probeType]?.data?.httpGet?.httpHeaders;\n  const initialNameValuePairs = !_.isEmpty(httpHeaders)\n    ? httpHeaders.map((val) => _.values(val))\n    : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialNameValuePairs);\n  const portFieldName = `healthChecks.${probeType}.data.httpGet.port`;\n\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => {\n          if (_.isObject(value)) {\n            return { name, valueFrom: value };\n          }\n          if (value.length) {\n            return { name, value };\n          }\n          return null;\n        }),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue(`healthChecks.${probeType}.data.httpGet.httpHeaders`, updatedNameValuePairs);\n    },\n    [setFieldValue, probeType],\n  );\n  return (\n    <>\n      <CheckboxField\n        name={`healthChecks.${probeType}.data.httpGet.scheme`}\n        label={t('devconsole~Use HTTPS')}\n        value=\"HTTPS\"\n        isDisabled={viewOnly}\n      />\n      <FormGroup\n        fieldId={getFieldId(`healthChecks.${probeType}.data.httpGet.httpHeaders`, 'name-value')}\n        name={`healthChecks.${probeType}.data.httpGet.httpHeaders`}\n        label={t('devconsole~HTTP Headers')}\n      >\n        <NameValueEditor\n          nameValuePairs={nameValue}\n          valueString={t('devconsole~Value')}\n          nameString={t('devconsole~Header name')}\n          addString={t('devconsole~Add header')}\n          readOnly={viewOnly}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n      <InputField\n        type={TextInputTypes.text}\n        name={`healthChecks.${probeType}.data.httpGet.path`}\n        label={t('devconsole~Path')}\n        placeholder=\"/\"\n        isDisabled={viewOnly}\n      />\n      {renderPortField(portFieldName, resources, viewOnly, t)}\n    </>\n  );\n};\n\nexport const TCPRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const { t } = useTranslation();\n  const {\n    values: { resources },\n  } = useFormikContext<FormikValues>();\n  const { viewOnly } = React.useContext(HealthCheckContext);\n  const portFieldName = `healthChecks.${probeType}.data.tcpSocket.port`;\n  return renderPortField(portFieldName, resources, viewOnly, t);\n};\n\nexport const CommandRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const { t } = useTranslation();\n  const {\n    values: { healthChecks },\n  } = useFormikContext<FormikValues>();\n  const { viewOnly } = React.useContext(HealthCheckContext);\n  const commands = healthChecks?.[probeType]?.data?.exec?.command || [''];\n  return (\n    <TextColumnField\n      name={`healthChecks.${probeType}.data.exec.command`}\n      label={t('devconsole~Command')}\n      addLabel={t('devconsole~Add command')}\n      placeholder={t('devconsole~argument')}\n      helpText={t('devconsole~The command to run inside the Container.')}\n      required\n      disableDeleteRow={commands.length === 1}\n      isReadOnly={viewOnly}\n    />\n  );\n};\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { FirehoseResource, Firehose } from '@console/internal/components/utils';\nimport AddHealthChecksForm from './AddHealthChecksForm';\n\nconst HealthChecksPage: React.FC = () => {\n  const { ns, kind, name, containerName } = useParams();\n  const resource: FirehoseResource[] = [\n    {\n      kind,\n      namespace: ns,\n      isList: false,\n      name,\n      prop: 'resource',\n    },\n  ];\n\n  return (\n    <Firehose resources={resource}>\n      <AddHealthChecksForm currentContainer={containerName} />\n    </Firehose>\n  );\n};\n\nexport default HealthChecksPage;\n","import * as React from 'react';\nimport { Formik } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { FirehoseResult, LoadingBox, StatusBox, history } from '@console/internal/components/utils';\nimport { K8sResourceKind, k8sUpdate, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport AddHealthChecks from './AddHealthChecks';\nimport { getHealthChecksData } from './create-health-checks-probe-utils';\nimport { healthChecksProbesValidationSchema } from './health-checks-probe-validation-utils';\nimport { updateHealthChecksProbe } from './health-checks-utils';\n\ntype AddHealthChecksFormProps = {\n  resource?: FirehoseResult<K8sResourceKind>;\n  currentContainer: string;\n};\n\nconst AddHealthChecksForm: React.FC<AddHealthChecksFormProps> = ({\n  resource,\n  currentContainer,\n}) => {\n  const { t } = useTranslation();\n  if (!resource.loaded && _.isEmpty(resource.loadError)) {\n    return <LoadingBox />;\n  }\n\n  if (resource.loadError) {\n    return <StatusBox loaded={resource.loaded} loadError={resource.loadError} />;\n  }\n\n  const container = _.find(\n    resource.data.spec.template.spec.containers,\n    (data) => data.name === currentContainer,\n  );\n\n  if (_.isEmpty(container)) {\n    return <div className=\"pf-v5-u-text-align-center\">{t('devconsole~Container not found')}</div>;\n  }\n\n  const handleSubmit = (values, actions) => {\n    const updatedResource = updateHealthChecksProbe(values, resource.data, container);\n\n    return k8sUpdate(modelFor(referenceFor(resource.data)), updatedResource)\n      .then(() => {\n        actions.setStatus({ error: '' });\n        history.goBack();\n      })\n      .catch((err) => {\n        actions.setStatus({ errors: err });\n      });\n  };\n  const containerIndex = _.findIndex(resource.data.spec.template.spec.containers, [\n    'name',\n    currentContainer,\n  ]);\n  const initialValues = {\n    healthChecks: getHealthChecksData(resource.data, containerIndex),\n    containerName: container.name,\n    resources: getResourcesType(resource.data),\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={yup.object().shape({\n        healthChecks: healthChecksProbesValidationSchema(t),\n      })}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n    >\n      {(formikProps) => (\n        <AddHealthChecks\n          resource={resource.data}\n          currentContainer={currentContainer}\n          {...formikProps}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default AddHealthChecksForm;\n","import * as React from 'react';\nimport { Form, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport Helmet from 'react-helmet';\nimport { useTranslation, Trans } from 'react-i18next';\nimport {\n  ContainerSelect,\n  documentationURLs,\n  getDocumentationURL,\n  history,\n  isManaged,\n  PageHeading,\n  ResourceLink,\n} from '@console/internal/components/utils';\nimport { ContainerModel } from '@console/internal/models';\nimport { K8sResourceKind, referenceFor, modelFor } from '@console/internal/module/k8s';\nimport { FormFooter } from '@console/shared';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { getHealthChecksData } from './create-health-checks-probe-utils';\nimport { useViewOnlyAccess, HealthCheckContext } from './health-checks-utils';\nimport HealthChecks from './HealthChecks';\n\nimport './AddHealthChecks.scss';\n\ntype AddHealthChecksProps = {\n  resource?: K8sResourceKind;\n  currentContainer: string;\n};\n\nconst AddHealthChecks: React.FC<FormikProps<FormikValues> & AddHealthChecksProps> = ({\n  resource,\n  currentContainer,\n  handleSubmit,\n  handleReset,\n  errors,\n  status,\n  isSubmitting,\n  setFieldValue,\n  values,\n  dirty,\n}) => {\n  const viewOnly = useViewOnlyAccess(resource);\n  const { t } = useTranslation();\n  const [currentKey, setCurrentKey] = React.useState(currentContainer);\n  const containers = resource?.spec?.template?.spec?.containers;\n  const healthCheckAdded = _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n  const containersByKey = _.keyBy(containers, 'name');\n  const pageTitle = healthCheckAdded\n    ? t('devconsole~Edit health checks')\n    : t('devconsole~Add health checks');\n  const {\n    kind,\n    metadata: { name, namespace },\n  } = resource;\n  const kindForCRDResource = referenceFor(resource);\n  const resourceKind = modelFor(kindForCRDResource).crd ? kindForCRDResource : kind;\n  const isFormClean = _.every(values.healthChecks, { modified: false });\n\n  const healthURL = getDocumentationURL(documentationURLs.applicationHealth);\n\n  const handleSelectContainer = (containerName: string) => {\n    const containerIndex = _.findIndex(resource.spec.template.spec.containers, [\n      'name',\n      containerName,\n    ]);\n    setCurrentKey(containerName);\n    setFieldValue('containerName', containerName);\n    setFieldValue('healthChecks', getHealthChecksData(resource, containerIndex));\n    history.replace(\n      `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containerName}/health-checks`,\n    );\n  };\n\n  return (\n    <HealthCheckContext.Provider value={{ viewOnly }}>\n      <Helmet>\n        <title>{pageTitle}</title>\n      </Helmet>\n      <PageHeading\n        title={\n          <>\n            {pageTitle}\n            {!isManaged() && (\n              <Button variant=\"link\" component=\"a\" href={healthURL} target=\"_blank\">\n                {t('devconsole~Learn more')} <ExternalLinkAltIcon />\n              </Button>\n            )}\n          </>\n        }\n      />\n      <Form onSubmit={!viewOnly ? handleSubmit : undefined}>\n        <div className=\"odc-add-health-checks__body\">\n          <p className=\"odc-add-health-checks__paragraph\">\n            <Trans t={t} ns=\"devconsole\">\n              Health checks for{' '}\n              <ResourceLink\n                kind={referenceFor(resource)}\n                name={name}\n                namespace={namespace}\n                title={name}\n                inline\n              />\n            </Trans>\n          </p>\n          <p className=\"odc-add-health-checks__paragraph\">\n            {t('devconsole~Container')} &nbsp;\n            {_.size(containers) > 1 ? (\n              <ContainerSelect\n                currentKey={currentKey}\n                containers={containersByKey}\n                onChange={handleSelectContainer}\n              />\n            ) : (\n              <ResourceLink\n                kind={ContainerModel.kind}\n                name={containers[0].name}\n                linkTo={false}\n                inline\n              />\n            )}\n          </p>\n          <br />\n          <HealthChecks resourceType={getResourcesType(resource)} />\n        </div>\n        <FormFooter\n          handleReset={handleReset}\n          errorMessage={status && status?.errors?.json?.message}\n          isSubmitting={isSubmitting}\n          submitLabel={healthCheckAdded ? t('devconsole~Save') : t('devconsole~Add')}\n          disableSubmit={isFormClean || !dirty || !_.isEmpty(errors) || isSubmitting}\n          resetLabel={t('devconsole~Cancel')}\n          hideSubmit={viewOnly}\n        />\n      </Form>\n    </HealthCheckContext.Provider>\n  );\n};\n\nexport default AddHealthChecks;\n"],"sourceRoot":""}