{"version":3,"sources":["webpack:///./packages/dev-console/src/components/topology/bindable-services/index.ts","webpack:///./packages/dev-console/src/components/topology/bindable-services/bindable-service-context.ts"],"names":["ServiceBindingContextProvider","bindableServices","loaded","Provider","useValuesServiceBindingContext","setBindableServices","setLoaded","then","resp","catch"],"mappings":"6FAAA,uJ,kCCAA,yFASO,MAKMA,EALwB,gBAA+C,CAClFC,iBAAkB,GAClBC,QAAQ,IAGyDC,SAEtDC,EAAiC,KAC5C,MAAOH,EAAkBI,GAAuB,WAAe,KACxDH,EAAQI,GAAa,YAAe,GAa3C,OAZA,YAAgB,KACd,cACGC,KAAMC,IACLH,EAAoBG,GACpBF,GAAU,KAEXG,MAAM,KACLJ,EAAoB,IACpBC,GAAU,MAEb,IAEI,CAAEL,mBAAkBC","file":"dev-console/code-refs/serviceBindingContext-chunk-7203329395aa080f1f42.min.js","sourcesContent":["export { ServiceBindingContextProvider } from './bindable-service-context';\nexport { useValuesServiceBindingContext } from './bindable-service-context';\n","import * as React from 'react';\nimport { fetchBindableServices } from './fetch-bindable-services-utils';\nimport { BindableServiceGVK } from './types';\n\nexport type ServiceBindingContextType = {\n  bindableServices: BindableServiceGVK[];\n  loaded: boolean;\n};\n\nexport const ServiceBindingContext = React.createContext<ServiceBindingContextType>({\n  bindableServices: [],\n  loaded: false,\n});\n\nexport const ServiceBindingContextProvider = ServiceBindingContext.Provider;\n\nexport const useValuesServiceBindingContext = (): ServiceBindingContextType => {\n  const [bindableServices, setBindableServices] = React.useState([]);\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    fetchBindableServices()\n      .then((resp) => {\n        setBindableServices(resp);\n        setLoaded(true);\n      })\n      .catch(() => {\n        setBindableServices([]);\n        setLoaded(true);\n      });\n  }, []);\n\n  return { bindableServices, loaded };\n};\n"],"sourceRoot":""}