{"version":3,"sources":["webpack:///./public/components/image-stream.tsx","webpack:///./packages/dev-console/src/components/buildconfig/index.ts","webpack:///./packages/pipelines-plugin/src/models/index.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/const.ts","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/import-types.ts","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/pipelines-plugin/src/models/pipelines.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts","webpack:///./packages/pipelines-plugin/src/components/repository/consts.ts","webpack:///./packages/dev-console/src/components/import/import-validation-utils.ts","webpack:///./packages/dev-console/src/components/import/serverless/serverless-utils.ts","webpack:///./packages/pipelines-plugin/src/components/repository/repository-form-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pac/const.ts","webpack:///./packages/dev-console/src/utils/imagestream-utils.ts","webpack:///./packages/dev-console/src/components/import/GiteaIcon.tsx","webpack:///./public/components/image-stream-timeline.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamContext.ts","webpack:///./packages/dev-console/src/types/samples.ts","webpack:///./packages/dev-console/src/utils/samples.ts","webpack:///./packages/dev-console/src/components/import/CreateSecretModal.tsx","webpack:///./packages/console-shared/src/components/editor/yaml-download-utils.ts","webpack:///./packages/dev-console/src/models/samples.ts","webpack:///./packages/dev-console/src/components/import/git/GitSection.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStream.tsx","webpack:///./packages/dev-console/src/components/import/git/AdvancedGitOptions.tsx","webpack:///./packages/dev-console/src/components/import/git/SourceSecretSelector.tsx","webpack:///./packages/dev-console/src/components/dropdown/SourceSecretDropdown.tsx","webpack:///./packages/dev-console/src/components/import/git/GitTypeSelector.tsx","webpack:///./packages/dev-console/src/components/import/git/SampleRepo.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamDropdown.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamNsDropdown.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamTagDropdown.tsx","webpack:///./packages/console-shared/src/components/editor/theme.ts","webpack:///./packages/console-shared/src/components/alerts/SwitchToYAMLAlert.tsx","webpack:///./packages/dev-console/src/components/buildconfig/types.ts","webpack:///./packages/dev-console/src/components/buildconfig/sections/NameSection.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/EditorField.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/EnvironmentVariablesSection.tsx","webpack:///./packages/dev-console/src/components/buildconfig/form-utils/initial-data.ts","webpack:///./packages/dev-console/src/components/buildconfig/form-utils/convert-to-buildconfig.ts","webpack:///./packages/dev-console/src/components/buildconfig/BuildConfigFormPage.tsx","webpack:///./packages/dev-console/src/components/buildconfig/form-utils/index.ts","webpack:///./packages/dev-console/src/components/buildconfig/form-utils/types.ts","webpack:///./packages/dev-console/src/components/buildconfig/form-utils/convert-to-form.ts","webpack:///./packages/dev-console/src/components/buildconfig/form-utils/validation.ts","webpack:///./packages/dev-console/src/components/buildconfig/EditBuildConfig.tsx","webpack:///./packages/dev-console/src/components/buildconfig/BuildConfigForm.tsx","webpack:///./packages/dev-console/src/components/buildconfig/BuildConfigFormEditor.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/HooksSection.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/ImagesSection.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/PolicySection.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/SecretsSection.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/SourceSection.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/TriggersSection.tsx"],"names":["getAnnotationTags","specTag","split","getBuilderTags","imageStream","statusTags","getStatusTags","spec","tags","tag","annotationTags","isBuilderTag","name","getBuilderTagsSortedByVersion","sort","a","b","v1","v2","localeCompare","getMostRecentBuilderTag","isBuilder","common","factory","menuActions","getExtensionsActionsForKind","ImageStreamTagsRow","statusTag","imageStreamStatus","latest","from","referencesTag","image","created","dockerRepositoryCheck","t","className","kind","metadata","namespace","title","linkTo","timestamp","ExampleDockerCommandPopover","publicImageRepository","pushCommand","pullCommand","headerContent","minWidth","bodyContent","value","ns","href","text","type","variant","ImageStreamsDetails","obj","imageRepository","imageCount","specTagByName","importErrors","status","acc","importErrorCondition","conditions","condition","push","message","warning","alerts","error","i","key","resource","ImageStreamHistory","imageStreamStatusTags","imageStreamTags","imageStreamName","imageStreamNamespace","displayName","pages","details","editYaml","history","ImageStreamsDetailsPage","props","tableColumnClasses","columnClass","ImageStreamsTableRow","columnID","labels","creationTimestamp","actions","ImageStreamsList","ImageStreamsTableHeader","sortField","transforms","id","Header","Row","virtualize","buildPhase","build","phase","ImageStreamsPage","ListComponent","canCreate","StartedByLabel","StartedByAnnotation","TektonTaskAnnotation","TaskProviders","TektonTaskLabel","TektonResourceLabel","PipelineResourceType","VolumeTypes","SecretAnnotationId","Git","Image","PIPELINE_GA_VERSION","TRIGGERS_GA_VERSION","PIPELINE_UNSIMPLIFIED_METRICS_VERSION","PIPELINE_SERVICE_ACCOUNT","PIPELINE_RUN_AUTO_START_FAILED","DEFAULT_CHART_HEIGHT","DEFAULT_LEGEND_CHART_HEIGHT","DEFAULT_SAMPLES","preferredNameAnnotation","chainsSignedAnnotation","PIPELINE_NAMESPACE","PIPELINERUN_TEMPLATE_NAMESPACE","PIPELINE_CONFIG_NAME","PipelineMetricsLevel","FLAG_TEKTON_V1_ENABLED","FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER","FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER","flexStyle","display","flex","flexDirection","margin","subTitle","fullWidth","children","flexLayout","extraMargin","dataTest","style","PipelineType","hostnameRegex","pathRegex","gitUrlRegex","projectNameValidationSchema","shape","matches","required","applicationNameValidationSchema","selectedKey","max","when","is","then","deploymentValidationSchema","replicas","transform","cv","undefined","test","min","Number","MAX_SAFE_INTEGER","maxSafeInteger","resourcesValidationSchema","oneOf","OpenShift","Kubernetes","KnativeService","serverlessValidationSchema","scaling","minpods","maxpods","limit","this","parent","concurrencytarget","concurrencylimit","concurrencyutilization","autoscale","autoscalewindow","autoscalewindowUnit","unit","convertToSec","domainMapping","of","excludeEmptyString","domainName","length","routeValidationSchema","secure","tls","termination","hostname","path","unknownTargetPort","typeError","integer","limitsValidationSchema","cpu","request","requestUnit","limitUnit","ensure","memory","imageValidationSchema","strategy","selected","gitValidationSchema","url","showGitType","dockerValidationSchema","containerPort","dockerfilePath","devfileValidationSchema","devfilePath","devfileContent","devfileHasError","devfileSuggestedResources","buildValidationSchema","isiValidationSchema","importFlowPipelineTemplateValidationSchema","isPipelineEnabled","buildOption","pipelineType","PIPELINES","PAC","templateSelected","color","PipelineModel","apiGroup","apiVersion","label","labelKey","labelPluralKey","plural","abbr","namespaced","labelPlural","crd","PipelineModelV1Beta1","PipelineRunModel","PipelineRunModelV1Beta1","TaskModel","TaskModelV1Beta1","TaskRunModel","TaskRunModelV1Beta1","CustomRunModelV1Beta1","PipelineResourceModel","ClusterTaskModel","ConditionModel","TriggerBindingModel","ClusterTriggerBindingModel","TriggerTemplateModel","EventListenerModel","RepositoryModel","TektonConfigModel","TektonHubModel","TektonResultModel","isInteger","bitBucketUserNameRegex","RepositoryFields","RepoAnnotationFields","RepositoryRuntimes","RepositoryLabels","REPOSITORY","URL_REPO","URL_ORG","SHA","EVENT_TYPE","RepositoryAnnotations","SHA_MESSAGE","SHA_URL","REPO_URL","BRANCH","PacConfigurationTypes","defaultRepositoryFormValues","gitUrl","githubAppAvailable","gitProvider","INVALID","method","showOverviewPage","yamlData","webhook","token","secret","user","autoAttach","AccessTokenDocLinks","GITHUB","GITLAB","BITBUCKET","WebhookDocLinks","gitProviderTypesHosts","validationSchema","project","application","git","docker","devfile","deployment","serverless","route","limits","resources","healthChecks","pac","pipeline","hasDomain","domain","startsWith","includes","detectGitType","GITEA","UNSURE","createComponentName","nameString","kebabCaseStr","match","detectGitRepoName","replace","pop","getAutoscaleWindow","autoscaleValue","val","defaultAutoscalewindowUnit","DOMAIN_MAPPING_KSVC_INFO_REGEX","removeKsvcInfoFromDomainMapping","dm","getOtherKsvcFromDomainMapping","currentKsvcName","ref","removeDuplicateDomainMappings","allDomainMappings","connectedDomainMappings","Set","filter","map","n","hasOtherKsvcDomainMappings","some","RegExp","getAllOtherDomainMappingInUse","domainMappings","data","serviceName","d","selectedDomain","find","dryRunOpt","dryRun","repositoryValidationSchema","accessToken","secretRef","pipelinesAccessTokenValidationSchema","importFlowRepositoryValidationSchema","repository","pipelineEnabled","createRepositoryResources","values","secretObj","webhookSecret","encodedSecret","encode","detectedGitType","repositoryName","generateName","opaque","stringData","model","queryParams","createTokenSecret","op","gitHost","source","git_provider","webhook_secret","createRemoteWebhook","loaded","webhookURL","gitService","authToken","sslVerification","decode","createRepoWebhook","recommendRepositoryName","getPipelineRunTemplate","runtime","repoName","runTimeTemplate","pipelineRunTemplateCfg","labelSelector","matchLabels","template","e","console","log","pipelineRunTemplate","getFallbackTemplate","getPipelineRunDefaultTemplate","healthChecksValidationSchema","containerName","showForm","enabled","modified","periodSeconds","initialDelaySeconds","failureThreshold","timeoutSeconds","successThreshold","requestType","httpGet","port","tcpSocket","exec","command","healthChecksProbesValidationSchema","readinessProbe","livenessProbe","startupProbe","PAC_GH_APP_NEW","PAC_GH_APP_DOC","PAC_GH_APP_MANIFEST_API","EVENT_LISTNER_NAME","PAC_SECRET_NAME","PAC_GH_APP_NAME","PAC_INFO","PAC_TEMPLATE_DEFAULT","imageStreamLabels","getSampleRepo","annotations","sampleRepo","getSampleRef","sampleRef","getSampleContextDir","sampleContextDir","getPorts","imageStreamImage","portSpec","result","parts","parseInt","protocol","toUpperCase","warn","portsFromSpec","dockerImageMetadata","Config","ExposedPorts","ContainerConfig","makePortName","toLowerCase","prettifyName","first","prep","letter","normalizeBuilderImages","imageStreams","Array","isArray","reduce","builderImages","recentTag","description","iconClass","iconUrl","getTagDataWithDisplayName","imageTags","selectedTag","defaultName","imageTag","getSuggestedName","imageName","RegistryType","BuilderImagesNamespace","imageRegistryType","External","Internal","getImageStreamTags","getSortedTags","getProjectResource","isList","prop","getImageStreamResource","topology","xmlns","viewBox","fill","role","width","height","getImageStreamTagName","ImageStreamTimelineItem","linkToTag","referenceAndSHA","dockerImageReference","simple","isTagVersionLatest","comparedTag","comparedTagPosition","orderedTagArray","orderedTag","ImageStreamTimeline","tagsArray","items","timeline","ImageStreamContext","isGitImportSource","gitImport","isContainerImportSource","containerImport","createSampleLink","sample","activeNamespace","searchParams","URLSearchParams","set","revision","contextDir","getGitImportSample","window","location","search","sampleName","get","getContainerImportSample","hasSampleQueryParameter","groupConsoleSamplesByName","samples","grouped","consoleSample","getBestMatch","language","preferredLanguage","preferredCountry","sameLanguageWithoutCountry","sameLanguageWithAnyCountry","fallbackLanguageSameCountry","fallbackLanguageNoCountry","fallbackLanguageAnyCountry","sampleLanguage","sampleCountry","useSamples","groupVersionKind","getSample","CreateSecretModal","close","save","secretType","onCancel","onSave","fixed","secretTypeAbstraction","isCreate","modal","secretModalLauncher","downloadYaml","blob","Blob","filename","ConsoleSampleModel","propagationPolicy","formContextField","defaultSample","showSample","formType","importType","autoFocus","inputRef","dirty","isSubmitting","formikValues","touched","formikTouched","errors","formikErrors","setFieldValue","formikSetFieldValue","setFieldTouched","formikSetFieldTouched","isKnativeServingAvailable","canCreateKnativeService","canCreateKnativeServiceLoading","group","verb","fieldPrefix","shouldValidate","formReloadCount","defaultSampleURL","dir","defaultSampleDir","defaultSampleRef","defaultSampleTagObj","imageStreamTag","tagObj","imageStreamTagSampleRepo","nameTouched","applicationNameTouched","imageSelectorTouched","gitDirTouched","gitTypeTouched","gitUrlError","validated","setValidated","default","repoStatus","setRepoStatus","handleBuilderImageRecommendation","detectedBuildTypes","recommendedBuildType","recommended","hasOwnProperty","handleDevfileStrategyDetection","gitType","devfileSourceUrl","secretResource","devfileContents","getDevfileContent","handleGitUrlChange","submitError","isUnsureDetectedGitType","gitRepoName","detectedType","importStrategyData","loadError","repositoryStatus","strategies","importStrategies","Reachable","selectedStrategy","S2I","priority","detectedFiles","recommendedStrategy","showEditImportStrategy","Source","success","Devfile","s","detectedCustomData","DEVFILE","DOCKERFILE","Docker","SERVERLESS_FUNCTION","ServerlessFunction","debouncedHandleGitUrlChange","fillImageStreamTagSample","helpText","isUrlValidating","RateLimitExceeded","GitTypeNotDetected","PrivateRepo","ResourceNotFound","InvalidGitTypeSelected","GiteaRepoUnreachable","resetFields","couldNotRecommend","isInContext","current","focus","sampleRepository","service","targetPort","toString","catch","helpTextInvalid","onBlur","trimmedURL","target","trim","onChange","isDisabled","onClick","isInline","initialState","loading","accessLoading","selectedImageStream","ImageStreamReducer","state","action","setLoading","setAccessLoading","setSelectedImageStream","Error","disabled","reloadCount","dispatch","hasImageStreams","setHasImageStreams","registry","isi","fromImageStreamTag","imageStreamTagList","isNamespaceSelected","isStreamsAvailable","isTagsAvailable","isImageStreamSelected","showCommandLineAlert","Openshift","helperTextInvalid","Provider","fieldId","icon","expansion","isReadOnly","handleGitRefChange","handleGitDirChange","textExpanded","textCollapsed","optional","handleSave","dropDownClassName","menuClassName","actionItems","actionTitle","actionKey","placeholder","resourceFilter","item","dataSelector","handleGitTypeChange","typeValue","isRequired","spaceItems","isSelected","link","imgCollection","initialValues","initialIsi","onDropdownChange","img","onLoad","imgstreams","imageStreamAvailable","collectImageStreams","appendItems","openshift","unmounted","resourceName","isiValues","isiPorts","ports","initialImageStream","initialRoute","initialImageStreamImage","searchImageTag","imageStreamImport","imgStreamLabels","autocompleteFilter","monaco","editor","defineTheme","base","inherit","colors","rules","foreground","onClose","actionClose","BuildConfigRunPolicy","meta","isNew","initialValue","otherProps","theme","getFieldMeta","debouncedOnChange","newValue","event","formData","environmentVariables","envs","getInitialBuildConfigFormikValues","editorType","Form","dockerfile","images","buildFrom","isSearchingForImage","dockerImage","pushTo","triggers","configChange","imageChange","otherTriggers","secrets","policy","runPolicy","hooks","commands","shell","arguments","resourceVersion","deleteKeys","object","keys","forEach","convertImageOptionFormDataToImageReference","imageOptionFormData","buildConfigNamespace","substring","indexOf","convertFormDataToBuildConfig","originBuildConfig","buildConfig","convertFormDataNameToBuildConfig","uri","sourceSecret","strategyType","convertFormDataToBuildConfigSource","strategyKey","to","output","convertFormDataImagesToBuildConfig","env","convertFormDataEnvironmentVariablesToBuildConfig","trigger","secretReference","allowEnv","convertFormDataTriggersToBuildConfig","destinationDir","mountPoint","convertFormDataSecretsToBuildConfig","convertFormDataPolicyToBuildConfig","postCommit","args","script","argument","convertFormDataHooksToBuildConfig","convertFormDataToYAML","parsedBuildConfig","updatedBuildConfig","skipInvalid","watchedBuildConfig","heading","convertImageReferenceToImageStreamFormData","imageReference","convertBuildConfigToFormData","originValues","safeBuildConfig","convertBuildConfigNameToFormData","convertBuildConfigSourceToFormData","convertBuildConfigImagesToFormData","sourceStrategy","dockerStrategy","convertBuildConfigEnvironmentVariablesToFormData","convertBuildConfigTriggersToFormData","convertBuildConfigSecretsToFormData","convertBuildConfigPolicyToFormData","convertBuildConfigHooksToFormData","imageSchema","allowedTypes","Object","YAML","validate","abortEarly","handleCancel","goBack","onSubmit","helpers","err","setStatus","submitSuccess","changedBuildConfig","enableReinitialize","formikProps","handleSubmit","setErrors","isStale","formEditor","yamlEditor","showSamples","onReload","formContext","sanitizeTo","yamlbuildConfig","yamlContext","lastViewUserSettingKey","noMargin","handleReset","errorMessage","successMessage","showAlert","infoTitle","infoMessage","submitLabel","disableSubmit","handleDownload","sticky","Footer","defaults","components","List","visibleItems","setVisibleItems","onVisibleItemChange","showYAMLAlert","setShowYAMLAlert","hookTypeItems","onlyArgs","options","lineHeight","readOnly","minimap","scrollBeyondLastLine","addLabel","disableDeleteRow","ImageOption","fallbackTitle","buildFromItems","none","pushToItems","typeItems","Serial","Parallel","SerialLatestOnly","mountPointLabel","headers","emptyValues","showBadge","binary","buildFromType","Generic","GitHub","GitLab","Bitbucket"],"mappings":"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","file":"dev-console/code-refs/buildConfig-chunk-87505ec757c2f8a3c61e.min.js","sourcesContent":["import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport * as _ from 'lodash-es';\nimport * as semver from 'semver';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { AlertVariant, Button, Popover } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamModel } from '../models';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport { DOC_URL_PODMAN } from './utils';\nimport { CopyToClipboard } from './utils/copy-to-clipboard';\nimport { ExpandableAlert } from './utils/alerts';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { SectionHeading } from './utils/headings';\nimport { LabelList } from './utils/label-list';\nimport { navFactory } from './utils/horizontal-nav';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { Timestamp } from './utils/timestamp';\nimport { ImageStreamTimeline, getImageStreamTagName } from './image-stream-timeline';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\n\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getAnnotationTags = (specTag: any) =>\n  _.get(specTag, 'annotations.tags', '').split(/\\s*,\\s*/);\n\nconst isBuilderTag = (specTag: any) => {\n  // A spec tag has annotations tags, which is a comma-delimited string (e.g., 'builder,httpd').\n  const annotationTags = getAnnotationTags(specTag);\n  return _.includes(annotationTags, 'builder') && !_.includes(annotationTags, 'hidden');\n};\n\nconst getStatusTags = (imageStream: K8sResourceKind): any => {\n  const statusTags = _.get(imageStream, 'status.tags');\n  return _.keyBy(statusTags, 'tag');\n};\n\nexport const getBuilderTags = (imageStream: K8sResourceKind): any[] => {\n  const statusTags = getStatusTags(imageStream);\n  return _.filter(imageStream.spec.tags, (tag) => isBuilderTag(tag) && statusTags[tag.name]);\n};\n\n// Sort tags in reverse order by semver, falling back to a string comparison if not a valid version.\nexport const getBuilderTagsSortedByVersion = (imageStream: K8sResourceKind): any[] => {\n  return getBuilderTags(imageStream).sort(({ name: a }, { name: b }) => {\n    const v1 = semver.coerce(a);\n    const v2 = semver.coerce(b);\n    if (!v1 && !v2) {\n      return a.localeCompare(b);\n    }\n    if (!v1) {\n      return 1;\n    }\n    if (!v2) {\n      return -1;\n    }\n    return semver.rcompare(v1, v2);\n  });\n};\n\nexport const getMostRecentBuilderTag = (imageStream: K8sResourceKind) => {\n  const tags = getBuilderTagsSortedByVersion(imageStream);\n  return _.head(tags);\n};\n\n// An image stream is a builder image if\n// - It has a spec tag annotated with `builder` and not `hidden`\n// - It has a corresponding status tag\nexport const isBuilder = (imageStream: K8sResourceKind) => !_.isEmpty(getBuilderTags(imageStream));\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamModel), ...common];\n\nconst ImageStreamTagsRow: React.SFC<ImageStreamTagsRowProps> = ({\n  imageStream,\n  specTag,\n  statusTag,\n}) => {\n  const imageStreamStatus = _.get(imageStream, 'status');\n  const latest = _.get(statusTag, ['items', 0]);\n  const from = _.get(specTag, 'from');\n  const referencesTag = _.get(specTag, 'from.kind') === 'ImageStreamTag';\n  const image = _.get(latest, 'image');\n  const created = _.get(latest, 'created');\n  const dockerRepositoryCheck = _.has(imageStream, [\n    'metadata',\n    'annotations',\n    'openshift.io/image.dockerRepositoryCheck',\n  ]);\n  const { t } = useTranslation();\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-2 col-sm-4 col-xs-4 co-break-word\">\n        <ResourceLink\n          kind={ImageStreamTagsReference}\n          name={getImageStreamTagName(imageStream.metadata.name, statusTag.tag)}\n          namespace={imageStream.metadata.namespace}\n          title={statusTag.tag}\n          linkTo={!!image}\n        />\n      </div>\n      <span className=\"col-md-3 col-sm-4 col-xs-8 co-break-all\">\n        {from && referencesTag && (\n          <ResourceLink\n            kind={ImageStreamTagsReference}\n            name={from.name}\n            namespace={imageStream.metadata.namespace}\n            title={from.name}\n          />\n        )}\n        {from && !referencesTag && <>{from.name}</>}\n        {!from && <span className=\"text-muted\">{t('public~pushed image')}</span>}\n      </span>\n      <span className=\"col-md-4 col-sm-4 hidden-xs co-break-all\">\n        {!imageStreamStatus && dockerRepositoryCheck && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~Unable to resolve')}\n          </>\n        )}\n        {!imageStreamStatus && !dockerRepositoryCheck && !from && <>{t('public~Not synced yet')}</>}\n        {/* We have no idea why in this case  */}\n        {!imageStreamStatus && !dockerRepositoryCheck && from && <>{t('public~Unresolved')}</>}\n        {imageStreamStatus && image && <>{image}</>}\n        {imageStreamStatus && !image && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~There is no image associated with this tag')}\n          </>\n        )}\n      </span>\n      <div className=\"col-md-3 hidden-sm hidden-xs\">\n        {created && <Timestamp timestamp={created} />}\n        {!created && '-'}\n      </div>\n    </div>\n  );\n};\n\nexport const ExampleDockerCommandPopover: React.FC<ImageStreamManipulationHelpProps> = ({\n  imageStream,\n  tag,\n}) => {\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const { t } = useTranslation();\n  if (!publicImageRepository) {\n    return null;\n  }\n  const loginCommand = 'oc registry login';\n  const pushCommand = `docker push ${publicImageRepository}:${tag || '<tag>'}`;\n  const pullCommand = `docker pull ${publicImageRepository}:${tag || '<tag>'}`;\n\n  return (\n    <Popover\n      headerContent={<>{t('public~Image registry commands')}</>}\n      className=\"co-example-docker-command__popover\"\n      minWidth=\"600px\"\n      bodyContent={\n        <div>\n          <p>\n            {t(\n              'public~Create a new ImageStreamTag by pushing an image to this ImageStream with the desired tag.',\n            )}\n          </p>\n          <br />\n          <p>{t('public~Authenticate to the internal registry')}</p>\n          <CopyToClipboard value={loginCommand} />\n          <br />\n          <p>{t('public~Push an image to this ImageStream')}</p>\n          <CopyToClipboard value={pushCommand} />\n          <br />\n          <p>{t('public~Pull an image from this ImageStream')}</p>\n          <CopyToClipboard value={pullCommand} />\n          <br />\n          <p>\n            <Trans t={t} ns=\"public\">\n              Red Hat Enterprise Linux users may use the equivalent <strong>podman</strong>{' '}\n              commands.{' '}\n            </Trans>\n            <ExternalLink href={DOC_URL_PODMAN} text={t('public~Learn more.')} />\n          </p>\n        </div>\n      }\n    >\n      <Button className=\"hidden-sm hidden-xs\" type=\"button\" variant=\"link\">\n        <QuestionCircleIcon className=\"co-icon-space-r\" />\n        {t('public~Do you need to work with this ImageStream outside of the web console?')}\n      </Button>\n    </Popover>\n  );\n};\n\nexport const ImageStreamsDetails: React.SFC<ImageStreamsDetailsProps> = ({ obj: imageStream }) => {\n  const { t } = useTranslation();\n\n  const getImportErrors = (): string[] => {\n    return _.transform(imageStream.status.tags, (acc, tag: any) => {\n      const importErrorCondition = _.find(\n        tag.conditions,\n        (condition) => condition.type === 'ImportSuccess' && condition.status === 'False',\n      );\n      importErrorCondition &&\n        acc.push(\n          t('public~Unable to sync image for tag {{tag}}. {{message}}', {\n            tag: `${imageStream.metadata.name}:${tag.tag}`,\n            message: importErrorCondition.message,\n          }),\n        );\n    });\n  };\n\n  const imageRepository = _.get(imageStream, 'status.dockerImageRepository');\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const imageCount = _.get(imageStream, 'status.tags.length');\n  const specTagByName = _.keyBy(imageStream.spec.tags, 'name');\n  const importErrors = getImportErrors();\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        {!_.isEmpty(importErrors) && (\n          <ExpandableAlert\n            variant={AlertVariant.warning}\n            alerts={_.map(importErrors, (error, i) => (\n              <React.Fragment key={i}>{error}</React.Fragment>\n            ))}\n          />\n        )}\n        <SectionHeading text={t('public~ImageStream details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={imageStream}>\n              {imageRepository && <dt>{t('public~Image repository')}</dt>}\n              {imageRepository && <dd>{imageRepository}</dd>}\n              {publicImageRepository && <dt>{t('public~Public image repository')}</dt>}\n              {publicImageRepository && <dd>{publicImageRepository}</dd>}\n              <dt>{t('public~Image count')}</dt>\n              <dd>{imageCount ? imageCount : 0}</dd>\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Tags')} />\n        {_.isEmpty(imageStream.status.tags) ? (\n          <span className=\"text-muted\">{t('public~No tags')}</span>\n        ) : (\n          <div className=\"row\">\n            <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n              <div className=\"row co-m-table-grid__head\">\n                <div className=\"col-md-2 col-sm-4 col-xs-4\">{t('public~Name')}</div>\n                <div className=\"col-md-3 col-sm-4 col-xs-8\">{t('public~From')}</div>\n                <div className=\"col-md-4 col-sm-4 hidden-xs\">{t('public~Identifier')}</div>\n                <div className=\"col-md-3 hidden-sm hidden-xs\">{t('public~Last updated')}</div>\n              </div>\n              <div className=\"co-m-table-grid__body\">\n                {_.map(imageStream.status.tags, (statusTag) => (\n                  <ImageStreamTagsRow\n                    key={statusTag.tag}\n                    imageStream={imageStream}\n                    specTag={specTagByName[statusTag.tag]}\n                    statusTag={statusTag}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ImageStreamHistory: React.FC<ImageStreamHistoryProps> = ({ obj: imageStream }) => {\n  const imageStreamStatusTags = _.get(imageStream, 'status.tags');\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamHistory.displayName = 'ImageStreamHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamHistory),\n];\nexport const ImageStreamsDetailsPage: React.SFC = (props) => (\n  <DetailsPage {...props} kind={ImageStreamsReference} menuActions={menuActions} pages={pages} />\n);\nImageStreamsDetailsPage.displayName = 'ImageStreamsDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  Kebab.columnClass,\n];\n\nconst ImageStreamsTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={ImageStreamsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={ImageStreamsReference} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={ImageStreamsReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const ImageStreamsList: React.SFC = (props) => {\n  const { t } = useTranslation();\n  const ImageStreamsTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Labels'),\n        sortField: 'metadata.labels',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Created'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[4] },\n      },\n    ];\n  };\n  ImageStreamsTableHeader.displayName = 'ImageStreamsTableHeader';\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ImageStreams')}\n      Header={ImageStreamsTableHeader}\n      Row={ImageStreamsTableRow}\n      virtualize\n    />\n  );\n};\n\nImageStreamsList.displayName = 'ImageStreamsList';\n\nexport const buildPhase = (build) => build.status.phase;\n\nexport const ImageStreamsPage: React.SFC<ImageStreamsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      title={t('public~ImageStreams')}\n      kind={ImageStreamsReference}\n      ListComponent={ImageStreamsList}\n      canCreate={true}\n    />\n  );\n};\n\nImageStreamsPage.displayName = 'ImageStreamsListPage';\n\ntype ImageStreamTagsRowProps = {\n  imageStream: K8sResourceKind;\n  specTag: any;\n  statusTag: any;\n};\n\ntype ImageStreamHistoryProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamManipulationHelpProps = {\n  imageStream: K8sResourceKind;\n  tag?: string;\n};\n\nexport type ImageStreamsDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamsPageProps = {\n  filterLabel: string;\n};\n","export { default as BuildConfigFormPage } from './BuildConfigFormPage';\n","export * from './pipelines';\n","export enum StartedByLabel {\n  triggers = 'triggers.tekton.dev/eventlistener',\n}\nexport enum StartedByAnnotation {\n  user = 'pipeline.openshift.io/started-by',\n}\nexport enum TektonTaskAnnotation {\n  minVersion = ' tekton.dev/pipelines.minVersion',\n  tags = 'tekton.dev/tags',\n  categories = 'tekton.dev/categories',\n  installedFrom = 'openshift.io/installed-from',\n  semVersion = 'openshift.io/sem-version',\n}\nexport enum TaskProviders {\n  redhat = 'Red Hat',\n  community = 'Community',\n  tektonHub = 'TektonHub',\n  artifactHub = 'ArtifactHub',\n}\nexport enum TektonTaskLabel {\n  providerType = 'operator.tekton.dev/provider-type',\n  version = 'app.kubernetes.io/version',\n}\nexport enum TektonResourceLabel {\n  pipeline = 'tekton.dev/pipeline',\n  pipelinerun = 'tekton.dev/pipelineRun',\n  taskrun = 'tekton.dev/taskRun',\n  pipelineTask = 'tekton.dev/pipelineTask',\n}\n\nexport enum PipelineResourceType {\n  git = 'git',\n  image = 'image',\n  cluster = 'cluster',\n  storage = 'storage',\n}\n\nexport enum VolumeTypes {\n  NoWorkspace = 'noWorkspace',\n  EmptyDirectory = 'emptyDirectory',\n  ConfigMap = 'configMap',\n  Secret = 'secret',\n  PVC = 'pvc',\n  VolumeClaimTemplate = 'volumeClaimTemplate',\n}\n\nexport enum SecretAnnotationId {\n  Git = 'git',\n  Image = 'docker',\n}\n\nexport const SecretAnnotationType = {\n  [SecretAnnotationId.Git]: 'Git Server',\n  [SecretAnnotationId.Image]: 'Image Registry',\n};\n\nexport const PIPELINE_GA_VERSION = '1.4.0';\nexport const TRIGGERS_GA_VERSION = '1.6.0';\nexport const PIPELINE_UNSIMPLIFIED_METRICS_VERSION = '1.5.2';\nexport const PIPELINE_SERVICE_ACCOUNT = 'pipeline';\nexport const PIPELINE_RUN_AUTO_START_FAILED = `bridge/pipeline-run-auto-start-failed`;\n\nexport const DEFAULT_CHART_HEIGHT = 275;\nexport const DEFAULT_LEGEND_CHART_HEIGHT = 375;\nexport const DEFAULT_TIME_RANGE = '1w';\nexport const DEFAULT_REFRESH_INTERVAL = '30s';\nexport const DEFAULT_SAMPLES = 60;\n\n// Annotation for referencing pipeline name in case of PipelineRun with no reference to a Pipeline (embedded pipeline)\nexport const preferredNameAnnotation = 'pipeline.openshift.io/preferredName';\nexport const chainsSignedAnnotation = 'chains.tekton.dev/signed';\n\nexport const PIPELINE_NAMESPACE = 'openshift-pipelines';\nexport const PIPELINERUN_TEMPLATE_NAMESPACE = 'openshift';\nexport const PIPELINE_CONFIG_NAME = 'config';\n\nexport enum PipelineMetricsLevel {\n  PIPELINE_TASK_LEVEL = 'pipeline/task',\n  PIPELINERUN_TASKRUN_LEVEL = 'pipelinerun/taskrun',\n  UNSUPPORTED_LEVEL = 'unsupported',\n  UNSIMPLIFIED_METRICS_LEVEL = 'unsimplified',\n}\n\nexport const FLAG_TEKTON_V1_ENABLED = 'FLAG_TEKTON_V1_ENABLED';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER';\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { PipelineKind } from '../../types';\n\nexport enum PipelineType {\n  PAC = 'pac',\n  PIPELINE = 'pipeline',\n}\nexport interface PipelineData {\n  enabled: boolean;\n  type?: PipelineType;\n  template?: PipelineKind;\n}\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { BuildOptions, Resources } from './import-types';\nimport { removeKsvcInfoFromDomainMapping } from './serverless/serverless-utils';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nconst convertToSec = (value: number, unit: string): number => {\n  switch (unit) {\n    case 'm': {\n      return value * 60;\n    }\n    case 'h': {\n      return value * 3600;\n    }\n    default: {\n      return value;\n    }\n  }\n};\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    replicas: yup\n      .number()\n      .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n      .test(isInteger(t('devconsole~Replicas must be an integer.')))\n      .min(0, t('devconsole~Replicas must be greater than or equal to 0.'))\n      .max(\n        Number.MAX_SAFE_INTEGER,\n        t('devconsole~Replicas must be lesser than or equal to {{maxSafeInteger}}.', {\n          maxSafeInteger: Number.MAX_SAFE_INTEGER,\n        }),\n      )\n      .test({\n        name: 'isEmpty',\n        test: (value) => value !== undefined,\n        message: t('devconsole~This field cannot be empty.'),\n      }),\n  });\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = (t: TFunction) =>\n  yup.object().when('resources', {\n    is: Resources.KnativeService,\n    then: yup.object().shape({\n      scaling: yup.object({\n        minpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Min Pods must be an integer.')))\n          .min(0, t('devconsole~Min Pods must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Min Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        maxpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Max Pods must be an integer.')))\n          .min(1, t('devconsole~Max Pods must be greater than or equal to 1.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Max Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          )\n          .test({\n            test(limit) {\n              const { minpods } = this.parent;\n              return limit ? limit >= minpods : true;\n            },\n            message: t('devconsole~Max Pods must be greater than or equal to Min Pods.'),\n          }),\n        concurrencytarget: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency target must be an integer.')))\n          .min(0, t('devconsole~Concurrency target must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency target must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencylimit: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency limit must be an integer.')))\n          .min(0, t('devconsole~Concurrency limit must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency limit must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencyutilization: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .min(0, t('devconsole~Concurrency utilization must be between 0 and 100.'))\n          .max(100, t('devconsole~Concurrency utilization must be between 0 and 100.')),\n        autoscale: yup.object().shape({\n          autoscalewindow: yup\n            .number()\n            .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n            .test({\n              test(autoscalewindow) {\n                if (autoscalewindow) {\n                  const { autoscalewindowUnit } = this.parent;\n                  const value = convertToSec(autoscalewindow, autoscalewindowUnit);\n                  return value >= 6 && value <= 3600;\n                }\n                return true;\n              },\n              message: t('devconsole~Autoscale window must be between 6s and 1h.'),\n            }),\n        }),\n      }),\n      domainMapping: yup.array().of(\n        yup\n          .string()\n          .transform(removeKsvcInfoFromDomainMapping)\n          .matches(hostnameRegex, {\n            message: t(\n              'devconsole~Domain name must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n            ),\n            excludeEmptyString: true,\n          })\n          .test(\n            'domainname-has-segements',\n            t('devconsole~Domain name must consist of at least two segments separated by dots.'),\n            function (domainName: string) {\n              return domainName.split('.').length >= 2;\n            },\n          ),\n      ),\n    }),\n  });\n\nexport const routeValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    secure: yup.boolean(),\n    tls: yup.object().when('secure', {\n      is: true,\n      then: yup.object({\n        termination: yup.string().required(t('devconsole~Please select a termination type.')),\n      }),\n    }),\n    hostname: yup\n      .string()\n      .matches(hostnameRegex, {\n        message: t(\n          'devconsole~Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.')),\n    path: yup.string().matches(pathRegex, {\n      message: t('devconsole~Path must start with /.'),\n      excludeEmptyString: true,\n    }),\n    unknownTargetPort: yup\n      .number()\n      .typeError(t('devconsole~Port must be an integer.'))\n      .integer(t('devconsole~Port must be an integer.'))\n      .min(1, t('devconsole~Port must be between 1 and 65535.'))\n      .max(65535, t('devconsole~Port must be between 1 and 65535.')),\n  });\n\nexport const limitsValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    cpu: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limitUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${limit}${limitUnit}`) >=\n                convertToBaseValue(`${request}${requestUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU limit must be greater than or equal to request.'),\n        }),\n    }),\n    memory: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory limit must be greater than or equal to request.'),\n        }),\n      limitUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n    }),\n  });\n\nexport const imageValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Source',\n    then: yup.object().shape({\n      selected: yup.string().required(t('devconsole~Required')),\n      tag: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const gitValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    url: yup\n      .string()\n      .max(2000, t('devconsole~Please enter a URL that is less then 2000 characters.'))\n      .matches(gitUrlRegex, t('devconsole~Invalid Git URL.'))\n      .required(t('devconsole~Required')),\n    type: yup.string().when('showGitType', {\n      is: true,\n      then: yup\n        .string()\n        .required(t('devconsole~We failed to detect the Git type. Please choose a Git type.')),\n    }),\n    showGitType: yup.boolean(),\n  });\n\nexport const dockerValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Docker',\n    then: yup.object().shape({\n      containerPort: yup\n        .number()\n        .test(isInteger(t('devconsole~Container port should be an integer'))),\n      dockerfilePath: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const devfileValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Devfile',\n    then: yup.object().shape({\n      devfilePath: yup.string().required(t('devconsole~Required')),\n      devfileContent: yup\n        .string()\n        .min(1, t('devconsole~Required'))\n        .required(t('devconsole~Required')),\n      devfileHasError: yup.boolean().oneOf([false]),\n      devfileSuggestedResources: yup.object().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = (t: TFunction) =>\n  yup.string().required(t('devconsole~Required'));\n\nexport const isiValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup.string().required(t('devconsole~Required')),\n    image: yup.object().required(t('devconsole~Required')),\n    tag: yup.string(),\n    status: yup.string().required(t('devconsole~Required')),\n  });\n\nexport const importFlowPipelineTemplateValidationSchema = yup\n  .object()\n  .when(['enabled', 'build.option', 'type'], {\n    is: (isPipelineEnabled, buildOption, pipelineType) =>\n      (isPipelineEnabled || buildOption === BuildOptions.PIPELINES) &&\n      pipelineType !== PipelineType.PAC,\n    then: yup.object().shape({\n      templateSelected: yup.string().required(),\n    }),\n  });\n","import { chart_color_green_400 as tektonGroupColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { K8sKind } from '@console/internal/module/k8s';\n\nconst color = tektonGroupColor.value;\n\nexport const PipelineModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const CustomRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'CustomRun',\n  // t('pipelines-plugin~CustomRun')\n  labelKey: 'pipelines-plugin~CustomRun',\n  // t('pipelines-plugin~CustomRuns')\n  labelPluralKey: 'pipelines-plugin~CustomRuns',\n  plural: 'customruns',\n  abbr: 'CR',\n  namespaced: true,\n  kind: 'CustomRun',\n  id: 'customrun',\n  labelPlural: 'CustomRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'PipelineResource',\n  // t('pipelines-plugin~PipelineResource')\n  labelKey: 'pipelines-plugin~PipelineResource',\n  // t('pipelines-plugin~PipelineResources')\n  labelPluralKey: 'pipelines-plugin~PipelineResources',\n  plural: 'pipelineresources',\n  abbr: 'PR',\n  namespaced: true,\n  kind: 'PipelineResource',\n  id: 'pipelineresource',\n  labelPlural: 'PipelineResources',\n  crd: true,\n  color,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTask',\n  // t('pipelines-plugin~ClusterTask')\n  labelKey: 'pipelines-plugin~ClusterTask',\n  // t('pipelines-plugin~ClusterTasks')\n  labelPluralKey: 'pipelines-plugin~ClusterTasks',\n  plural: 'clustertasks',\n  abbr: 'CT',\n  namespaced: false,\n  kind: 'ClusterTask',\n  id: 'clustertask',\n  labelPlural: 'ClusterTasks',\n  crd: true,\n  color,\n};\n\nexport const ConditionModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Condition',\n  // t('pipelines-plugin~Condition')\n  labelKey: 'pipelines-plugin~Condition',\n  // t('pipelines-plugin~Conditions')\n  labelPluralKey: 'pipelines-plugin~Conditions',\n  plural: 'conditions',\n  abbr: 'C',\n  namespaced: true,\n  kind: 'Condition',\n  id: 'condition',\n  labelPlural: 'Conditions',\n  crd: true,\n  color,\n};\n\nexport const TriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerBinding',\n  // t('pipelines-plugin~TriggerBinding')\n  labelKey: 'pipelines-plugin~TriggerBinding',\n  // t('pipelines-plugin~TriggerBindings')\n  labelPluralKey: 'pipelines-plugin~TriggerBindings',\n  plural: 'triggerbindings',\n  abbr: 'TB',\n  namespaced: true,\n  kind: 'TriggerBinding',\n  id: 'triggerbinding',\n  labelPlural: 'TriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const ClusterTriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBinding')\n  labelKey: 'pipelines-plugin~ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBindings')\n  labelPluralKey: 'pipelines-plugin~ClusterTriggerBindings',\n  plural: 'clustertriggerbindings',\n  abbr: 'CTB',\n  namespaced: false,\n  kind: 'ClusterTriggerBinding',\n  id: 'clustertriggerbinding',\n  labelPlural: 'ClusterTriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const TriggerTemplateModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplate')\n  labelKey: 'pipelines-plugin~TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplates')\n  labelPluralKey: 'pipelines-plugin~TriggerTemplates',\n  plural: 'triggertemplates',\n  abbr: 'TT',\n  namespaced: true,\n  kind: 'TriggerTemplate',\n  id: 'triggertemplate',\n  labelPlural: 'TriggerTemplates',\n  crd: true,\n  color,\n};\n\nexport const EventListenerModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'EventListener',\n  // t('pipelines-plugin~EventListener')\n  labelKey: 'pipelines-plugin~EventListener',\n  // t('pipelines-plugin~EventListeners')\n  labelPluralKey: 'pipelines-plugin~EventListeners',\n  plural: 'eventlisteners',\n  abbr: 'EL',\n  namespaced: true,\n  kind: 'EventListener',\n  id: 'eventlistener',\n  labelPlural: 'EventListeners',\n  crd: true,\n  color,\n};\n\nexport const RepositoryModel: K8sKind = {\n  apiGroup: 'pipelinesascode.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Repository',\n  // t('pipelines-plugin~Repository')\n  labelKey: 'pipelines-plugin~Repository',\n  // t('pipelines-plugin~Repositories')\n  labelPluralKey: 'pipelines-plugin~Repositories',\n  plural: 'repositories',\n  abbr: 'R',\n  namespaced: true,\n  kind: 'Repository',\n  id: 'repository',\n  labelPlural: 'Repositories',\n  crd: true,\n  color,\n};\n\nexport const TektonConfigModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonConfig',\n  // t('pipelines-plugin~TektonConfig')\n  labelKey: 'pipelines-plugin~TektonConfig',\n  // t('pipelines-plugin~TektonConfigs')\n  labelPluralKey: 'pipelines-plugin~TektonConfigs',\n  plural: 'tektonconfigs',\n  abbr: 'TC',\n  namespaced: false,\n  kind: 'TektonConfig',\n  id: 'tektonconfig',\n  labelPlural: 'TektonConfigs',\n  crd: true,\n};\n\nexport const TektonHubModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonHub',\n  // t('pipelines-plugin~TektonHub')\n  labelKey: 'pipelines-plugin~TektonHub',\n  // t('pipelines-plugin~TektonHubs')\n  labelPluralKey: 'pipelines-plugin~TektonHubs',\n  plural: 'tektonhubs',\n  abbr: 'TH',\n  namespaced: false,\n  kind: 'TektonHub',\n  id: 'tektonhub',\n  labelPlural: 'TektonHubs',\n  crd: true,\n};\n\nexport const TektonResultModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonResult',\n  // t('pipelines-plugin~TektonResult')\n  labelKey: 'pipelines-plugin~TektonResult',\n  // t('pipelines-plugin~TektonResults')\n  labelPluralKey: 'pipelines-plugin~TektonResults',\n  plural: 'tektonresults',\n  abbr: 'TR',\n  namespaced: false,\n  kind: 'TektonResult',\n  id: 'tektonresult',\n  labelPlural: 'TektonResults',\n  crd: true,\n};\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n\nexport const bitBucketUserNameRegex = /^[a-z]([a-z0-9_]-?)*[a-z0-9]$/;\n","import { GitProvider } from '@console/git-service/src';\nimport { RepositoryFormValues } from './types';\n\nexport enum RepositoryFields {\n  REPOSITORY = 'Repository',\n  URL_REPO = 'RepoUrl',\n  URL_ORG = 'RepoOrg',\n  SHA = 'sha',\n  EVENT_TYPE = 'EventType',\n}\n\nexport enum RepoAnnotationFields {\n  SHA_MESSAGE = 'sha_message',\n  SHA_URL = 'sha_url',\n  REPO_URL = 'repo_url',\n  BRANCH = 'Branch',\n}\n\nexport enum RepositoryRuntimes {\n  golang = 'go',\n  nodejs = 'nodejs',\n  python = 'python',\n  java = 'java',\n}\n\nexport const RepositoryLabels: Record<RepositoryFields, string> = {\n  [RepositoryFields.REPOSITORY]: 'pipelinesascode.tekton.dev/repository',\n  [RepositoryFields.URL_REPO]: 'pipelinesascode.tekton.dev/url-repository',\n  [RepositoryFields.URL_ORG]: 'pipelinesascode.tekton.dev/url-org',\n  [RepositoryFields.SHA]: 'pipelinesascode.tekton.dev/sha',\n  [RepositoryFields.EVENT_TYPE]: 'pipelinesascode.tekton.dev/event-type',\n};\n\nexport const RepositoryAnnotations: Record<RepoAnnotationFields, string> = {\n  [RepoAnnotationFields.SHA_MESSAGE]: 'pipelinesascode.tekton.dev/sha-title',\n  [RepoAnnotationFields.SHA_URL]: 'pipelinesascode.tekton.dev/sha-url',\n  [RepoAnnotationFields.REPO_URL]: 'pipelinesascode.tekton.dev/repo-url',\n  [RepoAnnotationFields.BRANCH]: 'pipelinesascode.tekton.dev/branch',\n};\n\nexport const baseURL = 'https://github.com';\n\nexport enum PacConfigurationTypes {\n  GITHUB = 'github',\n  WEBHOOK = 'webhook',\n}\n\nexport const defaultRepositoryFormValues: RepositoryFormValues = {\n  gitUrl: '',\n  githubAppAvailable: false,\n  gitProvider: GitProvider.INVALID,\n  name: '',\n  method: 'github',\n  showOverviewPage: false,\n  yamlData: ``,\n  webhook: {\n    token: '',\n    method: 'token',\n    secret: '',\n    url: '',\n    user: '',\n    autoAttach: false,\n  },\n};\n\nexport const AccessTokenDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token',\n  [GitProvider.GITLAB]: 'https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/',\n};\n\nexport const WebhookDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/developers/webhooks-and-events/webhooks/creating-webhooks',\n  [GitProvider.GITLAB]:\n    'https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#configure-a-webhook-in-gitlab',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/manage-webhooks/',\n};\n\nexport const gitProviderTypesHosts = ['github.com', 'bitbucket.org', 'gitlab.com'];\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { GitProvider } from '@console/git-service/src';\nimport { importFlowRepositoryValidationSchema } from '@console/pipelines-plugin/src/components/repository/repository-form-utils';\nimport { nameValidationSchema, nameRegex } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  gitValidationSchema,\n  dockerValidationSchema,\n  buildValidationSchema,\n  gitUrlRegex,\n  resourcesValidationSchema,\n  devfileValidationSchema,\n  importFlowPipelineTemplateValidationSchema,\n} from './validation-schema';\n\nexport const validationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: nameValidationSchema(t),\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    image: imageValidationSchema(t),\n    git: gitValidationSchema(t),\n    docker: dockerValidationSchema(t),\n    devfile: devfileValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    build: buildValidationSchema,\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n    pac: importFlowRepositoryValidationSchema(t),\n    pipeline: importFlowPipelineTemplateValidationSchema,\n  });\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  if (hasDomain(url, 'gitea.com') || url.includes('gitea')) {\n    return GitProvider.GITEA;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nexport const createComponentName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return nameString;\n  }\n\n  const kebabCaseStr = _.kebabCase(nameString);\n  return nameString.match(/^\\d/) || kebabCaseStr.match(/^\\d/)\n    ? `ocp-${kebabCaseStr}`\n    : kebabCaseStr;\n};\n\nexport const detectGitRepoName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createComponentName(name);\n};\n","import { apiVersionForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin/src';\nimport { AutoscaleWindowType } from '../import-types';\n\nexport const getAutoscaleWindow = (autoscaleValue: string): AutoscaleWindowType => {\n  const windowRegEx = /^[0-9]+|[a-zA-Z]*/g;\n  const [val, unit] = autoscaleValue?.match(windowRegEx);\n  return {\n    autoscalewindow: Number(val) || '',\n    autoscalewindowUnit: unit || 's',\n    defaultAutoscalewindowUnit: unit || 's',\n  };\n};\n\nconst DOMAIN_MAPPING_KSVC_INFO_REGEX = / *\\([^)]*\\) */g;\n\nexport const removeKsvcInfoFromDomainMapping = (dm: string) =>\n  dm.replace(DOMAIN_MAPPING_KSVC_INFO_REGEX, '');\n\nexport const getOtherKsvcFromDomainMapping = (\n  dm: K8sResourceKind,\n  currentKsvcName: string,\n): string | null => {\n  if (!dm.spec?.ref) return null;\n  const { apiVersion, kind, name } = dm.spec.ref;\n  return apiVersionForModel(ServiceModel) === apiVersion &&\n    kind === ServiceModel.kind &&\n    name !== currentKsvcName\n    ? name\n    : null;\n};\n\nexport const removeDuplicateDomainMappings = (\n  allDomainMappings: string[],\n  connectedDomainMappings: string[],\n): string[] => {\n  return [\n    ...new Set(\n      allDomainMappings\n        ?.filter((dm) =>\n          connectedDomainMappings?.length > 0\n            ? connectedDomainMappings?.includes(removeKsvcInfoFromDomainMapping(dm))\n            : true,\n        )\n        .map((n) => removeKsvcInfoFromDomainMapping(n)),\n    ),\n  ];\n};\n\nexport const hasOtherKsvcDomainMappings = (domainMapping: string[]): boolean =>\n  domainMapping.some((dm) => new RegExp(DOMAIN_MAPPING_KSVC_INFO_REGEX).test(dm));\n\nexport const getAllOtherDomainMappingInUse = (\n  domainMappings: string[],\n  data: K8sResourceKind[] = [],\n  serviceName: string,\n): K8sResourceKind[] =>\n  domainMappings\n    .filter((d) => hasOtherKsvcDomainMappings([d]))\n    .map((dm) => {\n      const selectedDomain = data?.find(\n        (d) => d.metadata.name === removeKsvcInfoFromDomainMapping(dm),\n      );\n      return selectedDomain && selectedDomain.spec?.ref?.name !== serviceName\n        ? selectedDomain\n        : null;\n    })\n    .filter((d) => !!d);\n","import * as GitUrlParse from 'git-url-parse';\nimport { TFunction } from 'i18next';\nimport { Base64 } from 'js-base64';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { gitUrlRegex } from '@console/dev-console/src/components/import/validation-schema';\nimport { bitBucketUserNameRegex } from '@console/dev-console/src/utils/yup-validation-util';\nimport {\n  k8sCreateResource,\n  k8sGetResource,\n  k8sListResourceItems,\n  k8sPatchResource,\n} from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { getGitService, GitProvider } from '@console/git-service/src';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { ConfigMapModel, SecretModel } from '@console/internal/models';\nimport { ConfigMapKind, SecretKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { nameRegex } from '@console/shared/src';\nimport { RepositoryModel } from '../../models';\nimport { PipelineType } from '../import/import-types';\nimport { PAC_TEMPLATE_DEFAULT } from '../pac/const';\nimport { PIPELINERUN_TEMPLATE_NAMESPACE } from '../pipelines/const';\nimport { RepositoryRuntimes, gitProviderTypesHosts } from './consts';\nimport { RepositoryFormValues } from './types';\n\nexport const dryRunOpt = { dryRun: 'All' };\n\nexport const repositoryValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .matches(nameRegex, {\n        message: t(\n          'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .required(t('pipelines-plugin~Required')),\n    gitUrl: yup\n      .string()\n      .matches(gitUrlRegex, t('pipelines-plugin~Invalid Git URL.'))\n      .required(t('pipelines-plugin~Required')),\n    accessToken: yup.string(),\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(bitBucketUserNameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers, underscores and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl && !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const pipelinesAccessTokenValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(nameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl &&\n          gitProvider &&\n          !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const importFlowRepositoryValidationSchema = (t: TFunction) => {\n  return yup.object().shape({\n    repository: yup.object().when(['pipelineType', 'pipelineEnabled'], {\n      is: (pipelineType, pipelineEnabled) => pipelineType === PipelineType.PAC && pipelineEnabled,\n      then: pipelinesAccessTokenValidationSchema(t),\n    }),\n  });\n};\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nconst createTokenSecret = async (\n  repositoryName: string,\n  user: string,\n  token: string,\n  namespace: string,\n  detectedGitType: GitProvider,\n  webhookSecret?: string,\n  dryRun?: boolean,\n) => {\n  const data: SecretKind = {\n    apiVersion: SecretModel.apiVersion,\n    kind: SecretModel.kind,\n    metadata: {\n      generateName: `${repositoryName}-token-`,\n      namespace,\n    },\n    type: SecretType.opaque,\n    stringData: {\n      'provider.token': token,\n      ...(webhookSecret && { 'webhook.secret': webhookSecret }),\n      ...(detectedGitType === GitProvider.BITBUCKET && {\n        'webhook.auth': Base64.encode(`${user}:${token}`),\n      }),\n    },\n  };\n\n  return k8sCreateResource({\n    model: SecretModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n};\n\nexport const createRepositoryResources = async (\n  values: RepositoryFormValues,\n  namespace: string,\n  labels: { [key: string]: string } = {},\n  dryRun?: boolean,\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    gitUrl,\n    webhook: { secretObj, method, token, secret: webhookSecret, user },\n  } = values;\n  const encodedSecret = Base64.encode(webhookSecret);\n  const detectedGitType = detectGitType(gitUrl);\n  let secret: SecretKind;\n  if (token && method === 'token') {\n    secret = await createTokenSecret(\n      name,\n      user,\n      token,\n      namespace,\n      detectedGitType,\n      webhookSecret,\n      dryRun,\n    );\n  } else if (\n    method === 'secret' &&\n    secretObj &&\n    secretObj?.data?.['webhook.secret'] !== encodedSecret\n  ) {\n    await k8sPatchResource({\n      model: SecretModel,\n      resource: secretObj,\n      data: [{ op: 'replace', path: `/data/webhook.secret`, value: Base64.encode(webhookSecret) }],\n    });\n  }\n  const gitHost = GitUrlParse(gitUrl).source;\n  const secretRef = secret || secretObj;\n  const data = {\n    kind: RepositoryModel.kind,\n    apiVersion: 'pipelinesascode.tekton.dev/v1alpha1',\n    metadata: {\n      name,\n      namespace,\n      ...(labels || {}),\n    },\n    spec: {\n      url: gitUrl,\n      ...(secretRef || gitHost !== 'github.com'\n        ? {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            git_provider: {\n              ...(!gitProviderTypesHosts.includes(gitHost) ? { url: gitHost } : {}),\n              ...(gitHost === 'bitbucket.org'\n                ? {\n                    user,\n                  }\n                : {}),\n              ...(secretRef\n                ? {\n                    secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'provider.token',\n                    },\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    webhook_secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'webhook.secret',\n                    },\n                  }\n                : {}),\n            },\n          }\n        : {}),\n    },\n  };\n\n  const resource = await k8sCreateResource({\n    model: RepositoryModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n\n  return resource;\n};\n\nexport const createRemoteWebhook = async (\n  values: RepositoryFormValues,\n  pac: ConfigMapKind,\n  loaded: boolean,\n): Promise<boolean> => {\n  const {\n    gitUrl,\n    webhook: { method, token, secret: webhookSecret, url: webhookURL, secretObj, user },\n  } = values;\n  const detectedGitType = detectGitType(gitUrl);\n  const gitService = getGitService(gitUrl, detectedGitType);\n\n  let sslVerification = true;\n  if (loaded && pac?.data?.['webhook-ssl-verification'] === 'false') {\n    sslVerification = false;\n  }\n\n  let authToken: string;\n  if (detectedGitType === GitProvider.BITBUCKET) {\n    authToken =\n      method === 'token'\n        ? Base64.encode(`${user}:${token}`)\n        : Base64.decode(secretObj?.data?.['webhook.auth']);\n  } else {\n    authToken = method === 'token' ? token : Base64.decode(secretObj?.data?.['provider.token']);\n  }\n\n  const webhookCreationStatus = await gitService.createRepoWebhook(\n    authToken,\n    webhookURL,\n    sslVerification,\n    webhookSecret,\n  );\n\n  return webhookCreationStatus;\n};\n\nexport const createRepositoryName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return `git-${nameString}`;\n  }\n  return `git-${_.kebabCase(nameString)}`;\n};\n\nexport const recommendRepositoryName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createRepositoryName(name);\n};\n\nexport const getFallbackTemplate = (repoName: string): string => `apiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: ${repoName ?? 'pull_request'}\n  annotations:\n    # The event we are targeting as seen from the webhook payload\n    # this can be an array too, i.e: [pull_request, push]\n    pipelinesascode.tekton.dev/on-event: \"[pull_request, push]\"\n\n    # The branch or tag we are targeting (ie: main, refs/tags/*)\n    pipelinesascode.tekton.dev/on-target-branch: \"main\"\n\n    # Fetch the git-clone task from hub, we are able to reference later on it\n    # with taskRef and it will automatically be embedded into our pipeline.\n    pipelinesascode.tekton.dev/task: \"git-clone\"\n\n    # You can add more tasks in here to reuse, browse the one you like from here\n    # https://hub.tekton.dev/\n    # example:\n    # pipelinesascode.tekton.dev/task-2: \"[maven, buildah]\"\n\n    # How many runs we want to keep attached to this event\n    pipelinesascode.tekton.dev/max-keep-runs: \"5\"\nspec:\n  params:\n    # The variable with brackets are special to Pipelines as Code\n    # They will automatically be expanded with the events from Github.\n    - name: repo_url\n      value: \"{{ repo_url }}\"\n    - name: revision\n      value: \"{{ revision }}\"\n  pipelineSpec:\n    params:\n      - name: repo_url\n      - name: revision\n    workspaces:\n      - name: source\n      - name: basic-auth\n    tasks:\n      - name: fetch-repository\n        taskRef:\n          name: git-clone\n        workspaces:\n          - name: output\n            workspace: source\n          - name: basic-auth\n            workspace: basic-auth\n        params:\n          - name: url\n            value: $(params.repo_url)\n          - name: revision\n            value: $(params.revision)\n\n      # Customize this task if you like, or just do a taskRef\n      # to one of the hub task.\n      - name: noop-task\n        runAfter:\n          - fetch-repository\n        workspaces:\n          - name: source\n            workspace: source\n        taskSpec:\n          workspaces:\n            - name: source\n          steps:\n            - name: noop-task\n              image: registry.access.redhat.com/ubi9/ubi-micro\n              workingDir: $(workspaces.source.path)\n              script: |\n                exit 0\n  workspaces:\n  - name: source\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n  # This workspace will inject secret to help the git-clone task to be able to\n  # checkout the private repositories\n  - name: basic-auth\n    secret:\n      secretName: \"{{ git_auth_secret }}\"`;\n\nexport const getPipelineRunDefaultTemplate = async (repoName: string): Promise<string> => {\n  let pipelineRunTemplate = getFallbackTemplate(repoName);\n  try {\n    const template = await k8sGetResource<ConfigMapKind>({\n      model: ConfigMapModel,\n      ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n      name: PAC_TEMPLATE_DEFAULT,\n    });\n    if (template?.data?.template) {\n      pipelineRunTemplate = template.data.template;\n    }\n  } catch (e) {\n    console.log('failed to fetch default template:', e); // eslint-disable-line no-console\n  }\n\n  return pipelineRunTemplate;\n};\n\nexport const getPipelineRunTemplate = async (\n  runtime: string,\n  repoName: string,\n): Promise<string> => {\n  let runTimeTemplate;\n  try {\n    const [pipelineRunTemplateCfg] = await k8sListResourceItems<ConfigMapKind>({\n      model: ConfigMapModel,\n      queryParams: {\n        ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n        labelSelector: {\n          matchLabels: {\n            'pipelinesascode.openshift.io/runtime': RepositoryRuntimes[runtime] || runtime,\n          },\n        },\n      },\n    });\n    runTimeTemplate = pipelineRunTemplateCfg?.data?.template;\n  } catch (e) {\n    console.log('failed to fetch runtime template:', e); // eslint-disable-line no-console\n  }\n  const pipelineRunTemplate = runTimeTemplate ?? (await getPipelineRunDefaultTemplate(repoName));\n  return pipelineRunTemplate;\n};\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\n\nconst pathRegex = /^\\/.*$/;\n\nexport const MAX_INT32 = 2147483647;\n\nexport const healthChecksValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    containerName: yup.string(),\n    showForm: yup.boolean(),\n    enabled: yup.boolean(),\n    modified: yup.boolean(),\n    data: yup.object().when('showForm', {\n      is: true,\n      then: yup.object().shape({\n        periodSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Period must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        initialDelaySeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(0, t('devconsole~Initial delay must be greater than or equal to 0.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        failureThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Failure threshold must be greater than or equal to 1.')),\n        timeoutSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Timeout must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        successThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Success threshold must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        requestType: yup.string(),\n        httpGet: yup.object().when('requestType', {\n          is: 'httpGet',\n          then: yup.object({\n            path: yup.string().matches(pathRegex, {\n              message: t('devconsole~Path must start with /.'),\n              excludeEmptyString: true,\n            }),\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        tcpSocket: yup.object().when('requestType', {\n          is: 'tcpSocket',\n          then: yup.object({\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        exec: yup.object().when('requestType', {\n          is: 'command',\n          then: yup.object({\n            command: yup.array().of(yup.string().required(t('devconsole~Required'))),\n          }),\n        }),\n      }),\n    }),\n  });\n\nexport const healthChecksProbesValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    readinessProbe: healthChecksValidationSchema(t),\n    livenessProbe: healthChecksValidationSchema(t),\n    startupProbe: healthChecksValidationSchema(t),\n  });\n","export const PAC_GH_APP_NEW = 'https://github.com/settings/apps/new';\nexport const PAC_GH_APP_DOC =\n  'https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#about-github-apps';\nexport const PAC_GH_APP_MANIFEST_API = 'https://api.github.com/app-manifests';\nexport const EVENT_LISTNER_NAME = 'pipelines-as-code-interceptor';\nexport const PAC_SECRET_NAME = 'pipelines-as-code-secret';\nexport const PAC_GH_APP_NAME = 'pipelines-ci-clustername';\nexport const PAC_INFO = 'pipelines-as-code-info';\nexport const PAC_TEMPLATE_DEFAULT = 'pipelines-as-code-pipelinerun-generic';\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as semver from 'semver';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { ContainerPort, K8sResourceKind, K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  description: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getSampleRepo = (tag) => tag?.annotations?.sampleRepo ?? '';\nexport const getSampleRef = (tag) => tag?.annotations?.sampleRef ?? '';\nexport const getSampleContextDir = (tag) => tag?.annotations?.sampleContextDir ?? '';\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage): ContainerPort[] => {\n  const portSpec =\n    imageStreamImage?.image?.dockerImageMetadata?.Config?.ExposedPorts ||\n    imageStreamImage?.image?.dockerImageMetadata?.ContainerConfig?.ExposedPorts;\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceCommon | K8sResourceCommon[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = imageStream?.metadata?.annotations?.['openshift.io/display-name'];\n    const description = recentTag?.annotations?.description;\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      description,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = imageTag?.annotations?.['openshift.io/display-name'] ?? defaultName;\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = (t: TFunction) => {\n  return {\n    External: {\n      value: RegistryType.External,\n      label: t('devconsole~Image name from external registry'),\n    },\n    Internal: {\n      value: RegistryType.Internal,\n      label: t('devconsole~Image stream tag from internal registry'),\n    },\n  };\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n","import * as React from 'react';\n\ntype GiteaIconProps = {\n  style?: React.CSSProperties;\n  topology?: boolean;\n};\n\nconst GiteaIcon: React.FC<GiteaIconProps> = ({ style, topology }): React.ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={topology ? '0 20 650 587' : '0 20 650 450'}\n      fill=\"currentColor\"\n      aria-hidden=\"true\"\n      role=\"img\"\n      width=\"1em\"\n      height=\"1em\"\n      style={style}\n    >\n      <path\n        d=\"m395.9 484.2-126.9-61c-12.5-6-17.9-21.2-11.8-33.8l61-126.9c6-12.5 21.2-17.9 33.8-11.8 17.2 8.3 27.1 13 27.1 13l-.1-109.2 16.7-.1.1 117.1s57.4 24.2 83.1 40.1c3.7 2.3 10.2 6.8 12.9 14.4 2.1 6.1 2 13.1-1 19.3l-61 126.9c-6.2 12.7-21.4 18.1-33.9 12z\"\n        style={{\n          fill: '#fff',\n        }}\n      />\n      <path\n        d=\"M622.7 149.8c-4.1-4.1-9.6-4-9.6-4s-117.2 6.6-177.9 8c-13.3.3-26.5.6-39.6.7v117.2c-5.5-2.6-11.1-5.3-16.6-7.9 0-36.4-.1-109.2-.1-109.2-29 .4-89.2-2.2-89.2-2.2s-141.4-7.1-156.8-8.5c-9.8-.6-22.5-2.1-39 1.5-8.7 1.8-33.5 7.4-53.8 26.9C-4.9 212.4 6.6 276.2 8 285.8c1.7 11.7 6.9 44.2 31.7 72.5 45.8 56.1 144.4 54.8 144.4 54.8s12.1 28.9 30.6 55.5c25 33.1 50.7 58.9 75.7 62 63 0 188.9-.1 188.9-.1s12 .1 28.3-10.3c14-8.5 26.5-23.4 26.5-23.4S547 483 565 451.5c5.5-9.7 10.1-19.1 14.1-28 0 0 55.2-117.1 55.2-231.1-1.1-34.5-9.6-40.6-11.6-42.6zM125.6 353.9c-25.9-8.5-36.9-18.7-36.9-18.7S69.6 321.8 60 295.4c-16.5-44.2-1.4-71.2-1.4-71.2s8.4-22.5 38.5-30c13.8-3.7 31-3.1 31-3.1s7.1 59.4 15.7 94.2c7.2 29.2 24.8 77.7 24.8 77.7s-26.1-3.1-43-9.1zm300.3 107.6s-6.1 14.5-19.6 15.4c-5.8.4-10.3-1.2-10.3-1.2s-.3-.1-5.3-2.1l-112.9-55s-10.9-5.7-12.8-15.6c-2.2-8.1 2.7-18.1 2.7-18.1L322 273s4.8-9.7 12.2-13c.6-.3 2.3-1 4.5-1.5 8.1-2.1 18 2.8 18 2.8L467.4 315s12.6 5.7 15.3 16.2c1.9 7.4-.5 14-1.8 17.2-6.3 15.4-55 113.1-55 113.1z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n      <path\n        d=\"M326.8 380.1c-8.2.1-15.4 5.8-17.3 13.8-1.9 8 2 16.3 9.1 20 7.7 4 17.5 1.8 22.7-5.4 5.1-7.1 4.3-16.9-1.8-23.1l24-49.1c1.5.1 3.7.2 6.2-.5 4.1-.9 7.1-3.6 7.1-3.6 4.2 1.8 8.6 3.8 13.2 6.1 4.8 2.4 9.3 4.9 13.4 7.3.9.5 1.8 1.1 2.8 1.9 1.6 1.3 3.4 3.1 4.7 5.5 1.9 5.5-1.9 14.9-1.9 14.9-2.3 7.6-18.4 40.6-18.4 40.6-8.1-.2-15.3 5-17.7 12.5-2.6 8.1 1.1 17.3 8.9 21.3 7.8 4 17.4 1.7 22.5-5.3 5-6.8 4.6-16.3-1.1-22.6 1.9-3.7 3.7-7.4 5.6-11.3 5-10.4 13.5-30.4 13.5-30.4.9-1.7 5.7-10.3 2.7-21.3-2.5-11.4-12.6-16.7-12.6-16.7-12.2-7.9-29.2-15.2-29.2-15.2s0-4.1-1.1-7.1c-1.1-3.1-2.8-5.1-3.9-6.3 4.7-9.7 9.4-19.3 14.1-29-4.1-2-8.1-4-12.2-6.1-4.8 9.8-9.7 19.7-14.5 29.5-6.7-.1-12.9 3.5-16.1 9.4-3.4 6.3-2.7 14.1 1.9 19.8l-24.6 50.4z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n    </svg>\n  );\n};\n\nexport default GiteaIcon;\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CircleIcon } from '@patternfly/react-icons/dist/esm/icons/circle-icon';\nimport { SquareIcon } from '@patternfly/react-icons/dist/esm/icons/square-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { K8sResourceKindReference } from '../module/k8s';\nimport { ResourceLink } from './utils/resource-link';\nimport { Timestamp } from './utils/timestamp';\nimport { EmptyBox } from './utils/status-box';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getImageStreamTagName = (imageStreamName: string, tag: string): string =>\n  `${imageStreamName}:${tag}`;\n\nconst ImageStreamTimelineItem: React.FC<ImageStreamTimelineItemProps> = ({\n  tag,\n  imageStreamName,\n  imageStreamNamespace,\n  linkToTag,\n}) => {\n  const referenceAndSHA = _.split(tag.dockerImageReference, '@');\n  return (\n    <>\n      <li>\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__circle-icon\">\n            <CircleIcon />\n          </span>\n          <div className=\"co-images-stream-tag-timeline__timestamp\">\n            <Timestamp timestamp={tag.created} simple={true} />\n          </div>\n        </div>\n\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__line\" />\n          <div className=\"co-images-stream-tag-timeline__info\">\n            <ResourceLink\n              kind={ImageStreamTagsReference}\n              name={getImageStreamTagName(imageStreamName, tag.tag)}\n              namespace={imageStreamNamespace}\n              title={tag.tag}\n              linkTo={linkToTag}\n            />\n            <div className=\"co-break-all\">from {referenceAndSHA[0]}</div>\n            <div className=\"co-break-all\">{referenceAndSHA[1]}</div>\n          </div>\n        </div>\n      </li>\n    </>\n  );\n};\n\n// check is the compared tag version, is the latest version in a sorted array of all tag versions\nconst isTagVersionLatest = (\n  comparedTag: string,\n  comparedTagPosition: number,\n  orderedTagArray: TagMeta[],\n) => {\n  return (\n    comparedTagPosition ===\n    _.findIndex(orderedTagArray, (orderedTag: TagMeta) => orderedTag.tag === comparedTag)\n  );\n};\n\nexport const ImageStreamTimeline: React.FC<ImageStreamTimelineProps> = ({\n  imageStreamTags,\n  imageStreamName,\n  imageStreamNamespace,\n}) => {\n  const { t } = useTranslation();\n  if (!_.some(imageStreamTags, 'items')) {\n    return <EmptyBox label={t('public~Images')} />;\n  }\n  const tagsArray: TagMeta[] = _.flatten(\n    _.map(imageStreamTags, ({ tag, items }) => {\n      return _.map(items, ({ created, dockerImageReference }) => ({\n        tag,\n        created,\n        dockerImageReference,\n      }));\n    }),\n  );\n  const orderedTagArray = _.orderBy(tagsArray, ['created'], ['desc']);\n  const timeline = _.map(orderedTagArray, (tag: TagMeta, i: number) => {\n    return (\n      <ImageStreamTimelineItem\n        key={tag.dockerImageReference}\n        tag={tag}\n        imageStreamName={imageStreamName}\n        imageStreamNamespace={imageStreamNamespace}\n        linkToTag={isTagVersionLatest(tag.tag, i, orderedTagArray)}\n      />\n    );\n  });\n\n  return (\n    <>\n      <ul className=\"co-images-stream-tag-timeline\">\n        {timeline}\n        <div>\n          <span className=\"co-images-stream-tag-timeline__square-icon\">\n            <SquareIcon />\n          </span>\n        </div>\n      </ul>\n    </>\n  );\n};\n\ntype ImageStreamTimelineItemProps = {\n  tag: TagMeta;\n  imageStreamName: string;\n  imageStreamNamespace: string;\n  linkToTag: boolean;\n};\n\ntype TagMeta = {\n  created: string;\n  tag: string;\n  dockerImageReference: string;\n};\n\ntype ImageStreamTimelineProps = {\n  imageStreamTags: any[];\n  imageStreamName: string;\n  imageStreamNamespace: string;\n};\n","import * as React from 'react';\nimport { ImageStreamContextProps } from '../import-types';\n\nexport const ImageStreamContext = React.createContext<ImageStreamContextProps>(undefined as any);\n","import { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\n\n/**\n * ConsoleSample is an extension to customizing OpenShift web console by adding samples.\n */\nexport type ConsoleSample = K8sResourceCommon & {\n  spec: ConsoleSampleSpec;\n};\n\n/**\n * ConsoleSampleSpec is the desired sample for the web console.\n * Samples will appear with their title, descriptions and a badge in a samples catalog.\n */\nexport type ConsoleSampleSpec = {\n  /**\n   * title is the display name of the sample.\n   *\n   * It is required and must be no more than 50 characters in length.\n   */\n  title: string;\n  /**\n   * abstract is a short introduction to the sample.\n   *\n   * It is required and must be no more than 100 characters in length.\n   *\n   * The abstract is shown on the sample card tile below the title and provider\n   * and is limited to three lines of content.\n   */\n  abstract: string;\n  /**\n   * description is a long form explanation of the sample.\n   *\n   * It is required and can have a maximum length of **4096** characters.\n   *\n   * It is a README.md-like content for additional information, links, pre-conditions, and other instructions.\n   * It will be rendered as Markdown so that it can contain line breaks, links, and other simple formatting.\n   */\n  description: string;\n  /**\n   * icon is an optional base64 encoded image and shown beside the sample title.\n   *\n   * The format must follow the [data: URL format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs)\n   * and can have a maximum size of **10 KB**.\n   *\n   * `data:[<mediatype>][;base64],<base64 encoded image>`\n   *\n   * For example:\n   *\n   * `data:image;base64,` plus the base64 encoded image.\n   *\n   * Vector images can also be used. SVG icons must start with:\n   *\n   * `data:image/svg+xml;base64,` plus the base64 encoded SVG image.\n   *\n   * All sample catalog icons will be shown on a white background (also when the dark theme is used).\n   * The web console ensures that different aspect ratios work correctly.\n   * Currently, the surface of the icon is at most 40x100px.\n   */\n  icon?: string;\n  /**\n   * type is an optional label to group multiple samples.\n   *\n   * It is optional and must be no more than 20 characters in length.\n   *\n   * Recommendation is a singular term like \"Builder Image\", \"Devfile\" or \"Serverless Function\".\n   *\n   * Currently, the type is shown a badge on the sample card tile in the top right corner.\n   */\n  type?: string;\n  /**\n   * provider is an optional label to honor who provides the sample.\n   *\n   * It is optional and must be no more than 50 characters in length.\n   *\n   * A provider can be a company like \"Red Hat\" or an organization like \"CNCF\" or \"Knative\".\n   *\n   * Currently, the provider is only shown on the sample card tile below the title with the prefix \"Provided by \"\n   */\n  provider?: string;\n  /**\n   * tags are optional string values that can be used to find samples in the samples catalog.\n   *\n   * Examples of common tags may be \"Java\", \"Quarkus\", etc.\n   *\n   * They will be displayed on the samples details page.\n   */\n  tags?: string[];\n  /**\n   * source defines where to deploy the sample service from.\n   * The sample may be sourced from an external git repository or container image.\n   */\n  source: ConsoleSampleSource;\n};\n\n/**\n * Union of the sample source types.\n * Unsupported samples types will be ignored in the web console.\n */\nexport type ConsoleSampleSource = ConsoleSampleGitImportSource | ConsoleSampleContainerImportSource;\n\n/** ConsoleSampleGitImportSource allows the user to import code from a git repository. */\nexport type ConsoleSampleGitImportSource = {\n  type: 'GitImport';\n  gitImport: {\n    /** repository contains the reference to the actual Git repository.. */\n    repository: ConsoleSampleGitImportSourceRepository;\n    /** service contains configuration for the Service resource created for this sample. */\n    service?: ConsoleSampleGitImportSourceService;\n  };\n};\n\n/** ConsoleSampleGitImportSourceRepository contains the reference to the actual Git repository. */\nexport type ConsoleSampleGitImportSourceRepository = {\n  /**\n   * url of the Git repository that contains a HTTP service.\n   * The HTTP service must be exposed on the default port (8080) unless\n   * otherwise configured with the port field.\n   *\n   * Only public repositories on GitHub, GitLab and Bitbucket are currently supported:\n   *\n   *   - https://github.com/<org>/<repository>\n   *   - https://gitlab.com/<org>/<repository>\n   *   - https://bitbucket.org/<org>/<repository>\n   *\n   * The url must have a maximum length of 256 characters.\n   */\n  url: string;\n  /**\n   * revision is the git revision at which to clone the git repository\n   * Can be used to clone a specific branch, tag or commit SHA.\n   * Must be at most 256 characters in length.\n   * When omitted the repository's default branch is used.\n   */\n  revision?: string;\n  /**\n   * contextDir is used to specify a directory within the repository to build the\n   * component.\n   * Must start with `/` and have a maximum length of 256 characters.\n   * When omitted, the default value is to build from the root of the repository.\n   */\n  contextDir?: string;\n};\n\n/**\n * ConsoleSampleGitImportSourceService allows the samples author define defaults\n * for the Service created for this sample\n */\nexport type ConsoleSampleGitImportSourceService = {\n  /**\n   * targetPort is the port that the service listens on for HTTP requests.\n   * This port will be used for Service created for this sample.\n   * Port must be in the range 1 to 65535.\n   * Default port is 8080.\n   */\n  targetPort?: number;\n};\n\n/** ConsoleSampleContainerImportSource allows the user import a container image. */\nexport type ConsoleSampleContainerImportSource = {\n  type: 'ContainerImport';\n  containerImport: {\n    /**\n     * reference to a container image that provides a HTTP service.\n     * The service must be exposed on the default port (8080) unless\n     * otherwise configured with the port field.\n     *\n     * Supported formats:\n     *   - <repository-name>/<image-name>\n     *   - docker.io/<repository-name>/<image-name>\n     *   - quay.io/<repository-name>/<image-name>\n     *   - quay.io/<repository-name>/<image-name>@sha256:<image hash>\n     *   - quay.io/<repository-name>/<image-name>:<tag>\n     */\n    image: string;\n    /** service contains configuration for the Service resource created for this sample. */\n    service?: ConsoleSampleContainerImportSourceService;\n  };\n};\n\n/**\n * ConsoleSampleContainerImportSourceService allows the samples author define defaults\n * for the Service created for this sample\n */\nexport type ConsoleSampleContainerImportSourceService = {\n  /**\n   * targetPort is the port that the service listens on for HTTP requests.\n   * This port will be used for Service created for this sample.\n   * Port must be in the range 1 to 65535.\n   * Default port is 8080.\n   */\n  targetPort?: number;\n};\n\nexport function isGitImportSource(\n  source: ConsoleSampleSource,\n): source is ConsoleSampleGitImportSource {\n  return source?.type === 'GitImport' && !!source.gitImport?.repository?.url;\n}\n\nexport function isContainerImportSource(\n  source: ConsoleSampleSource,\n): source is ConsoleSampleContainerImportSource {\n  return source?.type === 'ContainerImport' && !!source.containerImport?.image;\n}\n","import { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { k8sGetResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ConsoleSampleModel } from '../models/samples';\nimport {\n  ConsoleSample,\n  ConsoleSampleGitImportSourceRepository,\n  isContainerImportSource,\n  isGitImportSource,\n} from '../types/samples';\n\nconst LOCALIZATION_NAME_LABEL = 'console.openshift.io/name';\nconst LOCALIZATION_LANGUAGE_LABEL = 'console.openshift.io/lang';\nconst LOCALIZATION_COUNTRY_LABEL = 'console.openshift.io/country';\n\nexport const createSampleLink = (sample: ConsoleSample, activeNamespace: string): string | null => {\n  if (isGitImportSource(sample.spec.source)) {\n    const { gitImport } = sample.spec.source;\n    const searchParams = new URLSearchParams();\n    searchParams.set('formType', 'sample');\n    searchParams.set('sample', sample.metadata.name);\n    searchParams.set('git.repository', gitImport.repository.url);\n    if (gitImport.repository.revision) {\n      searchParams.set('git.revision', gitImport.repository.revision);\n    }\n    if (gitImport.repository.contextDir) {\n      searchParams.set('git.contextDir', gitImport.repository.contextDir);\n    }\n    return `/import/ns/${activeNamespace}?${searchParams}`;\n  }\n\n  if (isContainerImportSource(sample.spec.source)) {\n    const { containerImport } = sample.spec.source;\n    const searchParams = new URLSearchParams();\n    searchParams.set('sample', sample.metadata.name);\n    searchParams.set('image', containerImport.image);\n    return `/deploy-image/ns/${activeNamespace}?${searchParams}`;\n  }\n\n  // Unsupported source type, will be dropped.\n  return null;\n};\n\nexport const getGitImportSample = (): {\n  sampleName: string;\n  repository: ConsoleSampleGitImportSourceRepository;\n} => {\n  const searchParams = new URLSearchParams(window.location.search);\n  return {\n    sampleName: searchParams.get('sample'),\n    repository: {\n      url: searchParams.get('git.repository'),\n      revision: searchParams.get('git.revision'),\n      contextDir: searchParams.get('git.contextDir'),\n    },\n  };\n};\n\nexport const getContainerImportSample = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  return {\n    sampleName: searchParams.get('sample'),\n    image: searchParams.get('image'),\n  };\n};\n\nexport const hasSampleQueryParameter = () => {\n  return !!new URLSearchParams(window.location.search).get('sample');\n};\n\nexport const groupConsoleSamplesByName = (samples: ConsoleSample[]) => {\n  return samples.reduce<Record<string, ConsoleSample[]>>((grouped, consoleSample) => {\n    const name =\n      consoleSample.metadata.labels?.[LOCALIZATION_NAME_LABEL] || consoleSample.metadata.name;\n    if (!grouped[name]) grouped[name] = [];\n    grouped[name].push(consoleSample);\n    return grouped;\n  }, {});\n};\n\n/**\n * Returns the samples with the best localization match, for the given\n * preferred language and preferred country. It prefers a match in this order:\n *\n * 1. Sample language and country are equal to the preferred language and country.\n *    This includes sample without language (fallbacks to en) and no country.\n *\n * 2. Sample language is equal to the preferred language.\n *    1. And the sample has no country defined.  (eg, select en sample is used for en-CA and en-GB)\n *    2. Any country is defined.                 (eg, select en-CA sample is used for en-GB)\n *\n * 3. Fallback to an english sample\n *    (Sample language is en OR sample language is not defined):\n *    1. Same country  (use en-CA sample if preference is fr-CA)\n *    2. No country\n *    3. Any country   (use en-CA sample if preference is en-US)\n */\nexport const getBestMatch = (samples: ConsoleSample[], language: string): ConsoleSample | null => {\n  if (!samples || !samples.length) {\n    return null;\n  }\n  const preferredLanguage = (language || 'en').split('-')[0].toLowerCase();\n  const preferredCountry = ((language || '').split('-')[1] || '').toUpperCase();\n\n  let sameLanguageWithoutCountry: ConsoleSample = null;\n  let sameLanguageWithAnyCountry: ConsoleSample = null;\n  let fallbackLanguageSameCountry: ConsoleSample = null;\n  let fallbackLanguageNoCountry: ConsoleSample = null;\n  let fallbackLanguageAnyCountry: ConsoleSample = null;\n\n  for (const sample of samples) {\n    const sampleLanguage = (\n      sample.metadata?.labels?.[LOCALIZATION_LANGUAGE_LABEL] || 'en'\n    ).toLowerCase();\n    const sampleCountry = (\n      sample.metadata?.labels?.[LOCALIZATION_COUNTRY_LABEL] || ''\n    ).toUpperCase();\n\n    if (sampleLanguage === preferredLanguage && sampleCountry === preferredCountry) {\n      return sample;\n    }\n    if (sampleLanguage === preferredLanguage) {\n      if (!sampleCountry && !sameLanguageWithoutCountry) {\n        sameLanguageWithoutCountry = sample;\n      } else if (sampleCountry && !sameLanguageWithAnyCountry) {\n        sameLanguageWithAnyCountry = sample;\n      }\n    }\n    if (sampleLanguage === 'en') {\n      if (sampleCountry === preferredCountry && !fallbackLanguageSameCountry) {\n        fallbackLanguageSameCountry = sample;\n      } else if (!sampleCountry && !fallbackLanguageNoCountry) {\n        fallbackLanguageNoCountry = sample;\n      } else if (!fallbackLanguageAnyCountry) {\n        fallbackLanguageAnyCountry = sample;\n      }\n    }\n  }\n  return (\n    sameLanguageWithoutCountry ||\n    sameLanguageWithAnyCountry ||\n    fallbackLanguageSameCountry ||\n    fallbackLanguageNoCountry ||\n    fallbackLanguageAnyCountry\n  );\n};\n\nexport const useSamples = () => {\n  return useK8sWatchResource<ConsoleSample[]>({\n    isList: true,\n    groupVersionKind: getGroupVersionKindForModel(ConsoleSampleModel),\n  });\n};\n\nexport const getSample = (name: string): Promise<ConsoleSample> =>\n  k8sGetResource({ model: ConsoleSampleModel, name });\n","import * as React from 'react';\nimport {\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory/modal';\nimport {\n  SecretFormWrapper,\n  SecretTypeAbstraction,\n} from '@console/internal/components/secrets/create-secret';\n\nexport interface CreateSecretModalProps {\n  save?: (name: string) => void;\n  namespace: string;\n  secretType: SecretTypeAbstraction;\n}\n\ntype Props = CreateSecretModalProps & ModalComponentProps;\n\nconst CreateSecretModal: React.FC<Props> = ({ close, namespace, save, secretType }) => {\n  const handleSave = (name: string) => {\n    close();\n    save(name);\n  };\n\n  return (\n    <SecretFormWrapper\n      onCancel={close}\n      onSave={handleSave}\n      fixed={{ metadata: { namespace } }}\n      secretTypeAbstraction={secretType}\n      isCreate\n      modal\n    />\n  );\n};\n\nexport const secretModalLauncher = createModalLauncher<Props>(CreateSecretModal);\n\nexport default CreateSecretModal;\n","import { saveAs } from 'file-saver';\nimport { safeLoad } from 'js-yaml';\n\nexport const downloadYaml = (data: BlobPart) => {\n  const blob = new Blob([data], { type: 'text/yaml;charset=utf-8' });\n  let filename = 'k8s-object.yaml';\n  try {\n    const obj = safeLoad(data);\n    if (obj.kind) {\n      filename = `${obj.kind.toLowerCase()}-${obj.metadata.name}.yaml`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not parse YAML file:', e);\n  }\n  saveAs(blob, filename);\n};\n","import { K8sModel } from '@console/internal/module/k8s';\n\nexport const ConsoleSampleModel: K8sModel = {\n  kind: 'ConsoleSample',\n  label: 'ConsoleSample',\n  labelPlural: 'ConsoleSamples',\n  apiGroup: 'console.openshift.io',\n  apiVersion: 'v1',\n  abbr: 'CS',\n  namespaced: false,\n  crd: true,\n  plural: 'consolesamples',\n  propagationPolicy: 'Background',\n};\n","import * as React from 'react';\nimport { Alert, TextInputTypes, ValidatedOptions } from '@patternfly/react-core';\nimport { useFormikContext, FormikErrors, FormikTouched } from 'formik';\nimport { isEmpty } from 'lodash';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useAccessReview } from '@console/dynamic-plugin-sdk/src';\nimport { RepoStatus, ImportStrategy, getGitService, GitProvider } from '@console/git-service';\nimport { DetectedBuildType } from '@console/git-service/src/utils/build-tool-type-detector';\nimport { detectImportStrategies } from '@console/git-service/src/utils/import-strategy-detector';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport {\n  FLAG_KNATIVE_SERVING_SERVICE,\n  ServerlessBuildStrategyType,\n  ServiceModel as ksvcModel,\n} from '@console/knative-plugin';\nimport { InputField, useFormikValidationFix, useDebounceCallback, useFlag } from '@console/shared';\nimport { UNASSIGNED_KEY, CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isGitImportSource } from '../../../types/samples';\nimport {\n  getSampleRepo,\n  getSampleRef,\n  getSampleContextDir,\n  NormalizedBuilderImages,\n} from '../../../utils/imagestream-utils';\nimport { getSample, getGitImportSample } from '../../../utils/samples';\nimport { GitData, DetectedStrategyFormData } from '../import-types';\nimport { detectGitRepoName, detectGitType } from '../import-validation-utils';\nimport FormSection from '../section/FormSection';\nimport AdvancedGitOptions from './AdvancedGitOptions';\nimport GitTypeSelector from './GitTypeSelector';\nimport SampleRepo from './SampleRepo';\n\nexport type GitSectionFormData = {\n  formType: string;\n  name: string;\n  application: {\n    selected: string;\n    selectedKey: string;\n    name: string;\n    isInContext: any;\n  };\n  image: {\n    selected: any;\n    selectedKey: string;\n    tagObj: string;\n    recommended: string;\n    couldNotRecommend: boolean;\n  };\n  git: GitData;\n  devfile?: {\n    devfilePath: string;\n    devfileSourceUrl: string;\n    devfileContent?: string;\n  };\n  docker?: {\n    dockerfilePath: string;\n  };\n  build: {\n    strategy: BuildStrategyType;\n  };\n  project: {\n    name: string;\n  };\n  import?: {\n    recommendedStrategy?: DetectedStrategyFormData;\n  };\n};\n\nexport interface GitSectionProps {\n  title?: React.ReactNode;\n  formContextField?: string;\n  builderImages?: NormalizedBuilderImages;\n  defaultSample?: { url: string; ref?: string; dir?: string };\n  showSample?: boolean;\n  formType?: string;\n  importType?: string;\n  imageStreamName?: string;\n  autoFocus?: boolean;\n}\n\nconst GitSection: React.FC<GitSectionProps> = ({\n  title,\n  formContextField,\n  builderImages,\n  defaultSample,\n  showSample = !!defaultSample,\n  formType,\n  importType,\n  imageStreamName,\n  autoFocus = true,\n}) => {\n  const { t } = useTranslation();\n  const inputRef = React.useRef<HTMLInputElement>();\n\n  const {\n    dirty,\n    isSubmitting,\n    values: formikValues,\n    touched: formikTouched,\n    errors: formikErrors,\n    status,\n    setFieldValue: formikSetFieldValue,\n    setFieldTouched: formikSetFieldTouched,\n  } = useFormikContext<GitSectionFormData>();\n\n  const isKnativeServingAvailable = useFlag(FLAG_KNATIVE_SERVING_SERVICE);\n  const [canCreateKnativeService, canCreateKnativeServiceLoading] = useAccessReview({\n    group: ksvcModel.apiGroup,\n    resource: ksvcModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const setFieldValue = React.useCallback(\n    (key: string, value: string | boolean | object, shouldValidate?: boolean) => {\n      formikSetFieldValue(`${fieldPrefix}${key}` as any, value, shouldValidate);\n    },\n    [fieldPrefix, formikSetFieldValue],\n  );\n  const setFieldTouched = React.useCallback(\n    (key: string, touched: boolean, shouldValidate?: boolean) => {\n      formikSetFieldTouched(`${fieldPrefix}${key}` as any, touched, shouldValidate);\n    },\n    [fieldPrefix, formikSetFieldTouched],\n  );\n\n  const values: GitSectionFormData = formContextField\n    ? _.get(formikValues, formContextField)\n    : formikValues;\n  const touched: FormikTouched<GitSectionFormData> = formContextField\n    ? _.get(formikTouched, formContextField, {})\n    : formikTouched;\n  const errors: FormikErrors<GitSectionFormData> = formContextField\n    ? _.get(formikErrors, formContextField, {})\n    : formikErrors;\n  const formReloadCount: number = _.get(formikValues, 'formReloadCount');\n\n  const { url: defaultSampleURL, dir: defaultSampleDir, ref: defaultSampleRef } =\n    defaultSample || {};\n  const defaultSampleTagObj = React.useMemo(\n    () =>\n      defaultSampleURL\n        ? {\n            annotations: {\n              sampleRepo: defaultSampleURL,\n              sampleContextDir: defaultSampleDir ?? './',\n              sampleRef: defaultSampleRef ?? '',\n            },\n          }\n        : null,\n    [defaultSampleURL, defaultSampleDir, defaultSampleRef],\n  );\n  const imageStreamTag = isEmpty(values.image.tagObj) ? defaultSampleTagObj : values.image.tagObj;\n  const imageStreamTagSampleRepo = showSample && getSampleRepo(imageStreamTag);\n  const {\n    name: nameTouched,\n    application: { name: applicationNameTouched } = {},\n    image: { selected: imageSelectorTouched } = {},\n    git: { dir: gitDirTouched, type: gitTypeTouched } = {},\n  } = touched;\n  const { git: { url: gitUrlError } = {} } = errors;\n\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const [repoStatus, setRepoStatus] = React.useState<RepoStatus>();\n\n  const handleBuilderImageRecommendation = React.useCallback(\n    async (detectedBuildTypes: DetectedBuildType[]) => {\n      setFieldValue('image.isRecommending', false);\n      if (gitUrlError) {\n        setFieldValue('image.recommended', '');\n        setFieldValue('image.couldNotRecommend', true);\n        return;\n      }\n      const recommendedBuildType =\n        builderImages &&\n        detectedBuildTypes?.find(\n          ({ type: recommended }) => recommended && builderImages.hasOwnProperty(recommended),\n        );\n      if (recommendedBuildType && recommendedBuildType.type) {\n        setFieldValue('image.couldNotRecommend', false);\n        setFieldValue('image.recommended', recommendedBuildType.type);\n      } else {\n        setFieldValue('image.couldNotRecommend', true);\n        setFieldValue('image.recommended', '');\n      }\n    },\n    [builderImages, gitUrlError, setFieldValue],\n  );\n\n  const handleDevfileStrategyDetection = React.useCallback(\n    async (devfilePath: string, gitType: GitProvider) => {\n      if (gitUrlError) {\n        setFieldValue('devfile.devfileContent', null);\n        setFieldValue('devfile.devfileHasError', true);\n        return;\n      }\n      if (importType !== 'devfile' && !values.devfile?.devfileSourceUrl) {\n        setFieldValue('devfile.devfilePath', devfilePath);\n        setFieldValue('docker.dockerfilePath', 'Dockerfile');\n        const gitService = getGitService(\n          values.git.url,\n          gitType,\n          values.git.ref,\n          values.git.dir,\n          values.git.secretResource,\n          devfilePath,\n        );\n        const devfileContents = gitService && (await gitService.getDevfileContent());\n        if (!devfileContents) {\n          setFieldValue('devfile.devfileContent', null);\n          setFieldValue('devfile.devfileHasError', true);\n        } else {\n          setFieldValue('devfile.devfileContent', devfileContents);\n          setFieldValue('devfile.devfileHasError', false);\n        }\n      }\n    },\n    [\n      gitUrlError,\n      importType,\n      setFieldValue,\n      values.devfile,\n      values.git.dir,\n      values.git.ref,\n      values.git.secretResource,\n      values.git.url,\n    ],\n  );\n\n  const handleGitUrlChange = React.useCallback(\n    async (url: string, ref: string, dir: string) => {\n      if (isKnativeServingAvailable && canCreateKnativeServiceLoading) return;\n      if (isSubmitting || status?.submitError) return;\n      setValidated(ValidatedOptions.default);\n      setFieldValue('git.validated', ValidatedOptions.default);\n      setFieldValue('git.isUrlValidating', true);\n      if (gitUrlError) {\n        // Reset git type field when url is not valid or empty so that when new url valid is added, we run git type detection again.\n        // Don't do anything else if URL is not valid.\n        setFieldValue('git.showGitType', false);\n        setFieldTouched('git.type', false);\n        setFieldValue('git.isUrlValidating', false);\n        return;\n      }\n      const detectedGitType = detectGitType(url);\n      const isUnsureDetectedGitType = detectedGitType === GitProvider.UNSURE;\n      const gitRepoName = formType !== 'sample' && detectGitRepoName(url);\n\n      // Updated detectedType only\n      if (detectedGitType !== values.git.detectedType) {\n        setFieldValue('git.detectedType', detectedGitType);\n      }\n      if (isUnsureDetectedGitType && !values.git.showGitType) {\n        setFieldValue('git.showGitType', true);\n      }\n\n      if (!isUnsureDetectedGitType && values.git.showGitType) {\n        setFieldValue('git.showGitType', false);\n      }\n\n      const gitType =\n        isUnsureDetectedGitType && values.git.showGitType ? values.git.type : detectedGitType;\n\n      if (gitType !== values.git.type) {\n        setFieldTouched('git.type', false, false);\n        setFieldValue('git.type', gitType);\n      }\n\n      const gitService = getGitService(\n        url,\n        gitType,\n        ref,\n        dir,\n        values.git.secretResource,\n        values.devfile?.devfilePath,\n        values.docker?.dockerfilePath,\n      );\n\n      const importStrategyData = await detectImportStrategies(\n        url,\n        gitService,\n        isKnativeServingAvailable && canCreateKnativeService,\n      );\n\n      const {\n        loaded,\n        loadError,\n        repositoryStatus,\n        strategies: importStrategies,\n      } = importStrategyData;\n\n      setRepoStatus(repositoryStatus);\n\n      if (repositoryStatus !== RepoStatus.Reachable) {\n        setValidated(ValidatedOptions.warning);\n        setFieldValue('git.validated', ValidatedOptions.warning);\n        setFieldValue('git.isUrlValidating', false);\n        setFieldValue('import', {\n          loaded: false,\n          loadError: null,\n          strategies: [],\n          selectedStrategy: {\n            name: 'Builder Image',\n            type: ImportStrategy.S2I,\n            priority: 0,\n            detectedFiles: [],\n          },\n          recommendedStrategy: null,\n          showEditImportStrategy: true,\n        });\n        setFieldValue('build.strategy', BuildStrategyType.Source);\n        return;\n      }\n\n      gitRepoName && !nameTouched && !values.name && setFieldValue('name', gitRepoName);\n      gitRepoName &&\n        values.formType !== 'edit' &&\n        !values.application.name &&\n        values.application.selectedKey !== UNASSIGNED_KEY &&\n        setFieldValue('application.name', `${gitRepoName}-app`);\n\n      if (importType === 'devfile' || imageStreamName || values.formType === 'edit') {\n        setValidated(ValidatedOptions.success);\n        setFieldValue('git.validated', ValidatedOptions.success);\n        setFieldValue('git.isUrlValidating', false);\n        importType === 'devfile' && setFieldValue('build.strategy', BuildStrategyType.Devfile);\n        importType === 'devfile' &&\n          !values.devfile?.devfileContent &&\n          setFieldValue('import.recommendedStrategy', importStrategies[0]);\n        values.formType === 'edit' &&\n          values.build.strategy === BuildStrategyType.Source &&\n          handleBuilderImageRecommendation(\n            importStrategies?.find((s) => s.type === ImportStrategy.S2I)?.detectedCustomData,\n          );\n        return;\n      }\n\n      setFieldValue('import.loaded', loaded);\n      setFieldValue('import.loadError', loadError);\n      setFieldValue('import.strategies', importStrategies);\n      if (importStrategies.length > 0) {\n        setFieldValue('import.showEditImportStrategy', false);\n        setFieldValue('import.selectedStrategy', importStrategies[0]);\n        setFieldValue('import.recommendedStrategy', importStrategies[0]);\n      } else {\n        setFieldValue('import.selectedStrategy', {\n          name: 'Devfile',\n          type: ImportStrategy.DEVFILE,\n          priority: 2,\n          detectedFiles: [],\n        });\n        setFieldValue('import.recommendedStrategy', null);\n        setFieldValue('import.showEditImportStrategy', true);\n      }\n      setFieldValue('import.strategyChanged', false);\n\n      if (importStrategies.length > 0) {\n        switch (importStrategies[0].type) {\n          case ImportStrategy.S2I: {\n            setFieldValue('build.strategy', BuildStrategyType.Source);\n            if (builderImages) {\n              setFieldValue('image.isRecommending', true);\n              handleBuilderImageRecommendation(importStrategies[0].detectedCustomData);\n            }\n            break;\n          }\n          case ImportStrategy.DEVFILE: {\n            setFieldValue('build.strategy', BuildStrategyType.Devfile);\n            handleDevfileStrategyDetection(importStrategies[0].detectedFiles[0], gitType);\n            break;\n          }\n          case ImportStrategy.DOCKERFILE: {\n            setFieldValue('build.strategy', BuildStrategyType.Docker);\n            setFieldValue('docker.dockerfilePath', importStrategies[0].detectedFiles[0]);\n            setFieldValue('docker.dockerfileHasError', false);\n            break;\n          }\n          case ImportStrategy.SERVERLESS_FUNCTION: {\n            setFieldValue('build.strategy', ServerlessBuildStrategyType.ServerlessFunction);\n            break;\n          }\n          default:\n        }\n      }\n\n      setValidated(ValidatedOptions.success);\n      setFieldValue('git.validated', ValidatedOptions.success);\n      setFieldValue('git.isUrlValidating', false);\n    },\n    [\n      isSubmitting,\n      status,\n      setFieldValue,\n      gitUrlError,\n      formType,\n      values.git.detectedType,\n      values.git.showGitType,\n      values.git.type,\n      values.git.secretResource,\n      values.devfile,\n      values.docker,\n      values.name,\n      values.formType,\n      values.application.name,\n      values.application.selectedKey,\n      values.build.strategy,\n      isKnativeServingAvailable,\n      canCreateKnativeService,\n      canCreateKnativeServiceLoading,\n      nameTouched,\n      importType,\n      imageStreamName,\n      setFieldTouched,\n      handleBuilderImageRecommendation,\n      builderImages,\n      handleDevfileStrategyDetection,\n    ],\n  );\n\n  const debouncedHandleGitUrlChange = useDebounceCallback(handleGitUrlChange);\n\n  const fillImageStreamTagSample = React.useCallback(() => {\n    if (isKnativeServingAvailable && canCreateKnativeServiceLoading) return;\n    const url = imageStreamTagSampleRepo;\n    const ref = getSampleRef(imageStreamTag);\n    const dir = getSampleContextDir(imageStreamTag);\n    setFieldValue('git.url', imageStreamTagSampleRepo, false);\n    setFieldValue('git.ref', ref, false);\n    setFieldValue('git.dir', dir, false);\n    setFieldTouched('git.url', true, true);\n    debouncedHandleGitUrlChange(url, ref, dir);\n  }, [\n    debouncedHandleGitUrlChange,\n    imageStreamTagSampleRepo,\n    setFieldTouched,\n    setFieldValue,\n    imageStreamTag,\n    isKnativeServingAvailable,\n    canCreateKnativeServiceLoading,\n  ]);\n\n  React.useEffect(() => {\n    (!dirty || gitDirTouched || gitTypeTouched || formReloadCount || values.git.secretResource) &&\n      values.git.url &&\n      debouncedHandleGitUrlChange(values.git.url, values.git.ref, values.git.dir);\n  }, [\n    dirty,\n    isSubmitting,\n    gitDirTouched,\n    formReloadCount,\n    debouncedHandleGitUrlChange,\n    values.git.url,\n    values.git.ref,\n    values.git.dir,\n    values.git.type,\n    values.git.secretResource,\n    gitTypeTouched,\n  ]);\n\n  const helpText = React.useMemo(() => {\n    if (values.git.isUrlValidating) {\n      return `${t('devconsole~Validating')}...`;\n    }\n    if (validated === ValidatedOptions.success) {\n      return t('devconsole~Validated');\n    }\n    if (validated === ValidatedOptions.warning) {\n      switch (repoStatus) {\n        case RepoStatus.RateLimitExceeded: {\n          return t('devconsole~Rate limit exceeded');\n        }\n        case RepoStatus.GitTypeNotDetected: {\n          return t(\n            'devconsole~URL is valid but a git type could not be identified. Please select a git type from the options below',\n          );\n        }\n        case RepoStatus.PrivateRepo: {\n          return t(\n            'devconsole~If this is a private repository, enter a source Secret in advanced Git options',\n          );\n        }\n        case RepoStatus.ResourceNotFound: {\n          return t('devconsole~Requested repository does not exist');\n        }\n        case RepoStatus.InvalidGitTypeSelected: {\n          return t(\n            'devconsole~The selected git type might not be valid or the repository is private. Please try selecting another git type or enter a source Secret in advanced Git options',\n          );\n        }\n        /* Special case for Gitea as it throws 404 for all kinds of negatives */\n        case RepoStatus.GiteaRepoUnreachable: {\n          return t(\n            'devconsole~The Gitea repository is unreachable. The repository might be private or does not exist',\n          );\n        }\n        default: {\n          return t('devconsole~URL is valid but cannot be reached');\n        }\n      }\n    }\n    return t('devconsole~Repository URL to build and deploy your code from');\n  }, [t, values.git.isUrlValidating, validated, repoStatus]);\n\n  const resetFields = React.useCallback(() => {\n    if (!imageSelectorTouched) {\n      setFieldValue('image.selected', '');\n      setFieldValue('image.tag', '');\n    }\n    values.image.recommended && setFieldValue('image.recommended', '');\n    values.image.couldNotRecommend && setFieldValue('image.couldNotRecommend', false);\n    if (values.formType === 'edit') {\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n        values.application.selectedKey === CREATE_APPLICATION_KEY &&\n        !applicationNameTouched &&\n        setFieldValue('application.name', '');\n      return;\n    }\n    !nameTouched && setFieldValue('name', '');\n    !values.application.isInContext &&\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n      !applicationNameTouched &&\n      setFieldValue('application.name', '');\n  }, [\n    setFieldValue,\n    values.formType,\n    values.image.recommended,\n    values.image.couldNotRecommend,\n    values.application.selectedKey,\n    values.application.isInContext,\n    applicationNameTouched,\n    imageSelectorTouched,\n    nameTouched,\n  ]);\n\n  useFormikValidationFix(values.git.url);\n\n  /**\n   * Automatically focus the git repository field and prefill it with different\n   * sample types.\n   *\n   * 1. ConsoleSample\n   * 2. ImageStream samples\n   */\n  React.useEffect(() => {\n    // Skip handling until Knative Service status is unknown!\n    if (canCreateKnativeServiceLoading) return;\n\n    if (autoFocus) {\n      inputRef.current?.focus();\n    }\n\n    const { sampleName, repository: sampleRepository } = getGitImportSample();\n    if (sampleRepository?.url) {\n      const name = detectGitRepoName(sampleRepository.url);\n      setFieldValue('name', name, false);\n      setFieldValue('application.name', `${name}-app`, false);\n      setFieldValue('git.url', sampleRepository.url, false);\n      if (sampleRepository.revision) {\n        setFieldValue('git.ref', sampleRepository.revision, false);\n      }\n      if (sampleRepository.contextDir) {\n        setFieldValue('git.dir', sampleRepository.contextDir, false);\n      }\n      setFieldTouched('git.url', true, true);\n      debouncedHandleGitUrlChange(\n        sampleRepository.url,\n        sampleRepository.revision,\n        sampleRepository.contextDir,\n      );\n    }\n    if (sampleName) {\n      getSample(sampleName)\n        .then((sample) => {\n          if (isGitImportSource(sample.spec.source)) {\n            const { gitImport } = sample.spec.source;\n            if (!sampleRepository?.url) {\n              const name = detectGitRepoName(sampleRepository.url);\n              setFieldValue('name', name, false);\n              setFieldValue('application.name', `${name}-app`, false);\n              setFieldValue('git.url', gitImport.repository.url, false);\n              if (sampleRepository.revision) {\n                setFieldValue('git.ref', sampleRepository.revision, false);\n              }\n              if (sampleRepository.contextDir) {\n                setFieldValue('git.dir', sampleRepository.contextDir, false);\n              }\n              setFieldTouched('git.url', true, true);\n              debouncedHandleGitUrlChange(\n                gitImport.repository.url,\n                gitImport.repository.revision,\n                gitImport.repository.contextDir,\n              );\n            }\n            if (gitImport?.service?.targetPort && gitImport?.service?.targetPort !== 8080) {\n              setFieldValue(\n                'route.unknownTargetPort',\n                gitImport.service.targetPort.toString(),\n                false,\n              );\n            }\n            // handleSearch(containerImport.image);\n          } else {\n            // eslint-disable-next-line no-console\n            console.error(\n              `Unsupported ConsoleSample \"${sampleName}\" source type ${sample.spec?.source?.type}`,\n            );\n          }\n        })\n        .catch((error) => {\n          // eslint-disable-next-line no-console\n          console.error(`Error while loading ConsoleSample \"${sampleName}\":`, error);\n        });\n    } else if (formType === 'sample' && imageStreamTagSampleRepo) {\n      fillImageStreamTagSample();\n    }\n\n    // Disable deps to load the samples only once when the component is loaded.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [canCreateKnativeServiceLoading]);\n\n  return (\n    <FormSection title={title ?? t('devconsole~Git')}>\n      <InputField\n        ref={inputRef}\n        type={TextInputTypes.text}\n        name={`${fieldPrefix}git.url`}\n        label={t('devconsole~Git Repo URL')}\n        helpText={helpText}\n        helpTextInvalid={helpText}\n        validated={validated}\n        onBlur={(e: React.FocusEvent<HTMLInputElement>) => {\n          const trimmedURL = e.target.value.trim();\n          if (e.target.value !== trimmedURL) {\n            setFieldValue('git.url', trimmedURL);\n            debouncedHandleGitUrlChange(trimmedURL, values.git.ref, values.git.dir);\n          }\n        }}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          resetFields();\n          debouncedHandleGitUrlChange(e.target.value.trim(), values.git.ref, values.git.dir);\n        }}\n        data-test-id=\"git-form-input-url\"\n        required\n        isDisabled={formType === 'sample' && imageStreamTagSampleRepo}\n      />\n      {formType !== 'sample' && imageStreamTagSampleRepo && (\n        <SampleRepo onClick={fillImageStreamTagSample} />\n      )}\n      {values.git.showGitType && (\n        <>\n          <GitTypeSelector fieldPrefix={fieldPrefix} />\n          {values.git.type === GitProvider.UNSURE && (\n            <Alert isInline variant=\"info\" title={t('devconsole~Defaulting Git type to other')}>\n              {t('devconsole~We failed to detect the Git type.')}\n            </Alert>\n          )}\n        </>\n      )}\n      {formType !== 'sample' && <AdvancedGitOptions formContextField={formContextField} />}\n    </FormSection>\n  );\n};\n\nexport default GitSection;\n","import * as React from 'react';\nimport {\n  Alert,\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { RedExclamationCircleIcon } from '@console/dynamic-plugin-sdk';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  RegistryType,\n  BuilderImagesNamespace,\n  getImageStreamTags,\n} from '../../../utils/imagestream-utils';\nimport { ImageStreamState, ImageStreamAction, ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\nimport ImageStreamDropdown from './ImageStreamDropdown';\nimport ImageStreamNsDropdown from './ImageStreamNsDropdown';\nimport ImageStreamTagDropdown from './ImageStreamTagDropdown';\n\nimport './ImageStream.scss';\n\nexport const initialState: ImageStreamState = {\n  loading: false,\n  accessLoading: false,\n  selectedImageStream: {},\n};\n\nexport const ImageStreamReducer = (state: ImageStreamState, action: ImageStreamAction) => {\n  const { value } = action;\n  switch (action.type) {\n    case ImageStreamActions.setLoading:\n      return { ...state, loading: value };\n    case ImageStreamActions.setAccessLoading:\n      return { ...state, accessLoading: value };\n    case ImageStreamActions.setSelectedImageStream:\n      return { ...state, selectedImageStream: value };\n    default:\n      throw new Error('Invalid action was provided in imagestream reducer');\n  }\n};\n\nconst ImageStream: React.FC<{\n  disabled?: boolean;\n  label?: string;\n  required?: boolean;\n  formContextField?: string;\n  dataTest?: string;\n  reloadCount?: number;\n}> = ({ disabled = false, label, required = false, formContextField, dataTest, reloadCount }) => {\n  const { t } = useTranslation();\n  const { values } = useFormikContext<FormikValues>();\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const [state, dispatch] = React.useReducer(ImageStreamReducer, initialState);\n  const [hasImageStreams, setHasImageStreams] = React.useState(false);\n  const { loading, accessLoading, selectedImageStream } = state;\n  const { imageStream, project, registry, isi, fromImageStreamTag } =\n    _.get(values, formContextField) || values;\n\n  const imageStreamTagList = getImageStreamTags(selectedImageStream as K8sResourceKind);\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const isTagsAvailable =\n    imageStream.tag !== '' || (isStreamsAvailable && !_.isEmpty(imageStreamTagList));\n  const isImageStreamSelected = imageStream.image !== '';\n  const showCommandLineAlert =\n    project.name !== imageStream.namespace &&\n    imageStream.namespace !== BuilderImagesNamespace.Openshift &&\n    (registry === RegistryType.Internal || fromImageStreamTag) &&\n    isStreamsAvailable &&\n    isTagsAvailable;\n  const helperTextInvalid = validated === ValidatedOptions.error && isi.status?.message && (\n    <>\n      <ExclamationCircleIcon />\n      &nbsp;{isi.status?.message}\n    </>\n  );\n\n  return (\n    <>\n      <ImageStreamContext.Provider\n        value={{ state, dispatch, hasImageStreams, setHasImageStreams, setValidated }}\n      >\n        <FormGroup\n          fieldId=\"image-stream-dropdowns\"\n          label={label}\n          required={required}\n          data-test={dataTest}\n        >\n          <div className=\"row\">\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamNsDropdown disabled={disabled} formContextField={formContextField} />\n            </div>\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamDropdown\n                disabled={disabled}\n                formContextField={formContextField}\n                reloadCount={reloadCount}\n              />\n              <div className=\"odc-imagestream-separator\">/</div>\n            </div>\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamTagDropdown\n                disabled={disabled}\n                formContextField={formContextField}\n                reloadCount={reloadCount}\n              />\n              <div className=\"odc-imagestream-separator\">:</div>\n            </div>\n          </div>\n\n          {validated === ValidatedOptions.error && (\n            <FormHelperText>\n              <HelperText>\n                <HelperTextItem variant=\"error\" icon={<RedExclamationCircleIcon />}>\n                  {helperTextInvalid}\n                </HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n        {isNamespaceSelected && isImageStreamSelected && !isTagsAvailable && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert variant=\"warning\" title={t('devconsole~No Image streams tags found')} isInline>\n              {t('devconsole~No tags are available in Image Stream {{image}}', {\n                image: imageStream.image,\n              })}\n            </Alert>\n          </div>\n        )}\n        {isNamespaceSelected && !loading && !isStreamsAvailable && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert variant=\"warning\" title={t('devconsole~No Image streams found')} isInline>\n              {t('devconsole~No Image streams are available in Project {{namespace}}', {\n                namespace: imageStream.namespace,\n              })}\n            </Alert>\n          </div>\n        )}\n        {isNamespaceSelected && !accessLoading && showCommandLineAlert && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={t(\n                'devconsole~Service account default will need pull authority to deploy Images from {{namespace}}',\n                { namespace: imageStream.namespace },\n              )}\n            >\n              {t('devconsole~You can grant authority with the command')}{' '}\n              <ClipboardCopy\n                className=\"odc-imagestream-clipboard\"\n                variant={ClipboardCopyVariant.expansion}\n                isReadOnly\n              >{`oc policy add-role-to-user system:image-puller system:serviceaccount:${project.name}:default --namespace=${imageStream.namespace}`}</ClipboardCopy>\n            </Alert>\n          </div>\n        )}\n      </ImageStreamContext.Provider>\n    </>\n  );\n};\n\nexport default React.memo(ImageStream);\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { InputField, useDebounceCallback } from '@console/shared';\nimport FormSection from '../section/FormSection';\nimport SourceSecretSelector from './SourceSecretSelector';\n\nconst AdvancedGitOptions: React.FC<{\n  formContextField?: string;\n}> = ({ formContextField }) => {\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n\n  const { t } = useTranslation();\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n\n  const handleGitRefChange = useDebounceCallback((e: React.SyntheticEvent) =>\n    setFieldValue(`${fieldPrefix}git.ref`, (e.target as HTMLInputElement).value),\n  );\n\n  const handleGitDirChange = useDebounceCallback((e: React.SyntheticEvent) => {\n    setFieldValue(`${fieldPrefix}git.dir`, (e.target as HTMLInputElement).value);\n    setFieldTouched(`${fieldPrefix}git.dir`);\n  });\n\n  return (\n    <ExpandCollapse\n      textExpanded={t('devconsole~Hide advanced Git options')}\n      textCollapsed={t('devconsole~Show advanced Git options')}\n      dataTest=\"advanced-git-options\"\n    >\n      <FormSection>\n        <InputField\n          type={TextInputTypes.text}\n          name={`${fieldPrefix}git.ref`}\n          label={t('devconsole~Git reference')}\n          helpText={t('devconsole~Optional branch, tag, or commit.')}\n          onChange={handleGitRefChange}\n        />\n        <InputField\n          type={TextInputTypes.text}\n          name={`${fieldPrefix}git.dir`}\n          label={t('devconsole~Context dir')}\n          helpText={t(\n            'devconsole~Optional subdirectory for the source code, used as a context directory for build.',\n          )}\n          onChange={handleGitDirChange}\n        />\n        <SourceSecretSelector formContextField={formContextField} />\n      </FormSection>\n    </ExpandCollapse>\n  );\n};\n\nexport default AdvancedGitOptions;\n","import * as React from 'react';\nimport { FormGroup, FormHelperText, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { SecretTypeAbstraction } from '@console/internal/components/secrets/create-secret';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { SecretModel } from '@console/internal/models';\nimport { getFieldId } from '@console/shared';\nimport SourceSecretDropdown from '../../dropdown/SourceSecretDropdown';\nimport { secretModalLauncher } from '../CreateSecretModal';\n\nconst CREATE_SOURCE_SECRET = 'create-source-secret';\nconst CLEAR_SOURCE_SECRET = 'clear-source-secret';\n\nconst SourceSecretSelector: React.FC<{\n  formContextField?: string;\n}> = ({ formContextField }) => {\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n\n  const { t } = useTranslation();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const namespace: string = _.get(values, `${fieldPrefix}project.name`);\n  const secret: string = _.get(values, `${fieldPrefix}git.secret`);\n  const [data, loaded, loadError] = useK8sWatchResource(\n    namespace && secret\n      ? {\n          kind: SecretModel.kind,\n          namespace,\n          name: secret,\n          optional: true,\n          isList: false,\n        }\n      : null,\n  );\n\n  const handleSave = (name: string) => {\n    setFieldValue(`${fieldPrefix}git.secret`, name);\n  };\n\n  const handleDropdownChange = (key: string) => {\n    if (key === CREATE_SOURCE_SECRET) {\n      setFieldValue(`${fieldPrefix}git.secret`, secret);\n      secretModalLauncher({\n        namespace,\n        save: handleSave,\n        secretType: SecretTypeAbstraction.source,\n      });\n    } else if (key === CLEAR_SOURCE_SECRET) {\n      setFieldValue(`${fieldPrefix}git.secret`, '');\n      setFieldValue(`${fieldPrefix}git.secretResource`, {});\n    } else {\n      setFieldValue(`${fieldPrefix}git.secret`, key);\n    }\n  };\n\n  React.useEffect(() => {\n    loaded &&\n      !loadError &&\n      secret &&\n      data &&\n      setFieldValue(`${fieldPrefix}git.secretResource`, data);\n  }, [loaded, loadError, secret, data, setFieldValue, fieldPrefix]);\n\n  return (\n    <>\n      <FormGroup\n        fieldId={getFieldId('source-secret', 'dropdown')}\n        label={t('devconsole~Source Secret')}\n      >\n        <SourceSecretDropdown\n          dropDownClassName=\"dropdown--full-width\"\n          menuClassName=\"dropdown-menu--text-wrap\"\n          namespace={namespace}\n          actionItems={[\n            {\n              actionTitle: t('devconsole~Create new Secret'),\n              actionKey: CREATE_SOURCE_SECRET,\n            },\n            {\n              actionTitle: t('devconsole~No Secret'),\n              actionKey: CLEAR_SOURCE_SECRET,\n            },\n          ]}\n          selectedKey={secret}\n          title={secret}\n          onChange={handleDropdownChange}\n        />\n\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              {t('devconsole~Secret with credentials for pulling your source code.')}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default SourceSecretSelector;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Firehose } from '@console/internal/components/utils/firehose';\nimport { SecretModel } from '@console/internal/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface SourceSecretDropdownProps {\n  dropDownClassName?: string;\n  menuClassName?: string;\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  onChange?: (key: string) => void;\n  title?: React.ReactNode;\n}\n\nconst SourceSecretDropdown: React.FC<SourceSecretDropdownProps> = (props) => {\n  const { t } = useTranslation();\n  const filterData = (item) => {\n    return item.type === 'kubernetes.io/basic-auth' || item.type === 'kubernetes.io/ssh-auth';\n  };\n  const resources = [\n    {\n      isList: true,\n      namespace: props.namespace,\n      kind: SecretModel.kind,\n      prop: 'secrets',\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder={t('devconsole~Select Secret name')}\n        resourceFilter={filterData}\n        dataSelector={['metadata', 'name']}\n      />\n    </Firehose>\n  );\n};\n\nexport default SourceSecretDropdown;\n","import * as React from 'react';\nimport { Tile, Flex, FlexItem, FormGroup } from '@patternfly/react-core';\nimport {\n  GithubIcon,\n  GitlabIcon,\n  BitbucketIcon,\n  GitAltIcon,\n} from '@patternfly/react-icons/dist/esm/icons';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { GitProvider } from '@console/git-service/src';\nimport GiteaIcon from '../GiteaIcon';\nimport { GitReadableTypes } from '../import-types';\n\nimport './GitTypeSelector.scss';\n\ntype GitTypeSelectorProps = {\n  fieldPrefix: string;\n};\n\nconst GitTypeSelector: React.FC<GitTypeSelectorProps> = ({ fieldPrefix }) => {\n  const { values, setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const { t } = useTranslation();\n\n  const handleGitTypeChange = (gitType: GitProvider) => {\n    setFieldValue(`${fieldPrefix}git.type`, gitType, false);\n    setFieldTouched(`${fieldPrefix}git.type`, true, false);\n  };\n  const typeValue = _.get(values, `${fieldPrefix}git.type`);\n\n  return (\n    <>\n      <FormGroup label={t('devconsole~Git type')} isRequired id=\"git-type\">\n        <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITHUB]}\n              icon={<GithubIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITHUB)}\n              isSelected={typeValue === GitProvider.GITHUB}\n              id=\"git-type-github\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITLAB]}\n              icon={<GitlabIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITLAB)}\n              isSelected={typeValue === GitProvider.GITLAB}\n              id=\"git-type-gitlab\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.BITBUCKET]}\n              icon={<BitbucketIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.BITBUCKET)}\n              isSelected={typeValue === GitProvider.BITBUCKET}\n              id=\"git-type-bitbucket\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITEA]}\n              icon={<GiteaIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITEA)}\n              isSelected={typeValue === GitProvider.GITEA}\n              id=\"git-type-gitea\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.UNSURE]}\n              icon={<GitAltIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.UNSURE)}\n              isSelected={typeValue === GitProvider.UNSURE}\n              id=\"git-type-other\"\n            />\n          </FlexItem>\n        </Flex>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default GitTypeSelector;\n","import * as React from 'react';\nimport { FormHelperText, Button, ButtonVariant } from '@patternfly/react-core';\nimport { LevelUpAltIcon } from '@patternfly/react-icons/dist/esm/icons/level-up-alt-icon';\nimport { useTranslation } from 'react-i18next';\n\nexport interface SampleRepoProps {\n  onClick: () => void;\n}\n\nconst SampleRepo = (props) => {\n  const { t } = useTranslation();\n  return (\n    <FormHelperText>\n      <Button {...props} type=\"button\" variant={ButtonVariant.link} isInline>\n        {t('devconsole~Try sample')} <LevelUpAltIcon />\n      </Button>\n    </FormHelperText>\n  );\n};\n\nexport default SampleRepo;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getImageStreamResource } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamDropdown: React.FC<{\n  disabled?: boolean;\n  formContextField?: string;\n  reloadCount?: number;\n}> = ({ disabled = false, formContextField, reloadCount }) => {\n  const { t } = useTranslation();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const imgCollection = {};\n\n  const { values, setFieldValue, initialValues } = useFormikContext<FormikValues>();\n  const { imageStream, formType } = _.get(values, formContextField) || values;\n  const { isi: initialIsi } = _.get(initialValues, formContextField) || initialValues;\n  const { state, dispatch, hasImageStreams, setHasImageStreams } = React.useContext(\n    ImageStreamContext,\n  );\n  const { accessLoading, loading } = state;\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const collectImageStreams = (namespace: string, resource: K8sResourceKind): void => {\n    if (!imgCollection[namespace]) {\n      imgCollection[namespace] = {};\n    }\n    imgCollection[namespace][resource.metadata.name] = resource;\n  };\n  const getTitle = () => {\n    return loading && !isStreamsAvailable\n      ? ''\n      : !isStreamsAvailable\n      ? t('devconsole~No Image Stream')\n      : t('devconsole~Select Image Stream');\n  };\n\n  const onDropdownChange = React.useCallback(\n    (img: string) => {\n      setFieldValue(\n        `${fieldPrefix}imageStream.tag`,\n        img === imageStream.image ? imageStream.tag : '',\n      );\n      formType !== 'edit' && setFieldValue(`${fieldPrefix}isi`, initialIsi);\n      const image = _.get(imgCollection, [imageStream.namespace, img], {});\n      dispatch({ type: ImageStreamActions.setSelectedImageStream, value: image });\n    },\n    [\n      setFieldValue,\n      fieldPrefix,\n      imageStream.image,\n      imageStream.tag,\n      imageStream.namespace,\n      formType,\n      initialIsi,\n      imgCollection,\n      dispatch,\n    ],\n  );\n  const onLoad = (imgstreams) => {\n    const imageStreamAvailable = !_.isEmpty(imgstreams);\n    setHasImageStreams(imageStreamAvailable);\n    loading &&\n      isNamespaceSelected &&\n      dispatch({ type: ImageStreamActions.setLoading, value: false });\n  };\n  const resourceFilter = (resource: K8sResourceKind) => {\n    const {\n      metadata: { namespace },\n    } = resource;\n    collectImageStreams(namespace, resource);\n    return namespace === imageStream.namespace;\n  };\n\n  React.useEffect(() => {\n    imageStream.image && onDropdownChange(imageStream.image);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageStream.image, isStreamsAvailable]);\n\n  React.useEffect(() => {\n    reloadCount && imageStream.image && onDropdownChange(imageStream.image);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reloadCount, isStreamsAvailable]);\n\n  return (\n    <ResourceDropdownField\n      name={`${fieldPrefix}imageStream.image`}\n      label={t('devconsole~Image Stream')}\n      resources={getImageStreamResource(imageStream.namespace)}\n      dataSelector={['metadata', 'name']}\n      key={imageStream.namespace}\n      fullWidth\n      required\n      title={imageStream.image || getTitle()}\n      disabled={!isStreamsAvailable || disabled}\n      onChange={onDropdownChange}\n      onLoad={onLoad}\n      resourceFilter={resourceFilter}\n    />\n  );\n};\n\nexport default ImageStreamDropdown;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getProjectResource, BuilderImagesNamespace } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions as Action } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamNsDropdown: React.FC<{ disabled?: boolean; formContextField?: string }> = ({\n  disabled = false,\n  formContextField,\n}) => {\n  const { t } = useTranslation();\n  const { values, setFieldValue, initialValues } = useFormikContext<FormikValues>();\n  const { imageStream } = _.get(values, formContextField) || values;\n  const { isi: initialIsi } = _.get(initialValues, formContextField) || initialValues;\n  const { dispatch } = React.useContext(ImageStreamContext);\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const onDropdownChange = React.useCallback(\n    (ns?: string) => {\n      if (ns) {\n        setFieldValue(`${fieldPrefix}imageStream.image`, '');\n        setFieldValue(`${fieldPrefix}imageStream.tag`, '');\n      }\n      setFieldValue(`${fieldPrefix}isi`, initialIsi);\n      dispatch({ type: Action.setLoading, value: true });\n    },\n    [dispatch, fieldPrefix, initialIsi, setFieldValue],\n  );\n\n  React.useEffect(() => {\n    imageStream.namespace && onDropdownChange();\n  }, [onDropdownChange, imageStream.namespace]);\n\n  return (\n    <ResourceDropdownField\n      name={`${fieldPrefix}imageStream.namespace`}\n      label={t('devconsole~Project')}\n      title={imageStream.namespace || t('devconsole~Select Project')}\n      fullWidth\n      required\n      resources={getProjectResource()}\n      dataSelector={['metadata', 'name']}\n      onChange={onDropdownChange}\n      appendItems={{ openshift: BuilderImagesNamespace.Openshift }}\n      disabled={disabled}\n    />\n  );\n};\nexport default ImageStreamNsDropdown;\n","import * as React from 'react';\nimport { ValidatedOptions } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues, getIn } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { ImageStreamTagModel } from '@console/internal/models';\nimport { k8sGet, K8sResourceKind, ContainerPort } from '@console/internal/module/k8s';\nimport { DropdownField } from '@console/shared';\nimport { UNASSIGNED_KEY } from '@console/topology/src/const';\nimport {\n  getImageStreamTags,\n  getPorts,\n  getSuggestedName,\n  makePortName,\n  imageStreamLabels,\n} from '../../../utils/imagestream-utils';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamTagDropdown: React.FC<{\n  disabled?: boolean;\n  formContextField?: string;\n  reloadCount?: number;\n}> = ({ disabled = false, formContextField, reloadCount }) => {\n  const { t } = useTranslation();\n  const unmounted = React.useRef(false);\n  let imageStreamTagList = {};\n  const { values, setFieldValue, initialValues, touched } = useFormikContext<FormikValues>();\n  const { name: resourceName, imageStream, application, formType, isi: isiValues } =\n    _.get(values, formContextField) || values;\n  const isiPorts = isiValues?.ports;\n  const { imageStream: initialImageStream, route: initialRoute } =\n    _.get(initialValues, formContextField) || initialValues;\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const { state, hasImageStreams, setValidated } = React.useContext(ImageStreamContext);\n  const { selectedImageStream, accessLoading, loading } = state;\n  imageStreamTagList = getImageStreamTags(selectedImageStream as K8sResourceKind);\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const isTagsAvailable = isStreamsAvailable && !_.isEmpty(imageStreamTagList);\n  const isImageStreamSelected = imageStream.image !== '';\n  const initialImageStreamImage = initialImageStream?.image;\n\n  const searchImageTag = React.useCallback(\n    (selectedTag: string) => {\n      setFieldValue(`${fieldPrefix}isSearchingForImage`, true);\n      k8sGet(ImageStreamTagModel, `${imageStream.image}:${selectedTag}`, imageStream.namespace)\n        .then((imageStreamImport) => {\n          if (unmounted.current) return;\n          const {\n            image,\n            tag,\n            status,\n            metadata: { labels },\n          } = imageStreamImport;\n          formContextField && setFieldValue(`${fieldPrefix}imageStreamTag`, imageStreamImport);\n          const imgStreamLabels = _.pick(labels, imageStreamLabels);\n          const name = imageStream.image;\n          const isi = { name, image, tag, status };\n          const ports = getPorts(isi);\n          setFieldValue(`${fieldPrefix}isSearchingForImage`, false);\n          setFieldValue(`${fieldPrefix}isi.name`, name);\n          setFieldValue(\n            `${fieldPrefix}isi.image`,\n            _.merge(image, { metadata: { labels: imgStreamLabels } }),\n          );\n          setFieldValue(`${fieldPrefix}isi.tag`, selectedTag);\n          setFieldValue(`${fieldPrefix}isi.ports`, ports);\n          setFieldValue(`${fieldPrefix}image.ports`, ports);\n          formType !== 'edit' &&\n            resourceName !== name &&\n            setFieldValue(`${fieldPrefix}name`, getSuggestedName(name));\n          application &&\n            application.selectedKey !== UNASSIGNED_KEY &&\n            !application.name &&\n            setFieldValue(`${fieldPrefix}application.name`, `${getSuggestedName(name)}-app`);\n          // set default port value\n          const targetPort =\n            initialRoute &&\n            (!initialRoute.targetPort ||\n              getIn(_.get(touched, `${fieldPrefix}imageStream`), 'image')) &&\n            !getIn(_.get(touched, `${fieldPrefix}route`), 'targetPort') &&\n            _.head(ports);\n          targetPort && setFieldValue(`${fieldPrefix}route.targetPort`, makePortName(targetPort));\n          setValidated(ValidatedOptions.success);\n        })\n        .catch((error) => {\n          if (unmounted.current) return;\n          setFieldValue(`${fieldPrefix}isi`, {});\n          setFieldValue(`${fieldPrefix}isi.status`, {\n            metadata: {},\n            status: '',\n            message: error.message,\n          });\n          setFieldValue(`${fieldPrefix}isSearchingForImage`, false);\n          setValidated(ValidatedOptions.error);\n        });\n    },\n    [\n      setFieldValue,\n      fieldPrefix,\n      imageStream.image,\n      imageStream.namespace,\n      formContextField,\n      resourceName,\n      formType,\n      application,\n      initialRoute,\n      touched,\n      setValidated,\n    ],\n  );\n\n  React.useEffect(() => {\n    imageStream.tag && searchImageTag(imageStream.tag);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageStream.tag]);\n\n  React.useEffect(() => {\n    reloadCount && imageStream.tag && searchImageTag(imageStream.tag);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reloadCount]);\n\n  React.useEffect(() => {\n    if (\n      initialRoute &&\n      getIn(_.get(touched, `${fieldPrefix}imageStream`), 'image') &&\n      !getIn(_.get(touched, `${fieldPrefix}route`), 'targetPort') &&\n      !_.isEqual(initialImageStreamImage, imageStream.image)\n    ) {\n      const targetPort: ContainerPort = _.head(isiPorts);\n      targetPort && setFieldValue(`${fieldPrefix}route.targetPort`, makePortName(targetPort));\n    }\n  }, [\n    touched.route,\n    touched.imageStream,\n    imageStream.image,\n    setFieldValue,\n    isiPorts,\n    initialRoute,\n    initialImageStreamImage,\n    fieldPrefix,\n    touched,\n  ]);\n\n  React.useEffect(() => {\n    return () => {\n      unmounted.current = true;\n    };\n  }, []);\n\n  return (\n    <DropdownField\n      name={`${fieldPrefix}imageStream.tag`}\n      label={t('devconsole~Tag')}\n      items={imageStreamTagList}\n      key={imageStream.image}\n      autocompleteFilter={fuzzy}\n      title={\n        imageStream.tag ||\n        (isNamespaceSelected && isImageStreamSelected && !isTagsAvailable\n          ? t('devconsole~No tag')\n          : t('devconsole~Select tag'))\n      }\n      disabled={!isImageStreamSelected || !isTagsAvailable || disabled}\n      fullWidth\n      required\n      onChange={(tag) => {\n        tag !== '' && searchImageTag(tag);\n      }}\n    />\n  );\n};\n\nexport default ImageStreamTagDropdown;\n","import { global_BackgroundColor_200 as globalBackground200 } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_200';\nimport { global_BackgroundColor_dark_100 as darkEditorBackground } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_dark_100';\nimport { global_BackgroundColor_dark_200 as globalBackgroundDark200 } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_dark_200';\nimport { global_BackgroundColor_light_100 as lightEditorBackground } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport { global_Color_dark_100 as globalColorDark100 } from '@patternfly/react-tokens/dist/js/global_Color_dark_100';\nimport { global_Color_light_100 as globalColorLight100 } from '@patternfly/react-tokens/dist/js/global_Color_light_100';\n\n(window as any).monaco.editor.defineTheme('console-light', {\n  base: 'vs',\n  inherit: true,\n  colors: {\n    'editor.background': lightEditorBackground.value,\n    'editorGutter.background': '#f5f5f5', // black-150\n    'editorLineNumber.activeForeground': globalColorDark100.value,\n    'editorLineNumber.foreground': globalBackgroundDark200.value,\n  },\n  rules: [\n    { token: 'number', foreground: '486b00' }, // light-green-600\n    { token: 'type', foreground: '795600' }, // gold-500\n    { token: 'string', foreground: '004080' }, // blue-600\n    { token: 'keyword', foreground: '40199a' }, // purple-600\n  ],\n});\n\n(window as any).monaco.editor.defineTheme('console-dark', {\n  base: 'vs-dark',\n  inherit: true,\n  colors: {\n    'editor.background': darkEditorBackground.value,\n    'editorGutter.background': '#292e34', // no pf token defined\n    'editorLineNumber.activeForeground': globalColorLight100.value,\n    'editorLineNumber.foreground': globalBackground200.value,\n  },\n  rules: [\n    { token: 'number', foreground: 'ace12e' }, // light-green-600\n    { token: 'type', foreground: '73bcf7' }, // blue-200\n    { token: 'string', foreground: 'f0ab00' }, // gold-400\n    { token: 'keyword', foreground: 'cbc1ff' }, // purple-100\n  ],\n});\n","import * as React from 'react';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst SwitchToYAMLAlert: React.FC<{ onClose?: () => void }> = ({ onClose }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      actionClose={onClose && <AlertActionCloseButton onClose={onClose} />}\n      isInline\n      title={t(\n        'console-shared~Note: Some fields may not be represented in this form view. Please select \"YAML view\" for full control.',\n      )}\n      variant=\"info\"\n      data-test=\"info-alert\"\n    />\n  );\n};\n\nexport default SwitchToYAMLAlert;\n","import { ObjectMetadata, ObjectReference } from '@console/dynamic-plugin-sdk';\nimport { NameValueFromPair, NameValuePair } from '@console/shared';\n\nexport { BuildConfigModel } from '@console/internal/models';\nexport { BuildStrategyType } from '@console/internal/components/build';\n\ntype LocalObjectReference = { name: string };\n\ntype ImageStreamTagReference = {\n  kind: 'ImageStreamTag';\n  namespace?: string;\n  name: string;\n};\n\ntype ImageStreamImageReference = {\n  kind: 'ImageStreamImage';\n  namespace?: string;\n  name: string;\n};\n\ntype DockerImageReference = {\n  kind: 'DockerImage';\n  name: string;\n};\n\nexport type ImageReference =\n  | ImageStreamTagReference\n  | ImageStreamImageReference\n  | DockerImageReference;\n\nexport type BuildConfigGitSource = {\n  type: 'Git';\n  git: {\n    uri: string;\n    ref?: string;\n  };\n  contextDir?: string;\n};\n\nexport type BuildConfigDockerfileSource = {\n  type: 'Dockerfile';\n  dockerfile: string;\n};\n\nexport type BuildConfigBinarySource = {\n  type: 'Binary';\n  binary?: any;\n};\n\nexport type BuildConfigSource = (\n  | BuildConfigGitSource\n  | BuildConfigDockerfileSource\n  | BuildConfigBinarySource\n) & {\n  configMaps?: { configMap: LocalObjectReference; destinationDir: string }[];\n  secrets?: { secret: LocalObjectReference; destinationDir: string }[];\n  sourceSecret?: LocalObjectReference;\n};\n\nexport type BuildConfigRevision = {\n  type: 'Source' | 'Dockerfile' | 'Binary' | 'Images';\n  git?: {\n    author: { email: string; name: string };\n    commit: string;\n    committer: { email: string; name: string };\n    message: string;\n  };\n};\n\nexport type BuildConfigSourceStrategy = {\n  type: 'Source';\n  sourceStrategy?: {\n    from?: ImageReference;\n    env?: (NameValuePair | NameValueFromPair)[];\n  };\n  git?: {\n    uri: string;\n    ref: string;\n    noProxy?: string;\n    httpProxy?: string;\n    httpsProxy?: string;\n  };\n  contextDir?: string;\n  images?: {\n    as: string[];\n    from: ObjectReference;\n    paths: { sourcePath: string; destinationDir: string }[];\n    pullSecret: LocalObjectReference;\n  }[];\n  secrets?: { secret: LocalObjectReference; destinationDir: string }[];\n  sourceSecret?: LocalObjectReference;\n};\n\nexport type BuildConfigDockerStrategy = {\n  type: 'Docker';\n  dockerStrategy: {\n    from?: ImageReference;\n    dockerfilePath?: string;\n    env?: (NameValuePair | NameValueFromPair)[];\n  };\n};\n\nexport type BuildConfigStrategy = (BuildConfigSourceStrategy | BuildConfigDockerStrategy) & {\n  configMaps?: { configMap: LocalObjectReference; destinationDir: string }[];\n};\n\nexport type BuildConfigOutput = {\n  imageLabels?: { name: string; value: string }[];\n  pushSecret?: LocalObjectReference;\n  to?: ImageReference;\n};\n\nexport type BuildConfigConfigChangeTrigger = {\n  type: 'ConfigChange';\n};\n\nexport type BuildConfigImageChangeTrigger = {\n  type: 'ImageChange';\n  imageChange?: {\n    lastTriggeredImageID?: string;\n  };\n};\n\nexport type BuildConfigGenericTrigger = {\n  type: 'Generic';\n  generic: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigGitHubTrigger = {\n  type: 'GitHub';\n  github: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigGitLabTrigger = {\n  type: 'GitLab';\n  gitlab: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigBitbucketTrigger = {\n  type: 'Bitbucket';\n  bitbucket: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigTrigger =\n  | BuildConfigConfigChangeTrigger\n  | BuildConfigImageChangeTrigger\n  | BuildConfigGenericTrigger\n  | BuildConfigGitHubTrigger\n  | BuildConfigGitLabTrigger\n  | BuildConfigBitbucketTrigger;\n\nexport type BuildConfigPostCommit = {\n  command?: string[];\n  script?: string;\n  args?: string[];\n  commit?: string[];\n};\n\nexport enum BuildConfigRunPolicy {\n  Parallel = 'Parallel',\n  Serial = 'Serial',\n  SerialLatestOnly = 'SerialLatestOnly',\n}\n\nexport type BuildConfig = {\n  apiVersion: 'build.openshift.io/v1';\n  kind: 'BuildConfig';\n  metadata: ObjectMetadata;\n  spec: {\n    source?: BuildConfigSource;\n    revision?: BuildConfigRevision;\n    strategy?: BuildConfigStrategy;\n    output?: BuildConfigOutput;\n    triggers?: BuildConfigTrigger[];\n    postCommit?: BuildConfigPostCommit;\n    runPolicy?: BuildConfigRunPolicy;\n    serviceAccount?: string;\n    completionDeadlineSeconds?: number;\n    successfulBuildsHistoryLimit?: number;\n    failedBuildsHistoryLimit?: number;\n  };\n  status?: never;\n};\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { InputField } from '@console/shared';\nimport FormSection from '../../import/section/FormSection';\n\nexport type NameSectionFormData = {\n  formData: {\n    name?: string;\n  };\n};\n\nconst NameSection: React.FC<{}> = () => {\n  const { t } = useTranslation();\n\n  const [, meta] = useField<string>('formData.name');\n  const isNew = !meta.initialValue;\n\n  return (\n    <FormSection dataTest=\"section name\">\n      <InputField\n        label={t('devconsole~Name')}\n        name=\"formData.name\"\n        type={TextInputTypes.text}\n        isDisabled={!isNew}\n        required\n      />\n    </FormSection>\n  );\n};\n\nexport default NameSection;\n","import * as React from 'react';\nimport { FormGroup, FormHelperText, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport MonacoEditor, { ChangeHandler, MonacoEditorProps } from 'react-monaco-editor';\nimport { ThemeContext } from '@console/internal/components/ThemeProvider';\nimport { RedExclamationCircleIcon, useDebounceCallback } from '@console/shared/src';\nimport '@console/shared/src/components/editor/theme';\n\ntype EditorFieldProps = {\n  name: string;\n  label?: React.ReactNode;\n  helpText?: React.ReactNode;\n  required?: boolean;\n  isDisabled?: boolean;\n} & MonacoEditorProps;\n\nconst EditorField: React.FC<EditorFieldProps> = ({\n  name,\n  label,\n  helpText,\n  required,\n  isDisabled,\n  onChange,\n  ...otherProps\n}) => {\n  const theme = React.useContext(ThemeContext);\n  const { getFieldMeta, setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const { error, value } = getFieldMeta<string>(name);\n\n  const debouncedOnChange = useDebounceCallback<ChangeHandler>((newValue, event) => {\n    if (onChange) {\n      onChange(newValue, event);\n    }\n    setFieldValue(name, newValue, false);\n    setFieldTouched(name, true);\n  }, 100);\n\n  return (\n    <FormGroup fieldId=\"\" label={label} isRequired={required}>\n      <MonacoEditor\n        {...otherProps}\n        value={value}\n        onChange={debouncedOnChange}\n        theme={theme === 'light' ? 'console-light' : 'console-dark'}\n      />\n\n      <FormHelperText>\n        <HelperText>\n          {error ? (\n            <HelperTextItem variant=\"error\" icon={<RedExclamationCircleIcon />} />\n          ) : (\n            <HelperTextItem>{helpText}</HelperTextItem>\n          )}\n        </HelperText>\n      </FormHelperText>\n    </FormGroup>\n  );\n};\n\nexport default EditorField;\n","import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { EnvironmentField, NameValueFromPair, NameValuePair } from '@console/shared/src';\nimport FormSection from '../../import/section/FormSection';\n\nexport type EnvironmentVariablesSectionFormData = {\n  formData: {\n    environmentVariables: (NameValuePair | NameValueFromPair)[];\n  };\n};\n\nconst EnvironmentVariablesSection: React.FC<{ namespace: string }> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { environmentVariables },\n    },\n  } = useFormikContext<EnvironmentVariablesSectionFormData>();\n  return (\n    <FormSection\n      title={t('devconsole~Environment Variables')}\n      dataTest=\"section environment-variables\"\n    >\n      <EnvironmentField\n        name=\"formData.environmentVariables\"\n        envs={environmentVariables}\n        obj={{ metadata: { namespace } }}\n      />\n    </FormSection>\n  );\n};\n\nexport default EnvironmentVariablesSection;\n","import { GitProvider } from '@console/git-service/src';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { BuildConfigFormikValues, BuildStrategyType } from './types';\n\nexport const getInitialBuildConfigFormikValues = (): BuildConfigFormikValues => {\n  return {\n    editorType: EditorType.Form,\n    formData: {\n      name: '',\n\n      source: {\n        type: 'none',\n        git: {\n          formType: 'edit',\n          name: '',\n          git: {\n            url: '',\n            type: GitProvider.INVALID,\n            ref: '',\n            dir: '/',\n            showGitType: false,\n            secret: '',\n            isUrlValidating: false,\n          },\n          image: {\n            selectedKey: '',\n            selected: '',\n            recommended: '',\n            tagObj: '',\n            couldNotRecommend: false,\n          },\n          application: {\n            selected: '',\n            selectedKey: '',\n            name: '',\n            isInContext: null,\n          },\n          build: {\n            strategy: BuildStrategyType.Source,\n          },\n          project: {\n            name: undefined,\n          },\n        },\n        dockerfile: '',\n      },\n\n      images: {\n        buildFrom: {\n          type: 'none',\n          imageStreamTag: {\n            fromImageStreamTag: false,\n            isSearchingForImage: false,\n            imageStream: {\n              namespace: '',\n              image: '',\n              tag: '',\n            },\n            project: {\n              name: '',\n            },\n            isi: {\n              name: '',\n              image: {},\n              tag: '',\n              status: { metadata: {}, status: '' },\n              ports: [],\n            },\n            image: {\n              name: '',\n              image: {},\n              tag: '',\n              status: { metadata: {}, status: '' },\n              ports: [],\n            },\n          },\n          imageStreamImage: '',\n          dockerImage: '',\n        },\n        pushTo: {\n          type: 'none',\n          imageStreamTag: {\n            fromImageStreamTag: false,\n            isSearchingForImage: false,\n            imageStream: {\n              namespace: '',\n              image: '',\n              tag: '',\n            },\n            project: {\n              name: '',\n            },\n            isi: {\n              name: '',\n              image: {},\n              tag: '',\n              status: { metadata: {}, status: '' },\n              ports: [],\n            },\n            image: {\n              name: '',\n              image: {},\n              tag: '',\n              status: { metadata: {}, status: '' },\n              ports: [],\n            },\n          },\n          imageStreamImage: '',\n          dockerImage: '',\n        },\n      },\n\n      environmentVariables: [],\n\n      triggers: {\n        configChange: false,\n        imageChange: false,\n        otherTriggers: [],\n      },\n\n      secrets: [],\n\n      policy: {\n        runPolicy: null,\n      },\n\n      hooks: {\n        enabled: false,\n        type: 'command',\n        commands: [''],\n        shell: '',\n        arguments: [],\n      },\n    },\n\n    yamlData: '',\n\n    resourceVersion: undefined,\n  };\n};\n","import * as _ from 'lodash';\nimport { safeYAMLToJS, safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { ImageOptionFormData } from '../sections/ImagesSection';\nimport { BuildConfig, BuildConfigTrigger, ImageReference } from '../types';\nimport { BuildConfigFormikValues } from './types';\n\nconst deleteKeys = (object: Record<string, any>, ...keys: string[]) => {\n  keys.forEach((key) => delete object[key]);\n};\n\nconst convertFormDataNameToBuildConfig = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  buildConfig.metadata.name = values.formData.name;\n};\n\nconst convertFormDataToBuildConfigSource = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  switch (values.formData.source.type) {\n    case 'git': {\n      const { git } = values.formData.source.git;\n      buildConfig.spec.source = {\n        ...buildConfig.spec.source,\n        type: 'Git',\n        git: git.ref\n          ? {\n              uri: git.url,\n              ref: git.ref,\n            }\n          : {\n              uri: git.url,\n            },\n        contextDir: git.dir,\n      };\n      if (git.secret) {\n        buildConfig.spec.source.sourceSecret = { name: git.secret };\n      } else {\n        delete buildConfig.spec.source.sourceSecret;\n      }\n      deleteKeys(buildConfig.spec.source, 'dockerfile');\n\n      // Set default 'Source' strategy if no strategy is defined yet.\n      if (!buildConfig.spec.strategy?.type) {\n        buildConfig.spec.strategy = {\n          type: values.formData.images.strategyType || 'Source',\n          ...buildConfig.spec.strategy,\n        };\n      }\n\n      // Updates both app.openshift.io/vcs-* annotations only if the url exists\n      // so that we set the branch also if it was not defined earlier.\n      if (buildConfig.metadata.annotations?.['app.openshift.io/vcs-uri']) {\n        buildConfig.metadata.annotations['app.openshift.io/vcs-uri'] = git.url;\n        if (git.ref) {\n          buildConfig.metadata.annotations['app.openshift.io/vcs-ref'] = git.ref;\n        } else {\n          delete buildConfig.metadata.annotations['app.openshift.io/vcs-ref'];\n        }\n      }\n\n      break;\n    }\n    case 'dockerfile': {\n      buildConfig.spec.source = {\n        ...buildConfig.spec.source,\n        type: 'Dockerfile',\n        dockerfile: values.formData.source.dockerfile,\n      };\n      deleteKeys(buildConfig.spec.source, 'git');\n\n      // Set default 'Docker' strategy if no strategy is defined yet.\n      if (!buildConfig.spec.strategy?.type) {\n        buildConfig.spec.strategy = {\n          type: values.formData.images.strategyType || 'Docker',\n          ...buildConfig.spec.strategy,\n        };\n      }\n      break;\n    }\n    case 'binary': {\n      buildConfig.spec.source = {\n        ...buildConfig.spec.source,\n        type: 'Binary',\n      };\n\n      // Set default 'Source' strategy if no strategy is defined yet.\n      if (!buildConfig.spec.strategy?.type) {\n        buildConfig.spec.strategy = {\n          type: values.formData.images.strategyType || 'Source',\n          ...buildConfig.spec.strategy,\n        };\n      }\n      break;\n    }\n    default:\n    // nothing\n  }\n};\n\nconst convertImageOptionFormDataToImageReference = (\n  imageOptionFormData: ImageOptionFormData,\n  buildConfigNamespace: string,\n): ImageReference => {\n  if (imageOptionFormData.type === 'imageStreamTag') {\n    const { namespace, image = '', tag } = imageOptionFormData.imageStreamTag.imageStream;\n    const name = tag ? `${image}:${tag}` : image;\n    return namespace === buildConfigNamespace\n      ? {\n          kind: 'ImageStreamTag',\n          name,\n        }\n      : {\n          kind: 'ImageStreamTag',\n          namespace,\n          name,\n        };\n  }\n  if (imageOptionFormData.type === 'imageStreamImage') {\n    const image = imageOptionFormData.imageStreamImage;\n    const namespace = image.includes('/')\n      ? image.substring(0, image.indexOf('/'))\n      : buildConfigNamespace;\n    const name = image.includes('/') ? image.substring(image.indexOf('/') + 1) : image;\n    return {\n      kind: 'ImageStreamImage',\n      namespace,\n      name,\n    };\n  }\n  if (imageOptionFormData.type === 'dockerImage') {\n    return {\n      kind: 'DockerImage',\n      name: imageOptionFormData.dockerImage,\n    };\n  }\n  return null;\n};\n\nconst convertFormDataImagesToBuildConfig = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  // Build from => Strategy\n  const from = convertImageOptionFormDataToImageReference(\n    values.formData.images.buildFrom,\n    buildConfig.metadata.namespace,\n  );\n\n  // The strategy object is automatically created in convertFormDataToBuildConfigSource\n  // if the source type is known. Fallback to Source strategy here if an image is selected\n  // without any information about the strategy type.\n  if (from && !buildConfig.spec.strategy?.type) {\n    buildConfig.spec.strategy = {\n      type: values.formData.images.strategyType || 'Source',\n      ...buildConfig.spec.strategy,\n    };\n  }\n\n  const strategyKey = `${buildConfig.spec.strategy?.type?.toLowerCase()}Strategy`;\n  if (from && !buildConfig.spec.strategy?.[strategyKey]) {\n    buildConfig.spec.strategy[strategyKey] = { from };\n  } else if (from) {\n    buildConfig.spec.strategy[strategyKey].from = from;\n  } else if (buildConfig.spec.strategy?.[strategyKey]) {\n    delete buildConfig.spec.strategy[strategyKey].from;\n  }\n\n  // Push to => Output\n  const to = convertImageOptionFormDataToImageReference(\n    values.formData.images.pushTo,\n    buildConfig.metadata.namespace,\n  );\n  if (to && !buildConfig.spec.output) {\n    buildConfig.spec.output = { to };\n  } else if (to) {\n    buildConfig.spec.output.to = to;\n  } else if (buildConfig.spec.output) {\n    delete buildConfig.spec.output.to;\n  }\n};\n\nconst convertFormDataEnvironmentVariablesToBuildConfig = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  const env = values.formData.environmentVariables;\n\n  // The strategy object is automatically created in convertFormDataToBuildConfigSource\n  // if the source type is known. Fallback to Source strategy here if some\n  // environment variables are defined.\n  if (env.length > 0 && !buildConfig.spec.strategy?.type) {\n    buildConfig.spec.strategy = {\n      type: values.formData.images.strategyType || 'Source',\n      ...buildConfig.spec.strategy,\n    };\n  }\n\n  const strategyKey = `${buildConfig.spec.strategy?.type?.toLowerCase()}Strategy`;\n  if (env.length > 0 && !buildConfig.spec.strategy?.[strategyKey]) {\n    buildConfig.spec.strategy[strategyKey] = { env };\n  } else if (env.length > 0) {\n    buildConfig.spec.strategy[strategyKey].env = env;\n  } else if (buildConfig.spec.strategy?.[strategyKey]) {\n    delete buildConfig.spec.strategy[strategyKey].env;\n  }\n};\n\nconst convertFormDataTriggersToBuildConfig = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  const triggers: BuildConfigTrigger[] = [];\n\n  if (values.formData.triggers?.configChange) {\n    triggers.push({ type: 'ConfigChange' });\n  }\n  if (values.formData.triggers?.imageChange) {\n    triggers.push({ type: 'ImageChange' });\n  }\n  if (values.formData.triggers?.otherTriggers) {\n    triggers.push(\n      ...values.formData.triggers.otherTriggers\n        .filter((trigger) => trigger.type && trigger.secret)\n        .map(\n          (trigger) =>\n            ({\n              type: trigger.type,\n              [trigger.type.toLowerCase()]: {\n                ...(trigger.data\n                  ? trigger.data.secretReference\n                    ? { secretReference: { name: trigger.secret } }\n                    : { secret: trigger.secret }\n                  : { secretReference: { name: trigger.secret } }),\n                ...(trigger.allowEnv ? { allowEnv: trigger.allowEnv } : {}),\n              },\n            } as BuildConfigTrigger),\n        ),\n    );\n  }\n\n  if (triggers.length > 0) {\n    buildConfig.spec.triggers = triggers;\n  } else {\n    delete buildConfig.spec.triggers;\n  }\n};\n\nconst convertFormDataSecretsToBuildConfig = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  const secrets = values.formData.secrets.map((secret) => ({\n    secret: { name: secret.secret },\n    destinationDir: secret.mountPoint,\n  }));\n\n  // The source object is automatically created in convertFormDataToBuildConfigSource\n  // if the source type is known. Fallback to Source source here if some secrets are defined.\n  if (secrets.length > 0 && !buildConfig.spec.source?.type) {\n    buildConfig.spec.source = {\n      type: 'Source',\n      ...buildConfig.spec.source,\n    };\n  }\n\n  if (secrets.length > 0) {\n    buildConfig.spec.source = {\n      ...buildConfig.spec.source,\n      secrets,\n    };\n  } else if (buildConfig.spec.source?.secrets) {\n    delete buildConfig.spec.source.secrets;\n  }\n};\n\nconst convertFormDataPolicyToBuildConfig = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  if (values.formData.policy.runPolicy) {\n    buildConfig.spec.runPolicy = values.formData.policy.runPolicy;\n  } else {\n    delete buildConfig.spec.runPolicy;\n  }\n};\n\nconst convertFormDataHooksToBuildConfig = (\n  values: BuildConfigFormikValues,\n  buildConfig: BuildConfig,\n) => {\n  if (values.formData.hooks.enabled) {\n    if (\n      values.formData.hooks.type === 'command' &&\n      values.formData.hooks.commands.some((command) => !!command)\n    ) {\n      buildConfig.spec.postCommit = {\n        command: values.formData.hooks.commands,\n        args: values.formData.hooks.arguments,\n      };\n    } else if (values.formData.hooks.type === 'shell') {\n      buildConfig.spec.postCommit = {\n        script: values.formData.hooks.shell,\n        args: values.formData.hooks.arguments,\n      };\n    } else if (\n      (values.formData.hooks.type === 'command' &&\n        values.formData.hooks.arguments?.some((argument) => !!argument)) ||\n      values.formData.hooks.type === 'onlyArgs'\n    ) {\n      buildConfig.spec.postCommit = {\n        args: values.formData.hooks.arguments,\n      };\n    } else {\n      delete buildConfig.spec.postCommit;\n    }\n  } else {\n    delete buildConfig.spec.postCommit;\n  }\n};\n\nexport const convertFormDataToBuildConfig = (\n  originBuildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n): BuildConfig => {\n  // Ensure general format\n  let buildConfig = _.cloneDeep(originBuildConfig);\n  if (!buildConfig || typeof buildConfig !== 'object') {\n    buildConfig = {\n      apiVersion: 'build.openshift.io/v1',\n      kind: 'BuildConfig',\n      metadata: {},\n      spec: {},\n    };\n  }\n  if (!buildConfig.apiVersion) buildConfig.apiVersion = 'build.openshift.io/v1';\n  if (!buildConfig.kind) buildConfig.kind = 'BuildConfig';\n  if (!buildConfig.metadata || typeof buildConfig.metadata !== 'object') buildConfig.metadata = {};\n  if (!buildConfig.spec || typeof buildConfig.spec !== 'object') buildConfig.spec = {};\n\n  // Convert all sections\n  convertFormDataNameToBuildConfig(values, buildConfig);\n  convertFormDataToBuildConfigSource(values, buildConfig);\n  convertFormDataImagesToBuildConfig(values, buildConfig);\n  convertFormDataEnvironmentVariablesToBuildConfig(values, buildConfig);\n  convertFormDataTriggersToBuildConfig(values, buildConfig);\n  convertFormDataSecretsToBuildConfig(values, buildConfig);\n  convertFormDataPolicyToBuildConfig(values, buildConfig);\n  convertFormDataHooksToBuildConfig(values, buildConfig);\n\n  return buildConfig;\n};\n\nexport const convertFormDataToYAML = (values: BuildConfigFormikValues): string => {\n  const parsedBuildConfig = safeYAMLToJS(values.yamlData);\n  const updatedBuildConfig = convertFormDataToBuildConfig(parsedBuildConfig, values);\n  return safeJSToYAML(updatedBuildConfig, '', { skipInvalid: true });\n};\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { StatusBox } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport EditBuildConfig from './EditBuildConfig';\nimport { BuildConfig, BuildConfigModel } from './types';\n\nconst BuildConfigFormPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { ns: namespace, name } = useParams();\n\n  const isNew = !name;\n  const [watchedBuildConfig, loaded, loadError] = useK8sWatchResource<BuildConfig>(\n    isNew\n      ? null\n      : {\n          kind: BuildConfigModel.kind,\n          name,\n          namespace,\n        },\n  );\n  const buildConfig: BuildConfig = isNew\n    ? {\n        apiVersion: 'build.openshift.io/v1',\n        kind: 'BuildConfig',\n        metadata: {\n          namespace,\n        },\n        spec: {},\n      }\n    : watchedBuildConfig;\n\n  const title = isNew ? t('devconsole~Create BuildConfig') : t('devconsole~Edit BuildConfig');\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <StatusBox loaded={loaded} loadError={loadError} label={title} data={buildConfig}>\n        <EditBuildConfig\n          heading={title}\n          namespace={namespace}\n          name={name}\n          buildConfig={buildConfig}\n        />\n      </StatusBox>\n    </>\n  );\n};\n\nexport default BuildConfigFormPage;\n","export { getInitialBuildConfigFormikValues } from './initial-data';\nexport { convertFormDataToBuildConfig, convertFormDataToYAML } from './convert-to-buildconfig';\nexport { convertBuildConfigToFormData } from './convert-to-form';\nexport { validationSchema } from './validation';\n","import { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { EnvironmentVariablesSectionFormData } from '../sections/EnvironmentVariablesSection';\nimport { HooksSectionFormData } from '../sections/HooksSection';\nimport { ImagesSectionFormData } from '../sections/ImagesSection';\nimport { NameSectionFormData } from '../sections/NameSection';\nimport { PolicySectionFormData } from '../sections/PolicySection';\nimport { SecretsSectionFormData } from '../sections/SecretsSection';\nimport { SourceSectionFormData } from '../sections/SourceSection';\nimport { TriggersSectionFormData } from '../sections/TriggersSection';\n\nexport { BuildStrategyType } from '@console/internal/components/build';\n\nexport type BuildConfigFormikValues = {\n  editorType: EditorType;\n  yamlData: string;\n  resourceVersion: string | undefined;\n  formReloadCount?: number;\n} & NameSectionFormData &\n  SourceSectionFormData &\n  ImagesSectionFormData &\n  EnvironmentVariablesSectionFormData &\n  TriggersSectionFormData &\n  SecretsSectionFormData &\n  PolicySectionFormData &\n  HooksSectionFormData;\n","import * as _ from 'lodash';\nimport { ImageOptionFormData } from '../sections/ImagesSection';\nimport { BuildConfig, ImageReference } from '../types';\nimport { getInitialBuildConfigFormikValues } from './initial-data';\nimport { BuildConfigFormikValues, BuildStrategyType } from './types';\n\nconst convertBuildConfigNameToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  values.formData.name = buildConfig.metadata.name || '';\n};\n\nconst convertBuildConfigSourceToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  // Always set the project name (namespace) so that the AdvancedGitOptions\n  // modal can create a secret in the right namespace.\n  values.formData.source.git.project.name = buildConfig.metadata.namespace;\n\n  if (buildConfig.spec.source?.type === 'Git') {\n    values.formData.source.type = 'git';\n    values.formData.source.git.git.url = buildConfig.spec.source.git?.uri || '';\n    values.formData.source.git.git.ref = buildConfig.spec.source.git?.ref || '';\n    values.formData.source.git.git.dir = buildConfig.spec.source.contextDir || '';\n    values.formData.source.git.git.secret = buildConfig.spec.source.sourceSecret?.name || '';\n    values.formData.source.git.build.strategy =\n      (buildConfig.spec.strategy?.type as BuildStrategyType) || BuildStrategyType.Source;\n  } else if (buildConfig.spec.source?.type === 'Dockerfile') {\n    values.formData.source.type = 'dockerfile';\n    values.formData.source.dockerfile = buildConfig.spec.source.dockerfile || '';\n  } else if (buildConfig.spec.source?.type === 'Binary') {\n    values.formData.source.type = 'binary';\n  } else {\n    values.formData.source.type = 'none';\n  }\n};\n\nconst convertImageReferenceToImageStreamFormData = (\n  imageReference: ImageReference,\n  imageOptionFormData: ImageOptionFormData,\n  buildConfigNamespace: string,\n) => {\n  if (imageReference?.kind === 'ImageStreamTag') {\n    const namespace = imageReference.namespace || buildConfigNamespace;\n    const { name = '' } = imageReference;\n    const image = name.includes(':') ? name.substring(0, name.indexOf(':')) : name;\n    const tag = name.includes(':') ? name.substring(name.indexOf(':') + 1) : null;\n    imageOptionFormData.type = 'imageStreamTag';\n    imageOptionFormData.imageStreamTag = {\n      fromImageStreamTag: true,\n      isSearchingForImage: false,\n      imageStream: {\n        namespace,\n        image,\n        tag,\n      },\n      project: {\n        name: namespace,\n      },\n      isi: {\n        name: '',\n        image: {},\n        tag: '',\n        status: { metadata: {}, status: '' },\n        ports: [],\n      },\n      image: {\n        name: '',\n        image: {},\n        tag: '',\n        status: { metadata: {}, status: '' },\n        ports: [],\n      },\n    };\n  } else if (imageReference?.kind === 'ImageStreamImage') {\n    const { namespace = '', name = '' } = imageReference;\n    imageOptionFormData.type = 'imageStreamImage';\n    imageOptionFormData.imageStreamImage = namespace ? `${namespace}/${name}` : name;\n  } else if (imageReference?.kind === 'DockerImage') {\n    imageOptionFormData.type = 'dockerImage';\n    imageOptionFormData.dockerImage = imageReference.name || '';\n  } else {\n    imageOptionFormData.type = 'none';\n  }\n};\n\nconst convertBuildConfigImagesToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  values.formData.images.strategyType = buildConfig.spec.strategy?.type as BuildStrategyType;\n\n  // Strategy => Build from\n  const strategyKey = `${buildConfig.spec.strategy?.type?.toLowerCase()}Strategy`;\n  const from = buildConfig.spec.strategy?.[strategyKey]?.from;\n  convertImageReferenceToImageStreamFormData(\n    from,\n    values.formData.images.buildFrom,\n    buildConfig.metadata.namespace,\n  );\n\n  // Output => Push to\n  const to = buildConfig.spec.output?.to;\n  convertImageReferenceToImageStreamFormData(\n    to,\n    values.formData.images.pushTo,\n    buildConfig.metadata.namespace,\n  );\n};\n\nconst convertBuildConfigEnvironmentVariablesToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  if (buildConfig.spec.strategy?.type === 'Source') {\n    const env = buildConfig.spec.strategy?.sourceStrategy?.env || [];\n    values.formData.environmentVariables = env;\n  } else if (buildConfig.spec.strategy?.type === 'Docker') {\n    const env = buildConfig.spec.strategy?.dockerStrategy?.env || [];\n    values.formData.environmentVariables = env;\n  }\n};\n\nconst convertBuildConfigTriggersToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  const triggers = buildConfig.spec.triggers || [];\n\n  values.formData.triggers.configChange = !!triggers.find(\n    (trigger) => trigger.type === 'ConfigChange',\n  );\n  values.formData.triggers.imageChange = !!triggers.find(\n    (trigger) => trigger.type === 'ImageChange',\n  );\n  values.formData.triggers.otherTriggers = triggers\n    .filter(\n      (trigger) =>\n        trigger.type &&\n        (trigger[trigger.type.toLowerCase()]?.secretReference ||\n          trigger[trigger.type.toLowerCase()]?.secret),\n    )\n    .map((trigger) => ({\n      type: trigger.type,\n      secret:\n        trigger[trigger.type.toLowerCase()].secretReference?.name ||\n        trigger[trigger.type.toLowerCase()].secret,\n      ...(trigger[trigger.type.toLowerCase()].allowEnv\n        ? { allowEnv: trigger[trigger.type.toLowerCase()].allowEnv }\n        : {}),\n      data: trigger[trigger.type.toLowerCase()],\n    }));\n};\n\nconst convertBuildConfigSecretsToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  values.formData.secrets =\n    buildConfig.spec.source?.secrets?.map((secret) => ({\n      secret: secret.secret.name,\n      mountPoint: secret.destinationDir,\n    })) || [];\n};\n\nconst convertBuildConfigPolicyToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  // Use null instead of undefined to match initial values\n  values.formData.policy.runPolicy = buildConfig.spec.runPolicy || null;\n};\n\nconst convertBuildConfigHooksToFormData = (\n  buildConfig: BuildConfig,\n  values: BuildConfigFormikValues,\n) => {\n  const commands = buildConfig.spec.postCommit?.command || [''];\n  const shell = buildConfig.spec.postCommit?.script || '';\n  const args = buildConfig.spec.postCommit?.args || [];\n\n  if (commands.length > 0 && commands[0]) {\n    values.formData.hooks.enabled = true;\n    values.formData.hooks.type = 'command';\n  } else if (shell) {\n    values.formData.hooks.enabled = true;\n    values.formData.hooks.type = 'shell';\n  } else if (args.length > 0) {\n    values.formData.hooks.enabled = true;\n    values.formData.hooks.type = 'onlyArgs';\n  } else {\n    values.formData.hooks.enabled = false;\n  }\n\n  values.formData.hooks.commands = commands;\n  values.formData.hooks.shell = shell;\n  values.formData.hooks.arguments = args;\n};\n\nexport const convertBuildConfigToFormData = (\n  buildConfig: BuildConfig,\n  originValues = getInitialBuildConfigFormikValues(),\n): BuildConfigFormikValues => {\n  const values = _.cloneDeep(originValues);\n\n  const safeBuildConfig: BuildConfig = {\n    apiVersion: 'build.openshift.io/v1',\n    kind: 'BuildConfig',\n    metadata:\n      buildConfig?.metadata && typeof buildConfig.metadata === 'object' ? buildConfig.metadata : {},\n    spec: buildConfig?.spec && typeof buildConfig.spec === 'object' ? buildConfig.spec : {},\n  };\n\n  // Convert all sections\n  convertBuildConfigNameToFormData(safeBuildConfig, values);\n  convertBuildConfigSourceToFormData(safeBuildConfig, values);\n  convertBuildConfigImagesToFormData(safeBuildConfig, values);\n  convertBuildConfigEnvironmentVariablesToFormData(safeBuildConfig, values);\n  convertBuildConfigTriggersToFormData(safeBuildConfig, values);\n  convertBuildConfigSecretsToFormData(safeBuildConfig, values);\n  convertBuildConfigPolicyToFormData(safeBuildConfig, values);\n  convertBuildConfigHooksToFormData(safeBuildConfig, values);\n\n  return values;\n};\n","import * as yup from 'yup';\nimport i18n from '@console/internal/i18n';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { BuildConfigFormikValues } from './types';\n\nconst nameSchema = () => yup.string().required(i18n.t('devconsole~Required'));\n\nconst sourceSchema = () =>\n  yup\n    .object({\n      type: yup\n        .string()\n        .required(i18n.t('devconsole~Required'))\n        .oneOf(['git', 'dockerfile', 'binary']),\n      git: yup.object().when('type', {\n        is: 'git',\n        then: yup.object({\n          git: yup.object({\n            url: yup.string().required(i18n.t('devconsole~Required')),\n            ref: yup.string(),\n            dir: yup.string(),\n          }),\n        }),\n      }),\n      dockerfile: yup.string().when('type', {\n        is: 'dockerfile',\n        then: yup.string(),\n      }),\n    })\n    .required(i18n.t('devconsole~Required'));\n\nconst imageSchema = (allowedTypes: string[]) =>\n  yup.object({\n    type: yup.string().required(i18n.t('devconsole~Required')).oneOf(allowedTypes),\n    imageStreamTag: yup.object().when('type', {\n      is: 'imageStreamTag',\n      then: yup.object({\n        imageStream: yup.object({\n          namespace: yup.string().required(i18n.t('devconsole~Required')),\n          image: yup.string().required(i18n.t('devconsole~Required')),\n          tag: yup.string().required(i18n.t('devconsole~Required')),\n        }),\n      }),\n    }),\n    imageStreamImage: yup.string().when('type', {\n      is: 'imageStreamImage',\n      then: yup.string().required(i18n.t('devconsole~Required')),\n    }),\n    dockerImage: yup.string().when('type', {\n      is: 'dockerImage',\n      then: yup.string().required(i18n.t('devconsole~Required')),\n    }),\n  });\n\nconst imagesSchema = () =>\n  yup.object({\n    buildFrom: imageSchema(['imageStreamTag', 'imageStreamImage', 'dockerImage']),\n    pushTo: imageSchema(['none', 'imageStreamTag', 'imageStreamImage', 'dockerImage']),\n  });\n\nconst environmentVariablesSchema = () => yup.array();\n\nconst triggersSchema = () => yup.object();\n\nconst secretsSchema = () => yup.array();\n\nconst policySchema = () => yup.object();\n\nconst hooksSchema = () => yup.object();\n\nconst formDataSchema = () =>\n  yup.object({\n    name: nameSchema(),\n    source: sourceSchema(),\n    images: imagesSchema(),\n    environmentVariables: environmentVariablesSchema(),\n    triggers: triggersSchema(),\n    secrets: secretsSchema(),\n    policy: policySchema(),\n    hooks: hooksSchema(),\n  });\n\nexport const validationSchema = () =>\n  yup.mixed().test({\n    test(values: BuildConfigFormikValues) {\n      const formYamlDefinition = yup.object({\n        editorType: yup\n          .string()\n          .oneOf(Object.values(EditorType))\n          .required(i18n.t('devconsole~Required')),\n        formData: yup.mixed().when('editorType', {\n          is: EditorType.Form,\n          then: formDataSchema(),\n        }),\n        yamlData: yup.mixed().when('editorType', {\n          is: EditorType.YAML,\n          then: yup.string().required(i18n.t('devconsole~Required')),\n        }),\n      });\n\n      return formYamlDefinition.validate(values, { abortEarly: false });\n    },\n  });\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { history, resourcePathFromModel } from '@console/internal/components/utils';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML, safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport BuildConfigForm from './BuildConfigForm';\nimport {\n  validationSchema,\n  convertBuildConfigToFormData,\n  convertFormDataToBuildConfig,\n} from './form-utils';\nimport { BuildConfigFormikValues } from './form-utils/types';\nimport { BuildConfig, BuildConfigModel } from './types';\n\nexport interface EditBuildConfigProps {\n  heading: string;\n  namespace: string;\n  name: string;\n  buildConfig: BuildConfig;\n}\n\nconst EditBuildConfig: React.FC<EditBuildConfigProps> = ({\n  heading,\n  namespace,\n  name,\n  buildConfig: watchedBuildConfig,\n}) => {\n  const { t } = useTranslation();\n\n  const [initialValues] = React.useState<BuildConfigFormikValues>(() => {\n    const values = convertBuildConfigToFormData(watchedBuildConfig);\n    values.yamlData = safeJSToYAML(watchedBuildConfig, '', { skipInvalid: true });\n    values.resourceVersion = watchedBuildConfig?.metadata?.resourceVersion;\n    values.formReloadCount = 0;\n    return values;\n  });\n\n  const handleSubmit = async (\n    values: BuildConfigFormikValues,\n    helpers: FormikHelpers<BuildConfigFormikValues>,\n  ): Promise<void> => {\n    let parsedBuildConfig: BuildConfig;\n    try {\n      // Use YAML also as base when submitting the form\n      parsedBuildConfig = safeYAMLToJS(values.yamlData);\n      if (!parsedBuildConfig?.metadata?.namespace) {\n        parsedBuildConfig.metadata.namespace = namespace;\n      }\n    } catch (err) {\n      helpers.setStatus({\n        submitSuccess: '',\n        submitError: t('devconsole~Invalid YAML - {{err}}', { err }),\n      });\n      return;\n    }\n\n    const changedBuildConfig =\n      values.editorType === EditorType.Form\n        ? convertFormDataToBuildConfig(parsedBuildConfig, values)\n        : parsedBuildConfig;\n\n    try {\n      const isNew = !name;\n      const updatedBuildConfig: BuildConfig = isNew\n        ? await k8sCreate<BuildConfig>(BuildConfigModel, changedBuildConfig)\n        : await k8sUpdate<BuildConfig>(BuildConfigModel, changedBuildConfig, namespace, name);\n\n      history.push(\n        resourcePathFromModel(\n          BuildConfigModel,\n          updatedBuildConfig.metadata.name,\n          updatedBuildConfig.metadata.namespace,\n        ),\n      );\n    } catch (err) {\n      helpers.setStatus({ submitSuccess: '', submitError: err.message });\n    }\n  };\n\n  const handleCancel = () => history.goBack();\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={validationSchema()}\n      enableReinitialize\n    >\n      {(formikProps) => {\n        return (\n          <BuildConfigForm\n            {...formikProps}\n            heading={heading}\n            buildConfig={watchedBuildConfig}\n            handleCancel={handleCancel}\n          />\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditBuildConfig;\n","import * as React from 'react';\nimport { FormikProps } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FlexForm,\n  FormBody,\n  FormFooter,\n  FormHeader,\n  SyncedEditorField,\n  useActiveNamespace,\n  CodeEditorField,\n} from '@console/shared/src';\nimport { downloadYaml } from '@console/shared/src/components/editor/yaml-download-utils';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport BuildConfigFormEditor from './BuildConfigFormEditor';\nimport { convertBuildConfigToFormData, convertFormDataToYAML } from './form-utils';\nimport { BuildConfigFormikValues } from './form-utils/types';\nimport { BuildConfig, BuildConfigModel } from './types';\n\nconst BuildConfigForm: React.FC<\n  FormikProps<BuildConfigFormikValues> & {\n    heading: string;\n    buildConfig: BuildConfig;\n    handleCancel: () => void;\n  }\n> = ({\n  heading,\n  buildConfig: watchedBuildConfig,\n  status,\n  isSubmitting,\n  dirty,\n  handleSubmit,\n  handleCancel,\n  setFieldValue,\n  setStatus,\n  setErrors,\n  errors,\n  values,\n}) => {\n  const { t } = useTranslation();\n  const [activeNamespace] = useActiveNamespace();\n\n  const isNew = !watchedBuildConfig?.metadata?.name;\n  const isStale =\n    !isNew && watchedBuildConfig?.metadata?.resourceVersion !== values.resourceVersion;\n\n  const namespace = watchedBuildConfig?.metadata?.namespace || activeNamespace;\n\n  const formEditor = <BuildConfigFormEditor namespace={namespace} />;\n  const yamlEditor = (\n    <CodeEditorField\n      name=\"yamlData\"\n      model={BuildConfigModel}\n      showSamples={isNew}\n      onSave={handleSubmit}\n    />\n  );\n\n  const LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY = 'devconsole.buildConfigForm.editor.lastView';\n\n  const sanitizeToForm = (yamlbuildConfig: BuildConfig) =>\n    convertBuildConfigToFormData(yamlbuildConfig, values).formData;\n\n  const sanitizeToYaml = () => convertFormDataToYAML(values);\n\n  const onReload = React.useCallback(() => {\n    setStatus({ submitSuccess: '', submitError: '' });\n    setErrors({});\n    if (values.editorType === EditorType.Form) {\n      setFieldValue(\n        'formData',\n        convertBuildConfigToFormData(watchedBuildConfig, values).formData,\n        false,\n      );\n    }\n    setFieldValue('yamlData', safeJSToYAML(watchedBuildConfig, '', { skipInvalid: true }), false);\n    setFieldValue('resourceVersion', watchedBuildConfig?.metadata?.resourceVersion, true);\n    setFieldValue('formReloadCount', values.formReloadCount + 1);\n  }, [setErrors, setFieldValue, setStatus, values, watchedBuildConfig]);\n\n  return (\n    <FlexForm onSubmit={handleSubmit}>\n      <FormBody flexLayout>\n        <FormHeader title={heading} />\n        <SyncedEditorField\n          name=\"editorType\"\n          formContext={{\n            name: 'formData',\n            editor: formEditor,\n            sanitizeTo: sanitizeToForm,\n          }}\n          yamlContext={{\n            name: 'yamlData',\n            editor: yamlEditor,\n            sanitizeTo: sanitizeToYaml,\n          }}\n          lastViewUserSettingKey={LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY}\n          noMargin\n        />\n      </FormBody>\n      <FormFooter\n        handleReset={isNew ? null : onReload}\n        errorMessage={status?.submitError}\n        successMessage={status?.submitSuccess}\n        showAlert={isStale}\n        infoTitle={t('devconsole~This object has been updated.')}\n        infoMessage={t('devconsole~Click reload to see the new version.')}\n        isSubmitting={isSubmitting}\n        submitLabel={isNew ? t('devconsole~Create') : t('devconsole~Save')}\n        disableSubmit={\n          (values.editorType === EditorType.YAML ? !dirty : !dirty || !_.isEmpty(errors)) ||\n          isSubmitting\n        }\n        handleCancel={handleCancel}\n        handleDownload={\n          values.editorType === EditorType.YAML && (() => downloadYaml(values.yamlData))\n        }\n        sticky\n      />\n    </FlexForm>\n  );\n};\n\nexport default BuildConfigForm;\n","import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ProgressiveList, ProgressiveListItem } from '@console/shared/src';\nimport SwitchToYAMLAlert from '@console/shared/src/components/alerts/SwitchToYAMLAlert';\nimport FormSection from '../import/section/FormSection';\nimport EnvironmentVariablesSection from './sections/EnvironmentVariablesSection';\nimport HooksSection from './sections/HooksSection';\nimport ImagesSection from './sections/ImagesSection';\nimport NameSection from './sections/NameSection';\nimport PolicySection from './sections/PolicySection';\nimport SecretsSection from './sections/SecretsSection';\nimport SourceSection from './sections/SourceSection';\nimport TriggersSection from './sections/TriggersSection';\n\ntype BuildConfigFormEditorProps = {\n  namespace: string;\n};\n\nconst Footer = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <Trans\n      t={t}\n      ns=\"devconsole\"\n      defaults=\"Click on the names to access advanced options for <0></0>.\"\n      components={[children]}\n    />\n  );\n};\n\nconst List: React.FC<BuildConfigFormEditorProps> = ({ namespace }) => {\n  const { t } = useTranslation();\n\n  const [visibleItems, setVisibleItems] = React.useState<string[]>([]);\n  const handleVisibleItemChange = (item: string) => {\n    setVisibleItems([...visibleItems, item]);\n  };\n\n  return (\n    <ProgressiveList\n      visibleItems={visibleItems}\n      onVisibleItemChange={handleVisibleItemChange}\n      Footer={Footer}\n    >\n      <ProgressiveListItem name={t('devconsole~Triggers')}>\n        <TriggersSection namespace={namespace} />\n      </ProgressiveListItem>\n      <ProgressiveListItem name={t('devconsole~Secrets')}>\n        <SecretsSection namespace={namespace} />\n      </ProgressiveListItem>\n      <ProgressiveListItem name={t('devconsole~Run Policy')}>\n        <PolicySection />\n      </ProgressiveListItem>\n      <ProgressiveListItem name={t('devconsole~Hooks')}>\n        <HooksSection />\n      </ProgressiveListItem>\n    </ProgressiveList>\n  );\n};\n\nconst BuildConfigFormEditor: React.FC<BuildConfigFormEditorProps> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const [showYAMLAlert, setShowYAMLAlert] = React.useState<boolean>(true);\n\n  return (\n    <>\n      {showYAMLAlert && <SwitchToYAMLAlert onClose={() => setShowYAMLAlert(false)} />}\n\n      <NameSection />\n      <SourceSection />\n      <ImagesSection />\n      <EnvironmentVariablesSection namespace={namespace} />\n\n      <FormSection\n        title={t('devconsole~Advanced options')}\n        dataTest=\"section advanced-options\"\n        fullWidth\n      >\n        <div>\n          <List namespace={namespace} />\n        </div>\n      </FormSection>\n    </>\n  );\n};\n\nexport default BuildConfigFormEditor;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxField, DropdownField, TextColumnField } from '@console/shared';\nimport FormSection from '../../import/section/FormSection';\nimport EditorField from './EditorField';\n\ntype HookFormData = {\n  enabled: boolean;\n  type: 'command' | 'shell' | 'onlyArgs';\n  commands: string[];\n  shell: string;\n  arguments: string[];\n};\n\nexport type HooksSectionFormData = { formData: { hooks: HookFormData } };\n\nconst HooksSection: React.FC<{}> = () => {\n  const { t } = useTranslation();\n\n  const [\n    {\n      value: { enabled, type, commands },\n    },\n  ] = useField<HookFormData>('formData.hooks');\n\n  const hookTypeItems: Record<string, string> = {\n    command: t('devconsole~Command'),\n    shell: t('devconsole~Shell script'),\n    onlyArgs: t('devconsole~Arguments to default image entry point'),\n  };\n\n  const lineHeight = 18;\n  return (\n    <FormSection title={t('devconsole~Hooks')} dataTest=\"section hooks\">\n      <CheckboxField\n        name=\"formData.hooks.enabled\"\n        label={t('devconsole~Run build hooks after image is built')}\n        helpText={t(\n          'devconsole~Build hooks allow you to run commands at the end of the build to verify the image.',\n        )}\n      />\n\n      {enabled ? (\n        <DropdownField\n          name=\"formData.hooks.type\"\n          label={t('devconsole~Hook type')}\n          items={hookTypeItems}\n          fullWidth\n          dataTest=\"type\"\n        />\n      ) : null}\n\n      {enabled && type === 'shell' ? (\n        <EditorField\n          name=\"formData.hooks.shell\"\n          label={t('devconsole~Script')}\n          height={15 * lineHeight}\n          theme=\"console\"\n          options={{\n            lineHeight,\n            readOnly: false,\n            minimap: { enabled: false },\n            scrollBeyondLastLine: false,\n          }}\n        />\n      ) : null}\n\n      {enabled && type === 'command' ? (\n        <TextColumnField\n          name=\"formData.hooks.commands\"\n          label={t('devconsole~Command')}\n          addLabel={t('devconsole~Add command')}\n          placeholder={t('devconsole~Command')}\n          helpText={t(\n            'devconsole~Enter the command to run inside the container. The command is considered successful if its exit code is 0.',\n          )}\n          disableDeleteRow={commands?.length === 1}\n        />\n      ) : null}\n\n      {enabled && (type === 'shell' || type === 'command' || type === 'onlyArgs') ? (\n        <TextColumnField\n          name=\"formData.hooks.arguments\"\n          label={t('devconsole~Arguments')}\n          addLabel={t('devconsole~Add argument')}\n          placeholder={t('devconsole~Argument')}\n          helpText={t('devconsole~Enter the arguments that will be appended to the command.')}\n        />\n      ) : null}\n    </FormSection>\n  );\n};\n\nexport default HooksSection;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { DropdownField, InputField } from '@console/shared';\nimport { TriggersAndImageStreamFormData } from '../../deployments/utils/deployment-types';\nimport ImageStream from '../../import/image-search/ImageStream';\nimport FormSection from '../../import/section/FormSection';\nimport { BuildStrategyType } from '../types';\n\nexport type ImageOptionType = 'none' | 'imageStreamTag' | 'imageStreamImage' | 'dockerImage';\n\nexport type ImageOptionFormData = {\n  type: ImageOptionType;\n  imageStreamTag: TriggersAndImageStreamFormData;\n  imageStreamImage: string;\n  dockerImage: string;\n};\n\nexport type ImagesSectionFormData = {\n  formData: {\n    images: {\n      strategyType?: BuildStrategyType;\n      buildFrom: ImageOptionFormData;\n      pushTo: ImageOptionFormData;\n    };\n  };\n};\n\nconst ImageOption: React.FC<{\n  fieldPrefix: string;\n  label: string;\n  fallbackTitle: string;\n  items: Record<string, string>;\n  dataTest: string;\n  required?: boolean;\n}> = ({ fieldPrefix, label, fallbackTitle, items, dataTest, required }) => {\n  const { t } = useTranslation();\n  const [{ value: type }] = useField<ImageOptionType>(`${fieldPrefix}.type`);\n\n  return (\n    <FormSection data-test={dataTest}>\n      <DropdownField\n        name={`${fieldPrefix}.type`}\n        label={label}\n        items={items}\n        title={items[type] || fallbackTitle}\n        dataTest={`${dataTest} type`}\n        required={required}\n      />\n\n      {type === 'imageStreamTag' ? (\n        <ImageStream\n          label={t('devconsole~Image stream tag')}\n          formContextField={`${fieldPrefix}.imageStreamTag`}\n          dataTest={`${dataTest} image-stream-tag`}\n          required\n        />\n      ) : null}\n\n      {type === 'imageStreamImage' ? (\n        <InputField\n          label={t('devconsole~Image stream image')}\n          name={`${fieldPrefix}.imageStreamImage`}\n          type={TextInputTypes.text}\n          data-test={`${dataTest} image-stream-image`}\n          required\n        />\n      ) : null}\n\n      {type === 'dockerImage' ? (\n        <InputField\n          label={t('devconsole~Image registry')}\n          name={`${fieldPrefix}.dockerImage`}\n          type={TextInputTypes.text}\n          data-test={`${dataTest} docker-image`}\n          required\n        />\n      ) : null}\n    </FormSection>\n  );\n};\n\nconst ImagesSection: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  const [{ value: strategyType }] = useField<BuildStrategyType>('formData.images.strategyType');\n\n  const buildFromItems: Record<string, string> =\n    strategyType === BuildStrategyType.Docker\n      ? {\n          none: t('devconsole~None'),\n          imageStreamTag: t('devconsole~Image Stream Tag'),\n          imageStreamImage: t('devconsole~Image Stream Image'),\n          dockerImage: t('devconsole~External container image'),\n        }\n      : {\n          imageStreamTag: t('devconsole~Image Stream Tag'),\n          imageStreamImage: t('devconsole~Image Stream Image'),\n          dockerImage: t('devconsole~External container image'),\n        };\n\n  const pushToItems = {\n    none: t('devconsole~None'),\n    imageStreamTag: t('devconsole~Image Stream Tag'),\n    dockerImage: t('devconsole~External container image'),\n  };\n\n  return (\n    <FormSection title={t('devconsole~Images')} dataTest=\"section images\">\n      <ImageOption\n        fieldPrefix=\"formData.images.buildFrom\"\n        label={t('devconsole~Build from')}\n        fallbackTitle={t('devconsole~Please select')}\n        items={buildFromItems}\n        dataTest=\"build-from\"\n        required\n      />\n      <ImageOption\n        fieldPrefix=\"formData.images.pushTo\"\n        label={t('devconsole~Push to')}\n        fallbackTitle={t('devconsole~Please select')}\n        items={pushToItems}\n        dataTest=\"push-to\"\n      />\n    </FormSection>\n  );\n};\n\nexport default ImagesSection;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { DropdownField } from '@console/shared';\nimport FormSection from '../../import/section/FormSection';\nimport { BuildConfigRunPolicy } from '../types';\n\nexport type PolicySectionFormData = {\n  formData: {\n    policy: {\n      runPolicy?: BuildConfigRunPolicy;\n    };\n  };\n};\n\nconst PolicySection: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  const [{ value: runPolicy }] = useField<BuildConfigRunPolicy>('formData.policy.runPolicy');\n\n  const typeItems: Record<BuildConfigRunPolicy, string> = {\n    [BuildConfigRunPolicy.Serial]: t('devconsole~Serial'),\n    [BuildConfigRunPolicy.Parallel]: t('devconsole~Parallel'),\n    [BuildConfigRunPolicy.SerialLatestOnly]: t('devconsole~Serial latest only'),\n  };\n\n  const helpText: Record<BuildConfigRunPolicy, string> = {\n    [BuildConfigRunPolicy.Serial]: t(\n      'devconsole~Builds triggered from this Build Configuration will run one at the time, in the order they have been triggered.',\n    ),\n    [BuildConfigRunPolicy.Parallel]: t(\n      'devconsole~Builds triggered from this Build Configuration will run all at the same time. The order in which they will finish is not guaranteed.',\n    ),\n    [BuildConfigRunPolicy.SerialLatestOnly]: t(\n      'devconsole~Builds triggered from this Build Configuration will run one at the time. When a currently running build completes, the next build that will run is the latest build created. Other queued builds will be cancelled.',\n    ),\n  };\n\n  return (\n    <FormSection\n      title={t('devconsole~Policy')}\n      subTitle={t(\n        'devconsole~The build run policy describes the order in which the builds created from the build configuration should run.',\n      )}\n      dataTest=\"section policy\"\n    >\n      <DropdownField\n        name=\"formData.policy.runPolicy\"\n        label={t('devconsole~Run policy')}\n        title={typeItems[runPolicy || BuildConfigRunPolicy.Serial]}\n        items={typeItems}\n        helpText={helpText[runPolicy || BuildConfigRunPolicy.Serial]}\n        dataTest=\"dropdown run-policy\"\n      />\n    </FormSection>\n  );\n};\n\nexport default PolicySection;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport * as fuzzy from 'fuzzysearch';\nimport { useTranslation } from 'react-i18next';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { SecretModel } from '@console/internal/models';\nimport { InputField, MultiColumnField, ResourceDropdownField } from '@console/shared';\nimport FormSection from '../../import/section/FormSection';\n\nexport type SecretsSectionFormData = {\n  formData: {\n    secrets: {\n      secret: string;\n      mountPoint: string;\n    }[];\n  };\n};\n\nconst SecretsSection: React.FC<{ namespace: string }> = ({ namespace }) => {\n  const { t } = useTranslation();\n\n  const autocompleteFilter = (text: string, item: any): boolean => fuzzy(text, item?.props?.name);\n  const resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: SecretModel.kind,\n      prop: SecretModel.id,\n      namespace,\n    },\n  ];\n\n  const mountPointLabel = t('devconsole~Mount point');\n\n  return (\n    <FormSection title={t('devconsole~Secrets')} dataTest=\"section secrets\">\n      <MultiColumnField\n        name=\"formData.secrets\"\n        addLabel={t('devconsole~Add secret')}\n        headers={[t('devconsole~Secret'), mountPointLabel]}\n        emptyValues={{}}\n      >\n        <ResourceDropdownField\n          name=\"secret\"\n          resources={resources}\n          dataSelector={['metadata', 'name']}\n          placeholder={t('devconsole~Select a secret')}\n          autocompleteFilter={autocompleteFilter}\n          fullWidth\n          showBadge\n        />\n        <InputField name=\"mountPoint\" type={TextInputTypes.text} aria-label={mountPointLabel} />\n      </MultiColumnField>\n    </FormSection>\n  );\n};\n\nexport default SecretsSection;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { DropdownField } from '@console/shared';\nimport GitSection, { GitSectionFormData } from '../../import/git/GitSection';\nimport FormSection from '../../import/section/FormSection';\nimport EditorField from './EditorField';\n\ntype Type = 'none' | 'git' | 'dockerfile' | 'binary';\n\nexport type SourceSectionFormData = {\n  formData: {\n    source: {\n      type: Type;\n      git: GitSectionFormData;\n      dockerfile: string;\n    };\n  };\n};\n\nconst SourceSection: React.FC = () => {\n  const { t } = useTranslation();\n\n  const [, meta] = useField<string>('formData.name');\n  const isNew = !meta.initialValue;\n\n  const [{ value: type }] = useField<Type>('formData.source.type');\n\n  const typeItems: Record<string, string> = {\n    git: t('devconsole~Git'),\n    dockerfile: t('devconsole~Dockerfile'),\n    binary: t('devconsole~Binary'),\n  };\n\n  const lineHeight = 18;\n  const showLines = 10; // Math.max(3, Math.min(15, dockerfile?.split('/n')?.length));\n  const height = lineHeight * showLines;\n\n  return (\n    <FormSection title={t('devconsole~Source')} dataTest=\"section source\">\n      {isNew || (type !== 'git' && type !== 'dockerfile' && type !== 'binary') ? (\n        <DropdownField\n          name=\"formData.source.type\"\n          label={t('devconsole~Source type')}\n          title={t('devconsole~Please select your source type')}\n          items={typeItems}\n          helpText={t('devconsole~Source could be a git repository or Dockerfile')}\n          required\n          fullWidth\n        />\n      ) : null}\n\n      {type === 'git' ? <GitSection title=\"\" formContextField=\"formData.source.git\" /> : null}\n      {type === 'dockerfile' ? (\n        <EditorField\n          name=\"formData.source.dockerfile\"\n          label={t('devconsole~Dockerfile')}\n          height={height}\n          language=\"dockerfile\"\n          theme=\"console\"\n          options={{\n            lineHeight,\n            readOnly: false,\n            minimap: { enabled: false },\n            scrollBeyondLastLine: false,\n          }}\n        />\n      ) : null}\n\n      {type === 'binary' ? (\n        <div>{t('devconsole~There are no editable source types for this build config.')}</div>\n      ) : null}\n    </FormSection>\n  );\n};\n\nexport default SourceSection;\n","import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { useField } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport { useTranslation } from 'react-i18next';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { SecretModel } from '@console/internal/models';\nimport {\n  DropdownField,\n  MultiColumnField,\n  ResourceDropdownField,\n  CheckboxField,\n} from '@console/shared';\nimport FormSection from '../../import/section/FormSection';\nimport { ImageOptionType } from './ImagesSection';\n\nexport type TriggersSectionFormData = {\n  formData: {\n    triggers: {\n      configChange: boolean;\n      imageChange: boolean;\n      otherTriggers: {\n        type: string;\n        secret: string;\n        allowEnv?: boolean;\n        data?: { [key: string]: any };\n      }[];\n    };\n  };\n};\n\nconst TriggersSection: React.FC<{ namespace: string }> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const [{ value: buildFromType }] = useField<ImageOptionType>('formData.images.buildFrom.type');\n\n  // Keys must match the triggers type\n  const typeItems: Record<string, string> = {\n    Generic: t('devconsole~Generic'),\n    GitHub: t('devconsole~GitHub'),\n    GitLab: t('devconsole~GitLab'),\n    Bitbucket: t('devconsole~BitBucket'),\n  };\n\n  const autocompleteFilter = (text: string, item: any): boolean => fuzzy(text, item?.props?.name);\n  const resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: SecretModel.kind,\n      prop: SecretModel.id,\n      namespace,\n    },\n  ];\n\n  return (\n    <FormSection title={t('devconsole~Triggers')} dataTest=\"section triggers\">\n      <FormGroup fieldId=\"configChange\" label={t('devconsole~Config change')}>\n        <CheckboxField\n          name=\"formData.triggers.configChange\"\n          label={t('devconsole~Automatically build a new image when config changes')}\n          data-test=\"config-change checkbox\"\n        />\n      </FormGroup>\n\n      {buildFromType !== 'none' ? (\n        <FormGroup fieldId=\"imageChange\" label={t('devconsole~Image change')}>\n          <CheckboxField\n            name=\"formData.triggers.imageChange\"\n            label={t('devconsole~Automatically build a new image when image changes')}\n            data-test=\"image-change checkbox\"\n          />\n        </FormGroup>\n      ) : null}\n\n      <MultiColumnField\n        name=\"formData.triggers.otherTriggers\"\n        addLabel={t('devconsole~Add trigger')}\n        headers={[t('devconsole~Type'), t('devconsole~Secret')]}\n        emptyValues={{ type: 'generic' }}\n      >\n        <DropdownField name=\"type\" title={t('devconsole~Select')} items={typeItems} fullWidth />\n        <ResourceDropdownField\n          name=\"secret\"\n          resources={resources}\n          dataSelector={['metadata', 'name']}\n          placeholder={t('devconsole~Select a secret')}\n          autocompleteFilter={autocompleteFilter}\n          fullWidth\n          showBadge\n        />\n      </MultiColumnField>\n    </FormSection>\n  );\n};\n\nexport default TriggersSection;\n"],"sourceRoot":""}