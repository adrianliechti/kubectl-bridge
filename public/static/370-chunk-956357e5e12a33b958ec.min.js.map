{"version":3,"sources":["webpack:///./public/components/storage/attach-pvc-storage.tsx","webpack:///./public/components/container-selector.tsx","webpack:///./public/components/utils/pvc-dropdown.tsx"],"names":["AttachStorageForm","props","obj","setObj","inProgress","setInProgress","useContainerSelector","setUseContainerSelector","claimName","setClaimName","volumeName","setVolumeName","mountPath","setMountPath","devicePath","setDevicePath","subPath","setSubPath","mountAsReadOnly","setMountAsReadOnly","selectedContainers","setSelectedContainers","volumeAlreadyMounted","setVolumeAlreadyMounted","error","setError","showCreatePVC","setShowCreatePVC","claimVolumeMode","setClaimVolumeMode","newPVCObj","setNewPVCObj","selectedPVC","setSelectedPVC","kindObj","resourceName","namespace","t","navigate","then","newClaimName","volumes","volume","persistentVolumeClaim","newVolumeName","name","newVolumeAlreadyMounted","trim","length","spec","volumeMode","kind","handleShowCreatePVCChange","event","currentTarget","value","handleSelectContainers","isContainerSelected","includes","validateMountPaths","path","podTemplate","err","template","reduce","acc","container","mountPaths","volumeMounts","concat","validateDevicePath","containers","devicePaths","volumeDevices","getVolumePatches","pvcName","patches","device","patch","i","push","op","getVolumeDevicePatches","mount","readOnly","getVolumeMountPatches","existingVolumes","volumePatch","className","onSubmit","preventDefault","claim","metadata","Promise","resolve","resource","message","title","key","onChange","checked","kindLabel","id","dataTest","selectedKey","htmlFor","type","required","label","ns","onClick","variant","isInline","selected","checkedItems","errorMessage","isDisabled","AttachStorage","kindsInFlight","params","ContainerSelector","map","image","isChecked","PVCDropdown","desc","resources","selectedKeyKind","placeholder"],"mappings":"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","file":"370-chunk-956357e5e12a33b958ec.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { useParams, useNavigate } from 'react-router-dom-v5-compat';\nimport {\n  ContainerSpec,\n  k8sCreate,\n  k8sGet,\n  K8sKind,\n  k8sPatch,\n  referenceFor,\n} from '../../module/k8s';\nimport { ButtonBar, LoadingBox, resourceObjPath } from '../utils';\nimport { Checkbox } from '../checkbox';\nimport { RadioInput } from '../radio';\nimport { CreatePVCForm } from './create-pvc';\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { ContainerSelector } from '../container-selector';\nimport { PVCDropdown } from '../utils/pvc-dropdown';\nimport { PodTemplate, PersistentVolumeClaimKind, Patch } from '../../module/k8s/types';\n\nexport const AttachStorageForm: React.FC<AttachStorageFormProps> = (props) => {\n  const [obj, setObj] = React.useState(null);\n  const [inProgress, setInProgress] = React.useState(false);\n  const [useContainerSelector, setUseContainerSelector] = React.useState(false);\n  const [claimName, setClaimName] = React.useState('');\n  const [volumeName, setVolumeName] = React.useState('');\n  const [mountPath, setMountPath] = React.useState('');\n  const [devicePath, setDevicePath] = React.useState('');\n  const [subPath, setSubPath] = React.useState('');\n  const [mountAsReadOnly, setMountAsReadOnly] = React.useState(false);\n  const [selectedContainers, setSelectedContainers] = React.useState([]);\n  const [volumeAlreadyMounted, setVolumeAlreadyMounted] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const [showCreatePVC, setShowCreatePVC] = React.useState('existing');\n  const [claimVolumeMode, setClaimVolumeMode] = React.useState('');\n  const [newPVCObj, setNewPVCObj] = React.useState(null);\n  const [selectedPVC, setSelectedPVC] = React.useState<PersistentVolumeClaimKind>(null);\n\n  const { kindObj, resourceName, namespace } = props;\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const supportedKinds = [\n    'Deployment',\n    'DeploymentConfig',\n    'ReplicaSet',\n    'ReplicationController',\n    'StatefulSet',\n    'DaemonSet',\n  ];\n\n  React.useEffect(() => {\n    // Get the current resource so we can add to its definition\n    k8sGet(kindObj, resourceName, namespace).then(setObj);\n  }, [kindObj, resourceName, namespace]);\n\n  React.useEffect(() => {\n    // If the PVC or its name changes, check if there is already a volume with that name\n    const newClaimName =\n      showCreatePVC === 'existing' ? claimName : _.get(newPVCObj, 'metadata.name', '');\n    const volumes = _.get(obj, 'spec.template.spec.volumes');\n    const volume = _.find(volumes, {\n      persistentVolumeClaim: {\n        claimName: newClaimName,\n      },\n    }) as any;\n    const newVolumeName = volume ? volume.name : newClaimName;\n    const newVolumeAlreadyMounted = !!volume;\n    setVolumeName(newVolumeName);\n    setVolumeAlreadyMounted(newVolumeAlreadyMounted);\n    showCreatePVC === 'existing' && newClaimName.trim().length > 0\n      ? setClaimVolumeMode(selectedPVC.spec.volumeMode)\n      : setClaimVolumeMode(newPVCObj?.spec?.volumeMode);\n  }, [newPVCObj, obj, claimName, showCreatePVC, claimVolumeMode, selectedPVC, namespace]);\n\n  if (!kindObj || !_.includes(supportedKinds, kindObj.kind)) {\n    setError('Unsupported kind.');\n    return;\n  }\n\n  const handleShowCreatePVCChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setShowCreatePVC(event.currentTarget.value);\n  };\n\n  const handleSelectContainers = () => {\n    setUseContainerSelector(!useContainerSelector);\n    setSelectedContainers([]);\n  };\n\n  const handleContainerSelectionChange = (event, checked) => {\n    const checkedItems = [...selectedContainers];\n    checked\n      ? checkedItems.push(event.currentTarget.id)\n      : _.pull(checkedItems, event.currentTarget.id);\n    setSelectedContainers(checkedItems);\n  };\n\n  const isContainerSelected = ({ name }) => {\n    return !useContainerSelector || selectedContainers.includes(name);\n  };\n\n  const getMountPaths = (podTemplate: any): string[] => {\n    const containers: ContainerSpec[] = _.get(podTemplate, 'spec.containers', []);\n    return containers.reduce((acc: string[], container: ContainerSpec) => {\n      if (!isContainerSelected(container)) {\n        return acc;\n      }\n      const mountPaths: string[] = _.map(container.volumeMounts, 'mountPath');\n      return acc.concat(mountPaths);\n    }, []);\n  };\n\n  const validateMountPaths = (path: string) => {\n    const existingMountPaths = getMountPaths(obj.spec.template);\n    const err = existingMountPaths.includes(path) ? 'Mount path is already in use.' : '';\n    setError(err);\n  };\n\n  // Add logic to check this handler for if a mount path is not unique\n  const handleMountPathChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setMountPath(event.currentTarget.value);\n    // Look at the existing mount paths so that we can warn if the new value is not unique.\n    validateMountPaths(event.currentTarget.value);\n  };\n\n  const getDevicePaths = (podTemplate: PodTemplate): string[] => {\n    const containers: ContainerSpec[] = podTemplate?.spec?.containers;\n    return containers.reduce((acc: string[], container: ContainerSpec) => {\n      if (!isContainerSelected(container)) {\n        return acc;\n      }\n      const devicePaths: string[] = _.map(container.volumeDevices, 'devicePath');\n      return acc.concat(devicePaths);\n    }, []);\n  };\n\n  const validateDevicePath = (path: string) => {\n    const existingDevicePaths = getDevicePaths(obj.spec.template);\n    if (existingDevicePaths.includes(path)) {\n      setError(t('public~Device path is already in use.'));\n    }\n  };\n\n  const handleDevicePathChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setDevicePath(event.currentTarget.value);\n    validateDevicePath(event.currentTarget.value);\n  };\n  const handleSubPathChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setSubPath(event.currentTarget.value);\n  };\n\n  const handlePVCChange = (\n    newClaimName: string,\n    kindLabel?: string,\n    resource?: PersistentVolumeClaimKind,\n  ) => {\n    setClaimName(newClaimName);\n    setSelectedPVC(resource);\n  };\n\n  const onMountAsReadOnlyChanged: React.ReactEventHandler<HTMLInputElement> = () => {\n    setMountAsReadOnly(!mountAsReadOnly);\n  };\n\n  const createPVCIfNecessary = () => {\n    return showCreatePVC === 'new'\n      ? k8sCreate(PersistentVolumeClaimModel, newPVCObj).then((claim) => claim.metadata.name)\n      : Promise.resolve(claimName);\n  };\n\n  const getVolumeMountPatches = (): Patch[] => {\n    const mount = {\n      name: volumeName,\n      mountPath,\n      subPath,\n      readOnly: mountAsReadOnly,\n    };\n    const containers: ContainerSpec[] = _.get(obj, 'spec.template.spec.containers', []);\n    return containers.reduce((patch, container, i) => {\n      // Only add to selected containers\n      if (isContainerSelected(container)) {\n        if (_.isEmpty(container.volumeMounts)) {\n          patch.push({\n            op: 'add',\n            path: `/spec/template/spec/containers/${i}/volumeMounts`,\n            value: [mount],\n          });\n        } else {\n          patch.push({\n            op: 'add',\n            path: `/spec/template/spec/containers/${i}/volumeMounts/-`,\n            value: mount,\n          });\n        }\n      }\n      return patch;\n    }, []);\n  };\n\n  const getVolumeDevicePatches = (): Patch[] => {\n    const device = {\n      name: volumeName,\n      devicePath,\n    };\n    const containers: ContainerSpec[] = obj?.spec?.template?.spec?.containers;\n    return containers.reduce((patch, container, i) => {\n      // Only add to selected containers\n      if (isContainerSelected(container)) {\n        if (_.isEmpty(container.volumeMounts)) {\n          patch.push({\n            op: 'add',\n            path: `/spec/template/spec/containers/${i}/volumeDevices`,\n            value: [device],\n          });\n        } else {\n          patch.push({\n            op: 'add',\n            path: `/spec/template/spec/containers/${i}/volumeDevices/-`,\n            value: device,\n          });\n        }\n      }\n      return patch;\n    }, []);\n  };\n  const getVolumePatches = (pvcName: string) => {\n    const patches =\n      claimVolumeMode === 'Block' ? getVolumeDevicePatches() : getVolumeMountPatches();\n    const volume = {\n      name: volumeName,\n      persistentVolumeClaim: {\n        claimName: pvcName,\n      },\n    };\n\n    if (!volumeAlreadyMounted) {\n      const existingVolumes = _.get(obj, 'spec.template.spec.volumes');\n      const volumePatch = _.isEmpty(existingVolumes)\n        ? { op: 'add', path: '/spec/template/spec/volumes', value: [volume] }\n        : { op: 'add', path: '/spec/template/spec/volumes/-', value: volume };\n      return [...patches, volumePatch];\n    }\n    return patches;\n  };\n\n  const save = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    if (useContainerSelector && selectedContainers.length === 0) {\n      setError('You must choose at least one container to mount to.');\n      return;\n    }\n    setInProgress(true);\n    createPVCIfNecessary().then(\n      (pvcName: string) => {\n        return k8sPatch(kindObj, obj, getVolumePatches(pvcName)).then((resource) => {\n          setInProgress(false);\n          navigate(resourceObjPath(resource, referenceFor(resource)));\n        });\n      },\n      (err) => {\n        setError(err.message);\n        setInProgress(false);\n      },\n    );\n  };\n\n  return (\n    <form className=\"co-m-pane__body-group co-m-pane__form\" onSubmit={save}>\n      <label className=\"control-label co-required\">{t('public~PersistentVolumeClaim')}</label>\n      <div className=\"form-group\">\n        <RadioInput\n          title={t('public~Use existing claim')}\n          value=\"existing\"\n          key=\"existing\"\n          onChange={handleShowCreatePVCChange}\n          checked={showCreatePVC === 'existing'}\n          name=\"showCreatePVC\"\n        />\n      </div>\n\n      {showCreatePVC === 'existing' && (\n        <div className=\"form-group co-form-subsection\">\n          <PVCDropdown\n            namespace={namespace}\n            onChange={handlePVCChange}\n            id=\"claimName\"\n            dataTest=\"claim-name\"\n            selectedKey={claimName}\n          />\n        </div>\n      )}\n      <div className=\"form-group\">\n        <RadioInput\n          title={t('public~Create new claim')}\n          value=\"new\"\n          key=\"new\"\n          onChange={handleShowCreatePVCChange}\n          checked={showCreatePVC === 'new'}\n          name=\"showCreatePVC\"\n        />\n      </div>\n\n      {showCreatePVC === 'new' && (\n        <div className=\"co-form-subsection\">\n          <CreatePVCForm onChange={setNewPVCObj} namespace={namespace} />\n        </div>\n      )}\n\n      {claimVolumeMode === 'Block' ? (\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor=\"device-path\">\n            {t('public~Device path')}\n          </label>\n          <div>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={handleDevicePathChange}\n              aria-describedby=\"volume-device-help\"\n              name=\"devicePath\"\n              id=\"device-path\"\n              value={devicePath}\n              required\n            />\n            <p className=\"help-block\" id=\"volume-device-help\">\n              {t('public~Device path for the block volume inside the container.')}\n            </p>\n          </div>\n        </div>\n      ) : (\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor=\"mount-path\">\n            {t('public~Mount path')}\n          </label>\n          <div>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={handleMountPathChange}\n              aria-describedby=\"mount-path-help\"\n              name=\"mountPath\"\n              id=\"mount-path\"\n              data-test=\"mount-path\"\n              value={mountPath}\n              required\n            />\n            <p className=\"help-block\" id=\"mount-path-help\">\n              {t('public~Mount path for the volume inside the container.')}\n            </p>\n          </div>\n          <Checkbox\n            label={t('public~Mount as read-only')}\n            onChange={onMountAsReadOnlyChanged}\n            checked={mountAsReadOnly}\n            name=\"mountAsReadOnly\"\n          />\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"subpath\">\n              {t('public~Subpath')}\n            </label>\n            <div>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                onChange={handleSubPathChange}\n                aria-describedby=\"subpath-help\"\n                id=\"subpath\"\n                name=\"subPath\"\n                value={subPath}\n              />\n              <p className=\"help-block\" id=\"subpath-help\">\n                {t(\n                  'public~Optional path within the volume from which it will be mounted into the container. Defaults to the root of the volume.',\n                )}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {!useContainerSelector && (\n        <p>\n          <Trans t={t} ns=\"public\">\n            The volume will be mounted into all containers. You can{' '}\n            <Button type=\"button\" onClick={handleSelectContainers} variant=\"link\" isInline>\n              select specific containers\n            </Button>{' '}\n            instead.\n          </Trans>\n        </p>\n      )}\n      {useContainerSelector && (\n        <div className=\"form-group co-break-word\">\n          <label className=\"control-label\">{t('public~Containers')}</label>\n          <Button type=\"button\" onClick={handleSelectContainers} variant=\"link\">\n            {t('public~(use all containers)')}\n          </Button>\n          <ContainerSelector\n            containers={obj.spec.template.spec.containers}\n            selected={selectedContainers}\n            onChange={handleContainerSelectionChange}\n          />\n          <p className=\"help-block\" id=\"subpath-help\">\n            {t('public~Select which containers to mount volume into.')}\n          </p>\n        </div>\n      )}\n      <ButtonBar errorMessage={error} inProgress={inProgress}>\n        <ActionGroup className=\"pf-v5-c-form\">\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            id=\"save-changes\"\n            isDisabled={showCreatePVC === 'existing' && !claimName}\n          >\n            {t('public~Save')}\n          </Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n            {t('public~Cancel')}\n          </Button>\n        </ActionGroup>\n      </ButtonBar>\n    </form>\n  );\n};\n\nexport const AttachStorage = ({ kindObj, kindsInFlight }) => {\n  const params = useParams();\n  if (!kindObj && kindsInFlight) {\n    return <LoadingBox />;\n  }\n  return <AttachStorageForm namespace={params.ns} resourceName={params.name} kindObj={kindObj} />;\n};\n\nexport type AttachStorageFormProps = {\n  kindObj: K8sKind;\n  namespace: string;\n  resourceName: string;\n};\n","import * as React from 'react';\n\nimport { ContainerSpec } from '../module/k8s';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport const ContainerSelector: React.FC<ContainerSelectorProps> = ({\n  containers,\n  onChange,\n  selected,\n}) => (\n  <div className=\"pf-v5-c-form__checkbox-row\">\n    {containers.map((container: ContainerSpec) => (\n      <Checkbox\n        key={container.name}\n        label={`${container.name} from image ${container.image}`}\n        id={container.name}\n        isChecked={selected.includes(container.name)}\n        data-checked-state={selected.includes(container.name)}\n        onChange={onChange}\n      />\n    ))}\n  </div>\n);\n\nexport type ContainerSelectorProps = {\n  containers: ContainerSpec[];\n  onChange: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void;\n  selected: string[];\n};\n","import * as React from 'react';\nimport { ListDropdown } from './list-dropdown';\nimport { useTranslation } from 'react-i18next';\n\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { PersistentVolumeClaimKind } from '../../../public/module/k8s/types';\n\nexport const PVCDropdown: React.FC<PVCDropdownProps> = (props) => {\n  const kind = PersistentVolumeClaimModel.kind;\n  const { namespace, selectedKey, desc } = props;\n  const resources = [{ kind, namespace }];\n  const { t } = useTranslation();\n  return (\n    <ListDropdown\n      {...props}\n      desc={desc}\n      resources={resources}\n      selectedKeyKind={kind}\n      placeholder={t('public~Select claim')}\n      selectedKey={selectedKey}\n    />\n  );\n};\n\nexport type PVCDropdownProps = {\n  namespace: string;\n  selectedKey: string;\n  onChange: (claimName: string, kindLabel?: string, pvc?: PersistentVolumeClaimKind) => void;\n  id?: string;\n  desc?: string;\n  dataTest?: string;\n  dataFilter?: (pvc: PersistentVolumeClaimKind) => boolean;\n};\n"],"sourceRoot":""}