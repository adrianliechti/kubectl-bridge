{"version":3,"sources":["webpack:///./public/components/daemon-set.tsx","webpack:///./packages/console-app/src/actions/modify-health-checks.ts"],"names":["menuActions","factory","AddStorage","getExtensionsActionsForKind","common","kind","tableColumnClasses","columnClass","DaemonSetDetailsList","ds","t","className","label","obj","path","DaemonSetDetails","daemonset","podData","loaded","text","key","metadata","uid","pods","resourceKind","enableScaling","resource","showPodSelector","showNodeSelector","showTolerations","containers","spec","template","heading","EnvironmentPage","props","loader","then","c","envPath","EnvironmentTab","rawEnvData","readOnly","DaemonSetTableRow","context","name","namespace","columnID","to","title","currentNumber","status","currentNumberScheduled","desiredNumber","desiredNumberScheduled","labels","selector","DaemonSets","Header","sortField","transforms","id","sortFunc","Row","virtualize","DaemonSetsPage","canCreate","ListComponent","DaemonSetPods","showNodes","DaemonSetsDetailsPage","prometheusIsAvailable","customActionMenu","kindObj","actions","options","variant","DROPDOWN","pages","details","metrics","editYaml","envEditor","events","healthChecksAdded","container","readinessProbe","livenessProbe","startupProbe","healthChecksUrl","model","crd","AddHealthChecks","labelKey","hidden","href","accessReview","group","apiGroup","plural","verb","EditHealthChecks"],"mappings":"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","file":"daemon-set-chunk-b97c49c3551d6df7b8cc.min.js","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom-v5-compat';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport {\n  usePodsWatcher,\n  PodRing,\n  LazyActionMenu,\n  ActionServiceProvider,\n  ActionMenu,\n  ActionMenuVariant,\n  usePrometheusGate,\n} from '@console/shared';\nimport { K8sResourceKind, referenceFor, referenceForModel, DaemonSetKind } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport {\n  AsyncComponent,\n  DetailsItem,\n  Kebab,\n  KebabAction,\n  ContainerTable,\n  detailsPage,\n  LabelList,\n  navFactory,\n  PodsComponent,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Selector,\n  LoadingInline,\n} from './utils';\nimport { ResourceEventStream } from './events';\nimport { VolumesTable } from './volumes-table';\nimport { DaemonSetModel } from '../models';\nimport { PodDisruptionBudgetField } from '@console/app/src/components/pdb/PodDisruptionBudgetField';\n\nexport const menuActions: KebabAction[] = [\n  AddHealthChecks,\n  Kebab.factory.AddStorage,\n  ...Kebab.getExtensionsActionsForKind(DaemonSetModel),\n  EditHealthChecks,\n  ...Kebab.factory.common,\n];\n\nconst kind = 'DaemonSet';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  Kebab.columnClass,\n];\n\nexport const DaemonSetDetailsList: React.FC<DaemonSetDetailsListProps> = ({ ds }) => {\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem\n        label={t('public~Current count')}\n        obj={ds}\n        path=\"status.currentNumberScheduled\"\n      />\n      <DetailsItem\n        label={t('public~Desired count')}\n        obj={ds}\n        path=\"status.desiredNumberScheduled\"\n      />\n      <PodDisruptionBudgetField obj={ds} />\n    </dl>\n  );\n};\n\nconst DaemonSetDetails: React.FC<DaemonSetDetailsProps> = ({ obj: daemonset }) => {\n  const { t } = useTranslation();\n  const { podData, loaded } = usePodsWatcher(daemonset);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~DaemonSet details')} />\n        {loaded ? (\n          <PodRing\n            key={daemonset.metadata.uid}\n            pods={podData?.pods || []}\n            obj={daemonset}\n            resourceKind={DaemonSetModel}\n            enableScaling={false}\n          />\n        ) : (\n          <LoadingInline />\n        )}\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary\n              resource={daemonset}\n              showPodSelector\n              showNodeSelector\n              showTolerations\n            />\n          </div>\n          <div className=\"col-lg-6\">\n            <DaemonSetDetailsList ds={daemonset} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Containers')} />\n        <ContainerTable containers={daemonset.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={daemonset} heading={t('public~Volumes')} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage: React.FC<EnvironmentPageProps> = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst EnvironmentTab: React.FC<EnvironmentTabProps> = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nconst DaemonSetTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({ obj: daemonset }) => {\n  const { t } = useTranslation();\n  const resourceKind = referenceFor(daemonset);\n  const context = { [resourceKind]: daemonset };\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={daemonset.metadata.name}\n          namespace={daemonset.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={daemonset.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`/k8s/ns/${daemonset.metadata.namespace}/daemonsets/${daemonset.metadata.name}/pods`}\n          title=\"pods\"\n        >\n          {t('public~{{currentNumber}} of {{desiredNumber}} pods', {\n            currentNumber: daemonset.status.currentNumberScheduled,\n            desiredNumber: daemonset.status.desiredNumberScheduled,\n          })}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={daemonset.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={daemonset.spec.selector} namespace={daemonset.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nexport const DaemonSets: React.FC = (props) => {\n  const { t } = useTranslation();\n  const DaemonSetTableHeader = () => [\n    {\n      title: t('public~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('public~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      id: 'namespace',\n    },\n    {\n      title: t('public~Status'),\n      sortFunc: 'daemonsetNumScheduled',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('public~Labels'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('public~Pod selector'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~DaemonSets')}\n      Header={DaemonSetTableHeader}\n      Row={DaemonSetTableRow}\n      virtualize\n    />\n  );\n};\n\nexport const DaemonSetsPage: React.FC<DaemonSetsPageProps> = (props) => (\n  <ListPage canCreate={true} ListComponent={DaemonSets} kind={kind} {...props} />\n);\n\nconst DaemonSetPods: React.FC<DaemonSetPodsProps> = (props) => (\n  <PodsComponent {...props} showNodes />\n);\n\nexport const DaemonSetsDetailsPage: React.FC = (props) => {\n  const prometheusIsAvailable = usePrometheusGate();\n  const customActionMenu = (kindObj, obj) => {\n    const resourceKind = referenceForModel(kindObj);\n    const context = { [resourceKind]: obj };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n  return (\n    <DetailsPage\n      {...props}\n      kind={kind}\n      customActionMenu={customActionMenu}\n      pages={[\n        navFactory.details(detailsPage(DaemonSetDetails)),\n        ...(prometheusIsAvailable ? [navFactory.metrics()] : []),\n        navFactory.editYaml(),\n        navFactory.pods(DaemonSetPods),\n        navFactory.envEditor(EnvironmentTab),\n        navFactory.events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n\ntype DaemonSetDetailsListProps = {\n  ds: DaemonSetKind;\n};\n\ntype EnvironmentPageProps = {\n  obj: K8sResourceKind;\n  rawEnvData: any;\n  envPath: string[];\n  readOnly: boolean;\n};\n\ntype EnvironmentTabProps = {\n  obj: K8sResourceKind;\n};\n\ntype DaemonSetDetailsProps = {\n  obj: DaemonSetKind;\n};\n\ntype DaemonSetsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype DaemonSetPodsProps = {\n  obj: K8sResourceKind;\n};\n","import * as _ from 'lodash';\nimport { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nconst healthChecksAdded = (resource: K8sResourceKind): boolean => {\n  const containers = resource?.spec?.template?.spec?.containers;\n  return _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n};\n\nconst healthChecksUrl = (model: K8sKind, obj: K8sResourceKind): string => {\n  const {\n    kind,\n    metadata: { name, namespace },\n  } = obj;\n  const resourceKind = model.crd ? referenceFor(obj) : kind;\n  const containers = obj?.spec?.template?.spec?.containers;\n  const containerName = containers?.[0]?.name;\n  return `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containerName}/health-checks`;\n};\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const AddHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    // t('console-app~Add Health Checks')\n    labelKey: 'console-app~Add Health Checks',\n    hidden: healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const EditHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    // t('console-app~Edit Health Checks')\n    labelKey: 'console-app~Edit Health Checks',\n    hidden: !healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'get',\n    },\n  };\n};\n"],"sourceRoot":""}