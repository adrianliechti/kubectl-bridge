{"version":3,"sources":["webpack:///./packages/service-binding-plugin/src/components/service-binding-list/ServiceBindingTable.tsx","webpack:///./packages/service-binding-plugin/src/components/service-binding-details/ServiceBindingDetailsTab.tsx","webpack:///./packages/service-binding-plugin/src/pages.ts","webpack:///./packages/service-binding-plugin/src/components/service-binding-status/ServiceBindingStatus.tsx","webpack:///./packages/service-binding-plugin/src/components/service-binding-details/ServiceBindingSummary.tsx","webpack:///./packages/service-binding-plugin/src/components/service-binding-list/ServiceBindingListPage.tsx","webpack:///./packages/service-binding-plugin/src/components/service-binding-details/ServiceBindingDetailsPage.tsx"],"names":["columnClassNames","columnClass","ServiceBindingHeader","t","bind","title","sortField","transforms","props","className","id","ServiceBindingRow","obj","serviceBinding","kindReference","context","kind","name","metadata","namespace","columnID","timestamp","creationTimestamp","Header","Row","virtualize","text","resource","status","conditions","length","computedStatus","CONNECTED","ERROR","firstError","reason","message","findModel","model","spec","application","group","labelSelector","label","path","labels","matchLabels","services","map","service","index","key","groupVersionKind","filters","filterGroupName","type","items","filter","filterValue","selected","includes","reducer","propsWithoutName","ListComponent","rowFilters","canCreate","helpText","pages","details","editYaml","getResourceStatus","customActionMenu","_","actions","options","loaded","variant","DROPDOWN"],"mappings":"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","file":"service-binding-plugin/code-refs/pages-chunk-6d68406b67564771edad.min.js","sourcesContent":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TableData,\n  RowFunctionArgs,\n  Table,\n  TableProps,\n} from '@console/internal/components/factory';\nimport { Kebab, ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport LazyActionMenu from '@console/shared/src/components/actions/LazyActionMenu';\nimport { ServiceBinding } from '../../types';\nimport ServiceBindingStatus from '../service-binding-status/ServiceBindingStatus';\n\nconst columnClassNames = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-lg', // labels\n  'pf-m-hidden pf-m-visible-on-xl', // created\n  Kebab.columnClass,\n];\n\nexport const ServiceBindingHeader = () => {\n  const t = i18next.t.bind(i18next);\n\n  return [\n    {\n      title: t('service-binding-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: columnClassNames[0] },\n    },\n    {\n      id: 'namespace',\n      title: t('service-binding-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: columnClassNames[1] },\n    },\n    {\n      title: t('service-binding-plugin~Status'),\n      props: { className: columnClassNames[2] },\n    },\n    {\n      title: t('service-binding-plugin~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: columnClassNames[3] },\n    },\n    {\n      title: '',\n      props: { className: columnClassNames[4] },\n    },\n  ];\n};\n\nexport const ServiceBindingRow: React.FC<RowFunctionArgs<ServiceBinding>> = ({\n  obj: serviceBinding,\n}) => {\n  const kindReference = referenceFor(serviceBinding);\n  const context = { [kindReference]: serviceBinding };\n\n  return (\n    <>\n      <TableData className={columnClassNames[0]}>\n        <ResourceLink\n          kind={kindReference}\n          name={serviceBinding.metadata.name}\n          namespace={serviceBinding.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={columnClassNames[1]} columnID=\"namespace\">\n        <ResourceLink kind=\"Namespace\" name={serviceBinding.metadata.namespace} />\n      </TableData>\n      <TableData className={columnClassNames[2]}>\n        <ServiceBindingStatus serviceBinding={serviceBinding} />\n      </TableData>\n      <TableData className={columnClassNames[3]}>\n        <Timestamp timestamp={serviceBinding.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={columnClassNames[4]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nconst ServiceBindingTable: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('service-binding-plugin~ServiceBindings')}\n      Header={ServiceBindingHeader}\n      Row={ServiceBindingRow}\n      virtualize\n    />\n  );\n};\n\nexport default ServiceBindingTable;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Conditions } from '@console/internal/components/conditions';\nimport { SectionHeading, ResourceSummary } from '@console/internal/components/utils';\nimport { ServiceBinding } from '../../types';\nimport ServiceBindingSummary from './ServiceBindingSummary';\n\ntype ServiceBindingDetailsTabProps = {\n  obj: ServiceBinding;\n};\n\nconst ServiceBindingDetailsTab: React.FC<ServiceBindingDetailsTabProps> = ({\n  obj: serviceBinding,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('service-binding-plugin~ServiceBinding details')} />\n\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={serviceBinding} />\n          </div>\n          <div className=\"col-sm-6\">\n            <ServiceBindingSummary serviceBinding={serviceBinding} />\n          </div>\n        </div>\n      </div>\n\n      {serviceBinding.status?.conditions?.length ? (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('service-binding-plugin~Conditions')} />\n          <Conditions conditions={serviceBinding.status.conditions} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default ServiceBindingDetailsTab;\n","export { default as ServiceBindingListPage } from './components/service-binding-list/ServiceBindingListPage';\nexport { default as ServiceBindingDetailsPage } from './components/service-binding-details/ServiceBindingDetailsPage';\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Status from '@console/dynamic-plugin-sdk/src/app/components/status/Status';\nimport { ComputedServiceBindingStatus, ServiceBinding } from '../../types';\nimport { getComputedServiceBindingStatus, getFirstServiceBindingError } from '../../utils';\n\nconst ServiceBindingStatus = ({ serviceBinding }: { serviceBinding: ServiceBinding }) => {\n  const { t } = useTranslation();\n\n  const computedStatus = getComputedServiceBindingStatus(serviceBinding);\n\n  if (computedStatus === ComputedServiceBindingStatus.CONNECTED) {\n    return <Status status={computedStatus} title={t('service-binding-plugin~Connected')} />;\n  }\n\n  if (computedStatus === ComputedServiceBindingStatus.ERROR) {\n    const firstError = getFirstServiceBindingError(serviceBinding);\n    return (\n      <Status status=\"Error\" title={t('service-binding-plugin~Error')}>\n        {firstError ? (\n          <>\n            <pre>{firstError.reason}</pre>\n            {firstError.message}\n          </>\n        ) : null}\n      </Status>\n    );\n  }\n\n  return <Status status={computedStatus} />;\n};\n\nexport default ServiceBindingStatus;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLink, DetailsItem, LabelList } from '@console/internal/components/utils';\nimport { useModelFinder } from '@console/internal/module/k8s';\nimport { ServiceBinding } from '../../types';\nimport ServiceBindingStatus from '../service-binding-status/ServiceBindingStatus';\n\ntype ServiceBindingSummaryProps = {\n  serviceBinding: ServiceBinding;\n};\n\nconst ServiceBindingSummary: React.FC<ServiceBindingSummaryProps> = ({ serviceBinding }) => {\n  const { findModel } = useModelFinder();\n  const { t } = useTranslation();\n\n  const model = findModel(\n    serviceBinding.spec.application.group,\n    serviceBinding.spec.application.resource,\n  );\n\n  return (\n    <dl>\n      <dt>{t('service-binding-plugin~Status')}</dt>\n      <dd>\n        <ServiceBindingStatus serviceBinding={serviceBinding} />\n      </dd>\n\n      {serviceBinding.spec?.application?.labelSelector ? (\n        <DetailsItem\n          label={t('service-binding-plugin~Label Selector')}\n          obj={serviceBinding}\n          path=\"spec.application.labelSelector\"\n        >\n          {(\n            <LabelList\n              kind={model.kind}\n              labels={serviceBinding.spec.application.labelSelector.matchLabels}\n            />\n          ) || '-'}\n        </DetailsItem>\n      ) : (\n        <DetailsItem\n          label={t('service-binding-plugin~Application')}\n          obj={serviceBinding}\n          path=\"spec.application\"\n        >\n          {serviceBinding.spec.application?.name || '-'}\n        </DetailsItem>\n      )}\n\n      <DetailsItem\n        label={t('service-binding-plugin~Services')}\n        obj={serviceBinding}\n        path=\"spec.services\"\n      >\n        {serviceBinding.spec?.services?.length\n          ? serviceBinding.spec.services.map((service, index) => (\n              <ResourceLink\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                groupVersionKind={service}\n                namespace={serviceBinding.metadata.namespace}\n                name={service.name}\n              />\n            ))\n          : '-'}\n      </DetailsItem>\n    </dl>\n  );\n};\n\nexport default ServiceBindingSummary;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FilterValue } from '@console/dynamic-plugin-sdk/src/extensions/console-types';\nimport { ListPage } from '@console/internal/components/factory';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceBindingModel } from '../../models';\nimport { ServiceBinding } from '../../types';\nimport { getComputedServiceBindingStatus } from '../../utils';\nimport { ServiceBindingDeprecationAlert } from '../service-binding-utils/ServiceBindingAlerts';\nimport ServiceBindingTable from './ServiceBindingTable';\n\ntype ListPageProps = React.ComponentProps<typeof ListPage>;\n\ntype ServiceBindingListPageProps = Omit<\n  ListPageProps,\n  'title' | 'badge' | 'kind' | 'ListComponent' | 'rowFilters'\n>;\n\nconst ServiceBindingListPage: React.FC<ServiceBindingListPageProps> = (props) => {\n  const { t } = useTranslation();\n\n  const filters: RowFilter<ServiceBinding>[] = [\n    {\n      filterGroupName: t('service-binding-plugin~Status'),\n      type: 'status',\n      items: [\n        { id: 'Connected', title: t('service-binding-plugin~Connected') },\n        { id: 'Error', title: t('service-binding-plugin~Error') },\n      ],\n      filter: (filterValue: FilterValue, serviceBinding: ServiceBinding): boolean => {\n        const status = getComputedServiceBindingStatus(serviceBinding);\n        return !filterValue.selected?.length || (status && filterValue.selected.includes(status));\n      },\n      reducer: getComputedServiceBindingStatus,\n    },\n  ];\n\n  const propsWithoutName = { ...props };\n  delete propsWithoutName.name;\n\n  return (\n    <ListPage\n      title={t('service-binding-plugin~ServiceBindings')}\n      kind={referenceForModel(ServiceBindingModel)}\n      ListComponent={ServiceBindingTable}\n      rowFilters={filters}\n      canCreate\n      helpText={<ServiceBindingDeprecationAlert />}\n      {...propsWithoutName}\n    />\n  );\n};\n\nexport default ServiceBindingListPage;\n","import * as React from 'react';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { Page, navFactory, viewYamlComponent } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport {\n  ActionMenu,\n  ActionMenuVariant,\n  ActionServiceProvider,\n} from '@console/shared/src/components/actions';\nimport { getComputedServiceBindingStatus } from '../../utils';\nimport { ServiceBindingDeprecationAlert } from '../service-binding-utils/ServiceBindingAlerts';\nimport ServiceBindingDetailsTab from './ServiceBindingDetailsTab';\n\nconst ServiceBindingDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const customActionMenu = (_, serviceBinding) => {\n    const kindReference = referenceFor(serviceBinding);\n    const context = { [kindReference]: serviceBinding };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  const pages: Page[] = [\n    navFactory.details(ServiceBindingDetailsTab),\n    navFactory.editYaml(viewYamlComponent),\n  ];\n\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={getComputedServiceBindingStatus}\n      customActionMenu={customActionMenu}\n      pages={pages}\n    >\n      <ServiceBindingDeprecationAlert />\n      <br />\n    </DetailsPage>\n  );\n};\n\nexport default ServiceBindingDetailsPage;\n"],"sourceRoot":""}