{"version":3,"sources":["webpack:///./public/components/modals/column-management-modal.tsx"],"names":["MAX_VIEW_COLS","NAME_COLUMN_ID","readOnlyColumns","Set","DataListRow","checkedColumns","column","onChange","disableUncheckedRow","id","key","className","isDisabled","has","checked","name","title","dataListCells","htmlFor","ColumnManagementModal","cancel","close","columnLayout","setUserSettingState","setTableColumns","t","defaultColumns","columns","filter","additional","additionalColumns","setCheckedColumns","selectedColumns","size","map","col","onColumnChange","event","updatedCheckedColumns","selectedId","currentTarget","delete","add","areMaxColumnsDisplayed","onSubmit","preventDefault","orderedCheckedColumns","forEach","prevState","isInline","variant","showNamespaceOverride","resourceKind","type","isCompact","defaultColumn","additionalColumn","inProgress","submitText","resetText","reset","createColumnManagementModal","undefined","displayName"],"mappings":"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","file":"column-management-modal-chunk-07ddb6e113a2f66737d3.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  Alert,\n  DataList,\n  DataListCheck,\n  DataListItem,\n  DataListItemRow,\n  DataListCell,\n  DataListItemCells,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { ColumnLayout, ManagedColumn } from '@console/dynamic-plugin-sdk';\n\nimport {\n  COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n  WithUserSettingsCompatibilityProps,\n  withUserSettingsCompatibility,\n  COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n} from '@console/shared';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory';\n\nexport const MAX_VIEW_COLS = 9;\n\nexport const NAME_COLUMN_ID = 'name';\nconst readOnlyColumns = new Set([NAME_COLUMN_ID]);\n\nconst DataListRow: React.FC<DataListRowProps> = ({\n  checkedColumns,\n  column,\n  onChange,\n  disableUncheckedRow,\n}) => (\n  <DataListItem\n    aria-labelledby={`table-column-management-item-${column.id}`}\n    key={column.id}\n    className=\"pf-v5-c-data-list__item--transparent-bg\"\n  >\n    <DataListItemRow>\n      <DataListCheck\n        isDisabled={\n          (disableUncheckedRow && !checkedColumns.has(column.id)) || readOnlyColumns.has(column.id)\n        }\n        aria-labelledby={`table-column-management-item-${column.id}`}\n        checked={checkedColumns.has(column.id)}\n        name={column.title}\n        id={column.id}\n        onChange={onChange}\n      />\n      <DataListItemCells\n        dataListCells={[\n          <DataListCell id={`table-column-management-item-${column.id}`} key={column.id}>\n            <label className=\"co-label--plain\" htmlFor={column.id}>\n              {column.title}\n            </label>\n          </DataListCell>,\n        ]}\n      />\n    </DataListItemRow>\n  </DataListItem>\n);\n\nexport const ColumnManagementModal: React.FC<\n  ColumnManagementModalProps & WithUserSettingsCompatibilityProps<object>\n> = ({ cancel, close, columnLayout, setUserSettingState: setTableColumns }) => {\n  const { t } = useTranslation();\n  const defaultColumns = columnLayout.columns.filter((column) => column.id && !column.additional);\n  const additionalColumns = columnLayout.columns.filter((column) => column.additional);\n\n  const [checkedColumns, setCheckedColumns] = React.useState(\n    columnLayout.selectedColumns && columnLayout.selectedColumns.size !== 0\n      ? new Set(columnLayout.selectedColumns)\n      : new Set(defaultColumns.map((col) => col.id)),\n  );\n\n  const onColumnChange = (event: React.SyntheticEvent): void => {\n    const updatedCheckedColumns = new Set<string>(checkedColumns);\n    const selectedId = event?.currentTarget?.id;\n    updatedCheckedColumns.has(selectedId)\n      ? updatedCheckedColumns.delete(selectedId)\n      : updatedCheckedColumns.add(selectedId);\n    setCheckedColumns(updatedCheckedColumns);\n  };\n\n  const submit = (event): void => {\n    event.preventDefault();\n    const orderedCheckedColumns = new Set<string>();\n    columnLayout.columns.forEach(\n      (column) => checkedColumns.has(column.id) && orderedCheckedColumns.add(column.id),\n    );\n    setTableColumns((prevState) => {\n      return { ...prevState, [columnLayout.id]: [...orderedCheckedColumns] };\n    });\n    close();\n  };\n\n  const areMaxColumnsDisplayed = checkedColumns.size >= MAX_VIEW_COLS;\n\n  const resetColumns = (event: React.SyntheticEvent): void => {\n    event.preventDefault();\n    const updatedCheckedColumns = new Set(checkedColumns);\n    defaultColumns.forEach((col) => col.id && updatedCheckedColumns.add(col.id));\n    additionalColumns.forEach((col) => updatedCheckedColumns.delete(col.id));\n    setCheckedColumns(updatedCheckedColumns);\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle className=\"modal-header\">{t('public~Manage columns')}</ModalTitle>\n      <ModalBody>\n        <div className=\"co-m-form-row\">\n          <p>{t('public~Selected columns will appear in the table.')}</p>\n        </div>\n        <div className=\"co-m-form-row\">\n          <Alert\n            className=\"co-alert\"\n            isInline\n            title={t('public~You can select up to {{MAX_VIEW_COLS}} columns', { MAX_VIEW_COLS })}\n            variant=\"info\"\n          >\n            {!columnLayout?.showNamespaceOverride &&\n              t('public~The namespace column is only shown when in \"All projects\"')}\n          </Alert>\n        </div>\n        <div className=\"row co-m-form-row\">\n          <div className=\"col-sm-12\">\n            <span className=\"col-sm-6\">\n              <label className=\"control-label\">\n                {t('public~Default {{resourceKind}} columns', { resourceKind: columnLayout.type })}\n              </label>\n              <DataList\n                aria-label={t('public~Default column list')}\n                id=\"defalt-column-management\"\n                isCompact\n              >\n                {defaultColumns.map((defaultColumn) => (\n                  <DataListRow\n                    key={defaultColumn.id}\n                    onChange={onColumnChange}\n                    disableUncheckedRow={areMaxColumnsDisplayed}\n                    column={defaultColumn}\n                    checkedColumns={checkedColumns}\n                  />\n                ))}\n              </DataList>\n            </span>\n            <span className=\"col-sm-6\">\n              <label className=\"control-label\">{t('public~Additional columns')}</label>\n              <DataList\n                aria-label={t('public~Additional column list')}\n                id=\"additional-column-management\"\n                isCompact\n              >\n                {additionalColumns.map((additionalColumn) => (\n                  <DataListRow\n                    key={additionalColumn.id}\n                    onChange={onColumnChange}\n                    disableUncheckedRow={areMaxColumnsDisplayed}\n                    column={additionalColumn}\n                    checkedColumns={checkedColumns}\n                  />\n                ))}\n              </DataList>\n            </span>\n          </div>\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={false}\n        cancel={cancel}\n        submitText={t('public~Save')}\n        resetText={t('public~Restore default columns')}\n        reset={resetColumns}\n      />\n    </form>\n  );\n};\n\nexport const createColumnManagementModal = createModalLauncher<ColumnManagementModalProps>(\n  withUserSettingsCompatibility<\n    ColumnManagementModalProps & WithUserSettingsCompatibilityProps<object>,\n    object\n  >(\n    COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n    COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n    undefined,\n    true,\n  )(ColumnManagementModal),\n);\n\nColumnManagementModal.displayName = 'ColumnManagementModal';\n\ntype DataListRowProps = {\n  column: ManagedColumn;\n  onChange: (event: React.SyntheticEvent, checked: boolean) => void;\n  disableUncheckedRow: boolean;\n  checkedColumns: Set<string>;\n};\n\nexport type ColumnManagementModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  columnLayout: ColumnLayout;\n};\n"],"sourceRoot":""}