{"version":3,"sources":["webpack:///./packages/console-app/src/components/volume-snapshot/volume-snapshot-content.tsx"],"names":["tableColumnInfo","id","className","columnClass","Row","obj","name","creationTimestamp","metadata","snapshotName","namespace","snapshotNamespace","spec","volumeSnapshotRef","size","status","restoreSize","sizeMetrics","string","kind","volumeSnapshotClassName","timestamp","resource","actions","factory","common","VolumeSnapshotContentTable","props","t","columns","title","sort","transforms","label","showTitle","canCreate","resources","loaded","loadError","groupVersionKind","group","apiGroup","version","apiVersion","isList","data","filteredData","onFilterChange","resourceKind","labelPluralKey","undefined","rowFilters","unfilteredData"],"mappings":"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","file":"volume-snapshot-content-page-chunk-4cdf4ab538cb42afd929.min.js","sourcesContent":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ListPageBody,\n  useListPageFilter,\n  ListPageCreate,\n  ListPageFilter,\n  ListPageHeader,\n  VirtualizedTable,\n  TableColumn,\n  RowProps,\n} from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { TableData } from '@console/internal/components/factory';\nimport { useActiveColumns } from '@console/internal/components/factory/Table/active-columns-hook';\nimport {\n  ResourceLink,\n  ResourceKebab,\n  Timestamp,\n  Kebab,\n  humanizeBinaryBytes,\n  PageComponentProps,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport {\n  VolumeSnapshotModel,\n  VolumeSnapshotClassModel,\n  VolumeSnapshotContentModel,\n} from '@console/internal/models';\nimport { referenceForModel, VolumeSnapshotContentKind } from '@console/internal/module/k8s';\nimport { Status } from '@console/shared';\nimport { snapshotStatusFilters, volumeSnapshotStatus } from '../../status';\n\nexport const tableColumnInfo = [\n  { id: 'name' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'status' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'size' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), id: 'volumeSnapshot' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), id: 'snapshotClass' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), id: 'createdAt' },\n  { className: Kebab.columnClass, id: '' },\n];\n\nconst Row: React.FC<RowProps<VolumeSnapshotContentKind>> = ({ obj }) => {\n  const { name, creationTimestamp } = obj?.metadata || {};\n  const { name: snapshotName, namespace: snapshotNamespace } = obj?.spec?.volumeSnapshotRef || {};\n  const size = obj.status?.restoreSize;\n  const sizeMetrics = size ? humanizeBinaryBytes(size).string : '-';\n\n  return (\n    <>\n      <TableData {...tableColumnInfo[0]}>\n        <ResourceLink kind={referenceForModel(VolumeSnapshotContentModel)} name={name} />\n      </TableData>\n      <TableData {...tableColumnInfo[1]}>\n        <Status status={volumeSnapshotStatus(obj)} />\n      </TableData>\n      <TableData {...tableColumnInfo[2]}>{sizeMetrics}</TableData>\n      <TableData {...tableColumnInfo[3]}>\n        <ResourceLink\n          kind={referenceForModel(VolumeSnapshotModel)}\n          name={snapshotName}\n          namespace={snapshotNamespace}\n        />\n      </TableData>\n      <TableData {...tableColumnInfo[4]}>\n        <ResourceLink\n          kind={referenceForModel(VolumeSnapshotClassModel)}\n          name={obj?.spec?.volumeSnapshotClassName}\n        />\n      </TableData>\n      <TableData {...tableColumnInfo[5]}>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData {...tableColumnInfo[6]}>\n        <ResourceKebab\n          kind={referenceForModel(VolumeSnapshotContentModel)}\n          resource={obj}\n          actions={Kebab.factory.common}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst VolumeSnapshotContentTable: React.FC<VolumeSnapshotContentTableProps> = (props) => {\n  const { t } = useTranslation();\n  const getTableColumns = (): TableColumn<VolumeSnapshotContentKind>[] => [\n    {\n      title: t('console-app~Name'),\n      sort: 'metadata.name',\n      transforms: [sortable],\n      id: tableColumnInfo[0].id,\n    },\n    {\n      title: t('console-app~Status'),\n      sort: 'snapshotStatus',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[1].className },\n      id: tableColumnInfo[1].id,\n    },\n    {\n      title: t('console-app~Size'),\n      sort: 'volumeSnapshotSize',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[2].className },\n      id: tableColumnInfo[2].id,\n    },\n    {\n      title: t('console-app~VolumeSnapshot'),\n      sort: 'spec.volumeSnapshotRef.name',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[3].className },\n      id: tableColumnInfo[3].id,\n    },\n    {\n      title: t('console-app~SnapshotClass'),\n      sort: 'spec.volumeSnapshotClassName',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[4].className },\n      id: tableColumnInfo[4].id,\n    },\n    {\n      title: t('console-app~Created at'),\n      sort: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[5].className },\n      id: tableColumnInfo[5].id,\n    },\n    {\n      title: '',\n      props: { className: tableColumnInfo[6].className },\n      id: tableColumnInfo[6].id,\n    },\n  ];\n  const [columns] = useActiveColumns({ columns: getTableColumns() });\n\n  return (\n    <VirtualizedTable<VolumeSnapshotContentKind>\n      {...props}\n      aria-label={t('console-app~VolumeSnapshotContents')}\n      label={t('console-app~VolumeSnapshotContents')}\n      columns={columns}\n      Row={Row}\n    />\n  );\n};\n\nconst VolumeSnapshotContentPage: React.FC<VolumeSnapshotContentPageProps> = ({\n  showTitle = true,\n  canCreate = true,\n}) => {\n  const { t } = useTranslation();\n\n  const [resources, loaded, loadError] = useK8sWatchResource<VolumeSnapshotContentKind[]>({\n    groupVersionKind: {\n      group: VolumeSnapshotContentModel.apiGroup,\n      kind: VolumeSnapshotContentModel.kind,\n      version: VolumeSnapshotContentModel.apiVersion,\n    },\n    isList: true,\n  });\n\n  const [data, filteredData, onFilterChange] = useListPageFilter(resources);\n  const resourceKind = referenceForModel(VolumeSnapshotContentModel);\n  return (\n    <>\n      <ListPageHeader title={showTitle ? t(VolumeSnapshotContentModel.labelPluralKey) : undefined}>\n        {canCreate && (\n          <ListPageCreate groupVersionKind={resourceKind}>\n            {t('console-app~Create VolumeSnapshotContent')}\n          </ListPageCreate>\n        )}\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter\n          data={data}\n          loaded={loaded}\n          onFilterChange={onFilterChange}\n          rowFilters={snapshotStatusFilters(t)}\n        />\n        <VolumeSnapshotContentTable\n          data={filteredData}\n          unfilteredData={resources}\n          loaded={loaded}\n          loadError={loadError}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\ntype VolumeSnapshotContentPageProps = {\n  canCreate?: boolean;\n} & PageComponentProps;\n\ntype VolumeSnapshotContentTableProps = {\n  data: VolumeSnapshotContentKind[];\n  unfilteredData: VolumeSnapshotContentKind[];\n  loaded: boolean;\n  loadError: any;\n};\n\nexport default VolumeSnapshotContentPage;\n"],"sourceRoot":""}