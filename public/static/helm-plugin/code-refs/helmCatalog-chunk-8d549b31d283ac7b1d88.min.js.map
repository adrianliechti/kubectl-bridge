{"version":3,"sources":["webpack:///./packages/helm-plugin/src/catalog/index.ts","webpack:///./packages/helm-plugin/src/utils/helm-utils.ts","webpack:///./packages/helm-plugin/src/types/helm-types.ts","webpack:///./packages/helm-plugin/src/catalog/utils/const.ts","webpack:///./packages/helm-plugin/src/catalog/providers/useHelmCharts.tsx","webpack:///./packages/helm-plugin/src/catalog/components/HelmCatalogTypeDescription.tsx","webpack:///./packages/helm-plugin/src/catalog/utils/catalog-utils.tsx","webpack:///./packages/helm-plugin/icons/certified.svg","webpack:///./packages/helm-plugin/src/catalog/components/HelmReadmeLoader.tsx"],"names":["HelmReleaseStatusLabels","Deployed","Failed","PendingInstall","PendingUpgrade","PendingRollback","Other","SelectedReleaseStatuses","OtherReleaseStatuses","releaseStatus","status","split","map","s","join","releaseStatusReducer","release","includes","info","helmReleasesRowFilters","t","filterGroupName","type","reducer","items","id","title","filterHelmReleasesByStatus","releases","filter","filterHelmReleasesByName","name","fetchHelmReleases","namespace","limitInfo","fetchString","fetchHelmRelease","helmReleaseName","getChartURL","helmChartData","chartVersion","chartRepoName","chartData","find","obj","version","repoName","urls","getChartRepositoryTitle","chartRepositories","chartRepository","repo","metadata","spec","getChartIndexEntry","chartEntries","chartName","toLowerCase","Object","keys","val","getChartEntriesByName","annotatedName","providerName","chartRepositoryTitle","indexEntry","e","acc","charts","key","pop","forEach","chart","annotations","push","concatVersions","appVersion","getChartVersions","getOriginRedirectURL","actionOrigin","releaseName","topology","list","details","getHelmActionConfig","helmAction","chartURL","chartIndexEntry","Create","subTitle","form","yaml","helmReleaseApi","encodeURIComponent","fetch","post","redirectURL","Upgrade","put","Rollback","patch","flattenReleaseResources","resources","reduce","kind","data","getChartValuesYAML","orderedValuesFile","files","file","orderedValues","atob","values","loadHelmManifestResources","manifest","schema","json","Boolean","getChartReadme","readmeFile","helmActionString","fetchHelmReleaseHistory","isGoingToTopology","resource","HelmReleaseStatus","HelmActionType","HelmActionOrigins","CHART_NAME_ANNOTATION","PROVIDER_TYPE_ANNOTATION","PROVIDER_NAME_ANNOTATION","SUPPORT_URL_ANNOTATION","PROVIDER_TYPE","PROVIDER_TYPE_KEYS","community","partner","redhat","activeNamespace","helmCharts","setHelmCharts","loadedError","setLoadedError","resourceSelector","hcrs","isList","phcrs","chartRepositoriesLoaded","length","some","value","loaded","loadError","mounted","then","res","text","entries","catch","err","LinkToCreatePHCR","isAllowed","group","apiGroup","plural","verb","createPHCR","ns","to","normalizeHelmCharts","normalizedCharts","created","description","keywords","providerType","supportUrl","displayName","imgUrl","icon","encodedChartURL","encodedChartRepoName","encodedChartName","encodedChartIndexKey","href","translatedProviderType","style","verticalAlign","content","src","alt","maintainers","maintainer","index","email","homePage","home","additionalClassName","detailsProperties","label","isHidden","detailsDescriptions","helmChart","uid","provider","tags","creationTimestamp","attributes","class","url","cta","properties","descriptions","existingChartIndex","findIndex","currentChart","existingChart","localeCompare","undefined","numeric","sensitivity","module","exports","readme","setReadme","setLoaded","unmounted","console","warn","readmeData","decode","emptyMsg","className"],"mappings":"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","file":"helm-plugin/code-refs/helmCatalog-chunk-8d549b31d283ac7b1d88.min.js","sourcesContent":["export { default as helmChartProvider } from './providers/useHelmCharts';\nexport { default as getHelmCatalogTypeDescription } from './components/HelmCatalogTypeDescription';\n","import * as fuzzy from 'fuzzysearch';\nimport { TFunction } from 'i18next';\nimport { loadAll, safeDump, DEFAULT_SAFE_SCHEMA } from 'js-yaml';\nimport * as _ from 'lodash';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { Flatten } from '@console/internal/components/factory/list-page';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { K8sResourceKind, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { toTitleCase, WORKLOAD_TYPES } from '@console/shared';\nimport { CHART_NAME_ANNOTATION, PROVIDER_NAME_ANNOTATION } from '../catalog/utils/const';\nimport {\n  HelmRelease,\n  HelmChart,\n  HelmReleaseStatus,\n  HelmChartMetaData,\n  HelmActionType,\n  HelmActionConfigType,\n  HelmActionOrigins,\n  HelmChartEntries,\n} from '../types/helm-types';\n\nexport const HelmReleaseStatusLabels = {\n  [HelmReleaseStatus.Deployed]: 'Deployed',\n  [HelmReleaseStatus.Failed]: 'Failed',\n  [HelmReleaseStatus.PendingInstall]: 'PendingInstall',\n  [HelmReleaseStatus.PendingUpgrade]: 'PendingUpgrade',\n  [HelmReleaseStatus.PendingRollback]: 'PendingRollback',\n  [HelmReleaseStatus.Other]: 'Other',\n};\n\nexport const SelectedReleaseStatuses = [\n  HelmReleaseStatus.Deployed,\n  HelmReleaseStatus.Failed,\n  HelmReleaseStatus.PendingInstall,\n  HelmReleaseStatus.PendingUpgrade,\n  HelmReleaseStatus.PendingRollback,\n  HelmReleaseStatus.Other,\n];\n\nexport const OtherReleaseStatuses = ['unknown', 'uninstalled', 'superseded', 'uninstalling'];\n\nexport const releaseStatus = (status: string) => {\n  if (!status) {\n    return 'Unknown';\n  }\n  return status\n    .split('-')\n    .map((s) => toTitleCase(s))\n    .join('');\n};\n\nexport const releaseStatusReducer = (release: HelmRelease) => {\n  if (OtherReleaseStatuses.includes(release.info.status)) {\n    return HelmReleaseStatus.Other;\n  }\n  return release.info.status;\n};\n\nexport const helmReleasesRowFilters = (t: TFunction): RowFilter[] => {\n  return [\n    {\n      filterGroupName: t('helm-plugin~Status'),\n      type: 'helm-release-status',\n      reducer: releaseStatusReducer,\n      items: SelectedReleaseStatuses.map((status) => ({\n        id: status,\n        title: HelmReleaseStatusLabels[status],\n      })),\n    },\n  ];\n};\n\nexport const filterHelmReleasesByStatus = (releases: HelmRelease[], filter: string | string[]) => {\n  return releases.filter((release: HelmRelease) => {\n    return OtherReleaseStatuses.includes(release.info.status)\n      ? filter.includes(HelmReleaseStatus.Other)\n      : filter.includes(release.info.status);\n  });\n};\n\nexport const filterHelmReleasesByName = (releases: HelmRelease[], filter: string) => {\n  return releases.filter((release: HelmRelease) => fuzzy(filter, release.name));\n};\n\nexport const fetchHelmReleases = (\n  namespace: string,\n  limitInfo?: boolean,\n): Promise<HelmRelease[]> => {\n  const fetchString = `/api/helm/releases?ns=${namespace}&limitInfo=${limitInfo || false}`;\n  return coFetchJSON(fetchString);\n};\n\nexport const fetchHelmRelease = (\n  namespace: string,\n  helmReleaseName: string,\n): Promise<HelmRelease> => {\n  const fetchString = `/api/helm/release?ns=${namespace}&name=${helmReleaseName}`;\n  return coFetchJSON(fetchString);\n};\n\nexport const getChartURL = (\n  helmChartData: HelmChartMetaData[],\n  chartVersion: string,\n  chartRepoName: string,\n): string => {\n  const chartData: HelmChartMetaData = helmChartData.find(\n    (obj) => obj.version === chartVersion && obj.repoName === chartRepoName,\n  );\n  return chartData?.urls[0];\n};\n\nexport const getChartRepositoryTitle = (\n  chartRepositories: K8sResourceKind[],\n  chartRepoName: string,\n) => {\n  const chartRepository = chartRepositories?.find((repo) => repo.metadata.name === chartRepoName);\n  if (chartRepository?.spec?.name) {\n    return chartRepository.spec.name;\n  }\n  if (chartRepoName) {\n    return toTitleCase(chartRepoName);\n  }\n  return null;\n};\n\nexport const getChartIndexEntry = (\n  chartEntries: HelmChartEntries,\n  chartName: string,\n  chartRepoName: string,\n) => {\n  const repoName = chartRepoName.toLowerCase().split(' ').join('-');\n  const indexEntry = Object.keys(chartEntries).find((val) =>\n    val.includes(`${chartName}--${repoName}`),\n  );\n  return indexEntry;\n};\n\nexport const getChartEntriesByName = (\n  chartEntries: HelmChartEntries,\n  chartName: string,\n  chartRepoName?: string,\n  chartRepositories?: K8sResourceKind[],\n  annotatedName?: string,\n  providerName?: string,\n): HelmChartMetaData[] => {\n  if (chartName && chartRepoName) {\n    const chartRepositoryTitle = getChartRepositoryTitle(chartRepositories, chartRepoName);\n    const indexEntry = getChartIndexEntry(chartEntries, chartName, chartRepoName);\n    return (\n      chartEntries?.[indexEntry]?.map((e) => ({\n        ...e,\n        repoName: chartRepositoryTitle,\n      })) ?? []\n    );\n  }\n  const entries = _.reduce(\n    chartEntries,\n    (acc, charts, key) => {\n      const repoName = key.split('--').pop();\n      const chartRepositoryTitle = getChartRepositoryTitle(chartRepositories, repoName);\n      charts.forEach((chart: HelmChartMetaData) => {\n        if (\n          chart.name === chartName ||\n          (annotatedName &&\n            providerName &&\n            chart?.annotations?.[CHART_NAME_ANNOTATION] === annotatedName &&\n            chart?.annotations?.[PROVIDER_NAME_ANNOTATION] === providerName)\n        ) {\n          acc.push({ ...chart, repoName: chartRepositoryTitle });\n        }\n      });\n      return acc;\n    },\n    [],\n  );\n  return entries;\n};\n\nexport const concatVersions = (\n  chartVersion: string,\n  appVersion: string,\n  t: TFunction,\n  chartRepoName?: string,\n): string => {\n  let title = chartVersion.split('--')[0];\n  if (appVersion) {\n    title += t('helm-plugin~ / App Version {{appVersion}}', { appVersion });\n  }\n  if (chartRepoName) {\n    title += t('helm-plugin~ (Provided by {{chartRepoName}})', {\n      chartRepoName: toTitleCase(chartRepoName),\n    });\n  }\n  return title;\n};\n\nexport const getChartVersions = (chartEntries: HelmChartMetaData[], t: TFunction) => {\n  const chartVersions = _.reduce(\n    chartEntries,\n    (obj, chart) => {\n      obj[`${chart.version}--${chart.repoName}`] = concatVersions(\n        chart.version,\n        chart.appVersion,\n        t,\n        chart.repoName,\n      );\n      return obj;\n    },\n    {},\n  );\n  return chartVersions;\n};\n\nexport const getOriginRedirectURL = (\n  actionOrigin: string,\n  namespace: string,\n  releaseName?: string,\n) => {\n  switch (actionOrigin) {\n    case HelmActionOrigins.topology:\n      return `/topology/ns/${namespace}`;\n    case HelmActionOrigins.list:\n      return `/helm-releases/ns/${namespace}`;\n    case HelmActionOrigins.details:\n      return `/helm-releases/ns/${namespace}/release/${releaseName}`;\n    default:\n      return `/helm-releases/ns/${namespace}`;\n  }\n};\n\nexport const getHelmActionConfig = (\n  helmAction: HelmActionType,\n  releaseName: string,\n  namespace: string,\n  t: TFunction,\n  actionOrigin?: HelmActionOrigins,\n  chartURL?: string,\n  chartIndexEntry?: string,\n): HelmActionConfigType | undefined => {\n  switch (helmAction) {\n    case HelmActionType.Create:\n      return {\n        type: HelmActionType.Create,\n        title: t('helm-plugin~Create Helm Release'),\n        subTitle: {\n          form: t(\n            'helm-plugin~The Helm Release can be created by completing the form. Default values may be provided by the Helm chart authors.',\n          ),\n          yaml: t(\n            'helm-plugin~The Helm Release can be created by manually entering YAML or JSON definitions.',\n          ),\n        },\n        helmReleaseApi: `/api/helm/chart?url=${encodeURIComponent(\n          chartURL,\n        )}&namespace=${namespace}&indexEntry=${encodeURIComponent(chartIndexEntry)}`,\n        fetch: coFetchJSON.post,\n        redirectURL: getOriginRedirectURL(HelmActionOrigins.topology, namespace, releaseName),\n      };\n    case HelmActionType.Upgrade:\n      return {\n        type: HelmActionType.Upgrade,\n        title: t('helm-plugin~Upgrade Helm Release'),\n        subTitle: {\n          form: t(\n            'helm-plugin~Upgrade by selecting a new chart version or manually changing the form values.',\n          ),\n          yaml: t(\n            'helm-plugin~Upgrade by selecting a new chart version or manually changing YAML.',\n          ),\n        },\n        helmReleaseApi: `/api/helm/release?ns=${namespace}&name=${releaseName}`,\n        fetch: coFetchJSON.put,\n        redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n      };\n\n    case HelmActionType.Rollback:\n      return {\n        type: HelmActionType.Rollback,\n        title: t('helm-plugin~Rollback Helm Release'),\n        subTitle: ``,\n        helmReleaseApi: `/api/helm/release/history?ns=${namespace}&name=${releaseName}`,\n        fetch: coFetchJSON.patch,\n        redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n      };\n    default:\n      return undefined;\n  }\n};\n\nexport const flattenReleaseResources: Flatten = (resources) =>\n  Object.keys(resources).reduce((acc, kind) => {\n    if (!_.isEmpty(resources[kind].data)) {\n      acc.push(resources[kind].data);\n    }\n    return acc;\n  }, []);\n\nexport const getChartValuesYAML = (chart: HelmChart): string => {\n  const orderedValuesFile = chart?.files?.find((file) => file.name === 'ordered-values.yaml');\n  const orderedValues = orderedValuesFile ? atob(orderedValuesFile.data) : '';\n\n  if (orderedValues) return orderedValues;\n\n  return !_.isEmpty(chart?.values) ? safeDump(chart?.values) : '';\n};\n\nexport const loadHelmManifestResources = (release: HelmRelease): K8sResourceKind[] => {\n  if (!release || !release.manifest) {\n    return [];\n  }\n  const manifests = loadAll(release.manifest, null, { schema: DEFAULT_SAFE_SCHEMA, json: true });\n  return manifests.filter(Boolean);\n};\n\nexport const getChartReadme = (chart: HelmChart): string => {\n  const readmeFile = chart?.files?.find((file) => file.name === 'README.md');\n  return (readmeFile?.data && atob(readmeFile?.data)) ?? '';\n};\n\nexport const helmActionString = (t: TFunction) => ({\n  Create: t('helm-plugin~Create'),\n  Upgrade: t('helm-plugin~Upgrade'),\n  Rollback: t('helm-plugin~Rollback'),\n});\n\nexport const fetchHelmReleaseHistory = (\n  releaseName: string,\n  namespace: string,\n): Promise<HelmRelease[]> => {\n  const helmReleaseApi: string = `/api/helm/release/history?ns=${namespace}&name=${releaseName}`;\n  return coFetchJSON(helmReleaseApi);\n};\n\nexport const isGoingToTopology = (resources: K8sResourceKind[]) =>\n  !!resources.find((resource) =>\n    WORKLOAD_TYPES.includes(_.lowerFirst(_.get(modelFor(referenceFor(resource)), 'labelPlural'))),\n  );\n","import { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport interface HelmRelease {\n  name: string;\n  namespace: string;\n  chart: HelmChart;\n  info: {\n    description: string;\n    deleted: string;\n    first_deployed: string;\n    last_deployed: string;\n    status: string;\n    notes: string;\n  };\n  version: number | string;\n  hooks?: object[];\n  manifest?: string;\n}\n\nexport interface HelmChart {\n  files: { name: string; data: string }[];\n  metadata: HelmChartMetaData;\n  templates: object[];\n  values: object;\n  lock?: object;\n  schema?: string;\n}\n\nexport interface HelmChartMetaData {\n  name: string;\n  version: string;\n  created?: string;\n  description?: string;\n  digest?: string;\n  apiVersion: string;\n  appVersion?: string;\n  annotations?: {\n    [key: string]: string;\n  };\n  keywords?: string[];\n  home?: string;\n  icon?: string;\n  sources?: string[];\n  maintainers?: { name: string; email?: string; url?: string }[];\n  dependencies?: object[];\n  type?: string;\n  urls: string[];\n  kubeVersion?: string;\n  repoName?: string;\n}\n\nexport type HelmChartEntries = {\n  [name: string]: HelmChartMetaData[];\n};\n\nexport interface HelmReleaseResourcesData {\n  releaseName: string;\n  releaseVersion: number | string;\n  chartIcon: string;\n  manifestResources: K8sResourceKind[];\n  releaseNotes: string;\n  status: string;\n}\n\nexport interface HelmReleaseResourcesMap {\n  [name: string]: HelmReleaseResourcesData;\n}\n\nexport enum HelmReleaseStatus {\n  Deployed = 'deployed',\n  Failed = 'failed',\n  PendingInstall = 'pending-install',\n  PendingUpgrade = 'pending-upgrade',\n  PendingRollback = 'pending-rollback',\n  Other = 'other',\n}\n\nexport enum HelmActionType {\n  Create = 'Create',\n  Upgrade = 'Upgrade',\n  Rollback = 'Rollback',\n}\n\nexport interface HelmActionConfigType {\n  type: HelmActionType;\n  title: string;\n  subTitle: string | { form: string; yaml: string };\n  helmReleaseApi: string;\n  fetch: (url: string, json: any, options?: {}, timeout?: number) => Promise<any>;\n  redirectURL: string;\n}\n\nexport enum HelmActionOrigins {\n  details = 'details',\n  list = 'list',\n  topology = 'topology',\n}\n\nexport interface HelmChartRepositoryType {\n  apiVersion: string;\n  kind: string;\n  metadata: {\n    name: string;\n    namespace?: string;\n    labels?: { [key: string]: string };\n    annotations?: { [key: string]: string };\n  };\n  spec: {\n    connectionConfig: {\n      url: string;\n      ca?: { name: string };\n      tlsClientConfig?: { name: string };\n    };\n    description?: string;\n    disabled?: boolean;\n    name?: string;\n  };\n}\n\nexport interface HelmChartRepositoryFormData {\n  repoName: string;\n  repoUrl: string;\n  repoDisplayName?: string;\n  scope: string;\n  repoDescription?: string;\n  ca?: string;\n  tlsClientConfig?: string;\n  disabled?: boolean;\n  metadata?: object;\n}\n\nexport interface HelmChartRepositoryData {\n  editorType: string;\n  yamlData: string;\n  formData: HelmChartRepositoryFormData;\n  formReloadCount?: number;\n}\n","// Annotation for human readable chart name, ready to be displayed in UI\nexport const CHART_NAME_ANNOTATION = 'charts.openshift.io/name';\n// Annotation for chart category, e.g. redhat, partner, community\nexport const PROVIDER_TYPE_ANNOTATION = 'charts.openshift.io/providerType';\n// Annotation for provider name, e.g. Fortanix, HashiCorp, etc\nexport const PROVIDER_NAME_ANNOTATION = 'charts.openshift.io/provider';\n// Annotation for support URL by the provider\nexport const SUPPORT_URL_ANNOTATION = 'charts.openshift.io/supportURL';\n\nexport enum PROVIDER_TYPE {\n  redhat = 'redhat',\n  partner = 'partner',\n  community = 'community',\n}\n\nexport const PROVIDER_TYPE_KEYS = {\n  // t('helm-plugin~Community')\n  community: 'helm-plugin~Community',\n  // t('helm-plugin~Partner')\n  partner: 'helm-plugin~Partner',\n  // t('helm-plugin~Red Hat')\n  redhat: 'helm-plugin~Red Hat',\n};\n","import * as React from 'react';\nimport { safeLoad } from 'js-yaml';\nimport { useTranslation } from 'react-i18next';\nimport { ExtensionHook, CatalogItem, WatchK8sResults } from '@console/dynamic-plugin-sdk';\nimport { coFetch } from '@console/internal/co-fetch';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { APIError, useActiveNamespace } from '@console/shared';\nimport { HelmChartRepositoryModel, ProjectHelmChartRepositoryModel } from '../../models';\nimport { HelmChartEntries } from '../../types/helm-types';\nimport { normalizeHelmCharts } from '../utils/catalog-utils';\n\ntype WatchResource = {\n  [key: string]: K8sResourceKind[];\n};\n\nconst useHelmCharts: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n  const [activeNamespace] = useActiveNamespace();\n  const [helmCharts, setHelmCharts] = React.useState<HelmChartEntries>();\n  const [loadedError, setLoadedError] = React.useState<APIError>();\n\n  const resourceSelector = React.useMemo(\n    () => ({\n      hcrs: {\n        isList: true,\n        kind: referenceForModel(HelmChartRepositoryModel),\n      },\n      phcrs: {\n        isList: true,\n        kind: referenceForModel(ProjectHelmChartRepositoryModel),\n        namespace,\n      },\n    }),\n    [namespace],\n  );\n\n  const chartRepositories: WatchK8sResults<WatchResource> = useK8sWatchResources<WatchResource>(\n    resourceSelector,\n  );\n\n  const chartRepositoriesLoaded =\n    Object.keys(chartRepositories).length > 0 &&\n    Object.values(chartRepositories).some((value) => value.loaded || !!value.loadError);\n\n  React.useEffect(() => {\n    let mounted = true;\n    coFetch(`/api/helm/charts/index.yaml?namespace=${activeNamespace}`)\n      .then(async (res) => {\n        if (mounted) {\n          const yaml = await res.text();\n          const json = safeLoad(yaml);\n          setHelmCharts(json.entries);\n        }\n      })\n      .catch((err) => {\n        if (mounted) {\n          setHelmCharts({});\n          setLoadedError(err);\n        }\n      });\n    return () => (mounted = false);\n  }, [activeNamespace]);\n\n  const normalizedHelmCharts: CatalogItem[] = React.useMemo(\n    () =>\n      normalizeHelmCharts(\n        helmCharts,\n        [...chartRepositories?.hcrs?.data, ...chartRepositories?.phcrs?.data],\n        namespace,\n        t,\n      ),\n    [chartRepositories, helmCharts, namespace, t],\n  );\n\n  const loaded = !!helmCharts && chartRepositoriesLoaded;\n\n  return [normalizedHelmCharts, loaded, loadedError];\n};\n\nexport default useHelmCharts;\n","import * as React from 'react';\nimport { Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useAccessReview } from '@console/dynamic-plugin-sdk/src';\nimport { useActiveNamespace } from '@console/shared/src/hooks/useActiveNamespace';\nimport { ProjectHelmChartRepositoryModel } from '../../models';\n\nconst LinkToCreatePHCR: React.FC = () => {\n  const [namespace] = useActiveNamespace();\n  const [isAllowed] = useAccessReview({\n    group: ProjectHelmChartRepositoryModel.apiGroup,\n    resource: ProjectHelmChartRepositoryModel.plural,\n    verb: 'create',\n    namespace,\n  });\n\n  const createPHCR = (\n    <>\n      {' '}\n      <Trans ns=\"helm-plugin\">\n        Alternatively, developers can{' '}\n        <Link to={`/ns/${namespace}/helmchartrepositories/~new/form?actionOrigin=catalog`}>\n          try to configure their own custom Helm Chart repository\n        </Link>\n        .\n      </Trans>\n    </>\n  );\n\n  return isAllowed ? createPHCR : null;\n};\n\nconst HelmCatalogTypeDescription: React.FC = () => {\n  return (\n    <>\n      <Trans ns=\"helm-plugin\">\n        Browse for charts that help manage complex installations and upgrades. Cluster\n        administrators can customize the content made available in the catalog.\n        <LinkToCreatePHCR />\n      </Trans>\n    </>\n  );\n};\n\nexport default HelmCatalogTypeDescription;\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport {\n  CatalogItem,\n  CatalogItemDetailsDescription,\n  CatalogItemDetailsProperty,\n} from '@console/dynamic-plugin-sdk';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { ExternalLink } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { toTitleCase } from '@console/shared';\nimport certifiedIcon from '../../../icons/certified.svg';\nimport { HelmChartEntries, HelmChartMetaData } from '../../types/helm-types';\nimport { getChartRepositoryTitle } from '../../utils/helm-utils';\nimport HelmReadmeLoader from '../components/HelmReadmeLoader';\nimport {\n  CHART_NAME_ANNOTATION,\n  PROVIDER_TYPE,\n  PROVIDER_TYPE_ANNOTATION,\n  PROVIDER_TYPE_KEYS,\n  PROVIDER_NAME_ANNOTATION,\n  SUPPORT_URL_ANNOTATION,\n} from './const';\n\nexport const normalizeHelmCharts = (\n  chartEntries: HelmChartEntries,\n  chartRepositories: K8sResourceKind[],\n  activeNamespace: string = '',\n  t: TFunction,\n): CatalogItem[] => {\n  return _.reduce(\n    chartEntries,\n    (normalizedCharts, charts, key) => {\n      const chartRepoName = key.split('--').pop();\n      const chartRepositoryTitle = getChartRepositoryTitle(chartRepositories, chartRepoName);\n\n      charts.forEach((chart: HelmChartMetaData) => {\n        const { name, created, version, appVersion, description, keywords, annotations } = chart;\n\n        const annotatedName = annotations?.[CHART_NAME_ANNOTATION] ?? '';\n        const providerType = annotations?.[PROVIDER_TYPE_ANNOTATION] ?? '';\n        const providerName = annotations?.[PROVIDER_NAME_ANNOTATION] ?? '';\n        const supportUrl = annotations?.[SUPPORT_URL_ANNOTATION] ?? '';\n        const displayName = annotatedName || `${toTitleCase(name)}`;\n        const imgUrl = chart.icon || getImageForIconClass('icon-helm');\n        const chartURL = chart.urls[0];\n        const encodedChartURL = encodeURIComponent(chartURL);\n        const encodedChartRepoName = encodeURIComponent(chartRepoName);\n        const encodedChartName = encodeURIComponent(name);\n        const encodedChartIndexKey = encodeURIComponent(key);\n        const href = `/catalog/helm-install?chartName=${encodedChartName}&chartRepoName=${encodedChartRepoName}&chartURL=${encodedChartURL}&preselected-ns=${activeNamespace}&indexEntry=${encodedChartIndexKey}`;\n\n        const translatedProviderType = PROVIDER_TYPE_KEYS[providerType]\n          ? t(PROVIDER_TYPE_KEYS[providerType])\n          : _.capitalize(providerType);\n\n        const title =\n          providerType === PROVIDER_TYPE.partner ? (\n            <>\n              <span style={{ verticalAlign: 'middle' }}>{displayName}</span>{' '}\n              <Tooltip\n                content={t(\n                  'helm-plugin~This Helm Chart is provided by a trusted partner and has been verified for ease of integration.',\n                )}\n              >\n                <img src={certifiedIcon} alt={t('helm-plugin~Certified')} />\n              </Tooltip>\n            </>\n          ) : null;\n\n        const maintainers = chart.maintainers?.length > 0 && (\n          <>\n            {chart.maintainers?.map((maintainer, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <React.Fragment key={index}>\n                {maintainer.name}\n                <br />\n                <a href={`mailto:${maintainer.email}`}>{maintainer.email}</a>\n                <br />\n              </React.Fragment>\n            ))}\n          </>\n        );\n\n        const homePage = chart.home && (\n          <ExternalLink href={chart.home} additionalClassName=\"co-break-all\" text={chart.home} />\n        );\n\n        const detailsProperties: CatalogItemDetailsProperty[] = [\n          {\n            label: t('helm-plugin~Latest Chart version'),\n            value: version,\n          },\n          {\n            label: t('helm-plugin~Product version'),\n            value: appVersion,\n          },\n          {\n            label: t('helm-plugin~Source'),\n            value: translatedProviderType,\n          },\n          {\n            label: t('helm-plugin~Provider'),\n            value: providerName,\n          },\n          {\n            label: t('helm-plugin~Home page'),\n            value: homePage,\n          },\n          {\n            label: t('helm-plugin~Repository'),\n            value: chartRepositoryTitle,\n          },\n          {\n            label: t('helm-plugin~Maintainers'),\n            value: maintainers,\n          },\n          {\n            label: t('helm-plugin~Documentation'),\n            value: '',\n            isHidden: true,\n          },\n        ];\n\n        const detailsDescriptions: CatalogItemDetailsDescription[] = [\n          {\n            label: t('helm-plugin~Description'),\n            value: <p>{description}</p>,\n          },\n          {\n            value: (\n              <HelmReadmeLoader\n                chartURL={chartURL}\n                namespace={activeNamespace}\n                chartIndexEntry={key}\n              />\n            ),\n          },\n        ];\n\n        const helmChart: CatalogItem = {\n          uid: `${chartRepoName}--${chartURL}`,\n          type: 'HelmChart',\n          name: displayName,\n          title,\n          description,\n          provider: providerName,\n          tags: keywords,\n          creationTimestamp: created,\n          attributes: {\n            name,\n            chartRepositoryTitle,\n            version,\n            providerType: translatedProviderType,\n          },\n          icon: {\n            class: null,\n            url: imgUrl,\n          },\n          cta: {\n            label: t('helm-plugin~Create'),\n            href,\n          },\n          details: {\n            properties: detailsProperties,\n            descriptions: detailsDescriptions,\n          },\n          supportUrl,\n        };\n\n        // group Helm chart with same name and different version together\n        const existingChartIndex = normalizedCharts.findIndex((currentChart) => {\n          return (\n            (currentChart.attributes?.name === name &&\n              currentChart.attributes?.chartRepositoryTitle === chartRepositoryTitle) ||\n            (currentChart.name === annotatedName && currentChart.provider === providerName)\n          );\n        });\n\n        if (existingChartIndex > -1) {\n          const existingChart = normalizedCharts[existingChartIndex];\n          const versionCompare = helmChart.attributes?.version?.localeCompare(\n            existingChart?.attributes?.version,\n            undefined,\n            { numeric: true, sensitivity: 'base' },\n          );\n\n          if (versionCompare === 1) {\n            normalizedCharts[existingChartIndex] = helmChart;\n          }\n        } else {\n          normalizedCharts.push(helmChart);\n        }\n      });\n      return normalizedCharts;\n    },\n    [] as CatalogItem[],\n  );\n};\n","module.exports = __webpack_public_path__ + \"assets/packages/helm-plugin/icons/certified.svg\";","import * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { useTranslation } from 'react-i18next';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\n\ntype HelmReadmeLoaderProps = {\n  chartURL: string;\n  namespace: string;\n  chartIndexEntry: string;\n};\n\nconst HelmReadmeLoader: React.FC<HelmReadmeLoaderProps> = ({\n  chartURL,\n  namespace,\n  chartIndexEntry,\n}) => {\n  const { t } = useTranslation();\n  const [readme, setReadme] = React.useState<string>();\n  const [loaded, setLoaded] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    let unmounted = false;\n\n    const fetchReadme = async () => {\n      let chartData;\n\n      try {\n        chartData = await coFetchJSON(\n          `/api/helm/chart?url=${encodeURIComponent(\n            chartURL,\n          )}&namespace=${namespace}&indexEntry=${encodeURIComponent(chartIndexEntry)}`,\n        );\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Error fetching helm chart details for readme', e);\n      }\n\n      const readmeFile = chartData?.files?.find((file) => file.name === 'README.md');\n      const readmeData = readmeFile?.data && Base64.decode(readmeFile?.data);\n\n      if (!unmounted) {\n        setLoaded(true);\n        readmeData && setReadme(`## ${t('helm-plugin~README')}\\n${readmeData}`);\n      }\n    };\n\n    fetchReadme();\n\n    return () => {\n      unmounted = true;\n    };\n  }, [chartIndexEntry, chartURL, namespace, t]);\n\n  if (!loaded) return <div className=\"loading-skeleton--table\" />;\n\n  return <SyncMarkdownView content={readme} emptyMsg={t('helm-plugin~README not available')} />;\n};\n\nexport default HelmReadmeLoader;\n"],"sourceRoot":""}