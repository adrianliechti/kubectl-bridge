{"version":3,"sources":["webpack:///./public/components/monitoring/receiver-forms/routing-labels-editor.tsx","webpack:///./public/components/monitoring/receiver-forms/pagerduty-receiver-form.tsx","webpack:///./public/components/monitoring/receiver-forms/webhook-receiver-form.tsx","webpack:///./public/components/monitoring/receiver-forms/email-receiver-form.tsx","webpack:///./public/components/monitoring/receiver-forms/slack-receiver-form.tsx","webpack:///./public/components/monitoring/receiver-forms/alert-manager-receiver-forms.tsx","webpack:///./public/components/monitoring/receiver-forms/send-resolved-alerts-checkbox.tsx","webpack:///./public/components/monitoring/receiver-forms/save-as-default-checkbox.tsx"],"names":["hasDuplicateNames","labels","length","RoutingLabelEditor","formValues","dispatchFormChange","isDefaultReceiver","setRouteLabel","path","v","routeLabels","splice","type","payload","routeLabelDuplicateNamesError","t","className","text","required","ns","href","key","value","disabled","routeLabel","i","onChange","e","target","placeholder","content","onClick","removeRoutingLabel","isDisabled","variant","GLOBAL_FIELDS","Form","globals","htmlFor","title","id","pagerdutyIntegrationKeyType","checked","inline","name","pagerdutyIntegrationKey","pagerduty_url","formField","label","tooltip","textCollapsed","textExpanded","dataTest","pagerduty_client","pagerduty_client_url","pagerduty_description","pagerduty_severity","getInitialValues","receiverConfig","initValues","pagerdutySaveAsDefault","service_key","routing_key","forEach","fld","configFieldName","substring","indexOf","isFormInvalid","updateGlobals","updatedGlobals","createReceiverConfig","pagerdutyIntegrationKeyName","formValue","webhookUrl","url","webhookSendResolved","webhook_send_resolved","SMTP_GLOBAL_FIELDS","disableSaveAsDefault","every","propName","emailTo","smtp_from","smtp_smarthost","smtp_hello","smtp_auth_username","smtp_auth_password","smtp_auth_identity","smtp_auth_secret","smtp_require_tls","email_html","getConfigFieldName","emailSaveAsDefault","to","undefined","includes","slack_api_url","slackChannel","slackIconType","slack_icon_url","slack_icon_emoji","slack_username","slack_link_names","_event","slack_title","slack_text","slackSaveAsDefault","subformFactory","receiverType","formReducer","action","console","error","getRouteLabelsForEditor","receiverToEdit","allRoutes","receiverRoutes","aRoute","receiver","convertedRouteLabels","match","k","match_re","convertDeprecatedReceiverRoutesMatchesToMatchers","matchers","AlertMsg","Default","Critical","Watchdog","ReceiverInfoTip","isInline","ReceiverBaseForm","obj","secret","titleVerb","saveButtonText","editReceiverNamed","alertmanagerGlobals","navigate","saveErrorMsg","setSaveErrorMsg","inProgress","setInProgress","config","errorMessage","loadErrorMsg","route","global","advancedConfigGlobals","defaultGlobals","INITIAL_STATE","receiverName","defaultReceiver","receivers","filter","routes","SubForm","receiverNameAlreadyExist","map","doesReceiverNameAlreadyExist","routeLabelFieldErrors","receiverTypeLabel","defaultString","onSubmit","preventDefault","updateConfig","newReceiver","createReceiver","index","push","newRoute","then","err","message","items","dropDownClassName","selectedKey","ReceiverWrapper","props","alertManagerBaseURL","window","SERVER_FLAGS","setAlertmanagerGlobals","loaded","setLoaded","loadError","setLoadError","data","originalAlertmanagerConfigJSON","original","catch","resources","kind","namespace","isList","prop","CreateReceiver","EditReceiver","params","SendResolvedAlertsCheckbox","SaveAsDefaultCheckbox","saveAsDefaultLabelClass"],"mappings":"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","file":"receiver-forms-chunk-97b9fbb7ff8ccc03cb98.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { ExternalLink, SectionHeading } from '../../utils';\n\nconst DEFAULT_RECEIVER_LABEL = 'All (default receiver)';\n\nconst hasDuplicateNames = (labels: string[]): boolean => {\n  return labels.length !== _.uniq(labels).length;\n};\n\nexport const RoutingLabelEditor = ({ formValues, dispatchFormChange, isDefaultReceiver }) => {\n  const setRouteLabel = (path: number, v: string): void => {\n    const labels = _.clone(formValues.routeLabels);\n    labels.splice(path, 1, v);\n    dispatchFormChange({\n      type: 'setFormValues',\n      payload: {\n        routeLabels: labels,\n        routeLabelDuplicateNamesError: hasDuplicateNames(labels),\n      },\n    });\n  };\n\n  const onRoutingLabelChange = (path: number): ((e) => void) => {\n    return (e) => setRouteLabel(path, e.target.value);\n  };\n\n  const addRoutingLabel = (): void => {\n    setRouteLabel(formValues.routeLabels.length, '');\n  };\n\n  const removeRoutingLabel = (i: number): void => {\n    const labels = _.clone(formValues.routeLabels);\n    labels.splice(i, 1);\n    dispatchFormChange({\n      type: 'setFormValues',\n      payload: {\n        routeLabels: labels,\n        routeLabelDuplicateNamesError: hasDuplicateNames(labels),\n      },\n    });\n  };\n\n  const { t } = useTranslation();\n\n  return (\n    <div data-test-id=\"receiver-routing-labels-editor\" className=\"form-group\">\n      <SectionHeading text={t('public~Routing labels')} required={!isDefaultReceiver} />\n      <p className=\"co-help-text pf-u-mb-md\">\n        <Trans ns=\"public\">\n          Firing alerts with labels that match all of these{' '}\n          <ExternalLink\n            href=\"https://prometheus.io/docs/alerting/latest/configuration/#matcher\"\n            text={t('public~matchers')}\n          />{' '}\n          will be sent to this receiver.\n        </Trans>\n      </p>\n      {isDefaultReceiver && (\n        <div className=\"row form-group\" key=\"default\">\n          <div className=\"col-xs-10\">\n            <div className=\"form-group\">\n              <input\n                type=\"text\"\n                className=\"pf-c-form-control\"\n                data-test-id=\"label-default\"\n                value={DEFAULT_RECEIVER_LABEL}\n                disabled\n                required\n              />\n            </div>\n          </div>\n        </div>\n      )}\n      {_.map(formValues.routeLabels, (routeLabel, i: number) => {\n        return (\n          <div className=\"row form-group\" key={i}>\n            <div className=\"col-xs-10\">\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  className=\"pf-c-form-control\"\n                  data-test-id={`label-${i}`}\n                  onChange={onRoutingLabelChange(i)}\n                  placeholder={t('public~Matcher')}\n                  value={routeLabel}\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"col-xs-2\">\n              <Tooltip content={t('public~Remove')}>\n                <Button\n                  type=\"button\"\n                  onClick={() => removeRoutingLabel(i)}\n                  aria-label={t('public~Remove')}\n                  isDisabled={!isDefaultReceiver && formValues.routeLabels.length <= 1}\n                  variant=\"plain\"\n                  data-test-id=\"remove-routing-label\"\n                >\n                  <MinusCircleIcon />\n                </Button>\n              </Tooltip>\n            </div>\n          </div>\n        );\n      })}\n      {formValues.routeLabelDuplicateNamesError && (\n        <div className=\"form-group co-routing-label-editor__error-message\">\n          <span className=\"help-block\">\n            <span data-test-id=\"duplicate-label-error\" className=\"co-error\">\n              {t('public~Routing label names must be unique.')}\n            </span>\n          </span>\n        </div>\n      )}\n      {!isDefaultReceiver && (\n        <Button\n          className=\"pf-m-link--align-left\"\n          onClick={addRoutingLabel}\n          type=\"button\"\n          variant=\"link\"\n          data-test-id=\"add-routing-label\"\n        >\n          <PlusCircleIcon className=\"co-icon-space-r\" />\n          {t('public~Add label')}\n        </Button>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { RadioInput } from '../../radio';\nimport { SendResolvedAlertsCheckbox } from './send-resolved-alerts-checkbox';\nimport { SaveAsDefaultCheckbox } from './save-as-default-checkbox';\nimport { FormProps } from './receiver-form-props';\nimport { ExpandCollapse } from '../../utils';\n\nconst GLOBAL_FIELDS = [\n  'pagerduty_url',\n  'pagerduty_send_resolved',\n  'pagerduty_client',\n  'pagerduty_client_url',\n  'pagerduty_description',\n  'pagerduty_severity',\n];\n\nexport const Form: React.FC<FormProps> = ({ globals, formValues, dispatchFormChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div data-test-id=\"pagerduty-receiver-form\">\n      <div className=\"form-group\">\n        <label className=\"control-label\" htmlFor=\"integration-type-events\">\n          {t('public~Integration type')}\n        </label>\n        <div>\n          <RadioInput\n            title={t('public~Events API v2')}\n            id=\"integration-type-events\"\n            value=\"events\"\n            onChange={(e) =>\n              dispatchFormChange({\n                type: 'setFormValues',\n                payload: { pagerdutyIntegrationKeyType: e.target.value },\n              })\n            }\n            checked={formValues.pagerdutyIntegrationKeyType === 'events'}\n            aria-checked={formValues.pagerdutyIntegrationKeyType === 'events'}\n            inline\n          />\n          <RadioInput\n            title={t('public~Prometheus')}\n            name=\"pagerdutyIntegrationKeyType\"\n            data-test-id=\"integration-type-prometheus\"\n            value=\"prometheus\"\n            onChange={(e) =>\n              dispatchFormChange({\n                type: 'setFormValues',\n                payload: { pagerdutyIntegrationKeyType: e.target.value },\n              })\n            }\n            checked={formValues.pagerdutyIntegrationKeyType === 'prometheus'}\n            aria-checked={formValues.pagerdutyIntegrationKeyType === 'prometheus'}\n            inline\n          />\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label\n          data-test-id=\"pagerduty-key-label\"\n          className=\"control-label co-required\"\n          htmlFor=\"integration-key\"\n        >\n          {formValues.pagerdutyIntegrationKeyType === 'events'\n            ? t('public~Routing key')\n            : t('public~Service key')}\n        </label>\n        <input\n          className=\"pf-v5-c-form-control\"\n          type=\"text\"\n          aria-describedby=\"integration-key-help\"\n          id=\"integration-key\"\n          data-test-id=\"integration-key\"\n          value={formValues.pagerdutyIntegrationKey}\n          onChange={(e) =>\n            dispatchFormChange({\n              type: 'setFormValues',\n              payload: { pagerdutyIntegrationKey: e.target.value },\n            })\n          }\n        />\n        <div className=\"help-block\" id=\"integration-key-help\">\n          {t('public~PagerDuty integration key.')}\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label\n          data-test-id=\"pagerduty-url-label\"\n          className=\"control-label co-required\"\n          htmlFor=\"pagerduty-url\"\n        >\n          {t('public~PagerDuty URL')}\n        </label>\n        <div className=\"row\">\n          <div className=\"col-sm-7\">\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              id=\"pagerduty-url\"\n              aria-describedby=\"pagerduty-url-help\"\n              data-test-id=\"pagerduty-url\"\n              value={formValues.pagerduty_url}\n              onChange={(e) =>\n                dispatchFormChange({\n                  type: 'setFormValues',\n                  payload: { pagerduty_url: e.target.value },\n                })\n              }\n            />\n          </div>\n          <div className=\"col-sm-5\">\n            <SaveAsDefaultCheckbox\n              formField=\"pagerdutySaveAsDefault\"\n              disabled={formValues.pagerduty_url === globals?.pagerduty_url}\n              label={t('public~Save as default PagerDuty URL')}\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n              tooltip={t(\n                'public~Checking this box will write the URL to the global section of the configuration file where it will become the default URL for future PagerDuty receivers.',\n              )}\n            />\n          </div>\n        </div>\n        <div className=\"help-block\" id=\"pagerduty-url-help\">\n          {t('public~The URL of your PagerDuty installation.')}\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <ExpandCollapse\n          textCollapsed={t('public~Show advanced configuration')}\n          textExpanded={t('public~Hide advanced configuration')}\n          dataTest=\"advanced-configuration\"\n        >\n          <div className=\"co-form-subsection\">\n            <SendResolvedAlertsCheckbox\n              formField=\"pagerduty_send_resolved\"\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n            />\n            <h3>{t('public~Client details')}</h3>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"pagerduty-client\">\n                {t('public~Client')}\n              </label>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"client-help\"\n                id=\"pagerduty-client\"\n                data-test-id=\"pagerduty-client\"\n                value={formValues.pagerduty_client}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { pagerduty_client: e.target.value },\n                  })\n                }\n              />\n              <div className=\"help-block\" id=\"client-help\">\n                {t('public~The client identification of the Alertmanager.')}\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"pagerduty-client-url\">\n                {t('public~Client URL')}\n              </label>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"client-url-help\"\n                id=\"pagerduty-client-url\"\n                data-test-id=\"pagerduty-client-url\"\n                value={formValues.pagerduty_client_url}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { pagerduty_client_url: e.target.value },\n                  })\n                }\n              />\n              <div className=\"help-block\" id=\"client-url-help\">\n                {t('public~A backlink to the sender of the notification.')}\n              </div>\n            </div>\n            <h3>{t('public~Incident details')}</h3>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"pagerduty-description\">\n                {t('public~Description')}\n              </label>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"description-help\"\n                id=\"pagerduty-description\"\n                data-test-id=\"pagerduty-description\"\n                value={formValues.pagerduty_description}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { pagerduty_description: e.target.value },\n                  })\n                }\n              />\n              <div className=\"help-block\" id=\"description-help\">\n                {t('public~Description of the incident.')}\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"pagerduty-severity\">\n                {t('public~Severity')}\n              </label>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"severity-help\"\n                id=\"pagerduty-severity\"\n                data-test-id=\"pagerduty-severity\"\n                value={formValues.pagerduty_severity}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { pagerduty_severity: e.target.value },\n                  })\n                }\n              />\n              <div className=\"help-block\" id=\"severity-help\">\n                {t('public~Severity of the incident.')}\n              </div>\n            </div>\n          </div>\n        </ExpandCollapse>\n      </div>\n    </div>\n  );\n};\n\nexport const getInitialValues = (globals, receiverConfig) => {\n  const initValues: any = { pagerdutySaveAsDefault: false };\n\n  initValues.pagerdutyIntegrationKeyType = _.has(receiverConfig, 'service_key')\n    ? 'prometheus'\n    : 'events';\n  initValues.pagerdutyIntegrationKey = receiverConfig?.service_key || receiverConfig?.routing_key;\n\n  GLOBAL_FIELDS.forEach((fld) => {\n    const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'pagerduty_' prefix\n    initValues[fld] = _.get(receiverConfig, configFieldName, globals[fld]);\n  });\n\n  return initValues;\n};\n\nexport const isFormInvalid = (formValues): boolean => {\n  return !formValues.pagerdutyIntegrationKey;\n};\n\nexport const updateGlobals = (globals, formValues) => {\n  const updatedGlobals = {};\n  if (formValues.pagerdutySaveAsDefault && formValues.pagerduty_url) {\n    _.set(updatedGlobals, 'pagerduty_url', formValues.pagerduty_url);\n  }\n  return updatedGlobals;\n};\n\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n  // handle integration key props\n  _.unset(receiverConfig, 'routing_key');\n  _.unset(receiverConfig, 'service_key');\n  const pagerdutyIntegrationKeyName = `${\n    formValues.pagerdutyIntegrationKeyType === 'events' ? 'routing' : 'service'\n  }_key`;\n  _.set(receiverConfig, pagerdutyIntegrationKeyName, formValues.pagerdutyIntegrationKey);\n\n  // Only save these props in formValues different from globals\n  GLOBAL_FIELDS.forEach((fld) => {\n    const formValue = formValues[fld];\n    const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'pagerduty_' prefix\n    if (formValue !== globals[fld]) {\n      if (fld === 'pagerduty_url' && formValues.pagerdutySaveAsDefault) {\n        _.unset(receiverConfig, 'url'); // saving as global so unset in config\n      } else {\n        _.set(receiverConfig, configFieldName, formValue);\n      }\n    } else {\n      _.unset(receiverConfig, configFieldName); // equals global, unset in config so global is used\n    }\n  });\n\n  return receiverConfig;\n};\n","/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { ExpandCollapse } from '../../utils';\nimport { SendResolvedAlertsCheckbox } from './send-resolved-alerts-checkbox';\nimport { FormProps } from './receiver-form-props';\n\nexport const Form: React.FC<FormProps> = ({ formValues, dispatchFormChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div data-test-id=\"webhook-receiver-form\" className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"webhook-url\">\n        {t('public~URL')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        aria-describedby=\"webhook-url-help\"\n        id=\"webhook-url\"\n        data-test-id=\"webhook-url\"\n        value={formValues.webhookUrl}\n        onChange={(e) =>\n          dispatchFormChange({\n            type: 'setFormValues',\n            payload: { webhookUrl: e.target.value },\n          })\n        }\n      />\n      <div className=\"help-block\" id=\"webhook-url-help\">\n        {t('public~The endpoint to send HTTP POST requests to.')}\n      </div>\n      <div className=\"form-group\">\n        <ExpandCollapse\n          textCollapsed={t('public~Show advanced configuration')}\n          textExpanded={t('public~Hide advanced configuration')}\n          dataTest=\"advanced-configuration\"\n        >\n          <div className=\"co-form-subsection\">\n            <div className=\"form-group\">\n              <SendResolvedAlertsCheckbox\n                formField=\"webhookSendResolved\"\n                formValues={formValues}\n                dispatchFormChange={dispatchFormChange}\n              />\n            </div>\n          </div>\n        </ExpandCollapse>\n      </div>\n    </div>\n  );\n};\n\nexport const getInitialValues = (globals, receiverConfig) => {\n  return {\n    webhookUrl: receiverConfig?.url || '',\n    webhookSendResolved: _.get(receiverConfig, 'send_resolved', globals?.webhook_send_resolved),\n  };\n};\n\nexport const isFormInvalid = (formValues) => {\n  return !formValues.webhookUrl;\n};\n\nexport const updateGlobals = () => {\n  return {};\n};\n\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n  _.set(receiverConfig, 'url', formValues.webhookUrl);\n\n  if (formValues.webhookSendResolved !== globals.webhook_send_resolved) {\n    _.set(receiverConfig, 'send_resolved', formValues?.webhookSendResolved);\n  } else {\n    _.unset(receiverConfig, 'send_resolved'); // equals global, unset in config so global is used\n  }\n\n  return receiverConfig;\n};\n","/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { SectionHeading, ExpandCollapse } from '../../utils';\nimport { SendResolvedAlertsCheckbox } from './send-resolved-alerts-checkbox';\nimport { SaveAsDefaultCheckbox } from './save-as-default-checkbox';\nimport { FormProps } from './receiver-form-props';\n\nconst SMTP_GLOBAL_FIELDS = [\n  'smtp_from',\n  'smtp_smarthost',\n  'smtp_hello',\n  'smtp_auth_username',\n  'smtp_auth_password',\n  'smtp_auth_identity',\n  'smtp_auth_secret',\n  'smtp_require_tls',\n];\nconst GLOBAL_FIELDS = [...SMTP_GLOBAL_FIELDS, 'email_send_resolved', 'email_html'];\n\nexport const Form: React.FC<FormProps> = ({ globals, formValues, dispatchFormChange }) => {\n  // disable saveAsDefault if all SMTP form fields match global values\n  const disableSaveAsDefault = SMTP_GLOBAL_FIELDS.every(\n    (propName) => formValues[propName] === globals[propName],\n  );\n  const { t } = useTranslation();\n\n  return (\n    <div data-test-id=\"email-receiver-form\">\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor=\"email-to\">\n          {t('public~To address')}\n        </label>\n        <input\n          className=\"pf-v5-c-form-control\"\n          type=\"text\"\n          aria-describedby=\"email-to-help\"\n          id=\"email-to\"\n          data-test-id=\"email-to\"\n          value={formValues.emailTo}\n          onChange={(e) =>\n            dispatchFormChange({\n              type: 'setFormValues',\n              payload: { emailTo: e.target.value },\n            })\n          }\n        />\n        <div className=\"help-block\" id=\"email-to-help\">\n          {t('public~The email address to send notifications to.')}\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <div className=\"co-m-pane__body--section-heading\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <SectionHeading text={t('public~SMTP configuration')} />\n            </div>\n            <div className=\"col-sm-6\">\n              <SaveAsDefaultCheckbox\n                formField=\"emailSaveAsDefault\"\n                disabled={disableSaveAsDefault}\n                label={t('public~Save as default SMTP configuration')}\n                formValues={formValues}\n                dispatchFormChange={dispatchFormChange}\n                tooltip={t(\n                  'public~Checking this box will write these values to the global section of the configuration file where they will become defaults for future email receivers.',\n                )}\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"email-from\">\n              {t('public~From address')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              aria-describedby=\"email-from-help\"\n              id=\"email-from\"\n              data-test-id=\"email-from\"\n              value={formValues.smtp_from}\n              onChange={(e) =>\n                dispatchFormChange({\n                  type: 'setFormValues',\n                  payload: { smtp_from: e.target.value },\n                })\n              }\n            />\n            <div className=\"help-block\" id=\"email-from-help\">\n              {t('public~The email address to send notifications from.')}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label co-required\" htmlFor=\"email-smarthost\">\n                  {t('public~SMTP smarthost')}\n                </label>\n                <input\n                  className=\"pf-v5-c-form-control\"\n                  type=\"text\"\n                  aria-describedby=\"email-smarthost-help\"\n                  id=\"email-smarthost\"\n                  data-test-id=\"email-smarthost\"\n                  value={formValues.smtp_smarthost}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_smarthost: e.target.value },\n                    })\n                  }\n                />\n                <div className=\"help-block\" id=\"email-smarthost-help\">\n                  {t('public~Smarthost used for sending emails, including port number.')}\n                </div>\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label co-required\" htmlFor=\"email-hello\">\n                  {t('public~SMTP hello')}\n                </label>\n                <input\n                  className=\"pf-v5-c-form-control\"\n                  type=\"text\"\n                  aria-describedby=\"email-hello-help\"\n                  id=\"email-hello\"\n                  data-test-id=\"email-hello\"\n                  value={formValues.smtp_hello}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_hello: e.target.value },\n                    })\n                  }\n                />\n                <div className=\"help-block\" id=\"email-hello-help\">\n                  {t('public~The hostname to identify to the SMTP server.')}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-username\">\n                  {t('public~Auth username')}\n                </label>\n                <input\n                  className=\"pf-v5-c-form-control\"\n                  type=\"text\"\n                  id=\"email-auth-username\"\n                  data-test-id=\"email-auth-username\"\n                  value={formValues.smtp_auth_username}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_username: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-password\">\n                  {t('public~Auth password (using LOGIN and PLAIN)')}\n                </label>\n                <input\n                  className=\"pf-v5-c-form-control\"\n                  type=\"password\"\n                  id=\"email-auth-password\"\n                  data-test-id=\"email-auth-password\"\n                  value={formValues.smtp_auth_password}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_password: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-identity\">\n                  {t('public~Auth identity (using PLAIN)')}\n                </label>\n                <input\n                  className=\"pf-v5-c-form-control\"\n                  type=\"text\"\n                  id=\"email-auth-identity\"\n                  data-test-id=\"email-auth-identity\"\n                  value={formValues.smtp_auth_identity}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_identity: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-secret\">\n                  {t('public~Auth secret (CRAM-MDS)')}\n                </label>\n                <input\n                  className=\"pf-v5-c-form-control\"\n                  type=\"password\"\n                  id=\"email-auth-secret\"\n                  data-test-id=\"email-auth-secret\"\n                  value={formValues.smtp_auth_secret}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_secret: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"checkbox\">\n            <label className=\"control-label\" htmlFor=\"email-require-tls\">\n              <input\n                type=\"checkbox\"\n                id=\"email-require-tls\"\n                data-test-id=\"email-require-tls\"\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: {\n                      smtp_require_tls: e.target.checked,\n                    },\n                  })\n                }\n                checked={formValues.smtp_require_tls}\n                aria-checked={formValues.smtp_require_tls}\n              />\n              {t('public~Require TLS')}\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <ExpandCollapse\n          textCollapsed={t('public~Show advanced configuration')}\n          textExpanded={t('public~Hide advanced configuration')}\n          dataTest=\"advanced-configuration\"\n        >\n          <div className=\"co-form-subsection\">\n            <div className=\"form-group\">\n              <SendResolvedAlertsCheckbox\n                formField=\"email_send_resolved\"\n                formValues={formValues}\n                dispatchFormChange={dispatchFormChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label co-required\" htmlFor=\"email-html\">\n                {t('public~Body of email notifications (HTML)')}\n              </label>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"html-help\"\n                id=\"email-html\"\n                data-test-id=\"email-html\"\n                value={formValues.email_html}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { email_html: e.target.value },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </ExpandCollapse>\n      </div>\n    </div>\n  );\n};\n\nconst getConfigFieldName = (fld) => fld.substring(fld.indexOf('_') + 1); //strip off leading 'email_' or 'smtp_' prefix\n\nexport const getInitialValues = (globals, receiverConfig) => {\n  const initValues: any = {\n    emailSaveAsDefault: false,\n    emailTo: receiverConfig?.to,\n  };\n\n  GLOBAL_FIELDS.forEach((fld) => {\n    initValues[fld] = _.get(receiverConfig, getConfigFieldName(fld), globals[fld]);\n  });\n\n  return initValues;\n};\n\nexport const isFormInvalid = (formValues) => {\n  return (\n    !formValues.emailTo ||\n    !formValues.smtp_from ||\n    !formValues.smtp_smarthost ||\n    !formValues.smtp_hello\n  );\n};\n\nexport const updateGlobals = (globals, formValues) => {\n  const updatedGlobals = {};\n  if (formValues.emailSaveAsDefault) {\n    SMTP_GLOBAL_FIELDS.forEach((propName) => {\n      const formValue = formValues[propName];\n      if (formValue !== undefined) {\n        _.set(updatedGlobals, propName, formValue);\n      }\n    });\n  }\n  return updatedGlobals;\n};\n\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n  _.set(receiverConfig, 'to', formValues.emailTo);\n\n  // Only save these props in receiverConfig if different from global\n  GLOBAL_FIELDS.forEach((fld) => {\n    const formValue = formValues[fld];\n    const configFieldName = getConfigFieldName(fld);\n    if (formValue !== globals[fld]) {\n      if (SMTP_GLOBAL_FIELDS.includes(fld) && formValues.emailSaveAsDefault) {\n        _.unset(receiverConfig, configFieldName); // saving as global so unset in config\n      } else {\n        _.set(receiverConfig, configFieldName, formValue);\n      }\n    } else {\n      _.unset(receiverConfig, configFieldName); // equals global, unset in config so global is used\n    }\n  });\n\n  return receiverConfig;\n};\n","/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { TextArea } from '@patternfly/react-core';\n\nimport { RadioInput } from '../../radio';\nimport { ExpandCollapse, ExternalLink } from '../../utils';\nimport { SendResolvedAlertsCheckbox } from './send-resolved-alerts-checkbox';\nimport { SaveAsDefaultCheckbox } from './save-as-default-checkbox';\nimport { FormProps } from './receiver-form-props';\n\nconst GLOBAL_FIELDS = [\n  'slack_api_url',\n  'slack_send_resolved',\n  'slack_username',\n  'slack_icon_emoji',\n  'slack_icon_url',\n  'slack_link_names',\n  'slack_title',\n  'slack_text',\n];\n\nexport const Form: React.FC<FormProps> = ({ globals, formValues, dispatchFormChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div data-test-id=\"slack-receiver-form\">\n      <div className=\"form-group\">\n        <label\n          data-test-id=\"api-url-label\"\n          className=\"control-label co-required\"\n          htmlFor=\"slack-api-url\"\n        >\n          {t('public~Slack API URL')}\n        </label>\n        <div className=\"row\">\n          <div className=\"col-sm-7\">\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              id=\"slack-api-url\"\n              aria-describedby=\"slack-api-url-help\"\n              data-test-id=\"slack-api-url\"\n              value={formValues.slack_api_url}\n              onChange={(e) =>\n                dispatchFormChange({\n                  type: 'setFormValues',\n                  payload: { slack_api_url: e.target.value },\n                })\n              }\n            />\n          </div>\n          <div className=\"col-sm-5\">\n            <SaveAsDefaultCheckbox\n              formField=\"slackSaveAsDefault\"\n              disabled={formValues.slack_api_url === globals?.slack_api_url}\n              label={t('public~Save as default Slack API URL')}\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n              tooltip={t(\n                'public~Checking this box will write the API URL to the global section of the configuration file where it will become the default API URL for future Slack receivers.',\n              )}\n            />\n          </div>\n        </div>\n        <div className=\"help-block\" id=\"slack-api-url-help\">\n          {t('public~The URL of the Slack webhook.')}\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor=\"slack-channel\">\n          {t('public~Channel')}\n        </label>\n        <input\n          className=\"pf-v5-c-form-control\"\n          type=\"text\"\n          id=\"slack-channel\"\n          aria-describedby=\"slack-channel-help\"\n          data-test-id=\"slack-channel\"\n          value={formValues.slackChannel}\n          onChange={(e) =>\n            dispatchFormChange({\n              type: 'setFormValues',\n              payload: { slackChannel: e.target.value },\n            })\n          }\n        />\n        <div className=\"help-block\" id=\"slack-channel-help\">\n          {t('public~The Slack channel or user to send notifications to.')}\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <ExpandCollapse\n          textCollapsed={t('public~Show advanced configuration')}\n          textExpanded={t('public~Hide advanced configuration')}\n          dataTest=\"advanced-configuration\"\n        >\n          <div className=\"co-form-subsection\">\n            <div className=\"form-group\">\n              <SendResolvedAlertsCheckbox\n                formField=\"slack_send_resolved\"\n                formValues={formValues}\n                dispatchFormChange={dispatchFormChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"slack-icon-type\">\n                {t('public~Icon')} &nbsp;\n                <RadioInput\n                  title={t('public~URL')}\n                  name=\"slackIconType\"\n                  id=\"slack-icon-type\"\n                  value=\"url\"\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { slackIconType: e.target.value },\n                    })\n                  }\n                  checked={formValues.slackIconType === 'url'}\n                  inline\n                />\n                <RadioInput\n                  title={t('public~Emoji')}\n                  name=\"slackIconType\"\n                  value=\"emoji\"\n                  data-test-id=\"slack-icon-type-emoji\"\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { slackIconType: e.target.value },\n                    })\n                  }\n                  checked={formValues.slackIconType === 'emoji'}\n                  inline\n                />\n              </label>\n              {formValues.slackIconType === 'url' && (\n                <>\n                  <input\n                    className=\"pf-v5-c-form-control\"\n                    type=\"text\"\n                    aria-describedby=\"slack-icon-url-help\"\n                    aria-label={t('public~The URL of the icon.')}\n                    data-test-id=\"slack-icon-url\"\n                    value={formValues.slack_icon_url}\n                    onChange={(e) =>\n                      dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: { slack_icon_url: e.target.value },\n                      })\n                    }\n                  />\n                  <div className=\"help-block\" id=\"slack-icon-url-help\">\n                    {t('public~The URL of the icon.')}\n                  </div>\n                </>\n              )}\n              {formValues.slackIconType === 'emoji' && (\n                <>\n                  <input\n                    className=\"pf-v5-c-form-control\"\n                    type=\"text\"\n                    aria-describedby=\"slack-icon-emoji-help\"\n                    aria-label={t('public~An emoji code to use in place of the default icon.')}\n                    name=\"slackIconEmoji\"\n                    data-test-id=\"slack-icon-emoji\"\n                    value={formValues.slack_icon_emoji}\n                    onChange={(e) =>\n                      dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: { slack_icon_emoji: e.target.value },\n                      })\n                    }\n                  />\n                  <div className=\"help-block\" id=\"slack-icon-emoji-help\">\n                    <Trans ns=\"public\">\n                      An{' '}\n                      <ExternalLink\n                        href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\"\n                        text={t('public~emoji code')}\n                      />{' '}\n                      to use in place of the default icon.\n                    </Trans>\n                  </div>\n                </>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"slack-username\">\n                {t('public~Username')}\n              </label>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"slack-username-help\"\n                id=\"slack-username\"\n                data-test-id=\"slack-username\"\n                value={formValues.slack_username}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { slack_username: e.target.value },\n                  })\n                }\n              />\n              <div className=\"help-block\" id=\"slack-username-help\">\n                {t('public~The displayed username.')}\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <div className=\"checkbox\">\n                <label className=\"control-label\" htmlFor=\"slack-link-names\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"slack-link-names\"\n                    data-test-id=\"slack-link-names\"\n                    aria-describedby=\"slack-link-names-help\"\n                    onChange={(e) =>\n                      dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: { slack_link_names: e.target.checked },\n                      })\n                    }\n                    checked={formValues.slack_link_names}\n                  />\n                  {t('public~Link names')}\n                </label>\n              </div>\n              <div className=\"help-block\" id=\"slack-link-names-help\">\n                {t('public~Find and link channel names and usernames.')}\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"slack-title\">\n                {t('public~Title')}\n              </label>\n              <TextArea\n                id=\"slack-title\"\n                aria-describedby=\"slack-title-help\"\n                onChange={(_event, value) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { slack_title: value },\n                  })\n                }\n                value={formValues.slack_title}\n              />\n              <div className=\"help-block\" id=\"slack-title-help\">\n                {t('public~The title of the Slack message.')}\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"slack-text\">\n                {t('public~Text')}\n              </label>\n              <TextArea\n                id=\"slack-text\"\n                aria-describedby=\"slack-text-help\"\n                onChange={(_event, value) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { slack_text: value },\n                  })\n                }\n                value={formValues.slack_text}\n              />\n              <div className=\"help-block\" id=\"slack-text-help\">\n                {t('public~The text of the Slack message.')}\n              </div>\n            </div>\n          </div>\n        </ExpandCollapse>\n      </div>\n    </div>\n  );\n};\n\nexport const getInitialValues = (globals, receiverConfig) => {\n  const initValues: any = {\n    slackSaveAsDefault: false,\n    slackChannel: _.get(receiverConfig, 'channel'),\n  };\n\n  initValues.slackIconType = _.has(receiverConfig, 'icon_emoji') ? 'emoji' : 'url';\n\n  GLOBAL_FIELDS.forEach((fld) => {\n    const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'slack_' prefix\n    initValues[fld] = _.get(receiverConfig, configFieldName, globals[fld]);\n  });\n\n  return initValues;\n};\n\nexport const isFormInvalid = (formValues): boolean => {\n  return !formValues.slack_api_url || !formValues.slackChannel;\n};\n\nexport const updateGlobals = (globals, formValues) => {\n  const updatedGlobals = {};\n  if (formValues.slackSaveAsDefault && formValues.slack_api_url) {\n    _.set(updatedGlobals, 'slack_api_url', formValues.slack_api_url);\n  }\n  return updatedGlobals;\n};\n\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n  _.set(receiverConfig, 'channel', formValues.slackChannel);\n\n  // Only save these props in receiverConfig if different from global\n  GLOBAL_FIELDS.forEach((fld) => {\n    const formValue = formValues[fld];\n    const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'slack_' prefix\n    if (formValue !== globals[fld]) {\n      if (fld === 'slack_api_url' && formValues.slackSaveAsDefault) {\n        _.unset(receiverConfig, 'api_url'); // saving as global so unset in config\n      } else {\n        _.set(receiverConfig, configFieldName, formValue);\n      }\n    } else {\n      _.unset(receiverConfig, configFieldName); // equals global, unset in config so global is used\n    }\n  });\n\n  _.unset(receiverConfig, formValues.slackIconType === 'url' ? 'icon_emoji' : 'icon_url');\n\n  return receiverConfig;\n};\n","/* eslint-disable camelcase, tsdoc/syntax */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Alert, Button } from '@patternfly/react-core';\nimport { safeLoad } from 'js-yaml';\nimport * as classNames from 'classnames';\n\nimport { APIError } from '@console/shared';\nimport { ButtonBar } from '../../utils/button-bar';\nimport { Dropdown } from '../../utils/dropdown';\nimport { Firehose } from '../../utils/firehose';\nimport { StatusBox } from '../../utils/status-box';\nimport {\n  getAlertmanagerConfig,\n  patchAlertmanagerConfig,\n  receiverTypes,\n} from '../alertmanager/alertmanager-utils';\nimport { K8sResourceKind } from '../../../module/k8s';\nimport {\n  AlertmanagerConfig,\n  AlertmanagerReceiver,\n  AlertmanagerRoute,\n  InitialReceivers,\n} from '../alertmanager/alertmanager-config';\nimport { RoutingLabelEditor } from './routing-labels-editor';\nimport * as PagerDutyForm from './pagerduty-receiver-form';\nimport * as WebhookForm from './webhook-receiver-form';\nimport * as EmailForm from './email-receiver-form';\nimport * as SlackForm from './slack-receiver-form';\nimport { coFetchJSON } from '../../../co-fetch';\n\n/**\n * Converts deprecated route match and match_re:\n * {\n *   match: {\n *     severity: \"warning\",\n *     cluster: \"myCluster\"\n *   },\n *   match_re: {\n *    service: \"$foobar\"\n *  }\n};\n * ...to array of matchers for Routing Labels Editor component\n * Ex: [\"severity = warning\", \"cluster = myCluster\", \"service =~ $foobar\"]\n */\nconst convertDeprecatedReceiverRoutesMatchesToMatchers = (\n  receiverRoutes: AlertmanagerRoute,\n): string[] => {\n  const matches = _.map(receiverRoutes?.match || {}, (v, k) => {\n    return `${k} = ${v}`;\n  });\n  const regexMatches = _.map(receiverRoutes?.match_re || {}, (v, k) => {\n    return `${k} =~ ${v}`;\n  });\n  return [...matches, ...regexMatches];\n};\n\n/**\n * Returns new Route object\n * Ex:\n * {\n *   receiver: myNewReceiver,\n *   matchers: [\"severity = warning\"]\n * }\n */\nconst createRoute = (receiver: AlertmanagerReceiver, routeLabels: string[]): AlertmanagerRoute => {\n  return {\n    receiver: receiver.name,\n    matchers: routeLabels,\n  };\n};\n\n/**\n * Returns new Receiver object\n * Ex:\n * {\n *   name: MyNewReceiver\n *   pagerduty_configs: {\n *     routing_key: <integration_key>\n *   }\n * }\n */\nconst createReceiver = (\n  globals,\n  formValues,\n  createReceiverConfig: Function,\n  receiverToEdit: AlertmanagerReceiver,\n): AlertmanagerReceiver => {\n  const receiverConfig = createReceiverConfig(\n    globals,\n    formValues,\n    receiverToEdit && receiverToEdit[formValues.receiverType]\n      ? receiverToEdit[formValues.receiverType][0] // pass in receiver config if editing existing receiver\n      : {},\n  );\n  return {\n    name: formValues.receiverName,\n    [formValues.receiverType]: [{ ...receiverConfig }],\n  };\n};\n\nconst subformFactory = (receiverType: string) => {\n  switch (receiverType) {\n    case 'pagerduty_configs':\n      return PagerDutyForm;\n    case 'webhook_configs':\n      return WebhookForm;\n    case 'email_configs':\n      return EmailForm;\n    case 'slack_configs':\n      return SlackForm;\n    default:\n      return null;\n  }\n};\n\nconst formReducer = (formValues: FormState, action: FormAction): FormState => {\n  if (action.type === 'setFormValues') {\n    return {\n      ...formValues,\n      ...action.payload,\n    };\n  }\n  // eslint-disable-next-line no-console\n  console.error('Unrecognized Alertmanager form reducer action', action);\n  return formValues;\n};\n\nconst getRouteLabelsForEditor = (\n  isDefaultReceiver: boolean,\n  receiverToEdit: AlertmanagerReceiver,\n  allRoutes: AlertmanagerRoute[],\n): string[] => {\n  const receiverRoutes = _.find(\n    allRoutes,\n    (aRoute: AlertmanagerRoute) => aRoute.receiver === receiverToEdit?.name,\n  );\n  const convertedRouteLabels = convertDeprecatedReceiverRoutesMatchesToMatchers(receiverRoutes);\n  const routeLabels = [...(convertedRouteLabels ?? []), ...(receiverRoutes?.matchers ?? [])];\n  return !isDefaultReceiver && _.isEmpty(routeLabels) ? [''] : routeLabels;\n};\n\nconst AlertMsg: React.FC<AlertMsgProps> = ({ type }) => {\n  const { t } = useTranslation();\n  switch (type) {\n    case InitialReceivers.Default:\n      return t(\n        'public~Your default receiver will automatically receive all alerts from this cluster that are not caught by other receivers first.',\n      );\n    case InitialReceivers.Critical:\n      return t(\n        'public~The routing labels for this receiver are configured to capture critical alerts. Finish setting up this receiver by selecting a \"Receiver Type\" to choose a destination for these alerts. If this receiver is deleted, critical alerts will go to the default receiver instead.',\n      );\n    case InitialReceivers.Watchdog:\n      return t(\n        'public~The Watchdog alert fires constantly to confirm that your alerting stack is functioning correctly. This receiver is configured to prevent it from creating unnecessary notifications. You can edit this receiver if you plan to use the information that Watchdog provides, otherwise this receiver should remain in its current state with no set receiver type.',\n      );\n    default:\n      return t('public~unknown receiver type'); // should never get here\n  }\n};\n\nconst ReceiverInfoTip: React.FC<ReceiverInfoTipProps> = ({ type }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      isInline\n      className=\"co-alert co-alert--scrollable\"\n      variant=\"info\"\n      title={`${type} ${t('public~Receiver')}`}\n    >\n      <div className=\"co-pre-line\">\n        <AlertMsg type={type} />\n      </div>\n    </Alert>\n  );\n};\n\nconst ReceiverBaseForm: React.FC<ReceiverBaseFormProps> = ({\n  obj: secret, // Secret \"alertmanager-main\" which contains alertmanager.yaml config\n  titleVerb,\n  saveButtonText,\n  editReceiverNamed,\n  alertmanagerGlobals, // contains default props not in alertmanager.yaml's config.global\n}) => {\n  const navigate = useNavigate();\n  const [saveErrorMsg, setSaveErrorMsg] = React.useState<string>();\n  const [inProgress, setInProgress] = React.useState<boolean>(false);\n  const { config, errorMessage: loadErrorMsg } = getAlertmanagerConfig(secret);\n\n  const doesReceiverNameAlreadyExist = (receiverName: string): boolean => {\n    if (!config?.receivers) {\n      return false;\n    }\n    const receiverNames = config.receivers\n      .filter((receiver) => receiver.name !== editReceiverNamed)\n      .map((receiver) => receiver.name);\n    return receiverNames.includes(receiverName);\n  };\n\n  const { route, global } = config || {};\n\n  // there is no api to get default values for these adv. config props\n  const advancedConfigGlobals = {\n    ['pagerduty_send_resolved']: true,\n    ['pagerduty_client']: '{{ template \"pagerduty.default.client\" . }}',\n    ['pagerduty_client_url']: '{{ template \"pagerduty.default.clientURL\" . }}',\n    ['pagerduty_description']: '{{ template \"pagerduty.default.description\" .}}',\n    ['pagerduty_severity']: 'error',\n    ['email_send_resolved']: false,\n    ['email_html']: '{{ template \"email.default.html\" . }}',\n    ['slack_send_resolved']: false,\n    ['slack_username']: '{{ template \"slack.default.username\" . }}',\n    ['slack_icon_emoji']: '{{ template \"slack.default.iconemoji\" .}}',\n    ['slack_icon_url']: '{{ template \"slack.default.iconurl\" .}}',\n    ['slack_link_names']: false,\n    ['slack_title']: '{{ template \"slack.default.title\" .}}',\n    ['slack_text']: '{{ template \"slack.default.text\" .}}',\n    ['webhook_send_resolved']: true,\n  };\n\n  // default globals to config.global props first, then alertmanagerGlobals\n  const defaultGlobals = { ...alertmanagerGlobals, ...global, ...advancedConfigGlobals };\n\n  const INITIAL_STATE = {\n    receiverName: '',\n    receiverType: '',\n    routeLabels: [],\n    ...PagerDutyForm.getInitialValues(defaultGlobals, null),\n    ...WebhookForm.getInitialValues(defaultGlobals, null),\n    ...EmailForm.getInitialValues(defaultGlobals, null),\n    ...SlackForm.getInitialValues(defaultGlobals, null),\n  };\n\n  let receiverToEdit: AlertmanagerReceiver;\n  if (editReceiverNamed) {\n    receiverToEdit = _.find(_.get(config, 'receivers'), { name: editReceiverNamed });\n    INITIAL_STATE.receiverName = receiverToEdit ? receiverToEdit.name : '';\n    INITIAL_STATE.receiverType = _.find(_.keys(receiverToEdit), (key) =>\n      _.endsWith(key, '_configs'),\n    );\n    if (!_.isEmpty(INITIAL_STATE.receiverType)) {\n      const receiverConfig = receiverToEdit?.[INITIAL_STATE.receiverType]?.[0];\n      _.assign(\n        INITIAL_STATE,\n        subformFactory(INITIAL_STATE.receiverType).getInitialValues(defaultGlobals, receiverConfig),\n      );\n    }\n  }\n\n  const { receiver: defaultReceiver } = route || {}; // top level route.receiver is the default receiver for all alarms\n  // if default receiver name defined but no receiver exists with that name, or editing the default receiver,\n  const isDefaultReceiver = defaultReceiver\n    ? _.isEmpty(config?.receivers?.filter((receiver) => receiver.name === defaultReceiver)) ||\n      defaultReceiver === editReceiverNamed\n    : true; // defaultReceiver (the name stored in config.route.receiver) is not defined, so this should be the default receiver\n\n  INITIAL_STATE.routeLabels = getRouteLabelsForEditor(\n    isDefaultReceiver,\n    receiverToEdit,\n    route?.routes ?? [],\n  );\n\n  const [formValues, dispatchFormChange] = React.useReducer(formReducer, INITIAL_STATE);\n  const SubForm = subformFactory(formValues.receiverType);\n\n  const receiverNameAlreadyExist = doesReceiverNameAlreadyExist(formValues.receiverName);\n  const isFormInvalid: boolean =\n    !formValues.receiverName ||\n    receiverNameAlreadyExist ||\n    !formValues.receiverType ||\n    SubForm.isFormInvalid(formValues) ||\n    !_.isEmpty(formValues.routeLabelFieldErrors) ||\n    formValues.routeLabelDuplicateNamesError ||\n    (!isDefaultReceiver &&\n      formValues.routeLabels.length === 1 &&\n      (formValues.routeLabels[0].name === '' || formValues.routeLabels[0].value === ''));\n\n  const save = (e) => {\n    e.preventDefault();\n    const updateConfig: AlertmanagerConfig = _.isObject(config)\n      ? _.cloneDeep(config)\n      : {\n          global: {},\n          route: {},\n          receivers: [],\n        };\n\n    // Update Global params\n    _.assign(updateConfig.global, SubForm.updateGlobals(defaultGlobals, formValues));\n\n    // Update Receivers\n    const newReceiver = createReceiver(\n      defaultGlobals,\n      formValues,\n      SubForm.createReceiverConfig,\n      receiverToEdit,\n    );\n    _.update(updateConfig, 'receivers', (receivers = []) => {\n      if (editReceiverNamed) {\n        const index = _.findIndex(receivers, { name: editReceiverNamed });\n        receivers.splice(index, 1, newReceiver);\n      } else {\n        receivers.push(newReceiver);\n      }\n      return receivers;\n    });\n\n    // Update Route & RouteLabels\n    if (isDefaultReceiver) {\n      _.set(updateConfig, 'route.receiver', newReceiver.name);\n    }\n\n    const newRoute = _.isEmpty(formValues.routeLabels)\n      ? undefined\n      : createRoute(newReceiver, formValues.routeLabels);\n    _.update(updateConfig, 'route.routes', (routes = []) => {\n      if (editReceiverNamed) {\n        const index = _.findIndex(routes, { receiver: editReceiverNamed });\n        if (index !== -1) {\n          if (!newRoute) {\n            // no routing labels for receiver, remove old route\n            routes.splice(index, 1);\n          } else {\n            // update receiver's route with new route/labels\n            routes.splice(index, 1, newRoute);\n          }\n        } else if (newRoute) {\n          // receiver didn't have a prior route, so add new route\n          routes.push(newRoute);\n        }\n      } else if (newRoute) {\n        // add route for new receiver\n        routes.push(newRoute);\n      }\n      return routes;\n    });\n\n    // Update 'alertmanager-main' Secret with new alertmanager.yaml configuration\n    setInProgress(true);\n    patchAlertmanagerConfig(secret, updateConfig).then(\n      () => {\n        setSaveErrorMsg('');\n        setInProgress(false);\n        navigate('/monitoring/alertmanagerconfig');\n      },\n      (err) => {\n        setSaveErrorMsg(err.message);\n        setInProgress(false);\n      },\n    );\n  };\n  const { t } = useTranslation();\n  const receiverTypeLabel = formValues.receiverType\n    ? t('public~{{receiverTypeLabel}}', {\n        receiverTypeLabel: receiverTypes[formValues.receiverType],\n      })\n    : null;\n  const defaultString = isDefaultReceiver ? t('public~Default') : null;\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <Helmet>\n        <title>{t('public~{{titleVerb}} Receiver', { titleVerb })}</title>\n      </Helmet>\n      <form className=\"co-m-pane__body-group\" onSubmit={save}>\n        <h1 className=\"co-m-pane__heading\">\n          {t('public~{{titleVerb}} {{receiverTypeLabel}} {{defaultString}} Receiver', {\n            titleVerb,\n            receiverTypeLabel,\n            defaultString,\n          })}\n        </h1>\n        {isDefaultReceiver && <ReceiverInfoTip type={InitialReceivers.Default} />}\n        {formValues.receiverName === 'Critical' && !formValues.receiverType && (\n          <ReceiverInfoTip type={InitialReceivers.Critical} />\n        )}\n        {formValues.receiverName === 'Watchdog' && !formValues.receiverType && (\n          <ReceiverInfoTip type={InitialReceivers.Watchdog} />\n        )}\n        <div\n          className={classNames('form-group', {\n            'has-error': receiverNameAlreadyExist,\n          })}\n        >\n          <label className=\"control-label co-required\">{t('public~Receiver name')}</label>\n          <input\n            className=\"pf-v5-c-form-control\"\n            type=\"text\"\n            value={formValues.receiverName}\n            onChange={(e) =>\n              dispatchFormChange({\n                type: 'setFormValues',\n                payload: { receiverName: e.target.value },\n              })\n            }\n            aria-describedby=\"receiver-name-help\"\n            name=\"receiverName\"\n            data-test-id=\"receiver-name\"\n            required\n          />\n          {receiverNameAlreadyExist && (\n            <span className=\"help-block\">\n              <span data-test-id=\"receiver-name-already-exists-error\">\n                {t('public~A receiver with that name already exists.')}\n              </span>\n            </span>\n          )}\n        </div>\n        <div className=\"form-group co-m-pane__dropdown\">\n          <label className=\"control-label co-required\">{t('public~Receiver type')}</label>\n          <Dropdown\n            title=\"Select receiver type...\"\n            name=\"receiverType\"\n            items={receiverTypes}\n            dropDownClassName=\"dropdown--full-width\"\n            data-test-id=\"receiver-type\"\n            selectedKey={formValues.receiverType}\n            onChange={(receiverType) =>\n              dispatchFormChange({\n                type: 'setFormValues',\n                payload: {\n                  receiverType,\n                },\n              })\n            }\n          />\n        </div>\n\n        {formValues.receiverType && (\n          <>\n            <SubForm.Form\n              globals={defaultGlobals}\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n            />\n            <RoutingLabelEditor\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n              isDefaultReceiver={isDefaultReceiver}\n            />\n          </>\n        )}\n\n        <ButtonBar errorMessage={saveErrorMsg || loadErrorMsg} inProgress={inProgress}>\n          <ActionGroup className=\"pf-v5-c-form\">\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              data-test-id=\"save-changes\"\n              isDisabled={isFormInvalid}\n            >\n              {saveButtonText}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              data-test-id=\"cancel\"\n              onClick={() => navigate(-1)}\n            >\n              {t('public~Cancel')}\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </form>\n    </div>\n  );\n};\n\nconst ReceiverWrapper: React.FC<ReceiverFormsWrapperProps> = React.memo(({ obj, ...props }) => {\n  const { alertManagerBaseURL } = window.SERVER_FLAGS;\n  const [alertmanagerGlobals, setAlertmanagerGlobals] = React.useState();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState<APIError>();\n\n  React.useEffect(() => {\n    if (!alertManagerBaseURL) {\n      setLoadError({ message: `Error alertManagerBaseURL not set` });\n      return;\n    }\n    coFetchJSON(`${alertManagerBaseURL}/api/v2/status/`)\n      .then((data) => {\n        const originalAlertmanagerConfigJSON = data?.config?.original;\n        if (_.isEmpty(originalAlertmanagerConfigJSON)) {\n          setLoadError({ message: 'alertmanager.v2.status.config.original not found.' });\n        } else {\n          try {\n            const { global } = safeLoad(originalAlertmanagerConfigJSON);\n            setAlertmanagerGlobals(global);\n            setLoaded(true);\n          } catch (error) {\n            setLoadError({\n              message: `Error parsing Alertmanager config.original: ${\n                error.message || 'invalid YAML'\n              }`,\n            });\n          }\n        }\n      })\n      .catch((e) =>\n        setLoadError({\n          message: `Error loading ${alertManagerBaseURL}/api/v2/status/: ${e.message}`,\n        }),\n      );\n  }, [alertManagerBaseURL]);\n\n  const { t } = useTranslation();\n  return (\n    <StatusBox\n      {...obj}\n      label={t('public~Alertmanager globals')}\n      loaded={loaded}\n      loadError={loadError}\n    >\n      <ReceiverBaseForm {...props} obj={obj.data} alertmanagerGlobals={alertmanagerGlobals} />\n    </StatusBox>\n  );\n});\n\nconst resources = [\n  {\n    kind: 'Secret',\n    name: 'alertmanager-main',\n    namespace: 'openshift-monitoring',\n    isList: false,\n    prop: 'obj',\n  },\n];\n\nexport const CreateReceiver = () => {\n  const { t } = useTranslation();\n  return (\n    <Firehose resources={resources}>\n      <ReceiverWrapper titleVerb={t('public~Create')} saveButtonText={t('public~Create')} />\n    </Firehose>\n  );\n};\n\nexport const EditReceiver = () => {\n  const { t } = useTranslation();\n  const params = useParams();\n  return (\n    <Firehose resources={resources}>\n      <ReceiverWrapper\n        titleVerb={t('public~Edit')}\n        saveButtonText={t('public~Save')}\n        editReceiverNamed={params.name}\n      />\n    </Firehose>\n  );\n};\n\ntype ReceiverFormsWrapperProps = {\n  titleVerb: string;\n  saveButtonText: string;\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n  editReceiverNamed?: string;\n};\n\ntype ReceiverBaseFormProps = {\n  obj?: K8sResourceKind;\n  titleVerb: string;\n  saveButtonText: string;\n  editReceiverNamed?: string;\n  alertmanagerGlobals?: { [key: string]: any };\n};\n\ntype FormAction = {\n  type: 'setFormValues';\n  payload: {\n    [key: string]: string;\n  };\n};\n\ntype FormState = {\n  receiverType: string;\n  routeLabels: any[];\n  [key: string]: string | any[] | any;\n};\n\ntype ReceiverInfoTipProps = {\n  type: InitialReceivers;\n};\n\ntype AlertMsgProps = {\n  type: string;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const SendResolvedAlertsCheckbox = ({ formField, formValues, dispatchFormChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"checkbox\">\n      <label className=\"control-label\" htmlFor={formField}>\n        <input\n          type=\"checkbox\"\n          id={formField}\n          data-test-id=\"send-resolved-alerts\"\n          onChange={(e) =>\n            dispatchFormChange({\n              type: 'setFormValues',\n              payload: { [formField]: e.target.checked },\n            })\n          }\n          checked={formValues[formField]}\n          aria-checked={formValues[formField]}\n        />\n        {t('public~Send resolved alerts to this receiver?')}\n      </label>\n    </div>\n  );\n};\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { BlueInfoCircleIcon } from '@console/shared';\n\nexport const SaveAsDefaultCheckbox: React.FC<SaveAsDefaultCheckboxProps> = ({\n  formField,\n  disabled,\n  label,\n  formValues,\n  dispatchFormChange,\n  tooltip,\n}) => {\n  const saveAsDefaultLabelClass = classNames('checkbox', { 'co-no-bold': disabled });\n  return (\n    <label className={saveAsDefaultLabelClass} htmlFor={formField}>\n      <input\n        type=\"checkbox\"\n        id={formField}\n        data-test-id=\"save-as-default\"\n        onChange={(e) =>\n          dispatchFormChange({\n            type: 'setFormValues',\n            payload: { [formField]: e.target.checked },\n          })\n        }\n        checked={formValues[formField]}\n        aria-checked={formValues[formField]}\n        disabled={disabled}\n        aria-disabled={disabled}\n      />\n      <span className=\"co-alert-manager-config__save-as-default-label\">{label}</span>\n      <Tooltip content={<p>{tooltip}</p>}>\n        <BlueInfoCircleIcon />\n      </Tooltip>\n    </label>\n  );\n};\n\ntype SaveAsDefaultCheckboxProps = {\n  formField: string;\n  disabled: boolean;\n  label: string;\n  formValues: { [key: string]: any };\n  dispatchFormChange: Function;\n  tooltip: string;\n};\n"],"sourceRoot":""}