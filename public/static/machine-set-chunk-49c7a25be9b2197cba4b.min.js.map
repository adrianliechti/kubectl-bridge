{"version":3,"sources":["webpack:///./public/components/machine.tsx","webpack:///./public/components/machine-set.tsx","webpack:///./packages/console-app/src/components/nodes/NodeIPList.tsx"],"names":["common","factory","menuActions","getExtensionsActionsForKind","machineReference","tableColumnInfo","className","id","columnClass","getMachineProviderState","obj","status","providerStatus","instanceState","MachineTableRow","activeColumnIDs","nodeName","region","zone","providerState","kind","name","metadata","namespace","actions","resource","MachineDetails","machineRole","instanceType","t","text","label","path","ips","expand","conditions","MachineList","props","machineTableColumns","title","sort","transforms","data","direction","columns","Row","MachinePage","selector","showTitle","hideLabelFilter","hideNameLabelFilters","hideColumnManagement","isExactSearch","machines","loaded","loadError","isList","machineFilter","type","filter","machine","filteredData","onFilterChange","labelPluralKey","undefined","groupVersionKind","unfilteredData","MachineDetailsPage","pages","details","editYaml","events","getResourceStatus","MachinesResource","NodesResource","namespaced","machineReplicasModal","resourceKind","titleKey","messageKey","messageVariables","labelPlural","editCountAction","labelKey","callback","accessReview","group","apiGroup","plural","verb","machineSet","cancel","close","machineSetReference","getDesiredReplicas","spec","replicas","getReadyReplicas","readyReplicas","getAvailableReplicas","availableReplicas","MachineCounts","desiredReplicas","canUpdate","desiredReplicasText","count","variant","isInline","onClick","event","preventDefault","content","MachineTabPage","MachineSetDetails","availabilityZone","MachineSetList","nodes","capacityResolver","find","m","matches","node","n","nodeRef","uid","cpu","memory","capacity","machineSetTableColumn","to","MachineSetPage","machineSets","MachineSetDetailsPage","map","address","key","replace"],"mappings":"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","file":"machine-set-chunk-49c7a25be9b2197cba4b.min.js","sourcesContent":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport {\n  getMachineAddresses,\n  getMachineInstanceType,\n  getMachineNodeName,\n  getMachineRegion,\n  getMachineRole,\n  getMachineZone,\n  Status,\n  getMachinePhase,\n} from '@console/shared';\nimport { ListPageBody, RowProps, TableColumn } from '@console/dynamic-plugin-sdk';\nimport { MachineModel } from '../models';\nimport { MachineKind, referenceForModel, Selector } from '../module/k8s';\nimport { Conditions } from './conditions';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { useExactSearch } from '@console/app/src/components/user-preferences/search';\nimport { DetailsPage } from './factory';\nimport ListPageFilter from './factory/ListPage/ListPageFilter';\nimport ListPageHeader from './factory/ListPage/ListPageHeader';\nimport { useListPageFilter } from './factory/ListPage/filter-hook';\nimport ListPageCreate from './factory/ListPage/ListPageCreate';\nimport {\n  DetailsItem,\n  Kebab,\n  NodeLink,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  navFactory,\n} from './utils';\nimport { ResourceEventStream } from './events';\nimport { useK8sWatchResource } from './utils/k8s-watch-hook';\nimport VirtualizedTable, { TableData } from './factory/Table/VirtualizedTable';\nimport { sortResourceByValue } from './factory/Table/sort';\nimport { useActiveColumns } from './factory/Table/active-columns-hook';\nimport { tableFilters } from './factory/table-filters';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(MachineModel), ...common];\nexport const machineReference = referenceForModel(MachineModel);\n\nconst tableColumnInfo = [\n  { className: '', id: 'name' },\n  { className: '', id: 'namespace' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-sm'), id: 'nodeRef' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-md'), id: 'phase' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'provider' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-xl'), id: 'region' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-xl'), id: 'avail' },\n  { className: Kebab.columnClass, id: '' },\n];\n\nconst getMachineProviderState = (obj: MachineKind): string =>\n  obj?.status?.providerStatus?.instanceState;\n\nconst MachineTableRow: React.FC<RowProps<MachineKind>> = ({ obj, activeColumnIDs }) => {\n  const nodeName = getMachineNodeName(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <>\n      <TableData\n        {...tableColumnInfo[0]}\n        className={classNames(tableColumnInfo[0].className, 'co-break-word')}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <ResourceLink\n          kind={machineReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        {...tableColumnInfo[1]}\n        className={classNames(tableColumnInfo[1].className, 'co-break-word')}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData {...tableColumnInfo[2]} activeColumnIDs={activeColumnIDs}>\n        {nodeName ? <NodeLink name={nodeName} /> : '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[3]} activeColumnIDs={activeColumnIDs}>\n        <Status status={getMachinePhase(obj)} />\n      </TableData>\n      <TableData {...tableColumnInfo[4]} activeColumnIDs={activeColumnIDs}>\n        {providerState ?? '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[5]} activeColumnIDs={activeColumnIDs}>\n        {region || '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[6]} activeColumnIDs={activeColumnIDs}>\n        {zone || '-'}\n      </TableData>\n      <TableData {...tableColumnInfo[7]} activeColumnIDs={activeColumnIDs}>\n        <ResourceKebab actions={menuActions} kind={machineReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nconst MachineDetails: React.SFC<MachineDetailsProps> = ({ obj }: { obj: MachineKind }) => {\n  const nodeName = getMachineNodeName(obj);\n  const machineRole = getMachineRole(obj);\n  const instanceType = getMachineInstanceType(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Machine details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <DetailsItem label={t('public~Phase')} obj={obj} path=\"status.phase\">\n                  <Status status={getMachinePhase(obj)} />\n                </DetailsItem>\n                <DetailsItem\n                  label={t('public~Provider state')}\n                  obj={obj}\n                  path=\"status.providerStatus.instanceState\"\n                >\n                  {providerState}\n                </DetailsItem>\n                {nodeName && (\n                  <>\n                    <dt>{t('public~Node')}</dt>\n                    <dd>\n                      <NodeLink name={nodeName} />\n                    </dd>\n                  </>\n                )}\n                {machineRole && (\n                  <>\n                    <dt>{t('public~Machine role')}</dt>\n                    <dd>{machineRole}</dd>\n                  </>\n                )}\n                {instanceType && (\n                  <>\n                    <dt>{t('public~Instance type')}</dt>\n                    <dd>{instanceType}</dd>\n                  </>\n                )}\n                {region && (\n                  <>\n                    <dt>{t('public~Region')}</dt>\n                    <dd>{region}</dd>\n                  </>\n                )}\n                {zone && (\n                  <>\n                    <dt>{t('public~Availability zone')}</dt>\n                    <dd>{zone}</dd>\n                  </>\n                )}\n                <dt>{t('public~Machine addresses')}</dt>\n                <dd>\n                  <NodeIPList ips={getMachineAddresses(obj)} expand />\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={obj.status?.providerStatus?.conditions} />\n      </div>\n    </>\n  );\n};\n\ntype MachineListProps = {\n  data: MachineKind[];\n  unfilteredData: MachineKind[];\n  loaded: boolean;\n  loadError: any;\n};\n\nexport const MachineList: React.FC<MachineListProps> = (props) => {\n  const { t } = useTranslation();\n\n  const machineTableColumns = React.useMemo<TableColumn<MachineKind>[]>(\n    () => [\n      {\n        title: t('public~Name'),\n        sort: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[0].className },\n        id: tableColumnInfo[0].id,\n      },\n      {\n        title: t('public~Namespace'),\n        sort: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[1].className },\n        id: tableColumnInfo[1].id,\n      },\n      {\n        title: t('public~Node'),\n        sort: 'status.nodeRef.name',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[2].className },\n        id: tableColumnInfo[2].id,\n      },\n      {\n        title: t('public~Phase'),\n        sort: (data, direction) => data.sort(sortResourceByValue(direction, getMachinePhase)),\n        transforms: [sortable],\n        props: { className: tableColumnInfo[3].className },\n        id: tableColumnInfo[3].id,\n      },\n      {\n        title: t('public~Provider state'),\n        sort: 'status.providerStatus.instanceState',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[4].className },\n        id: tableColumnInfo[4].id,\n      },\n      {\n        title: t('public~Region'),\n        sort: \"metadata.labels['machine.openshift.io/region']\",\n        transforms: [sortable],\n        props: { className: tableColumnInfo[5].className },\n        id: tableColumnInfo[5].id,\n      },\n      {\n        title: t('public~Availability zone'),\n        sort: \"metadata.labels['machine.openshift.io/zone']\",\n        transforms: [sortable],\n        props: { className: tableColumnInfo[6].className },\n        id: tableColumnInfo[6].id,\n      },\n      {\n        title: '',\n        props: { className: tableColumnInfo[7].className },\n        id: tableColumnInfo[7].id,\n      },\n    ],\n    [t],\n  );\n\n  const [columns] = useActiveColumns({ columns: machineTableColumns });\n\n  return (\n    <VirtualizedTable<MachineKind>\n      {...props}\n      aria-label={t('public~Machines')}\n      label={t('public~Machines')}\n      columns={columns}\n      Row={MachineTableRow}\n    />\n  );\n};\n\nexport const MachinePage: React.FC<MachinePageProps> = ({\n  selector,\n  namespace,\n  showTitle = true,\n  hideLabelFilter,\n  hideNameLabelFilters,\n  hideColumnManagement,\n}) => {\n  const { t } = useTranslation();\n  const [isExactSearch] = useExactSearch();\n\n  const [machines, loaded, loadError] = useK8sWatchResource<MachineKind[]>({\n    kind: referenceForModel(MachineModel),\n    isList: true,\n    selector,\n    namespace,\n  });\n\n  // FIXME - there isn't a type for a simple filter like this nor is there an easy way to add this type\n  const machineFilter = [{ type: 'name', filter: tableFilters(isExactSearch).machine }];\n  //@ts-ignore\n  const [data, filteredData, onFilterChange] = useListPageFilter(machines, machineFilter);\n\n  return (\n    <>\n      <ListPageHeader title={showTitle ? t(MachineModel.labelPluralKey) : undefined}>\n        <ListPageCreate groupVersionKind={referenceForModel(MachineModel)}>\n          {t('public~Create machine')}\n        </ListPageCreate>\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter\n          data={data}\n          loaded={loaded}\n          onFilterChange={onFilterChange}\n          hideNameLabelFilters={hideNameLabelFilters}\n          hideLabelFilter={hideLabelFilter}\n          hideColumnManagement={hideColumnManagement}\n        />\n        <MachineList\n          data={filteredData}\n          unfilteredData={machines}\n          loaded={loaded}\n          loadError={loadError}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\nexport const MachineDetailsPage: React.SFC = (props) => (\n  <DetailsPage\n    {...props}\n    kind={machineReference}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(MachineDetails),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n    getResourceStatus={getMachinePhase}\n  />\n);\n\nexport type MachineDetailsProps = {\n  obj: MachineKind;\n};\n\nexport type MachinePageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: Selector;\n  hideLabelFilter?: boolean;\n  hideNameLabelFilters?: boolean;\n  hideColumnManagement?: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { getMachineAWSPlacement, getMachineRole, getMachineSetInstanceType } from '@console/shared';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ListPageBody, RowProps, TableColumn } from '@console/dynamic-plugin-sdk';\nimport { Tooltip, Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { MachineAutoscalerModel, MachineModel, MachineSetModel, NodeModel } from '../models';\nimport {\n  K8sKind,\n  MachineDeploymentKind,\n  MachineSetKind,\n  MachineKind,\n  NodeKind,\n  referenceForModel,\n  Selector as SelectorType,\n  LabelSelector,\n} from '../module/k8s';\nimport { MachinePage } from './machine';\nimport { configureMachineAutoscalerModal, configureReplicaCountModal } from './modals';\nimport { DetailsPage, TableData } from './factory';\nimport VirtualizedTable from './factory/Table/VirtualizedTable';\nimport { sortResourceByValue } from './factory/Table/sort';\nimport ListPageFilter from './factory/ListPage/ListPageFilter';\nimport ListPageHeader from './factory/ListPage/ListPageHeader';\nimport { useListPageFilter } from './factory/ListPage/filter-hook';\nimport ListPageCreate from './factory/ListPage/ListPageCreate';\nimport {\n  Kebab,\n  KebabAction,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Selector,\n  navFactory,\n  resourcePath,\n  useAccessReview,\n  convertToBaseValue,\n  formatBytesAsGiB,\n} from './utils';\nimport { ResourceEventStream } from './events';\n\nconst MachinesResource = {\n  isList: true,\n  kind: referenceForModel(MachineModel),\n};\n\nconst NodesResource = {\n  isList: true,\n  kind: NodeModel.kind,\n  namespaced: false,\n};\n\nconst machineReplicasModal = (\n  resourceKind: K8sKind,\n  resource: MachineSetKind | MachineDeploymentKind,\n) =>\n  configureReplicaCountModal({\n    resourceKind,\n    resource,\n    // t('public~Edit Machine count')\n    titleKey: 'public~Edit Machine count',\n    // t('public~{{resourceKind}} maintain the proper number of healthy machines.')\n    messageKey: 'public~{{resourceKind}} maintain the proper number of healthy machines.',\n    messageVariables: { resourceKind: resourceKind.labelPlural },\n  });\n\nexport const editCountAction: KebabAction = (\n  kind: K8sKind,\n  resource: MachineSetKind | MachineDeploymentKind,\n) => ({\n  // t('public~Edit Machine count')\n  labelKey: 'public~Edit Machine count',\n  callback: () => machineReplicasModal(kind, resource),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: resource.metadata.name,\n    namespace: resource.metadata.namespace,\n    verb: 'patch',\n  },\n});\n\nconst configureMachineAutoscaler: KebabAction = (kind: K8sKind, machineSet: MachineSetKind) => ({\n  // t('public~Create MachineAutoscaler')\n  labelKey: 'public~Create MachineAutoscaler',\n  callback: () => configureMachineAutoscalerModal({ machineSet, cancel: _.noop, close: _.noop }),\n  accessReview: {\n    group: MachineAutoscalerModel.apiGroup,\n    resource: MachineAutoscalerModel.plural,\n    namespace: machineSet.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst menuActions = [\n  editCountAction,\n  configureMachineAutoscaler,\n  ...Kebab.getExtensionsActionsForKind(MachineSetModel),\n  ...Kebab.factory.common,\n];\nconst machineReference = referenceForModel(MachineModel);\nconst machineSetReference = referenceForModel(MachineSetModel);\n\n// `spec.replicas` defaults to 1 if not specified. Make sure to differentiate between undefined and 0.\nexport const getDesiredReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.spec?.replicas ?? 1;\nconst getReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.replicas || 0;\nexport const getReadyReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.readyReplicas || 0;\nexport const getAvailableReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.availableReplicas || 0;\n\nconst tableColumnInfo = [\n  { className: '', id: 'name' },\n  { className: '', id: 'namespace' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-md'), id: 'machines' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'instanceType' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'cpu' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'memory' },\n  { className: Kebab.columnClass, id: '' },\n];\n\nexport const MachineCounts: React.FC<MachineCountsProps> = ({ resourceKind, resource }) => {\n  const editReplicas = (event) => {\n    event.preventDefault();\n    machineReplicasModal(resourceKind, resource);\n  };\n\n  const desiredReplicas = getDesiredReplicas(resource);\n  const replicas = getReplicas(resource);\n  const readyReplicas = getReadyReplicas(resource);\n  const availableReplicas = getAvailableReplicas(resource);\n\n  const canUpdate = useAccessReview({\n    group: resourceKind.apiGroup,\n    resource: resourceKind.plural,\n    verb: 'patch',\n    name: resource.metadata.name,\n    namespace: resource.metadata.namespace,\n  });\n  const { t } = useTranslation();\n  const desiredReplicasText = `${desiredReplicas}  ${t('public~machine', {\n    count: desiredReplicas,\n  })}`;\n\n  return (\n    <div className=\"co-m-pane__body-group\">\n      <div className=\"co-detail-table\">\n        <div className=\"co-detail-table__row row\">\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">{t('public~Desired count')}</dt>\n              <dd>\n                {canUpdate ? (\n                  <Button variant=\"link\" type=\"button\" isInline onClick={editReplicas}>\n                    {desiredReplicasText}\n                    <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                  </Button>\n                ) : (\n                  desiredReplicasText\n                )}\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">{t('public~Current count')}</dt>\n              <dd>\n                <Tooltip content={t('public~The most recently observed number of replicas.')}>\n                  <span>{t('public~{{replicas}} machine', { replicas, count: replicas })}</span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">{t('public~Ready count')}</dt>\n              <dd>\n                <Tooltip\n                  content={t(\n                    'public~The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is ready.',\n                  )}\n                >\n                  <span>\n                    {t('public~{{readyReplicas}} machine', { readyReplicas, count: readyReplicas })}\n                  </span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section co-detail-table__section--last\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">{t('public~Available count')}</dt>\n              <dd>\n                <Tooltip\n                  content={t(\n                    'public~The number of available replicas (ready for at least minReadySeconds) for this MachineSet.',\n                  )}\n                >\n                  <span>\n                    {t('public~{{availableReplicas}} machine', {\n                      availableReplicas,\n                      count: availableReplicas,\n                    })}\n                  </span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const MachineTabPage: React.FC<MachineTabPageProps> = ({ obj }) => (\n  <MachinePage namespace={obj.metadata.namespace} showTitle={false} selector={obj.spec.selector} />\n);\n\nconst MachineSetDetails: React.FC<MachineSetDetailsProps> = ({ obj }) => {\n  const machineRole = getMachineRole(obj);\n  const { availabilityZone, region } = getMachineAWSPlacement(obj);\n  const instanceType = getMachineSetInstanceType(obj);\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~MachineSet details')} />\n        <MachineCounts resourceKind={MachineSetModel} resource={obj} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={obj}>\n              <dt>{t('public~Selector')}</dt>\n              <dd>\n                <Selector\n                  kind={machineReference}\n                  selector={obj.spec?.selector}\n                  namespace={obj.metadata.namespace}\n                />\n              </dd>\n              <dt>{t('public~Instance type')}</dt>\n              <dd>{instanceType || '-'}</dd>\n              {machineRole && (\n                <>\n                  <dt>{t('public~Machine role')}</dt>\n                  <dd>{machineRole}</dd>\n                </>\n              )}\n              {region && (\n                <>\n                  <dt>{t('public~Region')}</dt>\n                  <dd>{region}</dd>\n                </>\n              )}\n              {availabilityZone && (\n                <>\n                  <dt>{t('public~Availability zone')}</dt>\n                  <dd>{availabilityZone}</dd>\n                </>\n              )}\n            </ResourceSummary>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const MachineSetList: React.FC<MachineSetListProps> = (props) => {\n  const { t } = useTranslation();\n\n  const [machines] = useK8sWatchResource<MachineKind[]>(MachinesResource);\n  const [nodes] = useK8sWatchResource<NodeKind[]>(NodesResource);\n\n  // TODO (jon) - use React context to share capacityResolver across table columns and rows\n  const capacityResolver = React.useCallback(\n    (obj: MachineSetKind) => {\n      const machine = (machines ?? [])?.find((m) => {\n        return new LabelSelector(obj.spec.selector).matches(m);\n      });\n      const node = (nodes ?? []).find(\n        (n) => machine && machine.status?.nodeRef?.uid === n.metadata.uid,\n      );\n      const { cpu, memory } = node?.status?.capacity ?? {};\n      return {\n        cpu: convertToBaseValue(cpu) ?? 0,\n        memory: formatBytesAsGiB(convertToBaseValue(memory) ?? 0),\n      };\n    },\n    [machines, nodes],\n  );\n\n  // TODO (jon) - this should be a hook\n  const machineSetTableColumn = React.useMemo<TableColumn<MachineSetKind>[]>(\n    () => [\n      {\n        title: t('public~Name'),\n        sort: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[0].className },\n        id: tableColumnInfo[0].id,\n      },\n      {\n        title: t('public~Namespace'),\n        sort: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[1].className },\n        id: tableColumnInfo[1].id,\n      },\n      {\n        title: t('public~Machines'),\n        sort: 'status.readyReplicas',\n        transforms: [sortable],\n        props: { className: tableColumnInfo[2].className },\n        id: tableColumnInfo[2].id,\n      },\n      {\n        title: t('public~Instance type'),\n        sort: (data, direction) =>\n          data.sort(sortResourceByValue(direction, getMachineSetInstanceType)),\n        transforms: [sortable],\n        props: { className: tableColumnInfo[3].className },\n        id: tableColumnInfo[3].id,\n      },\n      {\n        title: t('public~CPU'),\n        sort: (data, direction) =>\n          data.sort(sortResourceByValue(direction, (obj) => capacityResolver(obj).cpu)),\n        transforms: [sortable],\n        props: { className: tableColumnInfo[4].className },\n        id: tableColumnInfo[4].id,\n      },\n      {\n        title: t('public~Memory'),\n        sort: (data, direction) =>\n          data.sort(sortResourceByValue(direction, (obj) => capacityResolver(obj).memory)),\n        transforms: [sortable],\n        props: { className: tableColumnInfo[5].className },\n        id: tableColumnInfo[5].id,\n      },\n      {\n        title: '',\n        props: { className: tableColumnInfo[6].className },\n        id: tableColumnInfo[6].id,\n      },\n    ],\n    [capacityResolver, t],\n  );\n\n  // TODO (jon): Anti-pattern. This should be declared outside the MachineSetList component\n  const MachineSetTableRow: React.FC<RowProps<MachineSetKind>> = ({ obj }) => {\n    const { cpu, memory } = capacityResolver(obj);\n    const readyReplicas = getReadyReplicas(obj);\n    const desiredReplicas = getDesiredReplicas(obj);\n    const instanceType = getMachineSetInstanceType(obj);\n    return (\n      <>\n        <TableData {...tableColumnInfo[0]}>\n          <ResourceLink\n            kind={machineSetReference}\n            name={obj.metadata.name}\n            namespace={obj.metadata.namespace}\n          />\n        </TableData>\n        <TableData\n          {...tableColumnInfo[1]}\n          className={classNames(tableColumnInfo[1].className, 'co-break-word')}\n        >\n          <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n        </TableData>\n        <TableData {...tableColumnInfo[2]}>\n          <Link\n            to={`${resourcePath(\n              machineSetReference,\n              obj.metadata.name,\n              obj.metadata.namespace,\n            )}/machines`}\n          >\n            {t('public~{{readyReplicas}} of {{count}} machine', {\n              readyReplicas,\n              count: desiredReplicas,\n            })}\n          </Link>\n        </TableData>\n        <TableData {...tableColumnInfo[3]}>{instanceType || '-'}</TableData>\n        <TableData {...tableColumnInfo[4]}>{t('public~{{count}} core', { count: cpu })}</TableData>\n        <TableData {...tableColumnInfo[5]}>{t('public~{{memory}} GiB', { memory })}</TableData>\n        <TableData {...tableColumnInfo[6]}>\n          <ResourceKebab actions={menuActions} kind={machineSetReference} resource={obj} />\n        </TableData>\n      </>\n    );\n  };\n\n  return (\n    <VirtualizedTable<MachineSetKind>\n      {...props}\n      aria-label={t('public~MachineSets')}\n      label={t('public~MachineSets')}\n      columns={machineSetTableColumn}\n      Row={MachineSetTableRow}\n    />\n  );\n};\n\nexport const MachineSetPage: React.FC<MachineSetPageProps> = ({\n  namespace,\n  selector,\n  showTitle = true,\n  hideLabelFilter,\n  hideNameLabelFilters,\n  hideColumnManagement,\n}) => {\n  const [machineSets, loaded, loadError] = useK8sWatchResource<MachineSetKind[]>({\n    isList: true,\n    kind: referenceForModel(MachineSetModel),\n    selector,\n    namespace,\n  });\n\n  const [data, filteredData, onFilterChange] = useListPageFilter(machineSets);\n\n  const { t } = useTranslation();\n  return (\n    <>\n      <ListPageHeader title={showTitle ? t('public~MachineSets') : undefined}>\n        <ListPageCreate groupVersionKind={referenceForModel(MachineSetModel)}>\n          {t('public~Create MachineSet')}\n        </ListPageCreate>\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter\n          data={data}\n          loaded={loaded}\n          onFilterChange={onFilterChange}\n          hideNameLabelFilters={hideNameLabelFilters}\n          hideLabelFilter={hideLabelFilter}\n          hideColumnManagement={hideColumnManagement}\n        />\n        <MachineSetList\n          data={filteredData}\n          unfilteredData={machineSets}\n          loaded={loaded}\n          loadError={loadError}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\nexport const MachineSetDetailsPage: React.FC = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActions}\n    kind={machineSetReference}\n    pages={[\n      navFactory.details(MachineSetDetails),\n      navFactory.editYaml(),\n      navFactory.machines(MachineTabPage),\n      navFactory.events(ResourceEventStream),\n    ]}\n  />\n);\n\ntype MachineSetListProps = {\n  data: MachineSetKind[];\n  unfilteredData: MachineSetKind[];\n  loaded: boolean;\n  loadError: any;\n};\n\nexport type MachineCountsProps = {\n  resourceKind: K8sKind;\n  resource: MachineSetKind | MachineDeploymentKind;\n};\n\nexport type MachineTabPageProps = {\n  obj: MachineSetKind;\n};\n\nexport type MachineSetDetailsProps = {\n  obj: MachineSetKind;\n};\n\nexport type MachineSetPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: SelectorType;\n  hideLabelFilter?: boolean;\n  hideNameLabelFilters?: boolean;\n  hideColumnManagement?: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { NodeAddress } from '@console/dynamic-plugin-sdk/src/extensions/console-types';\nimport { DetailPropertyList, DetailPropertyListItem } from '@console/shared';\n\ntype NodeIPListProps = {\n  ips: NodeAddress[];\n  expand?: boolean;\n};\n\nconst NodeIPList: React.FC<NodeIPListProps> = ({ ips, expand = false }) => (\n  <DetailPropertyList>\n    {_.sortBy(ips, ['type']).map(\n      ({ type, address }) =>\n        address &&\n        (expand || type === 'InternalIP') && (\n          <DetailPropertyListItem\n            key={`{${type}/${address}`}\n            title={type.replace(/([a-z])([A-Z])/g, '$1 $2')}\n          >\n            {address}\n          </DetailPropertyListItem>\n        ),\n    )}\n  </DetailPropertyList>\n);\n\nexport default NodeIPList;\n"],"sourceRoot":""}