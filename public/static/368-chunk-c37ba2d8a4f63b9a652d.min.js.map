{"version":3,"sources":["webpack:///./packages/console-dynamic-plugin-sdk/src/validation/BaseValidator.ts","webpack:///./packages/console-dynamic-plugin-sdk/src/validation/ValidationResult.ts","webpack:///./packages/console-dynamic-plugin-sdk/src/validation/SchemaValidator.ts"],"names":["BaseValidator","description","this","result","ValidationAssertions","obj","objPath","assertThat","length","test","ValidationResult","errors","assertions","condition","message","addError","push","bold","map","e","red","join","throwOnErrors","hasErrors","console","error","formatErrors","Error","SchemaValidator","ajv","allErrors","super","schema","data","dataVar","validate","forEach","dataPath"],"mappings":"8FAAA,iDAEO,MAAeA,EAGpB,YAAYC,GACVC,KAAKC,OAAS,IAAI,IAAiBF,M,mCCNvC,oEAGA,MAAMG,EACJ,YAA6BD,GAAA,KAAAA,SAG7B,sBAAsBE,EAAUC,GACX,iBAARD,IACTH,KAAKC,OAAOI,WACVF,EAAIG,QAAU,IACXF,EAAH,6CAEFJ,KAAKC,OAAOI,WACV,gBAAgBE,KAAKJ,GAClBC,EAAH,oEAEFJ,KAAKC,OAAOI,WACV,aAAaE,KAAKJ,IAAQ,aAAaI,KAAKJ,GACzCC,EAAH,uDAKN,kBAAkBD,EAAUC,GACP,iBAARD,GACTH,KAAKC,OAAOI,aAAa,QAAaF,GAASC,EAAH,6BAIhD,uBAAuBD,EAAUC,GACZ,iBAARD,GACTH,KAAKC,OAAOI,aAAa,aAAkBF,GAASC,EAAH,+BAKhD,MAAMI,EAKX,YAA6BT,GAAA,KAAAA,cAJZ,KAAAU,OAAmB,GAE3B,KAAAC,WAAa,IAAIR,EAAqBF,MAI/C,WAAWW,EAAoBC,GACxBD,GACHX,KAAKa,SAASD,GAIlB,SAASA,GACPZ,KAAKS,OAAOK,KAAKF,GAGnB,YACE,OAAOZ,KAAKS,OAAOH,OAAS,EAG9B,YACE,MAAO,IAAIN,KAAKS,QAGlB,eAGE,MAFe,GAAG,IAAMM,KAAKf,KAAKD,iBAAiBC,KAAKS,OAAOH,mBAC5CN,KAAKS,OAAOO,IAAKC,GAAM,OAAO,IAAMC,IAAID,IAChCE,KAAK,MAGlC,OAAOC,GAAyB,GAC9B,GAAIpB,KAAKqB,cAEPC,QAAQC,MAAMvB,KAAKwB,gBAEfJ,GACF,MAAM,IAAIK,MAAM,wB,kCC1ExB,gFAGO,MAAMC,UAAwB,IACnC,YAAY3B,EAAsC4B,EAAM,IAAI,EAAI,CAAEC,WAAW,KAC3EC,MAAM9B,GAD0C,KAAA4B,MAIlD,SAASG,EAAYC,EAAWC,EAAkB,OAQhD,OAPKhC,KAAK2B,IAAIM,SAASH,EAAQC,IAC7B/B,KAAK2B,IAAIlB,OAAOyB,QAASX,IAEvBvB,KAAKC,OAAOY,SAAS,GAAGmB,IAAUT,EAAMY,YAAYZ,EAAMX,aAIvDZ,KAAKC","file":"368-chunk-c37ba2d8a4f63b9a652d.min.js","sourcesContent":["import { ValidationResult } from './ValidationResult';\n\nexport abstract class BaseValidator {\n  readonly result: ValidationResult;\n\n  constructor(description: string) {\n    this.result = new ValidationResult(description);\n  }\n\n  abstract validate(...args: any[]): ValidationResult;\n}\n","import chalk from 'chalk';\nimport * as semver from 'semver';\n\nclass ValidationAssertions {\n  constructor(private readonly result: ValidationResult) {}\n\n  // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names\n  validDNSSubdomainName(obj: any, objPath: string) {\n    if (typeof obj === 'string') {\n      this.result.assertThat(\n        obj.length <= 253,\n        `${objPath} must contain no more than 253 characters`,\n      );\n      this.result.assertThat(\n        /^[a-z0-9-.]*$/.test(obj),\n        `${objPath} must contain only lowercase alphanumeric characters, '-' or '.'`,\n      );\n      this.result.assertThat(\n        /^[a-z0-9]+/.test(obj) && /[a-z0-9]+$/.test(obj),\n        `${objPath} must start and end with an alphanumeric character`,\n      );\n    }\n  }\n\n  validSemverString(obj: any, objPath: string) {\n    if (typeof obj === 'string') {\n      this.result.assertThat(!!semver.valid(obj), `${objPath} must be semver compliant`);\n    }\n  }\n\n  validSemverRangeString(obj: any, objPath: string) {\n    if (typeof obj === 'string') {\n      this.result.assertThat(!!semver.validRange(obj), `${objPath} semver range is not valid`);\n    }\n  }\n}\n\nexport class ValidationResult {\n  private readonly errors: string[] = [];\n\n  readonly assertions = new ValidationAssertions(this);\n\n  constructor(private readonly description: string) {}\n\n  assertThat(condition: boolean, message: string) {\n    if (!condition) {\n      this.addError(message);\n    }\n  }\n\n  addError(message: string) {\n    this.errors.push(message);\n  }\n\n  hasErrors() {\n    return this.errors.length > 0;\n  }\n\n  getErrors() {\n    return [...this.errors];\n  }\n\n  formatErrors() {\n    const prefix = `${chalk.bold(this.description)} (${this.errors.length} errors)\\n`;\n    const errorLines = this.errors.map((e) => `    ${chalk.red(e)}`);\n    return prefix + errorLines.join('\\n');\n  }\n\n  report(throwOnErrors: boolean = true) {\n    if (this.hasErrors()) {\n      // eslint-disable-next-line no-console\n      console.error(this.formatErrors());\n\n      if (throwOnErrors) {\n        throw new Error('Validation failed');\n      }\n    }\n  }\n}\n","import * as Ajv from 'ajv';\nimport { BaseValidator } from './BaseValidator';\n\nexport class SchemaValidator extends BaseValidator {\n  constructor(description: string, private readonly ajv = new Ajv({ allErrors: true })) {\n    super(description);\n  }\n\n  validate(schema: {}, data: any, dataVar: string = 'obj') {\n    if (!this.ajv.validate(schema, data)) {\n      this.ajv.errors.forEach((error) => {\n        // This format is consistent with ajv.errorsText() implementation\n        this.result.addError(`${dataVar}${error.dataPath} ${error.message}`);\n      });\n    }\n\n    return this.result;\n  }\n}\n"],"sourceRoot":""}