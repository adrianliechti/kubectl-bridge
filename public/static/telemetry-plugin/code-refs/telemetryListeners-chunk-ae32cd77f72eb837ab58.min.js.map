{"version":3,"sources":["webpack:///./packages/console-telemetry-plugin/src/listeners/index.ts","webpack:///./packages/console-telemetry-plugin/src/listeners/const.ts","webpack:///./packages/console-telemetry-plugin/src/listeners/debug.ts","webpack:///./packages/console-telemetry-plugin/src/listeners/usage.ts","webpack:///./packages/console-telemetry-plugin/src/listeners/segment.ts"],"names":["TELEMETRY_DISABLED","window","SERVER_FLAGS","telemetry","DISABLED","DEVSANDBOX_DISABLED","TELEMETER_CLIENT_DISABLED","TELEMETRY_DEBUG","DEBUG","eventListener","eventType","properties","console","debug","trackUsage","data","fetch","method","body","JSON","stringify","then","response","ok","error","statusText","catch","perspective","event","apiKey","DEVSANDBOX_SEGMENT_API_KEY","SEGMENT_API_KEY","SEGMENT_PUBLIC_API_KEY","apiHost","SEGMENT_API_HOST","jsHost","SEGMENT_JS_HOST","jsUrl","SEGMENT_JS_URL","encodeURIComponent","info","analytics","initialize","invoked","methods","factory","e","t","Array","prototype","slice","call","arguments","unshift","push","key","load","document","createElement","type","async","src","n","getElementsByTagName","parentNode","insertBefore","_loadOptions","SNIPPET_VERSION","options","integrations","initSegment","anonymousIP","context","ip","user","otherProperties","clusterId","organizationId","username","anonymousIdInput","anonymousIdBuffer","crypto","subtle","digest","TextEncoder","encode","anonymousId","from","Uint8Array","map","b","toString","padStart","join","identify","page","undefined","track"],"mappings":"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","file":"telemetry-plugin/code-refs/telemetryListeners-chunk-ae32cd77f72eb837ab58.min.js","sourcesContent":["export { eventListener as debug } from './debug';\nexport { eventListener as usage } from './usage';\nexport { eventListener as segment } from './segment';\n","export const TELEMETRY_DISABLED =\n  window.SERVER_FLAGS?.telemetry?.DISABLED === 'true' ||\n  window.SERVER_FLAGS?.telemetry?.DEVSANDBOX_DISABLED === 'true' ||\n  window.SERVER_FLAGS?.telemetry?.TELEMETER_CLIENT_DISABLED === 'true';\n\nexport const TELEMETRY_DEBUG = window.SERVER_FLAGS?.telemetry?.DEBUG === 'true';\n","import { TelemetryEventListener } from '@console/dynamic-plugin-sdk/src';\nimport { TELEMETRY_DEBUG } from './const';\n\nexport const eventListener: TelemetryEventListener = (eventType: string, properties?: any) => {\n  if (TELEMETRY_DEBUG) {\n    // eslint-disable-next-line no-console\n    console.debug('console-telemetry-plugin: received telemetry event:', eventType, properties);\n  }\n};\n","import { TelemetryEventListener } from '@console/dynamic-plugin-sdk/src';\n\n/**\n * Fire and forget implementation to send usage data to the backend.\n * See pkg/usage/ for more information.\n */\nconst trackUsage = (data: { event: string; perspective: string }) => {\n  return fetch('/metrics/usage', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        // eslint-disable-next-line no-console\n        console.error('console-telemetry-plugin: unable to track usage:', response.statusText);\n      }\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('console-telemetry-plugin: unable to track usage:', error);\n    });\n};\n\nexport const eventListener: TelemetryEventListener = async (\n  eventType: string,\n  properties?: any,\n) => {\n  switch (eventType) {\n    case 'identify': {\n      // identify is triggered once per \"browser load\" ~= page_view\n      const perspective = properties?.perspective || 'unknown';\n      trackUsage({ event: 'page_view', perspective });\n      break;\n    }\n    case 'page': {\n      // page URL changed, incl. history.push / react-router.push/replace ~= page_impression\n      const perspective = properties?.perspective || 'unknown';\n      trackUsage({ event: 'page_impression', perspective });\n      break;\n    }\n    case 'Perspective Changed': {\n      const perspective = properties?.perspective || 'unknown';\n      trackUsage({ event: 'perspective_changed', perspective });\n      break;\n    }\n    default:\n    // ignore all other events\n  }\n};\n","import { TelemetryEventListener } from '@console/dynamic-plugin-sdk/src';\nimport { TELEMETRY_DISABLED, TELEMETRY_DEBUG } from './const';\n\n/** Segmnet API Key that looks like a hash */\nconst apiKey =\n  window.SERVER_FLAGS?.telemetry?.DEVSANDBOX_SEGMENT_API_KEY ||\n  window.SERVER_FLAGS?.telemetry?.SEGMENT_API_KEY ||\n  window.SERVER_FLAGS?.telemetry?.SEGMENT_PUBLIC_API_KEY ||\n  '';\n\n/**\n * Segment `apiHost` parameter that should have the format like `api.segment.io/v1`.\n * Is not defined here so that Segment can change it.\n */\nconst apiHost = window.SERVER_FLAGS?.telemetry?.SEGMENT_API_HOST || '';\n\n/** Segment JS host. Default: `cdn.segment.com` */\nconst jsHost = window.SERVER_FLAGS?.telemetry?.SEGMENT_JS_HOST || 'cdn.segment.com';\n\n/** Full segment JS URL */\nconst jsUrl =\n  window.SERVER_FLAGS?.telemetry?.SEGMENT_JS_URL ||\n  `https://${jsHost}/analytics.js/v1/${encodeURIComponent(apiKey)}/analytics.min.js`;\n\nconst initSegment = () => {\n  if (TELEMETRY_DEBUG) {\n    // eslint-disable-next-line no-console\n    console.info('console-telemetry-plugin: initialize segment API with:', {\n      apiKey,\n      apiHost,\n      jsHost,\n      jsUrl,\n    });\n  }\n  // eslint-disable-next-line no-multi-assign\n  const analytics = ((window as any).analytics = (window as any).analytics || []);\n  if (analytics.initialize) {\n    return;\n  }\n  if (analytics.invoked) {\n    // eslint-disable-next-line no-console\n    console.error('console-telemetry-plugin: segment snippet included twice');\n    return;\n  }\n  analytics.invoked = true;\n  analytics.methods = [\n    'trackSubmit',\n    'trackClick',\n    'trackLink',\n    'trackForm',\n    'pageview',\n    'identify',\n    'reset',\n    'group',\n    'track',\n    'ready',\n    'alias',\n    'debug',\n    'page',\n    'once',\n    'off',\n    'on',\n    'addSourceMiddleware',\n    'addIntegrationMiddleware',\n    'setAnonymousId',\n    'addDestinationMiddleware',\n  ];\n  analytics.factory = function (e: string) {\n    return function () {\n      // eslint-disable-next-line prefer-rest-params\n      const t = Array.prototype.slice.call(arguments);\n      t.unshift(e);\n      analytics.push(t);\n      return analytics;\n    };\n  };\n  for (const key of analytics.methods) {\n    analytics[key] = analytics.factory(key);\n  }\n  analytics.load = function (key: string, e: Event) {\n    const t = document.createElement('script');\n    t.type = 'text/javascript';\n    t.async = true;\n    t.src = jsUrl;\n    const n = document.getElementsByTagName('script')[0];\n    if (n.parentNode) {\n      n.parentNode.insertBefore(t, n);\n    }\n    // eslint-disable-next-line no-underscore-dangle\n    analytics._loadOptions = e;\n  };\n  analytics.SNIPPET_VERSION = '4.13.1';\n  const options: Record<string, any> = {};\n  if (apiHost) {\n    options.integrations = { 'Segment.io': { apiHost } };\n  }\n  analytics.load(apiKey, options);\n};\n\nif (!TELEMETRY_DISABLED && apiKey) {\n  initSegment();\n}\n\nconst anonymousIP = {\n  context: {\n    ip: '0.0.0.0',\n  },\n};\n\nexport const eventListener: TelemetryEventListener = async (\n  eventType: string,\n  properties?: any,\n) => {\n  if (!apiKey) {\n    if (TELEMETRY_DEBUG) {\n      // eslint-disable-next-line no-console\n      console.debug(\n        'console-telemetry-plugin: missing Segment API key - ignoring telemetry event:',\n        eventType,\n        properties,\n      );\n    }\n    return;\n  }\n  switch (eventType) {\n    case 'identify':\n      {\n        const { user, ...otherProperties } = properties;\n        const clusterId = otherProperties?.clusterId;\n        const organizationId = otherProperties?.organizationId;\n        const username = user?.username;\n        if (username) {\n          let anonymousIdInput: string;\n          if (organizationId) {\n            if (username === 'kubeadmin' || username === 'kube:admin') {\n              anonymousIdInput = `${organizationId}@${clusterId}`;\n            } else {\n              anonymousIdInput = `${username}@${clusterId}`;\n            }\n          } else {\n            anonymousIdInput = username;\n          }\n\n          // Use SHA1 hash algorithm to anonymize the user\n          const anonymousIdBuffer = await crypto.subtle.digest(\n            'SHA-1',\n            new TextEncoder().encode(anonymousIdInput),\n          );\n          const anonymousIdArray = Array.from(new Uint8Array(anonymousIdBuffer));\n          const anonymousId = anonymousIdArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n\n          if (TELEMETRY_DEBUG) {\n            // eslint-disable-next-line no-console\n            console.debug(\n              `console-telemetry-plugin: use anonymized user identifier to group events`,\n              { username, clusterId, organizationId, anonymousIdInput, anonymousId },\n            );\n          }\n\n          (window as any).analytics.identify(anonymousId, otherProperties, anonymousIP);\n        } else {\n          // eslint-disable-next-line no-console\n          console.error(\n            'console-telemetry-plugin: unable to identify as no user name was provided',\n            properties,\n          );\n        }\n      }\n      break;\n    case 'page':\n      (window as any).analytics.page(undefined, properties, anonymousIP);\n      break;\n    default:\n      (window as any).analytics.track(eventType, properties, anonymousIP);\n  }\n};\n"],"sourceRoot":""}