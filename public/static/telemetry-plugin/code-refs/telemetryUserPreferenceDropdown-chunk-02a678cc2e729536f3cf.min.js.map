{"version":3,"sources":["webpack:///./packages/console-telemetry-plugin/src/components/TelemetryUserPreferenceDropdown.tsx"],"names":["TelemetryAnalyticsSelect","disabled","value","onChange","t","options","ALLOW","title","description","isSelected","DENY","isOpen","setIsOpen","selection","find","option","toggle","toggleRef","ref","onClick","isDisabled","isFullWidth","id","toggleId","onSelect","_","selectedValue","maxHeight","onOpenChange","open","map","key","fireTelemetryEvent","currentUserPreferenceTelemetryValue","setCurrentUserPreferenceTelemetryValue","className","fieldId","label","window","SERVER_FLAGS","telemetry","STATE","selectedOption","customize","analytics"],"mappings":"6FAAA,yGA2BA,MAAMA,EAID,EAAGC,WAAUC,QAAOC,e,MACvB,MAAM,EAAEC,GAAM,2BACRC,EAA6C,CACjD,CACEH,MAAO,KAAyBI,MAChCC,MAAOH,EAAE,mCACTI,YAAaJ,EAAE,mDACfK,WAAYP,IAAU,KAAyBI,OAEjD,CACEJ,MAAO,KAAyBQ,KAChCH,MAAOH,EAAE,iCACTI,YAAaJ,EAAE,0DACfK,WAAYP,IAAU,KAAyBQ,QAG5CC,EAAQC,GAAa,YAAe,GACrCC,EAAuD,QAA3C,EAAAR,EAAQS,KAAMC,GAAWA,EAAON,mBAAW,eAAEP,MAgB/D,OACE,gBAAC,IAAM,CACLc,OAhBYC,I,MAAkD,OAChE,gBAAC,IAAU,CACTC,IAAKD,EACLE,QAAS,IAAMP,GAAWD,GAC1BS,WAAYnB,EACZoB,aAAW,EACXC,GAAG,aAEFT,EACuD,QAApD,EAAAR,EAAQS,KAAMC,GAAWA,EAAOb,QAAUW,UAAU,eAAEN,MACtDH,EAAE,4CAONO,OAAQA,EACRY,SAAS,YACTC,SAAU,CAACC,EAAGC,KACRA,GACFvB,EAASuB,GAEXd,GAAU,IACX,aACWR,EAAE,0CACduB,UAAW,IACXC,aAAeC,GAASjB,EAAUiB,IAElC,gBAAC,IAAU,KACRxB,EAAQyB,IAAKf,GACZ,gBAAC,IAAY,CACXgB,IAAKhB,EAAOb,MACZA,MAAOa,EACPP,YAAaO,EAAOP,YACpBC,WAAYM,EAAON,YAElBM,EAAOR,WA+CL,UAvCmC,K,MAChD,MAAM,EAAEH,GAAM,2BACR4B,EAAqB,gBAGzBC,EACAC,GACE,aAA0C,KAAsC,MAAM,GAU1F,OACE,uBAAKC,UAAU,gBACb,gBAAC,IAAS,CAACC,QAAQ,YAAYC,MAAOjC,EAAE,uCACtC,gBAACJ,EAAwB,CACvBC,WAAwC,QAA7B,EAAAqC,OAAOC,aAAaC,iBAAS,eAAEC,OAC1CvC,MAAO+B,EACP9B,SAdUuC,IAChBV,EAAmB,oCAAqC,CACtDW,UAAW,8BACXC,UAAWF,EAAexC,QAE5BgC,EAAuCQ,EAAexC,UAWlD,gBAAC,IAAc,KACb,gBAAC,IAAU,KACT,gBAAC,IAAc,KACZE,EACC","file":"telemetry-plugin/code-refs/telemetryUserPreferenceDropdown-chunk-02a678cc2e729536f3cf.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  Select,\n  SelectList,\n  SelectOption,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PREFERRED_TELEMETRY_USER_SETTING_KEY,\n  USER_TELEMETRY_ANALYTICS,\n  useTelemetry,\n  useUserSettings,\n} from '@console/shared';\n\ntype TelemetryAnalyticsSelectOptions = {\n  value: USER_TELEMETRY_ANALYTICS;\n  title: string;\n  description: string;\n  isSelected: boolean;\n};\n\nconst TelemetryAnalyticsSelect: React.FC<{\n  disabled: boolean;\n  value?: string;\n  onChange: (selectedOption: TelemetryAnalyticsSelectOptions) => void;\n}> = ({ disabled, value, onChange }) => {\n  const { t } = useTranslation();\n  const options: TelemetryAnalyticsSelectOptions[] = [\n    {\n      value: USER_TELEMETRY_ANALYTICS.ALLOW,\n      title: t('console-telemetry-plugin~Accept'),\n      description: t('console-telemetry-plugin~Send telemetry events.'),\n      isSelected: value === USER_TELEMETRY_ANALYTICS.ALLOW,\n    },\n    {\n      value: USER_TELEMETRY_ANALYTICS.DENY,\n      title: t('console-telemetry-plugin~Deny'),\n      description: t('console-telemetry-plugin~Do not send telemetry events.'),\n      isSelected: value === USER_TELEMETRY_ANALYTICS.DENY,\n    },\n  ];\n  const [isOpen, setIsOpen] = React.useState(false);\n  const selection = options.find((option) => option.isSelected)?.value;\n\n  const toggle = (toggleRef: React.RefObject<MenuToggleElement>) => (\n    <MenuToggle\n      ref={toggleRef}\n      onClick={() => setIsOpen(!isOpen)}\n      isDisabled={disabled}\n      isFullWidth\n      id=\"telemetry\"\n    >\n      {selection\n        ? options.find((option) => option.value === selection)?.title\n        : t('console-telemetry-plugin~Select option')}\n    </MenuToggle>\n  );\n\n  return (\n    <Select\n      toggle={toggle}\n      isOpen={isOpen}\n      toggleId=\"telemetry\"\n      onSelect={(_, selectedValue?: TelemetryAnalyticsSelectOptions) => {\n        if (selectedValue) {\n          onChange(selectedValue);\n        }\n        setIsOpen(false);\n      }}\n      aria-label={t('console-telemetry-plugin~Select option')}\n      maxHeight={300}\n      onOpenChange={(open) => setIsOpen(open)}\n    >\n      <SelectList>\n        {options.map((option) => (\n          <SelectOption\n            key={option.value}\n            value={option}\n            description={option.description}\n            isSelected={option.isSelected}\n          >\n            {option.title}\n          </SelectOption>\n        ))}\n      </SelectList>\n    </Select>\n  );\n};\n\nconst TelemetryUserPreferenceDropdown: React.FC = () => {\n  const { t } = useTranslation();\n  const fireTelemetryEvent = useTelemetry();\n\n  const [\n    currentUserPreferenceTelemetryValue,\n    setCurrentUserPreferenceTelemetryValue,\n  ] = useUserSettings<USER_TELEMETRY_ANALYTICS>(PREFERRED_TELEMETRY_USER_SETTING_KEY, null, true);\n\n  const onChange = (selectedOption: TelemetryAnalyticsSelectOptions) => {\n    fireTelemetryEvent('Telemetry user preference changes', {\n      customize: 'User preference - Telemetry',\n      analytics: selectedOption.value,\n    });\n    setCurrentUserPreferenceTelemetryValue(selectedOption.value);\n  };\n\n  return (\n    <div className=\"pf-v5-c-form\">\n      <FormGroup fieldId=\"telemetry\" label={t('console-telemetry-plugin~Telemetry')}>\n        <TelemetryAnalyticsSelect\n          disabled={!window.SERVER_FLAGS.telemetry?.STATE}\n          value={currentUserPreferenceTelemetryValue}\n          onChange={onChange}\n        />\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              {t(\n                'console-telemetry-plugin~Select a option whether to send telemetry events or not.',\n              )}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </div>\n  );\n};\n\nexport default TelemetryUserPreferenceDropdown;\n"],"sourceRoot":""}