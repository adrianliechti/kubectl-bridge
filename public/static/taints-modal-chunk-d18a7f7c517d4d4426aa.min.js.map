{"version":3,"sources":["webpack:///./public/components/modals/taints-modal.tsx"],"names":["TaintsModal","props","taints","setTaints","resource","spec","t","change","e","i","field","newValue","target","value","prevTaints","clonedTaints","effects","NoSchedule","PreferNoSchedule","NoExecute","errorMessage","onSubmit","preventDefault","patch","path","op","handlePromise","resourceKind","close","name","className","label","c","key","type","onChange","required","dropDownClassName","items","selectedKey","effect","title","content","onClick","tmpTaints","splice","remove","variant","inProgress","submitText","cancel","taintsModal"],"mappings":"6FAAA,sJAiBA,MAAMA,EAAc,aAAmBC,IACrC,MAAOC,EAAQC,GAAa,WAAeF,EAAMG,SAASC,KAAKH,QAAU,KAEnE,EAAEI,GAAM,2BAgBRC,EAAS,CAACC,EAAGC,EAAWC,KAC5B,MAAMC,EAAWH,EAAEI,OAASJ,EAAEI,OAAOC,MAAQL,EAC7CL,EAAWW,IACT,MAAMC,EAAe,IAAYD,GAEjC,OADAC,EAAaN,GAAGC,GAASC,EAClBI,KAkBLC,EAAU,CACdC,WAAY,aACZC,iBAAkB,mBAClBC,UAAW,cAGP,aAAEC,GAAiBnB,EAEzB,OACE,wBAAMoB,SA9CQb,IACdA,EAAEc,iBAGF,MACMC,EAAQ,CAAC,CAAEC,KAAM,eAAgBC,GAD5BxB,EAAMG,SAASC,KAAKH,OAAS,UAAY,MACTW,MAAOX,IAElDD,EAAMyB,cAAc,aAASzB,EAAM0B,aAAc1B,EAAMG,SAAUmB,GAAQtB,EAAM2B,QAuCvDC,KAAK,OAAOC,UAAU,6BAC5C,gBAAC,IAAU,KAAExB,EAAE,uBACf,gBAAC,IAAS,KACP,IAAUJ,GACT,gBAAC,IAAQ,CAAC6B,MAAOzB,EAAE,mBAEnB,gCACE,uBAAKwB,UAAU,gDACb,uBAAKA,UAAU,0CAA0CxB,EAAE,eAC3D,uBAAKwB,UAAU,0CAA0CxB,EAAE,iBAC3D,uBAAKwB,UAAU,0CAA0CxB,EAAE,kBAC3D,uBAAKwB,UAAU,+BAEhB,IAAM5B,EAAQ,CAAC8B,EAAGvB,IACjB,uBAAKqB,UAAU,uBAAuBG,IAAKxB,GACzC,uBAAKqB,UAAU,wCACb,uBAAKA,UAAU,0EACZxB,EAAE,eAEL,yBACE4B,KAAK,OACLJ,UAAU,0CACVjB,MAAOmB,EAAEC,IACTE,SAAW3B,GAAMD,EAAOC,EAAGC,EAAG,OAC9B2B,UAAQ,KAGZ,uBAAKN,UAAU,wCACb,uBAAKA,UAAU,0EACZxB,EAAE,iBAEL,yBACE4B,KAAK,OACLJ,UAAU,0CACVjB,MAAOmB,EAAEnB,MACTsB,SAAW3B,GAAMD,EAAOC,EAAGC,EAAG,YAGlC,uBAAKqB,UAAU,mCACf,uBAAKA,UAAU,wCACb,uBAAKA,UAAU,0EACZxB,EAAE,kBAEL,gBAAC,IAAQ,CACPwB,UAAU,wBACVO,kBAAkB,uBAClBC,MAAOtB,EACPmB,SAAW3B,GAAMD,EAAOC,EAAGC,EAAG,UAC9B8B,YAAaP,EAAEQ,OACfC,MAAOzB,EAAQgB,EAAEQ,WAGrB,uBAAKV,UAAU,8DACb,gBAAC,IAAO,CAACY,QAAQ,UACf,gBAAC,IAAM,CACLR,KAAK,SACLJ,UAAU,2BACVa,QAAS,IAhFd,CAAClC,IACd,MAAMmC,EAAY,IAAI1C,GACtB0C,EAAUC,OAAOpC,EAAG,GACpBN,EAAUyC,IA6EuBE,CAAOrC,GAAE,aACZH,EAAE,iBACdyC,QAAQ,SAER,gBAAC,IAAe,CAACjB,UAAU,uDAQzC,gBAAC,IAAM,CAACA,UAAU,wBAAwBa,QAlFjC,KACbxC,EAAU,IAAID,EAJP,CAAE+B,IAAK,GAAIpB,MAAO,GAAI2B,OAAQ,iBAqF0BN,KAAK,SAASa,QAAQ,QAC/E,gBAAC,IAAc,gBAAc,uBAAuBjB,UAAU,oBAC7DxB,EAAE,qBAGP,gBAAC,IAAiB,CAChBc,aAAcA,EACd4B,YAAY,EACZC,WAAY3C,EAAE,eACd4C,OAlHS,KACbjD,EAAM2B,cAuHGuB,EAAc,YAAoBnD","file":"taints-modal-chunk-d18a7f7c517d4d4426aa.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { Dropdown, EmptyBox, withHandlePromise, HandlePromiseProps } from '../utils';\nimport { K8sKind, k8sPatch, NodeKind, Taint } from '../../module/k8s';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '../factory';\n\nconst TaintsModal = withHandlePromise((props: TaintsModalProps) => {\n  const [taints, setTaints] = React.useState(props.resource.spec.taints || []);\n\n  const { t } = useTranslation();\n\n  const submit = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n\n    // Make sure to 'add' if the path does not already exist, otherwise the patch request will fail\n    const op = props.resource.spec.taints ? 'replace' : 'add';\n    const patch = [{ path: '/spec/taints', op, value: taints }];\n\n    props.handlePromise(k8sPatch(props.resourceKind, props.resource, patch), props.close);\n  };\n\n  const cancel = () => {\n    props.close();\n  };\n\n  const change = (e, i: number, field: string) => {\n    const newValue = e.target ? e.target.value : e;\n    setTaints((prevTaints) => {\n      const clonedTaints = _.cloneDeep(prevTaints);\n      clonedTaints[i][field] = newValue;\n      return clonedTaints;\n    });\n  };\n\n  const remove = (i: number) => {\n    const tmpTaints = [...taints];\n    tmpTaints.splice(i, 1);\n    setTaints(tmpTaints);\n  };\n\n  const newTaint = (): Taint => {\n    return { key: '', value: '', effect: 'NoSchedule' };\n  };\n\n  const addRow = () => {\n    setTaints([...taints, newTaint()]);\n  };\n\n  const effects = {\n    NoSchedule: 'NoSchedule',\n    PreferNoSchedule: 'PreferNoSchedule',\n    NoExecute: 'NoExecute',\n  };\n\n  const { errorMessage } = props;\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content taint-modal\">\n      <ModalTitle>{t('public~Edit taints')}</ModalTitle>\n      <ModalBody>\n        {_.isEmpty(taints) ? (\n          <EmptyBox label={t('public~Taints')} />\n        ) : (\n          <>\n            <div className=\"row taint-modal__heading hidden-sm hidden-xs\">\n              <div className=\"col-sm-4 text-secondary text-uppercase\">{t('public~Key')}</div>\n              <div className=\"col-sm-3 text-secondary text-uppercase\">{t('public~Value')}</div>\n              <div className=\"col-sm-4 text-secondary text-uppercase\">{t('public~Effect')}</div>\n              <div className=\"col-sm-1 co-empty__header\" />\n            </div>\n            {_.map(taints, (c, i) => (\n              <div className=\"row taint-modal__row\" key={i}>\n                <div className=\"col-md-4 col-xs-5 taint-modal__field\">\n                  <div className=\"taint-modal__heading hidden-md hidden-lg text-secondary text-uppercase\">\n                    {t('public~Key')}\n                  </div>\n                  <input\n                    type=\"text\"\n                    className=\"pf-v5-c-form-control taint-modal__input\"\n                    value={c.key}\n                    onChange={(e) => change(e, i, 'key')}\n                    required\n                  />\n                </div>\n                <div className=\"col-md-3 col-xs-5 taint-modal__field\">\n                  <div className=\"taint-modal__heading hidden-md hidden-lg text-secondary text-uppercase\">\n                    {t('public~Value')}\n                  </div>\n                  <input\n                    type=\"text\"\n                    className=\"pf-v5-c-form-control taint-modal__input\"\n                    value={c.value}\n                    onChange={(e) => change(e, i, 'value')}\n                  />\n                </div>\n                <div className=\"clearfix visible-sm visible-xs\" />\n                <div className=\"col-md-4 col-xs-5 taint-modal__field\">\n                  <div className=\"taint-modal__heading hidden-md hidden-lg text-secondary text-uppercase\">\n                    {t('public~Effect')}\n                  </div>\n                  <Dropdown\n                    className=\"taint-modal__dropdown\"\n                    dropDownClassName=\"dropdown--full-width\"\n                    items={effects}\n                    onChange={(e) => change(e, i, 'effect')}\n                    selectedKey={c.effect}\n                    title={effects[c.effect]}\n                  />\n                </div>\n                <div className=\"col-md-1 col-md-offset-0 col-sm-offset-10 col-xs-offset-10\">\n                  <Tooltip content=\"Remove\">\n                    <Button\n                      type=\"button\"\n                      className=\"taint-modal__delete-icon\"\n                      onClick={() => remove(i)}\n                      aria-label={t('public~Remove')}\n                      variant=\"plain\"\n                    >\n                      <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n                    </Button>\n                  </Tooltip>\n                </div>\n              </div>\n            ))}\n          </>\n        )}\n        <Button className=\"pf-m-link--align-left\" onClick={addRow} type=\"button\" variant=\"link\">\n          <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n          {t('public~Add more')}\n        </Button>\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={false}\n        submitText={t('public~Save')}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const taintsModal = createModalLauncher(TaintsModal);\n\nexport type TaintsModalProps = {\n  resourceKind: K8sKind;\n  resource: NodeKind;\n  close: () => void;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n} & ModalComponentProps &\n  HandlePromiseProps;\n"],"sourceRoot":""}