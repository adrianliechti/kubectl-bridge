{"version":3,"sources":["webpack:///./packages/console-app/src/components/volume-snapshot/volume-snapshot-class.tsx"],"names":["tableColumnInfo","id","className","columnClass","isDefaultSnapshotClass","volumeSnapshotClass","defaultSnapshotClassAnnotation","Row","obj","name","metadata","deletionPolicy","driver","kind","resource","actions","factory","common","VolumeSnapshotClassTable","props","t","columns","title","sort","transforms","label","canCreate","showTitle","namespace","selector","resources","loaded","loadError","groupVersionKind","group","apiGroup","version","apiVersion","isList","namespaced","data","filteredData","onFilterChange","resourceKind","labelPluralKey","undefined","unfilteredData"],"mappings":"6FAAA,iKAsBA,MAAMA,EAAkB,CACtB,CAAEC,GAAI,QACN,CAAEC,UAAW,EAAW,cAAe,sBAAuBD,GAAI,UAClE,CAAEC,UAAW,EAAW,cAAe,sBAAuBD,GAAI,kBAClE,CAAEC,UAAW,IAAMC,YAAaF,GAAI,KAIzBG,EAA0BC,GAG/B,SAFN,aAAeA,EAAqB,CAAEC,+BAAgC,UAFzB,mDAMzCC,EAAmD,EAAGC,UAC1D,MAAM,KAAEC,IAASD,aAAG,EAAHA,EAAKE,WAAY,IAC5B,eAAEC,EAAc,OAAEC,GAAWJ,GAAO,GAE1C,OACE,gCACE,gBAAC,IAAS,iBAAKR,EAAgB,IAC7B,gBAAC,KAAY,CAACS,KAAMA,EAAMI,KAAM,aAAkB,6BAC/CT,EAAuBI,IACtB,wBAAMN,UAAU,gDAA8C,eAIpE,gBAAC,IAAS,iBAAKF,EAAgB,IAAKY,GACpC,gBAAC,IAAS,iBAAKZ,EAAgB,IAAKW,GACpC,gBAAC,IAAS,iBAAKX,EAAgB,IAC7B,gBAAC,KAAa,CACZa,KAAM,aAAkB,4BACxBC,SAAUN,EACVO,QAAS,IAAMC,QAAQC,YAO3BC,EAAqEC,IACzE,MAAM,EAAEC,GAAM,4BA4BPC,GAAW,2BAAiB,CAAEA,QA3BiC,CACpE,CACEC,MAAOF,EAAE,oBACTG,KAAM,gBACNC,WAAY,CAAC,KACbvB,GAAID,EAAgB,GAAGC,IAEzB,CACEqB,MAAOF,EAAE,sBACTG,KAAM,SACNC,WAAY,CAAC,KACbL,MAAO,CAAEjB,UAAWF,EAAgB,GAAGE,WACvCD,GAAID,EAAgB,GAAGC,IAEzB,CACEqB,MAAOF,EAAE,+BACTG,KAAM,iBACNC,WAAY,CAAC,KACbL,MAAO,CAAEjB,UAAWF,EAAgB,GAAGE,WACvCD,GAAID,EAAgB,GAAGC,IAEzB,CACEqB,MAAO,GACPH,MAAO,CAAEjB,UAAWF,EAAgB,GAAGE,WACvCD,GAAID,EAAgB,GAAGC,OAK3B,OACE,gBAAC,mBAAgB,iBACXkB,EAAK,cACGC,EAAE,qCACdK,MAAOL,EAAE,qCACTC,QAASA,EACTd,IAAKA,MA6DI,UAxDyD,EACtEmB,aAAY,EACZC,aAAY,EACZC,YACAC,eAEA,MAAM,EAAET,GAAM,4BACPU,EAAWC,EAAQC,GAAa,YAA+C,CACpFC,iBAAkB,CAChBC,MAAO,2BAAyBC,SAChCtB,KAAM,2BAAyBA,KAC/BuB,QAAS,2BAAyBC,YAEpCC,QAAQ,EACRC,YAAY,EACZX,YACAC,cAEKW,EAAMC,EAAcC,GAAkB,4BAAkBZ,GACzDa,EAAe,aAAkB,4BAEvC,OACE,gCACE,gBAAC,iBAAc,CAACrB,MAAOK,EAAYP,EAAE,2BAAyBwB,qBAAkBC,GAC7EnB,GACC,gBAAC,iBAAc,CAACO,iBAAkBU,GAC/BvB,EAAE,4CAIT,gBAAC,eAAY,KACX,gBAAC,iBAAc,CAACoB,KAAMA,EAAMT,OAAQA,EAAQW,eAAgBA,IAC5D,gBAACxB,EAAwB,CACvB4B,eAAgBhB,EAChBU,KAAMC,EACNV,OAAQA,EACRC,UAAWA","file":"volume-snapshot-class-chunk-7c889ef336297166e856.min.js","sourcesContent":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ListPageBody,\n  useListPageFilter,\n  ListPageCreate,\n  ListPageFilter,\n  ListPageHeader,\n  VirtualizedTable,\n  TableColumn,\n  RowProps,\n} from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { TableData } from '@console/internal/components/factory';\nimport { useActiveColumns } from '@console/internal/components/factory/Table/active-columns-hook';\nimport { Kebab, ResourceKebab, ResourceLink } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { VolumeSnapshotClassModel } from '@console/internal/models';\nimport { referenceForModel, VolumeSnapshotClassKind, Selector } from '@console/internal/module/k8s';\nimport { getAnnotations } from '@console/shared';\n\nconst tableColumnInfo = [\n  { id: 'name' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-md'), id: 'driver' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-md'), id: 'deletionPolicy' },\n  { className: Kebab.columnClass, id: '' },\n];\n\nconst defaultSnapshotClassAnnotation: string = 'snapshot.storage.kubernetes.io/is-default-class';\nexport const isDefaultSnapshotClass = (volumeSnapshotClass: VolumeSnapshotClassKind) =>\n  getAnnotations(volumeSnapshotClass, { defaultSnapshotClassAnnotation: 'false' })[\n    defaultSnapshotClassAnnotation\n  ] === 'true';\n\nconst Row: React.FC<RowProps<VolumeSnapshotClassKind>> = ({ obj }) => {\n  const { name } = obj?.metadata || {};\n  const { deletionPolicy, driver } = obj || {};\n\n  return (\n    <>\n      <TableData {...tableColumnInfo[0]}>\n        <ResourceLink name={name} kind={referenceForModel(VolumeSnapshotClassModel)}>\n          {isDefaultSnapshotClass(obj) && (\n            <span className=\"small text-muted co-resource-item__help-text\">&ndash; Default</span>\n          )}\n        </ResourceLink>\n      </TableData>\n      <TableData {...tableColumnInfo[1]}>{driver}</TableData>\n      <TableData {...tableColumnInfo[2]}>{deletionPolicy}</TableData>\n      <TableData {...tableColumnInfo[3]}>\n        <ResourceKebab\n          kind={referenceForModel(VolumeSnapshotClassModel)}\n          resource={obj}\n          actions={Kebab.factory.common}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst VolumeSnapshotClassTable: React.FC<VolumeSnapshotClassTableProps> = (props) => {\n  const { t } = useTranslation();\n  const getTableColumns = (): TableColumn<VolumeSnapshotClassKind>[] => [\n    {\n      title: t('console-app~Name'),\n      sort: 'metadata.name',\n      transforms: [sortable],\n      id: tableColumnInfo[0].id,\n    },\n    {\n      title: t('console-app~Driver'),\n      sort: 'driver',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[1].className },\n      id: tableColumnInfo[1].id,\n    },\n    {\n      title: t('console-app~Deletion policy'),\n      sort: 'deletionPolicy',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[2].className },\n      id: tableColumnInfo[2].id,\n    },\n    {\n      title: '',\n      props: { className: tableColumnInfo[3].className },\n      id: tableColumnInfo[3].id,\n    },\n  ];\n  const [columns] = useActiveColumns({ columns: getTableColumns() });\n\n  return (\n    <VirtualizedTable<VolumeSnapshotClassKind>\n      {...props}\n      aria-label={t('console-app~VolumeSnapshotClasses')}\n      label={t('console-app~VolumeSnapshotClasses')}\n      columns={columns}\n      Row={Row}\n    />\n  );\n};\n\nconst VolumeSnapshotClassPage: React.FC<VolumeSnapshotClassPageProps> = ({\n  canCreate = true,\n  showTitle = true,\n  namespace,\n  selector,\n}) => {\n  const { t } = useTranslation();\n  const [resources, loaded, loadError] = useK8sWatchResource<VolumeSnapshotClassKind[]>({\n    groupVersionKind: {\n      group: VolumeSnapshotClassModel.apiGroup,\n      kind: VolumeSnapshotClassModel.kind,\n      version: VolumeSnapshotClassModel.apiVersion,\n    },\n    isList: true,\n    namespaced: true,\n    namespace,\n    selector,\n  });\n  const [data, filteredData, onFilterChange] = useListPageFilter(resources);\n  const resourceKind = referenceForModel(VolumeSnapshotClassModel);\n\n  return (\n    <>\n      <ListPageHeader title={showTitle ? t(VolumeSnapshotClassModel.labelPluralKey) : undefined}>\n        {canCreate && (\n          <ListPageCreate groupVersionKind={resourceKind}>\n            {t('console-app~Create VolumeSnapshotClass')}\n          </ListPageCreate>\n        )}\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter data={data} loaded={loaded} onFilterChange={onFilterChange} />\n        <VolumeSnapshotClassTable\n          unfilteredData={resources}\n          data={filteredData}\n          loaded={loaded}\n          loadError={loadError}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\ntype VolumeSnapshotClassPageProps = {\n  namespace?: string;\n  canCreate?: boolean;\n  showTitle?: boolean;\n  selector?: Selector;\n};\n\ntype VolumeSnapshotClassTableProps = {\n  data: VolumeSnapshotClassKind[];\n  unfilteredData: VolumeSnapshotClassKind[];\n  loaded: boolean;\n  loadError: any;\n};\nexport default VolumeSnapshotClassPage;\n"],"sourceRoot":""}