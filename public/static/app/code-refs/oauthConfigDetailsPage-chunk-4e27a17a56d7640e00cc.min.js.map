{"version":3,"sources":["webpack:///./packages/console-app/src/components/oauth-config/OAuthConfigDetailsPage.tsx","webpack:///./packages/console-app/src/components/oauth-config/OAuthConfigDetails.tsx","webpack:///./packages/console-app/src/components/oauth-config/IdentityProviders.tsx"],"names":["common","factory","menuActions","getExtensionsActionsForKind","oAuthReference","props","kind","pages","details","editYaml","OAuthConfigDetails","obj","navigate","isIDPOpen","setIDPOpen","identityProviders","tokenConfig","spec","t","idpAdded","get","IDPDropdownItems","Object","entries","map","idp","key","value","component","id","onClick","e","currentTarget","type","getAddIDPItemLabels","className","text","resource","seconds","accessTokenMaxAgeSeconds","isInline","variant","title","to","isOpen","onSelect","onOpenChange","toggle","toggleRef","ref","isExpanded","shouldFocusToggleOnSelect","IdentityProviders","label","name","mappingMethod"],"mappings":"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","file":"app/code-refs/oauthConfigDetailsPage-chunk-4e27a17a56d7640e00cc.min.js","sourcesContent":["import * as React from 'react';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { Kebab, navFactory } from '@console/internal/components/utils';\nimport { OAuthModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { OAuthConfigDetails } from './OAuthConfigDetails';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(OAuthModel), ...common];\nconst oAuthReference = referenceForModel(OAuthModel);\n\nconst OAuthConfigDetailsPage: React.FC<React.ComponentProps<typeof DetailsPage>> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={oAuthReference}\n    menuActions={menuActions}\n    pages={[navFactory.details(OAuthConfigDetails), navFactory.editYaml()]}\n  />\n);\n\nexport default OAuthConfigDetailsPage;\n","import * as React from 'react';\nimport { formatPrometheusDuration } from '@openshift-console/plugin-shared/src/datetime/prometheus';\nimport {\n  Alert,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useNavigate } from 'react-router-dom-v5-compat';\nimport {\n  resourcePathFromModel,\n  ResourceSummary,\n  SectionHeading,\n} from '@console/internal/components/utils';\nimport { ClusterOperatorModel } from '@console/internal/models';\nimport { OAuthKind } from '@console/internal/module/k8s';\nimport { IDP_TYPES } from '@console/shared/src/constants/auth';\nimport { useQueryParams } from '@console/shared/src/hooks/useQueryParams';\nimport { IdentityProviders } from './IdentityProviders';\n\n// Convert to ms for formatPrometheusDuration\nconst tokenDuration = (seconds: number) =>\n  _.isNil(seconds) ? '-' : formatPrometheusDuration(seconds * 1000);\n\nexport const OAuthConfigDetails: React.FC<OAuthDetailsProps> = ({ obj }: { obj: OAuthKind }) => {\n  const navigate = useNavigate();\n  const [isIDPOpen, setIDPOpen] = React.useState(false);\n  const { identityProviders, tokenConfig } = obj.spec;\n  const { t } = useTranslation();\n  const queryParams = useQueryParams();\n  const idpAdded = queryParams.get('idpAdded');\n\n  const getAddIDPItemLabels = (type: string) => {\n    switch (type) {\n      case 'Basic Authentication':\n        return t('console-app~Basic Authentication');\n      case 'GitHub':\n        return t('console-app~GitHub');\n      case 'GitLab':\n        return t('console-app~GitLab');\n      case 'Google':\n        return t('console-app~Google');\n      case 'HTPasswd':\n        return t('console-app~HTPasswd');\n      case 'Keystone':\n        return t('console-app~Keystone');\n      case 'LDAP':\n        return t('console-app~LDAP');\n      case 'OpenID Connect':\n        return t('console-app~OpenID Connect');\n      case 'Request Header':\n        return t('console-app~Request Header');\n      default:\n        return type;\n    }\n  };\n\n  const IDPDropdownItems = Object.entries(IDP_TYPES).map((idp) => {\n    const [key, value] = idp;\n\n    return (\n      <DropdownItem\n        key={`idp-${key}`}\n        component=\"button\"\n        id={key}\n        data-test-id={key}\n        onClick={(e) => navigate(`/settings/idp/${e.currentTarget.id}`)}\n      >\n        {getAddIDPItemLabels(value)}\n      </DropdownItem>\n    );\n  });\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('console-app~OAuth details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={obj}>\n              {tokenConfig && (\n                <>\n                  <dt>{t('console-app~Access token max age')}</dt>\n                  <dd>{tokenDuration(tokenConfig.accessTokenMaxAgeSeconds)}</dd>\n                </>\n              )}\n            </ResourceSummary>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('console-app~Identity providers')} />\n        <p className=\"co-m-pane__explanation co-m-pane__explanation--alt\">\n          {t('console-app~Identity providers determine how users log into the cluster.')}\n        </p>\n        {idpAdded === 'true' && (\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"info\"\n            title={t('console-app~New identity provider added.')}\n          >\n            <>\n              {t(\n                'console-app~Authentication is being reconfigured. The new identity provider will be available once reconfiguration is complete.',\n              )}{' '}\n              <Link to={resourcePathFromModel(ClusterOperatorModel, 'authentication')}>\n                {t('console-app~View authentication conditions for reconfiguration status.')}\n              </Link>\n            </>\n          </Alert>\n        )}\n        <Dropdown\n          isOpen={isIDPOpen}\n          onSelect={() => setIDPOpen(false)}\n          onOpenChange={(isOpen: boolean) => setIDPOpen(isOpen)}\n          toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n            <MenuToggle\n              id=\"idp-dropdown\"\n              data-test-id=\"dropdown-button\"\n              ref={toggleRef}\n              onClick={() => setIDPOpen(!isIDPOpen)}\n              isExpanded={isIDPOpen}\n            >\n              {t('console-app~Add')}\n            </MenuToggle>\n          )}\n          shouldFocusToggleOnSelect\n          id=\"idp\"\n        >\n          <DropdownList>{IDPDropdownItems}</DropdownList>\n        </Dropdown>\n\n        <IdentityProviders identityProviders={identityProviders} />\n      </div>\n    </>\n  );\n};\n\ntype OAuthDetailsProps = {\n  obj: OAuthKind;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { EmptyBox } from '@console/internal/components/utils';\nimport { IdentityProvider } from '@console/internal/module/k8s';\n\nexport const IdentityProviders: React.FC<IdentityProvidersProps> = ({ identityProviders }) => {\n  const { t } = useTranslation();\n  return _.isEmpty(identityProviders) ? (\n    <EmptyBox label={t('console-app~Identity providers')} />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n        <thead className=\"pf-v5-c-table__thead\">\n          <tr className=\"pf-v5-c-table__tr\">\n            <th className=\"pf-v5-c-table__th\">{t('console-app~Name')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('console-app~Type')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('console-app~Mapping method')}</th>\n          </tr>\n        </thead>\n        <tbody className=\"pf-v5-c-table__tbody\">\n          {_.map(identityProviders, (idp) => (\n            <tr className=\"pf-v5-c-table__tr\" key={idp.name}>\n              <td className=\"pf-v5-c-table__td\" data-test-idp-name={idp.name}>\n                {idp.name}\n              </td>\n              <td className=\"pf-v5-c-table__td\" data-test-idp-type-for={idp.name}>\n                {idp.type}\n              </td>\n              <td className=\"pf-v5-c-table__td\" data-test-idp-mapping-for={idp.name}>\n                {idp.mappingMethod || 'claim'}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\ntype IdentityProvidersProps = {\n  identityProviders: IdentityProvider[];\n};\n"],"sourceRoot":""}