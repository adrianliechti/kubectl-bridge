{"version":3,"sources":["webpack:///./packages/console-app/src/components/dashboards-page/dynamic-plugins-health-resource/index.ts","webpack:///./packages/console-app/src/components/dashboards-page/dynamic-plugins-health-resource/DynamicPluginsPopover.tsx","webpack:///./packages/console-app/src/components/dashboards-page/dynamic-plugins-health-resource/status.ts","webpack:///./packages/console-app/src/components/dashboards-page/dynamic-plugins-health-resource/NotLoadedDynamicPlugins.tsx"],"names":["dynamicPluginsResources","consolePlugins","kind","namespaced","isList","t","pluginInfoEntries","notLoadedDynamicPluginInfo","filter","failedPlugins","plugin","status","pendingPlugins","loadedPlugins","loadedPluginsWithCSPViolations","hasCSPViolations","enabledPlugins","enabled","developmentMode","window","SERVER_FLAGS","k8sMode","hasGutter","length","plugins","label","firstColumn","secondColumn","enabledCount","totalCount","data","variant","isInline","isPlain","title","to","getDynamicPluginHealthState","dynamicPluginInfo","getDynamicPluginInfo","some","state","ERROR","PROGRESS","every","OK","UNKNOWN","map","key","pluginName","name","hideIcon"],"mappings":"4FAAA,oN,kCCAA,0IAYA,MAiEaA,EAA0E,CACrFC,eAAgB,CACdC,KAAM,aAAkB,sBACxBC,YAAY,EACZC,QAAQ,IAUG,IA/EqD,EAAGH,qBACrE,MAAM,EAAEI,GAAM,4BACPC,GAAqB,cACtBC,EAA6BD,EAAkBE,OAAO,KACtDC,EAAgBF,EAA2BC,OAAQE,GAA6B,WAAlBA,EAAOC,QACrEC,EAAiBL,EAA2BC,OAAQE,GAA6B,YAAlBA,EAAOC,QACtEE,EAAgBP,EAAkBE,OAAO,KACzCM,EAAiCD,EAAcL,OAClDE,IAAuC,IAA5BA,EAAOK,kBAEfC,EAAiBH,EAAcL,OAAQE,IAA8B,IAAnBA,EAAOO,SACzDC,EAAkD,gBAAhCC,OAAOC,aAAaC,QAE5C,OACE,gBAAC,IAAK,CAACC,WAAS,GACd,gBAAC,IAAS,KACPjB,EACC,mHAGHI,EAAcc,OAAS,GACtB,gBAAC,IAAuB,CAACC,QAASf,EAAegB,MAAOpB,EAAE,gCAE3DO,EAAeW,OAAS,GACvB,gBAAC,IAAuB,CACtBC,QAASZ,EACTa,MAAOpB,EAAE,iCAGb,gBAAC,IAAS,KACR,gBAAC,qBAAkB,CACjBqB,YAAarB,EAAE,8BACfsB,aACE,gCACGtB,EAAE,sDAAuD,CACxDuB,aAAcV,EAAkBL,EAAcU,OAASP,EAAeO,OACtEM,WAAYX,EAAkBL,EAAcU,OAAStB,EAAe6B,KAAKP,WAK9ET,EAA+BS,OAAS,GACvC,gBAAC,IAAK,CACJQ,QAAQ,UACRC,UAAQ,EACRC,SAAO,EACPC,MAAO7B,EACL,oFAIN,gBAAC,OAAI,CACH8B,GAAI,gBAAgB,aAClB,yDAGD9B,EAAE,8B,kCCpEf,uDAGO,MAAM+B,EAA8B,KACzC,MAAMC,EAAoB,IAAYC,uBACtC,OAAID,EAAkBE,KAAM7B,GAA6B,WAAlBA,EAAOC,QACrC,CAAE6B,MAAO,IAAYC,OAE1BJ,EAAkBE,KAAM7B,GAA6B,YAAlBA,EAAOC,QACrC,CAAE6B,MAAO,IAAYE,UAE1BL,EAAkBM,MAAOjC,GAA6B,WAAlBA,EAAOC,QACtC,CAAE6B,MAAO,IAAYI,IAEvB,CAAEJ,MAAO,IAAYK,W,kCCd9B,uEA+Be,IAvByD,EAAGrB,UAASC,WAClF,gBAAC,IAAS,KACR,gBAAC,qBAAkB,CAACC,YAAaD,GAC/B,gBAAC,IAAQ,KACND,EAAQsB,IAAKpC,GACZ,gBAAC,IAAY,CAACqC,IAAKrC,EAAOsC,YACxB,gBAAC,KAAY,CACX9C,KAAM,aAAkB,sBACxB+C,KAAMvC,EAAOsC,WACbE,UAAQ","file":"app/code-refs/dynamicPluginsHealthResource-chunk-549a6ba3b65e8b2ec2a0.min.js","sourcesContent":["export { default as DynamicPluginsPopover, dynamicPluginsResources } from './DynamicPluginsPopover';\nexport * from './status';\n","import * as React from 'react';\nimport { Alert, Stack, StackItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { WatchK8sResults, WatchK8sResources } from '@console/dynamic-plugin-sdk';\nimport { ConsoleOperatorConfigModel, ConsolePluginModel } from '@console/internal/models';\nimport { ConsolePluginKind, referenceForModel } from '@console/internal/module/k8s';\nimport { isLoadedDynamicPluginInfo, isNotLoadedDynamicPluginInfo } from '@console/plugin-sdk/src';\nimport { useDynamicPluginInfo } from '@console/plugin-sdk/src/api/useDynamicPluginInfo';\nimport { StatusPopupSection } from '@console/shared/src/components/dashboard/status-card/StatusPopup';\nimport NotLoadedDynamicPlugins from './NotLoadedDynamicPlugins';\n\nconst DynamicPluginsPopover: React.FC<DynamicPluginsPopoverProps> = ({ consolePlugins }) => {\n  const { t } = useTranslation();\n  const [pluginInfoEntries] = useDynamicPluginInfo();\n  const notLoadedDynamicPluginInfo = pluginInfoEntries.filter(isNotLoadedDynamicPluginInfo);\n  const failedPlugins = notLoadedDynamicPluginInfo.filter((plugin) => plugin.status === 'Failed');\n  const pendingPlugins = notLoadedDynamicPluginInfo.filter((plugin) => plugin.status === 'Pending');\n  const loadedPlugins = pluginInfoEntries.filter(isLoadedDynamicPluginInfo);\n  const loadedPluginsWithCSPViolations = loadedPlugins.filter(\n    (plugin) => plugin.hasCSPViolations === true,\n  );\n  const enabledPlugins = loadedPlugins.filter((plugin) => plugin.enabled === true);\n  const developmentMode = window.SERVER_FLAGS.k8sMode === 'off-cluster';\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        {t(\n          'console-app~A dynamic plugin allows you to add custom pages and other extensions to your interface at runtime.',\n        )}\n      </StackItem>\n      {failedPlugins.length > 0 && (\n        <NotLoadedDynamicPlugins plugins={failedPlugins} label={t('console-app~Failed plugins')} />\n      )}\n      {pendingPlugins.length > 0 && (\n        <NotLoadedDynamicPlugins\n          plugins={pendingPlugins}\n          label={t('console-app~Pending plugins')}\n        />\n      )}\n      <StackItem>\n        <StatusPopupSection\n          firstColumn={t('console-app~Loaded plugins')}\n          secondColumn={\n            <>\n              {t('console-app~{{enabledCount}}/{{totalCount}} enabled', {\n                enabledCount: developmentMode ? loadedPlugins.length : enabledPlugins.length,\n                totalCount: developmentMode ? loadedPlugins.length : consolePlugins.data.length,\n              })}\n            </>\n          }\n        >\n          {loadedPluginsWithCSPViolations.length > 0 && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              title={t(\n                'console-app~One or more plugins might have Content Security Policy violations.',\n              )}\n            />\n          )}\n          <Link\n            to={`/k8s/cluster/${referenceForModel(\n              ConsoleOperatorConfigModel,\n            )}/cluster/console-plugins`}\n          >\n            {t('console-app~View all')}\n          </Link>\n        </StatusPopupSection>\n      </StackItem>\n    </Stack>\n  );\n};\n\n/** Used in extension */\nexport const dynamicPluginsResources: WatchK8sResources<WatchConsolePluginsResource> = {\n  consolePlugins: {\n    kind: referenceForModel(ConsolePluginModel),\n    namespaced: false,\n    isList: true,\n  },\n};\n\ntype WatchConsolePluginsResource = {\n  consolePlugins: ConsolePluginKind[];\n};\n\ntype DynamicPluginsPopoverProps = WatchK8sResults<WatchConsolePluginsResource>;\n\nexport default DynamicPluginsPopover;\n","import { HealthState, SubsystemHealth } from '@console/dynamic-plugin-sdk';\nimport { pluginStore } from '@console/internal/plugins';\n\nexport const getDynamicPluginHealthState = (): SubsystemHealth => {\n  const dynamicPluginInfo = pluginStore.getDynamicPluginInfo();\n  if (dynamicPluginInfo.some((plugin) => plugin.status === 'Failed')) {\n    return { state: HealthState.ERROR };\n  }\n  if (dynamicPluginInfo.some((plugin) => plugin.status === 'Pending')) {\n    return { state: HealthState.PROGRESS };\n  }\n  if (dynamicPluginInfo.every((plugin) => plugin.status === 'Loaded')) {\n    return { state: HealthState.OK };\n  }\n  return { state: HealthState.UNKNOWN };\n};\n","import * as React from 'react';\nimport { StackItem, TextList, TextListItem } from '@patternfly/react-core';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { ConsolePluginModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { NotLoadedDynamicPluginInfo } from '@console/plugin-sdk/src';\nimport { StatusPopupSection } from '@console/shared/src/components/dashboard/status-card/StatusPopup';\n\nconst NotLoadedDynamicPlugins: React.FC<NotLoadedDynamicPluginsProps> = ({ plugins, label }) => (\n  <StackItem>\n    <StatusPopupSection firstColumn={label}>\n      <TextList>\n        {plugins.map((plugin) => (\n          <TextListItem key={plugin.pluginName}>\n            <ResourceLink\n              kind={referenceForModel(ConsolePluginModel)}\n              name={plugin.pluginName}\n              hideIcon\n            />\n          </TextListItem>\n        ))}\n      </TextList>\n    </StatusPopupSection>\n  </StackItem>\n);\n\ntype NotLoadedDynamicPluginsProps = {\n  plugins: NotLoadedDynamicPluginInfo[];\n  label: string;\n};\n\nexport default NotLoadedDynamicPlugins;\n"],"sourceRoot":""}