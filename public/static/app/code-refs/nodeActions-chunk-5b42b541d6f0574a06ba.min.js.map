{"version":3,"sources":["webpack:///./packages/console-app/src/components/nodes/menu-actions.tsx","webpack:///./packages/console-app/src/actions/creators/common-factory.ts","webpack:///./packages/console-app/src/k8s/requests/nodes.ts","webpack:///./packages/console-app/src/components/nodes/modals/index.ts"],"names":["updateCSR","csr","type","approvedCSR","status","conditions","lastUpdateTime","Date","toISOString","message","toLowerCase","reason","data","model","path","approveCSR","denyCSR","useNodeActions","obj","kindObj","inFlight","t","actions","push","id","label","cta","accessReview","resource","undefined","CommonActionFactory","Delete","kind","relatedResource","Edit","href","crd","ModifyLabels","blocking","ModifyAnnotations","ModifyCount","resourceKind","ModifyPodSelector","ModifyTolerations","modalClassName","AddStorage","getCommonResourceActions","makeNodeUnschedulable","op","value","makeNodeSchedulable","createConfigureUnschedulableModal","props","then","m","default"],"mappings":"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","file":"app/code-refs/nodeActions-chunk-5b42b541d6f0574a06ba.min.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Action } from '@console/dynamic-plugin-sdk';\nimport { useK8sModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { k8sUpdateResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { asAccessReview } from '@console/internal/components/utils';\nimport { CertificateSigningRequestModel } from '@console/internal/models';\nimport {\n  CertificateSigningRequestKind,\n  ExtensionHook,\n  NodeKind,\n  referenceFor,\n} from '@console/internal/module/k8s';\nimport { isNodeUnschedulable } from '@console/shared';\nimport { getCommonResourceActions } from '../../actions/creators/common-factory';\nimport { makeNodeSchedulable } from '../../k8s/requests/nodes';\nimport { createConfigureUnschedulableModal } from './modals';\n\nconst updateCSR = (csr: CertificateSigningRequestKind, type: 'Approved' | 'Denied') => {\n  const approvedCSR = {\n    ...csr,\n    status: {\n      ...(csr.status || {}),\n      conditions: [\n        {\n          lastUpdateTime: new Date().toISOString(),\n          message: `This CSR was ${type.toLowerCase()} via OpenShift Console`,\n          reason: 'OpenShiftConsoleCSRApprove',\n          status: 'True',\n          type,\n        },\n        ...(csr.status?.conditions || []),\n      ],\n    },\n  };\n  return k8sUpdateResource<CertificateSigningRequestKind>({\n    data: approvedCSR,\n    model: CertificateSigningRequestModel,\n    path: 'approval',\n  });\n};\n\nexport const approveCSR = (csr: CertificateSigningRequestKind) => updateCSR(csr, 'Approved');\n\nexport const denyCSR = (csr: CertificateSigningRequestKind) => updateCSR(csr, 'Denied');\n\nexport const useNodeActions: ExtensionHook<Action[], NodeKind> = (obj) => {\n  const [kindObj, inFlight] = useK8sModel(referenceFor(obj));\n  const { t } = useTranslation();\n  const nodeActions = React.useMemo<Action[]>(() => {\n    const actions: Action[] = [];\n    if (isNodeUnschedulable(obj)) {\n      actions.push({\n        id: 'mark-as-schedulable',\n        label: t('console-app~Mark as schedulable'),\n        cta: () => makeNodeSchedulable(obj),\n        accessReview: asAccessReview(kindObj, obj, 'patch'),\n      });\n    } else {\n      actions.push({\n        id: 'mark-as-unschedulable',\n        label: t('console-app~Mark as unschedulable'),\n        cta: () => createConfigureUnschedulableModal({ resource: obj }),\n        accessReview: asAccessReview(kindObj, obj, 'patch'),\n      });\n    }\n\n    const message = (\n      <p>\n        {t(\n          'console-app~This action cannot be undone. Deleting a node will instruct Kubernetes that the node is down or unrecoverable and delete all pods scheduled to that node. If the node is still running but unresponsive and the node is deleted, stateful workloads and persistent volumes may suffer corruption or data loss. Only delete a node that you have confirmed is completely stopped and cannot be restored.',\n        )}\n      </p>\n    );\n\n    actions.push(...getCommonResourceActions(kindObj, obj, message));\n    return actions;\n  }, [kindObj, obj, t]);\n\n  return [nodeActions, !inFlight, undefined];\n};\n","import i18next from 'i18next';\nimport { Action } from '@console/dynamic-plugin-sdk';\nimport {\n  annotationsModalLauncher,\n  deleteModal,\n  labelsModalLauncher,\n  configureReplicaCountModal,\n  podSelectorModal,\n  tolerationsModal,\n} from '@console/internal/components/modals';\nimport { resourceObjPath, asAccessReview } from '@console/internal/components/utils';\nimport { referenceForModel, K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nexport type ResourceActionCreator = (\n  kind: K8sKind,\n  obj: K8sResourceKind,\n  relatedResource?: K8sResourceKind,\n  message?: JSX.Element,\n) => Action;\n\nexport type ResourceActionFactory = { [name: string]: ResourceActionCreator };\n\nexport const CommonActionFactory: ResourceActionFactory = {\n  Delete: (\n    kind: K8sKind,\n    obj: K8sResourceKind,\n    relatedResource?: K8sResourceKind,\n    message?: JSX.Element,\n  ): Action => ({\n    id: `delete-resource`,\n    label: i18next.t('console-app~Delete {{kind}}', { kind: kind.kind }),\n    cta: () =>\n      deleteModal({\n        kind,\n        resource: obj,\n        message,\n      }),\n    accessReview: asAccessReview(kind, obj, 'delete'),\n  }),\n  Edit: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: `edit-resource`,\n    label: i18next.t('console-app~Edit {{kind}}', { kind: kind.kind }),\n    cta: {\n      href: `${resourceObjPath(obj, kind.crd ? referenceForModel(kind) : kind.kind)}/yaml`,\n    },\n    // TODO: Fallback to \"View YAML\"? We might want a similar fallback for annotations, labels, etc.\n    accessReview: asAccessReview(kind, obj, 'update'),\n  }),\n  ModifyLabels: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-labels',\n    label: i18next.t('console-app~Edit labels'),\n    cta: () =>\n      labelsModalLauncher({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyAnnotations: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-annotations',\n    label: i18next.t('console-app~Edit annotations'),\n    cta: () =>\n      annotationsModalLauncher({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyCount: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-pod-count',\n    label: i18next.t('console-app~Edit Pod count'),\n    cta: () =>\n      configureReplicaCountModal({\n        resourceKind: kind,\n        resource: obj,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch', 'scale'),\n  }),\n  ModifyPodSelector: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-pod-selector',\n    label: i18next.t('console-app~Edit Pod selector'),\n    cta: () =>\n      podSelectorModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyTolerations: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-toleration',\n    label: i18next.t('console-app~Edit tolerations'),\n    cta: () =>\n      tolerationsModal({\n        resourceKind: kind,\n        resource: obj,\n        modalClassName: 'modal-lg',\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  AddStorage: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'add-storage',\n    label: i18next.t('console-app~Add storage'),\n    cta: {\n      href: `${resourceObjPath(\n        obj,\n        kind.crd ? referenceForModel(kind) : kind.kind,\n      )}/attach-storage`,\n    },\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n};\n\nexport const getCommonResourceActions = (\n  kind: K8sKind,\n  obj: K8sResourceKind,\n  message?: JSX.Element,\n): Action[] => {\n  return [\n    CommonActionFactory.ModifyLabels(kind, obj),\n    CommonActionFactory.ModifyAnnotations(kind, obj),\n    CommonActionFactory.Edit(kind, obj),\n    CommonActionFactory.Delete(kind, obj, undefined, message),\n  ];\n};\n","import * as _ from 'lodash';\nimport { NodeModel } from '@console/internal/models';\nimport { k8sPatch, K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const makeNodeUnschedulable = (resource: K8sResourceKind): Promise<K8sResourceKind> => {\n  const op = _.has(resource, 'spec.unschedulable') ? 'replace' : 'add';\n  return k8sPatch(NodeModel, resource, [{ op, path: '/spec/unschedulable', value: true }]);\n};\n\nexport const makeNodeSchedulable = (resource: K8sResourceKind): Promise<K8sResourceKind> => {\n  const op = _.has(resource, 'spec.unschedulable') ? 'replace' : 'add';\n  return k8sPatch(NodeModel, resource, [{ op, path: '/spec/unschedulable', value: false }]);\n};\n","import { NodeKind } from '@console/internal/module/k8s';\n\nexport const createConfigureUnschedulableModal = (props: { resource: NodeKind }) =>\n  import(\n    './ConfigureUnschedulableModal' /* webpackChunkName: \"configure-unschedulable-modal\" */\n  ).then((m) => m.default(props));\n"],"sourceRoot":""}