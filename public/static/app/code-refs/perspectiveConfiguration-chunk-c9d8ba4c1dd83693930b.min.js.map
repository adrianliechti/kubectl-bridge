{"version":3,"sources":["webpack:///./packages/console-app/src/components/detect-perspective/PerspectiveConfiguration.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/useConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/patchConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/FormLayout.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/LoadError.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/SaveStatus.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/index.ts"],"names":["PerspectiveVisibilityState","PerspectiveVisibilitySelect","toggleId","disabled","value","onChange","t","options","title","description","visibility","state","Enabled","isSelected","AccessReview","accessReview","required","resource","verb","length","Object","values","filter","Boolean","missing","Disabled","some","option","push","isOpen","setIsOpen","selection","find","onSelect","selected","onOpenChange","open","toggle","toggleRef","isFullWidth","id","isDisabled","ref","onClick","map","key","toggleText","readonly","fireTelemetryEvent","perspectiveExtensions","consoleConfig","consoleConfigLoaded","consoleConfigError","configuredPerspectives","setConfiguredPerspectives","spec","customization","perspectives","saveStatus","setSaveStatus","save","status","patch","then","catch","error","isHorizontal","perspectiveExtension","fieldId","uid","perspectiveId","properties","p","label","name","selectedOption","customize","oldConfiguredPerspectives","newConfiguredPerspectives","index","findIndex","groupVersionKind","isList","url","headers","Accept","body","JSON","stringify","children","isWidthLimited","className","form","modifiers","horizontal","limitWidth","variant","isInline","message","toString","SaveStatus"],"mappings":"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","file":"app/code-refs/perspectiveConfiguration-chunk-c9d8ba4c1dd83693930b.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  FormGroup,\n  FormSection,\n  ExpandableSection,\n  CodeBlock,\n  CodeBlockCode,\n  Select,\n  SelectOption,\n  SelectList,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport { safeDump } from 'js-yaml';\nimport { useTranslation } from 'react-i18next';\nimport {\n  isPerspective,\n  Perspective as PerspectiveExtension,\n  AccessReviewResourceAttributes,\n} from '@console/dynamic-plugin-sdk/src';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { useExtensions } from '@console/plugin-sdk';\nimport { useTelemetry } from '@console/shared/src';\nimport {\n  useDebounceCallback,\n  useConsoleOperatorConfig,\n  patchConsoleOperatorConfig,\n  FormLayout,\n  LoadError,\n  SaveStatus,\n  SaveStatusProps,\n} from '@console/shared/src/components/cluster-configuration';\n\nenum PerspectiveVisibilityState {\n  Enabled = 'Enabled',\n  Disabled = 'Disabled',\n  AccessReview = 'AccessReview',\n}\n\ntype PerspectiveAccessReview = {\n  required?: AccessReviewResourceAttributes[];\n  missing?: AccessReviewResourceAttributes[];\n};\n\ntype PerspectiveVisibility = {\n  state: PerspectiveVisibilityState;\n  accessReview?: PerspectiveAccessReview;\n};\n\ntype Perspective = {\n  id: string;\n  visibility: PerspectiveVisibility;\n};\n\ntype PerspectivesConsoleConfig = K8sResourceKind & {\n  spec: {\n    customization?: {\n      perspectives: Perspective[];\n    };\n  };\n};\n\ntype PerspectiveVisibilitySelectOptions = {\n  value: string;\n  title: string;\n  description: string;\n  visibility?: PerspectiveVisibility;\n  isSelected: boolean;\n};\n\nconst PerspectiveVisibilitySelect: React.FC<{\n  toggleId: string;\n  disabled: boolean;\n  value?: PerspectiveVisibility;\n  onChange: (selectedOption: PerspectiveVisibilitySelectOptions) => void;\n}> = ({ toggleId, disabled, value, onChange }) => {\n  const { t } = useTranslation();\n\n  const options: PerspectiveVisibilitySelectOptions[] = [\n    {\n      value: 'Enabled',\n      title: t('console-app~Enabled'),\n      description: t('console-app~Perspectives are enabled by default.'),\n      visibility: { state: PerspectiveVisibilityState.Enabled },\n      isSelected: !value || !value.state || value.state === PerspectiveVisibilityState.Enabled,\n    },\n    {\n      value: 'RequiredNamespace',\n      title: t('console-app~Only visible for privileged users'),\n      description: t('console-app~Privileged users can list all namespaces.'),\n      visibility: {\n        state: PerspectiveVisibilityState.AccessReview,\n        accessReview: {\n          required: [\n            {\n              resource: 'namespaces',\n              verb: 'get',\n            },\n          ],\n        },\n      },\n      isSelected:\n        value?.state === PerspectiveVisibilityState.AccessReview &&\n        value.accessReview?.required?.length === 1 &&\n        value.accessReview.required[0].resource === 'namespaces' &&\n        value.accessReview.required[0].verb === 'get' &&\n        Object.values(value.accessReview.required[0]).filter(Boolean).length === 2 &&\n        !value.accessReview?.missing?.length,\n    },\n    {\n      value: 'MissingNamespace',\n      title: t('console-app~Only visible for unprivileged users'),\n      description: t('console-app~Unprivileged users cannot list all namespaces.'),\n      visibility: {\n        state: PerspectiveVisibilityState.AccessReview,\n        accessReview: {\n          missing: [\n            {\n              resource: 'namespaces',\n              verb: 'get',\n            },\n          ],\n        },\n      },\n      isSelected:\n        value?.state === PerspectiveVisibilityState.AccessReview &&\n        value.accessReview?.missing?.length === 1 &&\n        value.accessReview.missing[0].resource === 'namespaces' &&\n        value.accessReview.missing[0].verb === 'get' &&\n        Object.values(value.accessReview.missing[0]).filter(Boolean).length === 2 &&\n        !value.accessReview?.required?.length,\n    },\n    {\n      value: 'Disabled',\n      title: t('console-app~Disabled'),\n      description: t('console-app~Disable this perspectives for all users.'),\n      visibility: { state: PerspectiveVisibilityState.Disabled },\n      isSelected: value?.state === PerspectiveVisibilityState.Disabled,\n    },\n  ];\n\n  if (!options.some((option) => option.isSelected)) {\n    options.push({\n      value: 'Custom',\n      title: t('console-app~Custom'),\n      description: t(\n        'console-app~This perspective is shown based on custom access review rules. Please open the console configuration resource to inspect or update this rules.',\n      ),\n      isSelected: true,\n    });\n  }\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const selection = options.find((option) => option.isSelected)?.value;\n\n  return (\n    <>\n      <Select\n        isOpen={isOpen}\n        onSelect={() => setIsOpen(false)}\n        selected={selection}\n        onOpenChange={(open) => setIsOpen(open)}\n        toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n          <MenuToggle\n            isFullWidth\n            id={toggleId}\n            isDisabled={disabled}\n            ref={toggleRef}\n            onClick={(open) => setIsOpen(open)}\n          >\n            {options.find((option) => option.isSelected)?.title}\n          </MenuToggle>\n        )}\n      >\n        <SelectList>\n          {options.map((option) => (\n            <SelectOption\n              key={option.value}\n              value={option.value}\n              description={option.description}\n              onClick={() => onChange(option)}\n            >\n              {option.title}\n            </SelectOption>\n          ))}\n        </SelectList>\n      </Select>\n      {selection === 'Custom' && value?.accessReview && (\n        <ExpandableSection toggleText={t('console-app~Access review rules')}>\n          <CodeBlock>\n            <CodeBlockCode>{safeDump(value.accessReview)}</CodeBlockCode>\n          </CodeBlock>\n        </ExpandableSection>\n      )}\n    </>\n  );\n};\n\nconst PerspectiveConfiguration: React.FC<{ readonly: boolean }> = ({ readonly }) => {\n  const { t } = useTranslation();\n  const fireTelemetryEvent = useTelemetry();\n\n  // All available perspectives\n  const perspectiveExtensions = useExtensions<PerspectiveExtension>(isPerspective);\n\n  // Current configuration\n  const [consoleConfig, consoleConfigLoaded, consoleConfigError] = useConsoleOperatorConfig<\n    PerspectivesConsoleConfig\n  >();\n  const [configuredPerspectives, setConfiguredPerspectives] = React.useState<Perspective[]>();\n  React.useEffect(() => {\n    if (consoleConfig && consoleConfigLoaded && !configuredPerspectives) {\n      setConfiguredPerspectives(consoleConfig?.spec?.customization?.perspectives);\n    }\n  }, [configuredPerspectives, consoleConfig, consoleConfigLoaded]);\n\n  // Save the latest changes\n  const [saveStatus, setSaveStatus] = React.useState<SaveStatusProps>();\n  const save = useDebounceCallback(() => {\n    setSaveStatus({ status: 'in-progress' });\n\n    const patch: PerspectivesConsoleConfig = {\n      spec: {\n        customization: {\n          perspectives: configuredPerspectives,\n        },\n      },\n    };\n    patchConsoleOperatorConfig(patch)\n      .then(() => setSaveStatus({ status: 'successful' }))\n      .catch((error) => setSaveStatus({ status: 'error', error }));\n  }, 2000);\n\n  const disabled =\n    readonly || !perspectiveExtensions || !consoleConfigLoaded || !!consoleConfigError;\n\n  return (\n    <FormLayout isHorizontal>\n      <FormSection title={t('console-app~Perspectives')} data-test=\"perspectives form-section\">\n        {perspectiveExtensions.map((perspectiveExtension) => {\n          const fieldId = perspectiveExtension.uid;\n          const perspectiveId = perspectiveExtension.properties.id;\n          const value = configuredPerspectives?.find((p) => p.id === perspectiveId)?.visibility;\n          const onChange = (selectedOption: PerspectiveVisibilitySelectOptions) => {\n            fireTelemetryEvent('Console cluster configuration changed', {\n              customize: 'Perspective',\n              id: perspectiveExtension.properties.id,\n              name: perspectiveExtension.properties.name,\n              visibility: selectedOption.value,\n            });\n            if (selectedOption.visibility) {\n              setConfiguredPerspectives((oldConfiguredPerspectives) => {\n                const newConfiguredPerspectives = oldConfiguredPerspectives\n                  ? [...oldConfiguredPerspectives]\n                  : [];\n                const index = newConfiguredPerspectives.findIndex((p) => p.id === perspectiveId);\n                if (index === -1) {\n                  newConfiguredPerspectives.push({\n                    id: perspectiveId,\n                    visibility: selectedOption.visibility,\n                  });\n                } else {\n                  newConfiguredPerspectives[index].visibility = selectedOption.visibility;\n                }\n                return newConfiguredPerspectives;\n              });\n            }\n            save();\n          };\n\n          return (\n            <FormGroup\n              key={perspectiveExtension.uid}\n              label={perspectiveExtension.properties.name}\n              fieldId={fieldId}\n              data-test=\"perspectives form-group\"\n            >\n              <PerspectiveVisibilitySelect\n                toggleId={fieldId}\n                disabled={disabled}\n                value={value}\n                onChange={onChange}\n              />\n            </FormGroup>\n          );\n        })}\n\n        <LoadError error={consoleConfigError} />\n        <SaveStatus {...saveStatus} />\n      </FormSection>\n    </FormLayout>\n  );\n};\n\nexport default PerspectiveConfiguration;\n","import { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sWatchResource';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\nconst useConsoleOperatorConfig = <R extends K8sResourceKind>() => {\n  return useK8sWatchResource<R>({\n    groupVersionKind: getGroupVersionKindForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n};\n\nexport default useConsoleOperatorConfig;\n","import { consoleFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch/console-fetch';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind, resourceURL } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\n/**\n * JSON Merge Patch instead of JSON patch to update also properties that doesn't exist yet.\n *\n * See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment\n */\nconst patchConsoleOperatorConfig = <R extends K8sResourceKind>(resource: R): Promise<R> => {\n  const url = resourceURL(ConsoleOperatorConfigModel, { name: CONSOLE_OPERATOR_CONFIG_NAME });\n  return consoleFetchJSON(url, 'PATCH', {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/merge-patch+json;charset=UTF-8',\n    },\n    body: JSON.stringify(resource),\n  });\n};\n\nexport default patchConsoleOperatorConfig;\n","import * as React from 'react';\nimport { FormProps } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\n\nexport type FormLayoutProps = Pick<FormProps, 'children' | 'isHorizontal' | 'isWidthLimited'>;\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  children,\n  isHorizontal = false,\n  isWidthLimited = true,\n}) => {\n  return (\n    <div\n      className={css(\n        formStyles.form,\n        isHorizontal && formStyles.modifiers.horizontal,\n        isWidthLimited && formStyles.modifiers.limitWidth,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default FormLayout;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadError: React.FC<{ error?: Error }> = ({ error }) => {\n  const { t } = useTranslation();\n  if (!error) {\n    return null;\n  }\n  return (\n    <Alert variant=\"warning\" isInline title={t('console-shared~Could not load configuration.')}>\n      {error.message?.toString?.() || error.toString?.()}\n    </Alert>\n  );\n};\n\nexport default LoadError;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type SaveStatusProps = {\n  status: 'pending' | 'in-progress' | 'successful' | 'error';\n  error?: Error;\n};\n\nexport const SaveStatus: React.FC<SaveStatusProps> = ({ status, error }) => {\n  const { t } = useTranslation();\n  if (status === 'successful') {\n    return (\n      <Alert\n        variant=\"success\"\n        data-test=\"success-alert\"\n        isInline\n        title={t('console-shared~Saved.')}\n      >\n        {t(\n          'console-shared~This config update requires a console rollout, this can take up to a minute and require a browser refresh.',\n        )}\n      </Alert>\n    );\n  }\n  if (status === 'error') {\n    return (\n      <Alert variant=\"danger\" isInline title={t('console-shared~Could not save configuration.')}>\n        {error?.message?.toString?.() || error?.toString?.()}\n      </Alert>\n    );\n  }\n  return null;\n};\n","export { useDebounceCallback } from '../../hooks/debounce';\n\nexport { default as useConsoleOperatorConfig } from './useConsoleOperatorConfig';\nexport { default as patchConsoleOperatorConfig } from './patchConsoleOperatorConfig';\nexport { default as FormLayout } from './FormLayout';\nexport { default as LoadError } from './LoadError';\nexport * from './SaveStatus';\nexport * from './path-utils';\n"],"sourceRoot":""}