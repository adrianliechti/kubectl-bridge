{"version":3,"sources":["webpack:///./packages/console-app/src/components/cluster-configuration/index.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/useConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/patchConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/FormLayout.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/LoadError.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/SaveStatus.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/index.ts","webpack:///./packages/console-app/src/components/cluster-configuration/ClusterConfigurationPage.tsx","webpack:///./packages/console-app/src/components/cluster-configuration/ClusterConfigurationForm.tsx","webpack:///./packages/console-app/src/components/cluster-configuration/ClusterConfigurationField.tsx","webpack:///./packages/console-app/src/components/cluster-configuration/ClusterConfigurationCustomField.tsx","webpack:///./packages/console-app/src/components/cluster-configuration/getClusterConfigurationGroups.ts","webpack:///./packages/console-app/src/components/cluster-configuration/useClusterConfigurationGroups.ts","webpack:///./packages/console-app/src/components/cluster-configuration/useClusterConfigurationItems.ts"],"names":["groupVersionKind","isList","name","resource","url","headers","Accept","body","JSON","stringify","children","isHorizontal","isWidthLimited","className","form","modifiers","horizontal","limitWidth","error","t","variant","isInline","title","message","toString","SaveStatus","status","initialGroupId","group","activeTabId","setActiveTabId","clusterConfigurationGroups","clusterConfigurationGroupsResolved","clusterConfigurationItems","clusterConfigurationItemsResolved","loaded","clusterConfigurationTabs","clusterConfigurationTabContents","populatedClusterCongigurationGroups","tabs","tabContents","reduce","acc","currGroup","id","label","items","ref","push","key","eventKey","href","tabContentId","tabContentRef","hidden","groupNotFound","some","hint","length","titleText","icon","headingLevel","activeKey","onSelect","event","newGroupId","preventDefault","path","replace","isVertical","section","onSubmit","map","item","componentForFieldType","custom","Field","field","type","CustomComponent","component","props","readonly","getClusterConfigurationGroups","initialClusterConfigurationGroup","clusterConfigurationGroup","filter","clusterConfigurationItem","find","groupId","currClusterConfigurationItem","clusterConfigurationGroupForCurrentItem","resolvedExtensions","resolved","errors","resolvedExtension","properties","sortedItems","canRead","updateCanRead","canWrite","updateCanWrite","forEach","readAccessReview","Promise","all","accessReview","then","result","allowed","every","r","x","catch","console","warn","writeAccessReview"],"mappings":"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","file":"app/code-refs/clusterConfiguration-chunk-4c96e1e88ede61c88fab.min.js","sourcesContent":["export { default as ClusterConfigurationPage } from './ClusterConfigurationPage';\n","import { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sWatchResource';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\nconst useConsoleOperatorConfig = <R extends K8sResourceKind>() => {\n  return useK8sWatchResource<R>({\n    groupVersionKind: getGroupVersionKindForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n};\n\nexport default useConsoleOperatorConfig;\n","import { consoleFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch/console-fetch';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind, resourceURL } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\n/**\n * JSON Merge Patch instead of JSON patch to update also properties that doesn't exist yet.\n *\n * See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment\n */\nconst patchConsoleOperatorConfig = <R extends K8sResourceKind>(resource: R): Promise<R> => {\n  const url = resourceURL(ConsoleOperatorConfigModel, { name: CONSOLE_OPERATOR_CONFIG_NAME });\n  return consoleFetchJSON(url, 'PATCH', {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/merge-patch+json;charset=UTF-8',\n    },\n    body: JSON.stringify(resource),\n  });\n};\n\nexport default patchConsoleOperatorConfig;\n","import * as React from 'react';\nimport { FormProps } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\n\nexport type FormLayoutProps = Pick<FormProps, 'children' | 'isHorizontal' | 'isWidthLimited'>;\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  children,\n  isHorizontal = false,\n  isWidthLimited = true,\n}) => {\n  return (\n    <div\n      className={css(\n        formStyles.form,\n        isHorizontal && formStyles.modifiers.horizontal,\n        isWidthLimited && formStyles.modifiers.limitWidth,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default FormLayout;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadError: React.FC<{ error?: Error }> = ({ error }) => {\n  const { t } = useTranslation();\n  if (!error) {\n    return null;\n  }\n  return (\n    <Alert variant=\"warning\" isInline title={t('console-shared~Could not load configuration.')}>\n      {error.message?.toString?.() || error.toString?.()}\n    </Alert>\n  );\n};\n\nexport default LoadError;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type SaveStatusProps = {\n  status: 'pending' | 'in-progress' | 'successful' | 'error';\n  error?: Error;\n};\n\nexport const SaveStatus: React.FC<SaveStatusProps> = ({ status, error }) => {\n  const { t } = useTranslation();\n  if (status === 'successful') {\n    return (\n      <Alert\n        variant=\"success\"\n        data-test=\"success-alert\"\n        isInline\n        title={t('console-shared~Saved.')}\n      >\n        {t(\n          'console-shared~This config update requires a console rollout, this can take up to a minute and require a browser refresh.',\n        )}\n      </Alert>\n    );\n  }\n  if (status === 'error') {\n    return (\n      <Alert variant=\"danger\" isInline title={t('console-shared~Could not save configuration.')}>\n        {error?.message?.toString?.() || error?.toString?.()}\n      </Alert>\n    );\n  }\n  return null;\n};\n","export { useDebounceCallback } from '../../hooks/debounce';\n\nexport { default as useConsoleOperatorConfig } from './useConsoleOperatorConfig';\nexport { default as patchConsoleOperatorConfig } from './patchConsoleOperatorConfig';\nexport { default as FormLayout } from './FormLayout';\nexport { default as LoadError } from './LoadError';\nexport * from './SaveStatus';\nexport * from './path-utils';\n","import * as React from 'react';\nimport {\n  Tabs,\n  Tab,\n  TabProps,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateHeader,\n  TabContent,\n  TabContentProps,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { LoadingBox, history } from '@console/internal/components/utils';\nimport { PageLayout, isModifiedEvent } from '@console/shared';\nimport ClusterConfigurationForm from './ClusterConfigurationForm';\nimport { getClusterConfigurationGroups } from './getClusterConfigurationGroups';\nimport { ClusterConfigurationTabGroup } from './types';\nimport useClusterConfigurationGroups from './useClusterConfigurationGroups';\nimport useClusterConfigurationItems from './useClusterConfigurationItems';\n\nimport './ClusterConfigurationPage.scss';\n\nconst ClusterConfigurationPage: React.FC = () => {\n  const { t } = useTranslation();\n  const params = useParams();\n\n  const initialGroupId = params.group || 'general';\n  const [activeTabId, setActiveTabId] = React.useState<string>(initialGroupId);\n  const onSelect = (event: React.MouseEvent<HTMLElement>, newGroupId: string) => {\n    if (isModifiedEvent(event)) {\n      return;\n    }\n    event.preventDefault();\n    setActiveTabId(newGroupId);\n    const path = `/cluster-configuration/${newGroupId}`;\n    history.replace(path);\n  };\n\n  const [\n    clusterConfigurationGroups,\n    clusterConfigurationGroupsResolved,\n  ] = useClusterConfigurationGroups();\n\n  const [\n    clusterConfigurationItems,\n    clusterConfigurationItemsResolved,\n  ] = useClusterConfigurationItems();\n\n  const loaded = clusterConfigurationGroupsResolved && clusterConfigurationItemsResolved;\n\n  const [clusterConfigurationTabs, clusterConfigurationTabContents] = React.useMemo<\n    [React.ReactElement<TabProps>[], React.ReactElement<TabContentProps>[]]\n  >(() => {\n    const populatedClusterCongigurationGroups: ClusterConfigurationTabGroup[] = getClusterConfigurationGroups(\n      clusterConfigurationGroups,\n      clusterConfigurationItems,\n    );\n    const [tabs, tabContents] = populatedClusterCongigurationGroups.reduce(\n      (acc, currGroup) => {\n        const { id, label, items } = currGroup;\n        const ref = React.createRef<HTMLElement>();\n        acc[0].push(\n          <Tab\n            key={id}\n            eventKey={id}\n            title={<TabTitleText>{label}</TabTitleText>}\n            href={`/cluster-configuration/${id}`}\n            tabContentId={id}\n            tabContentRef={ref}\n            data-test={`tab ${id}`}\n          />,\n        );\n        acc[1].push(\n          <TabContent\n            key={id}\n            eventKey={id}\n            id={id}\n            ref={ref}\n            data-test={`tab-content ${id}`}\n            hidden={id !== activeTabId}\n          >\n            <ClusterConfigurationForm items={items} />\n          </TabContent>,\n        );\n        return acc;\n      },\n      [[], []],\n    );\n    return [tabs, tabContents];\n  }, [activeTabId, clusterConfigurationGroups, clusterConfigurationItems]);\n\n  const groupNotFound = !clusterConfigurationGroups.some((group) => group.id === activeTabId);\n\n  return (\n    <div className=\"co-cluster-configuration-page\">\n      <Helmet>\n        <title>{t('console-app~Cluster configuration')}</title>\n      </Helmet>\n      <PageLayout\n        title={t('console-app~Cluster configuration')}\n        hint={t(\n          'console-app~Set cluster-wide configuration for the console experience. Your changes will be autosaved and will affect after a refresh.',\n        )}\n      >\n        {!loaded ? (\n          <LoadingBox />\n        ) : clusterConfigurationTabs.length === 0 ? (\n          <EmptyState>\n            <EmptyStateHeader\n              titleText={<>{t('console-app~Insufficient permissions')}</>}\n              icon={<EmptyStateIcon icon={LockIcon} />}\n              headingLevel=\"h1\"\n            />\n            <EmptyStateBody>\n              {t(\n                'console-app~You do not have sufficient permissions to read any cluster configuration.',\n              )}\n            </EmptyStateBody>\n          </EmptyState>\n        ) : (\n          <>\n            <div className=\"co-cluster-configuration-page-content\">\n              <div className=\"co-cluster-configuration-page-content__tabs\">\n                <Tabs\n                  activeKey={activeTabId}\n                  onSelect={onSelect}\n                  isVertical\n                  data-test=\"user-preferences tabs\"\n                >\n                  <>{clusterConfigurationTabs}</>\n                </Tabs>\n              </div>\n              <div className=\"co-cluster-configuration-page-content__tab-content\">\n                {clusterConfigurationTabContents}\n              </div>\n            </div>\n            {groupNotFound ? (\n              /* Similar to a TabContent */\n              <section className=\"co-cluster-configuration-page pf-v5-c-tab-content\">\n                <h1>{t('console-app~{{section}} not found', { section: activeTabId })}</h1>\n              </section>\n            ) : null}\n          </>\n        )}\n      </PageLayout>\n    </div>\n  );\n};\n\nexport default ClusterConfigurationPage;\n","import * as React from 'react';\nimport { Form } from '@patternfly/react-core';\nimport ClusterConfigurationField from './ClusterConfigurationField';\nimport { ResolvedClusterConfigurationItem } from './types';\n\ntype ClusterConfigurationFormProps = {\n  items: ResolvedClusterConfigurationItem[];\n};\n\nconst ClusterConfigurationForm: React.FC<ClusterConfigurationFormProps> = ({ items }) =>\n  items?.length > 0 ? (\n    <Form onSubmit={(event) => event.preventDefault()}>\n      {items.map((item) => (\n        <ClusterConfigurationField key={item.id} item={item} />\n      ))}\n    </Form>\n  ) : null;\nexport default ClusterConfigurationForm;\n","import * as React from 'react';\nimport { ClusterConfigurationFieldType } from '@console/dynamic-plugin-sdk/src';\nimport ClusterConfigurationCustomField from './ClusterConfigurationCustomField';\nimport { ResolvedClusterConfigurationItem } from './types';\n\nconst componentForFieldType = {\n  // WIP:\n  // [ClusterConfigurationFieldType.text]: ClusterConfigurationTextField,\n  // [ClusterConfigurationFieldType.checkbox]: ClusterConfigurationCheckboxField,\n  // [ClusterConfigurationFieldType.dropdown]: ClusterConfigurationDropdownField,\n  [ClusterConfigurationFieldType.custom]: ClusterConfigurationCustomField,\n};\n\nconst ClusterConfigurationField: React.FC<{ item: ResolvedClusterConfigurationItem }> = ({\n  item,\n}) => {\n  const Field = componentForFieldType[item.field.type];\n  return Field ? <Field item={item} field={item.field} /> : null;\n};\n\nexport default ClusterConfigurationField;\n","import * as React from 'react';\n// import { UserPreferenceCustomField as CustomFieldType } from '@console/dynamic-plugin-sdk/src';\nimport { ClusterConfigurationCustomField } from '@console/dynamic-plugin-sdk/src';\nimport { ResolvedCodeRefProperties } from '@console/dynamic-plugin-sdk/src/types';\nimport { FormLayout } from '@console/shared/src/components/cluster-configuration';\nimport { ErrorBoundaryInline } from '@console/shared/src/components/error';\nimport { ResolvedClusterConfigurationItem } from './types';\n\ntype ClusterConfigurationCustomFieldProps = {\n  item: ResolvedClusterConfigurationItem;\n  field: ResolvedCodeRefProperties<ClusterConfigurationCustomField>;\n};\n\nconst ClusterConfigurationCustomField: React.FC<ClusterConfigurationCustomFieldProps> = ({\n  item,\n  field,\n}) => {\n  const CustomComponent = field.component;\n\n  return (\n    <ErrorBoundaryInline>\n      <FormLayout>\n        <CustomComponent {...field.props} readonly={item.readonly} />\n      </FormLayout>\n    </ErrorBoundaryInline>\n  );\n};\n\nexport default ClusterConfigurationCustomField;\n","import {\n  ClusterConfigurationTabGroup,\n  ResolvedClusterConfigurationGroup,\n  ResolvedClusterConfigurationItem,\n} from './types';\n\nexport const getClusterConfigurationGroups = (\n  clusterConfigurationGroups: ResolvedClusterConfigurationGroup[],\n  clusterConfigurationItems: ResolvedClusterConfigurationItem[],\n): ClusterConfigurationTabGroup[] => {\n  if (!clusterConfigurationItems?.length || !clusterConfigurationGroups?.length) {\n    return [];\n  }\n  const initialClusterConfigurationGroup: ClusterConfigurationTabGroup[] = clusterConfigurationGroups.map(\n    (clusterConfigurationGroup) => ({\n      ...clusterConfigurationGroup,\n      items: [],\n    }),\n  );\n  const populatedClusterConfigurationGroup: ClusterConfigurationTabGroup[] = clusterConfigurationItems\n    .filter((clusterConfigurationItem) =>\n      clusterConfigurationGroups.find(\n        (clusterConfigurationGroup) =>\n          clusterConfigurationGroup.id === clusterConfigurationItem.groupId,\n      ),\n    )\n    .reduce(\n      (\n        clusterConfigurationGroup: typeof initialClusterConfigurationGroup,\n        currClusterConfigurationItem,\n      ) => {\n        const clusterConfigurationGroupForCurrentItem = clusterConfigurationGroup.find(\n          (group) => currClusterConfigurationItem.groupId === group.id,\n        );\n        if (clusterConfigurationGroupForCurrentItem) {\n          clusterConfigurationGroupForCurrentItem.items.push(currClusterConfigurationItem);\n        } else {\n          clusterConfigurationGroup.push({\n            id: currClusterConfigurationItem.id,\n            label: currClusterConfigurationItem.label,\n            items: [currClusterConfigurationItem],\n          });\n        }\n        return clusterConfigurationGroup;\n      },\n      initialClusterConfigurationGroup,\n    );\n  return populatedClusterConfigurationGroup.filter((group) => group.items.length);\n};\n","import * as React from 'react';\nimport {\n  ClusterConfigurationGroup,\n  isClusterConfigurationGroup,\n  useResolvedExtensions,\n} from '@console/dynamic-plugin-sdk/src';\nimport { orderExtensionBasedOnInsertBeforeAndAfter } from '@console/shared/src';\nimport { ResolvedClusterConfigurationGroup } from './types';\n\nconst useClusterConfigurationGroups = (): [\n  ResolvedClusterConfigurationGroup[],\n  boolean,\n  Error[],\n] => {\n  const [resolvedExtensions, resolved, errors] = useResolvedExtensions<ClusterConfigurationGroup>(\n    isClusterConfigurationGroup,\n  );\n\n  const sortedGroups = React.useMemo(() => {\n    return orderExtensionBasedOnInsertBeforeAndAfter(\n      resolvedExtensions.map((resolvedExtension) => resolvedExtension.properties),\n    );\n  }, [resolvedExtensions]);\n\n  return [sortedGroups, resolved, errors];\n};\n\nexport default useClusterConfigurationGroups;\n","import * as React from 'react';\nimport {\n  checkAccess,\n  ClusterConfigurationItem,\n  isClusterConfigurationItem,\n  useResolvedExtensions,\n} from '@console/dynamic-plugin-sdk/src';\nimport { orderExtensionBasedOnInsertBeforeAndAfter } from '@console/shared/src';\nimport { ResolvedClusterConfigurationItem } from './types';\n\nconst useClusterConfigurationItems = (): [ResolvedClusterConfigurationItem[], boolean, Error[]] => {\n  const [resolvedExtensions, resolved, errors] = useResolvedExtensions<ClusterConfigurationItem>(\n    isClusterConfigurationItem,\n  );\n\n  // Sort\n  const sortedItems = React.useMemo(() => {\n    return orderExtensionBasedOnInsertBeforeAndAfter(\n      resolvedExtensions.map((resolvedExtension) => resolvedExtension.properties),\n    );\n  }, [resolvedExtensions]);\n\n  // Filter based on permission checks\n  const [canRead, updateCanRead] = React.useState<Record<string, boolean>>({});\n  const [canWrite, updateCanWrite] = React.useState<Record<string, boolean>>({});\n  React.useEffect(() => {\n    sortedItems.forEach((item) => {\n      if (item.readAccessReview?.length > 0) {\n        Promise.all(item.readAccessReview.map((accessReview) => checkAccess(accessReview)))\n          .then((result) => {\n            const allowed = result.every((r) => r.status.allowed);\n            updateCanRead((x) => ({ ...x, [item.id]: allowed }));\n          })\n          .catch((error) => {\n            // eslint-disable-next-line no-console\n            console.warn(`readAccessReview check failed for \"${item.id}\"`, error);\n          });\n      }\n\n      if (item.writeAccessReview?.length > 0) {\n        Promise.all(item.writeAccessReview.map((accessReview) => checkAccess(accessReview)))\n          .then((result) => {\n            const allowed = result.every((r) => r.status.allowed);\n            updateCanWrite((x) => ({ ...x, [item.id]: allowed }));\n          })\n          .catch((error) => {\n            // eslint-disable-next-line no-console\n            console.warn(`writeAccessReview check failed for \"${item.id}\"`, error);\n          });\n      }\n    });\n  }, [sortedItems]);\n\n  const filteredItems = React.useMemo<ResolvedClusterConfigurationItem[]>(() => {\n    return sortedItems\n      .filter((item) => (item.readAccessReview?.length > 0 ? canRead[item.id] : true))\n      .map((item) => {\n        return {\n          ...item,\n          readonly: item.writeAccessReview?.length > 0 ? !canWrite[item.id] : false,\n        };\n      });\n  }, [sortedItems, canRead, canWrite]);\n\n  return [filteredItems, resolved, errors];\n};\n\nexport default useClusterConfigurationItems;\n"],"sourceRoot":""}