{"version":3,"sources":["webpack:///./public/components/storage-class-form.tsx"],"names":["NameValueEditorComponent","props","loader","then","c","NameValueEditor","StorageClassFormInner","t","navigate","newStorageClass","setNewStorageClass","name","description","type","parameters","reclaim","volumeBindingMode","expansion","customParams","setCustomParams","validationSuccessful","setValidationSuccessful","loading","setLoading","error","setError","fieldErrors","setFieldErrors","needValidate","setNeedValidate","resources","previousName","defaultProvisionerObj","title","provisioner","allowVolumeExpansion","storageTypes","CSIStorageTypes","defaultStorageTypes","getExtensions","extensions","forEach","ext","properties","hasOwnProperty","CSI","current","OTHERS","reclaimPolicies","Retain","Delete","volumeBindingModes","Immediate","WaitForFirstConsumer","paramIsRequired","paramKey","params","requiredParam","isRequired","validateForm","errs","successful","nameValidation","updatedName","nameUpdated","returnVal","nameIsValid","trim","length","data","storageClass","metadata","toLowerCase","validateName","nameValidationMsg","validationMsg","validateParameters","storageType","userEnteredParams","allParamsForType","requiredKeys","filter","key","value","allRequiredFieldsFilled","prevProps","extensionsLoaded","loaded","sc","csiLoaded","csi","scData","csiData","csiDrivers","csiListedProvisioner","Object","keys","csiDriver","csiDriverName","includes","provisionerData","csiProvisionerMap","loadError","updateNewStorage","param","runValidation","newParams","setParameterHandler","event","checkbox","target","checked","validation","setStorageHandler","getFormParams","newStorageClassBeforeCreation","dataParameters","finalValue","format","v","Name","map","Value","getCustomParams","reclaimPolicyKey","volumeBindingModeKey","expansionFlag","allowExpansion","className","link","to","id","replace","htmlFor","placeholder","onChange","items","dropDownClassName","selectedKey","dataTest","autocompleteFilter","text","item","autocompletePlaceholder","menuClassName","dynamicContent","parameter","paramId","isCheckbox","visibilityProperty","visible","Component","parameterKey","parameterValue","onParamChange","children","values","hintText","documentationLink","href","nameValuePairs","nameString","nameParameter","valueString","addString","updateParentData","getProvisionerElements","errorMessage","message","inProgress","isDisabled","onClick","e","preventDefault","newStorage","defaultParams","hiddenParmas","addDefaultParams","annotations","reclaimPolicy","mutator","resource","catch","err","variant","ConnectedStorageClassForm","k8s","onClose","stopK8sWatch","watchK8sList","StorageClassForm","kind","isList","prop","displayName"],"mappings":"6FAAA,0YAmCA,MAAMA,EAA4BC,GAChC,gBAAC,IAAc,eACbC,OAAQ,IAAM,0CAAoCC,KAAMC,GAAMA,EAAEC,kBAC5DJ,IAgBFK,EAA0DL,I,QAC9D,MAAM,EAAEM,GAAM,2BACRC,EAAW,yBAEVC,EAAiBC,GAAsB,WAU3C,CACDC,KAAM,GACNC,YAAa,GACbC,KAAM,KACNC,WAAY,GACZC,QAAS,KACTC,kBAAmB,uBACnBC,WAAW,KAENC,EAAcC,GAAmB,WAAe,CAAC,CAAC,GAAI,OACtDC,EAAsBC,GAA2B,YAAe,IAChEC,EAASC,GAAc,YAAe,IACtCC,EAAOC,GAAY,WAAe,OAClCC,EAAaC,GAAkB,WAAqC,CAAEb,WAAY,MAElFc,EAAcC,GAAmB,YAAe,GAEjDC,EAAY,WACZC,EAAe,SAAa,IAE5BC,EAA4C,CAChDC,MAAO,GACPC,YAAa,GACbpB,WAAY,GACZqB,qBAAsB,KAAM,GAGxBC,EAAe,SAA2D,IAE1EC,GAAkB,SAAoC,IACtDC,GAAsB,SAAoC,IAE1DC,GAAiBC,IACrBA,EAAWC,QAASC,IACYA,EAtDxBC,WAAWC,eAAe,IAAgBC,KAuD9CR,GAAgBS,QAAQJ,EAAIC,WAAWE,IAAIX,aAAe,OAAH,UAAQQ,EAAIC,WAAWE,KAE9EP,GAAoBQ,QAAQJ,EAAIC,WAAWI,OAAOb,aAAe,OAAH,UACzDQ,EAAIC,WAAWI,WAMpBC,GAAkB,CACtBC,OAAQ1C,EAAE,iBACV2C,OAAQ3C,EAAE,kBAGN4C,GAAqB,CACzBC,UAAW7C,EAAE,oBACb8C,qBAAsB9C,EAAE,gCA2DpB+C,GAAkB,CAACC,EAAUC,EAAS/C,EAAgBK,cAC1D,MAAM2C,EAAgB,IACpBrB,EAAaU,QAAQrC,EAAgBI,MACrC,CAAC,aAAc0C,EAAU,YACzB,MAEF,IAAIG,GAAa,EAKjB,OAJID,IACFC,EAAa,IAAaD,GAAiBA,EAAcD,GAAUC,GAG9DC,GAyBHC,GAAe,KAEnBlC,EAAS,MACTE,EAAe,IAEf,MAAMiC,EAA6B,GACnC,IAAIC,GAAa,EAEjB,MAAMC,EA5Ea,MACnB,MAAMC,EAActD,EAAgBE,KAC9BqD,EAAcD,IAAgBhC,EAAae,QAC3CmB,EAAY,CAChBzC,MAAO,KACP0C,aAAa,GAkBf,OAfIF,IACgC,IAA9BD,EAAYI,OAAOC,QACrBH,EAAUzC,MAAQjB,EAAE,mCACpB0D,EAAUC,aAAc,GACfpC,EAAUgB,SACnB,IAAOhB,EAAUgB,QAAQuB,MAAM,SAAUC,GACnCA,EAAaC,SAAS5D,OAASoD,EAAYS,gBAC7CP,EAAUzC,MAAQjB,EAAE,sCACpB0D,EAAUC,aAAc,MAI9BnC,EAAae,QAAUiB,GAGlBE,GAqDgBQ,GAClBX,EAAeI,cAClBN,EAAKc,kBAAoBZ,EAAetC,MACxCqC,GAAa,GAGc,OAAzBpD,EAAgBI,KAClBgD,GAAa,EAzDU,MACzB,MAAML,EAAS/C,EAAgBK,WAE/B,OADwB,IAAO0C,EAAQ,EAAGmB,mBAAsC,OAAlBA,IAwDlDC,KACVf,GAAa,GAvCe,M,MAC9B,GAA2C,IAAvCpD,EAAgBE,KAAKwD,OAAOC,OAC9B,OAAO,EAGT,MAAQvD,KAAMgE,EAAa/D,WAAYgE,GAAsBrE,EAE7D,GAAoB,OAAhBoE,EACF,OAAO,EAGT,MAAME,EAAoD,QAAjC,EAAA3C,EAAaU,QAAQ+B,UAAY,eAAE/D,WAEtDkE,EAAe,IAAOD,GAAkBE,OAAQC,GAAQ5B,GAAgB4B,IAM9E,OAL6B,IAAQF,EAAeE,IAClD,MAAMC,EAAQ,IAAML,EAAmB,CAACI,EAAK,UAC7C,OAAQ,IAAUC,MA0BfC,KACHvB,GAAa,GAGflC,EAAeiC,GACfvC,EAAwBwC,IAGpBwB,GAAY,SAAapF,GAE/B,YAAgB,K,wBACd,MAAOuC,EAAY8C,GAAoBrF,EAAMuC,WAI7C,GAHI8C,IAAqB,IAAUrF,EAAMuC,WAAY6C,GAAUvC,QAAQN,aACrED,GAAcC,GAEZvC,IAAUoF,GAAUvC,SAAWwC,EAAkB,CACnDlD,EAAaU,QAAU,IAAYR,GAAoBQ,SACvD,MAAMyC,EAA4B,QAAnB,EAAe,QAAf,EAAAtF,EAAM6B,iBAAS,eAAE0D,UAAE,eAAED,OAC9BE,EAAgC,QAApB,EAAe,QAAf,EAAAxF,EAAM6B,iBAAS,eAAE4D,WAAG,eAAEH,OAClCI,GAA6B,QAAnB,EAAe,QAAf,EAAA1F,EAAM6B,iBAAS,eAAE0D,UAAE,eAAEnB,OAAQ,GACvCuB,GAA+B,QAApB,EAAe,QAAf,EAAA3F,EAAM6B,iBAAS,eAAE4D,WAAG,eAAErB,OAAQ,GAE3CoB,GAlIkB,CAACI,IACzB,MAAMC,EAAiCC,OAAOC,KAAK3D,GAAgBS,SACnE+C,EAAWpD,QAASwD,IAClB,IAAK,MAAM/D,KAAe4D,EAAsB,CAC9C,MAAMI,EAAgB,aAAQD,GAE9B,GADuBC,EAAcC,SAASjE,GAC1B,CAClB,MAAMkE,EAAkB,IAAY/D,GAAgBS,QAAQZ,IAC5DkE,EAAgBlE,YAAcgE,EAC9B9D,EAAaU,QAAQoD,GAAiBE,EACtC,MAEF,MAAMA,EAAkB,IAAYpE,GACpCoE,EAAgBnE,MAAQiE,EACxBE,EAAgBlE,YAAcgE,EAC9B9D,EAAaU,QAAQoD,GAAiBE,MAoHtCC,CAAkBT,GAEhBL,IACFzD,EAAUgB,QAAU,CAClBuB,KAAMsB,EACNW,UAA8B,QAAnB,EAAe,QAAf,EAAArG,EAAM6B,iBAAS,eAAE0D,UAAE,eAAEc,UAChCf,UAEF5B,MAIJ0B,GAAUvC,QAAU7C,GAEnB,CAACA,IAEJ,MAAMsG,GAAmB,CAACC,EAAyBrB,EAAOsB,KACxD,MAAMC,EAAY,OAAH,wBACVjG,GAAe,CAClB,CAAC+F,GAAQrB,IAGXzE,EAAmBgG,GACnB7E,EAAgB4E,IAGlB,YAAgB,KACV7E,GACF+B,MAGD,CAAClD,IAEJ,MAAMkG,GAAsB,CAACH,EAAyBI,EAAOC,KAC3D,MAAMH,EAAY,OAAH,UAAQjG,EAAgBK,YACnC+F,EACFH,EAAUF,GAAS,CAAErB,MAAOyB,EAAME,OAAOC,SAErCH,EAAME,OACRJ,EAAUF,GAAS,CAAErB,MAAOyB,EAAME,OAAO3B,OAEzCuB,EAAUF,GAAS,CAAErB,MAAOyB,GAIhC,IAASF,EAAW,CAACvB,EAAOD,KAC1B,GAAIwB,EAAU9D,eAAesC,GAAM,CACjC,MAAM8B,EAAa,IACjB5E,EAAaU,QAAQrC,EAAgBI,MACrC,CAAC,aAAcqE,EAAK,cACpB,MAEFwB,EAAUxB,GAAKP,cAAgBqC,EAAaA,EAAWN,GAAa,QAIxEH,GAAiB,aAAcG,GAAW,IAGtCO,GAAoB,CAACT,EAAOrB,KAChCoB,GAAiBC,EAAOrB,GAAO,IA8C3B+B,GAAiBC,IACrB,MAAMtG,EAAOsG,EAA8BtG,KACrCuG,EAAiB,IACrB,IAAYD,EAA8BrG,WAAY,CAACqE,EAAOD,K,QAC5D,IAAImC,EAAalC,EAAMA,MAIvB,OAH+C,QAA3C,EAA0B,QAA1B,EAAA/C,EAAaU,QAAQjC,UAAK,eAAEC,WAAWoE,UAAI,eAAEoC,UAC/CD,EAAajF,EAAaU,QAAQjC,GAAMC,WAAWoE,GAAKoC,OAAOnC,EAAMA,QAEhEkC,IAERlC,GAAoB,KAAVA,GAGb,OAAO,IAAQiC,EApCO,MAEtB,MAAMhH,EAAI,IAASc,EAAeqG,GAAM,IAAUA,EAAE,IAAoBC,QAGlExB,EAAO5F,EAAEqH,IAAKF,GAAMA,EAAE,IAAoBC,OAChD,GAAI,IAAOxB,GAAM5B,SAAW4B,EAAK5B,OAcjC,OARA,IACEhE,EACCmH,GACEA,EAAE,IAAoBG,OAAS,IAAUH,EAAE,IAAoBG,QAC5D,KACAH,EAAE,IAAoBG,QAGvB,IAAYtH,GAbjBqB,EAASlB,EAAE,kCA6BkBoH,KA0L3BC,GACwB,OAA5BnH,EAAgBM,QAAmBiC,GAAgBE,OAASzC,EAAgBM,QACxE8G,GACJpH,EAAgBO,mBAAqBmC,GAAmBE,qBACpDlB,GAAmE,QAA5C,EAAoB,QAApB,EAAAC,EAAaU,eAAO,eAAGrC,EAAgBI,aAAK,eAAEsB,qBACrE2F,GACJrH,EAAgBI,OACf,IAAasB,IACVA,GAAqB1B,EAAgBK,YACrCqB,IACA4F,KAAiBD,IAAgBrH,EAAgBQ,UAEvD,OACE,uBAAK+G,UAAU,mBACb,gBAAC,IAAW,CACV/F,MAAO1B,EAAE,uBACT0H,KACE,gBAAC,OAAI,CAACC,GAAG,mCAAmCC,GAAG,YAAW,YAAW,YAAYC,SAAO,GACrF7H,EAAE,uBAIT,uBAAKyH,UAAU,kDACb,uCAAmB,sBACjB,uBAAKA,UAAW,EAAW,aAAc,CAAE,YAAatG,EAAYgD,qBAClE,yBAAOsD,UAAU,4BAA4BK,QAAQ,sBAClD9H,EAAE,gBAEL,yBACEM,KAAK,OACLmH,UAAU,uBACVM,YAAa7H,EAAgBE,KAC7BwH,GAAG,qBAAoB,YACb,qBACVI,SAAW3B,GAAUK,GAAkB,OAAQL,EAAME,OAAO3B,MAAMhB,QAClEgB,MAAO,IAAM1E,EAAiB,OAAQ,MAExC,wBAAMuH,UAAU,cACbtG,EAAYgD,kBAAoBhD,EAAYgD,kBAAoB,OAIrE,uBAAKsD,UAAU,cACb,yBAAOK,QAAQ,6BAA6B9H,EAAE,uBAC9C,yBACEM,KAAK,OACLmH,UAAU,uBACVG,GAAG,4BAA2B,YACpB,4BACVI,SAAW3B,GAAUK,GAAkB,cAAeL,EAAME,OAAO3B,OACnEA,MAAO,IAAM1E,EAAiB,cAAe,OAIjD,uBAAKuH,UAAU,cACb,yBAAOA,UAAU,cAAcK,QAAQ,gCACpC9H,EAAE,0BAEL,gBAAC,IAAQ,CACP0B,MAAO1B,EAAE,gCACTiI,MAAOxF,GACPyF,kBAAkB,uBAClBC,YAAad,GACbW,SAAW3B,GAAUK,GAAkB,UAAWL,GAClDuB,GAAG,iCAEL,wBAAMH,UAAU,cACbzH,EACC,uIAKN,uBAAKyH,UAAU,cACb,yBAAOA,UAAU,cAAcK,QAAQ,qCACpC9H,EAAE,+BAEL,gBAAC,IAAQ,CACP0B,MAAO1B,EAAE,qCACTiI,MAAOrF,GACPsF,kBAAkB,uBAClBC,YAAab,GACbU,SAAW3B,GAAUK,GAAkB,oBAAqBL,GAC5DuB,GAAG,oCACHQ,SAAS,sCAEX,wBAAMX,UAAU,cACbzH,EACC,uHAKN,uBAAKyH,UAAU,cACb,yBAAOA,UAAU,cAAcK,QAAQ,6BACpC9H,EAAE,uBAEL,gBAAC,IAAQ,CACP0B,MAAO1B,EAAE,6BACTqI,mBArGe,CAACC,EAAMC,IAAS,EAAMD,EAAMC,GAsG3CC,wBAAyBxI,EAAE,6BAC3BiI,MAAO,IAAYpG,EAAaU,QAAS,eACzC2F,kBAAkB,uBAClBO,cAAc,2BACdN,YAAajI,EAAgBI,KAC7B0H,SAAW3B,GAAUK,GAAkB,OAAQL,GAC/CuB,GAAG,4BACHQ,SAAS,uCAEX,wBAAMX,UAAU,cACbzH,EACC,sFAKN,uBAAKyH,UAAU,sBACa,OAAzBvH,EAAgBI,KAzPI,M,QAC7B,MAAMC,EAAuD,QAA1C,EAAAsB,EAAaU,QAAQrC,EAAgBI,aAAK,eAAEC,WAEzDmI,EAAiB,IAAMnI,EAAY,CAACoI,EAAWhE,K,QACnD,MAAMiE,EAAU,6BAA6B,IAAY,IAAMD,EAAW,OAAQhE,IAC5EP,EAAgB,IAAMuE,EAAW,gBAAiB,MAClDE,EAAgC,aAAnBF,EAAUrI,KACvB6H,EAAc,CAAC,aAAcxD,EAAK,SAClCmE,EAAuC,QAAlB,EAAAH,aAAS,EAATA,EAAWI,eAAO,SAI7C,KAHkB,IAAaD,GAC3BA,EAAmB5I,EAAgBK,YACnCuI,GAEF,OAAO,KAGT,GAAIH,EAAUK,UAAW,CACvB,MAAM,UAAEA,GAAcL,EACtB,OACE,gBAACK,EAAS,CACRrE,IAAKA,EACLsE,aAActE,EACduE,gBAA+C,QAA/B,EAAAhJ,EAAgBK,WAAWoE,UAAI,eAAEC,QAAS,GAC1DuE,cAAe/C,KAKrB,MAAMgD,EAAWT,EAAUU,OACzB,gCACE,yBACE5B,UAAW,EAAW,gBAAiB,CAAE,cAAe1E,GAAgB4B,KACxEmD,QAASc,GAER,IAAMD,EAAW,OAAQhE,IAE5B,gBAAC,IAAQ,CACPjD,MAAOiH,EAAUW,SACjBrB,MAAOU,EAAUU,OACjBnB,kBAAkB,uBAClBC,YAAa,IAAMjI,EAAiBiI,GACpCH,SAAW3B,GAAUD,GAAoBzB,EAAK0B,GAAO,GACrDuB,GAAIgB,EACJR,SAAUQ,IAEZ,wBAAMnB,UAAU,cAAcrD,GAAgC,OAGhE,gCACGyE,EACC,gCACE,uBAAKpB,UAAU,YACb,6BACE,yBACEnH,KAAK,WACLmH,UAAU,sCACVO,SAAW3B,GAAUD,GAAoBzB,EAAK0B,EAAOwC,GACrDrC,QAAS,IAAMtG,EAAiBiI,GAAa,GAC7CP,GAAI,wBAAwBjD,aAAc,YAC/BiE,IAEZ,IAAMD,EAAW,OAAQhE,MAKhC,gCACE,yBACE8C,UAAW,EAAW,gBAAiB,CACrC,cAAe1E,GAAgB4B,KAEjCmD,QAASc,GAER,IAAMD,EAAW,OAAQhE,IAE5B,yBACErE,KAAK,OACLmH,UAAU,uBACV7C,MAAO,IAAM1E,EAAiBiI,EAAa,IAC3CH,SAAW3B,GAAUD,GAAoBzB,EAAK0B,EAAOwC,GACrDjB,GAAIgB,EAAO,YACAA,KAIjB,wBAAMnB,UAAU,cAAcrD,GAAgCuE,EAAUW,WAI5E,OACE,uBACE3E,IAAKA,EACL8C,UAAW,EAAW,aAAc,CAClC,YAAa,IAAMvH,EAAgBK,WAAeoE,EAAH,iBAAwB,SAGxEyE,KAIDG,EAA8D,QAA1C,EAAA1H,EAAaU,QAAQrC,EAAgBI,aAAK,eAAEiJ,kBACtE,OACE,iCACI,IAAUhJ,IAAemI,EAE3B,uBAAKjB,UAAU,cACb,6BAAQzH,EAAE,iCACV,yBACGA,EAAE,wD,IAEFuJ,GACC,gBAAC,IAAY,CACXC,KAAMD,IACNjB,KAAMtI,EAAE,uCAId,gBAACP,EAAwB,CACvBgK,eAAgB9I,EAChB+I,WAAY1J,EAAE,oBACd2J,cAAe3J,EAAE,oBACjB4J,YAAa5J,EAAE,gBACf6J,UAAW7J,EAAE,wBACb8J,iBAAmBjK,GAAMe,EAAgBf,EAAE4J,qBA8HVM,GAA2B,MAG7DxC,IACC,uBAAKE,UAAU,YACb,6BACE,yBACEnH,KAAK,WACLmH,UAAU,sCACVO,SAAW3B,GAAUK,GAAkB,YAAaL,EAAME,OAAOC,SACjEA,QAASgB,KAEVxH,EAAE,wDAKT,gBAAC,IAAS,CAACgK,aAAc/I,EAAQA,EAAMgJ,QAAU,GAAIC,WAAYnJ,GAC/D,gBAAC,IAAW,CAAC0G,UAAU,gBACrB,gBAAC,IAAM,CACLG,GAAG,eACHuC,YAAatJ,EACbuJ,QAlUcC,I,QAC1BA,EAAEC,iBAEFtJ,GAAW,GACXE,EAAS,MAET,MAAMqJ,EAjEiB,M,UACvB,MAAMC,EAAyE,QAAzD,EAA6C,QAA7C,EAAoB,QAApB,EAAA3I,EAAaU,eAAO,eAAGrC,aAAe,EAAfA,EAAiBI,aAAK,eAAEC,kBAAU,QAAI,GAC7EkK,EAAe,GACrB,IAAOD,EAAe,CAACnB,EAAQpD,K,QACX,IAAaoD,aAAM,EAANA,EAAQN,SACnCM,EAAON,QAAQyB,GACA,QAAf,EAAAnB,aAAM,EAANA,EAAQN,eAAO,WACDM,EAAOzE,QACvB6F,EAAaxE,GAASoD,KAG1B,MAAMzE,EAAQ,OAAH,wBAAQ1E,EAAgBK,YAAekK,GAMlD,OALkB,OAAH,wBACVvK,GAAe,CAClBK,WAAYqE,KAmDK8F,IAEb,KAAEtK,EAAI,YAAEC,EAAW,KAAEC,EAAI,QAAEE,EAAO,UAAEE,EAAS,kBAAED,GAAsB8J,EACrE1D,EAAiBF,GAAc4D,GAErC,IAAIzG,EAAqB,CACvBE,SAAU,CACR5D,OACAuK,YAJgBtK,EAAc,CAAEA,eAAgB,IAMlDsB,YAAaE,EAAaU,QAAQjC,GAAMqB,YACxCpB,WAAYsG,GAGVrG,IACFsD,EAAK8G,cAAgBpK,GAGnBC,IACFqD,EAAKrD,kBAAoBA,GAG3B,MAAMmB,EAAmD,QAA5B,EAAoB,QAApB,EAAAC,EAAaU,eAAO,eAAGjC,UAAK,eAAEsB,sBACxB,IAAaA,GAC5CA,EAAqB1B,EAAgBK,YACrCqB,KAEFkC,EAAKlC,qBAAuBlB,GAE9B,MAAM,QAAEmK,GAAYhJ,EAAaU,QAAQjC,GACrC,IAAauK,KACf/G,EAAO+G,EAAQ/G,IAGjB,aAAU,oBAAmBA,GAC1BlE,KAAMkL,IACL9J,GAAW,GACXf,EAAS,aAAgB6K,EAAU,aAAaA,OAEjDC,MAAOC,IACNhK,GAAW,GACXE,EAAS8J,MAoRD1K,KAAK,SACL2K,QAAQ,WAEPjL,EAAE,kBAEL,gBAAC,IAAM,CACL4H,GAAG,SACHwC,QAAS,IAAMnK,EAAS,+BACxBK,KAAK,SACL2K,QAAQ,aAEPjL,EAAE,wBAwENkL,EAA4B,kBApDjB,EAAGC,QAASC,cAA0B,CAC5DD,MACAC,YAGyB,KAAqB,CAC9CC,aAAc,IACdC,aAAc,MA6CyB,CAGtC5L,IACD,MAAMuC,EAAa,aAA+C,MAClE,OAAO,gBAAClC,EAAqB,eAACkC,WAAYA,GAAgBvC,MAG/C6L,EAAoB7L,IAC/B,MAAM6B,EAAY,CAChB,CAAEiK,KAAM,oBAAkBA,KAAMC,QAAQ,EAAMC,KAAM,MACpD,CAAEF,KAAM,aAAkB,kBAAiBC,QAAQ,EAAMC,KAAM,QAEjE,OACE,gBAAC,IAAQ,CAACnK,UAAWA,GACnB,gBAAC2J,EAAyB,iBAAKxL,MAKrCwL,EAA0BS,YAAc","file":"storage-class-form-chunk-9170d96371152bcb6550.min.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom-v5-compat';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { getName } from '@console/shared';\nimport {\n  isStorageClassProvisioner,\n  StorageClassProvisioner,\n  useResolvedExtensions,\n  ProvisionerDetails as UnResolvedProvisionerDetails,\n  ProvisionerType,\n  ResolvedExtension,\n  K8sResourceCommon,\n} from '@console/dynamic-plugin-sdk';\nimport { ResolvedCodeRefProperties } from '@console/dynamic-plugin-sdk/src/types';\nimport {\n  AsyncComponent,\n  ButtonBar,\n  Dropdown,\n  ExternalLink,\n  Firehose,\n  FirehoseResult,\n  NameValueEditorPair,\n  PageHeading,\n  resourceObjPath,\n} from './utils';\n\nimport { k8sCreate, K8sResourceKind, referenceForModel, referenceFor } from './../module/k8s';\nimport * as k8sActions from '../actions/k8s';\nimport { CSIDriverModel, StorageClassModel } from './../models';\n\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('./utils/name-value-editor').then((c) => c.NameValueEditor)}\n    {...props}\n  />\n);\n\ntype Parameters = ProvisionerDetails['parameters'];\n\ntype ProvisionerDetails = ResolvedCodeRefProperties<UnResolvedProvisionerDetails>;\ntype ResolvedStorageClassProvisioner = ResolvedCodeRefProperties<StorageClassProvisioner>;\n\nconst isCSIProvisionerExtension = (extension: ResolvedStorageClassProvisioner) =>\n  extension.properties.hasOwnProperty(ProvisionerType.CSI);\n\ntype StorageProvisionerMap = {\n  [provisioner: string]: ProvisionerDetails;\n};\n\nconst StorageClassFormInner: React.FC<StorageClassFormProps> = (props) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const [newStorageClass, setNewStorageClass] = React.useState<{\n    name: string;\n    description: string;\n    type: any;\n    parameters: {\n      [k: string]: any;\n    };\n    reclaim: any;\n    volumeBindingMode: string;\n    expansion: boolean;\n  }>({\n    name: '',\n    description: '',\n    type: null,\n    parameters: {},\n    reclaim: null,\n    volumeBindingMode: 'WaitForFirstConsumer',\n    expansion: true,\n  });\n  const [customParams, setCustomParams] = React.useState([['', '']]);\n  const [validationSuccessful, setValidationSuccessful] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [fieldErrors, setFieldErrors] = React.useState<{ [k: string]: any }>({ parameters: {} });\n\n  const [needValidate, setNeedValidate] = React.useState(false);\n\n  const resources = React.useRef<{ [k: string]: any }>();\n  const previousName = React.useRef('');\n\n  const defaultProvisionerObj: ProvisionerDetails = {\n    title: '',\n    provisioner: '',\n    parameters: {},\n    allowVolumeExpansion: () => true,\n  };\n\n  const storageTypes = React.useRef<{ [driverName: string]: ProvisionerDetails }>({});\n\n  const CSIStorageTypes = React.useRef<StorageProvisionerMap>({});\n  const defaultStorageTypes = React.useRef<StorageProvisionerMap>({});\n\n  const getExtensions = (extensions) => {\n    extensions.forEach((ext: ResolvedStorageClassProvisioner) => {\n      if (isCSIProvisionerExtension(ext)) {\n        CSIStorageTypes.current[ext.properties.CSI.provisioner] = { ...ext.properties.CSI };\n      } else {\n        defaultStorageTypes.current[ext.properties.OTHERS.provisioner] = {\n          ...ext.properties.OTHERS,\n        };\n      }\n    });\n  };\n\n  const reclaimPolicies = {\n    Retain: t('public~Retain'),\n    Delete: t('public~Delete'),\n  };\n\n  const volumeBindingModes = {\n    Immediate: t('public~Immediate'),\n    WaitForFirstConsumer: t('public~WaitForFirstConsumer'),\n  };\n\n  // Accepts a list of CSI provisioners and it checks if the\n  // provisioner is listed in CSIStorageTypes object\n  // if yes then return the provisioner with parameters that\n  // needs to be filled by user.\n  const csiProvisionerMap = (csiDrivers: K8sResourceKind[]) => {\n    const csiListedProvisioner: string[] = Object.keys(CSIStorageTypes.current);\n    csiDrivers.forEach((csiDriver: K8sResourceKind) => {\n      for (const provisioner of csiListedProvisioner) {\n        const csiDriverName = getName(csiDriver);\n        const hasProvisioner = csiDriverName.includes(provisioner);\n        if (hasProvisioner) {\n          const provisionerData = _.cloneDeep(CSIStorageTypes.current[provisioner]);\n          provisionerData.provisioner = csiDriverName;\n          storageTypes.current[csiDriverName] = provisionerData;\n          break;\n        }\n        const provisionerData = _.cloneDeep(defaultProvisionerObj);\n        provisionerData.title = csiDriverName;\n        provisionerData.provisioner = csiDriverName;\n        storageTypes.current[csiDriverName] = provisionerData;\n      }\n    });\n  };\n\n  const validateName = () => {\n    const updatedName = newStorageClass.name;\n    const nameUpdated = updatedName !== previousName.current;\n    const returnVal = {\n      error: null,\n      nameIsValid: true,\n    };\n\n    if (nameUpdated) {\n      if (updatedName.trim().length === 0) {\n        returnVal.error = t('public~Storage name is required');\n        returnVal.nameIsValid = false;\n      } else if (resources.current) {\n        _.each(resources.current.data, function (storageClass) {\n          if (storageClass.metadata.name === updatedName.toLowerCase()) {\n            returnVal.error = t('public~Storage name must be unique');\n            returnVal.nameIsValid = false;\n          }\n        });\n      }\n      previousName.current = updatedName;\n    }\n\n    return returnVal;\n  };\n\n  const validateParameters = () => {\n    const params = newStorageClass.parameters;\n    const allParamsValid = !_.some(params, ({ validationMsg }) => validationMsg !== null);\n    return allParamsValid;\n  };\n\n  const paramIsRequired = (paramKey, params = newStorageClass.parameters) => {\n    const requiredParam = _.get(\n      storageTypes.current[newStorageClass.type],\n      ['parameters', paramKey, 'required'],\n      null,\n    );\n    let isRequired = false;\n    if (requiredParam) {\n      isRequired = _.isFunction(requiredParam) ? requiredParam(params) : requiredParam;\n    }\n\n    return isRequired;\n  };\n\n  const allRequiredFieldsFilled = () => {\n    if (newStorageClass.name.trim().length === 0) {\n      return false;\n    }\n\n    const { type: storageType, parameters: userEnteredParams } = newStorageClass;\n\n    if (storageType === null) {\n      return false;\n    }\n\n    const allParamsForType = storageTypes.current[storageType]?.parameters;\n\n    const requiredKeys = _.keys(allParamsForType).filter((key) => paramIsRequired(key));\n    const allReqdFieldsEntered = _.every(requiredKeys, (key) => {\n      const value = _.get(userEnteredParams, [key, 'value']);\n      return !_.isEmpty(value);\n    });\n\n    return allReqdFieldsEntered;\n  };\n\n  const validateForm = () => {\n    // Clear error messages from previous validation attempts first\n    setError(null);\n    setFieldErrors({});\n\n    const errs: { [k: string]: any } = {};\n    let successful = true;\n\n    const nameValidation = validateName();\n    if (!nameValidation.nameIsValid) {\n      errs.nameValidationMsg = nameValidation.error;\n      successful = false;\n    }\n\n    if (newStorageClass.type === null) {\n      successful = false;\n    } else if (!validateParameters()) {\n      successful = false;\n    }\n\n    if (!allRequiredFieldsFilled()) {\n      successful = false;\n    }\n\n    setFieldErrors(errs);\n    setValidationSuccessful(successful);\n  };\n\n  const prevProps = React.useRef(props);\n\n  React.useEffect(() => {\n    const [extensions, extensionsLoaded] = props.extensions;\n    if (extensionsLoaded && !_.isEqual(props.extensions, prevProps.current.extensions)) {\n      getExtensions(extensions);\n    }\n    if (props !== prevProps.current && extensionsLoaded) {\n      storageTypes.current = _.cloneDeep(defaultStorageTypes.current);\n      const loaded = props.resources?.sc?.loaded;\n      const csiLoaded = props.resources?.csi?.loaded;\n      const scData = (props.resources?.sc?.data || []) as K8sResourceKind[];\n      const csiData = (props.resources?.csi?.data || []) as K8sResourceKind[];\n      // making sure csi provisioners are added to \"storageTypes\" (if loaded) before running \"validateForm\"\n      if (csiLoaded) {\n        csiProvisionerMap(csiData);\n      }\n      if (loaded) {\n        resources.current = {\n          data: scData,\n          loadError: props.resources?.sc?.loadError,\n          loaded,\n        };\n        validateForm();\n      }\n    }\n\n    prevProps.current = props;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  const updateNewStorage = (param: keyof Parameters, value, runValidation) => {\n    const newParams = {\n      ...newStorageClass,\n      [param]: value,\n    };\n\n    setNewStorageClass(newParams);\n    setNeedValidate(runValidation);\n  };\n\n  React.useEffect(() => {\n    if (needValidate) {\n      validateForm();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [newStorageClass]);\n\n  const setParameterHandler = (param: keyof Parameters, event, checkbox) => {\n    const newParams = { ...newStorageClass.parameters };\n    if (checkbox) {\n      newParams[param] = { value: event.target.checked } as Parameters[keyof Parameters];\n    } else {\n      if (event.target) {\n        newParams[param] = { value: event.target.value } as Parameters[keyof Parameters];\n      } else {\n        newParams[param] = { value: event } as Parameters[keyof Parameters];\n      }\n    }\n\n    _.forOwn(newParams, (value, key) => {\n      if (newParams.hasOwnProperty(key)) {\n        const validation = _.get(\n          storageTypes.current[newStorageClass.type],\n          ['parameters', key, 'validation'],\n          null,\n        );\n        newParams[key].validationMsg = validation ? validation(newParams) : null;\n      }\n    });\n\n    updateNewStorage('parameters', newParams, true);\n  };\n\n  const setStorageHandler = (param, value) => {\n    updateNewStorage(param, value, true);\n  };\n\n  const addDefaultParams = () => {\n    const defaultParams = storageTypes.current?.[newStorageClass?.type]?.parameters ?? {};\n    const hiddenParmas = {};\n    _.each(defaultParams, (values, param) => {\n      const isVisible = _.isFunction(values?.visible)\n        ? values.visible(defaultParams)\n        : values?.visible ?? true;\n      if (!isVisible && values.value) {\n        hiddenParmas[param] = values;\n      }\n    });\n    const value = { ...newStorageClass.parameters, ...hiddenParmas };\n    const newParams = {\n      ...newStorageClass,\n      parameters: value,\n    };\n\n    return newParams;\n  };\n\n  const getCustomParams = () => {\n    // Discard any row whose key is blank\n    const c = _.reject(customParams, (v) => _.isEmpty(v[NameValueEditorPair.Name]));\n\n    // Display error if duplicate keys are found\n    const keys = c.map((v) => v[NameValueEditorPair.Name]);\n    if (_.uniq(keys).length !== keys.length) {\n      setError(t('public~Duplicate keys found.'));\n      return;\n    }\n\n    // Convert any blank values to null\n    _.each(\n      c,\n      (v) =>\n        (v[NameValueEditorPair.Value] = _.isEmpty(v[NameValueEditorPair.Value])\n          ? null\n          : v[NameValueEditorPair.Value]),\n    );\n\n    return _.fromPairs(c);\n  };\n\n  const getFormParams = (newStorageClassBeforeCreation) => {\n    const type = newStorageClassBeforeCreation.type;\n    const dataParameters = _.pickBy(\n      _.mapValues(newStorageClassBeforeCreation.parameters, (value, key) => {\n        let finalValue = value.value;\n        if (storageTypes.current[type]?.parameters[key]?.format) {\n          finalValue = storageTypes.current[type].parameters[key].format(value.value);\n        }\n        return finalValue;\n      }),\n      (value) => value !== '',\n    );\n\n    return _.merge(dataParameters, getCustomParams());\n  };\n\n  const createStorageClass = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n\n    setLoading(true);\n    setError(null);\n\n    const newStorage = addDefaultParams();\n\n    const { name, description, type, reclaim, expansion, volumeBindingMode } = newStorage;\n    const dataParameters = getFormParams(newStorage);\n    const annotations = description ? { description } : {};\n    let data: StorageClass = {\n      metadata: {\n        name,\n        annotations,\n      },\n      provisioner: storageTypes.current[type].provisioner,\n      parameters: dataParameters,\n    };\n\n    if (reclaim) {\n      data.reclaimPolicy = reclaim;\n    }\n\n    if (volumeBindingMode) {\n      data.volumeBindingMode = volumeBindingMode;\n    }\n\n    const allowVolumeExpansion = storageTypes.current?.[type]?.allowVolumeExpansion;\n    const shouldAllowVolumeExpansion = _.isFunction(allowVolumeExpansion)\n      ? allowVolumeExpansion(newStorageClass.parameters)\n      : allowVolumeExpansion;\n    if (shouldAllowVolumeExpansion) {\n      data.allowVolumeExpansion = expansion;\n    }\n    const { mutator } = storageTypes.current[type];\n    if (_.isFunction(mutator)) {\n      data = mutator(data);\n    }\n\n    k8sCreate(StorageClassModel, data)\n      .then((resource) => {\n        setLoading(false);\n        navigate(resourceObjPath(resource, referenceFor(resource)));\n      })\n      .catch((err) => {\n        setLoading(false);\n        setError(err);\n      });\n  };\n\n  const getProvisionerElements = () => {\n    const parameters = storageTypes.current[newStorageClass.type]?.parameters;\n\n    const dynamicContent = _.map(parameters, (parameter, key) => {\n      const paramId = `storage-class-provisioner-${_.kebabCase(_.get(parameter, 'name', key))}`;\n      const validationMsg = _.get(parameter, 'validationMsg', null);\n      const isCheckbox = parameter.type === 'checkbox';\n      const selectedKey = ['parameters', key, 'value'];\n      const visibilityProperty = parameter?.visible ?? true;\n      const isVisible = _.isFunction(visibilityProperty)\n        ? visibilityProperty(newStorageClass.parameters)\n        : visibilityProperty;\n      if (!isVisible) {\n        return null;\n      }\n\n      if (parameter.Component) {\n        const { Component } = parameter;\n        return (\n          <Component\n            key={key}\n            parameterKey={key}\n            parameterValue={newStorageClass.parameters[key]?.value || ''}\n            onParamChange={setParameterHandler}\n          />\n        );\n      }\n\n      const children = parameter.values ? (\n        <>\n          <label\n            className={classNames('control-label', { 'co-required': paramIsRequired(key) })}\n            htmlFor={paramId}\n          >\n            {_.get(parameter, 'name', key)}\n          </label>\n          <Dropdown\n            title={parameter.hintText}\n            items={parameter.values}\n            dropDownClassName=\"dropdown--full-width\"\n            selectedKey={_.get(newStorageClass, selectedKey)}\n            onChange={(event) => setParameterHandler(key, event, false)}\n            id={paramId}\n            dataTest={paramId}\n          />\n          <span className=\"help-block\">{validationMsg ? validationMsg : null}</span>\n        </>\n      ) : (\n        <>\n          {isCheckbox ? (\n            <>\n              <div className=\"checkbox\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    className=\"create-storage-class-form__checkbox\"\n                    onChange={(event) => setParameterHandler(key, event, isCheckbox)}\n                    checked={_.get(newStorageClass, selectedKey, false)}\n                    id={`provisioner-settings-${key}-checkbox`}\n                    data-test={paramId}\n                  />\n                  {_.get(parameter, 'name', key)}\n                </label>\n              </div>\n            </>\n          ) : (\n            <>\n              <label\n                className={classNames('control-label', {\n                  'co-required': paramIsRequired(key),\n                })}\n                htmlFor={paramId}\n              >\n                {_.get(parameter, 'name', key)}\n              </label>\n              <input\n                type=\"text\"\n                className=\"pf-v5-c-form-control\"\n                value={_.get(newStorageClass, selectedKey, '')}\n                onChange={(event) => setParameterHandler(key, event, isCheckbox)}\n                id={paramId}\n                data-test={paramId}\n              />\n            </>\n          )}\n          <span className=\"help-block\">{validationMsg ? validationMsg : parameter.hintText}</span>\n        </>\n      );\n\n      return (\n        <div\n          key={key}\n          className={classNames('form-group', {\n            'has-error': _.get(newStorageClass.parameters, `${key}.validationMsg`, null),\n          })}\n        >\n          {children}\n        </div>\n      );\n    });\n    const documentationLink = storageTypes.current[newStorageClass.type]?.documentationLink;\n    return (\n      <>\n        {!_.isEmpty(parameters) && dynamicContent}\n\n        <div className=\"form-group\">\n          <label>{t('public~Additional parameters')}</label>\n          <p>\n            {t('public~Specific fields for the selected provisioner.')}\n            &nbsp;\n            {documentationLink && (\n              <ExternalLink\n                href={documentationLink()}\n                text={t('public~What should I enter here?')}\n              />\n            )}\n          </p>\n          <NameValueEditorComponent\n            nameValuePairs={customParams}\n            nameString={t('public~Parameter')}\n            nameParameter={t('public~parameter')}\n            valueString={t('public~Value')}\n            addString={t('public~Add Parameter')}\n            updateParentData={(c) => setCustomParams(c.nameValuePairs)}\n          />\n        </div>\n      </>\n    );\n  };\n\n  const autocompleteFilter = (text, item) => fuzzy(text, item);\n\n  const reclaimPolicyKey =\n    newStorageClass.reclaim === null ? reclaimPolicies.Delete : newStorageClass.reclaim;\n  const volumeBindingModeKey =\n    newStorageClass.volumeBindingMode || volumeBindingModes.WaitForFirstConsumer;\n  const allowVolumeExpansion = storageTypes.current?.[newStorageClass.type]?.allowVolumeExpansion;\n  const expansionFlag =\n    newStorageClass.type &&\n    (_.isFunction(allowVolumeExpansion)\n      ? allowVolumeExpansion(newStorageClass.parameters)\n      : allowVolumeExpansion);\n  const allowExpansion = expansionFlag ? newStorageClass.expansion : false;\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <PageHeading\n        title={t('public~StorageClass')}\n        link={\n          <Link to=\"/k8s/cluster/storageclasses/~new\" id=\"yaml-link\" data-test=\"yaml-link\" replace>\n            {t('public~Edit YAML')}\n          </Link>\n        }\n      />\n      <div className=\"co-m-pane__body co-m-pane__body--no-top-margin\">\n        <form data-test-id=\"storage-class-form\">\n          <div className={classNames('form-group', { 'has-error': fieldErrors.nameValidationMsg })}>\n            <label className=\"control-label co-required\" htmlFor=\"storage-class-name\">\n              {t('public~Name')}\n            </label>\n            <input\n              type=\"text\"\n              className=\"pf-v5-c-form-control\"\n              placeholder={newStorageClass.name}\n              id=\"storage-class-name\"\n              data-test=\"storage-class-name\"\n              onChange={(event) => setStorageHandler('name', event.target.value.trim())}\n              value={_.get(newStorageClass, 'name', '')}\n            />\n            <span className=\"help-block\">\n              {fieldErrors.nameValidationMsg ? fieldErrors.nameValidationMsg : null}\n            </span>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"storage-class-description\">{t('public~Description')}</label>\n            <input\n              type=\"text\"\n              className=\"pf-v5-c-form-control\"\n              id=\"storage-class-description\"\n              data-test=\"storage-class-description\"\n              onChange={(event) => setStorageHandler('description', event.target.value)}\n              value={_.get(newStorageClass, 'description', '')}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"co-required\" htmlFor=\"storage-class-reclaim-policy\">\n              {t('public~Reclaim policy')}\n            </label>\n            <Dropdown\n              title={t('public~Select reclaim policy')}\n              items={reclaimPolicies}\n              dropDownClassName=\"dropdown--full-width\"\n              selectedKey={reclaimPolicyKey}\n              onChange={(event) => setStorageHandler('reclaim', event)}\n              id=\"storage-class-reclaim-policy\"\n            />\n            <span className=\"help-block\">\n              {t(\n                'public~Determines what happens to persistent volumes when the associated persistent volume claim is deleted. Defaults to \"Delete\"',\n              )}\n            </span>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"co-required\" htmlFor=\"storage-class-volume-binding-mode\">\n              {t('public~Volume binding mode')}\n            </label>\n            <Dropdown\n              title={t('public~Select volume binding mode')}\n              items={volumeBindingModes}\n              dropDownClassName=\"dropdown--full-width\"\n              selectedKey={volumeBindingModeKey}\n              onChange={(event) => setStorageHandler('volumeBindingMode', event)}\n              id=\"storage-class-volume-binding-mode\"\n              dataTest=\"storage-class-volume-binding-mode\"\n            />\n            <span className=\"help-block\">\n              {t(\n                'public~Determines when persistent volume claims will be provisioned and bound. Defaults to \"WaitForFirstConsumer\"',\n              )}\n            </span>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"co-required\" htmlFor=\"storage-class-provisioner\">\n              {t('public~Provisioner')}\n            </label>\n            <Dropdown\n              title={t('public~Select Provisioner')}\n              autocompleteFilter={autocompleteFilter}\n              autocompletePlaceholder={t('public~Select Provisioner')}\n              items={_.mapValues(storageTypes.current, 'provisioner')}\n              dropDownClassName=\"dropdown--full-width\"\n              menuClassName=\"dropdown-menu--text-wrap\"\n              selectedKey={newStorageClass.type}\n              onChange={(event) => setStorageHandler('type', event)}\n              id=\"storage-class-provisioner\"\n              dataTest=\"storage-class-provisioner-dropdown\"\n            />\n            <span className=\"help-block\">\n              {t(\n                'public~Determines what volume plugin is used for provisioning PersistentVolumes.',\n              )}\n            </span>\n          </div>\n\n          <div className=\"co-form-subsection\">\n            {newStorageClass.type !== null ? getProvisionerElements() : null}\n          </div>\n\n          {expansionFlag && (\n            <div className=\"checkbox\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  className=\"create-storage-class-form__checkbox\"\n                  onChange={(event) => setStorageHandler('expansion', event.target.checked)}\n                  checked={allowExpansion}\n                />\n                {t('public~Allow PersistentVolumeClaims to be expanded')}\n              </label>\n            </div>\n          )}\n\n          <ButtonBar errorMessage={error ? error.message : ''} inProgress={loading}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button\n                id=\"save-changes\"\n                isDisabled={!validationSuccessful}\n                onClick={createStorageClass}\n                type=\"submit\"\n                variant=\"primary\"\n              >\n                {t('public~Create')}\n              </Button>\n              <Button\n                id=\"cancel\"\n                onClick={() => navigate('/k8s/cluster/storageclasses')}\n                type=\"button\"\n                variant=\"secondary\"\n              >\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\ntype StateProps = {\n  k8s: any;\n  onClose: () => void;\n};\n\ntype DispatchProps = {\n  watchK8sList: (id: string, query: object, kind: object) => void;\n  stopK8sWatch: (id: string) => void;\n};\n\nconst mapStateToProps = ({ k8s }, { onClose }): StateProps => ({\n  k8s,\n  onClose,\n});\n\nconst mapDispatchToProps = (): DispatchProps => ({\n  stopK8sWatch: k8sActions.stopK8sWatch,\n  watchK8sList: k8sActions.watchK8sList,\n});\n\nexport type StorageClassFormProps = StateProps &\n  DispatchProps & {\n    resources?: {\n      [key: string]: FirehoseResult;\n    };\n  } & {\n    extensions?: [ResolvedExtension<StorageClassProvisioner>[], boolean, any[]];\n  };\n\nexport type StorageClassData = {\n  name: string;\n  type: string;\n  description: string;\n  parameters: Parameters;\n  reclaim: string;\n  volumeBindingMode: string;\n  expansion: boolean;\n};\n\nexport type StorageClass = K8sResourceCommon & {\n  provisioner: string;\n  parameters: object;\n  reclaimPolicy?: string;\n  volumeBindingMode?: string;\n  allowVolumeExpansion?: boolean;\n};\n\nexport type StorageClassFormState = {\n  newStorageClass: StorageClassData;\n  customParams: string[][];\n  validationSuccessful: boolean;\n  loading: boolean;\n  error: any;\n  fieldErrors: { [k: string]: any };\n};\n\nexport type Resources = {\n  loaded: boolean;\n  data: any[];\n  loadError: string;\n};\n\nexport const ConnectedStorageClassForm = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)((props) => {\n  const extensions = useResolvedExtensions<StorageClassProvisioner>(isStorageClassProvisioner);\n  return <StorageClassFormInner extensions={extensions} {...props} />;\n});\n\nexport const StorageClassForm = (props) => {\n  const resources = [\n    { kind: StorageClassModel.kind, isList: true, prop: 'sc' },\n    { kind: referenceForModel(CSIDriverModel), isList: true, prop: 'csi' },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ConnectedStorageClassForm {...props} />\n    </Firehose>\n  );\n};\n\nConnectedStorageClassForm.displayName = 'StorageClassForm';\n"],"sourceRoot":""}