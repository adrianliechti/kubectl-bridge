{"version":3,"sources":["webpack:///./packages/rhoas-plugin/src/components/access-services/ServicesToken.tsx","webpack:///./packages/rhoas-plugin/src/catalog/catalog-content.ts","webpack:///./packages/rhoas-plugin/src/catalog/index.ts","webpack:///./packages/rhoas-plugin/src/utils/conditionHandler.ts","webpack:///./packages/rhoas-plugin/src/utils/resourceCreators.ts","webpack:///./packages/rhoas-plugin/src/catalog/const.ts","webpack:///./packages/rhoas-plugin/src/catalog/providers/useRhoasCatalog.tsx"],"names":["ServiceToken","namespace","sendDisabled","setSendDisabled","apiTokenValue","setApiTokenValue","errorMessage","setErrorMessage","isLoading","setIsLoading","t","component","p","ns","href","rel","target","fieldId","label","isRequired","value","onChange","_event","type","name","inProgress","className","key","variant","onClick","error","isDisabled","length","RHOASServices","serviceName","uid","description","provider","tags","icon","ctaLabel","details","getCondition","request","status","conditions","find","condition","getFinishedCondition","isResourceStatusSuccessful","isAccessTokenSecretValid","createCloudServicesRequestIfNeeded","currentNamespace","currentRequest","console","info","path","op","Date","toISOString","mkRequest","apiVersion","apiGroup","kind","metadata","spec","accessTokenSecretName","createCloudServicesRequest","createSecretIfNeeded","currentSecret","data","stringData","secret","createServiceAccountIfNeeded","rhoasServiceAccount","patchServiceAccountRequest","serviceAcct","serviceAccountName","serviceAccountDescription","serviceAccountSecretName","createManagedServiceAccount","resource","errorToLog","message","Error","createKafkaConnection","kafkaId","kafkaName","kafkaConnection","labels","credentials","createdConnection","deleteKafkaConnection","listOfCurrentKafkaConnectionsById","kafkaConnections","items","map","kafka","Promise","resolve","CATALOG_TYPE","serviceAccount","loaded","errorMsg","isList","namespaced","loadedOrError","isServiceAccountValid","cloudServicesCardDetailsDescription","url","cta","descriptions","content","token","color","direction","default","tokenStatusFooter","undefined"],"mappings":"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","file":"rhoas-plugin/code-refs/catalog-chunk-0b8a1dbeb8d96dcb1708.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  TextInput,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ButtonBar } from '@console/internal/components/utils';\nimport { APITokenLengthMinimum } from '../../const';\nimport { createServiceAccountIfNeeded, createSecretIfNeeded } from '../../utils/resourceCreators';\n\ntype ServiceTokenProps = {\n  namespace: string;\n};\n\nexport const ServiceToken: React.FC<ServiceTokenProps> = ({ namespace }: ServiceTokenProps) => {\n  const [sendDisabled, setSendDisabled] = React.useState(false);\n  const [apiTokenValue, setApiTokenValue] = React.useState<string>('');\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const { t } = useTranslation();\n\n  const onCreate = async () => {\n    setIsLoading(true);\n    setSendDisabled(true);\n    try {\n      await createSecretIfNeeded(namespace, apiTokenValue);\n      setIsLoading(false);\n    } catch (error) {\n      setErrorMessage(t('rhoas-plugin~Problem with creating secret', { error }));\n      setSendDisabled(true);\n      return;\n    }\n    try {\n      await createServiceAccountIfNeeded(namespace);\n    } catch (error) {\n      setErrorMessage(t('rhoas-plugin~Cannot create service account', { error }));\n    }\n    setSendDisabled(false);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <Trans t={t} ns=\"rhoas-plugin\">\n            Enter your API token from{' '}\n            <a\n              href=\"https://console.redhat.com/openshift/token\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              https://console.redhat.com\n            </a>\n            , so we can check what services you have access to based on your subscription.\n          </Trans>\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup fieldId=\"api-token-value\" label={t('rhoas-plugin~API Token')} isRequired>\n          <TextInput\n            value={apiTokenValue}\n            onChange={(_event, value) => setApiTokenValue(value)}\n            type=\"password\"\n            name=\"apitoken\"\n            aria-label={t('rhoas-plugin~API Token')}\n          />\n        </FormGroup>\n        <ButtonBar errorMessage={errorMessage} inProgress={isLoading}>\n          <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__actions--left\">\n            <Button\n              key=\"confirm\"\n              variant=\"primary\"\n              onClick={onCreate}\n              isDisabled={apiTokenValue.length < APITokenLengthMinimum ? true : sendDisabled}\n            >\n              {t('rhoas-plugin~Connect')}\n            </Button>\n            <Button\n              key=\"reset\"\n              variant=\"link\"\n              onClick={() => {\n                setApiTokenValue('');\n                setErrorMessage('');\n              }}\n            >\n              {t('rhoas-plugin~Reset')}\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </Form>\n    </>\n  );\n};\n","import { kafkaIcon } from '../const';\n\nexport const RHOASServices = [\n  {\n    serviceName: 'kafka',\n    name: 'Red Hat OpenShift Streams for Apache Kafka',\n    type: 'managedservices',\n    uid: 'streams-1615213269575',\n    description:\n      'Red Hat OpenShift Streams for Apache Kafka is a managed cloud service that provides a streamlined developer experience for building, deploying, and scaling real-time applications in hybrid-cloud environments. The combination of seamless operations across distributed microservices, large data transfer volumes, and managed operations allows teams to focus on core competencies, accelerate time to value and reduce operational cost.',\n    provider: 'Red Hat, Inc.',\n    tags: ['kafka', 'service', 'rhosak', 'rhoas', 'cloud'],\n    icon: kafkaIcon,\n    ctaLabel: 'Connect',\n    details: `**Red Hat OpenShift Streams for Apache Kafka** is a managed cloud service that provides a streamlined developer experience for building, deploying, and scaling real-time applications in hybrid-cloud environments. The combination of seamless operations across distributed microservices, large data transfer volumes, and managed operations allows teams to focus on core competencies, accelerate time to value and reduce operational cost.\n\n**Red Hat OpenShift Streams for Apache Kafka** makes it easy to create, discover, and connect to real-time data streams no matter where they are deployed. Streams are a key component for delivering real-time experiences and connecting loosely-coupled microservices.\n\n### Red Hat OpenShift Streams for Apache Kafka features\n\n**Delivered as a service**, managed by Red Hat SRE - Red Hat‘s specialized 24x7 global SRE team fully manages the Kafka infrastructure and daily operations, including monitoring, logging, upgrades and patching, to proactively address issues and quickly solve problems\n\n**Streamlined developer experience** - a developer-first, consistent experience that shields the user from administrative tasks, supports self-service, and easily connects to other OpenShift workloads.\n\n**Real-time, streaming data broker** - service that can run in any cloud to support large data transfer volumes between distributed microservices for enterprise-scale applications.\n\n**Schema registry** - Red Hat OpenShift Service Registry is included, making it easy for development teams to publish, communicate and discover any streaming data topics.\n\n**Connectors** - the Kafka brokers can securely connect to distributed services, making it easy to consume and share streaming data between applications and enterprise systems, cloud provider services, and SaaS applications.\n`,\n  },\n];\n","export { CATALOG_TYPE } from './const';\n\nexport { default as rhoasProvider } from './providers/useRhoasCatalog';\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StatusCondition } from './rhoas-types';\n\nexport const getCondition = (request: K8sResourceKind, name: string) => {\n  if (request?.status?.conditions) {\n    return request.status.conditions.find((condition: StatusCondition) => condition.type === name);\n  }\n  return undefined;\n};\n\nexport const getFinishedCondition = (request: K8sResourceKind) => getCondition(request, 'Finished');\n\nexport const isResourceStatusSuccessful = (request: K8sResourceKind) => {\n  const condition = getCondition(request, 'Finished');\n  return condition?.status === 'True';\n};\n\nexport const isAccessTokenSecretValid = (request: K8sResourceKind) =>\n  getCondition(request, 'AcccesTokenSecretValid')?.status === 'True';\n","import { SecretModel } from '@console/internal/models';\nimport {\n  k8sWaitForUpdate,\n  k8sCreate,\n  k8sGet,\n  k8sPatch,\n  k8sUpdate,\n  k8sKillByName,\n} from '@console/internal/module/k8s';\nimport { getRandomChars } from '@console/shared';\nimport {\n  AccessTokenSecretName,\n  ServiceAccountCRName,\n  ServiceAccountSecretName,\n  ServicesRequestCRName,\n} from '../const';\nimport {\n  KafkaConnectionModel,\n  CloudServiceAccountRequest,\n  CloudServicesRequestModel,\n} from '../models/rhoas';\nimport { getFinishedCondition, isResourceStatusSuccessful } from './conditionHandler';\n\n/**\n * Create service account for purpose of supplying connection credentials\n *\n * @param currentNamespace\n */\nexport const createManagedServiceAccount = async (currentNamespace: string) => {\n  const serviceAcct = {\n    apiVersion: `${CloudServicesRequestModel.apiGroup}/${CloudServicesRequestModel.apiVersion}`,\n    kind: CloudServiceAccountRequest.kind,\n    metadata: {\n      name: ServiceAccountCRName,\n      namespace: currentNamespace,\n    },\n    spec: {\n      accessTokenSecretName: AccessTokenSecretName,\n      serviceAccountName: `rhoas-operator-${getRandomChars(4)}`,\n      serviceAccountDescription: 'Created by rhoas operator',\n      serviceAccountSecretName: ServiceAccountSecretName,\n    },\n  };\n\n  return k8sCreate(CloudServiceAccountRequest, serviceAcct);\n};\n\n/**\n * Create request to fetch all kafkas from upstream\n */\nexport const createCloudServicesRequest = async (currentNamespace: string) => {\n  const mkRequest = {\n    apiVersion: `${CloudServicesRequestModel.apiGroup}/${CloudServicesRequestModel.apiVersion}`,\n    kind: CloudServicesRequestModel.kind,\n    metadata: {\n      name: ServicesRequestCRName,\n      namespace: currentNamespace,\n    },\n    spec: {\n      accessTokenSecretName: AccessTokenSecretName,\n    },\n  };\n\n  return k8sCreate(CloudServicesRequestModel, mkRequest);\n};\n\nexport const patchServiceAccountRequest = async (request: any) => {\n  const path = '/spec/forceRefresh';\n  return k8sPatch(CloudServiceAccountRequest, request, [\n    {\n      path,\n      op: 'add',\n      value: new Date().toISOString(),\n    },\n  ]);\n};\n\nexport const patchCloudServicesRequest = async (request: any) => {\n  const path = '/spec/forceRefresh';\n\n  return k8sPatch(CloudServicesRequestModel, request, [\n    {\n      path,\n      op: 'add',\n      value: new Date().toISOString(),\n    },\n  ]);\n};\n\nexport const createCloudServicesRequestIfNeeded = async (currentNamespace) => {\n  let currentRequest;\n  try {\n    currentRequest = await k8sGet(\n      CloudServicesRequestModel,\n      ServicesRequestCRName,\n      currentNamespace,\n    );\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.info('rhoas: CloudServicesRequest already exist');\n  }\n\n  if (currentRequest) {\n    return patchCloudServicesRequest(currentRequest);\n  }\n  return createCloudServicesRequest(currentNamespace);\n};\n\nexport const createSecretIfNeeded = async (currentNamespace: string, apiTokenValue: string) => {\n  let currentSecret;\n  try {\n    currentSecret = await k8sGet(SecretModel, AccessTokenSecretName, currentNamespace);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.info(\"rhoas: auth secret doesn't exist\");\n  }\n\n  if (currentSecret) {\n    delete currentSecret.data;\n    currentSecret.stringData = { value: apiTokenValue };\n    return k8sUpdate(SecretModel, currentSecret);\n  }\n  const secret = {\n    apiVersion: SecretModel.apiVersion,\n    kind: SecretModel.kind,\n    metadata: {\n      name: AccessTokenSecretName,\n      namespace: currentNamespace,\n    },\n    stringData: {\n      value: apiTokenValue,\n    },\n  };\n  return k8sCreate(SecretModel, secret);\n};\n\nexport const createServiceAccountIfNeeded = async (currentNamespace) => {\n  let rhoasServiceAccount;\n  try {\n    rhoasServiceAccount = await k8sGet(\n      CloudServiceAccountRequest,\n      ServiceAccountCRName,\n      currentNamespace,\n    );\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.info(\"rhoas: ServiceAccount doesn't exist. Creating new ServiceAccount\");\n  }\n  let request;\n  if (rhoasServiceAccount) {\n    request = await patchServiceAccountRequest(rhoasServiceAccount);\n  } else {\n    request = await createManagedServiceAccount(currentNamespace);\n  }\n\n  await k8sWaitForUpdate(\n    CloudServiceAccountRequest,\n    request,\n    (resource) => {\n      const condition = getFinishedCondition(resource);\n\n      if (condition) {\n        if (isResourceStatusSuccessful(resource)) {\n          return true;\n        }\n        const errorToLog = condition.message;\n        throw new Error(errorToLog);\n      }\n      return false;\n    },\n    50000,\n  );\n};\n\nexport const createKafkaConnection = async (\n  kafkaId: string,\n  kafkaName: string,\n  currentNamespace: string,\n) => {\n  const kafkaConnection = {\n    apiVersion: `${CloudServicesRequestModel.apiGroup}/${CloudServicesRequestModel.apiVersion}`,\n    kind: KafkaConnectionModel.kind,\n    metadata: {\n      name: kafkaName,\n      namespace: currentNamespace,\n      labels: {\n        'app.kubernetes.io/component': 'external-service',\n      },\n    },\n    spec: {\n      kafkaId,\n      accessTokenSecretName: AccessTokenSecretName,\n      credentials: {\n        serviceAccountSecretName: ServiceAccountSecretName,\n      },\n    },\n  };\n\n  const createdConnection = await k8sCreate(KafkaConnectionModel, kafkaConnection);\n  return k8sWaitForUpdate(\n    KafkaConnectionModel,\n    createdConnection,\n    (resource) => {\n      const condition = getFinishedCondition(resource);\n\n      if (condition) {\n        if (condition.status === 'True') {\n          return true;\n        }\n        throw new Error(condition.message);\n      }\n      return false;\n    },\n    20000,\n  );\n};\n\nexport const deleteKafkaConnection = (kafkaName: string, currentNamespace: string) =>\n  k8sKillByName(KafkaConnectionModel, kafkaName, currentNamespace);\n\nexport const listOfCurrentKafkaConnectionsById = async (currentNamespace: string) => {\n  const kafkaConnections = await k8sGet(KafkaConnectionModel, null, currentNamespace);\n  if (kafkaConnections) {\n    return kafkaConnections.items.map((kafka) => kafka.spec.kafkaId);\n  }\n\n  return Promise.resolve([]);\n};\n","export const CATALOG_TYPE = 'managedservices';\n","import * as React from 'react';\nimport { Flex, FlexItem, Divider, Label, Text, TextVariants } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport { useTranslation } from 'react-i18next';\nimport { ExtensionHook, CatalogItem } from '@console/dynamic-plugin-sdk';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceToken } from '../../components/access-services/ServicesToken';\nimport { ServiceAccountCRName, operatorIcon } from '../../const';\nimport { CloudServiceAccountRequest } from '../../models';\nimport { isResourceStatusSuccessful } from '../../utils/conditionHandler';\nimport { RHOASServices } from '../catalog-content';\nimport { CATALOG_TYPE } from '../const';\n\nconst useRhoasCatalog: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n\n  const [serviceAccount, loaded, errorMsg] = useK8sWatchResource({\n    kind: referenceForModel(CloudServiceAccountRequest),\n    isList: false,\n    name: ServiceAccountCRName,\n    namespace,\n    namespaced: true,\n  });\n\n  const loadedOrError = loaded || errorMsg;\n  const isServiceAccountValid = isResourceStatusSuccessful(serviceAccount as K8sResourceKind);\n  const services = React.useMemo(() => {\n    if (!loaded && !errorMsg) return [];\n\n    const tokenStatusFooter = () => {\n      let token;\n      if (serviceAccount === null || !isServiceAccountValid) {\n        token = (\n          <Label variant=\"outline\" color=\"orange\" icon={<LockIcon />}>\n            {t('rhoas-plugin~Unlock with token')}\n          </Label>\n        );\n      } else {\n        token = t('rhoas-plugin~Unlocked');\n      }\n      return (\n        <Flex direction={{ default: 'column' }} className=\"catalog-tile-pf-body\">\n          <FlexItem className=\"catalog-tile-pf-description\">\n            {t(\n              'rhoas-plugin~Red Hat OpenShift Application Services include services like Red Hat OpenShift Streams for Apache Kafka',\n            )}\n          </FlexItem>\n          <FlexItem>{token}</FlexItem>\n        </Flex>\n      );\n    };\n\n    const cloudServicesCardDetailsDescription = [\n      {\n        label: t('rhoas-plugin~Unlock with API token'),\n        value: <ServiceToken namespace={namespace} />,\n      },\n      {\n        value: <Divider component=\"li\" />,\n      },\n      {\n        label: 'Description',\n        value: (\n          <Text component={TextVariants.p}>\n            {t('rhoas-plugin~Cloud Services Card Description')}\n          </Text>\n        ),\n      },\n    ];\n\n    if (isServiceAccountValid) {\n      const rhoasCard: CatalogItem[] = RHOASServices.map(\n        ({\n          serviceName,\n          name,\n          type,\n          uid,\n          description,\n          provider,\n          tags,\n          icon,\n          ctaLabel,\n          details,\n        }) => {\n          return {\n            name,\n            type,\n            uid,\n            description,\n            provider,\n            tags,\n            icon: {\n              url: icon,\n            },\n            cta: {\n              label: ctaLabel,\n              href: `/rhoas/ns/${namespace}/${serviceName}`,\n            },\n            details: {\n              descriptions: [{ value: <SyncMarkdownView content={details} /> }],\n            },\n          };\n        },\n      );\n      return rhoasCard;\n    }\n\n    const cloudServicesCard: CatalogItem[] = [\n      {\n        name: t('rhoas-plugin~Red Hat OpenShift Application Services'),\n        type: CATALOG_TYPE,\n        uid: 'services-1615213269575',\n        description: tokenStatusFooter(),\n        provider: 'Red Hat, Inc.',\n        tags: ['kafka', 'cloud', 'service', 'managed', 'rhoas', 'rhosak'],\n        icon: {\n          url: operatorIcon,\n        },\n        details: {\n          descriptions: cloudServicesCardDetailsDescription,\n        },\n      },\n    ];\n    return cloudServicesCard;\n  }, [loaded, errorMsg, t, namespace, isServiceAccountValid, serviceAccount]);\n\n  return [services, loadedOrError, undefined];\n};\n\nexport default useRhoasCatalog;\n"],"sourceRoot":""}