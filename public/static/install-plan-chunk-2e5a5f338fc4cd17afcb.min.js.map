{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager/src/components/install-plan.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-preview-modal.tsx"],"names":["tableColumnClasses","columnClass","componentsTableColumnClasses","InstallPlanTableRow","obj","t","className","kind","namespace","metadata","name","phase","status","spec","clusterServiceVersionNames","map","csvName","key","title","ownerReferences","filter","ref","uid","actions","factory","common","resource","EmptyMsg","InstallPlansList","props","Header","sortField","transforms","Row","InstallPlansPage","params","ns","resources","namespaced","prop","flatten","installPlan","showTitle","ListComponent","updateUser","isOpenShift","user","username","NeedInstallPlanPermissions","OPENSHIFT","setUsername","apiGroup","variant","isInline","InstallPlanDetails","needsApproval","approval","Manual","approved","canPatchInstallPlans","group","plural","verb","to","text","showAnnotations","plan","accumulator","sourceName","sourceNamespace","add","toJS","getCatalogSources","conditions","InstallPlanPreview","hideApprovalBlock","setNeedsApproval","subscription","find","stepsByCSV","reduce","acc","step","update","resolving","steps","concat","toArray","length","isDisabled","onClick","op","path","value","then","catch","error","toString","push","includes","type","stepResource","InstallPlanDetailsPage","pages","details","editYaml","href","nameKey","component","menuActions","getExtensionsActionsForKind","displayName","cancel","linkTo","JSON","parse","manifest","inProgress","installPlanPreviewModal"],"mappings":"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","file":"install-plan-chunk-2e5a5f338fc4cd17afcb.min.js","sourcesContent":["import * as React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Map as ImmutableMap, Set as ImmutableSet, fromJS } from 'immutable';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { getUser } from '@console/dynamic-plugin-sdk';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  MultiListPage,\n  DetailsPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  SectionHeading,\n  ConsoleEmptyState,\n  ResourceLink,\n  ResourceKebab,\n  Kebab,\n  ResourceIcon,\n  navFactory,\n  ResourceSummary,\n  history,\n  HintBlock,\n  useAccessReview,\n} from '@console/internal/components/utils';\nimport { authSvc } from '@console/internal/module/auth';\nimport {\n  apiGroupForReference,\n  referenceFor,\n  referenceForModel,\n  referenceForOwnerRef,\n  k8sPatch,\n  apiVersionForReference,\n  UserInfo,\n} from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { FLAGS, GreenCheckCircleIcon, Status, useFlag } from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n  CatalogSourceModel,\n} from '../models';\nimport { InstallPlanKind, InstallPlanApproval, Step } from '../types';\nimport { installPlanPreviewModal } from './modals/installplan-preview-modal';\nimport { requireOperatorGroup } from './operator-group';\nimport { InstallPlanReview, referenceForStepResource } from './index';\n\nconst tableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl', 'pf-v5-c-table__td'),\n  Kebab.columnClass,\n];\n\nconst componentsTableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n];\n\nexport const InstallPlanTableRow: React.FC<RowFunctionArgs> = ({ obj }) => {\n  const { t } = useTranslation();\n  const phaseFor = (phase: InstallPlanKind['status']['phase']) => <Status status={phase} />;\n  return (\n    <>\n      {/* Name */}\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(InstallPlanModel)}\n          namespace={obj.metadata.namespace}\n          name={obj.metadata.name}\n        />\n      </TableData>\n\n      {/* Namespace */}\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n\n      {/* Status */}\n      <TableData className={tableColumnClasses[2]}>\n        {phaseFor(obj.status?.phase ?? 'Unknown')}\n      </TableData>\n\n      {/* Components */}\n      <TableData className={tableColumnClasses[3]}>\n        <ul className=\"pf-v5-c-list pf-m-plain\">\n          {obj.spec.clusterServiceVersionNames.map((csvName) => (\n            <li key={csvName}>\n              {obj.status?.phase === 'Complete' ? (\n                <ResourceLink\n                  kind={referenceForModel(ClusterServiceVersionModel)}\n                  name={csvName}\n                  namespace={obj.metadata.namespace}\n                  title={csvName}\n                />\n              ) : (\n                <>\n                  <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                  {csvName}\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </TableData>\n\n      {/* Subscriptions */}\n      <TableData className={tableColumnClasses[4]}>\n        {(obj.metadata.ownerReferences || [])\n          .filter((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel))\n          .map((ref) => (\n            <ul key={ref.uid} className=\"pf-v5-c-list pf-m-plain\">\n              <li>\n                <ResourceLink\n                  kind={referenceForModel(SubscriptionModel)}\n                  name={ref.name}\n                  namespace={obj.metadata.namespace}\n                  title={ref.uid}\n                />\n              </li>\n            </ul>\n          )) || <span className=\"text-muted\">{t('olm~None')}</span>}\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={Kebab.factory.common}\n          kind={referenceForModel(InstallPlanModel)}\n          resource={obj}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst EmptyMsg: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('olm~No InstallPlans found')}>\n      {t('olm~InstallPlans are created automatically by subscriptions or manually using the CLI.')}\n    </ConsoleEmptyState>\n  );\n};\n\nexport const InstallPlansList = requireOperatorGroup((props: InstallPlansListProps) => {\n  const { t } = useTranslation();\n  const InstallPlanTableHeader = () => {\n    return [\n      {\n        title: t('olm~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('olm~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('olm~Status'),\n        sortField: 'status.phase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('olm~Components'),\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('olm~Subscriptions'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~InstallPlans')}\n      Header={InstallPlanTableHeader}\n      Row={InstallPlanTableRow}\n      EmptyMsg={EmptyMsg}\n    />\n  );\n});\n\nconst getCatalogSources = (\n  installPlan: InstallPlanKind,\n): { sourceName: string; sourceNamespace: string }[] =>\n  _.reduce(\n    installPlan?.status?.plan || [],\n    (accumulator, { resource: { sourceName, sourceNamespace } }) =>\n      accumulator.add(fromJS({ sourceName, sourceNamespace })),\n    ImmutableSet(),\n  ).toJS();\n\nexport const InstallPlansPage: React.FC<InstallPlansPageProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const namespace = props.namespace || params?.ns;\n  return (\n    <MultiListPage\n      {...props}\n      namespace={namespace}\n      resources={[\n        {\n          kind: referenceForModel(InstallPlanModel),\n          namespace,\n          namespaced: true,\n          prop: 'installPlan',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.installPlan, 'data', [])}\n      title={t('olm~InstallPlans')}\n      showTitle={false}\n      ListComponent={InstallPlansList}\n    />\n  );\n};\n\nconst updateUser = (isOpenShift: boolean, user: UserInfo): string => {\n  if (!isOpenShift) {\n    return authSvc.name();\n  }\n  return user?.username;\n};\n\nexport const NeedInstallPlanPermissions: React.FC<NeedInstallPlanPermissionsProps> = ({\n  installPlan,\n}) => {\n  const isOpenShift = useFlag(FLAGS.OPENSHIFT);\n  const user: UserInfo = useSelector<RootState, object>(getUser);\n\n  const [username, setUsername] = React.useState(updateUser(isOpenShift, user));\n\n  React.useEffect(() => {\n    setUsername(updateUser(isOpenShift, user));\n  }, [isOpenShift, user]);\n\n  const { t } = useTranslation();\n\n  const apiGroup = apiGroupForReference(referenceFor(installPlan));\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title={t('olm~Missing sufficient privileges for manual InstallPlan approval')}\n    >\n      {username\n        ? t(\n            'olm~User \"{{user}}\" does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { user: username, apiGroup, namespace: installPlan.metadata.namespace },\n          )\n        : t(\n            'olm~User does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { apiGroup, namespace: installPlan.metadata.namespace },\n          )}\n    </Alert>\n  );\n};\n\nexport const InstallPlanDetails: React.FC<InstallPlanDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const needsApproval =\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false;\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return (\n    <>\n      {needsApproval && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <p>\n              {t(\n                'olm~Inspect the requirements for the components specified in this InstallPlan before approving.',\n              )}\n            </p>\n            <Link\n              to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                obj.metadata.name\n              }/components`}\n            >\n              <Button variant=\"primary\">{t('olm~Preview InstallPlan')}</Button>\n            </Link>\n          </HintBlock>\n        </div>\n      )}\n      {needsApproval && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~InstallPlan details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('olm~Status')}</dt>\n                <dd>\n                  <Status status={obj.status?.phase ?? t('olm~Unknown')} />\n                </dd>\n                <dt>{t('olm~Components')}</dt>\n                {(obj.spec.clusterServiceVersionNames || []).map((csvName) => (\n                  <dd key={csvName}>\n                    {obj.status.phase === 'Complete' ? (\n                      <ResourceLink\n                        kind={referenceForModel(ClusterServiceVersionModel)}\n                        name={csvName}\n                        namespace={obj.metadata.namespace}\n                        title={csvName}\n                      />\n                    ) : (\n                      <>\n                        <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                        {csvName}\n                      </>\n                    )}\n                  </dd>\n                ))}\n                <dt>{t('olm~CatalogSources')}</dt>\n                {getCatalogSources(obj).map(({ sourceName, sourceNamespace }) => (\n                  <dd key={`${sourceNamespace}-${sourceName}`}>\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={sourceName}\n                      namespace={sourceNamespace}\n                      title={sourceName}\n                    />\n                  </dd>\n                ))}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions conditions={obj.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const InstallPlanPreview: React.FC<InstallPlanPreviewProps> = ({\n  obj,\n  hideApprovalBlock,\n}) => {\n  const { t } = useTranslation();\n  const [needsApproval, setNeedsApproval] = React.useState(\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false,\n  );\n  const subscription = obj?.metadata?.ownerReferences.find(\n    (ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel),\n  );\n\n  const plan = obj?.status?.plan || [];\n  const stepsByCSV = plan\n    .reduce(\n      (acc, step) => acc.update(step.resolving, [], (steps) => steps.concat([step])),\n      ImmutableMap<string, Step[]>(),\n    )\n    .toArray();\n\n  const approve = () =>\n    k8sPatch(InstallPlanModel, obj, [{ op: 'replace', path: '/spec/approved', value: true }])\n      .then(() => setNeedsApproval(false))\n      .catch((error) => errorModal({ error: error.toString() }));\n\n  const stepStatus = (status: Step['status']) => (\n    <>\n      {status === 'Present' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status === 'Created' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status}\n    </>\n  );\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return plan.length > 0 ? (\n    <>\n      {needsApproval && !hideApprovalBlock && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      {needsApproval && !hideApprovalBlock && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <InstallPlanReview installPlan={obj} />\n            <div className=\"pf-v5-c-form\">\n              <div className=\"pf-v5-c-form__actions\">\n                <Button variant=\"primary\" isDisabled={!needsApproval} onClick={() => approve()}>\n                  {needsApproval ? t('olm~Approve') : t('olm~Approved')}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  isDisabled={false}\n                  onClick={() =>\n                    history.push(\n                      `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(SubscriptionModel)}/${\n                        subscription.name\n                      }?showDelete=true`,\n                    )\n                  }\n                >\n                  {t('olm~Deny')}\n                </Button>\n              </div>\n            </div>\n          </HintBlock>\n        </div>\n      )}\n      {stepsByCSV.map((steps) => (\n        <div key={steps[0].resolving} className=\"co-m-pane__body\">\n          <SectionHeading text={steps[0].resolving} />\n          <div className=\"co-table-container\">\n            <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n              <thead className=\"pf-v5-c-table__thead\">\n                <tr className=\"pf-v5-c-table__tr\">\n                  <th className={componentsTableColumnClasses[0]}>{t('olm~Name')}</th>\n                  <th className={componentsTableColumnClasses[1]}>{t('olm~Kind')}</th>\n                  <th className={componentsTableColumnClasses[2]}>{t('olm~Status')}</th>\n                  <th className={componentsTableColumnClasses[3]}>{t('olm~API version')}</th>\n                </tr>\n              </thead>\n              <tbody className=\"pf-v5-c-table__tbody\">\n                {steps.map((step) => (\n                  <tr\n                    key={`${referenceForStepResource(step.resource)}-${step.resource.name}`}\n                    className=\"pf-v5-c-table__tr\"\n                  >\n                    <td className={componentsTableColumnClasses[0]}>\n                      {['Present', 'Created'].includes(step.status) ? (\n                        <ResourceLink\n                          kind={referenceForStepResource(step.resource)}\n                          namespace={obj.metadata.namespace}\n                          name={step.resource.name}\n                          title={step.resource.name}\n                        />\n                      ) : (\n                        <>\n                          <ResourceIcon kind={referenceForStepResource(step.resource)} />\n                          <Button\n                            type=\"button\"\n                            onClick={() => installPlanPreviewModal({ stepResource: step.resource })}\n                            variant=\"link\"\n                          >\n                            {step.resource.name}\n                          </Button>\n                        </>\n                      )}\n                    </td>\n                    <td className={componentsTableColumnClasses[1]}>{step.resource.kind}</td>\n                    <td className={componentsTableColumnClasses[2]}>{stepStatus(step.status)}</td>\n                    <td className={componentsTableColumnClasses[3]}>\n                      {apiVersionForReference(referenceForStepResource(step.resource))}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ))}\n    </>\n  ) : (\n    <div className=\"co-m-pane__body\">\n      <ConsoleEmptyState title={t('olm~No components resolved')}>\n        {t('olm~This InstallPlan has not been fully resolved yet.')}\n      </ConsoleEmptyState>\n    </div>\n  );\n};\n\nexport const InstallPlanDetailsPage: React.FC = (props) => {\n  const params = useParams();\n  return (\n    <DetailsPage\n      {...props}\n      namespace={params.ns}\n      kind={referenceForModel(InstallPlanModel)}\n      name={params.name}\n      pages={[\n        navFactory.details(InstallPlanDetails),\n        navFactory.editYaml(),\n        // t('olm~Components')\n        { href: 'components', nameKey: 'olm~Components', component: InstallPlanPreview },\n      ]}\n      menuActions={[\n        ...Kebab.getExtensionsActionsForKind(InstallPlanModel),\n        ...Kebab.factory.common,\n      ]}\n    />\n  );\n};\n\nexport type InstallPlansListProps = {};\n\nexport type InstallPlansPageProps = {\n  namespace?: string;\n};\n\nexport type InstallPlanDetailsProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanPreviewProps = {\n  obj: InstallPlanKind;\n  hideApprovalBlock?: boolean;\n};\n\nexport type InstallPlanPreviewState = {\n  needsApproval: boolean;\n  error?: string;\n};\n\nexport type NeedInstallPlanPermissionsProps = {\n  installPlan: InstallPlanKind;\n  user?: UserInfo;\n};\n\nInstallPlansPage.displayName = 'InstallPlansPage';\n","import * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { safeDump } from 'js-yaml';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalFooter,\n} from '@console/internal/components/factory/modal';\nimport { ResourceLink, CopyToClipboard } from '@console/internal/components/utils';\nimport { StepResource } from '../../types';\nimport { referenceForStepResource } from '../index';\n\nconst InstallPlanPreview: React.FC<InstallPlanPreviewModalProps> = ({ cancel, stepResource }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>\n        {t('olm~InstallPlan Preview')}{' '}\n        <ResourceLink\n          linkTo={false}\n          name={stepResource.name}\n          kind={referenceForStepResource(stepResource)}\n        />\n      </ModalTitle>\n      <ModalBody>\n        <CopyToClipboard value={safeDump(JSON.parse(stepResource.manifest))} />\n      </ModalBody>\n      <ModalFooter inProgress={false}>\n        <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__actions--right pf-v5-c-form__group--no-top-margin\">\n          <Button type=\"button\" variant=\"secondary\" onClick={() => cancel()}>\n            {t('public~OK')}\n          </Button>\n        </ActionGroup>\n      </ModalFooter>\n    </div>\n  );\n};\n\nexport const installPlanPreviewModal = createModalLauncher<InstallPlanPreviewModalProps>(\n  InstallPlanPreview,\n);\n\nexport type InstallPlanPreviewModalProps = {\n  stepResource: StepResource;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nInstallPlanPreview.displayName = 'InstallPlanPreview';\n"],"sourceRoot":""}