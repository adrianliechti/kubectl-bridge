{"version":3,"sources":["webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeDashboard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/ActivityCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/DetailsCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/InventoryCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/StatusCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeAlerts.tsx","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/prometheus-hook.ts","webpack:///./packages/console-app/src/components/nodes/node-dashboard/UtilizationCard.tsx","webpack:///./packages/console-app/src/components/nodes/NodeDetails.tsx","webpack:///./packages/console-app/src/components/nodes/NodeDetailsConditions.tsx","webpack:///./packages/console-app/src/components/nodes/NodeDetailsImages.tsx","webpack:///./packages/console-app/src/components/nodes/NodeDetailsOverview.tsx","webpack:///./packages/console-app/src/components/nodes/NodeLogs.tsx","webpack:///./packages/console-app/src/components/nodes/NodeLogsUnitFilter.tsx","webpack:///./packages/console-app/src/components/nodes/NodeTerminal.tsx","webpack:///./packages/console-shared/src/components/dashboard/inventory-card/utils.ts","webpack:///./packages/console-app/src/components/nodes/NodeDetailsPage.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/utils.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/context.ts","webpack:///./packages/console-shared/src/components/dashboard/status-card/OperatorStatusBody.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeDashboardContext.tsx","webpack:///./packages/console-app/src/components/nodes/NodeIPList.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeUptime.tsx","webpack:///./packages/console-app/src/components/nodes/NodeStatus.tsx","webpack:///./packages/console-app/src/components/nodes/useNodeStatusExtensions.tsx","webpack:///./packages/console-app/src/components/nodes/NodeRoles.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/queries.ts","webpack:///./packages/console-app/src/components/nodes/node-dashboard/messages.ts","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeHealth.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/utilization-popovers.tsx"],"names":["leftCards","Card","mainCards","rightCards","ActionType","reducer","state","action","type","CPU_LIMIT","payload","cpuLimit","MEMORY_LIMIT","memoryLimit","HEALTH_CHECK","healthCheck","OBJ","obj","dispatch","undefined","initialState","setCPULimit","setMemoryLimit","setHealthCheck","context","Provider","value","eventsResource","isList","kind","RecentEvent","node","data","loaded","loadError","uid","name","metadata","eventsFilter","event","objectUID","objectKind","objectName","involvedObject","nodeEventsFilter","events","filter","eventsLink","t","className","isClickable","isSelectable","actions","to","hasNoOffset","detailsLink","instanceType","labels","zone","isLoading","title","error","ips","expand","NodeInventoryItem","nodeName","model","mapper","resource","crd","fieldSelector","basePath","resources","hasGutter","titlePlural","count","status","images","length","labelSelector","LimitLink","humanize","currentKey","totalKey","limitKey","requestedKey","limitState","requestedState","Popover","nodeIP","find","addr","address","queries","resourceQuotaQueries","current","currentError","currentValue","total","totalError","totalValue","limit","limitError","requested","requestedError","available","string","position","right","getMessage","limReqErr","limReqWarn","limErr","limWarn","reqWarn","OK","ERROR","Icon","message","WARN","HealthChecksLink","namespace","machine","groupVersionKind","healthChecks","healthState","top","headerContent","bodyContent","conditions","machineHealthChecks","matchingHC","enableFlip","maxWidth","variant","isInline","children","cpuMessage","memoryMessage","failingHealthCheck","reboot","CPU_USAGE","CPU_TOTAL","POD_RESOURCE_LIMIT_CPU","POD_RESOURCE_REQUEST_CPU","MEMORY_USAGE","MEMORY_TOTAL","POD_RESOURCE_LIMIT_MEMORY","POD_RESOURCE_REQUEST_MEMORY","usePrometheusQuery","query","queryResult","dashboards","getIn","PROMETHEUS","get","y","networkPopovers","multilineQueries","humanizeValue","utilizationQuery","totalQuery","limitQuery","requestQuery","TopConsumerPopover","setLimitReqState","byteDataType","BinaryBytes","FILESYSTEM_USAGE","FILESYSTEM_TOTAL","NETWORK_UTILIZATION","TopConsumerPopovers","POD_COUNT","text","c","i","key","reason","timestamp","lastHeartbeatTime","lastTransitionTime","image","names","includes","sizeBytes","launchLabelsModal","machineName","machineNamespace","canUpdate","group","apiGroup","plural","verb","label","path","valueClassName","onEdit","canEdit","editAsGroup","onClick","factory","ModifyTaints","callback","spec","taints","ModifyAnnotations","annotations","toString","creationTimestamp","LogControls","onTogglePath","onChangePath","isPathOpen","pathItems","isJournal","onChangeUnit","unit","isLoadingFilenames","logFilenamesExist","onToggleFilename","onChangeFilename","logFilename","isFilenameOpen","logFilenames","isWrapLines","setWrapLines","showSearch","options","items","map","onSelect","selected","isOpen","toggle","toggleRef","ref","placeholder","minSearchChars","id","isChecked","onChange","_event","checked","ns","isWindows","nodeInfo","operatingSystem","push","setPath","logURL","setLogURL","setLogFilenames","setUnit","setLogFilename","isLoadingLog","setLoadingLog","setLoadingFilenames","setError","setPathOpen","setFilenameOpen","content","setContent","fetchLog","url","then","response","responseText","catch","e","getLogURL","ext","unitText","baseURL","extendedURL","unitsArray","split","unitQueryParams","val","join","getUnitQueryParams","journalLogURL","logFilenameURL","doc","DOMParser","parseFromString","links","querySelectorAll","filenames","link","textContent","trimmedContent","index","indexOf","substr","errorExists","logControls","newAPI","preventDefault","newFilename","href","full","isFullHeight","titleText","headingLevel","isTextWrapped","toolbar","theme","initialIndexWidth","firstRender","inputRef","values","setValues","input","listener","currentTarget","code","prevValues","addEventListener","removeEventListener","valuesString","categoryName","isClosable","v","newValues","splice","deleteValue","getDebugPod","dockerImageReference","apiVersion","activeDeadlineSeconds","volumes","hostPath","containers","command","volumeMounts","mountPath","securityContext","privileged","runAsUser","stdin","stdinOnce","tty","restartPolicy","hostNetwork","hostPID","NodeTerminalError","NodeTerminalInner","phase","containerStatuses","terminated","setResources","errorMessage","setErrorMessage","replace","deleteNamespace","console","warn","closeTab","generateName","podToCreate","Promise","resolve","setTimeout","prop","window","POD_PHASE_GROUP_MAPPING","NOT_MAPPED","PROGRESS","PVC_STATUS_GROUP_MAPPING","PV_STATUS_GROUP_MAPPING","NODE_STATUS_GROUP_MAPPING","VS_STATUS_GROUP_MAPPING","getStatusGroups","mapping","filterType","groups","UNKNOWN","statusIDs","Object","keys","forEach","getPodStatusGroups","getNodeStatusGroups","getPVCStatusGroups","pvc","getPVStatusGroups","pv","getVSStatusGroups","NodePodsPage","showTitle","showNamespaceOverride","props","pagesFor","nameKey","component","editYaml","pods","logs","terminal","getResourceStatus","customActionMenu","kindObj","DROPDOWN","uniqueResource","prefix","OperatorRow","operatorStatus","isResolved","Component","LoadingComponent","ResolvedComponent","operators","loader","OperatorsPopup","operatorExtensions","dynamicOperatorSubsystems","sections","o","operatorResources","reduce","acc","r","getOperatorsWithStatuses","linkTo","viewAllLink","Row","operatorRowLoader","reverse","OperatorHealthItem","watchK8sResource","stopWatchK8sResource","healthStatuses","some","health","NOT_AVAILABLE","LOADING","operatorStatuses","importantStatuses","operatorsHealth","details","detailMessage","popupTitle","URLHealthItem","watchURL","stopWatchURL","urlResults","subsystem","models","modelExists","additionalResource","fetch","healthResult","healthResultError","k8sResult","healthHandler","popupBodyContent","popupComponent","hide","PrometheusHealthItem","watchPrometheus","stopWatchPrometheusQuery","prometheusResults","infrastructure","q","queryResults","popupClassname","popupKeepOnOutsideClick","responses","ResourceHealthItem","resourcesWithNamespace","imageManifestVuln","resourcesResult","ClusterDashboardContext","infrastructureLoaded","infrastructureError","OperatorsSection","sortedOperatorStatuses","sort","a","b","localeCompare","operatorsHealthy","every","RowLoading","firstColumn","operatorStatusLength","secondColumn","toLowerCase","icon","cvResource","namespaced","DashboardAlerts","hasCVResource","CLUSTER_VERSION","alerts","cv","cvLoaded","showClusterUpdate","alert","rule","StatusCard","k8sModels","k8s","subsystemExtensions","dynamicSubsystemExtensions","subsystems","s","properties","optional","filterSubsystems","popup","operatorSubsystemIndex","findIndex","healthItems","disallowedControlPlaneTopology","SERVER_FLAGS","controlPlaneTopology","operatorSubsystems","item","NodeDashboardContext","conditionDescriptionMap","freeze","DISK_PRESSURE","MEM_PRESSURE","PID_PRESSURE","humanizeMap","getDegradedStates","condition","NodeStatusWithExtensions","statusExtensions","popoverContent","secondaryStatuses","mainStatus","statusBody","consumers","description","conditionDescription","useNodeStatusExtensions","nodeStatusExtensions","pluginResources","extraResources","statuses","PopoverContent","isActive","pluginID","pResources","err","NodeQueries","NETWORK_IN_UTILIZATION","NETWORK_OUT_UTILIZATION","top25Queries","PODS_BY_CPU","PODS_BY_MEMORY","PODS_BY_FILESYSTEM","PODS_BY_NETWORK_IN","PODS_BY_NETWORK_OUT","PROJECTS_BY_CPU","PROJECTS_BY_MEMORY","PROJECTS_BY_FILESYSTEM","PROJECTS_BY_NETWORK_IN","PROJECTS_BY_NETWORK_OUT","getMultilineQueries","desc","getResourceQutoaQueries","getUtilizationQueries","ipAddress","getTopConsumerQueries","CONDITIONS_WARNING","CPU_LIMIT_REQ_ERROR","CPU_LIMIT_ERROR","CPU_LIMIT_WARN","CPU_LIMIT_REQ_WARN","CPU_REQ_WARN","MEM_LIMIT_REQ_ERROR","MEM_LIMIT_ERROR","MEM_LIMIT_WARN","MEM_LIMIT_REQ_WARN","MEM_REQ_WARN","HealthChecksPopup","disabledAlert","conditionFailing","groupedConditions","cds","failing","WARNING","machineHealthCheckLabelPlural","labelPlural","machineHealthCheckLabel","machineHealthChecksResource","getMachineHealth","mData","mLoaded","mLoadError","hcData","hcLoaded","hcLoadError","hc","selector","matches","noIcon","failingConditions","unhealthyConditions","timeout","nodeCondition","transitionTime","Date","getTime","currentTime","parseInt","isConditionFailing","HealthChecksItem","NodeUtilizationContext","useConsumers","nsQuery","podQuery","metric","CPUPopover","rest","MemoryPopover","FilesystemPopover","NetworkInPopover","NetworkOutPopover"],"mappings":"8FAAA,wGAaA,MAAMA,EAAY,CAAC,CAAEC,KAAM,KAAe,CAAEA,KAAM,MAC5CC,EAAY,CAAC,CAAED,KAAM,KAAc,CAAEA,KAAM,MAC3CE,EAAa,CAAC,CAAEF,KAAM,MAE5B,IAAYG,GAAZ,SAAYA,GACV,wBACA,8BACA,8BACA,YAJF,CAAYA,MAAU,KAOf,MAOMC,EAAU,CAACC,EAA2BC,KACjD,OAAQA,EAAOC,MACb,KAAKJ,EAAWK,UACd,OAAI,IAAUF,EAAOG,QAASJ,EAAMK,UAC3BL,EAEF,OAAP,wBACKA,GAAK,CACRK,SAAUJ,EAAOG,UAGrB,KAAKN,EAAWQ,aACd,OAAI,IAAUL,EAAOG,QAASJ,EAAMO,aAC3BP,EAEF,OAAP,wBACKA,GAAK,CACRO,YAAaN,EAAOG,UAGxB,KAAKN,EAAWU,aACd,OAAI,IAAUP,EAAOG,QAASJ,EAAMS,aAC3BT,EAEF,OAAP,wBACKA,GAAK,CACRS,YAAaR,EAAOG,UAGxB,KAAKN,EAAWY,IACd,OAAIT,EAAOG,UAAYJ,EAAMW,IACpBX,EAEF,OAAP,wBACKA,GAAK,CACRW,IAAKV,EAAOG,UAGhB,QACE,OAAOJ,IA2CE,IAvCqC,EAAGW,UACrD,MAAOX,EAAOY,GAAY,aAAiBb,EAnDjB,CAACY,IAAsC,CACjEA,MACAN,cAAUQ,EACVN,iBAAaM,EACbJ,iBAAaI,IA+CuCC,CAAaH,IAE7DA,IAAQX,EAAMW,KAChBC,EAAS,CAAEV,KAAMJ,EAAWY,IAAKN,QAASO,IAG5C,MAAMI,EAAc,cACjBX,GAA4BQ,EAAS,CAAEV,KAAMJ,EAAWK,UAAWC,YACpE,IAEIY,EAAiB,cACpBZ,GAA4BQ,EAAS,CAAEV,KAAMJ,EAAWQ,aAAcF,YACvE,IAEIa,EAAiB,cACpBb,GAAyBQ,EAAS,CAAEV,KAAMJ,EAAWU,aAAcJ,YACpE,IAGIc,EAAU,CACdP,MACAN,SAAUL,EAAMK,SAChBE,YAAaP,EAAMO,YACnBE,YAAaT,EAAMS,YACnBM,cACAC,iBACAC,kBAGF,OACE,gBAAC,IAAqBE,SAAQ,CAACC,MAAOF,GACpC,gBAAC,UAAS,KACR,gBAAC,UAAa,CAACtB,UAAWA,EAAWF,UAAWA,EAAWG,WAAYA,Q,mCC3G/E,iGAcA,MAAMwB,EAAiB,CACrBC,QAAQ,EACRC,KAAM,aAAWA,MAQbC,EAA0C,EAAGC,WACjD,MAAOC,EAAMC,EAAQC,GAAa,YAAiCP,IAC7D,IAAEQ,EAAG,KAAEC,GAASL,EAAKM,SACrBC,EAAe,cAClBC,GAToB,EAACA,EAAkBJ,EAAaN,EAAcO,KACrE,MAAQD,IAAKK,EAAWX,KAAMY,EAAYL,KAAMM,IAAeH,aAAK,EAALA,EAAOI,iBAAkB,GACxF,OAAOH,IAAcL,GAAOM,IAAeZ,GAAQa,IAAeN,GAOrDQ,CAAiBL,EAAOJ,EAAK,YAAUN,KAAMO,GACxD,CAACD,EAAKC,IAER,OAAO,gBAAC,mBAAgB,CAACS,OAAQ,CAAEb,OAAMC,SAAQC,aAAaY,OAAQR,KAuCzD,IApCgB,KAC7B,MAAM,IAAErB,GAAQ,aAAiB,KAC3B8B,EAAgB,aAAsB,YAAW9B,EAAIoB,SAASD,MAAjD,WACb,EAAEY,GAAM,2BACd,OACE,gBAAC,IAAI,gBACU,gBACbC,UAAU,6BACVC,aAAW,EACXC,cAAY,GAEZ,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,OAAI,CAACC,GAAIN,GAAaC,EAAE,6BAG7BM,aAAa,EACbL,UAAW,8BAGb,gBAAC,IAAS,KAAED,EAAE,0BAEhB,gBAAC,UAAY,CAACC,UAAU,uCACtB,gBAAC,sBAAmB,CAAChB,QAAM,IAC3B,gBAACH,EAAW,CAACC,KAAMd,Q,mCC5D3B,kJAqEe,IAvDe,K,QAC5B,MAAM,IAAEA,GAAQ,aAAiB,KAC3BsC,EAAiB,aAAsB,YAAWtC,EAAIoB,SAASD,MAAjD,WACdoB,EAAkC,QAAnB,EAAAvC,EAAIoB,SAASoB,cAAM,eAAG,oCACrCC,EAA0B,QAAnB,EAAAzC,EAAIoB,SAASoB,cAAM,eAAG,gCAC7B,EAAET,GAAM,2BACd,OACE,gBAAC,IAAI,gBAAc,eAAeE,aAAW,EAACC,cAAY,GACxD,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,OAAI,CAACC,GAAIE,GAAcP,EAAE,0BAG9BM,aAAa,EACbL,UAAW,8BAGb,gBAAC,IAAS,KAAED,EAAE,yBAEhB,gBAAC,IAAQ,KACP,gBAAC,UAAW,KACV,gBAAC,IAAkB,CAACW,WAAY1C,EAAK2C,MAAOZ,EAAE,0BAC3C/B,EAAIoB,SAASD,MAEhB,gBAAC,IAAkB,CAACuB,WAAY1C,EAAK2C,MAAOZ,EAAE,sBAC5C,gBAAC,IAAS,CAACjB,KAAMd,KAEnB,gBAAC,IAAkB,CACjB0C,WAAY1C,EACZ2C,MAAOZ,EAAE,6BACTa,MAAQL,OAAgDrC,EAAjC6B,EAAE,8BAExBQ,GAEH,gBAAC,IAAkB,CACjBG,WAAY1C,EACZ2C,MAAOZ,EAAE,oBACTa,MAAQH,OAAwCvC,EAAjC6B,EAAE,8BAEhBU,GAEH,gBAAC,IAAkB,CAACC,WAAY1C,EAAK2C,MAAOZ,EAAE,+BAC5C,gBAAC,IAAU,CAACc,IAAK,YAAiB7C,GAAM8C,QAAM,KAEhD,gBAAC,IAAkB,CAACJ,WAAY1C,EAAK2C,MAAOZ,EAAE,uBAC5C,gBAAC,IAAU,CAAC/B,IAAKA,U,mCC7D7B,qIAcO,MAAM+C,EAAsD,EACjEC,WACAC,QACAC,aAEA,MAAMC,EAAW,UACf,KAAM,CACJvC,KAAMqC,EAAMG,IAAM,aAAkBH,GAASA,EAAMrC,KACnDyC,cAAe,iBAAiBL,EAChCrC,QAAQ,IAEV,CAACqC,EAAUC,KAENlC,EAAMC,EAAQC,GAAa,YAAyCkC,GACrEG,EAAc,aAAsB,YAAWN,GAApC,QAEjB,OACE,gBAAC,wBAAqB,CACpBpC,KAAMqC,EACNP,WAAY1B,EACZ4B,QAAS3B,EACTsC,UAAWxC,EACXmC,OAAQA,EACRI,SAAUA,KA4CD,IAvCiB,K,UAC9B,MAAM,IAAEtD,GAAQ,aAAiB,MAC3B,EAAE+B,GAAM,2BAEd,OACE,gBAAC,IAAI,gBAAc,kBACjB,gBAAC,IAAU,KACT,gBAAC,IAAS,KAAEA,EAAE,2BAEhB,gBAAC,IAAQ,KACP,gBAAC,IAAK,CAACyB,WAAS,GACd,gBAAC,IAAS,KACR,gBAACT,EAAiB,CAChBC,SAAUhD,EAAIoB,SAASD,KACvB8B,MAAO,WACPC,OAAQ,wBAGZ,gBAAC,IAAS,KACR,gBAAC,UAAa,CACZR,WAAY1C,EACZ2C,MAAOZ,EAAE,qBACT0B,YAAa1B,EAAE,sBACf2B,MAAyB,QAAlB,EAAU,QAAV,EAAA1D,EAAI2D,cAAM,eAAEC,cAAM,eAAEC,OAC3BjB,QAAkB,QAAV,EAAA5C,EAAI2D,cAAM,eAAEC,gB,mCClElC,6FA8Be,IArBc,KAC3B,MAAM,IAAE5D,GAAQ,aAAiB,MAC3B,EAAE+B,GAAM,2BACd,OACE,gBAAC,IAAI,gBAAc,cAAcC,UAAU,8BACzC,gBAAC,IAAU,KACT,gBAAC,IAAS,KAAED,EAAE,wBAEf/B,EACC,gCACE,gBAAC,IAAU,MACX,gBAAC,IAAU,MACX,gBAAC,IAAe,CAAC8D,cAAe,CAAEhD,KAAMd,EAAIoB,SAASD,SAGvD,gBAAC,IAAa,S,mCCxBtB,8KAqCA,MAAM4C,EAAsC,EAC1CC,WACAC,aACAC,WACAC,WACAC,eACAC,aACAC,iBACAC,c,MAEA,MAAM,IAAEvE,GAAQ,aAAiB,KAC3BgD,EAAWhD,EAAIoB,SAASD,KACxBqD,EAAyE,QAAhE,cAAiBxE,GAAKyE,KAAMC,GAAuB,eAAdA,EAAKnF,aAAsB,eAAEoF,SAC1EC,EAASC,GAAwB,UACtC,IAAM,CAAC,YAAsB7B,EAAUwB,GAAS,YAAwBxB,IACxE,CAACwB,EAAQxB,KAEJ8B,EAASC,EAAcC,GAAgB,YAAmBJ,EAAQX,GAAaD,IAC/EiB,EAAOC,EAAYC,GAAc,YAAmBP,EAAQV,GAAWF,IACvEoB,EAAOC,GAAc,YAAmBR,EAAqBV,GAAWH,IACxEsB,EAAWC,GAAkB,YAClCV,EAAqBT,GACrBJ,IAEI,EAAEjC,GAAM,2BACRyD,EACJR,GAAgBG,EACZnB,EAASmB,EAAaH,GAAcS,OACpC1D,EAAE,6BAER,OACE,gBAAC,IAAuBvB,SAAQ,CAACC,MAAO,CAAEuC,WAAUwB,WAClD,gBAACD,EAAO,CACN5B,MAAOZ,EAAE,6BACT+C,QAASC,EAAehD,EAAE,6BAA+B+C,EAAQW,OACjER,MAAOC,EAAanD,EAAE,6BAA+BkD,EAAMQ,OAC3DL,MAAOC,EAAatD,EAAE,6BAA+BqD,EAAMK,OAC3DH,UAAWC,EAAiBxD,EAAE,6BAA+BuD,EAAUG,OACvED,UAAWA,EACXnB,WAAYA,EACZC,eAAgBA,EAChBoB,SAAU,IAAgBC,UAM5BC,EAAyB,CAC7BvB,GACEwB,YAAWC,aAAYC,SAAQC,UAASC,cAE1C,MAAM,MAAEb,EAAK,UAAEE,GAAcjB,GAAc,GAC3C,OAAKA,GAAee,IAAU,IAAYc,IAAMZ,IAAc,IAAYY,GACjE,KAELd,IAAU,IAAYe,MACjB,CACLC,KAAM,IACNC,QAASf,IAAc,IAAYY,GAAKH,EAASF,GAGjDT,IAAU,IAAYkB,KACjB,CACLF,KAAM,IACNC,QAASf,IAAc,IAAYY,GAAKF,EAAUF,GAG/C,CACLM,KAAM,IACNC,QAASJ,IAIPM,EAA6B,KACjC,MAAM,IAAEvG,GAAQ,aAAiB,MAC1BmB,EAAMqF,GAAa,YAA+BxG,GAEnDyG,EAAU,YACdtF,GAAQqF,EACJ,CACEE,iBAAkB,sCAA4B,gBAC9CvF,OACAqF,kBAEFtG,GAEAyG,EAAe,YAA8C,KAC7DC,EAAc,YAAiB5G,EAAKyG,EAASE,IAC7C,EAAE5E,GAAM,2BACd,OACE,gBAAC,IAAS,CACR2D,SAAU,IAAgBmB,IAC1BC,cAAe/E,EAAE,6BACjBgF,YACE,gBAAC,IAAiB,CAChBC,WAAYJ,EAAYI,WACxBC,oBAAqBL,EAAYM,aAGrCC,YAAU,EACVC,SAAS,SAET,gBAAC,IAAM,CAACC,QAAQ,OAAOC,UAAQ,EAACtF,UAAU,yBACvCD,EAAE,8BA0EI,IApEc,EAAGwF,eAC9B,MAAM,SAAE7H,EAAQ,YAAEE,EAAW,YAAEE,GAAgB,aAAiB,MAC1D,EAAEiC,GAAM,2BAERyF,EAAa5B,EAAWlG,EAAU,CACtCmG,UAAW,IACXE,OAAQ,IACRD,WAAY,IACZE,QAAS,IACTC,QAAS,MAELwB,EAAgB7B,EAAWhG,EAAa,CAC5CiG,UAAW,IACXE,OAAQ,IACRD,WAAY,IACZE,QAAS,IACTC,QAAS,MAGX,OACE,gBAAC,UAAU,QACNnG,aAAW,EAAXA,EAAa4H,qBACd,gBAAC,aAAU,CACTtB,KAAM,IACNC,QAAS,IAAuBvG,EAAY6H,SAE5C,gBAACpB,EAAgB,SAGlBiB,GACD,gBAAC,aAAU,CACTpB,KAAMoB,EAAWpB,KACjBC,QAAStE,EAAE,+BAAgC,CAAEyF,WAAYA,EAAWnB,WAEpE,gBAACtC,EAAS,CACRC,SAAU,KACVC,WAAY,IAAY2D,UACxB1D,SAAU,IAAY2D,UACtB1D,SAAU,IAAY2D,uBACtB1D,aAAc,IAAY2D,yBAC1B1D,WAAY3E,aAAQ,EAARA,EAAU0F,MACtBd,eAAgB5E,aAAQ,EAARA,EAAU4F,UAC1Bf,QAAS,SAIZkD,GACD,gBAAC,aAAU,CACTrB,KAAMqB,EAAcrB,KACpBC,QAAStE,EAAE,kCAAmC,CAAE0F,cAAeA,EAAcpB,WAE7E,gBAACtC,EAAS,CACRC,SAAU,KACVC,WAAY,IAAY+D,aACxB9D,SAAU,IAAY+D,aACtB9D,SAAU,IAAY+D,0BACtB9D,aAAc,IAAY+D,4BAC1B9D,WAAYzE,aAAW,EAAXA,EAAawF,MACzBd,eAAgB1E,aAAW,EAAXA,EAAa0F,UAC7Bf,QAAS,OAIdgD,K,mCCjNP,kGAqBO,MAAMa,EAAyC,CAACC,EAAOrE,KAC5D,MAAM/D,EAAW,wBACjB,YAAgB,KACdA,EAAS,YAAqBoI,IACvB,KACLpI,EAAS,YAAyBoI,MAEnC,CAACpI,EAAUoI,IAEd,MAAMC,EAAc,sBAAkD,EAAGC,gBACvEA,EAAWC,MAAM,CAAC,IAAaC,WAAYJ,KAU7C,OARgB,UAA6C,K,MAC3D,IAAKC,IAAgBA,EAAYI,IAAI,QACnC,MAAO,CAAC,GAAI,KAAM,MAEpB,MAAMjI,EAAyD,QAAjD,cAAsB6H,EAAYI,IAAI,SAAS,UAAE,eAAEC,EACjE,MAAO,CAAC3E,EAASvD,GAAQ6H,EAAYI,IAAI,aAAcjI,IACtD,CAAC6H,EAAatE,KAKW,YAAsB,IAAgB,iB,2DC5CpE,kIAiCA,MAAM4E,EAAkB,CAAC,IAAkB,KAiF5B,IA/EmB,K,MAChC,MAAM,EAAE7G,GAAM,4BACR,IAAE/B,EAAG,YAAEI,EAAW,eAAEC,GAAmB,aAAiB,KAExD2C,EAAWhD,EAAIoB,SAASD,KACxBqD,EAAyE,QAAhE,cAAiBxE,GAAKyE,KAAMC,GAAuB,eAAdA,EAAKnF,aAAsB,eAAEoF,SAE1EC,EAASiE,EAAkBhE,GAAwB,UACxD,IAAM,CACJ,YAAsB7B,EAAUwB,GAChC,YAAoBxB,GACpB,YAAwBA,IAE1B,CAACwB,EAAQxB,IAGX,OACE,gBAAC,IAAI,gBAAc,mBAAmBf,aAAW,EAACC,cAAY,GAC5D,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,8BAA2B,OAGhCE,aAAa,EACbL,eAAW9B,IAGb,gBAAC,IAAS,KAAE6B,EAAE,6BAEhB,gBAAC,UAAe,KACd,gBAAC,IAAuBvB,SAAQ,CAACC,MAAO,CAAE+D,SAAQxB,aAChD,gBAAC,IAAyB,CACxBL,MAAOZ,EAAE,mBACT+G,cAAe,KACfC,iBAAkBnE,EAAQ,IAAYgD,WACtCoB,WAAYpE,EAAQ,IAAYiD,WAChCoB,WAAYpE,EAAqB,IAAYiD,wBAC7CoB,aAAcrE,EAAqB,IAAYkD,0BAC/CoB,mBAAoB,IACpBC,iBAAkBhJ,IAEpB,gBAAC,IAAyB,CACxBuC,MAAOZ,EAAE,sBACT+G,cAAe,KACfC,iBAAkBnE,EAAQ,IAAYoD,cACtCgB,WAAYpE,EAAQ,IAAYqD,cAChCgB,WAAYpE,EAAqB,IAAYqD,2BAC7CgB,aAAcrE,EAAqB,IAAYsD,6BAC/CkB,aAAc,IAAcC,YAC5BH,mBAAoB,IACpBC,iBAAkB/I,IAEpB,gBAAC,IAAyB,CACxBsC,MAAOZ,EAAE,0BACT+G,cAAe,KACfC,iBAAkBnE,EAAQ,IAAY2E,kBACtCP,WAAYpE,EAAQ,IAAY4E,kBAChCH,aAAc,IAAcC,YAC5BH,mBAAoB,MAEtB,gBAAC,IAAkC,CACjCxG,MAAOZ,EAAE,gCACT+G,cAAe,KACflE,QAASiE,EAAiB,IAAYY,qBACtCC,oBAAqBd,IAEvB,gBAAC,IAAyB,CACxBjG,MAAOZ,EAAE,yBACT+G,cAAe,KACfC,iBAAkBnE,EAAQ,IAAY+E,kB,mCC1GlD,4CAkBe,IARiC,EAAG3J,IAAKc,KACtD,gCACE,gBAAC,IAAmB,CAACA,KAAMA,IAC3B,gBAAC,IAAqB,CAACA,KAAMA,IAC7B,gBAAC,IAAiB,CAACA,KAAMA,M,mCCd7B,yCAoDe,IAzCqD,EAAGA,WACrE,MAAM,EAAEiB,GAAM,2BACd,OACE,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAAC4H,KAAM7H,EAAE,iCACxB,uBAAKC,UAAU,sBACb,yBAAOA,UAAU,+CACf,yBAAOA,UAAU,wBACf,sBAAIA,UAAU,qBACZ,sBAAIA,UAAU,qBAAqBD,EAAE,qBACrC,sBAAIC,UAAU,qBAAqBD,EAAE,uBACrC,sBAAIC,UAAU,qBAAqBD,EAAE,uBACrC,sBAAIC,UAAU,qBAAqBD,EAAE,wBACrC,sBAAIC,UAAU,qBAAqBD,EAAE,0BAGzC,yBAAOC,UAAU,wBACd,IAAMlB,EAAK6C,OAAOqD,WAAY,CAAC6C,EAAGC,IACjC,sBAAI9H,UAAU,oBAAoB+H,IAAKD,GACrC,sBAAI9H,UAAU,qBACZ,gBAAC,IAAa,CAACvB,MAAOoJ,EAAEtK,QAE1B,sBAAIyC,UAAU,qBAAqB6H,EAAElG,QAAU,KAC/C,sBAAI3B,UAAU,qBACZ,gBAAC,IAAa,CAACvB,MAAOoJ,EAAEG,UAE1B,sBAAIhI,UAAU,qBACZ,gBAAC,KAAS,CAACiI,UAAWJ,EAAEK,qBAE1B,sBAAIlI,UAAU,qBACZ,gBAAC,KAAS,CAACiI,UAAWJ,EAAEM,8B,mCCzC1C,0CA4Ce,IAlC6C,EAAGrJ,WAC7D,MAAM8C,EAAS,IAAS9C,EAAK6C,OAAOC,OAAQ,UACtC,EAAE7B,GAAM,2BACd,OACE,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAAC4H,KAAM7H,EAAE,wBACxB,uBAAKC,UAAU,sBACb,yBAAOA,UAAU,+CACf,yBAAOA,UAAU,wBACf,sBAAIA,UAAU,qBACZ,sBAAIA,UAAU,qBAAqBD,EAAE,qBACrC,sBAAIC,UAAU,qBAAqBD,EAAE,uBAGzC,yBAAOC,UAAU,wBACd,IAAM4B,EAAQ,CAACwG,EAAON,IACrB,sBAAI9H,UAAU,oBAAoB+H,IAAKD,GACrC,sBAAI9H,UAAU,uDACXoI,EAAMC,MAAM5F,KACVtD,IAAkBA,EAAKmJ,SAAS,OAASnJ,EAAKmJ,SAAS,YACrDF,EAAMC,MAAM,IAEnB,sBAAIrI,UAAU,qBACX,KAAMgC,SAASoG,EAAMG,UAAW,eAAe,GAAM9E,QAAU,a,mCCjClF,6IAyKe,IA1IiD,EAAG3E,WACjE,MAAM0J,EAAoB,yBAAe1J,IAClC2J,EAAaC,GAAoB,YAA+B5J,GACjE6J,EAAY,aAAgB,CAChCC,MAAO,YAAUC,SACjB1H,SAAU,YAAU2H,OACpBC,KAAM,QACN5J,KAAML,EAAKM,SAASD,KACpBqF,UAAW1F,EAAKM,SAASoF,aAErB,EAAEzE,GAAM,2BAEd,OACE,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAAC4H,KAAM7H,EAAE,8BACxB,uBAAKC,UAAU,OACb,uBAAKA,UAAU,sBACb,sBAAIA,UAAU,sBACZ,0BAAKD,EAAE,0BACP,0BAAKjB,EAAKM,SAASD,MAAQ,KAC3B,0BAAKY,EAAE,uBACP,0BACE,gBAAC,IAAU,CAACjB,KAAMA,KAEpB,0BAAKiB,EAAE,4BACP,0BAAK,IAAMjB,EAAM,kBAAmB,MACpC,0BAAKiB,EAAE,uBACP,0BACE,gBAAC,IAAU,CAAC/B,IAAKc,KAEnB,0BAAKiB,EAAE,+BACP,0BACE,gBAAC,IAAU,CAACc,IAAK,YAAiB/B,GAAOgC,QAAM,KAEjD,gBAAC,IAAW,CACVkI,MAAOjJ,EAAE,sBACT/B,IAAKc,EACLmK,KAAK,kBACLC,eAAe,8BACfC,OAAQX,EACRY,QAAST,EACTU,aAAW,GAEX,gBAAC,IAAS,CAACzK,KAAK,OAAO4B,OAAQ1B,EAAKM,SAASoB,UAE/C,0BAAKT,EAAE,uBACP,0BACG4I,EACC,gBAAC,IAAM,CACLtD,QAAQ,OACR9H,KAAK,SACL+H,UAAQ,EACRgE,QAAS,IAAMC,QAAQC,aAAa,YAAW1K,GAAM2K,UAEpD,IAAO3K,EAAK4K,KAAKC,QAAS,IAC1B5J,EAAE,oBAAqB,CAAE2B,MAAO,IAAO5C,EAAK4K,KAAKC,UAClD,gBAAC,IAAa,CAAC3J,UAAU,gDAG3B,4BACG,IAAOlB,EAAK4K,KAAKC,QAAS,IAC1B5J,EAAE,oBAAqB,CAAE2B,MAAO,IAAO5C,EAAK4K,KAAKC,YAIxD,0BAAK5J,EAAE,4BACP,0BACG4I,EACC,gBAAC,IAAM,CACLtD,QAAQ,OACR9H,KAAK,SACL+H,UAAQ,EACRgE,QAAS,IAAMC,QAAQK,kBAAkB,YAAW9K,GAAM2K,UAEzD,IAAO3K,EAAKM,SAASyK,aAAc,IACnC9J,EAAE,yBAA0B,CAAE2B,MAAO,IAAO5C,EAAKM,SAASyK,eAC3D,gBAAC,IAAa,CAAC7J,UAAU,gDAG3B,4BACG,IAAOlB,EAAKM,SAASyK,aAAc,IACnC9J,EAAE,yBAA0B,CAAE2B,MAAO,IAAO5C,EAAKM,SAASyK,iBAIhEpB,GACC,gCACE,0BAAK1I,EAAE,wBACP,0BACE,gBAAC,KAAY,CACXnB,KAAM,aAAkB,gBACxBO,KAAMsJ,EACNjE,UAAWkE,MAKnB,0BAAK3I,EAAE,4BACP,0BAAK,aAAmB,CAAC,aAAgBjB,MACxC,IAAMA,EAAM,uBAAyB,0BAAKiB,EAAE,8BAC5C,IAAMjB,EAAM,uBACX,sBAAIkB,UAAU,mBACX,IAAMlB,EAAM,qBAAsB,KAAKgL,YAG5C,0BAAK/J,EAAE,wBACP,0BACE,gBAAC,KAAS,CAACkI,UAAWnJ,EAAKM,SAAS2K,uBAI1C,uBAAK/J,UAAU,sBACb,sBAAIA,UAAU,sBACZ,0BAAKD,EAAE,iCACP,sBAAIC,UAAU,mBACX,IAAMlB,EAAM,kCAAmC,MAElD,0BAAKiB,EAAE,yBACP,0BAAK,IAAMjB,EAAM,0BAA2B,MAC5C,0BAAKiB,EAAE,6BACP,sBAAIC,UAAU,kBAAkB,IAAMlB,EAAM,+BAAgC,MAC5E,0BAAKiB,EAAE,+BACP,0BAAK,IAAMjB,EAAM,gCAAiC,MAClD,0BAAKiB,EAAE,wBACP,0BAAK,IAAMjB,EAAM,yBAA0B,MAC3C,0BAAKiB,EAAE,kCACP,0BAAK,IAAMjB,EAAM,0CAA2C,MAC5D,0BAAKiB,EAAE,gCACP,0BAAK,IAAMjB,EAAM,iCAAkC,MACnD,0BAAKiB,EAAE,mCACP,0BAAK,IAAMjB,EAAM,mCAAoC,Y,mCCjKjE,sOA8DA,MAAMkL,EAA0C,EAC9CC,eACAC,eACAjB,OACAkB,aACAC,YACAC,YACAC,eACAC,OACAC,qBACAC,oBACAC,mBACAC,mBACAC,cACAC,iBACAC,eACAC,cACAC,eACAC,iBAEA,MAAMC,EAAWC,GACfA,EAAMC,IAAK3M,GAEP,gBAAC,IAAY,CACXsJ,IAAKtJ,EACLA,MAAOA,EACPuB,UAAW,IAAW,CAAE,kCAAmCvB,EAAMoD,OAAS,MAEzEpD,KAIH,EAAEsB,GAAM,2BAEd,OACE,gBAAC,IAAO,CAACC,UAAU,0BACjB,gBAAC,IAAc,KACb,gBAAC,IAAY,KACX,gBAAC,IAAW,KACV,gBAAC,IAAM,CACLqL,SAAUnB,EACVoB,SAAUrC,EACVsC,OAAQpB,EACRqB,OAASC,GACP,gBAAC,IAAU,CACTC,IAAKD,EACLnC,QAASW,EAAY,aACTlK,EAAE,wBAAuB,YAC3B,eAETkJ,IAIL,gBAAC,IAAU,KAAEiC,EAAQd,MAGxBC,GAAa,gBAAC,IAAkB,CAACC,aAAcA,EAAcC,KAAMA,KAClEF,GACA,gBAAC,IAAW,KACTG,EACC,gBAAC,IAAa,MAEdC,GACE,gBAAC,IAAM,CACLY,SAAUV,EACVW,SAAUV,EACVW,OAAQV,EACR7K,UAAU,2BACVwL,OAASC,GACP,gBAAC,IAAU,CACTC,IAAKD,EACLnC,QAASoB,EAAgB,YACf,eAETE,GAAe7K,EAAE,8BAItB,gBAAC,IAAU,KAAEmL,EAAQJ,MAM9BG,GACC,gBAAC,IAAW,KACV,gBAAC,IAAe,CAACU,YAAa5L,EAAE,iBAAkB6L,eAAgB,MAIxE,gBAAC,IAAW,CAAC5L,UAAU,gFACrB,gBAAC,IAAQ,CACPgJ,MAAOjJ,EAAE,qBACT8L,GAAG,eACHC,UAAWf,EAAW,qBACFA,EACpBgB,SAAU,CAACC,EAAQC,KACjBjB,EAAaiB,UAuPZ,IA9O2B,EAAGjO,IAAKc,M,MAChD,MAAM,KACJF,EACAQ,UAAU,OAAEoB,EAAM,KAAErB,EAAMqF,UAAW0H,GAAI,OACzCvK,GACE7C,EACEqN,EAAkD,aAAtB,QAAhB,EAAAxK,aAAM,EAANA,EAAQyK,gBAAQ,eAAEC,iBAC9BjC,EAAY,CAAC,WACnB+B,EACI/B,EAAUkC,KAAK,aAAc,iBAAkB,aAAc,UAAW,aAAc,QACzC,KAA7C9L,EAAO,mCACP4J,EAAUkC,KAAK,sBAAuB,iBAAkB,mBAC5D,MAIOrD,EAAMsD,GAAW,WAAe,aAJb,SAIoDnC,EAAU,KACjFoC,EAAQC,GAAa,WAAe,KACpC3B,EAAc4B,GAAmB,WAAe,KAChDnC,EAAMoC,GAAW,WAAe,aANb,UAOnB/B,EAAagC,GAAkB,WAAe,aAN5B,SAOlBC,EAAcC,GAAiB,YAAe,IAC9CtC,EAAoBuC,GAAuB,YAAe,IAC1DnM,EAAOoM,GAAY,WAAe,KAClC7C,EAAY8C,GAAe,YAAe,IAC1CpC,EAAgBqC,GAAmB,YAAe,IAClDC,EAASC,GAAc,WAAe,KACtCrC,EAAaC,GAAgB,aAClC,KACA,GACA,IAEI,EAAEjL,GAAM,2BAERsK,EAAqB,YAATpB,EAEZoE,EAAW,cACdC,IACC,YAAQA,GACLC,KAAMC,GAAaA,EAAS5F,QAC5B2F,KAAME,IACLL,EAAWK,GACXX,GAAc,GACdE,EAAS,MAEVU,MAAOC,IACNb,GAAc,GACdE,EAASjN,EAAE,0CAA2C,CAAEsE,QAASsJ,EAAEtJ,cAGzE,CAACtE,IAOG6N,EAAY,cAChB,CAACC,EAAcC,KACb,MAAMC,EAAU,cAAc9E,EAC9B,IAAI+E,EAOJ,OANIH,IACFG,EAAc,GAAGD,IAAUF,KAEzBC,IACFE,EAAc,GAAGD,KAbI,CAACD,IAC1B,MAAMG,EAAaH,aAAQ,EAARA,EAAUI,MAAM,KAC7BC,EAAkBF,aAAU,EAAVA,EAAY7C,IAAKgD,GAAQ,QAAQA,GACzD,OAAOD,aAAe,EAAfA,EAAiBE,KAAK,MAUGC,CAAmBR,MAE1C,aAAY,aAASlP,GAAO,CACjCO,OACA+M,KACAjD,KAAM+E,GAAeD,KAGzB,CAACnP,EAAMO,EAAM+M,EAAIjD,IAGnB,YAAgB,KACd,IAAKA,GAAQoB,EAAW,CACtB,MAAMkE,EAAgBX,EAAU,GAAIrD,GACpCkC,EAAU8B,OACL,CACL,GAAItF,GAAQ2B,EAAa,CACvB,MAAM4D,EAAiBZ,EAAU,IAAIhD,GACrC6B,EAAU+B,GAEZ,YAAQZ,KACLL,KAAMC,GAAaA,EAAS5F,QAC5B2F,KAAME,IACL,MACMgB,GADS,IAAIC,WACAC,gBAAgBlB,EAAc,aAC3CmB,EAASzC,EAEXsC,EAAII,iBAAiB,KADrBJ,EAAII,iBAAiB,oBAEnBC,EAAY,GAClB,IAAK,MAAMC,KAAQH,EACjBE,EAAUxC,KAAKyC,EAAKC,aAEtBtC,EAAgBoC,GAChB/B,GAAoB,KAErBW,MAAOC,IACNb,GAAc,GACdC,GAAoB,GACpBC,EAASjN,EAAE,mDAAoD,CAAEsE,QAASsJ,EAAEtJ,eAGjF,CAACzF,EAAMO,EAAM+M,EAAIjD,EAAMoB,EAAW8B,EAAWvB,EAAagD,EAAW7N,EAAGwK,IAE3E,YAAgB,KACViC,GACFa,EAASb,IAEV,CAACA,EAAQa,IAEZ,IAAI4B,EAAiB,GAErB,GAAI9B,EAAQtL,OADO,IACc,CAC/B,MAAMqN,EAAQ/B,EAAQgC,QAAQ,KAAMhC,EAAQtL,OAF3B,KAGjBoN,EAAiB9B,EAAQiC,OAAOF,EAAQ,GAG1C,MAgCMG,EAAczO,EAAMiB,OAAS,EAC7B4I,EAAoBK,EAAajJ,OAAS,EAE1CyN,GACJ,gBAACtF,EAAW,CACVC,aAvBiB,IAAMgD,GAAa9C,GAwBpCD,aAtCiB,CAAC5K,EAA4CiQ,KAChEjQ,EAAMkQ,iBACNvC,GAAY,GACZV,EAAQgD,GACR7C,EAAgB,IAChBE,EAAe,IACfD,EAAQ,IACR,aApHwB,OAoHY4C,GACpC,aApHwB,QAqHxB,aApHuB,OAqHvBxC,GAAoB,GACpBD,GAAc,GACdmC,EAAiB,IA2BfhG,KAAMA,EACNkB,WAAYA,EACZC,UAAWA,EACXC,UAAWA,EACXC,aA5BkB7L,IACpBkO,EAAQlO,GACE,KAAVA,EACI,aA9HoB,QA+HpB,aA/HoB,OA+HgBA,IAyBtC8L,KAAMA,EACNC,mBAAoBA,EACpBC,kBAAmBA,EACnBC,iBAhBqB,IAAMwC,GAAiBrC,GAiB5CF,iBA3BqB,CAACrL,EAA4CmQ,KACpEnQ,EAAMkQ,iBACNtC,GAAgB,GAChBN,EAAe6C,GACf3C,GAAc,GACd,aArIuB,MAqIY2C,GACnChD,EAAUmB,EAAU,IAAI6B,IACxBpC,EAASO,EAAU,IAAI6B,IACvBR,EAAiB,IAoBfrE,YAAaA,EACbC,eAAgBA,EAChBC,aAAcA,EACdC,YAAaA,EACbC,aAAcA,EACdC,YAAa4B,IAAiBwC,IAIlC,OACE,uBAAKrP,UAAU,gDACb,uBAAKA,UAAU,uBACX6M,GAAgBwC,IAAgBC,IACjCL,aAAc,EAAdA,EAAgBpN,QAAS,IAAMgL,GAC9B,gBAAC,IAAK,CACJvH,UAAQ,EACRtF,UAAU,sCACVqF,QAAQ,UACR1E,MAAOZ,EAAE,8CAET,gBAAC,QAAK,CAACmM,GAAG,SAASnM,EAAGA,G,kCACY,IAChC,gBAAC,IAAY,CAAC2P,KAAMlD,GAAM,uC,MAI/BK,EACExC,GAAcO,EAuBb,gBAAC,IAAU,MAtBX,gBAAC,IAAU,CAACvF,QAAS,IAAkBsK,KAAMC,cAAY,GACvD,gBAAC,IAAgB,CACfC,UACE,gCACGrF,EACC,gBAAC,IAAa,MAEdzK,EADE0K,EACA,8BAEA,8BAIRqF,aAAa,OAEf,gBAAC,IAAgB,KACdrF,GACC,gBAAC,IAAc,KAAE1K,EAAE,qCAOzBsP,EACF,gBAAC,IAAK,CAAChK,QAAQ,SAASC,UAAQ,EAAC3E,MAAOC,EAAOZ,UAAU,aAEzD,gBAAC,IAAS,CACR+P,cAAehF,EACfhM,KAAMkQ,GAAkB9B,EACxB6C,QAASV,GACTW,MAAM,OACNC,kBAAmB,Q,mCC/Y/B,uEAsFe,IA3E+C,EAAG5F,mB,MAC/D,MAAM6F,EAAc,UAAa,GAC3BC,EAAW,YACVC,EAAQC,GAAa,YAAiD,QAAxB,eAAiB,eAAO,eAAEpC,MAAM,OAAQ,KACvF,EAAEnO,GAAM,2BAEd,YAAgB,KACd,MAAMwQ,EAAQH,EAAStN,QACjB0N,EAAYlR,IAChB,MAAM,MAAEb,GAAUa,EAAMmR,cACJ,UAAfnR,EAAMoR,MAAmC,gBAAfpR,EAAMoR,MAAqC,KAAVjS,IAC9Da,EAAMkQ,iBACNc,EAAWK,GAAe,IAAO,IAAIA,EAAYlS,KACjDa,EAAMmR,cAAchS,MAAQ,KAIhC,OADA8R,EAAMK,iBAAiB,UAAWJ,GAC3B,KACLD,EAAMM,oBAAoB,UAAWL,KAEtC,CAAClG,IAEJ,MAeMwG,EAAeT,EAAOhC,KAAK,KACjC,YAAgB,KACT8B,EAAYrN,QAGfqN,EAAYrN,SAAU,EAFtBwH,EAAawG,IAId,CAACA,EAAcxG,IAElB,MAAMtB,EAAQjJ,EAAE,yBAEhB,OACE,gCACE,gBAAC,IAAW,KACV,gBAAC,IAAS,CACRxC,KAAK,OACLsO,GAAG,WACH1M,KAAK,WAAU,aACH6J,EACZ0C,IAAK0E,EACLzE,YAAa3C,KAGhBqH,EAAOxO,OAAS,GACf,gBAAC,IAAW,KACV,gBAAC,IAAS,CAACkP,aAAchR,EAAE,eAAgBiR,YAAU,EAAC1H,QA7BvC,KACrBgH,EAAU,MA6BDD,aAAM,EAANA,EAAQjF,IAAK6F,GACZ,gBAAC,IAAI,CAAClJ,IAAKkJ,EAAG3H,QAAS,IA1Cf,CAACuC,IACnB,MAAMqD,EAAQmB,EAAOlB,QAAQtD,IACd,IAAXqD,GACFoB,EAAWK,IACT,MAAMO,EAAY,IAAIP,GAEtB,OADAO,EAAUC,OAAOjC,EAAO,GACjBgC,KAoC4BE,CAAYH,IACtCA,S,2ZClDjB,MASMI,EAAc,CAAOlS,EAAcqF,EAAmBxD,IAAuC,OAAD,6BAChG,MAAMoH,QAV2C,OAAD,6BAChD,IAEE,aADoB,aAAO,sBAAqB,eAAgB,cACnDA,MAAMkJ,qBACnB,MAAO3D,GACP,MAAO,6CAMT,MAAO,CACL/O,KAAM,MACN2S,WAAY,KACZnS,SAAU,CACRD,OACAqF,YACAqF,YAAa,CACX,sCAAuC,eACvC,qCAAsC,uBAAuB7I,EAC7D,mBAAoB,eAGxB0I,KAAM,CACJ8H,sBAAuB,MACvBC,QAAS,CACP,CACEtS,KAAM,OACNuS,SAAU,CACRzI,KAAM,IACN1L,KAAM,eAIZoU,WAAY,CACV,CACExS,KAAM,eACNiJ,QACAwJ,QAAS,CAAC,WACVrQ,UAAW,GACXsQ,aAAc,CACZ,CACE1S,KAAM,OACN2S,UAAW,UAGfC,gBAAiB,CACfC,YAAY,EACZC,UAAW,GAEbC,OAAO,EACPC,WAAW,EACXC,KAAK,IAGTC,cAAe,QACfrR,WACAsR,aAAa,EACbC,SAAS,OAKTC,EAAsD,EAAG5R,WAE3D,uBAAKZ,UAAU,mBACb,gBAAC,IAAK,CAACqF,QAAQ,SAASC,UAAQ,EAAC3E,MAAOC,EAAK,YAAY,yBAKzD6R,EAAsD,EAAGzU,U,wBAC7D,MAAM,EAAE+B,GAAM,2BACRsE,EACJ,gBAAC,QAAK,CAACtE,EAAGA,EAAGmM,GAAG,eACd,yB,6BAC4B,wBAAMlM,UAAU,WAAS,kBAIzD,OAAyB,QAAjB,EAAS,QAAT,EAAAhC,aAAG,EAAHA,EAAKe,YAAI,eAAE4C,cAAM,eAAE+Q,OACzB,IAAK,SACH,OACE,gBAACF,EAAiB,CAChB5R,MACE,gCACGb,EAAE,uCAC0D,QAA5D,EAAgD,QAAhD,EAAyC,QAAzC,EAAoC,QAApC,EAAiB,QAAjB,EAAS,QAAT,EAAA/B,aAAG,EAAHA,EAAKe,YAAI,eAAE4C,cAAM,eAAEgR,yBAAiB,eAAG,UAAE,eAAEtV,aAAK,eAAEuV,kBAAU,eAAEvO,WAC5C,QAAjB,EAAS,QAAT,EAAArG,aAAG,EAAHA,EAAKe,YAAI,eAAE4C,cAAM,eAAE0C,YAK/B,IAAK,UACH,OAAO,gBAAC,gBAAa,CAACrG,IAAKA,EAAIe,KAAMsF,QAASA,IAChD,QACE,OAAO,gBAAC,IAAU,QA+ET,IA3EmC,EAAGrG,IAAKc,MACxD,MAAOyC,EAAWsR,GAAgB,WAAmC,KAC9DC,EAAcC,GAAmB,WAAe,IACjD/R,EAAWlC,EAAKM,SAASD,KA+D/B,OA9DA,YAAgB,KACd,IAAIqF,EACJ,MAAMrF,GAAU6B,aAAQ,EAARA,EAAUgS,QAAQ,MAAO,MAA5B,SACPC,EAAyB/G,GAAO,OAAD,6BACnC,UACQ,aAAc,iBAAgBA,GACpC,MAAOyB,GAEPuF,QAAQC,KAAK,kDAAmDxF,OAG9DyF,EAAY9T,IAChBA,EAAMkQ,iBACNyD,EAAgBzO,EAAUpF,SAASD,OA2CrC,OAzCmC,OAAD,6BAChC,IACEqF,QAAkB,aAAU,iBAAgB,CAC1CpF,SAAU,CACRiU,aAAc,mBACd7S,OAAQ,CACN,yBAA0B,IAC1B,mCAAoC,aACpC,qCAAsC,aACtC,kCAAmC,aACnC,iDAAkD,SAEpDqJ,YAAa,CACX,6BAA8B,OAIpC,MAAMyJ,QAAoBjC,EAAYlS,EAAMqF,EAAUpF,SAASD,KAAM6B,SAE/D,IAAIuS,QAASC,GAAYC,WAAWD,EAAS,aAC5B,aAAU,WAAUF,KAEzCT,EAAa,CACX,CACElU,QAAQ,EACRC,KAAM,MACNO,OACAqF,UAAWA,EAAUpF,SAASD,KAC9BuU,KAAM,SAIZ,MAAO/F,GACPoF,EAAgBpF,EAAEtJ,SACdG,GACFyO,EAAgBzO,EAAUpF,SAASD,UAKzCwU,OAAO/C,iBAAiB,eAAgBwC,GACjC,KACLH,EAAgBzO,EAAUpF,SAASD,MACnCwU,OAAO9C,oBAAoB,eAAgBuC,KAE5C,CAACpS,IAEG8R,EACL,gBAACN,EAAiB,CAAC5R,MAAOkS,IAE1B,gBAAC,IAAQ,CAACvR,UAAWA,GACnB,gBAACkR,EAAiB,S,kCCpMxB,6VAMA,MAAMmB,EAA0B,CAC9B,CAAC,IAAqBC,YAAa,CAAC,UAAW,aAC/C,CAAC,IAAqB1P,OAAQ,CAAC,mBAAoB,UACnD,CAAC,IAAqB2P,UAAW,CAAC,cAAe,WACjD,CAAC,IAAqBxP,MAAO,CAAC,YAG1ByP,EAA2B,CAC/B,CAAC,IAAqBF,YAAa,CAAC,SACpC,CAAC,IAAqB1P,OAAQ,CAAC,QAC/B,CAAC,IAAqB2P,UAAW,CAAC,YAG9BE,EAA0B,CAC9B,CAAC,IAAqBH,YAAa,CAAC,YAAa,SACjD,CAAC,IAAqBC,UAAW,CAAC,YAClC,CAAC,IAAqB3P,OAAQ,CAAC,WAG3B8P,EAA4B,CAChC,CAAC,IAAqBJ,YAAa,CAAC,SACpC,CAAC,IAAqBC,UAAW,CAAC,cAG9BI,EAA0B,CAC9B,CAAC,IAAqBL,YAAa,CAAC,SACpC,CAAC,IAAqBC,UAAW,CAAC,WAClC,CAAC,IAAqB3P,OAAQ,CAAC,UAGpBgQ,EAAkB,CAAC5S,EAAW6S,EAASlT,EAAQmT,KAC1D,MAAMC,EAAS,CACb,CAAC,IAAqBC,SAAU,CAC9BC,UAAW,GACX9S,MAAO,IAmBX,OAhBA+S,OAAOC,KAAKN,GAASO,QAAS5M,IAC5BuM,EAAOvM,GAAO,CACZyM,UAAW,IAAIJ,EAAQrM,IACvBrG,MAAO,EACP2S,gBAIJ9S,EAAUoT,QAASxT,IACjB,MAAMQ,EAAST,EAAOC,GAChByH,EACJ6L,OAAOC,KAAKN,GAAS3R,KAAMsF,GAAQqM,EAAQrM,GAAKO,SAAS3G,KACzD,IAAqB4S,QACvBD,EAAO1L,GAAOlH,UAGT4S,GAGIM,EAAyCrT,GACpD4S,EAAgB5S,EAAWqS,EAAyB,KAAuB,cAChEiB,EAA0CtT,GACrD4S,EAAgB5S,EAAW0S,EAA2B,IAAY,eACvDa,EAAyCvT,GACpD4S,EAAgB5S,EAAWwS,EAA2BgB,GAAQA,EAAIpT,OAAO+Q,MAAO,cACrEsC,EAAwCzT,GACnD4S,EAAgB5S,EAAWyS,EAA0BiB,GAAOA,EAAGtT,OAAO+Q,MAAO,aAClEwC,EAAwC3T,GACnD4S,EAAgB5S,EAAW2S,EAAyB,IAAsB,oB,kCCvE5E,oIAkBA,MAAMiB,EAAuD,EAAGnX,SAC9D,gBAAC,WAAQ,CACPoX,WAAW,EACX/T,cAAe,iBAAiBrD,EAAIoB,SAASD,KAC7CkW,uBAAqB,IAoDV,UAhD8DC,IAC3E,MAAMC,EAAW,cACdzW,GAAmB,CAClB,CACE4Q,KAAM,GAEN8F,QAAS,uBACTC,UAAW,KAEb,CACE/F,KAAM,UAEN8F,QAAS,sBACTC,UAAW,KAEb,KAAWC,WACX,KAAWC,KAAKR,GAChB,KAAWS,KAAK,KAChB,KAAWhW,OAAO,0BACb,YAAcd,GAA8C,GAAtC,CAAC,KAAW+W,SAAS,OAElD,IAiBF,OACE,gBAAC,IAAW,iBACNP,EAAK,CACTQ,kBAAmB,IACnBC,iBAlBqB,CAACC,EAAmBhY,KAC3C,MACMO,EAAU,CAAE,CADG,aAAkByX,IACLhY,GAClC,OACE,gBAAC,IAAqB,CAACO,QAASA,GAC7B,EAAG4B,UAAS+K,UAASlM,YACpBA,GACE,gBAAC,IAAU,CAACmB,QAASA,EAAS+K,QAASA,EAAS7F,QAAS,IAAkB4Q,aAYjFV,SAAUA,O,kCCnEhB,kCAAO,MAAMW,EAAiB,CAC5B/U,EACAgV,IACsB,OAAD,wBAClBhV,GAAQ,CACXuS,KAAM,GAAGyC,KAAUhV,EAASuS,U,kCCP9B,yQAsCA,MAAM0C,EAOF,EAAGC,iBAAgBC,aAAYvO,MAAKwO,YAAWC,uBACjD,MAAMC,EAAoBF,EAC1B,OAAOD,EACL,gBAACG,EAAiB,CAAC1O,IAAKA,EAAKsO,eAAgBA,IAE7C,gBAAC,IAAc,CACbtO,IAAKsO,EAAeK,UAAU,GAAGtX,SAASF,IAC1CmX,eAAgBA,EAChBM,OAAQJ,EACRC,iBAAkBA,KAKXI,EAAgD,EAC3DrV,YACAsV,qBACAC,gCAEA,MAAM,EAAE/W,GAAM,2BACRgX,EAAW,IACZF,EAAmBzL,IAAI,CAAC4L,EAAG9H,KAC5B,MAAM+H,EAAoBD,EAAEzV,UAAU2V,OAAO,CAACC,EAAKC,KACjDD,EAAIC,EAAE1D,MAAQnS,EAAU,YAAe6V,EAAGlI,GAAOwE,MAC1CyD,GACN,IACH,OACE,gBAAC,IAAS,CAACpP,IAAKiP,EAAErW,OAChB,gBAAC,IAAgB,CACfY,UAAW0V,EACXI,yBAA0BL,EAAEK,yBAC5B1W,MAAOqW,EAAErW,MACT2W,OAAQN,EAAEO,aAAe,aAAaP,EAAEzV,UAAU,GAAG3C,MACrD4Y,IAAKpB,EACLG,UAAWS,EAAES,kBACbnB,YAAY,UAKjBQ,EAA0B1L,IAAI,CAAC4L,EAAG9H,KACnC,MAAM+H,EAAoBD,EAAEzV,UAAU2V,OAAO,CAACC,EAAKC,KACjDD,EAAIC,EAAE1D,MAAQnS,EAAU,YAAe6V,EAAGlI,GAAOwE,MAC1CyD,GACN,IACH,OACE,gBAAC,IAAS,CAACpP,IAAKiP,EAAErW,OAChB,gBAAC,IAAgB,CACfY,UAAW0V,EACXI,yBAA0BL,EAAEK,yBAC5B1W,MAAOqW,EAAErW,MACT2W,OAAQN,EAAEO,aAAe,aAAaP,EAAEzV,UAAU,GAAG3C,MACrD4Y,IAAKpB,EACLG,UAAWS,EAAES,kBACbnB,YAAU,QAKlBoB,UACF,OACE,gBAAC,IAAK,CAAClW,WAAS,GACd,gBAAC,IAAS,KACPzB,EACC,iGAGHgX,IAKMY,EAAqB,YAChC,EACEpW,YACAqW,mBACAC,uBACAhB,qBACAC,gCAEA,MAAM,EAAE/W,GAAM,2BACd,YAAgB,KACd8W,EAAmBlC,QAAQ,CAACqC,EAAG9H,IAC7B8H,EAAEzV,UAAUoT,QAASyC,GAAMQ,EAAiB,YAAeR,EAAGlI,MAEzD,KACL2H,EAAmBlC,QAAQ,CAACqC,EAAG9H,IAC7B8H,EAAEzV,UAAUoT,QAASyC,GAAMS,EAAqB,YAAeT,EAAGlI,QAGrE,CAAC0I,EAAkBC,EAAsBhB,IAE5C,MAAMiB,EAAiBjB,EAAmBzL,IAAI,CAAC4L,EAAG9H,KAChD,MAAM+H,EAAoBD,EAAEzV,UAAU2V,OAAO,CAACC,EAAKC,KACjDD,EAAIC,EAAE1D,MAAQnS,EAAU,YAAe6V,EAAGlI,GAAOwE,OAAS,GACnDyD,GACN,IACH,GACE1C,OAAOC,KAAKuC,GAAmBc,KAAM5W,GAAa8V,EAAkB9V,GAAUlC,WAE9E,MAAO,CAAE+Y,OAAQ,IAAYC,eAE/B,GAAIxD,OAAOC,KAAKuC,GAAmBc,KAAM5W,IAAc8V,EAAkB9V,GAAUnC,QACjF,MAAO,CAAEgZ,OAAQ,IAAYE,SAE/B,MAAMC,EAAmBnB,EAAEK,yBAAyBJ,GACpD,IAAKkB,EAAiBtW,OACpB,MAAO,CAAEmW,OAAQ,IAAY9T,IAE/B,MAAMkU,EAAoB,YAAyBD,GACnD,MAAO,CACLH,OAAQI,EAAkB,GAAGzW,OAAOqW,OACpCtW,MAAO0W,EAAkBvW,UAIvBwW,EAAkB,YAAwBP,EAAgB/X,GAEhE,OACE,gBAAC,UAAU,CACTY,MAAOZ,EAAE,oBACT1C,MAAOgb,EAAgBL,OACvBM,QAASD,EAAgBE,cACzBC,WAAYzY,EAAE,2BAEd,gBAAC6W,EAAc,CACbrV,UAAWA,EACXsV,mBAAoBA,EACpBC,0BAA2BA,OAOxB2B,EAAgB,YAC3B,EACEC,WACAC,eACAC,aACArX,YACAqW,mBACAC,uBACAgB,YACAC,aAEA,MAAMC,EACJF,EAAUG,sBAAwBF,EAAOpS,IAAImS,EAAUG,mBAAmBpa,MAC5E,YAAgB,KACd8Z,EACEG,EAAUvL,IACTuL,EAAsEI,MAClEJ,EAAsEI,WACvE/a,GAEF6a,GACFnB,EAAiBiB,EAAUG,oBAEtB,KACLL,EAAaE,EAAUvL,KACnByL,GACFlB,EAAqBgB,EAAUG,sBAGlC,CAACN,EAAUC,EAAcf,EAAkBC,EAAsBgB,EAAWE,IAE/E,MAAMG,EAAeN,EAAWpS,MAAM,CAACqS,EAAUvL,IAAK,SAChD6L,EAAoBP,EAAWpS,MAAM,CAACqS,EAAUvL,IAAK,cAErD8L,EAAYP,EAAUG,mBACxBzX,EAAUsX,EAAUG,mBAAmBtF,MACvC,KACE9O,EAAciU,EAAUQ,cAAcH,EAAcC,EAAmBC,GAE7E,OACE,gBAAC,UAAU,CACTzY,MAAOkY,EAAUlY,MACjBtD,MAAOuH,EAAYvH,MACnBib,QAAS1T,EAAYP,QACrBmU,WAAYK,EAAUL,WACtBc,iBACET,EAAUU,eACLC,GACC,gBAAC,IAAc,CACb7C,OAAQkC,EAAUU,eAClBL,aAAcA,EACdC,kBAAmBA,EACnBC,UAAWA,EACXI,KAAMA,SAGVtb,MAODub,EAAuB,YAClC,EACE7B,mBACAC,uBACAtW,YACAmY,kBACAC,2BACAC,oBACAf,YACAC,aAEA,MAAM,EAAE/Y,GAAM,4BACR,eAAE8Z,GAAmB,aAAiB,KAEtCd,EACJF,EAAUG,sBAAwBF,EAAOpS,IAAImS,EAAUG,mBAAmBpa,MAC5E,YAAgB,KACdia,EAAUjW,QAAQ+R,QAASmF,GAAMJ,EAAgBI,IAC7Cf,GACFnB,EAAiBiB,EAAUG,oBAEtB,KACLH,EAAUjW,QAAQ+R,QAASmF,GAAMH,EAAyBG,IACtDf,GACFlB,EAAqBgB,EAAUG,sBAGlC,CACDpB,EACAC,EACA6B,EACAC,EACAd,EACAE,IAGF,MAAMgB,EAAe,UACnB,IACElB,EAAUjW,QAAQwI,IAAK0O,IACrB,MAAOtM,EAAU5M,GAAS,YAA2BgZ,EAAmBE,GACxE,MAAO,CACLtM,WACA5M,WAGN,CAACgZ,EAAmBf,EAAUjW,UAE1BwW,EAAYP,EAAUG,mBACxBzX,EAAUsX,EAAUG,mBAAmBtF,MACvC,KACE9O,EAAciU,EAAUQ,cAAcU,EAAcha,EAAGqZ,EAAWS,GAExE,OACE,gBAAC,UAAU,CACTlZ,MAAOkY,EAAUlY,MACjBtD,MAAOuH,EAAYvH,MACnBib,QAAS1T,EAAYP,QACrBmU,WAAYK,EAAUL,WACtBwB,eAAgBnB,EAAUmB,eAC1BC,wBAAyBpB,EAAUoB,wBACnCX,iBACET,EAAUU,eACLC,GACC,gBAAC,IAAc,CACb7C,OAAQkC,EAAUU,eAClBW,UAAWH,EACXX,UAAWA,EACXI,KAAMA,SAGVtb,MAODic,EAAwD,EAAGtB,YAAWrU,gBACjF,MAAM,EAAEzE,GAAM,4BAER,MAAEY,EAAK,UAAEY,EAAS,cAAE8X,EAAa,eAAEE,EAAc,WAAEf,GAAeK,EAElEuB,EAA6D,UAAc,IACxE,OAAP,wBACK7Y,GACCA,EAAU8Y,mBAAqB,CACjCA,kBAAmB,OAAF,wBAAO9Y,EAAU8Y,mBAAiB,CAAE7V,gBAGxD,CAACjD,EAAWiD,IAET8V,EAAoD,YACxDF,GAEIxV,EAA+ByU,EAAciB,EAAiBva,GAEpE,OACE,gBAAC,UAAU,CACTY,MAAOA,EACPtD,MAAOuH,EAAYvH,MACnBib,QAAS1T,EAAYP,QACrBmU,WAAYA,GAEXe,GAAkBe,GACjB,gBAAC,IAAc,eAAC3D,OAAQ4C,GAAoBe,EAAe,CAAE9V,UAAWA,Q,kCC3VhF,6CAGO,MAAM+V,EAA0B,gBAA6C,CAClFC,sBAAsB,EACtBC,oBAAqB,Q,kCCLvB,yGAYO,MAAMC,EAAoD,EAC/DnZ,YACA8V,2BACA1W,QACA2W,SACAE,MACAjB,YACAD,iBAEA,MAAM,EAAEvW,GAAM,2BACRa,EAAQ,IAASW,GAAWwW,KAAMX,GAAMA,EAAEnY,WAC1CkZ,EAAmBd,EAAyB9V,GAC5CoZ,EAAyB,YAAyBxC,GAAkByC,KAAK,CAACC,EAAGC,IACjFD,EAAEnE,UAAU,GAAGtX,SAASD,KAAK4b,cAAcD,EAAEpE,UAAU,GAAGtX,SAASD,OAE/D6b,EAAmBL,EAAuBM,MAAOjE,GAAMA,EAAErV,OAAOqW,SAAW,IAAY9T,IACvFgX,EAAa,cAAkB,IAAM,uBAAKlb,UAAU,iCAAmC,IAC7F,OAAKmY,EAAiBtW,OAKpB,gBAAC,qBAAkB,CACjBsZ,YACE,gCACE,4BAAOxa,GACP,wBAAMX,UAAU,6CACb,IACAD,EAAE,sDAAuD,CACxDqb,qBAAsBjD,EAAiBtW,WAK/CwZ,aAActb,EAAE,0BAEfa,EACC,uBAAKZ,UAAU,kBAAkBD,EAAE,kCAElCib,GACDL,EAAuBvP,IAAKiL,GAC1B,gBAACmB,EAAG,CACFzP,IAAKsO,EAAeK,UAAU,GAAGtX,SAASF,IAC1CqX,UAAWA,EACXF,eAAgBA,EAChBG,iBAAkB0E,EAClB5E,WAAYA,KAIlB,gBAAC,UAAU,CACT7X,MAAOsB,EAAE,gCAAiC,CACxC4B,OAAQwW,EAAiB,GAAGxW,OAAOhB,MAAM2a,gBAE3CC,KAAMpD,EAAiB,GAAGxW,OAAO4Z,MAEjC,gBAAC,OAAI,CAACnb,GAAIkX,GAASvX,EAAE,8BAtClB,O,yDC9BX,gRA8DA,MA2BMyb,EAA+B,CACnC5c,KAAM,aAAkB,uBACxB6c,YAAY,EACZtc,KAAM,UACNR,QAAQ,GAGG+c,EAAkD,EAAG5Z,oBAChE,MAAM,EAAE/B,GAAM,2BACR4b,EAAgB,YAAQ,IAAMC,kBAC7BC,EAAQ,CAAE5c,GAAa,YAAsB6C,IAC7Cga,EAAIC,GAAY,YACrBJ,EAAgBH,EAAc,IAI1BQ,EAFa,gBAGHL,GAAiBI,GAAY,aAAoBD,KAAQha,EACzE,OACE,gBAAC,UAAU,CAAClB,OAAQ,IAAU3B,IAC3B+c,GACC,gBAAC,aAAU,CACTjU,IAAI,gBACJ3D,KAAM,IACNC,QAAStE,EAAE,iDAEX,gBAAC,OAAI,CAACK,GAAG,kCAAkCL,EAAE,2BAGhD8b,EAAOzQ,IAAK6Q,GACX,gBAAC,UAAS,CAAClU,IAAK,YAASkU,EAAOA,EAAMC,KAAKrQ,IAAKoQ,MAAOA,OASlDE,EAAa,kBAHD9e,IAAqB,CAC5C+e,UAAW/e,EAAMgf,IAAI7V,MAAM,CAAC,YAAa,aAEjB,CAA0C,EAAG4V,gBACrE,MAAME,EAAsB,YAC1B,MAEKC,GAA8B,aAEnC,MAEIC,EAAa,UAAc,IA1EV,EACvBA,EAIAJ,IAEAI,EAAW3c,OAAQ4c,IACjB,GACE,YAAuCA,IACvC,YAA8CA,IAC9C,aAA8CA,IAC9C,aAAqDA,GACrD,CACA,MAAM5D,EAAY4D,EAKlB,QAAO5D,EAAU6D,WAAW1D,qBACzBH,EAAU6D,WAAW1D,mBAAmB2D,aACrCP,EAAU1V,IAAImS,EAAU6D,WAAW1D,mBAAmBpa,MAG9D,OAAO,IAmDoBge,CACzB,IAAIN,KAAwBC,GAC5BH,GAEwBhR,IAAKuC,IAC7B,GACE,aAA+CA,IAC/C,aAAsDA,IACtD,aAAoDA,GACpD,CACA,MAAMkP,EAAQlP,EAAE+O,WAAWnD,eACvB,CAAEA,eAAgB,IAAMhG,QAAQC,QAAQ7F,EAAE+O,WAAWnD,iBACrD,GACJ,OAAO,OAAP,wBACK5L,GAAC,CACJ+O,WAAY,OAAF,wBACL/O,EAAE+O,YACFG,KAIT,OAAOlP,IAER,CAAC2O,EAAqBC,EAA4BH,IAE/CU,EAAyB,UAC7B,IACEN,EAAWO,UACRpP,GACC,YAAmCA,IAAM,aAA2CA,IAE1F,CAAC6O,KAEG,EAAEzc,GAAM,2BACRid,EAA+D,GAoCrE,GAnCAR,EAAW7H,QAASkE,IAClB,GACE,YAAuCA,IACvC,aAA+CA,GAE/CmE,EAAY1Q,KAAK,CACf3L,MAAOkY,EAAU6D,WAAW/b,MAC5B4V,UAAW,gBAAC,IAAa,CAACsC,UAAWA,EAAU6D,WAAY5D,OAAQsD,WAEhE,GACL,YAA8CvD,IAC9C,aAAsDA,GACtD,CACA,MAAM,+BAAEoE,GAAmCpE,EAAU6D,WACrD,IACEO,aAA8B,EAA9BA,EAAgCpb,SAChCob,EAA+B3U,SAASqL,OAAOuJ,aAAaC,sBAE5D,OAEFH,EAAY1Q,KAAK,CACf3L,MAAOkY,EAAU6D,WAAW/b,MAC5B4V,UAAW,gBAAC,IAAoB,CAACsC,UAAWA,EAAU6D,WAAY5D,OAAQsD,WAG5E,YAA4CvD,IAC5C,aAAoDA,KAEpDmE,EAAY1Q,KAAK,CACf3L,MAAOkY,EAAU6D,WAAW/b,MAC5B4V,UAAW,gBAAC,IAAkB,CAACsC,UAAWA,EAAU6D,kBAK1B,IAA5BI,EAA+B,CACjC,MAAMM,EAAuE,GACvEtG,EAEc,GACpB0F,EAAW7H,QAAShH,IACd,aAA2CA,GAC7CmJ,EAA0BxK,KAAKqB,EAAE+O,YACxB,YAAmC/O,IAC5CyP,EAAmB9Q,KAAKqB,EAAE+O,cAG9BM,EAAY7L,OAAO2L,EAAwB,EAAG,CAC5Cnc,MAAO,YACP4V,UACE,gBAAC,IAAkB,CACjBM,mBAAoBuG,EACpBtG,0BAA2BA,MAMnC,OACE,gBAAC,IAAI,gBACU,cACb9W,UAAU,6BACVC,aAAW,EACXC,cAAY,GAEZ,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,OAAI,CAACC,GAAG,qBAAoB,YAAW,2BACrCL,EAAE,wBAITM,aAAa,EACbL,UAAW,8BAGb,gBAAC,IAAS,KAAED,EAAE,mBAEhB,gBAAC,UAAU,KACT,gBAAC,IAAO,CAACC,UAAU,6BAA6BwB,WAAS,GACtDwb,EAAY5R,IAAKiS,GAEd,gBAAC,IAAW,CAACtV,IAAKsV,EAAK1c,MAAK,YAAa0c,EAAK1c,OAC3C0c,EAAK9G,cAMhB,gBAACmF,EAAe,U,kCCvQtB,6CAIO,MAAM4B,EAAuB,gBAA0C,CAC5Elf,YAAa,OACbC,eAAgB,OAChBC,eAAgB,U,kCCPlB,4BA2Be,IAjB+B,EAAGuC,MAAKC,UAAS,KAC7D,gBAAC,IAAkB,KAChB,IAASD,EAAK,CAAC,SAASuK,IACvB,EAAG7N,OAAMoF,aACPA,IACC7B,GAAmB,eAATvD,IACT,gBAAC,IAAsB,CACrBwK,IAAK,IAAIxK,KAAQoF,IACjBhC,MAAOpD,EAAKyV,QAAQ,kBAAmB,UAEtCrQ,M,kCCpBb,0BAae,IAJ+B,EAAG3E,SAC/C,gBAAC,KAAS,CAACiK,UAAW,aAAcjK,M,kCCVtC,uJAcA,MAAMuf,EAA0B9I,OAAO+I,OAAO,CAC5C,CAAC,IAAUC,eAAgB,iCAC3B,CAAC,IAAUC,cAAe,0BAC1B,CAAC,IAAUC,cAAe,+CAGtBC,EAAcnJ,OAAO+I,OAAO,CAChC,CAAC,IAAUC,eAAgB,KAC3B,CAAC,IAAUC,cAAe,KAC1B,CAAC,IAAUC,cAAe,OAMtBE,EAAqB/e,GAClBA,EAAK6C,OAAOqD,WAChBnF,OAAO,EAAG8B,SAAQpE,WAAWoE,MAAW,SAAXA,IALJmc,EAK8CvgB,EAJ1E,CAAC,IAAUkgB,cAAe,IAAUC,aAAc,IAAUC,cAAcrV,SAASwV,IADxD,IAACA,IAMzB1S,IAAI,EAAG7N,UAAWA,GASVwgB,EAAoE,EAC/Ejf,OACAkB,YACAge,uB,MAEA,MAAM,EAAEje,GAAM,4BAER,eAAEke,EAAc,kBAAEC,GAAsB,UAAc,IAAMF,EAAiBlf,GAAO,CACxFkf,EACAlf,IAGIqf,EAAa,gBAAC,KAAM,CAACxc,OAAQ,YAAW7C,GAAOkB,UAAWA,IAEhE,OACE,gCACGie,EAAepc,OACd,gBAAC,IAAa,CAAClB,MAAOZ,EAAE,2BAA4Bqe,WAAYD,GAC9D,gBAAC,IAAK,KACHF,EAAe7S,IAAI,EAAG+B,UAASjO,SAC9B,gBAAC,IAAa,CAAC6I,IAAK7I,GAClB,gBAAC,IAAS,KAAEiO,OAKlB,EAGJ,gBAAC,KAAe,CAACxL,OAAQuc,IACD,QAAvB,EAAAL,EAAkB/e,UAAK,a,EAAEsM,IAAKiS,GAC7B,uBAAKtV,IAAKsV,GACR,gBAAC,IAAe,CACd1c,MAAO,IAAY0c,GACnBva,QAAS,IAAYua,GACrBgB,UAAW,IAAgBhB,GAAMve,EAAKM,SAASD,MAC/C6C,SAAU4b,EAAYP,GACtBiB,YAAave,EACX,iFACA,CAAEwe,qBAAsBhB,EAAwBF,WA0B/C,IAZ+B,EAAGve,OAAMkB,gBACrD,MAAMge,EAAmB,cAEzB,OACE,gBAACD,EAAwB,CACvBjf,KAAMA,EACNkB,UAAWA,EACXge,iBAAkBA,M,kCCrGxB,8DAuBO,MAAMQ,EAA0B,KACrC,MAAOC,GAAwB,aAAkC,MAE3DC,EAAkB,UAAc,KACpC,MAAMnd,EAAiD,GASvD,OAPAkd,EAAqB9J,QAAQ,EAAG+H,aAAYxd,UACtCwd,EAAWnb,WACbkT,OAAOC,KAAKgI,EAAWnb,WAAWoT,QAAS5M,IACzCxG,EAAU,GAAGrC,KAAO6I,KAAS2U,EAAWnb,UAAUwG,OAIjDxG,GACN,CAACkd,IAEEE,EAAiB,YAAqBD,GAE5C,OAAO,cACJ5f,IACC,MAAMqO,EAA4B,GAC5ByR,EAAqB,GAuB3B,OAtBAH,EAAqB9J,QACnB,EAAG+H,YAAcmC,iBAAgBle,QAAOme,WAAUvd,aAAarC,MAAK6f,WAAUxhB,WAC5E,MAAMyhB,EAAmC,GACrCzd,GACFkT,OAAOC,KAAKnT,GAAWoT,QAAS5M,IAC9BiX,EAAWjX,GAAO4W,EAAe,GAAGzf,KAAO6I,OAG/C,IACM+W,EAAShgB,EAAMkgB,KACjB7R,EAAQb,KAAK,CACXa,QAAS,gBAAC0R,EAAc,CAAC/f,KAAMA,EAAMyC,UAAWyd,IAChD9f,QAEF0f,EAAStS,KAAK3L,IAEhB,MAAOse,GAEP/L,QAAQtS,MAAM,aAAame,MAAaxhB,YAAgB0hB,MAIvD,CAAEhB,eAAgB9Q,EAAS+Q,kBAAmBU,IAEvD,CAACD,EAAgBF,M,kCCrErB,mBAYe,IAJ6B,EAAG3f,UAC7C,gCAAG,aAAaA,GAAM8b,OAAOvM,KAAK,OAAS,M,kCCT7C,8KAGY6Q,EAHZ,UAGA,SAAYA,GACV,wBACA,wBACA,8BACA,8BACA,wBACA,4BACA,kCACA,0CACA,0CACA,4CACA,oCACA,0CACA,kDACA,kDACA,oDACA,sCACA,sCACA,kDACA,oDACA,4CACA,kDACA,wDACA,sDACA,4DAxBF,CAAYA,MAAW,KA2BvB,MAAMtc,EAAU,CACd,CAACsc,EAAYtZ,WAAY,IAAW,sDACpC,CAACsZ,EAAYrZ,WAAY,IAAW,qDACpC,CAACqZ,EAAYlZ,cAAe,IAC1B,+GAEF,CAACkZ,EAAYjZ,cAAe,IAAW,sDACvC,CAACiZ,EAAYvX,WAAY,IAAW,yDACpC,CAACuX,EAAY3X,kBAAmB,IAC9B,qWAGF,CAAC2X,EAAY1X,kBAAmB,IAC9B,gLAEF,CAAC0X,EAAYC,wBAAyB,IACpC,wEAEF,CAACD,EAAYE,yBAA0B,IACrC,0EAIEC,EAAe,CACnB,CAACH,EAAYI,aAAc,IACzB,sJAEF,CAACJ,EAAYK,gBAAiB,IAC5B,+JAEF,CAACL,EAAYM,oBAAqB,IAChC,2GAEF,CAACN,EAAYO,oBAAqB,IAChC,gKAEF,CAACP,EAAYQ,qBAAsB,IACjC,iKAEF,CAACR,EAAYS,iBAAkB,IAC7B,iJAEF,CAACT,EAAYU,oBAAqB,IAChC,0JAEF,CAACV,EAAYW,wBAAyB,IACpC,sGAEF,CAACX,EAAYY,wBAAyB,IACpC,2JAEF,CAACZ,EAAYa,yBAA0B,IACrC,6JAIEld,EAAuB,CAC3B,CAACqc,EAAYpZ,wBAAyB,IACpC,mEAEF,CAACoZ,EAAYhZ,2BAA4B,IACvC,sEAEF,CAACgZ,EAAYnZ,0BAA2B,IACtC,qEAEF,CAACmZ,EAAY/Y,6BAA8B,IACzC,yEAIS6Z,EAAuBlhB,IAA4D,CAC9F,CAACogB,EAAYzX,qBAAsB,CACjC,CACEpB,MAAOzD,EAAQsc,EAAYC,wBAAwB,CAAErgB,SACrDmhB,KAAM,MAER,CACE5Z,MAAOzD,EAAQsc,EAAYE,yBAAyB,CAAEtgB,SACtDmhB,KAAM,UAKCC,EAA2BphB,IAAiB,CACvD,CAACogB,EAAYpZ,wBAAyBjD,EAAqBqc,EAAYpZ,wBAAwB,CAC7FhH,SAEF,CAACogB,EAAYhZ,2BAA4BrD,EACvCqc,EAAYhZ,2BACZ,CAAEpH,SACJ,CAACogB,EAAYnZ,0BAA2BlD,EACtCqc,EAAYnZ,0BACZ,CACAjH,SAEF,CAACogB,EAAY/Y,6BAA8BtD,EACzCqc,EAAY/Y,6BACZ,CAAErH,WAGOqhB,EAAwB,CAACrhB,EAAcshB,KAAsB,CACxE,CAAClB,EAAYtZ,WAAYhD,EAAQsc,EAAYtZ,WAAW,CAAE9G,SAC1D,CAACogB,EAAYrZ,WAAYjD,EAAQsc,EAAYrZ,WAAW,CAAE/G,SAC1D,CAACogB,EAAYlZ,cAAepD,EAAQsc,EAAYlZ,cAAc,CAAElH,SAChE,CAACogB,EAAYjZ,cAAerD,EAAQsc,EAAYjZ,cAAc,CAAEnH,SAChE,CAACogB,EAAYvX,WAAY/E,EAAQsc,EAAYvX,WAAW,CAAEyY,cAC1D,CAAClB,EAAY3X,kBAAmB3E,EAAQsc,EAAY3X,kBAAkB,CACpEzI,SAEF,CAACogB,EAAY1X,kBAAmB5E,EAAQsc,EAAY1X,kBAAkB,CACpE1I,WAISuhB,EAAyBD,IAAsB,CAC1D,CAAClB,EAAYI,aAAcD,EAAaH,EAAYI,aAAa,CAAEc,cACnE,CAAClB,EAAYK,gBAAiBF,EAAaH,EAAYK,gBAAgB,CAAEa,cACzE,CAAClB,EAAYM,oBAAqBH,EAAaH,EAAYM,oBAAoB,CAAEY,cACjF,CAAClB,EAAYO,oBAAqBJ,EAAaH,EAAYO,oBAAoB,CAAEW,cACjF,CAAClB,EAAYQ,qBAAsBL,EAAaH,EAAYQ,qBAAqB,CAC/EU,cAEF,CAAClB,EAAYS,iBAAkBN,EAAaH,EAAYS,iBAAiB,CAAES,cAC3E,CAAClB,EAAYU,oBAAqBP,EAAaH,EAAYU,oBAAoB,CAAEQ,cACjF,CAAClB,EAAYW,wBAAyBR,EAAaH,EAAYW,wBAAwB,CACrFO,cAEF,CAAClB,EAAYY,wBAAyBT,EAAaH,EAAYY,wBAAwB,CACrFM,cAEF,CAAClB,EAAYa,yBAA0BV,EAAaH,EAAYa,yBAAyB,CACvFK,iB,kCClKJ,sXAAO,MAAME,EAAqB,CAAC3a,GAAS,IAC1C,gFACEA,EAAS,SAAW,+BAGX4a,EACX,iSACWC,EACX,8KACWC,EACX,8IACWC,EACX,wMACWC,EACX,qIAEWC,EACX,gSACWC,EACX,0KACWC,EACX,+JACWC,EACX,sOACWC,EACX,yI,kCCzBF,yVAmCO,MAAMC,EAAsD,EACjEjc,aAAa,GACbC,sBACAic,oBAEA,IAAIC,GAA4B,EAC5Bxb,GAAkB,EACtB,MAAMyb,EAAoB3M,OAAOpE,OAC/B,IACErL,EAAW4V,KAAK,CAACC,EAAGC,IAAMD,EAAEtd,KAAKwd,cAAcD,EAAEvd,OAChDsK,GAAMA,EAAEtK,OAEX6N,IAAKiW,I,UACL,MAAMC,EAAUD,EAAItJ,KAAMlQ,GAAMA,EAAEyZ,SAQlC,OAPIA,IACFH,GAAmB,EACnBxb,EAGQ,wBAFyC,QAA/C,EAAkC,QAAlC,EAAwB,QAAxB,EAAAV,aAAmB,EAAnBA,EAAsB,UAAE,eAAE7F,gBAAQ,eAAEyK,mBAAW,eAC7C,+CAGC,CACLlJ,MAAO0gB,EAAI,GAAG9jB,KACdkB,MAAO6iB,EAAU,UAAY,OAC7B/F,KAAM+F,EACF,IAAmB,IAAYC,SAAShG,KACxC,IAAmB,IAAYrX,IAAIqX,SAGrC,EAAExb,GAAM,2BACd,OACE,gBAAC,IAAK,CAACyB,WAAS,GACd,gBAAC,IAAS,KACPzB,EACC,8FACA,CACEyhB,8BAA+B,0BAAwBC,kBAI1Dxc,aAAmB,EAAnBA,EAAqBpD,SACtB,gBAAC,IAAS,KACR,gBAAC,qBAAkB,CACjBsZ,YAAa,YACXlW,EAAoBpD,OACpB,0BAAwBmH,MACxB,0BAAwByY,aACxB,IAGDxc,EAAoBmG,IAAI,EAAGhM,cAC1B,gBAAC,UAAM,CAAC2I,IAAK3I,EAASF,KACpB,gBAAC,KAAY,CACXN,KAAM,aAAkB,2BACxBO,KAAMC,EAASD,KACfqF,UAAWpF,EAASoF,UACpBxE,UAAU,iCAOnBgF,EAAWnD,QACZ,gBAAC,IAAS,KACR,gBAAC,qBAAkB,CACjBsZ,YAAapb,EAAE,0BACfsb,aAActb,EAAE,uBAEfqhB,EAAkBhW,IAAKvD,GACtB,gBAAC,UAAM,iBAAKA,EAAC,CAAEE,IAAKF,EAAElH,QACnBkH,EAAElH,UAMZwgB,GACC,gBAAC,IAAS,KACR,gBAAC,IAAK,CACJ9b,QAAQ,UACRC,UAAQ,EACR3E,MAAgBZ,EAAT4F,EAAW,6BAAkC,mCACpD3F,UAAU,+BAET,YAAmB2F,MAIzBV,aAAmB,EAAnBA,EAAqBpD,QAAS,GAC7B,gBAAC,IAAS,KACR,gBAAC,IAAK,CACJwD,QAAQ,UACRC,UAAQ,EACR3E,MAAM,qBACNX,UAAU,+BAETD,EACC,sFACA,CACE2hB,wBAAyB,0BAAwB1Y,UAM1DkY,GACC,gBAAC,IAAS,KACR,gBAAC,IAAK,CAAC5b,UAAQ,EAAC3E,MAAOugB,EAAcvgB,MAAOX,UAAU,+BACnDkhB,EAAc7c,YAQdsd,EAAgD,CAC3DhjB,QAAQ,EACRC,KAAM,aAAkB,4BAiBbgjB,EAAmB,CAC9B9iB,EACA2F,EACAE,KAEA,MAAOkd,EAAOC,EAASC,GAActd,GAC9Bud,EAAQC,EAAUC,GAAevd,EACxC,GAAIod,GAAcG,EAChB,MAAO,CACL7kB,MAAO,IAAY4a,eAGvB,IAAK6J,IAAYG,EACf,MAAO,CACL5kB,MAAO,IAAY6a,SAGvB,MAAMhT,EAAa8c,EAAOniB,OAAQsiB,I,MAEhC,OADiB,IAAI,KAAqB,QAAP,EAAAA,EAAGzY,YAAI,eAAE0Y,WAAY,IACxCC,QAAQR,KAE1B,IAAK3c,EAAWrD,OACd,MAAO,CACLxE,MAAO,IAAY4a,cACnBqK,QAAQ,EACRhK,QAAS,IAAQvY,EAAE,+BAGvB,IAAIwiB,EAA4B,EAChC,MAAMvd,EAAa,IACjBE,EAAWkG,IACR+W,I,UACC,OASE,QATF,EAA4B,QAA5B,EAAO,QAAP,EAAAA,EAAGzY,YAAI,eAAE8Y,2BAAmB,eAAEpX,IAAKvD,IACjC,MAAMyZ,EA/CW,EACzBxiB,GACEvB,OAAMoE,SAAQ8gB,cAEhB,MAAMC,EAAgB5jB,EAAK6C,OAAOqD,WAAWvC,KAAMoF,GAAMA,EAAEtK,OAASA,GAAQsK,EAAElG,SAAWA,GACzF,IAAK+gB,EACH,OAAO,EAET,MAAMC,EAAiB,IAAIC,KAAKF,EAAcva,oBAAoB0a,UAC5DC,GAAc,IAAIF,MAAOC,UAE/B,OADeF,EAAiB,IAAOI,SAASN,EAAS,IACzCK,GAoCQE,CAAmBlkB,EAAM+I,GAIzC,OAHIyZ,GACFiB,IAEK,OAAP,wBACK1a,GAAC,CACJyZ,qBAEF,QAAI,MAIZ,MAAO,CACLjkB,MACEklB,GAAqBrd,EAAWrD,OAAS,GAA2B,IAAtBmD,EAAWnD,OACrD,IAAY0f,QACZ,IAAYrd,GAClBoU,QACEpT,EAAWrD,OAAS,EAChB,qBACA0gB,EACG,YAAUA,EAAmB,aAAhC,WACAvd,EAAWnD,OAAS,EACjB,YAAUmD,EAAWnD,OAAQ,aAAhC,WACA,IAAQ9B,EAAE,6BAChBiF,aACAE,eAWS+d,EAAoD,EAAG/B,oBAClE,MAAM,IAAEljB,EAAG,eAAEM,GAAmB,aAAiB,MAC1Ca,EAAMqF,GAAa,aAA+BxG,IACnD,EAAE+B,GAAM,2BACR0E,EAAU,YACdtF,GAAQqF,EACJ,CACEE,iBAAkB,sCAA4B,gBAC9CvF,OACAqF,kBAEFtG,GAEAyG,EAAe,YAA8Cgd,GAC7D/c,EAAcsc,EAChB,CAAE7jB,MAAO,IAAY4a,eACrB2J,EAAiB5jB,EAAKyG,EAASE,GAEnC,IAAIe,GAAqB,EACrBC,GAAS,EAkBb,OAjBA,IAAUf,EAAYI,WAAa6C,I,YACjC,OAAIA,EAAEyZ,UACJ5b,GAAqB,EACrBC,EAGQ,wBAF4C,QAAlD,EAAqC,QAArC,EAA2B,QAA3B,EAAsB,QAAtB,EAAAf,EAAYM,kBAAU,eAAG,UAAE,eAAE9F,gBAAQ,eAAEyK,mBAAW,eAChD,+CAEG,KAKXvL,EAAe,CACboH,qBACAC,WAIA,gBAAC,UAAU,eACThF,MAAOZ,EAAE,6BACTyY,WAAYzY,EAAE,8BACV6E,GAEJ,gBAACqc,EAAiB,CAChBjc,WAAYJ,EAAYI,WACxBC,oBAAqBL,EAAYM,WACjCgc,cAAeA,MAsBR,IAhBc,KAC3B,MAAM,IAAEljB,GAAQ,aAAiB,KACjC,OACE,gBAAC,UAAU,KACT,gBAAC,IAAO,CAACgC,UAAU,6BAA6BwB,WAAS,GACvD,gBAAC,IAAW,KACV,gBAAC,IAAU,CAACxB,UAAU,yBAAyBlB,KAAMd,KAEvD,gBAAC,IAAW,KACV,gBAACilB,EAAgB,W,+mBC/RpB,MAAMC,EAAyB,gBAAoB,CACxD1gB,OAAQ,GACRxB,SAAU,KAGNmiB,EAAe,CAACC,EAAsBC,KAC1C,MAAM,OAAE7gB,EAAM,SAAExB,GAAa,aAAiBkiB,GAC9C,OAAO,UAAc,KACnB,MAAMtgB,EAAU,YAAsBJ,GACtC,MAAO,CACL,CACE6D,MAAOzD,EAAQwgB,GACfniB,MAAO,eACPqiB,OAAQ,aAEV,CACEjd,MAAOzD,EAAQygB,GACfpiB,MAAO,WACPI,cAAe,iBAAiBL,EAChCsiB,OAAQ,SAGX,CAACF,EAASC,EAAU7gB,EAAQxB,KAQpBuiB,EAAsC,I,IAAA,QAAEzgB,EAAO,SAAEY,EAAQ,MAAE/C,GAAK,EAAK6iB,EAAI,IAAnC,gCACjD,MAAMnF,EAAY8E,EAAa,IAAYxD,gBAAiB,IAAYL,cAClE,EAAEvf,GAAM,2BACd,OACE,gBAAC,IAAe,CACd+C,QAASA,EACTnC,MAAOA,GAASZ,EAAE,mBAClBse,UAAWA,EACXrc,SAAU,KACV0B,SAAUA,GAEV,gBAAC,IAAU,iBAAK8f,EAAI,CAAE1gB,QAASA,OAKxB2gB,EAAyC,I,IAAA,QAAE3gB,EAAO,SAAEY,EAAQ,MAAE/C,GAAK,EAAK6iB,EAAI,IAAnC,gCACpD,MAAMnF,EAAY8E,EAAa,IAAYvD,mBAAoB,IAAYL,iBACrE,EAAExf,GAAM,2BACd,OACE,gBAAC,IAAe,CACd+C,QAASA,EACTnC,MAAOA,GAASZ,EAAE,sBAClBse,UAAWA,EACXrc,SAAU,KACV0B,SAAUA,GAEV,gBAAC,IAAU,iBAAK8f,EAAI,CAAE1gB,QAASA,OAKxB4gB,EAAuD,EAAG5gB,cACrE,MAAM,EAAE/C,GAAM,2BACRse,EAAY8E,EAChB,IAAYtD,uBACZ,IAAYL,oBAEd,OACE,gBAAC,IAAe,CACd7e,MAAOZ,EAAE,0BACT+C,QAASA,EACTub,UAAWA,EACXrc,SAAU,QAKH2hB,EAAsD,EAAG7gB,cACpE,MAAM,EAAE/C,GAAM,2BACRse,EAAY8E,EAChB,IAAYrD,uBACZ,IAAYL,oBAEd,OACE,gBAAC,IAAe,CACd9e,MAAOZ,EAAE,0BACT+C,QAASA,EACTub,UAAWA,EACXrc,SAAU,QAKH4hB,EAAuD,EAAG9gB,cACrE,MAAM,EAAE/C,GAAM,2BACRse,EAAY8E,EAChB,IAAYpD,wBACZ,IAAYL,qBAEd,OACE,gBAAC,IAAe,CACd/e,MAAOZ,EAAE,2BACT+C,QAASA,EACTub,UAAWA,EACXrc,SAAU","file":"node-detail-chunk-e67cfae33cbe5b04cd45.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport ActivityCard from './ActivityCard';\nimport DetailsCard from './DetailsCard';\nimport InventoryCard from './InventoryCard';\nimport { NodeDashboardContext, HealthCheck } from './NodeDashboardContext';\nimport StatusCard from './StatusCard';\nimport UtilizationCard from './UtilizationCard';\n\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nexport enum ActionType {\n  CPU_LIMIT = 'CPU_LIMIT',\n  MEMORY_LIMIT = 'MEMORY_LIMIT',\n  HEALTH_CHECK = 'HEALTH_CHECK',\n  OBJ = 'OBJ',\n}\n\nexport const initialState = (obj: NodeKind): NodeDashboardState => ({\n  obj,\n  cpuLimit: undefined,\n  memoryLimit: undefined,\n  healthCheck: undefined,\n});\n\nexport const reducer = (state: NodeDashboardState, action: NodeDashboardAction) => {\n  switch (action.type) {\n    case ActionType.CPU_LIMIT: {\n      if (_.isEqual(action.payload, state.cpuLimit)) {\n        return state;\n      }\n      return {\n        ...state,\n        cpuLimit: action.payload,\n      };\n    }\n    case ActionType.MEMORY_LIMIT: {\n      if (_.isEqual(action.payload, state.memoryLimit)) {\n        return state;\n      }\n      return {\n        ...state,\n        memoryLimit: action.payload,\n      };\n    }\n    case ActionType.HEALTH_CHECK: {\n      if (_.isEqual(action.payload, state.healthCheck)) {\n        return state;\n      }\n      return {\n        ...state,\n        healthCheck: action.payload,\n      };\n    }\n    case ActionType.OBJ: {\n      if (action.payload === state.obj) {\n        return state;\n      }\n      return {\n        ...state,\n        obj: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst NodeDashboard: React.FC<NodeDashboardProps> = ({ obj }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState(obj));\n\n  if (obj !== state.obj) {\n    dispatch({ type: ActionType.OBJ, payload: obj });\n  }\n\n  const setCPULimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.CPU_LIMIT, payload }),\n    [],\n  );\n  const setMemoryLimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.MEMORY_LIMIT, payload }),\n    [],\n  );\n  const setHealthCheck = React.useCallback(\n    (payload: HealthCheck) => dispatch({ type: ActionType.HEALTH_CHECK, payload }),\n    [],\n  );\n\n  const context = {\n    obj,\n    cpuLimit: state.cpuLimit,\n    memoryLimit: state.memoryLimit,\n    healthCheck: state.healthCheck,\n    setCPULimit,\n    setMemoryLimit,\n    setHealthCheck,\n  };\n\n  return (\n    <NodeDashboardContext.Provider value={context}>\n      <Dashboard>\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n      </Dashboard>\n    </NodeDashboardContext.Provider>\n  );\n};\n\nexport default NodeDashboard;\n\ntype NodeDashboardProps = {\n  obj: NodeKind;\n};\n\ntype NodeDashboardState = {\n  obj: NodeKind;\n  cpuLimit: LimitRequested;\n  memoryLimit: LimitRequested;\n  healthCheck: HealthCheck;\n};\n\ntype NodeDashboardAction =\n  | { type: ActionType.CPU_LIMIT; payload: LimitRequested }\n  | { type: ActionType.MEMORY_LIMIT; payload: LimitRequested }\n  | { type: ActionType.HEALTH_CHECK; payload: HealthCheck }\n  | { type: ActionType.OBJ; payload: NodeKind };\n","import * as React from 'react';\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { EventModel, NodeModel } from '@console/internal/models';\nimport { EventKind, NodeKind } from '@console/internal/module/k8s';\nimport ActivityBody, {\n  RecentEventsBody,\n  OngoingActivityBody,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { NodeDashboardContext } from './NodeDashboardContext';\n\nconst eventsResource = {\n  isList: true,\n  kind: EventModel.kind,\n};\n\nconst nodeEventsFilter = (event: EventKind, uid: string, kind: string, name: string): boolean => {\n  const { uid: objectUID, kind: objectKind, name: objectName } = event?.involvedObject || {};\n  return objectUID === uid && objectKind === kind && objectName === name;\n};\n\nconst RecentEvent: React.FC<RecentEventProps> = ({ node }) => {\n  const [data, loaded, loadError] = useK8sWatchResource<EventKind[]>(eventsResource);\n  const { uid, name } = node.metadata;\n  const eventsFilter = React.useCallback(\n    (event) => nodeEventsFilter(event, uid, NodeModel.kind, name),\n    [uid, name],\n  );\n  return <RecentEventsBody events={{ data, loaded, loadError }} filter={eventsFilter} />;\n};\n\nconst ActivityCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const eventsLink = `${resourcePathFromModel(NodeModel, obj.metadata.name)}/events`;\n  const { t } = useTranslation();\n  return (\n    <Card\n      data-test-id=\"activity-card\"\n      className=\"co-overview-card--gradient\"\n      isClickable\n      isSelectable\n    >\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to={eventsLink}>{t('console-app~View events')}</Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('console-app~Activity')}</CardTitle>\n      </CardHeader>\n      <ActivityBody className=\"co-project-dashboard__activity-body\">\n        <OngoingActivityBody loaded />\n        <RecentEvent node={obj} />\n      </ActivityBody>\n    </Card>\n  );\n};\n\ntype RecentEventProps = {\n  node: NodeKind;\n};\n\nexport default ActivityCard;\n","import * as React from 'react';\nimport { OverviewDetailItem } from '@openshift-console/plugin-shared/src';\nimport { Card, CardBody, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { NodeModel } from '@console/internal/models';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport { getNodeAddresses } from '@console/shared/src/selectors/node';\nimport NodeIPList from '../NodeIPList';\nimport NodeRoles from '../NodeRoles';\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport NodeUptime from './NodeUptime';\n\nconst DetailsCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const detailsLink = `${resourcePathFromModel(NodeModel, obj.metadata.name)}/details`;\n  const instanceType = obj.metadata.labels?.['beta.kubernetes.io/instance-type'];\n  const zone = obj.metadata.labels?.['topology.kubernetes.io/zone'];\n  const { t } = useTranslation();\n  return (\n    <Card data-test-id=\"details-card\" isClickable isSelectable>\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to={detailsLink}>{t('console-app~View all')}</Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('console-app~Details')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <DetailsBody>\n          <OverviewDetailItem isLoading={!obj} title={t('console-app~Node name')}>\n            {obj.metadata.name}\n          </OverviewDetailItem>\n          <OverviewDetailItem isLoading={!obj} title={t('console-app~Roles')}>\n            <NodeRoles node={obj} />\n          </OverviewDetailItem>\n          <OverviewDetailItem\n            isLoading={!obj}\n            title={t('console-app~Instance type')}\n            error={!instanceType ? t('console-app~Not available') : undefined}\n          >\n            {instanceType}\n          </OverviewDetailItem>\n          <OverviewDetailItem\n            isLoading={!obj}\n            title={t('console-app~Zone')}\n            error={!zone ? t('console-app~Not available') : undefined}\n          >\n            {zone}\n          </OverviewDetailItem>\n          <OverviewDetailItem isLoading={!obj} title={t('console-app~Node addresses')}>\n            <NodeIPList ips={getNodeAddresses(obj)} expand />\n          </OverviewDetailItem>\n          <OverviewDetailItem isLoading={!obj} title={t('console-app~Uptime')}>\n            <NodeUptime obj={obj} />\n          </OverviewDetailItem>\n        </DetailsBody>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default DetailsCard;\n","import * as React from 'react';\nimport { Card, CardBody, CardHeader, CardTitle, Stack, StackItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { PodModel, NodeModel } from '@console/internal/models';\nimport { referenceForModel, K8sResourceCommon, K8sKind } from '@console/internal/module/k8s';\nimport InventoryItem, {\n  ResourceInventoryItem,\n  StatusGroupMapper,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { getPodStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { NodeDashboardContext } from './NodeDashboardContext';\n\nexport const NodeInventoryItem: React.FC<NodeInventoryItemProps> = ({\n  nodeName,\n  model,\n  mapper,\n}) => {\n  const resource = React.useMemo(\n    () => ({\n      kind: model.crd ? referenceForModel(model) : model.kind,\n      fieldSelector: `spec.nodeName=${nodeName}`,\n      isList: true,\n    }),\n    [nodeName, model],\n  );\n  const [data, loaded, loadError] = useK8sWatchResource<K8sResourceCommon[]>(resource);\n  const basePath = `${resourcePathFromModel(NodeModel, nodeName)}/pods`;\n\n  return (\n    <ResourceInventoryItem\n      kind={model}\n      isLoading={!loaded}\n      error={!!loadError}\n      resources={data}\n      mapper={mapper}\n      basePath={basePath}\n    />\n  );\n};\n\nconst InventoryCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const { t } = useTranslation();\n\n  return (\n    <Card data-test-id=\"inventory-card\">\n      <CardHeader>\n        <CardTitle>{t('console-app~Inventory')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Stack hasGutter>\n          <StackItem>\n            <NodeInventoryItem\n              nodeName={obj.metadata.name}\n              model={PodModel}\n              mapper={getPodStatusGroups}\n            />\n          </StackItem>\n          <StackItem>\n            <InventoryItem\n              isLoading={!obj}\n              title={t('console-app~Image')}\n              titlePlural={t('console-app~Images')}\n              count={obj.status?.images?.length}\n              error={!obj.status?.images}\n            />\n          </StackItem>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\ntype NodeInventoryItemProps = {\n  nodeName: string;\n  model: K8sKind;\n  mapper?: StatusGroupMapper;\n};\n\nexport default InventoryCard;\n","import * as React from 'react';\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { DashboardAlerts } from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/status-card';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport NodeAlerts from './NodeAlerts';\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport NodeHealth from './NodeHealth';\n\nconst StatusCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const { t } = useTranslation();\n  return (\n    <Card data-test-id=\"status-card\" className=\"co-overview-card--gradient\">\n      <CardHeader>\n        <CardTitle>{t('console-app~Status')}</CardTitle>\n      </CardHeader>\n      {obj ? (\n        <>\n          <NodeHealth />\n          <NodeAlerts />\n          <DashboardAlerts labelSelector={{ node: obj.metadata.name }} />\n        </>\n      ) : (\n        <LoadingInline />\n      )}\n    </Card>\n  );\n};\n\nexport default StatusCard;\n","import * as React from 'react';\nimport { Button, Popover as PFPopover, PopoverPosition } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { NodeDashboardContext } from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport {\n  getUtilizationQueries,\n  getResourceQutoaQueries,\n  NodeQueries,\n} from '@console/app/src/components/nodes/node-dashboard/queries';\nimport { LIMIT_STATE, Humanize } from '@console/dynamic-plugin-sdk';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { humanizeCpuCores, humanizeBinaryBytes } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { MachineModel } from '@console/internal/models';\nimport { MachineKind, MachineHealthCheckKind } from '@console/internal/module/k8s';\nimport { StatusItem } from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport { usePrometheusQuery } from '@console/shared/src/components/dashboard/utilization-card/prometheus-hook';\nimport { LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport {\n  YellowResourcesAlmostFullIcon,\n  RedResourcesFullIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared/src/components/status/icons';\nimport {\n  getNodeAddresses,\n  getNodeMachineNameAndNamespace,\n} from '@console/shared/src/selectors/node';\nimport * as msg from './messages';\nimport { getMachineHealth, HealthChecksPopup, machineHealthChecksResource } from './NodeHealth';\nimport {\n  CPUPopover,\n  MemoryPopover,\n  NodeUtilizationContext,\n  PopoverProps,\n} from './utilization-popovers';\n\nconst LimitLink: React.FC<LimitLinkProps> = ({\n  humanize,\n  currentKey,\n  totalKey,\n  limitKey,\n  requestedKey,\n  limitState,\n  requestedState,\n  Popover,\n}) => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const nodeName = obj.metadata.name;\n  const nodeIP = getNodeAddresses(obj).find((addr) => addr.type === 'InternalIP')?.address;\n  const [queries, resourceQuotaQueries] = React.useMemo(\n    () => [getUtilizationQueries(nodeName, nodeIP), getResourceQutoaQueries(nodeName)],\n    [nodeIP, nodeName],\n  );\n  const [current, currentError, currentValue] = usePrometheusQuery(queries[currentKey], humanize);\n  const [total, totalError, totalValue] = usePrometheusQuery(queries[totalKey], humanize);\n  const [limit, limitError] = usePrometheusQuery(resourceQuotaQueries[limitKey], humanize);\n  const [requested, requestedError] = usePrometheusQuery(\n    resourceQuotaQueries[requestedKey],\n    humanize,\n  );\n  const { t } = useTranslation();\n  const available =\n    currentValue && totalValue\n      ? humanize(totalValue - currentValue).string\n      : t('console-app~Not available');\n\n  return (\n    <NodeUtilizationContext.Provider value={{ nodeName, nodeIP }}>\n      <Popover\n        title={t('console-app~See breakdown')}\n        current={currentError ? t('console-app~Not available') : current.string}\n        total={totalError ? t('console-app~Not available') : total.string}\n        limit={limitError ? t('console-app~Not available') : limit.string}\n        requested={requestedError ? t('console-app~Not available') : requested.string}\n        available={available}\n        limitState={limitState}\n        requestedState={requestedState}\n        position={PopoverPosition.right}\n      />\n    </NodeUtilizationContext.Provider>\n  );\n};\n\nconst getMessage: GetMessage = (\n  limitState,\n  { limReqErr, limReqWarn, limErr, limWarn, reqWarn },\n) => {\n  const { limit, requested } = limitState || {};\n  if (!limitState || (limit === LIMIT_STATE.OK && requested === LIMIT_STATE.OK)) {\n    return null;\n  }\n  if (limit === LIMIT_STATE.ERROR) {\n    return {\n      Icon: RedResourcesFullIcon,\n      message: requested === LIMIT_STATE.OK ? limErr : limReqErr,\n    };\n  }\n  if (limit === LIMIT_STATE.WARN) {\n    return {\n      Icon: YellowResourcesAlmostFullIcon,\n      message: requested === LIMIT_STATE.OK ? limWarn : limReqWarn,\n    };\n  }\n  return {\n    Icon: YellowResourcesAlmostFullIcon,\n    message: reqWarn,\n  };\n};\n\nconst HealthChecksLink: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const [name, namespace] = getNodeMachineNameAndNamespace(obj);\n\n  const machine = useK8sWatchResource<MachineKind>(\n    name && namespace\n      ? {\n          groupVersionKind: getGroupVersionKindForModel(MachineModel),\n          name,\n          namespace,\n        }\n      : undefined,\n  );\n  const healthChecks = useK8sWatchResource<MachineHealthCheckKind[]>(machineHealthChecksResource);\n  const healthState = getMachineHealth(obj, machine, healthChecks);\n  const { t } = useTranslation();\n  return (\n    <PFPopover\n      position={PopoverPosition.top}\n      headerContent={t('console-app~Health checks')}\n      bodyContent={\n        <HealthChecksPopup\n          conditions={healthState.conditions}\n          machineHealthChecks={healthState.matchingHC}\n        />\n      }\n      enableFlip\n      maxWidth=\"21rem\"\n    >\n      <Button variant=\"link\" isInline className=\"co-status-card__popup\">\n        {t('console-app~See details')}\n      </Button>\n    </PFPopover>\n  );\n};\n\nconst NodeAlerts: React.FC = ({ children }) => {\n  const { cpuLimit, memoryLimit, healthCheck } = React.useContext(NodeDashboardContext);\n  const { t } = useTranslation();\n\n  const cpuMessage = getMessage(cpuLimit, {\n    limReqErr: msg.CPU_LIMIT_REQ_ERROR,\n    limErr: msg.CPU_LIMIT_ERROR,\n    limReqWarn: msg.CPU_LIMIT_REQ_WARN,\n    limWarn: msg.CPU_LIMIT_WARN,\n    reqWarn: msg.CPU_REQ_WARN,\n  });\n  const memoryMessage = getMessage(memoryLimit, {\n    limReqErr: msg.MEM_LIMIT_REQ_ERROR,\n    limErr: msg.MEM_LIMIT_ERROR,\n    limReqWarn: msg.MEM_LIMIT_REQ_WARN,\n    limWarn: msg.MEM_LIMIT_WARN,\n    reqWarn: msg.MEM_REQ_WARN,\n  });\n\n  return (\n    <AlertsBody>\n      {!!healthCheck?.failingHealthCheck && (\n        <StatusItem\n          Icon={YellowExclamationTriangleIcon}\n          message={msg.CONDITIONS_WARNING(healthCheck.reboot)}\n        >\n          <HealthChecksLink />\n        </StatusItem>\n      )}\n      {!!cpuMessage && (\n        <StatusItem\n          Icon={cpuMessage.Icon}\n          message={t('console-app~{{ cpuMessage }}', { cpuMessage: cpuMessage.message })}\n        >\n          <LimitLink\n            humanize={humanizeCpuCores}\n            currentKey={NodeQueries.CPU_USAGE}\n            totalKey={NodeQueries.CPU_TOTAL}\n            limitKey={NodeQueries.POD_RESOURCE_LIMIT_CPU}\n            requestedKey={NodeQueries.POD_RESOURCE_REQUEST_CPU}\n            limitState={cpuLimit?.limit}\n            requestedState={cpuLimit?.requested}\n            Popover={CPUPopover}\n          />\n        </StatusItem>\n      )}\n      {!!memoryMessage && (\n        <StatusItem\n          Icon={memoryMessage.Icon}\n          message={t('console-app~{{ memoryMessage }}', { memoryMessage: memoryMessage.message })}\n        >\n          <LimitLink\n            humanize={humanizeBinaryBytes}\n            currentKey={NodeQueries.MEMORY_USAGE}\n            totalKey={NodeQueries.MEMORY_TOTAL}\n            limitKey={NodeQueries.POD_RESOURCE_LIMIT_MEMORY}\n            requestedKey={NodeQueries.POD_RESOURCE_REQUEST_MEMORY}\n            limitState={memoryLimit?.limit}\n            requestedState={memoryLimit?.requested}\n            Popover={MemoryPopover}\n          />\n        </StatusItem>\n      )}\n      {children}\n    </AlertsBody>\n  );\n};\n\nexport default NodeAlerts;\n\ntype GetMessage = (\n  state: LimitRequested,\n  messages: {\n    limReqErr: string;\n    limErr: string;\n    limReqWarn: string;\n    limWarn: string;\n    reqWarn: string;\n  },\n) => {\n  Icon: React.ComponentType;\n  message: string;\n};\n\ntype LimitLinkProps = {\n  humanize: Humanize;\n  currentKey: string;\n  totalKey: string;\n  limitKey: string;\n  requestedKey: string;\n  limitState: LIMIT_STATE;\n  requestedState: LIMIT_STATE;\n  Popover: React.ComponentType<PopoverProps>;\n};\n","import * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\nimport {\n  watchPrometheusQuery,\n  stopWatchPrometheusQuery,\n} from '@console/internal/actions/dashboards';\nimport {\n  getInstantVectorStats,\n  GetRangeStats,\n  GetInstantStats,\n} from '@console/internal/components/graphs/utils';\nimport { Humanize, HumanizeResult } from '@console/internal/components/utils/types';\nimport { RESULTS_TYPE } from '@console/internal/reducers/dashboards';\nimport { RootState } from '@console/internal/redux';\n\n/** @deprecated use usePrometheusPoll() instead */\nexport const usePrometheusQuery: UsePrometheusQuery = (query, humanize) => {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(watchPrometheusQuery(query));\n    return () => {\n      dispatch(stopWatchPrometheusQuery(query));\n    };\n  }, [dispatch, query]);\n\n  const queryResult = useSelector<RootState, ImmutableMap<string, any>>(({ dashboards }) =>\n    dashboards.getIn([RESULTS_TYPE.PROMETHEUS, query]),\n  );\n  const results = React.useMemo<[HumanizeResult, any, number]>(() => {\n    if (!queryResult || !queryResult.get('data')) {\n      return [{}, null, null] as [HumanizeResult, any, number];\n    }\n    const value = getInstantVectorStats(queryResult.get('data'))[0]?.y;\n    return [humanize(value), queryResult.get('loadError'), value];\n  }, [queryResult, humanize]);\n\n  return results;\n};\n\nconst customSelectorCreator = createSelectorCreator(defaultMemoize, shallowEqual);\n\n/** @deprecated use usePrometheusPoll() instead */\nexport const usePrometheusQueries = <R extends any>(\n  queries: string[],\n  parser?: GetInstantStats | GetRangeStats,\n  namespace?: string,\n  timespan?: number,\n): UsePrometheusQueriesResult<R> => {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    queries.forEach((query) => dispatch(watchPrometheusQuery(query, namespace, timespan)));\n    return () => {\n      queries.forEach((query) => dispatch(stopWatchPrometheusQuery(query, timespan)));\n    };\n  }, [dispatch, queries, namespace, timespan]);\n\n  const selectors = React.useMemo(\n    () =>\n      queries.map((q) => ({ dashboards }) =>\n        dashboards.getIn([RESULTS_TYPE.PROMETHEUS, timespan ? `${q}@${timespan}` : q]),\n      ),\n    [queries, timespan],\n  );\n\n  const querySelector = React.useMemo(() => customSelectorCreator(selectors, (...data) => data), [\n    selectors,\n  ]);\n\n  const queryResults = useSelector<RootState, ImmutableMap<string, any>>(querySelector);\n\n  const results = React.useMemo<UsePrometheusQueriesResult<R>>(() => {\n    if (_.isEmpty(queryResults?.[0])) {\n      return [queries.map(() => []), true, null];\n    }\n    const values = queryResults.reduce((acc: R[], curr) => {\n      const data = curr.get('data');\n      const value = parser ? parser(data) : data;\n      return [...acc, value];\n    }, []);\n    const loadError: boolean = queryResults.some((res) => !!res.get('loadError'));\n    const loading: boolean = values.some((res) => !res);\n    return [values, loading, loadError];\n  }, [queryResults, queries, parser]);\n\n  return results;\n};\n\ntype UsePrometheusQuery = (query: string, humanize: Humanize) => [HumanizeResult, any, number];\n// [data, loading, loadError]\ntype UsePrometheusQueriesResult<R> = [R[], boolean, boolean];\n","import * as React from 'react';\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PrometheusUtilizationItem,\n  PrometheusMultilineUtilizationItem,\n} from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/utilization-card';\nimport {\n  humanizeCpuCores,\n  humanizeBinaryBytes,\n  humanizeDecimalBytesPerSec,\n  humanizeNumber,\n} from '@console/internal/components/utils';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { UtilizationDurationDropdown } from '@console/shared/src/components/dashboard/utilization-card/UtilizationDurationDropdown';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { getNodeAddresses } from '@console/shared/src/selectors/node';\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport {\n  NodeQueries,\n  getUtilizationQueries,\n  getMultilineQueries,\n  getResourceQutoaQueries,\n} from './queries';\nimport {\n  CPUPopover,\n  NetworkInPopover,\n  NetworkOutPopover,\n  NodeUtilizationContext,\n  MemoryPopover,\n  FilesystemPopover,\n} from './utilization-popovers';\n\nconst networkPopovers = [NetworkInPopover, NetworkOutPopover];\n\nconst UtilizationCard: React.FC = () => {\n  const { t } = useTranslation();\n  const { obj, setCPULimit, setMemoryLimit } = React.useContext(NodeDashboardContext);\n\n  const nodeName = obj.metadata.name;\n  const nodeIP = getNodeAddresses(obj).find((addr) => addr.type === 'InternalIP')?.address;\n\n  const [queries, multilineQueries, resourceQuotaQueries] = React.useMemo(\n    () => [\n      getUtilizationQueries(nodeName, nodeIP),\n      getMultilineQueries(nodeName),\n      getResourceQutoaQueries(nodeName),\n    ],\n    [nodeIP, nodeName],\n  );\n\n  return (\n    <Card data-test-id=\"utilization-card\" isClickable isSelectable>\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <UtilizationDurationDropdown />\n            </>\n          ),\n          hasNoOffset: false,\n          className: undefined,\n        }}\n      >\n        <CardTitle>{t('console-app~Utilization')}</CardTitle>\n      </CardHeader>\n      <UtilizationBody>\n        <NodeUtilizationContext.Provider value={{ nodeIP, nodeName }}>\n          <PrometheusUtilizationItem\n            title={t('console-app~CPU')}\n            humanizeValue={humanizeCpuCores}\n            utilizationQuery={queries[NodeQueries.CPU_USAGE]}\n            totalQuery={queries[NodeQueries.CPU_TOTAL]}\n            limitQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_CPU]}\n            requestQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_CPU]}\n            TopConsumerPopover={CPUPopover}\n            setLimitReqState={setCPULimit}\n          />\n          <PrometheusUtilizationItem\n            title={t('console-app~Memory')}\n            humanizeValue={humanizeBinaryBytes}\n            utilizationQuery={queries[NodeQueries.MEMORY_USAGE]}\n            totalQuery={queries[NodeQueries.MEMORY_TOTAL]}\n            limitQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_MEMORY]}\n            requestQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_MEMORY]}\n            byteDataType={ByteDataTypes.BinaryBytes}\n            TopConsumerPopover={MemoryPopover}\n            setLimitReqState={setMemoryLimit}\n          />\n          <PrometheusUtilizationItem\n            title={t('console-app~Filesystem')}\n            humanizeValue={humanizeBinaryBytes}\n            utilizationQuery={queries[NodeQueries.FILESYSTEM_USAGE]}\n            totalQuery={queries[NodeQueries.FILESYSTEM_TOTAL]}\n            byteDataType={ByteDataTypes.BinaryBytes}\n            TopConsumerPopover={FilesystemPopover}\n          />\n          <PrometheusMultilineUtilizationItem\n            title={t('console-app~Network transfer')}\n            humanizeValue={humanizeDecimalBytesPerSec}\n            queries={multilineQueries[NodeQueries.NETWORK_UTILIZATION]}\n            TopConsumerPopovers={networkPopovers}\n          />\n          <PrometheusUtilizationItem\n            title={t('console-app~Pod count')}\n            humanizeValue={humanizeNumber}\n            utilizationQuery={queries[NodeQueries.POD_COUNT]}\n          />\n        </NodeUtilizationContext.Provider>\n      </UtilizationBody>\n    </Card>\n  );\n};\n\nexport default UtilizationCard;\n","import * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport NodeDetailsConditions from './NodeDetailsConditions';\nimport NodeDetailsImages from './NodeDetailsImages';\nimport NodeDetailsOverview from './NodeDetailsOverview';\n\ntype NodeDetailsProps = {\n  obj: NodeKind;\n};\n\nconst NodeDetails: React.FC<NodeDetailsProps> = ({ obj: node }) => (\n  <>\n    <NodeDetailsOverview node={node} />\n    <NodeDetailsConditions node={node} />\n    <NodeDetailsImages node={node} />\n  </>\n);\n\nexport default NodeDetails;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { CamelCaseWrap } from '@console/dynamic-plugin-sdk';\nimport { SectionHeading, Timestamp } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\n\ntype NodeDetailsConditionsProps = {\n  node: NodeKind;\n};\n\nconst NodeDetailsConditions: React.FC<NodeDetailsConditionsProps> = ({ node }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('console-app~Node conditions')} />\n      <div className=\"co-table-container\">\n        <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n          <thead className=\"pf-v5-c-table__thead\">\n            <tr className=\"pf-v5-c-table__tr\">\n              <th className=\"pf-v5-c-table__th\">{t('console-app~Type')}</th>\n              <th className=\"pf-v5-c-table__th\">{t('console-app~Status')}</th>\n              <th className=\"pf-v5-c-table__th\">{t('console-app~Reason')}</th>\n              <th className=\"pf-v5-c-table__th\">{t('console-app~Updated')}</th>\n              <th className=\"pf-v5-c-table__th\">{t('console-app~Changed')}</th>\n            </tr>\n          </thead>\n          <tbody className=\"pf-v5-c-table__tbody\">\n            {_.map(node.status.conditions, (c, i) => (\n              <tr className=\"pf-v5-c-table__tr\" key={i}>\n                <td className=\"pf-v5-c-table__td\">\n                  <CamelCaseWrap value={c.type} />\n                </td>\n                <td className=\"pf-v5-c-table__td\">{c.status || '-'}</td>\n                <td className=\"pf-v5-c-table__td\">\n                  <CamelCaseWrap value={c.reason} />\n                </td>\n                <td className=\"pf-v5-c-table__td\">\n                  <Timestamp timestamp={c.lastHeartbeatTime} />\n                </td>\n                <td className=\"pf-v5-c-table__td\">\n                  <Timestamp timestamp={c.lastTransitionTime} />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeDetailsConditions;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { SectionHeading, units } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\n\ntype NodeDetailsImagesProps = {\n  node: NodeKind;\n};\n\nconst NodeDetailsImages: React.FC<NodeDetailsImagesProps> = ({ node }) => {\n  const images = _.filter(node.status.images, 'names');\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('console-app~Images')} />\n      <div className=\"co-table-container\">\n        <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n          <thead className=\"pf-v5-c-table__thead\">\n            <tr className=\"pf-v5-c-table__tr\">\n              <th className=\"pf-v5-c-table__th\">{t('console-app~Name')}</th>\n              <th className=\"pf-v5-c-table__th\">{t('console-app~Size')}</th>\n            </tr>\n          </thead>\n          <tbody className=\"pf-v5-c-table__tbody\">\n            {_.map(images, (image, i) => (\n              <tr className=\"pf-v5-c-table__tr\" key={i}>\n                <td className=\"pf-v5-c-table__td pf-m-break-word co-select-to-copy\">\n                  {image.names.find(\n                    (name: string) => !name.includes('@') && !name.includes('<none>'),\n                  ) || image.names[0]}\n                </td>\n                <td className=\"pf-v5-c-table__td\">\n                  {units.humanize(image.sizeBytes, 'binaryBytes', true).string || '-'}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeDetailsImages;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  useAccessReview,\n  SectionHeading,\n  LabelList,\n  Kebab,\n  ResourceLink,\n  cloudProviderNames,\n  cloudProviderID,\n  Timestamp,\n} from '@console/internal/components/utils';\nimport { DetailsItem } from '@console/internal/components/utils/details-item';\nimport { NodeModel, MachineModel } from '@console/internal/models';\nimport { NodeKind, referenceForModel } from '@console/internal/module/k8s';\nimport { useLabelsModal } from '@console/shared/src/hooks/useLabelsModal';\nimport {\n  getNodeMachineNameAndNamespace,\n  getNodeAddresses,\n} from '@console/shared/src/selectors/node';\nimport NodeUptime from './node-dashboard/NodeUptime';\nimport NodeIPList from './NodeIPList';\nimport NodeStatus from './NodeStatus';\n\ntype NodeDetailsOverviewProps = {\n  node: NodeKind;\n};\n\nconst NodeDetailsOverview: React.FC<NodeDetailsOverviewProps> = ({ node }) => {\n  const launchLabelsModal = useLabelsModal(node);\n  const [machineName, machineNamespace] = getNodeMachineNameAndNamespace(node);\n  const canUpdate = useAccessReview({\n    group: NodeModel.apiGroup,\n    resource: NodeModel.plural,\n    verb: 'patch',\n    name: node.metadata.name,\n    namespace: node.metadata.namespace,\n  });\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('console-app~Node details')} />\n      <div className=\"row\">\n        <div className=\"col-md-6 col-xs-12\">\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('console-app~Node name')}</dt>\n            <dd>{node.metadata.name || '-'}</dd>\n            <dt>{t('console-app~Status')}</dt>\n            <dd>\n              <NodeStatus node={node} />\n            </dd>\n            <dt>{t('console-app~External ID')}</dt>\n            <dd>{_.get(node, 'spec.externalID', '-')}</dd>\n            <dt>{t('console-app~Uptime')}</dt>\n            <dd>\n              <NodeUptime obj={node} />\n            </dd>\n            <dt>{t('console-app~Node addresses')}</dt>\n            <dd>\n              <NodeIPList ips={getNodeAddresses(node)} expand />\n            </dd>\n            <DetailsItem\n              label={t('console-app~Labels')}\n              obj={node}\n              path=\"metadata.labels\"\n              valueClassName=\"details-item__value--labels\"\n              onEdit={launchLabelsModal}\n              canEdit={canUpdate}\n              editAsGroup\n            >\n              <LabelList kind=\"Node\" labels={node.metadata.labels} />\n            </DetailsItem>\n            <dt>{t('console-app~Taints')}</dt>\n            <dd>\n              {canUpdate ? (\n                <Button\n                  variant=\"link\"\n                  type=\"button\"\n                  isInline\n                  onClick={Kebab.factory.ModifyTaints(NodeModel, node).callback}\n                >\n                  {_.size(node.spec.taints)}{' '}\n                  {t('console-app~Taint', { count: _.size(node.spec.taints) })}\n                  <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                <span>\n                  {_.size(node.spec.taints)}{' '}\n                  {t('console-app~Taint', { count: _.size(node.spec.taints) })}\n                </span>\n              )}\n            </dd>\n            <dt>{t('console-app~Annotations')}</dt>\n            <dd>\n              {canUpdate ? (\n                <Button\n                  variant=\"link\"\n                  type=\"button\"\n                  isInline\n                  onClick={Kebab.factory.ModifyAnnotations(NodeModel, node).callback}\n                >\n                  {_.size(node.metadata.annotations)}{' '}\n                  {t('console-app~Annotation', { count: _.size(node.metadata.annotations) })}\n                  <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                <span>\n                  {_.size(node.metadata.annotations)}{' '}\n                  {t('console-app~Annotation', { count: _.size(node.metadata.annotations) })}\n                </span>\n              )}\n            </dd>\n            {machineName && (\n              <>\n                <dt>{t('console-app~Machine')}</dt>\n                <dd>\n                  <ResourceLink\n                    kind={referenceForModel(MachineModel)}\n                    name={machineName}\n                    namespace={machineNamespace}\n                  />\n                </dd>\n              </>\n            )}\n            <dt>{t('console-app~Provider ID')}</dt>\n            <dd>{cloudProviderNames([cloudProviderID(node)])}</dd>\n            {_.has(node, 'spec.unschedulable') && <dt>{t('console-app~Unschedulable')}</dt>}\n            {_.has(node, 'spec.unschedulable') && (\n              <dd className=\"text-capitalize\">\n                {_.get(node, 'spec.unschedulable', '-').toString()}\n              </dd>\n            )}\n            <dt>{t('console-app~Created')}</dt>\n            <dd>\n              <Timestamp timestamp={node.metadata.creationTimestamp} />\n            </dd>\n          </dl>\n        </div>\n        <div className=\"col-md-6 col-xs-12\">\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('console-app~Operating system')}</dt>\n            <dd className=\"text-capitalize\">\n              {_.get(node, 'status.nodeInfo.operatingSystem', '-')}\n            </dd>\n            <dt>{t('console-app~OS image')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.osImage', '-')}</dd>\n            <dt>{t('console-app~Architecture')}</dt>\n            <dd className=\"text-uppercase\">{_.get(node, 'status.nodeInfo.architecture', '-')}</dd>\n            <dt>{t('console-app~Kernel version')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kernelVersion', '-')}</dd>\n            <dt>{t('console-app~Boot ID')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.bootID', '-')}</dd>\n            <dt>{t('console-app~Container runtime')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.containerRuntimeVersion', '-')}</dd>\n            <dt>{t('console-app~Kubelet version')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kubeletVersion', '-')}</dd>\n            <dt>{t('console-app~Kube-Proxy version')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kubeProxyVersion', '-')}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeDetailsOverview;\n","import * as React from 'react';\nimport {\n  Alert,\n  Checkbox,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  EmptyStateHeader,\n  EmptyStateFooter,\n  MenuToggle,\n  MenuToggleElement,\n  Select,\n  SelectList,\n  SelectOption,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\nimport classnames from 'classnames';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { coFetch } from '@console/internal/co-fetch';\nimport {\n  ExternalLink,\n  getQueryArgument,\n  LoadingBox,\n  LoadingInline,\n  removeQueryArgument,\n  setQueryArgument,\n} from '@console/internal/components/utils';\nimport { modelFor, NodeKind, resourceURL } from '@console/internal/module/k8s';\nimport { useUserSettings } from '@console/shared';\nimport { LOG_WRAP_LINES_USERSETTINGS_KEY } from '@console/shared/src/constants';\nimport NodeLogsFilterUnit from './NodeLogsUnitFilter';\nimport './node-logs.scss';\n\ntype NodeLogsProps = {\n  obj: NodeKind;\n};\n\ntype LogControlsProps = {\n  onTogglePath: () => void;\n  onChangePath: (event: React.ChangeEvent<HTMLInputElement>, newAPI: string) => void;\n  path: string;\n  isPathOpen: boolean;\n  pathItems: string[];\n  isJournal: boolean;\n  onChangeUnit: (value: string) => void;\n  unit: string;\n  isLoadingFilenames: boolean;\n  logFilenamesExist: boolean;\n  onToggleFilename: () => void;\n  onChangeFilename: (event: React.ChangeEvent<HTMLInputElement>, newFilename: string) => void;\n  logFilename: string;\n  isFilenameOpen: boolean;\n  logFilenames: string[];\n  isWrapLines: boolean;\n  setWrapLines: (wrapLines: boolean) => void;\n  showSearch: boolean;\n};\n\nconst LogControls: React.FC<LogControlsProps> = ({\n  onTogglePath,\n  onChangePath,\n  path,\n  isPathOpen,\n  pathItems,\n  isJournal,\n  onChangeUnit,\n  unit,\n  isLoadingFilenames,\n  logFilenamesExist,\n  onToggleFilename,\n  onChangeFilename,\n  logFilename,\n  isFilenameOpen,\n  logFilenames,\n  isWrapLines,\n  setWrapLines,\n  showSearch,\n}) => {\n  const options = (items) =>\n    items.map((value) => {\n      return (\n        <SelectOption\n          key={value}\n          value={value}\n          className={classnames({ 'co-node-logs__log-select-option': value.length > 50 })}\n        >\n          {value}\n        </SelectOption>\n      );\n    });\n  const { t } = useTranslation();\n\n  return (\n    <Toolbar className=\"co-toolbar-empty-state\">\n      <ToolbarContent>\n        <ToolbarGroup>\n          <ToolbarItem>\n            <Select\n              onSelect={onChangePath}\n              selected={path}\n              isOpen={isPathOpen}\n              toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n                <MenuToggle\n                  ref={toggleRef}\n                  onClick={onTogglePath}\n                  aria-label={t('public~Select a path')}\n                  data-test=\"select-path\"\n                >\n                  {path}\n                </MenuToggle>\n              )}\n            >\n              <SelectList>{options(pathItems)}</SelectList>\n            </Select>\n          </ToolbarItem>\n          {isJournal && <NodeLogsFilterUnit onChangeUnit={onChangeUnit} unit={unit} />}\n          {!isJournal && (\n            <ToolbarItem>\n              {isLoadingFilenames ? (\n                <LoadingInline />\n              ) : (\n                logFilenamesExist && (\n                  <Select\n                    onSelect={onChangeFilename}\n                    selected={logFilename}\n                    isOpen={isFilenameOpen}\n                    className=\"co-node-logs__log-select\"\n                    toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n                      <MenuToggle\n                        ref={toggleRef}\n                        onClick={onToggleFilename}\n                        data-test=\"select-file\"\n                      >\n                        {logFilename || t('public~Select a log file')}\n                      </MenuToggle>\n                    )}\n                  >\n                    <SelectList>{options(logFilenames)}</SelectList>\n                  </Select>\n                )\n              )}\n            </ToolbarItem>\n          )}\n          {showSearch && (\n            <ToolbarItem>\n              <LogViewerSearch placeholder={t('public~Search')} minSearchChars={0} />\n            </ToolbarItem>\n          )}\n        </ToolbarGroup>\n        <ToolbarItem className=\"pf-v5-u-flex-fill pf-v5-u-align-self-center pf-v5-u-justify-content-flex-end\">\n          <Checkbox\n            label={t('public~Wrap lines')}\n            id=\"wrapLogLines\"\n            isChecked={isWrapLines}\n            data-checked-state={isWrapLines}\n            onChange={(_event, checked: boolean) => {\n              setWrapLines(checked);\n            }}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nconst NodeLogs: React.FC<NodeLogsProps> = ({ obj: node }) => {\n  const {\n    kind,\n    metadata: { labels, name, namespace: ns },\n    status,\n  } = node;\n  const isWindows = status?.nodeInfo?.operatingSystem === 'windows';\n  const pathItems = ['journal'];\n  isWindows\n    ? pathItems.push('containers', 'hybrid-overlay', 'kube-proxy', 'kubelet', 'containerd', 'wicd')\n    : labels['node-role.kubernetes.io/master'] === '' &&\n      pathItems.push('openshift-apiserver', 'kube-apiserver', 'oauth-apiserver');\n  const pathQueryArgument = 'path';\n  const unitQueryArgument = 'unit';\n  const logQueryArgument = 'log';\n\n  const [path, setPath] = React.useState(getQueryArgument(pathQueryArgument) || pathItems[0]);\n  const [logURL, setLogURL] = React.useState('');\n  const [logFilenames, setLogFilenames] = React.useState([]);\n  const [unit, setUnit] = React.useState(getQueryArgument(unitQueryArgument));\n  const [logFilename, setLogFilename] = React.useState(getQueryArgument(logQueryArgument));\n  const [isLoadingLog, setLoadingLog] = React.useState(true);\n  const [isLoadingFilenames, setLoadingFilenames] = React.useState(true);\n  const [error, setError] = React.useState('');\n  const [isPathOpen, setPathOpen] = React.useState(false);\n  const [isFilenameOpen, setFilenameOpen] = React.useState(false);\n  const [content, setContent] = React.useState('');\n  const [isWrapLines, setWrapLines] = useUserSettings<boolean>(\n    LOG_WRAP_LINES_USERSETTINGS_KEY,\n    false,\n    true,\n  );\n  const { t } = useTranslation();\n\n  const isJournal = path === 'journal';\n\n  const fetchLog = React.useCallback(\n    (url: string) => {\n      coFetch(url)\n        .then((response) => response.text())\n        .then((responseText) => {\n          setContent(responseText);\n          setLoadingLog(false);\n          setError('');\n        })\n        .catch((e) => {\n          setLoadingLog(false);\n          setError(t('public~Error fetching logs: {{message}}', { message: e.message }));\n        });\n    },\n    [t],\n  );\n  const getUnitQueryParams = (unitText: string) => {\n    const unitsArray = unitText?.split(',');\n    const unitQueryParams = unitsArray?.map((val) => `unit=${val}`);\n    return unitQueryParams?.join('&');\n  };\n  const getLogURL = React.useCallback(\n    (ext?: string, unitText?: string) => {\n      const baseURL = `proxy/logs/${path}`;\n      let extendedURL;\n      if (ext) {\n        extendedURL = `${baseURL}${ext}`;\n      }\n      if (unitText) {\n        extendedURL = `${baseURL}?${getUnitQueryParams(unitText)}`;\n      }\n      return resourceURL(modelFor(kind), {\n        name,\n        ns,\n        path: extendedURL || baseURL,\n      });\n    },\n    [kind, name, ns, path],\n  );\n\n  React.useEffect(() => {\n    if (!path || isJournal) {\n      const journalLogURL = getLogURL('', unit);\n      setLogURL(journalLogURL);\n    } else {\n      if (path && logFilename) {\n        const logFilenameURL = getLogURL(`/${logFilename}`);\n        setLogURL(logFilenameURL);\n      }\n      coFetch(getLogURL())\n        .then((response) => response.text())\n        .then((responseText) => {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString(responseText, 'text/html');\n          const links = !isWindows\n            ? doc.querySelectorAll('a[href^=\"audit\"]')\n            : doc.querySelectorAll('a');\n          const filenames = [];\n          for (const link of links) {\n            filenames.push(link.textContent);\n          }\n          setLogFilenames(filenames);\n          setLoadingFilenames(false);\n        })\n        .catch((e) => {\n          setLoadingLog(false);\n          setLoadingFilenames(false);\n          setError(t('public~Error fetching log filenames: {{message}}', { message: e.message }));\n        });\n    }\n  }, [kind, name, ns, path, isJournal, isWindows, logFilename, getLogURL, t, unit]);\n\n  React.useEffect(() => {\n    if (logURL) {\n      fetchLog(logURL);\n    }\n  }, [logURL, fetchLog]);\n\n  let trimmedContent = '';\n  const MAX_LENGTH = 500000;\n  if (content.length > MAX_LENGTH) {\n    const index = content.indexOf('\\n', content.length - MAX_LENGTH);\n    trimmedContent = content.substr(index + 1);\n  }\n\n  const onChangePath = (event: React.ChangeEvent<HTMLInputElement>, newAPI: string) => {\n    event.preventDefault();\n    setPathOpen(false);\n    setPath(newAPI);\n    setLogFilenames([]);\n    setLogFilename('');\n    setUnit('');\n    setQueryArgument(pathQueryArgument, newAPI);\n    removeQueryArgument(unitQueryArgument);\n    removeQueryArgument(logQueryArgument);\n    setLoadingFilenames(true);\n    setLoadingLog(true);\n    trimmedContent = '';\n  };\n  const onTogglePath = () => setPathOpen(!isPathOpen);\n  const onChangeUnit = (value: string) => {\n    setUnit(value);\n    value === ''\n      ? removeQueryArgument(unitQueryArgument)\n      : setQueryArgument(unitQueryArgument, value);\n  };\n  const onChangeFilename = (event: React.ChangeEvent<HTMLInputElement>, newFilename: string) => {\n    event.preventDefault();\n    setFilenameOpen(false);\n    setLogFilename(newFilename);\n    setLoadingLog(true);\n    setQueryArgument(logQueryArgument, newFilename);\n    setLogURL(getLogURL(`/${newFilename}`));\n    fetchLog(getLogURL(`/${newFilename}`));\n    trimmedContent = '';\n  };\n  const onToggleFilename = () => setFilenameOpen(!isFilenameOpen);\n  const errorExists = error.length > 0;\n  const logFilenamesExist = logFilenames.length > 0;\n\n  const logControls = (\n    <LogControls\n      onTogglePath={onTogglePath}\n      onChangePath={onChangePath}\n      path={path}\n      isPathOpen={isPathOpen}\n      pathItems={pathItems}\n      isJournal={isJournal}\n      onChangeUnit={onChangeUnit}\n      unit={unit}\n      isLoadingFilenames={isLoadingFilenames}\n      logFilenamesExist={logFilenamesExist}\n      onToggleFilename={onToggleFilename}\n      onChangeFilename={onChangeFilename}\n      logFilename={logFilename}\n      isFilenameOpen={isFilenameOpen}\n      logFilenames={logFilenames}\n      isWrapLines={isWrapLines}\n      setWrapLines={setWrapLines}\n      showSearch={!isLoadingLog && !errorExists}\n    />\n  );\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__body--full-height\">\n      <div className=\"log-window-wrapper\">\n        {(isLoadingLog || errorExists) && logControls}\n        {trimmedContent?.length > 0 && !isLoadingLog && (\n          <Alert\n            isInline\n            className=\"co-alert co-alert--margin-bottom-sm\"\n            variant=\"warning\"\n            title={t('public~The log is abridged due to length.')}\n          >\n            <Trans ns=\"public\" t={t}>\n              To view unabridged log content,{' '}\n              <ExternalLink href={logURL}>open the raw file in another window</ExternalLink>.\n            </Trans>\n          </Alert>\n        )}\n        {isLoadingLog ? (\n          !isJournal && !logFilename ? (\n            <EmptyState variant={EmptyStateVariant.full} isFullHeight>\n              <EmptyStateHeader\n                titleText={\n                  <>\n                    {isLoadingFilenames ? (\n                      <LoadingInline />\n                    ) : logFilenamesExist ? (\n                      t('public~No log file selected')\n                    ) : (\n                      t('public~No log files exist')\n                    )}\n                  </>\n                }\n                headingLevel=\"h2\"\n              />\n              <EmptyStateFooter>\n                {logFilenamesExist && (\n                  <EmptyStateBody>{t('public~Select a log file above')}</EmptyStateBody>\n                )}\n              </EmptyStateFooter>\n            </EmptyState>\n          ) : (\n            <LoadingBox />\n          )\n        ) : errorExists ? (\n          <Alert variant=\"danger\" isInline title={error} className=\"co-alert\" />\n        ) : (\n          <LogViewer\n            isTextWrapped={isWrapLines}\n            data={trimmedContent || content}\n            toolbar={logControls}\n            theme=\"dark\"\n            initialIndexWidth={7}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NodeLogs;\n","import * as React from 'react';\nimport { Chip, ChipGroup, TextInput, ToolbarItem } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { getQueryArgument } from '@console/internal/components/utils';\n\ntype NodeLogsUnitFilterProps = {\n  onChangeUnit: (value: string) => void;\n  unit: string;\n};\n\nconst NodeLogsUnitFilter: React.FC<NodeLogsUnitFilterProps> = ({ onChangeUnit }) => {\n  const firstRender = React.useRef(true);\n  const inputRef = React.useRef<HTMLInputElement>();\n  const [values, setValues] = React.useState<string[]>(getQueryArgument('unit')?.split(',') || []);\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    const input = inputRef.current;\n    const listener = (event) => {\n      const { value } = event.currentTarget;\n      if ((event.code === 'Enter' || event.code === 'NumpadEnter') && value !== '') {\n        event.preventDefault();\n        setValues((prevValues) => _.uniq([...prevValues, value]));\n        event.currentTarget.value = '';\n      }\n    };\n    input.addEventListener('keydown', listener);\n    return () => {\n      input.removeEventListener('keydown', listener);\n    };\n  }, [onChangeUnit]);\n\n  const deleteValue = (id: string) => {\n    const index = values.indexOf(id);\n    if (index !== -1) {\n      setValues((prevValues) => {\n        const newValues = [...prevValues];\n        newValues.splice(index, 1);\n        return newValues;\n      });\n    }\n  };\n\n  const deleteCategory = () => {\n    setValues([]);\n  };\n\n  const valuesString = values.join(',');\n  React.useEffect(() => {\n    if (!firstRender.current) {\n      onChangeUnit(valuesString);\n    } else {\n      firstRender.current = false;\n    }\n  }, [valuesString, onChangeUnit]);\n\n  const label = t('public~Filter by unit');\n\n  return (\n    <>\n      <ToolbarItem>\n        <TextInput\n          type=\"text\"\n          id=\"log-unit\"\n          name=\"log-unit\"\n          aria-label={label}\n          ref={inputRef}\n          placeholder={label}\n        />\n      </ToolbarItem>\n      {values.length > 0 && (\n        <ToolbarItem>\n          <ChipGroup categoryName={t('public~Unit')} isClosable onClick={deleteCategory}>\n            {values?.map((v) => (\n              <Chip key={v} onClick={() => deleteValue(v)}>\n                {v}\n              </Chip>\n            ))}\n          </ChipGroup>\n        </ToolbarItem>\n      )}\n    </>\n  );\n};\n\nexport default NodeLogsUnitFilter;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation, Trans } from 'react-i18next';\nimport {\n  Firehose,\n  FirehoseResource,\n  FirehoseResult,\n  LoadingBox,\n} from '@console/internal/components/utils';\nimport { NodeKind, PodKind } from '@console/internal/module/k8s';\nimport { PodExecLoader } from '../../../../../public/components/pod';\nimport { ImageStreamTagModel, NamespaceModel, PodModel } from '../../../../../public/models';\nimport { k8sCreate, k8sGet, k8sKillByName } from '../../../../../public/module/k8s';\n\ntype NodeTerminalErrorProps = {\n  error: React.ReactNode;\n};\n\ntype NodeTerminalInnerProps = {\n  obj?: FirehoseResult<PodKind>;\n};\n\ntype NodeTerminalProps = {\n  obj: NodeKind;\n};\n\nconst getDebugImage = async (): Promise<string> => {\n  try {\n    const istag = await k8sGet(ImageStreamTagModel, 'tools:latest', 'openshift');\n    return istag.image.dockerImageReference;\n  } catch (e) {\n    return 'registry.redhat.io/rhel8/support-tools';\n  }\n};\n\nconst getDebugPod = async (name: string, namespace: string, nodeName: string): Promise<PodKind> => {\n  const image = await getDebugImage();\n  return {\n    kind: 'Pod',\n    apiVersion: 'v1',\n    metadata: {\n      name,\n      namespace,\n      annotations: {\n        'debug.openshift.io/source-container': 'container-00',\n        'debug.openshift.io/source-resource': `/v1, Resource=nodes/${nodeName}`,\n        'openshift.io/scc': 'privileged',\n      },\n    },\n    spec: {\n      activeDeadlineSeconds: 21600,\n      volumes: [\n        {\n          name: 'host',\n          hostPath: {\n            path: '/',\n            type: 'Directory',\n          },\n        },\n      ],\n      containers: [\n        {\n          name: 'container-00',\n          image,\n          command: ['/bin/sh'],\n          resources: {},\n          volumeMounts: [\n            {\n              name: 'host',\n              mountPath: '/host',\n            },\n          ],\n          securityContext: {\n            privileged: true,\n            runAsUser: 0,\n          },\n          stdin: true,\n          stdinOnce: true,\n          tty: true,\n        },\n      ],\n      restartPolicy: 'Never',\n      nodeName,\n      hostNetwork: true,\n      hostPID: true,\n    },\n  };\n};\n\nconst NodeTerminalError: React.FC<NodeTerminalErrorProps> = ({ error }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <Alert variant=\"danger\" isInline title={error} data-test=\"node-terminal-error\" />\n    </div>\n  );\n};\n\nconst NodeTerminalInner: React.FC<NodeTerminalInnerProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const message = (\n    <Trans t={t} ns=\"console-app\">\n      <p>\n        To use host binaries, run <code className=\"co-code\">chroot /host</code>\n      </p>\n    </Trans>\n  );\n  switch (obj?.data?.status?.phase) {\n    case 'Failed':\n      return (\n        <NodeTerminalError\n          error={\n            <>\n              {t('console-app~The debug pod failed. ')}\n              {obj?.data?.status?.containerStatuses?.[0]?.state?.terminated?.message ||\n                obj?.data?.status?.message}\n            </>\n          }\n        />\n      );\n    case 'Running':\n      return <PodExecLoader obj={obj.data} message={message} />;\n    default:\n      return <LoadingBox />;\n  }\n};\n\nconst NodeTerminal: React.FC<NodeTerminalProps> = ({ obj: node }) => {\n  const [resources, setResources] = React.useState<FirehoseResource[]>([]);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const nodeName = node.metadata.name;\n  React.useEffect(() => {\n    let namespace;\n    const name = `${nodeName?.replace(/\\./g, '-')}-debug`;\n    const deleteNamespace = async (ns) => {\n      try {\n        await k8sKillByName(NamespaceModel, ns);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Could not delete node terminal debug namespace.', e);\n      }\n    };\n    const closeTab = (event) => {\n      event.preventDefault();\n      deleteNamespace(namespace.metadata.name);\n    };\n    const createDebugPod = async () => {\n      try {\n        namespace = await k8sCreate(NamespaceModel, {\n          metadata: {\n            generateName: 'openshift-debug-',\n            labels: {\n              'openshift.io/run-level': '0',\n              'pod-security.kubernetes.io/audit': 'privileged',\n              'pod-security.kubernetes.io/enforce': 'privileged',\n              'pod-security.kubernetes.io/warn': 'privileged',\n              'security.openshift.io/scc.podSecurityLabelSync': 'false',\n            },\n            annotations: {\n              'openshift.io/node-selector': '',\n            },\n          },\n        });\n        const podToCreate = await getDebugPod(name, namespace.metadata.name, nodeName);\n        // wait for the namespace to be ready\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        const debugPod = await k8sCreate(PodModel, podToCreate);\n        if (debugPod) {\n          setResources([\n            {\n              isList: false,\n              kind: 'Pod',\n              name,\n              namespace: namespace.metadata.name,\n              prop: 'obj',\n            },\n          ]);\n        }\n      } catch (e) {\n        setErrorMessage(e.message);\n        if (namespace) {\n          deleteNamespace(namespace.metadata.name);\n        }\n      }\n    };\n    createDebugPod();\n    window.addEventListener('beforeunload', closeTab);\n    return () => {\n      deleteNamespace(namespace.metadata.name);\n      window.removeEventListener('beforeunload', closeTab);\n    };\n  }, [nodeName]);\n\n  return errorMessage ? (\n    <NodeTerminalError error={errorMessage} />\n  ) : (\n    <Firehose resources={resources}>\n      <NodeTerminalInner />\n    </Firehose>\n  );\n};\n\nexport default NodeTerminal;\n","import { nodeStatus } from '@console/app/src/status/node';\nimport { volumeSnapshotStatus } from '@console/app/src/status/snapshot';\nimport { podPhaseFilterReducer } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from './InventoryItem';\nimport { InventoryStatusGroup } from './status-group';\n\nconst POD_PHASE_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Running', 'Succeeded'],\n  [InventoryStatusGroup.ERROR]: ['CrashLoopBackOff', 'Failed'],\n  [InventoryStatusGroup.PROGRESS]: ['Terminating', 'Pending'],\n  [InventoryStatusGroup.WARN]: ['Unknown'],\n};\n\nconst PVC_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.ERROR]: ['Lost'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n};\n\nconst PV_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Available', 'Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nconst NODE_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n};\n\nconst VS_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n  [InventoryStatusGroup.ERROR]: ['Error'],\n};\n\nexport const getStatusGroups = (resources, mapping, mapper, filterType) => {\n  const groups = {\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [],\n      count: 0,\n    },\n  };\n  Object.keys(mapping).forEach((key) => {\n    groups[key] = {\n      statusIDs: [...mapping[key]],\n      count: 0,\n      filterType,\n    };\n  });\n\n  resources.forEach((resource) => {\n    const status = mapper(resource);\n    const group =\n      Object.keys(mapping).find((key) => mapping[key].includes(status)) ||\n      InventoryStatusGroup.UNKNOWN;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n\nexport const getPodStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, POD_PHASE_GROUP_MAPPING, podPhaseFilterReducer, 'pod-status');\nexport const getNodeStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, NODE_STATUS_GROUP_MAPPING, nodeStatus, 'node-status');\nexport const getPVCStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PVC_STATUS_GROUP_MAPPING, (pvc) => pvc.status.phase, 'pvc-status');\nexport const getPVStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PV_STATUS_GROUP_MAPPING, (pv) => pv.status.phase, 'pv-status');\nexport const getVSStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, VS_STATUS_GROUP_MAPPING, volumeSnapshotStatus, 'snapshot-status');\n","import * as React from 'react';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { PodsPage } from '@console/internal/components/pod';\nimport { navFactory, PageComponentProps } from '@console/internal/components/utils';\nimport { K8sModel, NodeKind, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  ActionMenu,\n  ActionMenuVariant,\n  ActionServiceProvider,\n} from '@console/shared/src/components/actions';\nimport { isWindowsNode } from '@console/shared/src/selectors/node';\nimport { nodeStatus } from '../../status/node';\nimport NodeDashboard from './node-dashboard/NodeDashboard';\nimport NodeDetails from './NodeDetails';\nimport NodeLogs from './NodeLogs';\nimport NodeTerminal from './NodeTerminal';\n\nconst NodePodsPage: React.FC<PageComponentProps<NodeKind>> = ({ obj }) => (\n  <PodsPage\n    showTitle={false}\n    fieldSelector={`spec.nodeName=${obj.metadata.name}`}\n    showNamespaceOverride\n  />\n);\n\nconst NodeDetailsPage: React.FC<React.ComponentProps<typeof DetailsPage>> = (props) => {\n  const pagesFor = React.useCallback(\n    (node: NodeKind) => [\n      {\n        href: '',\n        // t('console-app~Overview')\n        nameKey: 'console-app~Overview',\n        component: NodeDashboard,\n      },\n      {\n        href: 'details',\n        // t('console-app~Details')\n        nameKey: 'console-app~Details',\n        component: NodeDetails,\n      },\n      navFactory.editYaml(),\n      navFactory.pods(NodePodsPage),\n      navFactory.logs(NodeLogs),\n      navFactory.events(ResourceEventStream),\n      ...(!isWindowsNode(node) ? [navFactory.terminal(NodeTerminal)] : []),\n    ],\n    [],\n  );\n\n  const customActionMenu = (kindObj: K8sModel, obj: NodeKind) => {\n    const resourceKind = referenceForModel(kindObj);\n    const context = { [resourceKind]: obj };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={nodeStatus}\n      customActionMenu={customActionMenu}\n      pagesFor={pagesFor}\n    />\n  );\n};\n\nexport default NodeDetailsPage;\n","import { FirehoseResource } from '../../../utils';\n\nexport const uniqueResource = (\n  resource: FirehoseResource,\n  prefix: string | number,\n): FirehoseResource => ({\n  ...resource,\n  prop: `${prefix}-${resource.prop}`,\n});\n","import * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useTranslation } from 'react-i18next';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport {\n  DashboardsOverviewHealthOperator,\n  DashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthResourceSubsystem,\n  SubsystemHealth,\n  OperatorRowProps,\n  LazyLoader,\n} from '@console/plugin-sdk';\nimport {\n  ResolvedExtension,\n  DashboardsOverviewHealthOperator as DynamicDashboardsOverviewHealthOperator,\n  DashboardsOverviewHealthURLSubsystem as DynamicDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem as DynamicDashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthResourceSubsystem as DynamicDashboardsOverviewHealthResourceSubsystem,\n  WatchK8sResources,\n  WatchK8sResults,\n  ResourcesObject,\n} from '@console/dynamic-plugin-sdk';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { OperatorsSection } from '@console/shared/src/components/dashboard/status-card/OperatorStatusBody';\nimport {\n  getOperatorsHealthState,\n  getMostImportantStatuses,\n} from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { K8sKind } from '../../../../module/k8s';\nimport { FirehoseResourcesResult, AsyncComponent, resourcePath } from '../../../utils';\nimport { useK8sWatchResources } from '../../../utils/k8s-watch-hook';\nimport { withDashboardResources, DashboardItemProps } from '../../with-dashboard-resources';\nimport { uniqueResource } from './utils';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { ClusterDashboardContext } from './context';\n\nconst OperatorRow: React.FC<\n  OperatorRowProps & {\n    LoadingComponent: () => JSX.Element;\n    Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n    key: string;\n    isResolved: boolean;\n  }\n> = ({ operatorStatus, isResolved, key, Component, LoadingComponent }) => {\n  const ResolvedComponent = Component as React.ComponentType<OperatorRowProps>;\n  return isResolved ? (\n    <ResolvedComponent key={key} operatorStatus={operatorStatus} />\n  ) : (\n    <AsyncComponent\n      key={operatorStatus.operators[0].metadata.uid}\n      operatorStatus={operatorStatus}\n      loader={Component}\n      LoadingComponent={LoadingComponent}\n    />\n  );\n};\n\nexport const OperatorsPopup: React.FC<OperatorsPopupProps> = ({\n  resources,\n  operatorExtensions,\n  dynamicOperatorSubsystems,\n}) => {\n  const { t } = useTranslation();\n  const sections = [\n    ...operatorExtensions.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return (\n        <StackItem key={o.title}>\n          <OperatorsSection\n            resources={operatorResources}\n            getOperatorsWithStatuses={o.getOperatorsWithStatuses}\n            title={o.title}\n            linkTo={o.viewAllLink || resourcePath(o.resources[0].kind)}\n            Row={OperatorRow}\n            Component={o.operatorRowLoader}\n            isResolved={false}\n          />\n        </StackItem>\n      );\n    }),\n    ...dynamicOperatorSubsystems.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return (\n        <StackItem key={o.title}>\n          <OperatorsSection\n            resources={operatorResources}\n            getOperatorsWithStatuses={o.getOperatorsWithStatuses}\n            title={o.title}\n            linkTo={o.viewAllLink || resourcePath(o.resources[0].kind)}\n            Row={OperatorRow}\n            Component={o.operatorRowLoader}\n            isResolved\n          />\n        </StackItem>\n      );\n    }),\n  ].reverse();\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        {t(\n          'public~Operators create, configure, and manage applications by extending the Kubernetes API.',\n        )}\n      </StackItem>\n      {sections}\n    </Stack>\n  );\n};\n\nexport const OperatorHealthItem = withDashboardResources<OperatorHealthItemProps>(\n  ({\n    resources,\n    watchK8sResource,\n    stopWatchK8sResource,\n    operatorExtensions,\n    dynamicOperatorSubsystems,\n  }) => {\n    const { t } = useTranslation();\n    React.useEffect(() => {\n      operatorExtensions.forEach((o, index) =>\n        o.resources.forEach((r) => watchK8sResource(uniqueResource(r, index))),\n      );\n      return () => {\n        operatorExtensions.forEach((o, index) =>\n          o.resources.forEach((r) => stopWatchK8sResource(uniqueResource(r, index))),\n        );\n      };\n    }, [watchK8sResource, stopWatchK8sResource, operatorExtensions]);\n\n    const healthStatuses = operatorExtensions.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop] || {};\n        return acc;\n      }, {});\n      if (\n        Object.keys(operatorResources).some((resource) => operatorResources[resource].loadError)\n      ) {\n        return { health: HealthState.NOT_AVAILABLE };\n      }\n      if (Object.keys(operatorResources).some((resource) => !operatorResources[resource].loaded)) {\n        return { health: HealthState.LOADING };\n      }\n      const operatorStatuses = o.getOperatorsWithStatuses(operatorResources);\n      if (!operatorStatuses.length) {\n        return { health: HealthState.OK };\n      }\n      const importantStatuses = getMostImportantStatuses(operatorStatuses);\n      return {\n        health: importantStatuses[0].status.health,\n        count: importantStatuses.length,\n      };\n    });\n\n    const operatorsHealth = getOperatorsHealthState(healthStatuses, t);\n\n    return (\n      <HealthItem\n        title={t('public~Operators')}\n        state={operatorsHealth.health}\n        details={operatorsHealth.detailMessage}\n        popupTitle={t('public~Operator status')}\n      >\n        <OperatorsPopup\n          resources={resources}\n          operatorExtensions={operatorExtensions}\n          dynamicOperatorSubsystems={dynamicOperatorSubsystems}\n        />\n      </HealthItem>\n    );\n  },\n);\n\nexport const URLHealthItem = withDashboardResources<URLHealthItemProps>(\n  ({\n    watchURL,\n    stopWatchURL,\n    urlResults,\n    resources,\n    watchK8sResource,\n    stopWatchK8sResource,\n    subsystem,\n    models,\n  }) => {\n    const modelExists =\n      subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n      watchURL(\n        subsystem.url,\n        (subsystem as DashboardsOverviewHealthURLSubsystem<any>['properties']).fetch\n          ? (subsystem as DashboardsOverviewHealthURLSubsystem<any>['properties']).fetch\n          : undefined,\n      );\n      if (modelExists) {\n        watchK8sResource(subsystem.additionalResource);\n      }\n      return () => {\n        stopWatchURL(subsystem.url);\n        if (modelExists) {\n          stopWatchK8sResource(subsystem.additionalResource);\n        }\n      };\n    }, [watchURL, stopWatchURL, watchK8sResource, stopWatchK8sResource, subsystem, modelExists]);\n\n    const healthResult = urlResults.getIn([subsystem.url, 'data']);\n    const healthResultError = urlResults.getIn([subsystem.url, 'loadError']);\n\n    const k8sResult = subsystem.additionalResource\n      ? resources[subsystem.additionalResource.prop]\n      : null;\n    const healthState = subsystem.healthHandler(healthResult, healthResultError, k8sResult);\n\n    return (\n      <HealthItem\n        title={subsystem.title}\n        state={healthState.state}\n        details={healthState.message}\n        popupTitle={subsystem.popupTitle}\n        popupBodyContent={\n          subsystem.popupComponent\n            ? (hide) => (\n                <AsyncComponent\n                  loader={subsystem.popupComponent}\n                  healthResult={healthResult}\n                  healthResultError={healthResultError}\n                  k8sResult={k8sResult}\n                  hide={hide}\n                />\n              )\n            : undefined\n        }\n      />\n    );\n  },\n);\n\nexport const PrometheusHealthItem = withDashboardResources<PrometheusHealthItemProps>(\n  ({\n    watchK8sResource,\n    stopWatchK8sResource,\n    resources,\n    watchPrometheus,\n    stopWatchPrometheusQuery,\n    prometheusResults,\n    subsystem,\n    models,\n  }) => {\n    const { t } = useTranslation();\n    const { infrastructure } = React.useContext(ClusterDashboardContext);\n\n    const modelExists =\n      subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n      subsystem.queries.forEach((q) => watchPrometheus(q));\n      if (modelExists) {\n        watchK8sResource(subsystem.additionalResource);\n      }\n      return () => {\n        subsystem.queries.forEach((q) => stopWatchPrometheusQuery(q));\n        if (modelExists) {\n          stopWatchK8sResource(subsystem.additionalResource);\n        }\n      };\n    }, [\n      watchK8sResource,\n      stopWatchK8sResource,\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      subsystem,\n      modelExists,\n    ]);\n\n    const queryResults = React.useMemo(\n      () =>\n        subsystem.queries.map((q) => {\n          const [response, error] = getPrometheusQueryResponse(prometheusResults, q);\n          return {\n            response,\n            error,\n          };\n        }),\n      [prometheusResults, subsystem.queries],\n    );\n    const k8sResult = subsystem.additionalResource\n      ? resources[subsystem.additionalResource.prop]\n      : null;\n    const healthState = subsystem.healthHandler(queryResults, t, k8sResult, infrastructure);\n\n    return (\n      <HealthItem\n        title={subsystem.title}\n        state={healthState.state}\n        details={healthState.message}\n        popupTitle={subsystem.popupTitle}\n        popupClassname={subsystem.popupClassname}\n        popupKeepOnOutsideClick={subsystem.popupKeepOnOutsideClick}\n        popupBodyContent={\n          subsystem.popupComponent\n            ? (hide) => (\n                <AsyncComponent\n                  loader={subsystem.popupComponent}\n                  responses={queryResults}\n                  k8sResult={k8sResult}\n                  hide={hide}\n                />\n              )\n            : undefined\n        }\n      />\n    );\n  },\n);\n\nexport const ResourceHealthItem: React.FC<ResourceHealthItemProps> = ({ subsystem, namespace }) => {\n  const { t } = useTranslation();\n\n  const { title, resources, healthHandler, popupComponent, popupTitle } = subsystem;\n\n  const resourcesWithNamespace: WatchK8sResources<ResourcesObject> = React.useMemo(() => {\n    return {\n      ...resources,\n      ...(resources.imageManifestVuln && {\n        imageManifestVuln: { ...resources.imageManifestVuln, namespace },\n      }),\n    };\n  }, [resources, namespace]);\n\n  const resourcesResult: WatchK8sResults<ResourcesObject> = useK8sWatchResources(\n    resourcesWithNamespace,\n  );\n  const healthState: SubsystemHealth = healthHandler(resourcesResult, t);\n\n  return (\n    <HealthItem\n      title={title}\n      state={healthState.state}\n      details={healthState.message}\n      popupTitle={popupTitle}\n    >\n      {popupComponent && resourcesResult && (\n        <AsyncComponent loader={popupComponent} {...resourcesResult} namespace={namespace} />\n      )}\n    </HealthItem>\n  );\n};\n\ntype OperatorHealthItemProps = DashboardItemProps & {\n  operatorExtensions: DashboardsOverviewHealthOperator['properties'][];\n  dynamicOperatorSubsystems: ResolvedExtension<\n    DynamicDashboardsOverviewHealthOperator\n  >['properties'][];\n};\n\ntype URLHealthItemProps = DashboardItemProps & {\n  subsystem:\n    | DashboardsOverviewHealthURLSubsystem<any>['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthURLSubsystem<any>>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype PrometheusHealthItemProps = DashboardItemProps & {\n  subsystem:\n    | DashboardsOverviewHealthPrometheusSubsystem['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthPrometheusSubsystem>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype ResourceHealthItemProps = {\n  subsystem:\n    | DashboardsOverviewHealthResourceSubsystem['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthResourceSubsystem>['properties'];\n  namespace?: string;\n};\n\ntype OperatorsPopupProps = {\n  resources: FirehoseResourcesResult;\n  operatorExtensions: DashboardsOverviewHealthOperator['properties'][];\n  dynamicOperatorSubsystems: ResolvedExtension<\n    DynamicDashboardsOverviewHealthOperator\n  >['properties'][];\n};\n","import * as React from 'react';\nimport { K8sResourceKind } from '../../../../module/k8s';\n\nexport const ClusterDashboardContext = React.createContext<ClusterDashboardContext>({\n  infrastructureLoaded: true,\n  infrastructureError: null,\n});\n\n// eslint-disable-next-line no-redeclare\ntype ClusterDashboardContext = {\n  infrastructure?: K8sResourceKind;\n  infrastructureLoaded: boolean;\n  infrastructureError: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { FirehoseResourcesResult } from '@console/internal/components/utils';\nimport { GetOperatorsWithStatuses, LazyLoader, OperatorRowProps } from '@console/plugin-sdk';\nimport { getMostImportantStatuses } from './state-utils';\nimport { HealthState } from './states';\nimport StatusItem, { StatusPopupSection } from './StatusPopup';\n\nimport './operator-body.scss';\n\nexport const OperatorsSection: React.FC<OperatorsSectionProps> = ({\n  resources,\n  getOperatorsWithStatuses,\n  title,\n  linkTo,\n  Row,\n  Component,\n  isResolved,\n}) => {\n  const { t } = useTranslation();\n  const error = _.values(resources).some((r) => r.loadError);\n  const operatorStatuses = getOperatorsWithStatuses(resources);\n  const sortedOperatorStatuses = getMostImportantStatuses(operatorStatuses).sort((a, b) =>\n    a.operators[0].metadata.name.localeCompare(b.operators[0].metadata.name),\n  );\n  const operatorsHealthy = sortedOperatorStatuses.every((o) => o.status.health === HealthState.OK);\n  const RowLoading = React.useCallback(() => <div className=\"co-status__operator-skeleton\" />, []);\n  if (!operatorStatuses.length) {\n    return null;\n  }\n\n  return (\n    <StatusPopupSection\n      firstColumn={\n        <>\n          <span>{title}</span>\n          <span className=\"text-secondary co-status__operator-detail\">\n            {' '}\n            {t('console-shared~({{operatorStatusLength}} installed)', {\n              operatorStatusLength: operatorStatuses.length,\n            })}\n          </span>\n        </>\n      }\n      secondColumn={t('console-shared~Status')}\n    >\n      {error ? (\n        <div className=\"text-secondary\">{t('console-shared~Not available')}</div>\n      ) : (\n        !operatorsHealthy &&\n        sortedOperatorStatuses.map((operatorStatus) => (\n          <Row\n            key={operatorStatus.operators[0].metadata.uid}\n            Component={Component}\n            operatorStatus={operatorStatus}\n            LoadingComponent={RowLoading}\n            isResolved={isResolved}\n          />\n        ))\n      )}\n      <StatusItem\n        value={t('console-shared~All {{status}}', {\n          status: operatorStatuses[0].status.title.toLowerCase(),\n        })}\n        icon={operatorStatuses[0].status.icon}\n      >\n        <Link to={linkTo}>{t('console-shared~View all')}</Link>\n      </StatusItem>\n    </StatusPopupSection>\n  );\n};\n\ntype OperatorsSectionProps = {\n  resources: FirehoseResourcesResult;\n  getOperatorsWithStatuses: GetOperatorsWithStatuses;\n  title: string;\n  linkTo: string;\n  Row: React.ComponentType<\n    OperatorRowProps & {\n      LoadingComponent: () => JSX.Element;\n      Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n      key: string;\n      isResolved: boolean;\n    }\n  >;\n  isResolved: boolean;\n  Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useTranslation } from 'react-i18next';\nimport {\n  useExtensions,\n  DashboardsOverviewHealthSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthOperator,\n  isDashboardsOverviewHealthSubsystem,\n  isDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthURLSubsystem,\n  isDashboardsOverviewHealthPrometheusSubsystem,\n  isDashboardsOverviewHealthResourceSubsystem,\n  isDashboardsOverviewHealthOperator,\n} from '@console/plugin-sdk';\nimport {\n  DashboardsOverviewHealthSubsystem as DynamicDashboardsOverviewHealthSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem as DynamicDashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthURLSubsystem as DynamicDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthOperator as DynamicDashboardsOverviewHealthOperator,\n  isDashboardsOverviewHealthSubsystem as isDynamicDashboardsOverviewHealthSubsystem,\n  isDashboardsOverviewHealthURLSubsystem as isDynamicDashboardsOverviewHealthURLSubsystem,\n  isDashboardsOverviewHealthPrometheusSubsystem as isDynamicDashboardsOverviewHealthPrometheusSubsystem,\n  isResolvedDashboardsOverviewHealthURLSubsystem,\n  isResolvedDashboardsOverviewHealthPrometheusSubsystem,\n  isResolvedDashboardsOverviewHealthResourceSubsystem,\n  isResolvedDashboardsOverviewHealthOperator,\n  ResolvedExtension,\n  useResolvedExtensions,\n  WatchK8sResource,\n} from '@console/dynamic-plugin-sdk';\nimport { Gallery, GalleryItem, Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { BlueArrowCircleUpIcon, FLAGS, useCanClusterUpgrade } from '@console/shared';\n\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport AlertItem, {\n  StatusItem,\n} from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '../../../monitoring/utils';\nimport {\n  ClusterVersionKind,\n  referenceForModel,\n  hasAvailableUpdates,\n  K8sKind,\n  ObjectMetadata,\n} from '../../../../module/k8s';\nimport { ClusterVersionModel } from '../../../../models';\nimport { RootState } from '../../../../redux';\nimport {\n  OperatorHealthItem,\n  PrometheusHealthItem,\n  URLHealthItem,\n  ResourceHealthItem,\n} from './health-item';\nimport { useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { useNotificationAlerts } from '@console/shared/src/hooks/useNotificationAlerts';\n\nconst filterSubsystems = (\n  subsystems: (\n    | DashboardsOverviewHealthSubsystem\n    | ResolvedExtension<DynamicDashboardsOverviewHealthSubsystem>\n  )[],\n  k8sModels: ImmutableMap<string, K8sKind>,\n) =>\n  subsystems.filter((s) => {\n    if (\n      isDashboardsOverviewHealthURLSubsystem(s) ||\n      isDashboardsOverviewHealthPrometheusSubsystem(s) ||\n      isDynamicDashboardsOverviewHealthURLSubsystem(s) ||\n      isDynamicDashboardsOverviewHealthPrometheusSubsystem(s)\n    ) {\n      const subsystem = s as\n        | DashboardsOverviewHealthPrometheusSubsystem\n        | DashboardsOverviewHealthURLSubsystem\n        | ResolvedExtension<DynamicDashboardsOverviewHealthPrometheusSubsystem>\n        | ResolvedExtension<DynamicDashboardsOverviewHealthURLSubsystem>;\n      return subsystem.properties.additionalResource &&\n        !subsystem.properties.additionalResource.optional\n        ? !!k8sModels.get(subsystem.properties.additionalResource.kind)\n        : true;\n    }\n    return true;\n  });\n\nconst cvResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nexport const DashboardAlerts: React.FC<DashboardAlertsProps> = ({ labelSelector }) => {\n  const { t } = useTranslation();\n  const hasCVResource = useFlag(FLAGS.CLUSTER_VERSION);\n  const [alerts, , loadError] = useNotificationAlerts(labelSelector);\n  const [cv, cvLoaded] = useK8sWatchResource<ClusterVersionKind>(\n    hasCVResource ? cvResource : ({} as WatchK8sResource),\n  );\n  const canUpgrade = useCanClusterUpgrade();\n\n  const showClusterUpdate =\n    canUpgrade && hasCVResource && cvLoaded && hasAvailableUpdates(cv) && !labelSelector;\n  return (\n    <AlertsBody error={!_.isEmpty(loadError)}>\n      {showClusterUpdate && (\n        <StatusItem\n          key=\"clusterUpdate\"\n          Icon={BlueArrowCircleUpIcon}\n          message={t('public~A cluster version update is available')}\n        >\n          <Link to=\"/settings/cluster?showVersions\">{t('public~Update cluster')}</Link>\n        </StatusItem>\n      )}\n      {alerts.map((alert) => (\n        <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />\n      ))}\n    </AlertsBody>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\nexport const StatusCard = connect<StatusCardProps>(mapStateToProps)(({ k8sModels }) => {\n  const subsystemExtensions = useExtensions<DashboardsOverviewHealthSubsystem>(\n    isDashboardsOverviewHealthSubsystem,\n  );\n  const [dynamicSubsystemExtensions] = useResolvedExtensions<\n    DynamicDashboardsOverviewHealthSubsystem\n  >(isDynamicDashboardsOverviewHealthSubsystem);\n\n  const subsystems = React.useMemo(() => {\n    const filteredSubsystems = filterSubsystems(\n      [...subsystemExtensions, ...dynamicSubsystemExtensions],\n      k8sModels,\n    );\n    return filteredSubsystems.map((e) => {\n      if (\n        isResolvedDashboardsOverviewHealthURLSubsystem(e) ||\n        isResolvedDashboardsOverviewHealthPrometheusSubsystem(e) ||\n        isResolvedDashboardsOverviewHealthResourceSubsystem(e)\n      ) {\n        const popup = e.properties.popupComponent\n          ? { popupComponent: () => Promise.resolve(e.properties.popupComponent) }\n          : {};\n        return {\n          ...e,\n          properties: {\n            ...e.properties,\n            ...popup,\n          },\n        };\n      }\n      return e;\n    });\n  }, [subsystemExtensions, dynamicSubsystemExtensions, k8sModels]);\n\n  const operatorSubsystemIndex = React.useMemo(\n    () =>\n      subsystems.findIndex(\n        (e) =>\n          isDashboardsOverviewHealthOperator(e) || isResolvedDashboardsOverviewHealthOperator(e),\n      ),\n    [subsystems],\n  );\n  const { t } = useTranslation();\n  const healthItems: { title: string; Component: React.ReactNode }[] = [];\n  subsystems.forEach((subsystem) => {\n    if (\n      isDashboardsOverviewHealthURLSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthURLSubsystem(subsystem)\n    ) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <URLHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (\n      isDashboardsOverviewHealthPrometheusSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthPrometheusSubsystem(subsystem)\n    ) {\n      const { disallowedControlPlaneTopology } = subsystem.properties;\n      if (\n        disallowedControlPlaneTopology?.length &&\n        disallowedControlPlaneTopology.includes(window.SERVER_FLAGS.controlPlaneTopology)\n      ) {\n        return;\n      }\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <PrometheusHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (\n      isDashboardsOverviewHealthResourceSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthResourceSubsystem(subsystem)\n    ) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <ResourceHealthItem subsystem={subsystem.properties} />,\n      });\n    }\n  });\n\n  if (operatorSubsystemIndex !== -1) {\n    const operatorSubsystems: DashboardsOverviewHealthOperator['properties'][] = [];\n    const dynamicOperatorSubsystems: ResolvedExtension<\n      DynamicDashboardsOverviewHealthOperator\n    >['properties'][] = [];\n    subsystems.forEach((e) => {\n      if (isResolvedDashboardsOverviewHealthOperator(e)) {\n        dynamicOperatorSubsystems.push(e.properties);\n      } else if (isDashboardsOverviewHealthOperator(e)) {\n        operatorSubsystems.push(e.properties);\n      }\n    });\n    healthItems.splice(operatorSubsystemIndex, 0, {\n      title: 'Operators',\n      Component: (\n        <OperatorHealthItem\n          operatorExtensions={operatorSubsystems}\n          dynamicOperatorSubsystems={dynamicOperatorSubsystems}\n        />\n      ),\n    });\n  }\n\n  return (\n    <Card\n      data-test-id=\"status-card\"\n      className=\"co-overview-card--gradient\"\n      isClickable\n      isSelectable\n    >\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to=\"/monitoring/alerts\" data-test=\"status-card-view-alerts\">\n                {t('public~View alerts')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('public~Status')}</CardTitle>\n      </CardHeader>\n      <HealthBody>\n        <Gallery className=\"co-overview-status__health\" hasGutter>\n          {healthItems.map((item) => {\n            return (\n              <GalleryItem key={item.title} data-test={item.title}>\n                {item.Component}\n              </GalleryItem>\n            );\n          })}\n        </Gallery>\n      </HealthBody>\n      <DashboardAlerts />\n    </Card>\n  );\n});\n\ntype StatusCardProps = {\n  k8sModels: ImmutableMap<string, K8sKind>;\n};\n\ntype DashboardAlertsProps = {\n  labelSelector?: ObjectMetadata['labels'];\n};\n","import * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nexport const NodeDashboardContext = React.createContext<NodeDashboardContext>({\n  setCPULimit: () => {},\n  setMemoryLimit: () => {},\n  setHealthCheck: () => {},\n});\n\nexport type HealthCheck = {\n  failingHealthCheck: boolean;\n  reboot: boolean;\n};\n\ntype NodeDashboardContext = {\n  obj?: NodeKind;\n  cpuLimit?: LimitRequested;\n  setCPULimit: (state: LimitRequested) => void;\n  memoryLimit?: LimitRequested;\n  setMemoryLimit: (state: LimitRequested) => void;\n  healthCheck?: HealthCheck;\n  setHealthCheck: (state: HealthCheck) => void;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { NodeAddress } from '@console/dynamic-plugin-sdk/src/extensions/console-types';\nimport { DetailPropertyList, DetailPropertyListItem } from '@console/shared';\n\ntype NodeIPListProps = {\n  ips: NodeAddress[];\n  expand?: boolean;\n};\n\nconst NodeIPList: React.FC<NodeIPListProps> = ({ ips, expand = false }) => (\n  <DetailPropertyList>\n    {_.sortBy(ips, ['type']).map(\n      ({ type, address }) =>\n        address &&\n        (expand || type === 'InternalIP') && (\n          <DetailPropertyListItem\n            key={`{${type}/${address}`}\n            title={type.replace(/([a-z])([A-Z])/g, '$1 $2')}\n          >\n            {address}\n          </DetailPropertyListItem>\n        ),\n    )}\n  </DetailPropertyList>\n);\n\nexport default NodeIPList;\n","import * as React from 'react';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getNodeUptime } from '@console/shared/src';\n\ntype NodeUptimeProps = {\n  obj: NodeKind;\n};\n\nconst NodeUptime: React.FC<NodeUptimeProps> = ({ obj }) => (\n  <Timestamp timestamp={getNodeUptime(obj)} />\n);\n\nexport default NodeUptime;\n","import * as React from 'react';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { PopoverStatus, NodeStatus } from '@console/dynamic-plugin-sdk';\nimport { humanizeBinaryBytes, humanizeNumber } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { Status, SecondaryStatus } from '@console/shared';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { ErrorBoundary } from '@console/shared/src/components/error';\nimport { PressureQueries, Condition } from '../../queries';\nimport { nodeStatus } from '../../status/node';\nimport { GetNodeStatusExtensions, useNodeStatusExtensions } from './useNodeStatusExtensions';\n\nconst conditionDescriptionMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: 'available disk capacity is low',\n  [Condition.MEM_PRESSURE]: 'available memory is low',\n  [Condition.PID_PRESSURE]: 'CPU is running a large number of processes',\n});\n\nconst humanizeMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: humanizeBinaryBytes,\n  [Condition.MEM_PRESSURE]: humanizeBinaryBytes,\n  [Condition.PID_PRESSURE]: humanizeNumber,\n});\n\nconst isMonitoredCondition = (condition: Condition): boolean =>\n  [Condition.DISK_PRESSURE, Condition.MEM_PRESSURE, Condition.PID_PRESSURE].includes(condition);\n\nconst getDegradedStates = (node: NodeKind): Condition[] => {\n  return node.status.conditions\n    .filter(({ status, type }) => status === 'True' && isMonitoredCondition(type as Condition))\n    .map(({ type }) => type as Condition);\n};\n\ntype NodeStatusWithExtensionsProps = {\n  node: NodeKind;\n  statusExtensions: GetNodeStatusExtensions;\n  className?: string;\n};\n\nexport const NodeStatusWithExtensions: React.FC<NodeStatusWithExtensionsProps> = ({\n  node,\n  className,\n  statusExtensions,\n}) => {\n  const { t } = useTranslation();\n\n  const { popoverContent, secondaryStatuses } = React.useMemo(() => statusExtensions(node), [\n    statusExtensions,\n    node,\n  ]);\n\n  const mainStatus = <Status status={nodeStatus(node)} className={className} />;\n\n  return (\n    <>\n      {popoverContent.length ? (\n        <PopoverStatus title={t('console-app~Node status')} statusBody={mainStatus}>\n          <Stack>\n            {popoverContent.map(({ content, uid }) => (\n              <ErrorBoundary key={uid}>\n                <StackItem>{content}</StackItem>\n              </ErrorBoundary>\n            ))}\n          </Stack>\n        </PopoverStatus>\n      ) : (\n        mainStatus\n      )}\n      <SecondaryStatus status={secondaryStatuses} />\n      {getDegradedStates(node)?.map((item) => (\n        <div key={item}>\n          <ConsumerPopover\n            title={_.startCase(item)}\n            current={_.startCase(item)}\n            consumers={PressureQueries[item](node.metadata.name)}\n            humanize={humanizeMap[item]}\n            description={t(\n              \"console-app~This node's {{conditionDescription}}. Performance may be degraded.\",\n              { conditionDescription: conditionDescriptionMap[item] },\n            )}\n          />\n        </div>\n      ))}\n    </>\n  );\n};\n\ntype NodeStatusProps = {\n  node: NodeKind;\n  className?: string;\n};\n\nconst NodeStatus: React.FC<NodeStatusProps> = ({ node, className }) => {\n  const statusExtensions = useNodeStatusExtensions();\n\n  return (\n    <NodeStatusWithExtensions\n      node={node}\n      className={className}\n      statusExtensions={statusExtensions}\n    />\n  );\n};\n\nexport default NodeStatus;\n","import * as React from 'react';\nimport {\n  useResolvedExtensions,\n  NodeStatus,\n  isNodeStatus,\n  WatchK8sResource,\n  WatchK8sResults,\n  NodeKind,\n} from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\n\ntype PopoverContent = {\n  content: React.ReactNode;\n  uid: string;\n};\n\nexport type GetNodeStatusExtensions = (\n  node: NodeKind,\n) => {\n  popoverContent: PopoverContent[];\n  secondaryStatuses: string[];\n};\n\nexport const useNodeStatusExtensions = () => {\n  const [nodeStatusExtensions] = useResolvedExtensions<NodeStatus>(isNodeStatus);\n\n  const pluginResources = React.useMemo(() => {\n    const resources: { [key: string]: WatchK8sResource } = {};\n\n    nodeStatusExtensions.forEach(({ properties, uid }) => {\n      if (properties.resources) {\n        Object.keys(properties.resources).forEach((key) => {\n          resources[`${uid}-${key}`] = properties.resources[key];\n        });\n      }\n    });\n    return resources;\n  }, [nodeStatusExtensions]);\n\n  const extraResources = useK8sWatchResources(pluginResources);\n\n  return React.useCallback<GetNodeStatusExtensions>(\n    (node: NodeKind) => {\n      const content: PopoverContent[] = [];\n      const statuses: string[] = [];\n      nodeStatusExtensions.forEach(\n        ({ properties: { PopoverContent, title, isActive, resources }, uid, pluginID, type }) => {\n          const pResources: WatchK8sResults<any> = {};\n          if (resources) {\n            Object.keys(resources).forEach((key) => {\n              pResources[key] = extraResources[`${uid}-${key}`];\n            });\n          }\n          try {\n            if (isActive(node, pResources)) {\n              content.push({\n                content: <PopoverContent node={node} resources={pResources} />,\n                uid,\n              });\n              statuses.push(title);\n            }\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(`Extension ${pluginID}, ${type} failed:`, err);\n          }\n        },\n      );\n      return { popoverContent: content, secondaryStatuses: statuses };\n    },\n    [extraResources, nodeStatusExtensions],\n  );\n};\n","import * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { DASH, getNodeRoles } from '@console/shared';\n\ntype NodeRolesProps = {\n  node?: NodeKind;\n};\n\nconst NodeRoles: React.FC<NodeRolesProps> = ({ node }) => (\n  <>{getNodeRoles(node).sort().join(', ') || DASH}</>\n);\n\nexport default NodeRoles;\n","import * as _ from 'lodash';\nimport { QueryWithDescription } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nexport enum NodeQueries {\n  CPU_USAGE = 'CPU_USAGE',\n  CPU_TOTAL = 'CPU_TOTAL',\n  MEMORY_USAGE = 'MEMORY_USAGE',\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  POD_COUNT = 'POD_COUNT',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_FILESYSTEM = 'PODS_BY_FILESYSTEM',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_FILESYSTEM = 'PROJECTS_BY_FILESYSTEM',\n  PROJECTS_BY_NETWORK_IN = 'PROJECTS_BY_NETWORK_IN',\n  PROJECTS_BY_NETWORK_OUT = 'PROJECTS_BY_NETWORK_OUT',\n  FILESYSTEM_USAGE = 'FILESYSTEM_USAGE',\n  FILESYSTEM_TOTAL = 'FILESYSTEM_TOTAL',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  POD_RESOURCE_LIMIT_CPU = 'POD_RESOURCE_LIMIT_CPU',\n  POD_RESOURCE_LIMIT_MEMORY = 'POD_RESOURCE_LIMIT_MEMORY',\n  POD_RESOURCE_REQUEST_CPU = 'POD_RESOURCE_REQUEST_CPU',\n  POD_RESOURCE_REQUEST_MEMORY = 'POD_RESOURCE_REQUEST_MEMORY',\n}\n\nconst queries = {\n  [NodeQueries.CPU_USAGE]: _.template(`instance:node_cpu:rate:sum{instance='<%= node %>'}`),\n  [NodeQueries.CPU_TOTAL]: _.template(`instance:node_num_cpu:sum{instance='<%= node %>'}`),\n  [NodeQueries.MEMORY_USAGE]: _.template(\n    `node_memory_MemTotal_bytes{instance='<%= node %>'} - node_memory_MemAvailable_bytes{instance='<%= node %>'}`,\n  ),\n  [NodeQueries.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance='<%= node %>'}`),\n  [NodeQueries.POD_COUNT]: _.template(`kubelet_running_pods{instance=~'<%= ipAddress %>:.*'}`),\n  [NodeQueries.FILESYSTEM_USAGE]: _.template(\n    `sum(max by (device) (node_filesystem_size_bytes{instance='<%= node %>', device=~\"/.*\"})) - sum(max by (device) (node_filesystem_avail_bytes{instance='<%= node %>', device=~\"/.*\"})) or\n    sum (max by (volume) (windows_logical_disk_size_bytes{instance='<%= node %>'})) - sum(max by (volume) (windows_logical_disk_free_bytes{instance='<%= node %>'}))`,\n  ),\n  [NodeQueries.FILESYSTEM_TOTAL]: _.template(\n    `sum(max by (device) (node_filesystem_size_bytes{instance='<%= node %>', device=~\"/.*\"})) or sum(max by (volume) (windows_logical_disk_size_bytes{instance='<%= node %>'}))`,\n  ),\n  [NodeQueries.NETWORK_IN_UTILIZATION]: _.template(\n    `instance:node_network_receive_bytes:rate:sum{instance='<%= node %>'}`,\n  ),\n  [NodeQueries.NETWORK_OUT_UTILIZATION]: _.template(\n    `instance:node_network_transmit_bytes:rate:sum{instance='<%= node %>'}`,\n  ),\n};\n\nconst top25Queries = {\n  [NodeQueries.PODS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (pod, namespace)))`,\n  ),\n  [NodeQueries.PODS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`,\n  ),\n  [NodeQueries.PODS_BY_FILESYSTEM]: _.template(\n    `topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (pod, namespace)))`,\n  ),\n  [NodeQueries.PODS_BY_NETWORK_IN]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`,\n  ),\n  [NodeQueries.PODS_BY_NETWORK_OUT]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`,\n  ),\n  [NodeQueries.PROJECTS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (namespace)))`,\n  ),\n  [NodeQueries.PROJECTS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`,\n  ),\n  [NodeQueries.PROJECTS_BY_FILESYSTEM]: _.template(\n    `topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (namespace)))`,\n  ),\n  [NodeQueries.PROJECTS_BY_NETWORK_IN]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`,\n  ),\n  [NodeQueries.PROJECTS_BY_NETWORK_OUT]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`,\n  ),\n};\n\nconst resourceQuotaQueries = {\n  [NodeQueries.POD_RESOURCE_LIMIT_CPU]: _.template(\n    `sum(kube_pod_resource_limit{node='<%= node %>',resource='cpu'})`,\n  ),\n  [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: _.template(\n    `sum(kube_pod_resource_limit{node='<%= node %>',resource='memory'})`,\n  ),\n  [NodeQueries.POD_RESOURCE_REQUEST_CPU]: _.template(\n    `sum(kube_pod_resource_request{node='<%= node %>',resource='cpu'})`,\n  ),\n  [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: _.template(\n    `sum(kube_pod_resource_request{node='<%= node %>',resource='memory'})`,\n  ),\n};\n\nexport const getMultilineQueries = (node: string): { [key: string]: QueryWithDescription[] } => ({\n  [NodeQueries.NETWORK_UTILIZATION]: [\n    {\n      query: queries[NodeQueries.NETWORK_IN_UTILIZATION]({ node }),\n      desc: 'in',\n    },\n    {\n      query: queries[NodeQueries.NETWORK_OUT_UTILIZATION]({ node }),\n      desc: 'out',\n    },\n  ],\n});\n\nexport const getResourceQutoaQueries = (node: string) => ({\n  [NodeQueries.POD_RESOURCE_LIMIT_CPU]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_CPU]({\n    node,\n  }),\n  [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: resourceQuotaQueries[\n    NodeQueries.POD_RESOURCE_LIMIT_MEMORY\n  ]({ node }),\n  [NodeQueries.POD_RESOURCE_REQUEST_CPU]: resourceQuotaQueries[\n    NodeQueries.POD_RESOURCE_REQUEST_CPU\n  ]({\n    node,\n  }),\n  [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: resourceQuotaQueries[\n    NodeQueries.POD_RESOURCE_REQUEST_MEMORY\n  ]({ node }),\n});\n\nexport const getUtilizationQueries = (node: string, ipAddress: string) => ({\n  [NodeQueries.CPU_USAGE]: queries[NodeQueries.CPU_USAGE]({ node }),\n  [NodeQueries.CPU_TOTAL]: queries[NodeQueries.CPU_TOTAL]({ node }),\n  [NodeQueries.MEMORY_USAGE]: queries[NodeQueries.MEMORY_USAGE]({ node }),\n  [NodeQueries.MEMORY_TOTAL]: queries[NodeQueries.MEMORY_TOTAL]({ node }),\n  [NodeQueries.POD_COUNT]: queries[NodeQueries.POD_COUNT]({ ipAddress }),\n  [NodeQueries.FILESYSTEM_USAGE]: queries[NodeQueries.FILESYSTEM_USAGE]({\n    node,\n  }),\n  [NodeQueries.FILESYSTEM_TOTAL]: queries[NodeQueries.FILESYSTEM_TOTAL]({\n    node,\n  }),\n});\n\nexport const getTopConsumerQueries = (ipAddress: string) => ({\n  [NodeQueries.PODS_BY_CPU]: top25Queries[NodeQueries.PODS_BY_CPU]({ ipAddress }),\n  [NodeQueries.PODS_BY_MEMORY]: top25Queries[NodeQueries.PODS_BY_MEMORY]({ ipAddress }),\n  [NodeQueries.PODS_BY_FILESYSTEM]: top25Queries[NodeQueries.PODS_BY_FILESYSTEM]({ ipAddress }),\n  [NodeQueries.PODS_BY_NETWORK_IN]: top25Queries[NodeQueries.PODS_BY_NETWORK_IN]({ ipAddress }),\n  [NodeQueries.PODS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PODS_BY_NETWORK_OUT]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_CPU]: top25Queries[NodeQueries.PROJECTS_BY_CPU]({ ipAddress }),\n  [NodeQueries.PROJECTS_BY_MEMORY]: top25Queries[NodeQueries.PROJECTS_BY_MEMORY]({ ipAddress }),\n  [NodeQueries.PROJECTS_BY_FILESYSTEM]: top25Queries[NodeQueries.PROJECTS_BY_FILESYSTEM]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_NETWORK_IN]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_IN]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_OUT]({\n    ipAddress,\n  }),\n});\n","export const CONDITIONS_WARNING = (reboot = false) =>\n  `One or more health check remediation conditions have been met. The node will ${\n    reboot ? 'reboot' : 'reprovision'\n  } automatically.`;\n\nexport const CPU_LIMIT_REQ_ERROR =\n  'This node’s CPU resources are overcommitted. The total CPU resource limit of all pods exceeds the node’s total capacity. The total CPU requested is also approaching the node’s capacity. Pod performance will be throttled under high load, and new pods may not be schedulable on this node.';\nexport const CPU_LIMIT_ERROR =\n  'This node’s CPU resources are overcommitted. The total CPU resource limit of all pods exceeds the node’s total capacity. Pod performance will be throttled under high load.';\nexport const CPU_LIMIT_WARN =\n  'The total CPU resource limit of all pods on this node is approaching the node’s capacity. Pod performance may be throttled under high load.';\nexport const CPU_LIMIT_REQ_WARN =\n  'The total CPU resource limit and amount requested by all pods on this node is approaching the node’s capacity. Pod performance may be throttled under high load, and new pods may not be schedulable.';\nexport const CPU_REQ_WARN =\n  'The total CPU requested by all pods on this node is approaching the node’s capacity. New pods may not be schedulable on this node.';\n\nexport const MEM_LIMIT_REQ_ERROR =\n  'This node’s memory resources are overcommitted. The total memory resource limit of all pods exceeds the node’s total capacity. The total memory requested is also approaching the node’s capacity. Pods will be terminated under high load, and new pods may not be schedulable on this node.';\nexport const MEM_LIMIT_ERROR =\n  'This node’s memory resources are overcommitted. The total memory resource limit of all pods exceeds the node’s total capacity. Pods will be terminated under high load.';\nexport const MEM_LIMIT_WARN =\n  'The total memory resource limit of all pods on this node is approaching the node’s capacity. Pods may be terminated if the limit is reached under high load.';\nexport const MEM_LIMIT_REQ_WARN =\n  'The total memory resource limit and amount requested by all pods on this node is approaching the node’s capacity. Pods may be terminated if the limit is reached under high load, and new pods may not be schedulable on this node.';\nexport const MEM_REQ_WARN =\n  'The total memory requested by all pods on this node is approaching the node’s capacity. New pods may not be schedulable on this node.';\n","import * as React from 'react';\nimport { Gallery, GalleryItem, Alert, Stack, StackItem } from '@patternfly/react-core';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { WatchK8sResource, WatchK8sResult } from '@console/dynamic-plugin-sdk';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { pluralize } from '@console/internal/components/utils/details-page';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { MachineModel, MachineHealthCheckModel } from '@console/internal/models';\nimport {\n  referenceForModel,\n  MachineKind,\n  NodeKind,\n  MachineHealthCheckKind,\n  MachineHealthCondition,\n} from '@console/internal/module/k8s';\nimport { LabelSelector } from '@console/internal/module/k8s/label-selector';\nimport { getNodeMachineNameAndNamespace } from '@console/shared';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport {\n  HealthState,\n  healthStateMapping,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport Status, {\n  StatusPopupSection,\n} from '@console/shared/src/components/dashboard/status-card/StatusPopup';\nimport NodeStatus from '../NodeStatus';\nimport { CONDITIONS_WARNING } from './messages';\nimport { NodeDashboardContext } from './NodeDashboardContext';\n\nimport './node-health.scss';\n\nexport const HealthChecksPopup: React.FC<HealthChecksPopupProps> = ({\n  conditions = [],\n  machineHealthChecks,\n  disabledAlert,\n}) => {\n  let conditionFailing: boolean = false;\n  let reboot: boolean = false;\n  const groupedConditions = Object.values(\n    _.groupBy(\n      conditions.sort((a, b) => a.type.localeCompare(b.type)),\n      (c) => c.type,\n    ),\n  ).map((cds) => {\n    const failing = cds.some((c) => c.failing);\n    if (failing) {\n      conditionFailing = true;\n      reboot =\n        machineHealthChecks?.[0]?.metadata?.annotations?.[\n          'machine.openshift.io/remediation-strategy'\n        ] === 'external-baremetal';\n    }\n    return {\n      title: cds[0].type,\n      value: failing ? 'Failing' : 'Okay',\n      icon: failing\n        ? healthStateMapping[HealthState.WARNING].icon\n        : healthStateMapping[HealthState.OK].icon,\n    };\n  });\n  const { t } = useTranslation();\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        {t(\n          'console-app~{{ machineHealthCheckLabelPlural }} automatically remediate node health issues.',\n          {\n            machineHealthCheckLabelPlural: MachineHealthCheckModel.labelPlural,\n          },\n        )}\n      </StackItem>\n      {!!machineHealthChecks?.length && (\n        <StackItem>\n          <StatusPopupSection\n            firstColumn={pluralize(\n              machineHealthChecks.length,\n              MachineHealthCheckModel.label,\n              MachineHealthCheckModel.labelPlural,\n              false,\n            )}\n          >\n            {machineHealthChecks.map(({ metadata }) => (\n              <Status key={metadata.uid}>\n                <ResourceLink\n                  kind={referenceForModel(MachineHealthCheckModel)}\n                  name={metadata.name}\n                  namespace={metadata.namespace}\n                  className=\"co-status-popup__title\"\n                />\n              </Status>\n            ))}\n          </StatusPopupSection>\n        </StackItem>\n      )}\n      {!!conditions.length && (\n        <StackItem>\n          <StatusPopupSection\n            firstColumn={t('console-app~Conditions')}\n            secondColumn={t('console-app~Status')}\n          >\n            {groupedConditions.map((c) => (\n              <Status {...c} key={c.title}>\n                {c.title}\n              </Status>\n            ))}\n          </StatusPopupSection>\n        </StackItem>\n      )}\n      {conditionFailing && (\n        <StackItem>\n          <Alert\n            variant=\"warning\"\n            isInline\n            title={reboot ? t('console-app~Reboot pending') : t('console-app~Reprovision pending')}\n            className=\"co-node-health__popup-alert\"\n          >\n            {CONDITIONS_WARNING(reboot)}\n          </Alert>\n        </StackItem>\n      )}\n      {machineHealthChecks?.length > 1 && (\n        <StackItem>\n          <Alert\n            variant=\"warning\"\n            isInline\n            title=\"Multiple resources\"\n            className=\"co-node-health__popup-alert\"\n          >\n            {t(\n              'console-app~Only one {{ machineHealthCheckLabel }} resource should match this node.',\n              {\n                machineHealthCheckLabel: MachineHealthCheckModel.label,\n              },\n            )}\n          </Alert>\n        </StackItem>\n      )}\n      {disabledAlert && (\n        <StackItem>\n          <Alert isInline title={disabledAlert.title} className=\"co-node-health__popup-alert\">\n            {disabledAlert.message}\n          </Alert>\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\nexport const machineHealthChecksResource: WatchK8sResource = {\n  isList: true,\n  kind: referenceForModel(MachineHealthCheckModel),\n};\n\nconst isConditionFailing = (\n  node: NodeKind,\n  { type, status, timeout }: MachineHealthCondition,\n): boolean => {\n  const nodeCondition = node.status.conditions.find((c) => c.type === type && c.status === status);\n  if (!nodeCondition) {\n    return false;\n  }\n  const transitionTime = new Date(nodeCondition.lastTransitionTime).getTime();\n  const currentTime = new Date().getTime();\n  const withTO = transitionTime + 1000 * parseInt(timeout, 10);\n  return withTO < currentTime;\n};\n\nexport const getMachineHealth = (\n  node: NodeKind,\n  machine: WatchK8sResult<MachineKind>,\n  healthChecks: WatchK8sResult<MachineHealthCheckKind[]>,\n): MachineHealth => {\n  const [mData, mLoaded, mLoadError] = machine;\n  const [hcData, hcLoaded, hcLoadError] = healthChecks;\n  if (mLoadError || hcLoadError) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n    };\n  }\n  if (!mLoaded || !hcLoaded) {\n    return {\n      state: HealthState.LOADING,\n    };\n  }\n  const matchingHC = hcData.filter((hc) => {\n    const selector = new LabelSelector(hc.spec?.selector || {});\n    return selector.matches(mData);\n  });\n  if (!matchingHC.length) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n      noIcon: true,\n      details: i18next.t('console-app~Not configured'),\n    };\n  }\n  let failingConditions: number = 0;\n  const conditions = _.flatten(\n    matchingHC.map(\n      (hc) =>\n        hc.spec?.unhealthyConditions?.map((c) => {\n          const failing = isConditionFailing(node, c);\n          if (failing) {\n            failingConditions++;\n          }\n          return {\n            ...c,\n            failing,\n          };\n        }) ?? [],\n    ),\n  );\n\n  return {\n    state:\n      failingConditions || matchingHC.length > 1 || conditions.length === 0\n        ? HealthState.WARNING\n        : HealthState.OK,\n    details:\n      matchingHC.length > 1\n        ? 'Multiple resources'\n        : failingConditions\n        ? `${pluralize(failingConditions, 'condition')} failing`\n        : conditions.length > 0\n        ? `${pluralize(conditions.length, 'condition')} passing`\n        : i18next.t('console-app~No conditions'),\n    conditions,\n    matchingHC,\n  };\n};\n\ntype HealthChecksItemProps = {\n  disabledAlert?: {\n    title: string;\n    message: React.ReactNode;\n  };\n};\n\nexport const HealthChecksItem: React.FC<HealthChecksItemProps> = ({ disabledAlert }) => {\n  const { obj, setHealthCheck } = React.useContext(NodeDashboardContext);\n  const [name, namespace] = getNodeMachineNameAndNamespace(obj);\n  const { t } = useTranslation();\n  const machine = useK8sWatchResource<MachineKind>(\n    name && namespace\n      ? {\n          groupVersionKind: getGroupVersionKindForModel(MachineModel),\n          name,\n          namespace,\n        }\n      : undefined,\n  );\n  const healthChecks = useK8sWatchResource<MachineHealthCheckKind[]>(machineHealthChecksResource);\n  const healthState = disabledAlert\n    ? { state: HealthState.NOT_AVAILABLE }\n    : getMachineHealth(obj, machine, healthChecks);\n\n  let failingHealthCheck = false;\n  let reboot = false;\n  _.forEach(healthState.conditions, (c) => {\n    if (c.failing) {\n      failingHealthCheck = true;\n      reboot =\n        healthState.matchingHC?.[0]?.metadata?.annotations?.[\n          'machine.openshift.io/remediation-strategy'\n        ] === 'external-baremetal';\n      return false;\n    }\n    return true;\n  });\n\n  setHealthCheck({\n    failingHealthCheck,\n    reboot,\n  });\n\n  return (\n    <HealthItem\n      title={t('console-app~Health checks')}\n      popupTitle={t('console-app~Health checks')}\n      {...healthState}\n    >\n      <HealthChecksPopup\n        conditions={healthState.conditions}\n        machineHealthChecks={healthState.matchingHC}\n        disabledAlert={disabledAlert}\n      />\n    </HealthItem>\n  );\n};\n\nconst NodeHealth: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  return (\n    <HealthBody>\n      <Gallery className=\"co-overview-status__health\" hasGutter>\n        <GalleryItem>\n          <NodeStatus className=\"co-node-health__status\" node={obj} />\n        </GalleryItem>\n        <GalleryItem>\n          <HealthChecksItem />\n        </GalleryItem>\n      </Gallery>\n    </HealthBody>\n  );\n};\n\nexport default NodeHealth;\n\ntype MachineHealthConditionWithStatus = MachineHealthCondition & {\n  failing: boolean;\n};\n\ntype MachineHealth = {\n  state: HealthState;\n  details?: string;\n  noIcon?: boolean;\n  conditions?: MachineHealthConditionWithStatus[];\n  matchingHC?: MachineHealthCheckKind[];\n};\n\ntype HealthChecksPopupProps = {\n  conditions: MachineHealthConditionWithStatus[];\n  machineHealthChecks: MachineHealthCheckKind[];\n  disabledAlert?: {\n    title: string;\n    message: React.ReactNode;\n  };\n};\n","import * as React from 'react';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { TopConsumerPopoverProps } from '@console/dynamic-plugin-sdk';\nimport {\n  humanizeCpuCores,\n  humanizeBinaryBytes,\n  humanizeDecimalBytesPerSec,\n} from '@console/internal/components/utils';\nimport { PodModel, ProjectModel } from '@console/internal/models';\nimport ConsumerPopover, {\n  LimitsBody,\n} from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { NodeQueries, getTopConsumerQueries } from './queries';\n\nexport const NodeUtilizationContext = React.createContext({\n  nodeIP: '',\n  nodeName: '',\n});\n\nconst useConsumers = (nsQuery: NodeQueries, podQuery: NodeQueries) => {\n  const { nodeIP, nodeName } = React.useContext(NodeUtilizationContext);\n  return React.useMemo(() => {\n    const queries = getTopConsumerQueries(nodeIP);\n    return [\n      {\n        query: queries[nsQuery],\n        model: ProjectModel,\n        metric: 'namespace',\n      },\n      {\n        query: queries[podQuery],\n        model: PodModel,\n        fieldSelector: `spec.nodeName=${nodeName}`,\n        metric: 'pod',\n      },\n    ];\n  }, [nsQuery, podQuery, nodeIP, nodeName]);\n};\n\nexport type PopoverProps = TopConsumerPopoverProps & {\n  title?: string;\n  position?: PopoverPosition;\n};\n\nexport const CPUPopover: React.FC<PopoverProps> = ({ current, position, title, ...rest }) => {\n  const consumers = useConsumers(NodeQueries.PROJECTS_BY_CPU, NodeQueries.PODS_BY_CPU);\n  const { t } = useTranslation();\n  return (\n    <ConsumerPopover\n      current={current}\n      title={title || t('console-app~CPU')}\n      consumers={consumers}\n      humanize={humanizeCpuCores}\n      position={position}\n    >\n      <LimitsBody {...rest} current={current} />\n    </ConsumerPopover>\n  );\n};\n\nexport const MemoryPopover: React.FC<PopoverProps> = ({ current, position, title, ...rest }) => {\n  const consumers = useConsumers(NodeQueries.PROJECTS_BY_MEMORY, NodeQueries.PODS_BY_MEMORY);\n  const { t } = useTranslation();\n  return (\n    <ConsumerPopover\n      current={current}\n      title={title || t('console-app~Memory')}\n      consumers={consumers}\n      humanize={humanizeBinaryBytes}\n      position={position}\n    >\n      <LimitsBody {...rest} current={current} />\n    </ConsumerPopover>\n  );\n};\n\nexport const FilesystemPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    NodeQueries.PROJECTS_BY_FILESYSTEM,\n    NodeQueries.PODS_BY_FILESYSTEM,\n  );\n  return (\n    <ConsumerPopover\n      title={t('console-app~Filesystem')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeBinaryBytes}\n    />\n  );\n};\n\nexport const NetworkInPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    NodeQueries.PROJECTS_BY_NETWORK_IN,\n    NodeQueries.PODS_BY_NETWORK_IN,\n  );\n  return (\n    <ConsumerPopover\n      title={t('console-app~Network in')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeDecimalBytesPerSec}\n    />\n  );\n};\n\nexport const NetworkOutPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    NodeQueries.PROJECTS_BY_NETWORK_OUT,\n    NodeQueries.PODS_BY_NETWORK_OUT,\n  );\n  return (\n    <ConsumerPopover\n      title={t('console-app~Network out')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeDecimalBytesPerSec}\n    />\n  );\n};\n"],"sourceRoot":""}