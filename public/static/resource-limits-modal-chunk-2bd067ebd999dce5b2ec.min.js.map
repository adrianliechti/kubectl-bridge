{"version":3,"sources":["webpack:///./packages/console-app/src/components/modals/resource-limits/ResourceLimitsModal.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/import-types.ts","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts","webpack:///./packages/dev-console/src/components/import/serverless/serverless-utils.ts","webpack:///./packages/console-app/src/components/modals/resource-limits/ResourceLimitsModalLauncher.tsx","webpack:///./packages/dev-console/src/components/import/advanced/ResourceLimitSection.tsx"],"names":["handleSubmit","cancel","isSubmitting","status","errors","t","className","onSubmit","hideTitle","submitDisabled","inProgress","errorMessage","submitError","submitText","flexStyle","display","flex","flexDirection","margin","title","subTitle","fullWidth","children","flexLayout","extraMargin","dataTest","style","PipelineType","hostnameRegex","pathRegex","gitUrlRegex","projectNameValidationSchema","shape","name","matches","required","applicationNameValidationSchema","selectedKey","max","when","is","then","deploymentValidationSchema","replicas","transform","cv","undefined","test","min","Number","MAX_SAFE_INTEGER","maxSafeInteger","value","message","resourcesValidationSchema","oneOf","OpenShift","Kubernetes","KnativeService","serverlessValidationSchema","scaling","minpods","maxpods","limit","this","parent","concurrencytarget","concurrencylimit","concurrencyutilization","autoscale","autoscalewindow","autoscalewindowUnit","unit","convertToSec","domainMapping","of","excludeEmptyString","domainName","split","length","routeValidationSchema","secure","tls","termination","hostname","path","unknownTargetPort","typeError","integer","limitsValidationSchema","cpu","request","requestUnit","limitUnit","ensure","memory","imageValidationSchema","build","strategy","selected","tag","gitValidationSchema","url","type","showGitType","dockerValidationSchema","containerPort","dockerfilePath","devfileValidationSchema","devfilePath","devfileContent","devfileHasError","devfileSuggestedResources","buildValidationSchema","isiValidationSchema","image","importFlowPipelineTemplateValidationSchema","isPipelineEnabled","buildOption","pipelineType","PIPELINES","PAC","templateSelected","isInteger","bitBucketUserNameRegex","getAutoscaleWindow","autoscaleValue","val","match","defaultAutoscalewindowUnit","DOMAIN_MAPPING_KSVC_INFO_REGEX","removeKsvcInfoFromDomainMapping","dm","replace","getOtherKsvcFromDomainMapping","currentKsvcName","spec","ref","apiVersion","kind","removeDuplicateDomainMappings","allDomainMappings","connectedDomainMappings","Set","filter","includes","map","n","hasOtherKsvcDomainMappings","some","RegExp","getAllOtherDomainMappingInUse","domainMappings","data","serviceName","d","selectedDomain","find","metadata","rlValidationSchema","limits","ResourceLimitsModalLauncher","props","currentValues","resource","container","template","containers","initialValues","values","actions","resources","model","op","close","catch","error","setStatus","validationSchema","formikProps","resourceLimitsModal","label","unitName","unitOptions","helpText"],"mappings":"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","file":"resource-limits-modal-chunk-2bd067ebd999dce5b2ec.min.js","sourcesContent":["import * as React from 'react';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport ResourceLimitSection from '@console/dev-console/src/components/import/advanced/ResourceLimitSection';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\n\ninterface ResourceLimitsModalProps {\n  cancel?: () => void;\n}\n\ntype Props = FormikProps<FormikValues> & ResourceLimitsModalProps;\n\nconst ResourceLimitsModal: React.FC<Props> = ({\n  handleSubmit,\n  cancel,\n  isSubmitting,\n  status,\n  errors,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <form className=\"modal-content\" onSubmit={handleSubmit}>\n      <ModalTitle>{t('console-app~Edit resource limits')}</ModalTitle>\n      <ModalBody>\n        <ResourceLimitSection hideTitle />\n      </ModalBody>\n      <ModalSubmitFooter\n        submitDisabled={!_.isEmpty(errors) || isSubmitting}\n        inProgress={isSubmitting}\n        errorMessage={status?.submitError}\n        submitText={t('console-app~Save')}\n        cancel={cancel}\n      />\n    </form>\n  );\n};\n\nexport default ResourceLimitsModal;\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { PipelineKind } from '../../types';\n\nexport enum PipelineType {\n  PAC = 'pac',\n  PIPELINE = 'pipeline',\n}\nexport interface PipelineData {\n  enabled: boolean;\n  type?: PipelineType;\n  template?: PipelineKind;\n}\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { BuildOptions, Resources } from './import-types';\nimport { removeKsvcInfoFromDomainMapping } from './serverless/serverless-utils';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nconst convertToSec = (value: number, unit: string): number => {\n  switch (unit) {\n    case 'm': {\n      return value * 60;\n    }\n    case 'h': {\n      return value * 3600;\n    }\n    default: {\n      return value;\n    }\n  }\n};\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    replicas: yup\n      .number()\n      .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n      .test(isInteger(t('devconsole~Replicas must be an integer.')))\n      .min(0, t('devconsole~Replicas must be greater than or equal to 0.'))\n      .max(\n        Number.MAX_SAFE_INTEGER,\n        t('devconsole~Replicas must be lesser than or equal to {{maxSafeInteger}}.', {\n          maxSafeInteger: Number.MAX_SAFE_INTEGER,\n        }),\n      )\n      .test({\n        name: 'isEmpty',\n        test: (value) => value !== undefined,\n        message: t('devconsole~This field cannot be empty.'),\n      }),\n  });\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = (t: TFunction) =>\n  yup.object().when('resources', {\n    is: Resources.KnativeService,\n    then: yup.object().shape({\n      scaling: yup.object({\n        minpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Min Pods must be an integer.')))\n          .min(0, t('devconsole~Min Pods must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Min Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        maxpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Max Pods must be an integer.')))\n          .min(1, t('devconsole~Max Pods must be greater than or equal to 1.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Max Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          )\n          .test({\n            test(limit) {\n              const { minpods } = this.parent;\n              return limit ? limit >= minpods : true;\n            },\n            message: t('devconsole~Max Pods must be greater than or equal to Min Pods.'),\n          }),\n        concurrencytarget: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency target must be an integer.')))\n          .min(0, t('devconsole~Concurrency target must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency target must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencylimit: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency limit must be an integer.')))\n          .min(0, t('devconsole~Concurrency limit must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency limit must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencyutilization: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .min(0, t('devconsole~Concurrency utilization must be between 0 and 100.'))\n          .max(100, t('devconsole~Concurrency utilization must be between 0 and 100.')),\n        autoscale: yup.object().shape({\n          autoscalewindow: yup\n            .number()\n            .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n            .test({\n              test(autoscalewindow) {\n                if (autoscalewindow) {\n                  const { autoscalewindowUnit } = this.parent;\n                  const value = convertToSec(autoscalewindow, autoscalewindowUnit);\n                  return value >= 6 && value <= 3600;\n                }\n                return true;\n              },\n              message: t('devconsole~Autoscale window must be between 6s and 1h.'),\n            }),\n        }),\n      }),\n      domainMapping: yup.array().of(\n        yup\n          .string()\n          .transform(removeKsvcInfoFromDomainMapping)\n          .matches(hostnameRegex, {\n            message: t(\n              'devconsole~Domain name must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n            ),\n            excludeEmptyString: true,\n          })\n          .test(\n            'domainname-has-segements',\n            t('devconsole~Domain name must consist of at least two segments separated by dots.'),\n            function (domainName: string) {\n              return domainName.split('.').length >= 2;\n            },\n          ),\n      ),\n    }),\n  });\n\nexport const routeValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    secure: yup.boolean(),\n    tls: yup.object().when('secure', {\n      is: true,\n      then: yup.object({\n        termination: yup.string().required(t('devconsole~Please select a termination type.')),\n      }),\n    }),\n    hostname: yup\n      .string()\n      .matches(hostnameRegex, {\n        message: t(\n          'devconsole~Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.')),\n    path: yup.string().matches(pathRegex, {\n      message: t('devconsole~Path must start with /.'),\n      excludeEmptyString: true,\n    }),\n    unknownTargetPort: yup\n      .number()\n      .typeError(t('devconsole~Port must be an integer.'))\n      .integer(t('devconsole~Port must be an integer.'))\n      .min(1, t('devconsole~Port must be between 1 and 65535.'))\n      .max(65535, t('devconsole~Port must be between 1 and 65535.')),\n  });\n\nexport const limitsValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    cpu: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limitUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${limit}${limitUnit}`) >=\n                convertToBaseValue(`${request}${requestUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU limit must be greater than or equal to request.'),\n        }),\n    }),\n    memory: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory limit must be greater than or equal to request.'),\n        }),\n      limitUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n    }),\n  });\n\nexport const imageValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Source',\n    then: yup.object().shape({\n      selected: yup.string().required(t('devconsole~Required')),\n      tag: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const gitValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    url: yup\n      .string()\n      .max(2000, t('devconsole~Please enter a URL that is less then 2000 characters.'))\n      .matches(gitUrlRegex, t('devconsole~Invalid Git URL.'))\n      .required(t('devconsole~Required')),\n    type: yup.string().when('showGitType', {\n      is: true,\n      then: yup\n        .string()\n        .required(t('devconsole~We failed to detect the Git type. Please choose a Git type.')),\n    }),\n    showGitType: yup.boolean(),\n  });\n\nexport const dockerValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Docker',\n    then: yup.object().shape({\n      containerPort: yup\n        .number()\n        .test(isInteger(t('devconsole~Container port should be an integer'))),\n      dockerfilePath: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const devfileValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Devfile',\n    then: yup.object().shape({\n      devfilePath: yup.string().required(t('devconsole~Required')),\n      devfileContent: yup\n        .string()\n        .min(1, t('devconsole~Required'))\n        .required(t('devconsole~Required')),\n      devfileHasError: yup.boolean().oneOf([false]),\n      devfileSuggestedResources: yup.object().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = (t: TFunction) =>\n  yup.string().required(t('devconsole~Required'));\n\nexport const isiValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup.string().required(t('devconsole~Required')),\n    image: yup.object().required(t('devconsole~Required')),\n    tag: yup.string(),\n    status: yup.string().required(t('devconsole~Required')),\n  });\n\nexport const importFlowPipelineTemplateValidationSchema = yup\n  .object()\n  .when(['enabled', 'build.option', 'type'], {\n    is: (isPipelineEnabled, buildOption, pipelineType) =>\n      (isPipelineEnabled || buildOption === BuildOptions.PIPELINES) &&\n      pipelineType !== PipelineType.PAC,\n    then: yup.object().shape({\n      templateSelected: yup.string().required(),\n    }),\n  });\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n\nexport const bitBucketUserNameRegex = /^[a-z]([a-z0-9_]-?)*[a-z0-9]$/;\n","import { apiVersionForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin/src';\nimport { AutoscaleWindowType } from '../import-types';\n\nexport const getAutoscaleWindow = (autoscaleValue: string): AutoscaleWindowType => {\n  const windowRegEx = /^[0-9]+|[a-zA-Z]*/g;\n  const [val, unit] = autoscaleValue?.match(windowRegEx);\n  return {\n    autoscalewindow: Number(val) || '',\n    autoscalewindowUnit: unit || 's',\n    defaultAutoscalewindowUnit: unit || 's',\n  };\n};\n\nconst DOMAIN_MAPPING_KSVC_INFO_REGEX = / *\\([^)]*\\) */g;\n\nexport const removeKsvcInfoFromDomainMapping = (dm: string) =>\n  dm.replace(DOMAIN_MAPPING_KSVC_INFO_REGEX, '');\n\nexport const getOtherKsvcFromDomainMapping = (\n  dm: K8sResourceKind,\n  currentKsvcName: string,\n): string | null => {\n  if (!dm.spec?.ref) return null;\n  const { apiVersion, kind, name } = dm.spec.ref;\n  return apiVersionForModel(ServiceModel) === apiVersion &&\n    kind === ServiceModel.kind &&\n    name !== currentKsvcName\n    ? name\n    : null;\n};\n\nexport const removeDuplicateDomainMappings = (\n  allDomainMappings: string[],\n  connectedDomainMappings: string[],\n): string[] => {\n  return [\n    ...new Set(\n      allDomainMappings\n        ?.filter((dm) =>\n          connectedDomainMappings?.length > 0\n            ? connectedDomainMappings?.includes(removeKsvcInfoFromDomainMapping(dm))\n            : true,\n        )\n        .map((n) => removeKsvcInfoFromDomainMapping(n)),\n    ),\n  ];\n};\n\nexport const hasOtherKsvcDomainMappings = (domainMapping: string[]): boolean =>\n  domainMapping.some((dm) => new RegExp(DOMAIN_MAPPING_KSVC_INFO_REGEX).test(dm));\n\nexport const getAllOtherDomainMappingInUse = (\n  domainMappings: string[],\n  data: K8sResourceKind[] = [],\n  serviceName: string,\n): K8sResourceKind[] =>\n  domainMappings\n    .filter((d) => hasOtherKsvcDomainMappings([d]))\n    .map((dm) => {\n      const selectedDomain = data?.find(\n        (d) => d.metadata.name === removeKsvcInfoFromDomainMapping(dm),\n      );\n      return selectedDomain && selectedDomain.spec?.ref?.name !== serviceName\n        ? selectedDomain\n        : null;\n    })\n    .filter((d) => !!d);\n","import * as React from 'react';\nimport { Formik } from 'formik';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { limitsValidationSchema } from '@console/dev-console/src/components/import/validation-schema';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { K8sKind, k8sPatch, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getLimitsDataFromResource, getResourceLimitsData } from '@console/shared/src';\nimport ResourceLimitsModal from './ResourceLimitsModal';\n\nexport type ResourceLimitsModalLauncherProps = {\n  model: K8sKind;\n  resource: K8sResourceKind;\n  close?: () => void;\n} & ModalComponentProps;\n\nconst rlValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    limits: limitsValidationSchema(t),\n  });\n\nconst ResourceLimitsModalLauncher: React.FC<ResourceLimitsModalLauncherProps> = (props) => {\n  const { t } = useTranslation();\n\n  const handleSubmit = (values, actions) => {\n    const {\n      limits: { cpu, memory },\n    } = values;\n    const resources = getResourceLimitsData({ cpu, memory });\n\n    return k8sPatch(props.model, props.resource, [\n      {\n        op: 'replace',\n        path: `/spec/template/spec/containers/0/resources`,\n        value: resources,\n      },\n    ])\n      .then(() => {\n        props.close();\n      })\n      .catch((error) => {\n        actions.setStatus({ submitError: error });\n      });\n  };\n\n  const currentValues = {\n    limits: getLimitsDataFromResource(props.resource),\n    container: props.resource.spec.template.spec.containers[0].name,\n  };\n\n  return (\n    <Formik\n      initialValues={currentValues}\n      onSubmit={handleSubmit}\n      validationSchema={rlValidationSchema(t)}\n    >\n      {(formikProps) => <ResourceLimitsModal {...formikProps} {...props} />}\n    </Formik>\n  );\n};\n\nexport const resourceLimitsModal = createModalLauncher(\n  (props: ResourceLimitsModalLauncherProps) => <ResourceLimitsModalLauncher {...props} />,\n);\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { ContainerModel } from '@console/internal/models';\nimport { ResourceLimitField } from '@console/shared';\nimport { MemoryUnits, CPUUnits } from '../import-types';\nimport FormSection from '../section/FormSection';\n\nexport type ResourceLimitSectionProps = {\n  hideTitle?: boolean;\n};\n\nconst ResourceLimitSection: React.FC<ResourceLimitSectionProps> = ({ hideTitle }) => {\n  const { t } = useTranslation();\n  const {\n    values: { container },\n  } = useFormikContext<FormikValues>();\n  return (\n    <FormSection\n      title={!hideTitle && t('devconsole~Resource limit')}\n      subTitle={t(\n        'devconsole~Resource limits control how much CPU and memory a container will consume on a node.',\n      )}\n      fullWidth\n    >\n      {container && (\n        <span>\n          {t('devconsole~Container')} &nbsp;\n          <ResourceIcon kind={ContainerModel.kind} /> {container}\n        </span>\n      )}\n      <div className=\"co-section-heading-tertiary\">{t('devconsole~CPU')}</div>\n      <ResourceLimitField\n        name=\"limits.cpu.request\"\n        label={t('devconsole~Request')}\n        unitName=\"limits.cpu.requestUnit\"\n        unitOptions={CPUUnits}\n        helpText={t('devconsole~The minimum amount of CPU the Container is guaranteed.')}\n      />\n\n      <ResourceLimitField\n        name=\"limits.cpu.limit\"\n        label={t('devconsole~Limit')}\n        unitName=\"limits.cpu.limitUnit\"\n        unitOptions={CPUUnits}\n        helpText={t(\n          'devconsole~The maximum amount of CPU the Container is allowed to use when running.',\n        )}\n      />\n\n      <div className=\"co-section-heading-tertiary\">{t('devconsole~Memory')}</div>\n      <ResourceLimitField\n        name=\"limits.memory.request\"\n        label={t('devconsole~Request')}\n        unitName=\"limits.memory.requestUnit\"\n        unitOptions={MemoryUnits}\n        helpText={t('devconsole~The minimum amount of Memory the Container is guaranteed.')}\n      />\n\n      <ResourceLimitField\n        name=\"limits.memory.limit\"\n        label={t('devconsole~Limit')}\n        unitName=\"limits.memory.limitUnit\"\n        unitOptions={MemoryUnits}\n        helpText={t(\n          'devconsole~The maximum amount of Memory the Container is allowed to use when running.',\n        )}\n      />\n    </FormSection>\n  );\n};\n\nexport default ResourceLimitSection;\n"],"sourceRoot":""}