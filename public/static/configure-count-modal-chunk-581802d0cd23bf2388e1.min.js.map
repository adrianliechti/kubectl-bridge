{"version":3,"sources":["webpack:///./public/components/modals/configure-count-modal.tsx"],"names":["ConfigureCountModal","props","buttonText","buttonTextKey","buttonTextVariables","defaultValue","labelKey","path","resource","resourceKind","opts","handlePromise","title","titleKey","titleVariables","message","messageKey","messageVariables","close","getPath","substring","replace","value","setValue","t","messageVariablesSafe","resourceKinds","onSubmit","e","preventDefault","patch","op","invalidateState","error","name","className","onChange","target","changeValueBy","operation","autoFocus","required","min","errorMessage","inProgress","submitText","cancel","configureCountModal","configureReplicaCountModal","labelPluralKey","labelPlural","configureJobParallelismModal"],"mappings":"6FAAA,8TAQO,MAAMA,EAAsB,aAAmBC,IACpD,MAAM,WACJC,EAAU,cACVC,EAAa,oBACbC,EAAmB,aACnBC,EAAY,SACZC,EAAQ,KACRC,EAAI,SACJC,EAAQ,aACRC,EAAY,KACZC,EAAI,cACJC,EAAa,MACbC,EAAK,SACLC,EAAQ,eACRC,EAAc,QACdC,EAAO,WACPC,EAAU,iBACVC,EAAgB,MAChBC,GACEjB,EACEkB,EAAUZ,EAAKa,UAAU,GAAGC,QAAQ,IAAK,MACxCC,EAAOC,GAAY,WAAuB,IAAMf,EAAUW,IAAYd,IACvE,EAAEmB,GAAM,2BAmBRC,EAAuB,OAAH,UAAQR,GAKlC,OAJIX,IACFmB,EAAqBC,cAAgBF,EAAElB,EAAUQ,IAIjD,wBAAMa,SAvBQC,IACdA,EAAEC,iBAEF,MAAMC,EAAQ,CAAC,CAAEC,GAAI,UAAWxB,OAAMe,MAAO,IAAYA,KACnDU,EAAkB/B,EAAM+B,iBAAmB,IAEjDA,GAAgB,EAAM,IAAYV,IAClCX,EACE,aAASF,EAAcD,EAAUsB,EAAOpB,GACxC,IAAMQ,IACLe,IAEC,MADAD,GAAgB,GACVC,KAWcC,KAAK,OAAOC,UAAU,kBAC5C,gBAAC,IAAU,KAAEtB,EAAWW,EAAEX,EAAUC,GAAkBF,GACtD,gBAAC,IAAS,KACR,qBAAGuB,UAAU,mBACVnB,EAAaQ,EAAER,EAAYS,GAAwBV,GAEtD,gBAAC,IAAa,CACZO,MAAOA,EACPc,SAAWR,GAAWL,EAASK,EAAES,OAAOf,OACxCgB,cAAgBC,GAAchB,EAAS,IAAYD,GAASiB,GAC5DC,WAAS,EACTC,UAAQ,EACRC,IAAK,KAGT,gBAAC,IAAiB,CAChBC,aAAc1C,EAAM0C,aACpBC,WAAY3C,EAAM2C,WAClBC,WAAY1C,EAAgBqB,EAAErB,EAAeC,GAAuBF,EACpE4C,OAAQ7C,EAAM6C,YAMTC,EAAsB,YAAoB/C,GAE1CgD,EAA8B/C,GAClC8C,EACL,IACE,GACA,CACE1C,aAAc,EAEdQ,SAAU,wBACVP,SAAUL,EAAMQ,aAAawC,eAE7BjC,WAAY,wEACZC,iBAAkB,CAAES,cAAezB,EAAMQ,aAAayC,aACtD3C,KAAM,iBAENJ,cAAe,cACfO,KAAM,CAAEH,KAAM,UAEhBN,IAKOkD,EAAgClD,GACpC8C,EACL,IACE,GACA,CACE1C,aAAc,EAEdQ,SAAU,0BAEVG,WACE,6MACFC,iBAAkB,CAAES,cAAezB,EAAMQ,aAAayC,aACtD3C,KAAM,oBAENJ,cAAe,eAEjBF","file":"configure-count-modal-chunk-581802d0cd23bf2388e1.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { k8sPatch, K8sResourceKind, K8sKind } from '../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { NumberSpinner, withHandlePromise, HandlePromiseProps } from '../utils';\n\nexport const ConfigureCountModal = withHandlePromise((props: ConfigureCountModalProps) => {\n  const {\n    buttonText,\n    buttonTextKey,\n    buttonTextVariables,\n    defaultValue,\n    labelKey,\n    path,\n    resource,\n    resourceKind,\n    opts,\n    handlePromise,\n    title,\n    titleKey,\n    titleVariables,\n    message,\n    messageKey,\n    messageVariables,\n    close,\n  } = props;\n  const getPath = path.substring(1).replace('/', '.');\n  const [value, setValue] = React.useState<number>(_.get(resource, getPath) || defaultValue);\n  const { t } = useTranslation();\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    const patch = [{ op: 'replace', path, value: _.toInteger(value) }];\n    const invalidateState = props.invalidateState || _.noop;\n\n    invalidateState(true, _.toInteger(value));\n    handlePromise(\n      k8sPatch(resourceKind, resource, patch, opts),\n      () => close(),\n      (error) => {\n        invalidateState(false);\n        throw error;\n      },\n    );\n  };\n\n  const messageVariablesSafe = { ...messageVariables };\n  if (labelKey) {\n    messageVariablesSafe.resourceKinds = t(labelKey, titleVariables);\n  }\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content \">\n      <ModalTitle>{titleKey ? t(titleKey, titleVariables) : title}</ModalTitle>\n      <ModalBody>\n        <p className=\"modal-paragraph\">\n          {messageKey ? t(messageKey, messageVariablesSafe) : message}\n        </p>\n        <NumberSpinner\n          value={value}\n          onChange={(e: any) => setValue(e.target.value)}\n          changeValueBy={(operation) => setValue(_.toInteger(value) + operation)}\n          autoFocus\n          required\n          min={0}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={props.errorMessage}\n        inProgress={props.inProgress}\n        submitText={buttonTextKey ? t(buttonTextKey, buttonTextVariables) : buttonText}\n        cancel={props.cancel}\n      />\n    </form>\n  );\n});\n\nexport const configureCountModal = createModalLauncher(ConfigureCountModal);\n\nexport const configureReplicaCountModal = (props) => {\n  return configureCountModal(\n    _.assign(\n      {},\n      {\n        defaultValue: 0,\n        // t('public~Edit Pod count')\n        titleKey: 'public~Edit Pod count',\n        labelKey: props.resourceKind.labelPluralKey,\n        // t('public~{{resourceKinds}} maintain the desired number of healthy pods.', {resourceKind: props.resourceKind.labelPlural})\n        messageKey: 'public~{{resourceKinds}} maintain the desired number of healthy pods.',\n        messageVariables: { resourceKinds: props.resourceKind.labelPlural },\n        path: '/spec/replicas',\n        // t('public~Save')\n        buttonTextKey: 'public~Save',\n        opts: { path: 'scale' },\n      },\n      props,\n    ),\n  );\n};\n\nexport const configureJobParallelismModal = (props) => {\n  return configureCountModal(\n    _.defaults(\n      {},\n      {\n        defaultValue: 1,\n        // t('public~Edit parallelism')\n        titleKey: 'public~Edit parallelism',\n        // t('public~{{resourceKinds}} create one or more pods and ensure that a specified number of them successfully terminate. When the specified number of completions is successfully reached, the job is complete.', {resourceKind: props.resourceKind.labelPlural})\n        messageKey:\n          'public~{{resourceKinds}} create one or more pods and ensure that a specified number of them successfully terminate. When the specified number of completions is successfully reached, the job is complete.',\n        messageVariables: { resourceKinds: props.resourceKind.labelPlural },\n        path: '/spec/parallelism',\n        // t('public~Save')\n        buttonTextKey: 'public~Save',\n      },\n      props,\n    ),\n  );\n};\n\nexport type ConfigureCountModalProps = {\n  message?: string;\n  messageKey: string;\n  messageVariables: { [key: string]: any };\n  buttonText?: string;\n  buttonTextKey?: string;\n  buttonTextVariables?: { [key: string]: any };\n  defaultValue: number;\n  labelKey?: string;\n  path: string;\n  resource: K8sResourceKind;\n  resourceKind: K8sKind;\n  opts?: { [key: string]: any };\n  title?: string;\n  titleKey?: string;\n  titleVariables?: { [key: string]: any };\n  invalidateState?: (isInvalid: boolean, count?: number) => void;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n} & HandlePromiseProps;\n"],"sourceRoot":""}