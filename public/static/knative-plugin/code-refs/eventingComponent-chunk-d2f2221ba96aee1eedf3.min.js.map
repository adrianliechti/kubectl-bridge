{"version":3,"sources":["webpack:///./packages/knative-plugin/src/components/eventing/index.ts","webpack:///./packages/knative-plugin/src/utils/condition-utils.ts","webpack:///./packages/knative-plugin/src/components/eventing/subscription-list/SubscriptionListPage.tsx","webpack:///./packages/knative-plugin/src/components/eventing/triggers-list/TriggerListPage.tsx","webpack:///./packages/knative-plugin/src/components/eventing/EventingListPage.tsx","webpack:///./packages/knative-plugin/src/components/eventing/subscription-list/SubscriptionList.tsx","webpack:///./packages/knative-plugin/src/components/eventing/subscription-list/subscription-table.ts","webpack:///./packages/knative-plugin/src/components/eventing/triggers-list/TriggerList.tsx","webpack:///./packages/knative-plugin/src/components/eventing/triggers-list/trigger-table.ts","webpack:///./packages/knative-plugin/src/components/eventing/ChannelSubscriptionTab.tsx","webpack:///./packages/knative-plugin/src/components/eventing/BrokerTriggerTab.tsx","webpack:///./packages/knative-plugin/src/components/eventing/brokers-list/BrokerListPage.tsx","webpack:///./packages/knative-plugin/src/components/eventing/brokers-list/BrokerList.tsx","webpack:///./packages/knative-plugin/src/components/eventing/brokers-list/BrokerHeaders.tsx","webpack:///./packages/knative-plugin/src/components/eventing/brokers-list/BrokerRow.tsx","webpack:///./packages/knative-plugin/src/components/eventing/channels-list/ChannelListPage.tsx","webpack:///./packages/knative-plugin/src/components/eventing/channels-list/ChannelList.tsx","webpack:///./packages/knative-plugin/src/components/eventing/channels-list/ChannelHeaders.tsx","webpack:///./packages/knative-plugin/src/components/eventing/channels-list/ChannelRow.tsx","webpack:///./packages/knative-plugin/src/components/eventing/eventsource-list/EventSourceListPage.tsx","webpack:///./packages/knative-plugin/src/components/eventing/eventsource-list/EventSourceList.tsx","webpack:///./packages/knative-plugin/src/components/eventing/eventsource-list/EventSourceHeaders.tsx","webpack:///./packages/knative-plugin/src/components/eventing/eventsource-list/EventSourceRow.tsx","webpack:///./packages/knative-plugin/src/components/eventing/subscription-list/SubscriptionHeaders.tsx","webpack:///./packages/knative-plugin/src/components/eventing/subscription-list/SubscriptionRow.tsx","webpack:///./packages/knative-plugin/src/components/eventing/triggers-list/TriggerHeaders.tsx","webpack:///./packages/knative-plugin/src/components/eventing/triggers-list/TriggerRow.tsx"],"names":["getConditionOKCount","conditions","c","Number","status","True","getConditionString","getConditionStats","OKcount","conditionsSize","getCondition","type","props","canCreate","kind","ListComponent","t","ns","namespace","showTitle","nsSelected","menuActions","eventSource","label","onSelection","brokers","model","channels","pages","href","nameKey","component","pageData","title","telemetryPrefix","subscriptionData","customData","channel","data","filter","obj","spec","name","Header","Row","virtualize","tableColumnClasses","columnClass","triggerData","broker","metadata","sortField","transforms","id","className","creationTimestamp","uid","objReference","getExtensionsActionsForKind","factory","common","readyCondition","Ready","columnID","timestamp","actions","resource","loaded","modelsLoaded","eventSourceChannels","resources","map","namespaced","isList","prop","isOptional","getModelId","reference","channelRowFilter","filterGroupName","items","reducer","selected","length","includes","flatten","flatMap","rowFilters","eventSourceModels","isKameletEnabled","sourcesModel","eventSourceRowFilters","context","showChannel","connectedChannel","subscriber","ref","showBroker","connectedBroker","attributes","Object","entries","fkey","val","key"],"mappings":"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","file":"knative-plugin/code-refs/eventingComponent-chunk-d2f2221ba96aee1eedf3.min.js","sourcesContent":["export { default as EventingListPage } from './EventingListPage';\nexport { default as SubscriptionListPage } from './subscription-list/SubscriptionListPage';\nexport { default as TriggerListPage } from './triggers-list/TriggerListPage';\nexport { default as ChannelSubscriptionTab } from './ChannelSubscriptionTab';\nexport { default as BrokerTriggerTab } from './BrokerTriggerTab';\n","import * as _ from 'lodash';\nimport { K8sResourceCondition, K8sResourceConditionStatus } from '@console/internal/module/k8s';\n\nexport const getConditionOKCount = (conditions: K8sResourceCondition[]): number =>\n  _.sumBy<any>(conditions, (c) => Number(c.status === K8sResourceConditionStatus.True));\n\nexport const getConditionString = (conditions: K8sResourceCondition[]): string =>\n  `${getConditionOKCount(conditions)} OK / ${_.size(conditions)}`;\n\nexport const getConditionStats = (\n  conditions: K8sResourceCondition[],\n): { OKcount: number; conditionsSize: number } => {\n  return {\n    OKcount: getConditionOKCount(conditions),\n    conditionsSize: _.size(conditions),\n  };\n};\n\nexport const getCondition = (\n  conditions: K8sResourceCondition[],\n  type: K8sResourceCondition['type'],\n): K8sResourceCondition | undefined => _.find(conditions, (c) => c.type === type);\n","import * as React from 'react';\nimport { t } from 'i18next';\nimport Helmet from 'react-helmet';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { EventingSubscriptionModel } from '../../../models';\nimport SubscriptionList from './SubscriptionList';\n\nconst SubscriptionListPage: React.FC<React.ComponentProps<typeof ListPage>> = (props) => {\n  return (\n    <>\n      <Helmet>\n        <title>{t('knative-plugin~Subscriptions')}</title>\n      </Helmet>\n      <ListPage\n        canCreate={false}\n        {...props}\n        kind={referenceForModel(EventingSubscriptionModel)}\n        ListComponent={SubscriptionList}\n      />\n    </>\n  );\n};\n\nexport default SubscriptionListPage;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { EventingTriggerModel } from '../../../models';\nimport TriggerList from './TriggerList';\n\nconst TriggerListPage: React.FC<React.ComponentProps<typeof ListPage>> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Helmet>\n        <title>{t('knative-plugin~Triggers')}</title>\n      </Helmet>\n      <ListPage\n        canCreate={false}\n        {...props}\n        kind={referenceForModel(EventingTriggerModel)}\n        ListComponent={TriggerList}\n      />\n    </>\n  );\n};\n\nexport default TriggerListPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { NamespaceBar } from '@console/internal/components/namespace-bar';\nimport { Page } from '@console/internal/components/utils';\nimport { isCatalogTypeEnabled, MenuActions, MultiTabListPage } from '@console/shared';\nimport { EVENT_SOURCE_CATALOG_TYPE_ID } from '../../const';\nimport { EventingBrokerModel } from '../../models';\nimport BrokerListPage from './brokers-list/BrokerListPage';\nimport ChannelListPage from './channels-list/ChannelListPage';\nimport EventSourceListPage from './eventsource-list/EventSourceListPage';\nimport SubscriptionListPage from './subscription-list/SubscriptionListPage';\nimport TriggerListPage from './triggers-list/TriggerListPage';\n\nconst EventingListPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { ns: namespace } = useParams();\n  const [showTitle, canCreate] = [false, false];\n  const nsSelected = namespace || 'default';\n  const isEventSourceTypeEnabled = isCatalogTypeEnabled(EVENT_SOURCE_CATALOG_TYPE_ID);\n  const menuActions: MenuActions = {\n    eventSource: {\n      label: isEventSourceTypeEnabled ? t('knative-plugin~Event Source') : null,\n      onSelection: () => `/catalog/ns/${nsSelected}?catalogType=EventSource&provider=[\"Red+Hat\"]`,\n    },\n    brokers: {\n      label: t('knative-plugin~Broker'),\n      model: EventingBrokerModel,\n      onSelection: () => `/broker/ns/${nsSelected}`,\n    },\n    channels: {\n      label: t('knative-plugin~Channel'),\n      onSelection: () => `/channel/ns/${nsSelected}`,\n    },\n  };\n  const pages: Page[] = [\n    {\n      href: '',\n      // t('knative-plugin~Event Sources')\n      nameKey: 'knative-plugin~Event Sources',\n      component: EventSourceListPage,\n      pageData: {\n        canCreate,\n        namespace,\n        showTitle,\n      },\n    },\n    {\n      href: 'brokers',\n      // t('knative-plugin~Brokers')\n      nameKey: 'knative-plugin~Brokers',\n      component: BrokerListPage,\n      pageData: {\n        canCreate,\n        namespace,\n        showTitle,\n      },\n    },\n    {\n      href: 'triggers',\n      // t('knative-plugin~Triggers')\n      nameKey: 'knative-plugin~Triggers',\n      component: TriggerListPage,\n      pageData: {\n        canCreate,\n        namespace,\n        showTitle,\n      },\n    },\n    {\n      href: 'channels',\n      // t('knative-plugin~Channels')\n      nameKey: 'knative-plugin~Channels',\n      component: ChannelListPage,\n      pageData: {\n        canCreate,\n        namespace,\n        showTitle,\n      },\n    },\n    {\n      href: 'subscriptions',\n      // t('knative-plugin~Subscriptions')\n      nameKey: 'knative-plugin~Subscriptions',\n      component: SubscriptionListPage,\n      pageData: {\n        canCreate,\n        namespace,\n        showTitle,\n      },\n    },\n  ];\n\n  return (\n    <>\n      <NamespaceBar />\n      <MultiTabListPage\n        pages={pages}\n        title={t('knative-plugin~Eventing')}\n        menuActions={menuActions}\n        telemetryPrefix=\"Eventing\"\n      />\n    </>\n  );\n};\n\nexport default EventingListPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport getSubscriptionHeaders from './SubscriptionHeaders';\nimport SubscriptionRow from './SubscriptionRow';\n\nconst SubscriptionList: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n  const subscriptionData = props.customData?.channel\n    ? props.data.filter((obj) => obj.spec.channel.name === props.customData.channel)\n    : props.data;\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('knative-plugin~Subscriptions')}\n      data={subscriptionData}\n      Header={getSubscriptionHeaders(t, !props.customData?.channel)}\n      Row={SubscriptionRow}\n      virtualize\n    />\n  );\n};\n\nexport default SubscriptionList;\n","import * as cx from 'classnames';\nimport { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  '', // name\n  '', // namespace\n  cx('pf-m-hidden', 'pf-m-visible-on-sm'), // ready\n  cx('pf-m-hidden', 'pf-m-visible-on-md'), // condition\n  cx('pf-m-hidden', 'pf-m-visible-on-xl'), // channel\n  cx('pf-m-hidden', 'pf-m-visible-on-xl'), // subscriber\n  cx('pf-m-hidden', 'pf-m-visible-on-2xl'), // created\n  Kebab.columnClass, // kebab menu\n];\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport getTriggerHeaders from './TriggerHeaders';\nimport TriggerRow from './TriggerRow';\n\nconst TriggerList: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n  const triggerData = props.customData?.broker\n    ? props.data.filter((obj) => obj.spec.broker === props.customData.broker)\n    : props.data;\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('knative-plugin~Triggers')}\n      data={triggerData}\n      Header={getTriggerHeaders(t, !props.customData?.broker)}\n      Row={TriggerRow}\n      virtualize\n    />\n  );\n};\n\nexport default TriggerList;\n","import * as cx from 'classnames';\nimport { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  '', // name\n  '', // namespace\n  cx('pf-m-hidden', 'pf-m-visible-on-xl'), // ready\n  cx('pf-m-hidden', 'pf-m-visible-on-xl'), // condition\n  cx('pf-m-hidden', 'pf-m-visible-on-sm'), // filters\n  '', // broker\n  '', // subscriber\n  cx('pf-m-hidden', 'pf-m-visible-on-lg'), // created\n  Kebab.columnClass, // kebab menu\n];\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { EventingSubscriptionModel } from '../../models';\nimport { EventChannelKind } from '../../types';\nimport SubscriptionList from './subscription-list/SubscriptionList';\n\ntype ChannelSubscriptionTabProps = {\n  obj: EventChannelKind;\n};\n\nconst ChannelSubscriptionTab: React.FC<ChannelSubscriptionTabProps> = ({ obj }) => {\n  const customData = React.useMemo(\n    () => ({\n      channel: obj.metadata.name,\n    }),\n    [obj.metadata.name],\n  );\n  return (\n    <ListPage\n      canCreate={false}\n      showTitle={false}\n      kind={referenceForModel(EventingSubscriptionModel)}\n      ListComponent={SubscriptionList}\n      namespace={obj.metadata.namespace}\n      customData={customData}\n    />\n  );\n};\n\nexport default ChannelSubscriptionTab;\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { EventingTriggerModel } from '../../models';\nimport { EventBrokerKind } from '../../types';\nimport TriggerList from './triggers-list/TriggerList';\n\ntype BrokerTriggerTabProps = {\n  obj: EventBrokerKind;\n};\n\nconst BrokerTriggerTab: React.FC<BrokerTriggerTabProps> = ({ obj }) => {\n  const customData = React.useMemo(\n    () => ({\n      broker: obj.metadata.name,\n    }),\n    [obj.metadata.name],\n  );\n  return (\n    <ListPage\n      canCreate={false}\n      showTitle={false}\n      kind={referenceForModel(EventingTriggerModel)}\n      ListComponent={TriggerList}\n      namespace={obj.metadata.namespace}\n      customData={customData}\n    />\n  );\n};\n\nexport default BrokerTriggerTab;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { EventingBrokerModel } from '../../../models';\nimport BrokerList from './BrokerList';\n\nconst BrokerListPage: React.FC<React.ComponentProps<typeof ListPage>> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Helmet>\n        <title>{t('knative-plugin~Brokers')}</title>\n      </Helmet>\n      <ListPage\n        canCreate={false}\n        {...props}\n        kind={referenceForModel(EventingBrokerModel)}\n        ListComponent={BrokerList}\n      />\n    </>\n  );\n};\n\nexport default BrokerListPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport BrokerHeaders from './BrokerHeaders';\nimport BrokerRow from './BrokerRow';\n\nconst BrokerList: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <Table\n      {...props}\n      aria-label={t('knative-plugin~Brokers')}\n      Header={BrokerHeaders(t)}\n      Row={BrokerRow}\n      virtualize\n    />\n  );\n};\n\nexport default BrokerList;\n","import { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { Kebab } from '@console/internal/components/utils';\n\nconst BrokerHeaders = (t: TFunction) => () => {\n  return [\n    {\n      title: t('knative-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n    },\n    {\n      id: 'namespace',\n      title: t('knative-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n    },\n    {\n      id: 'ready',\n      title: t('knative-plugin~Ready'),\n    },\n    {\n      id: 'condition',\n      title: t('knative-plugin~Conditions'),\n    },\n    {\n      title: t('knative-plugin~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n    },\n    {\n      title: '',\n      props: { className: Kebab.columnClass },\n    },\n  ];\n};\n\nexport default BrokerHeaders;\n","import * as React from 'react';\nimport { TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { Kebab, ResourceKebab, ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { NamespaceModel } from '@console/internal/models';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { EventingBrokerModel } from '../../../models';\nimport { EventBrokerKind, BrokerConditionTypes } from '../../../types';\nimport { getCondition, getConditionString } from '../../../utils/condition-utils';\n\nconst BrokerRow: React.FC<RowFunctionArgs<EventBrokerKind>> = ({ obj }) => {\n  const {\n    metadata: { name, namespace, creationTimestamp, uid },\n  } = obj;\n  const objReference = referenceFor(obj);\n  const menuActions = [\n    ...Kebab.getExtensionsActionsForKind(EventingBrokerModel),\n    ...Kebab.factory.common,\n  ];\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, BrokerConditionTypes.Ready)\n    : null;\n  return (\n    <>\n      <TableData>\n        <ResourceLink kind={objReference} name={name} namespace={namespace} title={uid} />\n      </TableData>\n      <TableData className=\"co-break-word\" columnID=\"namespace\">\n        <ResourceLink kind={NamespaceModel.kind} name={namespace} />\n      </TableData>\n      <TableData columnID=\"ready\">{(readyCondition && readyCondition.status) || '-'}</TableData>\n      <TableData columnID=\"condition\">\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={Kebab.columnClass}>\n        <ResourceKebab actions={menuActions} kind={objReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport default BrokerRow;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { RowFilter } from '@console/dynamic-plugin-sdk';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { K8sResourceCommon, referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  getDynamicChannelModel,\n  useChannelModels,\n} from '../../../utils/fetch-dynamic-eventsources-utils';\nimport ChannelList from './ChannelList';\n\nconst ChannelListPage: React.FC<React.ComponentProps<typeof MultiListPage>> = (props) => {\n  const { t } = useTranslation();\n  const { loaded: modelsLoaded, eventSourceChannels } = useChannelModels();\n  const flatten = (resources) =>\n    modelsLoaded\n      ? eventSourceChannels.flatMap((model) => resources[referenceForModel(model)]?.data ?? [])\n      : [];\n  const resources = React.useMemo(\n    () =>\n      modelsLoaded\n        ? eventSourceChannels.map((model) => {\n            const { namespaced } = model;\n\n            return {\n              isList: true,\n              namespaced,\n              kind: referenceForModel(model),\n              prop: referenceForModel(model),\n              isOptional: true,\n            };\n          })\n        : [],\n    [eventSourceChannels, modelsLoaded],\n  );\n\n  const getModelId = React.useCallback((obj: K8sResourceCommon) => {\n    const reference = referenceFor(obj);\n    const model = getDynamicChannelModel(reference);\n    return model.id;\n  }, []);\n\n  const channelRowFilter = React.useMemo<RowFilter<K8sResourceCommon>[]>(\n    () => [\n      {\n        filterGroupName: t('knative-plugin~Type'),\n        type: 'event-source-type',\n        items: eventSourceChannels.map(({ id, label }) => ({ id, title: label })),\n        reducer: getModelId,\n        filter: (filter, obj) =>\n          !filter.selected?.length || filter.selected?.includes(getModelId(obj)),\n      },\n    ],\n    [eventSourceChannels, getModelId, t],\n  );\n  return (\n    <>\n      <Helmet>\n        <title>{t('knative-plugin~Channels')}</title>\n      </Helmet>\n      <MultiListPage\n        {...props}\n        label={t('knative-plugin~Channels')}\n        flatten={flatten}\n        resources={resources}\n        rowFilters={channelRowFilter}\n        ListComponent={ChannelList}\n      />\n    </>\n  );\n};\n\nexport default ChannelListPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport ChannelHeaders from './ChannelHeaders';\nimport ChannelRow from './ChannelRow';\n\nconst ChannelList: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <Table\n      {...props}\n      aria-label={t('knative-plugin~Channels')}\n      Header={ChannelHeaders(t)}\n      Row={ChannelRow}\n      virtualize\n    />\n  );\n};\nexport default ChannelList;\n","import { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { Kebab } from '@console/internal/components/utils';\n\nconst ChannelHeaders = (t: TFunction) => () => {\n  return [\n    {\n      title: t('knative-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n    },\n    {\n      id: 'namespace',\n      title: t('knative-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n    },\n    {\n      id: 'ready',\n      title: t('knative-plugin~Ready'),\n    },\n    {\n      id: 'condition',\n      title: t('knative-plugin~Conditions'),\n    },\n    {\n      title: t('knative-plugin~Type'),\n      sortField: 'kind',\n      transforms: [sortable],\n    },\n    {\n      title: t('knative-plugin~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n    },\n    {\n      title: '',\n      props: { className: Kebab.columnClass },\n    },\n  ];\n};\n\nexport default ChannelHeaders;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { Kebab, ResourceKebab, ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { NamespaceModel } from '@console/internal/models';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { EventChannelKind, ChannelConditionTypes } from '../../../types';\nimport { getCondition, getConditionStats } from '../../../utils/condition-utils';\nimport { getDynamicChannelModel } from '../../../utils/fetch-dynamic-eventsources-utils';\n\nconst ChannelRow: React.FC<RowFunctionArgs<EventChannelKind>> = ({ obj }) => {\n  const {\n    metadata: { name, namespace, creationTimestamp, uid },\n  } = obj;\n  const { t } = useTranslation();\n  const objReference = referenceFor(obj);\n  const kind = getDynamicChannelModel(objReference);\n  const menuActions = [...Kebab.getExtensionsActionsForKind(kind), ...Kebab.factory.common];\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, ChannelConditionTypes.Ready)\n    : null;\n  return (\n    <>\n      <TableData>\n        <ResourceLink kind={objReference} name={name} namespace={namespace} title={uid} />\n      </TableData>\n      <TableData className=\"co-break-word\" columnID=\"namespace\">\n        <ResourceLink kind={NamespaceModel.kind} name={namespace} />\n      </TableData>\n      <TableData columnID=\"ready\">{(readyCondition && readyCondition.status) || '-'}</TableData>\n      <TableData columnID=\"condition\">\n        {obj.status\n          ? t(\n              'knative-plugin~{{OKcount}} OK / {{conditionsSize}}',\n              getConditionStats(obj.status.conditions),\n            )\n          : '-'}\n      </TableData>\n      <TableData>{kind.label}</TableData>\n      <TableData>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={Kebab.columnClass}>\n        <ResourceKebab actions={menuActions} kind={objReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport default ChannelRow;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { RowFilter } from '@console/dynamic-plugin-sdk';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport {\n  K8sResourceCommon,\n  modelFor,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared';\nimport { FLAG_CAMEL_KAMELETS } from '../../../const';\nimport { CamelKameletBindingModel } from '../../../models';\nimport {\n  getDynamicEventSourceModel,\n  useEventSourceModels,\n} from '../../../utils/fetch-dynamic-eventsources-utils';\nimport EventSourceList from './EventSourceList';\n\nconst EventSourceListPage: React.FC<React.ComponentProps<typeof MultiListPage>> = (props) => {\n  const { t } = useTranslation();\n  const { loaded: modelsLoaded, eventSourceModels } = useEventSourceModels();\n  const isKameletEnabled = useFlag(FLAG_CAMEL_KAMELETS);\n  const sourcesModel = React.useMemo(\n    () => (isKameletEnabled ? [...eventSourceModels, CamelKameletBindingModel] : eventSourceModels),\n    [isKameletEnabled, eventSourceModels],\n  );\n  const flatten = (resources) =>\n    modelsLoaded\n      ? sourcesModel.flatMap((model) => resources[referenceForModel(model)]?.data ?? [])\n      : [];\n  const resources = React.useMemo(\n    () =>\n      modelsLoaded\n        ? sourcesModel.map((model) => {\n            const { namespaced } = model;\n\n            return {\n              isList: true,\n              namespaced,\n              kind: referenceForModel(model),\n              prop: referenceForModel(model),\n              isOptional: true,\n            };\n          })\n        : [],\n    [sourcesModel, modelsLoaded],\n  );\n  const getModelId = React.useCallback((obj: K8sResourceCommon) => {\n    const reference = referenceFor(obj);\n    const model = getDynamicEventSourceModel(reference) || modelFor(reference);\n    return model.id;\n  }, []);\n\n  const eventSourceRowFilters = React.useMemo<RowFilter<K8sResourceCommon>[]>(\n    () => [\n      {\n        filterGroupName: t('knative-plugin~Type'),\n        type: 'event-source-type',\n        items: sourcesModel.map(({ id, label }) => ({ id, title: label })),\n        reducer: getModelId,\n        filter: (filter, obj) =>\n          !filter.selected?.length || filter.selected?.includes(getModelId(obj)),\n      },\n    ],\n    [t, sourcesModel, getModelId],\n  );\n  return (\n    <>\n      <Helmet>\n        <title>{t('knative-plugin~Event Sources')}</title>\n      </Helmet>\n      <MultiListPage\n        {...props}\n        label={t('knative-plugin~Event Sources')}\n        rowFilters={eventSourceRowFilters}\n        flatten={flatten}\n        resources={resources}\n        ListComponent={EventSourceList}\n      />\n    </>\n  );\n};\n\nexport default EventSourceListPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport EventSourceHeaders from './EventSourceHeaders';\nimport EventSourceRow from './EventSourceRow';\n\nconst EventSourceList: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <Table\n      {...props}\n      aria-label={t('knative-plugin~Event Sources')}\n      Header={EventSourceHeaders(t)}\n      Row={EventSourceRow}\n      virtualize\n    />\n  );\n};\n\nexport default EventSourceList;\n","import { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { Kebab } from '@console/internal/components/utils';\n\nconst EventSourceHeaders = (t: TFunction) => () => {\n  return [\n    {\n      title: t('knative-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n    },\n    {\n      id: 'namespace',\n      title: t('knative-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n    },\n    {\n      id: 'ready',\n      title: t('knative-plugin~Ready'),\n    },\n    {\n      id: 'condition',\n      title: t('knative-plugin~Conditions'),\n    },\n    {\n      title: t('knative-plugin~Type'),\n      sortField: 'kind',\n      transforms: [sortable],\n    },\n    {\n      title: t('knative-plugin~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n    },\n    {\n      title: '',\n      props: { className: Kebab.columnClass },\n    },\n  ];\n};\n\nexport default EventSourceHeaders;\n","import * as React from 'react';\nimport { TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { Kebab, ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { NamespaceModel } from '@console/internal/models';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { LazyActionMenu } from '@console/shared';\nimport { EventSourceKind, EventSourceConditionTypes } from '../../../types';\nimport { getCondition, getConditionString } from '../../../utils/condition-utils';\nimport { getDynamicEventSourceModel } from '../../../utils/fetch-dynamic-eventsources-utils';\n\nconst EventSourceRow: React.FC<RowFunctionArgs<EventSourceKind>> = ({ obj }) => {\n  const {\n    metadata: { name, namespace, creationTimestamp, uid },\n  } = obj;\n  const objReference = referenceFor(obj);\n  const kind = getDynamicEventSourceModel(objReference) || modelFor(objReference);\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, EventSourceConditionTypes.Ready)\n    : null;\n  return (\n    <>\n      <TableData>\n        <ResourceLink kind={objReference} name={name} namespace={namespace} title={uid} />\n      </TableData>\n      <TableData className=\"co-break-word\" columnID=\"namespace\">\n        <ResourceLink kind={NamespaceModel.kind} name={namespace} />\n      </TableData>\n      <TableData columnID=\"ready\">{(readyCondition && readyCondition.status) || '-'}</TableData>\n      <TableData columnID=\"condition\">\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData>{kind.label}</TableData>\n      <TableData>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={Kebab.columnClass}>\n        <LazyActionMenu context={{ 'event-source-actions': obj }} />\n      </TableData>\n    </>\n  );\n};\n\nexport default EventSourceRow;\n","import { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { tableColumnClasses } from './subscription-table';\n\nconst getSubscriptionHeaders = (t: TFunction, showChannel: boolean) => {\n  const SubscriptionHeaders = () => [\n    {\n      id: 'name',\n      title: t('knative-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      id: 'namespace',\n      title: t('knative-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      id: 'ready',\n      title: t('knative-plugin~Ready'),\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      id: 'condition',\n      title: t('knative-plugin~Conditions'),\n      props: { className: tableColumnClasses[3] },\n    },\n    ...(showChannel\n      ? [\n          {\n            id: 'channel',\n            title: t('knative-plugin~Channel'),\n            props: { className: tableColumnClasses[4] },\n          },\n        ]\n      : []),\n    {\n      id: 'subscriber',\n      title: t('knative-plugin~Subscriber'),\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: t('knative-plugin~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[7] },\n    },\n  ];\n  return SubscriptionHeaders;\n};\n\nexport default getSubscriptionHeaders;\n","import * as React from 'react';\nimport { TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { LazyActionMenu } from '@console/shared';\nimport { EventSubscriptionKind, SubscriptionConditionTypes } from '../../../types';\nimport { getConditionString, getCondition } from '../../../utils/condition-utils';\nimport { tableColumnClasses } from './subscription-table';\n\ntype SubscriptionRowType = {\n  channel?: string;\n};\nconst SubscriptionRow: React.FC<RowFunctionArgs<EventSubscriptionKind, SubscriptionRowType>> = ({\n  obj,\n  customData,\n}) => {\n  const {\n    metadata: { name, namespace, creationTimestamp, uid },\n    spec: { channel: connectedChannel, subscriber },\n  } = obj;\n\n  const objReference = referenceFor(obj);\n  const context = { [objReference]: obj };\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, SubscriptionConditionTypes.Ready)\n    : null;\n  return (\n    <>\n      <TableData columnID=\"name\" className={tableColumnClasses[0]}>\n        <ResourceLink kind={objReference} name={name} namespace={namespace} title={uid} />\n      </TableData>\n      <TableData columnID=\"namespace\" className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={namespace} />\n      </TableData>\n      <TableData columnID=\"ready\" className={tableColumnClasses[2]}>\n        {(readyCondition && readyCondition.status) || '-'}\n      </TableData>\n      <TableData columnID=\"condition\" className={tableColumnClasses[3]}>\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      {!customData?.channel && (\n        <TableData columnID=\"channel\" className={tableColumnClasses[4]}>\n          <ResourceLink\n            kind={referenceFor(connectedChannel)}\n            name={connectedChannel.name}\n            namespace={namespace}\n          />\n        </TableData>\n      )}\n      <TableData columnID=\"subscriber\" className={tableColumnClasses[5]}>\n        {subscriber.ref ? (\n          <ResourceLink\n            kind={referenceFor(subscriber.ref)}\n            name={subscriber.ref.name}\n            namespace={namespace}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData columnID=\"created\" className={tableColumnClasses[6]}>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nexport default SubscriptionRow;\n","import { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { tableColumnClasses } from './trigger-table';\n\nconst getTriggerHeaders = (t: TFunction, showBroker: boolean) => {\n  const TriggerHeaders = () => [\n    {\n      id: 'name',\n      title: t('knative-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      id: 'namespace',\n      title: t('knative-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      id: 'ready',\n      title: t('knative-plugin~Ready'),\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      id: 'condition',\n      title: t('knative-plugin~Conditions'),\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      id: 'filters',\n      title: t('knative-plugin~Filters'),\n      props: { className: tableColumnClasses[4] },\n    },\n    ...(showBroker\n      ? [\n          {\n            id: 'broker',\n            title: t('knative-plugin~Broker'),\n            props: { className: tableColumnClasses[5] },\n          },\n        ]\n      : []),\n    {\n      id: 'subscriber',\n      title: t('knative-plugin~Subscriber'),\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: t('knative-plugin~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[7] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[8] },\n    },\n  ];\n  return TriggerHeaders;\n};\n\nexport default getTriggerHeaders;\n","import * as React from 'react';\nimport { TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport { LazyActionMenu } from '@console/shared/src';\nimport { EventingBrokerModel } from '../../../models';\nimport { EventTriggerKind, TriggerConditionTypes } from '../../../types';\nimport { getConditionString, getCondition } from '../../../utils/condition-utils';\nimport { tableColumnClasses } from './trigger-table';\n\ntype TriggerRowType = {\n  broker?: string;\n};\nconst TriggerRow: React.FC<RowFunctionArgs<EventTriggerKind, TriggerRowType>> = ({\n  obj,\n  customData,\n}) => {\n  const {\n    metadata: { name, namespace, creationTimestamp, uid },\n    spec: { subscriber, filter, broker: connectedBroker },\n  } = obj;\n\n  const objReference = referenceFor(obj);\n  const context = { [objReference]: obj };\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, TriggerConditionTypes.Ready)\n    : null;\n  return (\n    <>\n      <TableData columnID=\"name\" className={tableColumnClasses[0]}>\n        <ResourceLink kind={objReference} name={name} namespace={namespace} title={uid} />\n      </TableData>\n      <TableData columnID=\"namespace\" className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={namespace} />\n      </TableData>\n      <TableData columnID=\"ready\" className={tableColumnClasses[2]}>\n        {(readyCondition && readyCondition.status) || '-'}\n      </TableData>\n      <TableData columnID=\"condition\" className={tableColumnClasses[3]}>\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData columnID=\"filters\" className={tableColumnClasses[4]}>\n        {filter.attributes\n          ? Object.entries(filter.attributes).map(([fkey, val]) => (\n              <div key={fkey}>{`${fkey}:${val}`}</div>\n            ))\n          : '-'}\n      </TableData>\n      {!customData?.broker && (\n        <TableData columnID=\"broker\" className={tableColumnClasses[5]}>\n          <ResourceLink\n            kind={referenceForModel(EventingBrokerModel)}\n            name={connectedBroker}\n            namespace={namespace}\n          />\n        </TableData>\n      )}\n      <TableData columnID=\"subscriber\" className={tableColumnClasses[6]}>\n        {subscriber.ref ? (\n          <ResourceLink kind={referenceFor(subscriber.ref)} name={subscriber.ref.name} />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData columnID=\"created\" className={tableColumnClasses[7]}>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[8]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nexport default TriggerRow;\n"],"sourceRoot":""}