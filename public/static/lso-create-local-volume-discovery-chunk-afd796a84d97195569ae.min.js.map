{"version":3,"sources":["webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-discovery/body.tsx","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-discovery/header.tsx","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-discovery/create-local-volume-discovery.tsx","webpack:///./packages/local-storage-operator-plugin/src/constants/index.ts","webpack:///./packages/local-storage-operator-plugin/src/utils/index.ts","webpack:///./packages/local-storage-operator-plugin/src/resources.ts","webpack:///./packages/local-storage-operator-plugin/src/components/common/form-footer.tsx","webpack:///./packages/local-storage-operator-plugin/src/components/tables/nodes-table.tsx","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-discovery/request.ts"],"names":["LocalVolumeDiscoveryBody","allNodes","selectNodes","showSelectNodes","setSelectNodes","setShowSelectNodes","taintsFilter","t","id","label","nodes","length","count","name","className","value","onChange","description","checked","showTitle","kind","ListComponent","customData","onRowSelected","selectedNodes","preSelectedNodes","map","hasOnSelect","LocalVolumeDiscoveryHeader","variant","component","CreateLocalVolumeDiscovery","appName","ns","nodesData","nodesLoaded","nodesLoadError","setAllNodes","inProgress","setProgress","errorMessage","setError","filteredNodes","filter","resourcePath","h1","noValidate","onSubmit","event","preventDefault","nodesByHostNameLabel","redirectionUrl","url","push","error","response","status","createError","message","makeLocalVolumeDiscoverRequest","fieldId","disableNext","cancelUrl","DiskType","diskModeDropdownItems","Object","freeze","BLOCK","FILESYSTEM","ZONE_LABELS","DISK_TYPES","SSD","property","HDD","deviceTypeDropdownItems","DISK","PART","MPATH","fsTypeDropdownItems","EXT4","EXT3","XFS","diskTypeDropdownItems","All","diskSizeUnitOptions","Ti","Gi","DISCOVERY_CR_NAME","HOSTNAME_LABEL_KEY","LABEL_OPERATOR","hasNoTaints","node","spec","taints","getZone","metadata","labels","getNodeSelectorTermsIndices","nodeSelectorTerms","selectorIndex","expIndex","forEach","selector","index","matchExpressions","findIndex","exp","key","operator","getNodesByHostNameLabel","nodeResource","namespaced","isList","FormFooter","type","isDisabled","onClick","tableColumnClasses","NodesTable","props","visibleRows","setVisibleRows","Set","onSelect","selectedRows","updateSelectedRows","setSelectedNodes","data","Header","title","sortField","transforms","Rows","rowProps","componentProps","filteredData","includes","rows","cpuSpec","memSpec","roles","sort","cells","join","string","selected","has","uid","uids","n","size","getRows","virtualize","nodeCount","updateLocalVolumeDiscovery","lvd","nodeSelector","Error","existingNodes","values","add","patch","op","path","createLocalVolumeDiscovery","toleration","requestData","request","apiVersion","namespace","tolerations","getDiscoveryRequestData"],"mappings":"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","file":"lso-create-local-volume-discovery-chunk-afd796a84d97195569ae.min.js","sourcesContent":["import * as React from 'react';\nimport { Radio } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { ListPage } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { NodesTable } from '../tables/nodes-table';\n\nimport './body.scss';\n\nexport const LocalVolumeDiscoveryBody: React.FC<LocalVolumeDiscoveryBodyProps> = ({\n  allNodes,\n  selectNodes,\n  showSelectNodes,\n  setSelectNodes,\n  setShowSelectNodes,\n  taintsFilter,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div id=\"auto-detect-volume-radio-group-node-selector\">\n        <Radio\n          label={\n            <>\n              {t('lso-plugin~Disks on all nodes')} {'('}\n              {t('lso-plugin~{{nodes, number}} node', {\n                nodes: allNodes.length,\n                count: allNodes.length,\n              })}\n              {')'}\n            </>\n          }\n          name=\"nodes-selection\"\n          id=\"auto-detect-volume-radio-all-nodes\"\n          className=\"lso-lvd-body__all-nodes-radio--padding\"\n          value=\"allNodes\"\n          onChange={setShowSelectNodes}\n          description={t('lso-plugin~Discovers available disks on all nodes.')}\n          checked={!showSelectNodes}\n        />\n        <Radio\n          label={t('lso-plugin~Disks on selected nodes')}\n          name=\"nodes-selection\"\n          id=\"auto-detect-volume-radio-select-nodes\"\n          value=\"selectedNodes\"\n          onChange={setShowSelectNodes}\n          description={t(\n            'lso-plugin~Allows you to limit the discovery for available disks to specific nodes.',\n          )}\n          checked={showSelectNodes}\n        />\n      </div>\n      {showSelectNodes && (\n        <div className=\"lso-lvd-body__select-nodes\">\n          <ListPage\n            showTitle={false}\n            kind={NodeModel.kind}\n            ListComponent={NodesTable}\n            customData={{\n              onRowSelected: (selectedNodes: NodeKind[]) => setSelectNodes(selectedNodes),\n              preSelectedNodes: selectNodes.map(getName),\n              hasOnSelect: true,\n              taintsFilter,\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\ntype LocalVolumeDiscoveryBodyProps = {\n  allNodes: NodeKind[];\n  selectNodes: NodeKind[];\n  showSelectNodes: boolean;\n  setSelectNodes: (nodes: NodeKind[]) => void;\n  setShowSelectNodes: (boolean) => void;\n  taintsFilter?: (node: NodeKind) => boolean;\n};\n","import * as React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const LocalVolumeDiscoveryHeader: React.FC<LocalVolumeDiscoveryHeaderProps> = ({\n  className,\n  variant,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextContent>\n        <Text component={variant} className={className}>\n          {t('lso-plugin~Local Volume Discovery')}\n        </Text>\n      </TextContent>\n      <p className=\"help-block\">\n        {t('lso-plugin~Allows you to discover the available disks on all available nodes')}\n      </p>\n    </>\n  );\n};\n\ntype LocalVolumeDiscoveryHeaderProps = {\n  variant: any;\n  className?: string;\n};\n","import * as React from 'react';\nimport { FormGroup, Form, TextVariants } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { history } from '@console/internal/components/utils/router';\nimport { referenceForModel, NodeKind } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { DISCOVERY_CR_NAME } from '../../constants';\nimport { LocalVolumeDiscovery as AutoDetectVolumeModel } from '../../models';\nimport { nodeResource } from '../../resources';\nimport { getNodesByHostNameLabel, hasNoTaints } from '../../utils';\nimport { FormFooter } from '../common/form-footer';\nimport { LocalVolumeDiscoveryBody } from './body';\nimport { LocalVolumeDiscoveryHeader } from './header';\nimport { updateLocalVolumeDiscovery, createLocalVolumeDiscovery } from './request';\n\nimport '../../common.scss';\n\nconst makeLocalVolumeDiscoverRequest = async (\n  nodes: string[],\n  ns: string,\n  setError: React.Dispatch<React.SetStateAction<string>>,\n  setProgress: React.Dispatch<React.SetStateAction<boolean>>,\n  url: string,\n) => {\n  setProgress(true);\n  try {\n    await updateLocalVolumeDiscovery(nodes, ns, setError);\n    history.push(url);\n  } catch (error) {\n    if (error?.response?.status === 404) {\n      try {\n        await createLocalVolumeDiscovery(nodes, ns, setError);\n        history.push(url);\n      } catch (createError) {\n        setError(createError.message);\n      }\n    } else {\n      setError(error.message);\n    }\n  } finally {\n    setProgress(false);\n  }\n};\n\nexport const CreateLocalVolumeDiscovery: React.FC = () => {\n  const { appName, ns } = useParams();\n  const { t } = useTranslation();\n\n  const [nodesData, nodesLoaded, nodesLoadError] = useK8sWatchResource<NodeKind[]>(nodeResource);\n  const [allNodes, setAllNodes] = React.useState([]);\n  const [selectNodes, setSelectNodes] = React.useState([]);\n  const [showSelectNodes, setShowSelectNodes] = React.useState(false);\n  const [inProgress, setProgress] = React.useState(false);\n  const [errorMessage, setError] = React.useState('');\n\n  React.useEffect(() => {\n    if (nodesLoaded && !nodesLoadError && nodesData.length !== 0) {\n      const filteredNodes: NodeKind[] = nodesData.filter(hasNoTaints);\n      setAllNodes(filteredNodes);\n    }\n  }, [nodesData, nodesLoadError, nodesLoaded]);\n\n  const nodes: NodeKind[] = showSelectNodes ? selectNodes : allNodes;\n  const resourcePath = resourcePathFromModel(ClusterServiceVersionModel, appName, ns);\n\n  const onSubmit = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    const nodesByHostNameLabel: string[] = getNodesByHostNameLabel(nodes);\n    const redirectionUrl = `/k8s/ns/${ns}/clusterserviceversions/${appName}/${referenceForModel(\n      AutoDetectVolumeModel,\n    )}/${DISCOVERY_CR_NAME}`;\n    makeLocalVolumeDiscoverRequest(nodesByHostNameLabel, ns, setError, setProgress, redirectionUrl);\n  };\n\n  return (\n    <>\n      <div className=\"co-create-operand__header\">\n        <LocalVolumeDiscoveryHeader\n          variant={TextVariants.h1}\n          className=\"co-create-operand__header-text\"\n        />\n      </div>\n      <Form\n        noValidate={false}\n        className=\"co-m-pane__body lso-form-body__node-list\"\n        onSubmit={onSubmit}\n      >\n        <FormGroup\n          label={t('lso-plugin~Node Selector')}\n          fieldId=\"auto-detect-volume--radio-group-node-selector\"\n        >\n          <LocalVolumeDiscoveryBody\n            allNodes={allNodes}\n            selectNodes={selectNodes}\n            showSelectNodes={showSelectNodes}\n            setShowSelectNodes={() => setShowSelectNodes(!showSelectNodes)}\n            setSelectNodes={setSelectNodes}\n          />\n        </FormGroup>\n        <FormFooter\n          inProgress={inProgress}\n          errorMessage={errorMessage}\n          disableNext={nodes.length < 1}\n          cancelUrl={resourcePath}\n        />\n      </Form>\n    </>\n  );\n};\n","import { TFunction } from 'i18next';\nimport { DiskMechanicalProperties } from '../components/local-volume-set/types';\n\nexport enum DiskType {\n  All = 'All',\n  SSD = 'SSD',\n  HDD = 'HDD',\n}\n\nexport const diskModeDropdownItems = Object.freeze({\n  BLOCK: 'Block',\n  FILESYSTEM: 'Filesystem',\n});\n\nexport const ZONE_LABELS = [\n  'topology.kubernetes.io/zone',\n  'failure-domain.beta.kubernetes.io/zone', // deprecated\n];\n\nexport const DISK_TYPES: {\n  [key: string]: {\n    property: keyof typeof DiskMechanicalProperties;\n  };\n} = {\n  [DiskType.SSD]: {\n    property: 'NonRotational',\n  },\n  [DiskType.HDD]: {\n    property: 'Rotational',\n  },\n};\nexport const deviceTypeDropdownItems = Object.freeze({\n  DISK: 'Disk',\n  PART: 'Part',\n  MPATH: 'Mpath',\n});\n\nexport const fsTypeDropdownItems = Object.freeze({\n  EXT4: 'ext4',\n  EXT3: 'ext3',\n  XFS: 'xfs',\n});\n\nexport const diskTypeDropdownItems = (t: TFunction) =>\n  Object.freeze({\n    [DiskType.All]: t('lso-plugin~All'),\n    [DiskType.SSD]: t('lso-plugin~SSD / NVMe'),\n    [DiskType.HDD]: t('lso-plugin~HDD'),\n  });\n\nexport const AUTO_DISCOVER_ERR_MSG = 'Failed to update the Auto Detect Volume!';\n\nexport const diskSizeUnitOptions = {\n  Ti: 'TiB',\n  Gi: 'GiB',\n};\n\nexport const DISCOVERY_CR_NAME = 'auto-discover-devices';\nexport const LOCAL_STORAGE_NAMESPACE = 'openshift-local-storage';\nexport const HOSTNAME_LABEL_KEY = 'kubernetes.io/hostname';\nexport const LABEL_OPERATOR = 'In';\n","import * as _ from 'lodash';\nimport { NodeKind, MatchExpression } from '@console/internal/module/k8s';\nimport { HOSTNAME_LABEL_KEY, LABEL_OPERATOR, ZONE_LABELS } from '../constants';\n\nexport const hasNoTaints = (node: NodeKind): boolean => _.isEmpty(node.spec?.taints);\n\nexport const getZone = (node: NodeKind) =>\n  node.metadata.labels?.[ZONE_LABELS[0]] || node.metadata.labels?.[ZONE_LABELS[1]];\n\nexport const getNodeSelectorTermsIndices = (\n  nodeSelectorTerms: {\n    matchExpressions: MatchExpression[];\n    matchFields?: MatchExpression[];\n  }[] = [],\n) => {\n  let [selectorIndex, expIndex] = [-1, -1];\n\n  nodeSelectorTerms.forEach((selector, index) => {\n    expIndex = selector?.matchExpressions?.findIndex(\n      (exp: MatchExpression) => exp.key === HOSTNAME_LABEL_KEY && exp.operator === LABEL_OPERATOR,\n    );\n    if (expIndex !== -1) {\n      selectorIndex = index;\n    }\n  });\n\n  return [selectorIndex, expIndex];\n};\n\nexport const getNodesByHostNameLabel = (nodes: NodeKind[]): string[] =>\n  nodes.map((node: NodeKind) => node.metadata?.labels?.['kubernetes.io/hostname']);\n","import { WatchK8sResource } from '@console/dynamic-plugin-sdk';\nimport { NodeModel } from '@console/internal/models';\n\nexport const nodeResource: WatchK8sResource = {\n  kind: NodeModel.kind,\n  namespaced: false,\n  isList: true,\n};\n","import * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { ButtonBar } from '@console/internal/components/utils';\nimport { history } from '@console/internal/components/utils/router';\n\nexport const FormFooter: React.FC<FormFooterProps> = ({\n  errorMessage,\n  inProgress,\n  disableNext,\n  cancelUrl,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n      <ActionGroup>\n        <Button type=\"submit\" variant=\"primary\" isDisabled={disableNext}>\n          {t('lso-plugin~Create')}\n        </Button>\n        <Button type=\"button\" variant=\"secondary\" onClick={() => history.push(cancelUrl)}>\n          {t('lso-plugin~Cancel')}\n        </Button>\n      </ActionGroup>\n    </ButtonBar>\n  );\n};\n\ntype FormFooterProps = {\n  errorMessage: any;\n  inProgress: boolean;\n  disableNext: boolean;\n  cancelUrl: string;\n};\n","import * as React from 'react';\nimport { Text } from '@patternfly/react-core';\nimport { sortable, IRow } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Table } from '@console/internal/components/factory';\nimport {\n  ResourceLink,\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  convertToBaseValue,\n} from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport {\n  getName,\n  getNodeRoles,\n  getNodeCPUCapacity,\n  getNodeAllocatableMemory,\n} from '@console/shared';\nimport { useSelectList } from '@console/shared/src/hooks/select-list';\nimport { getZone, hasNoTaints } from '../../utils';\nimport { NodesTableRowsFunction, NodesTableCustomData } from './types';\nimport './nodes-table.scss';\n\nconst tableColumnClasses = [\n  classNames('pf-v5-u-w-40-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n];\n\nconst getRows: NodesTableRowsFunction = (\n  { componentProps, customData },\n  visibleRows,\n  setVisibleRows,\n  selectedNodes,\n  setSelectedNodes,\n) => {\n  const { data } = componentProps;\n  const { filteredNodes, preSelectedNodes, taintsFilter } = customData;\n  let filteredData: NodeKind[] = data;\n\n  if (filteredNodes?.length) {\n    /**\n     * Only the nodes present in `filteredNodes` will be displayed.\n     * These nodes are already filtered for taints e.g nodes passed\n     * from discovery step to create storage class in ocs.\n     */\n    filteredData = data.filter((node: NodeKind) => filteredNodes.includes(getName(node)));\n  } else {\n    /* Remove all tainted nodes, or allow some tainted nodes based on `taintsFilter` */\n    filteredData = filteredData.filter(\n      (node) => hasNoTaints(node) || (taintsFilter && taintsFilter(node)),\n    );\n  }\n\n  const rows = filteredData.map((node: NodeKind) => {\n    const cpuSpec: string = getNodeCPUCapacity(node);\n    const memSpec: string = getNodeAllocatableMemory(node);\n    const roles = getNodeRoles(node).sort();\n    const cells: IRow['cells'] = [\n      {\n        title: <ResourceLink kind=\"Node\" name={getName(node)} title={getName(node)} />,\n      },\n      {\n        title: roles.join(', ') ?? '-',\n      },\n      {\n        title: `${humanizeCpuCores(cpuSpec).string || '-'}`,\n      },\n      {\n        title: humanizeBinaryBytes(convertToBaseValue(memSpec)).string ?? '-',\n      },\n      {\n        title: getZone(node) ?? '-',\n      },\n    ];\n    return {\n      cells,\n      selected: selectedNodes.has(node.metadata.uid),\n      props: {\n        id: node.metadata.uid,\n      },\n    };\n  });\n\n  const uids = new Set(filteredData.map((n) => n.metadata.uid));\n\n  if (!_.isEqual(uids, visibleRows)) {\n    setVisibleRows(uids);\n    if (preSelectedNodes?.length && !selectedNodes?.size && filteredData.length) {\n      const preSelectedRows = filteredData.filter((node) =>\n        preSelectedNodes.includes(getName(node)),\n      );\n      setSelectedNodes(preSelectedRows);\n    }\n  }\n  return rows;\n};\n\nexport const NodesTable: React.FC<NodesTableProps> = (props) => {\n  const { t } = useTranslation();\n  const [visibleRows, setVisibleRows] = React.useState<Set<string>>(new Set());\n\n  const { hasOnSelect, onRowSelected } = props.customData;\n\n  const {\n    onSelect,\n    selectedRows: selectedNodes,\n    updateSelectedRows: setSelectedNodes,\n  } = useSelectList<NodeKind>(props.data, visibleRows, onRowSelected);\n\n  const getColumns = () => [\n    {\n      title: t('lso-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('lso-plugin~Role'),\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('lso-plugin~CPU'),\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('lso-plugin~Memory'),\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('lso-plugin~Zone'),\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"lso-node-selection-table__table--scroll\">\n        <Table\n          {...props}\n          aria-label={t('lso-plugin~Select nodes for creating volume filter')}\n          data-test-id=\"create-lvs-form-node-selection-table\"\n          Header={getColumns}\n          Rows={(rowProps) =>\n            getRows(rowProps, visibleRows, setVisibleRows, selectedNodes, setSelectedNodes)\n          }\n          customData={props.customData}\n          onSelect={hasOnSelect && onSelect}\n          virtualize={false}\n        />\n      </div>\n      {hasOnSelect && (\n        <Text data-test-id=\"create-lvs-form-selected-nodes\" component=\"h6\">\n          {t('lso-plugin~{{nodeCount, number}} node', {\n            nodeCount: selectedNodes?.size,\n            count: selectedNodes?.size,\n          })}{' '}\n          {t('lso-plugin~selected')}\n        </Text>\n      )}\n    </>\n  );\n};\n\ntype NodesTableProps = {\n  data: NodeKind[];\n  customData: NodesTableCustomData;\n};\n","import * as _ from 'lodash';\nimport {\n  apiVersionForModel,\n  K8sResourceCommon,\n  MatchExpression,\n  Toleration,\n  k8sCreate,\n  k8sPatch,\n  k8sGet,\n} from '@console/internal/module/k8s';\nimport { getNodeSelectorTermsIndices } from '@console/local-storage-operator-plugin/src/utils';\nimport { DISCOVERY_CR_NAME, HOSTNAME_LABEL_KEY, LABEL_OPERATOR } from '../../constants';\nimport { LocalVolumeDiscovery } from '../../models';\n\nexport const getDiscoveryRequestData = (\n  nodes: string[],\n  ns: string,\n  toleration?: Toleration,\n): LocalVolumeDiscoveryKind => {\n  const request: LocalVolumeDiscoveryKind = {\n    apiVersion: apiVersionForModel(LocalVolumeDiscovery),\n    kind: LocalVolumeDiscovery.kind,\n    metadata: { name: DISCOVERY_CR_NAME, namespace: ns },\n    spec: {\n      nodeSelector: {\n        nodeSelectorTerms: [\n          {\n            matchExpressions: [\n              {\n                key: HOSTNAME_LABEL_KEY,\n                operator: LABEL_OPERATOR,\n                values: nodes,\n              },\n            ],\n          },\n        ],\n      },\n    },\n  };\n  if (!_.isEmpty(toleration)) request.spec.tolerations = [toleration];\n  return request;\n};\n\nexport const updateLocalVolumeDiscovery = async (nodes, ns, setError) => {\n  const lvd: LocalVolumeDiscoveryKind = await k8sGet(LocalVolumeDiscovery, DISCOVERY_CR_NAME, ns);\n  const nodeSelectorTerms = lvd?.spec?.nodeSelector?.nodeSelectorTerms;\n  const [selectorIndex, expIndex] = getNodeSelectorTermsIndices(nodeSelectorTerms);\n  if (selectorIndex !== -1 && expIndex !== -1) {\n    const existingNodes = new Set(\n      lvd?.spec?.nodeSelector?.nodeSelectorTerms?.[selectorIndex]?.matchExpressions?.[\n        expIndex\n      ]?.values,\n    );\n    nodes.forEach((name) => existingNodes.add(name));\n    const patch = [\n      {\n        op: 'replace',\n        path: `/spec/nodeSelector/nodeSelectorTerms/${selectorIndex}/matchExpressions/${expIndex}/values`,\n        value: [...existingNodes],\n      },\n    ];\n    await k8sPatch(LocalVolumeDiscovery, lvd, patch);\n    setError('');\n  } else {\n    throw new Error(\n      'Could not find matchExpression of type key: \"kubernetes.io/hostname\" and operator: \"In\"',\n    );\n  }\n};\n\nexport const createLocalVolumeDiscovery = async (nodes, ns, toleration?) => {\n  const requestData = getDiscoveryRequestData(nodes, ns, toleration);\n  await k8sCreate(LocalVolumeDiscovery, requestData);\n};\n\nexport type LocalVolumeDiscoveryKind = K8sResourceCommon & {\n  spec: {\n    nodeSelector?: {\n      nodeSelectorTerms: { matchExpressions: MatchExpression[]; matchFields?: MatchExpression[] }[];\n    };\n    tolerations?: Toleration[];\n  };\n};\n"],"sourceRoot":""}