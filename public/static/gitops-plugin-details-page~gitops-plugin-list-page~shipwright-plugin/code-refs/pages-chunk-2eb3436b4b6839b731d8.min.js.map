{"version":3,"sources":["webpack:///./packages/pipelines-plugin/src/models/index.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/const.ts","webpack:///./packages/pipelines-plugin/src/components/import/import-types.ts","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/pipelines-plugin/src/models/pipelines.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts","webpack:///./packages/pipelines-plugin/src/components/repository/consts.ts","webpack:///./packages/dev-console/src/components/import/import-validation-utils.ts","webpack:///./packages/dev-console/src/components/import/serverless/serverless-utils.ts","webpack:///./packages/pipelines-plugin/src/components/repository/repository-form-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pac/const.ts"],"names":["StartedByLabel","StartedByAnnotation","TektonTaskAnnotation","TaskProviders","TektonTaskLabel","TektonResourceLabel","PipelineResourceType","VolumeTypes","SecretAnnotationId","Git","Image","PIPELINE_GA_VERSION","TRIGGERS_GA_VERSION","PIPELINE_UNSIMPLIFIED_METRICS_VERSION","PIPELINE_SERVICE_ACCOUNT","PIPELINE_RUN_AUTO_START_FAILED","DEFAULT_CHART_HEIGHT","DEFAULT_LEGEND_CHART_HEIGHT","DEFAULT_SAMPLES","preferredNameAnnotation","chainsSignedAnnotation","PIPELINE_NAMESPACE","PIPELINERUN_TEMPLATE_NAMESPACE","PIPELINE_CONFIG_NAME","PipelineMetricsLevel","FLAG_TEKTON_V1_ENABLED","FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER","FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER","PipelineType","hostnameRegex","pathRegex","gitUrlRegex","projectNameValidationSchema","shape","name","matches","required","applicationNameValidationSchema","selectedKey","max","when","is","then","deploymentValidationSchema","t","replicas","transform","cv","undefined","test","min","Number","MAX_SAFE_INTEGER","maxSafeInteger","value","message","resourcesValidationSchema","oneOf","OpenShift","Kubernetes","KnativeService","serverlessValidationSchema","scaling","minpods","maxpods","limit","this","parent","concurrencytarget","concurrencylimit","concurrencyutilization","autoscale","autoscalewindow","autoscalewindowUnit","unit","convertToSec","domainMapping","of","excludeEmptyString","domainName","split","length","routeValidationSchema","secure","tls","termination","hostname","path","unknownTargetPort","typeError","integer","limitsValidationSchema","cpu","request","requestUnit","limitUnit","ensure","memory","imageValidationSchema","build","strategy","selected","tag","gitValidationSchema","url","type","showGitType","dockerValidationSchema","containerPort","dockerfilePath","devfileValidationSchema","devfilePath","devfileContent","devfileHasError","devfileSuggestedResources","buildValidationSchema","isiValidationSchema","image","status","importFlowPipelineTemplateValidationSchema","isPipelineEnabled","buildOption","pipelineType","PIPELINES","PAC","templateSelected","color","PipelineModel","apiGroup","apiVersion","label","labelKey","labelPluralKey","plural","abbr","namespaced","kind","id","labelPlural","crd","PipelineModelV1Beta1","PipelineRunModel","PipelineRunModelV1Beta1","TaskModel","TaskModelV1Beta1","TaskRunModel","TaskRunModelV1Beta1","CustomRunModelV1Beta1","PipelineResourceModel","ClusterTaskModel","ConditionModel","TriggerBindingModel","ClusterTriggerBindingModel","TriggerTemplateModel","EventListenerModel","RepositoryModel","TektonConfigModel","TektonHubModel","TektonResultModel","isInteger","bitBucketUserNameRegex","RepositoryFields","RepoAnnotationFields","RepositoryRuntimes","RepositoryLabels","REPOSITORY","URL_REPO","URL_ORG","SHA","EVENT_TYPE","RepositoryAnnotations","SHA_MESSAGE","SHA_URL","REPO_URL","BRANCH","PacConfigurationTypes","defaultRepositoryFormValues","gitUrl","githubAppAvailable","gitProvider","INVALID","method","showOverviewPage","yamlData","webhook","token","secret","user","autoAttach","AccessTokenDocLinks","GITHUB","GITLAB","BITBUCKET","WebhookDocLinks","gitProviderTypesHosts","validationSchema","project","application","git","docker","devfile","deployment","serverless","route","limits","resources","healthChecks","pac","pipeline","hasDomain","domain","startsWith","includes","detectGitType","GITEA","UNSURE","createComponentName","nameString","kebabCaseStr","match","detectGitRepoName","replace","pop","getAutoscaleWindow","autoscaleValue","val","defaultAutoscalewindowUnit","DOMAIN_MAPPING_KSVC_INFO_REGEX","removeKsvcInfoFromDomainMapping","dm","getOtherKsvcFromDomainMapping","currentKsvcName","spec","ref","removeDuplicateDomainMappings","allDomainMappings","connectedDomainMappings","Set","filter","map","n","hasOtherKsvcDomainMappings","some","RegExp","getAllOtherDomainMappingInUse","domainMappings","data","serviceName","d","selectedDomain","find","metadata","dryRunOpt","dryRun","repositoryValidationSchema","accessToken","secretRef","pipelinesAccessTokenValidationSchema","importFlowRepositoryValidationSchema","repository","pipelineEnabled","createRepositoryResources","values","namespace","labels","secretObj","webhookSecret","encodedSecret","encode","detectedGitType","repositoryName","generateName","opaque","stringData","model","ns","queryParams","createTokenSecret","resource","op","gitHost","source","git_provider","key","webhook_secret","createRemoteWebhook","loaded","webhookURL","gitService","authToken","sslVerification","decode","createRepoWebhook","recommendRepositoryName","getPipelineRunTemplate","runtime","repoName","runTimeTemplate","pipelineRunTemplateCfg","labelSelector","matchLabels","template","e","console","log","pipelineRunTemplate","getFallbackTemplate","getPipelineRunDefaultTemplate","healthChecksValidationSchema","containerName","showForm","enabled","modified","periodSeconds","initialDelaySeconds","failureThreshold","timeoutSeconds","successThreshold","requestType","httpGet","port","tcpSocket","exec","command","healthChecksProbesValidationSchema","readinessProbe","livenessProbe","startupProbe","PAC_GH_APP_NEW","PAC_GH_APP_DOC","PAC_GH_APP_MANIFEST_API","EVENT_LISTNER_NAME","PAC_SECRET_NAME","PAC_GH_APP_NAME","PAC_INFO","PAC_TEMPLATE_DEFAULT"],"mappings":"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","file":"gitops-plugin-details-page~gitops-plugin-list-page~shipwright-plugin/code-refs/pages-chunk-2eb3436b4b6839b731d8.min.js","sourcesContent":["export * from './pipelines';\n","export enum StartedByLabel {\n  triggers = 'triggers.tekton.dev/eventlistener',\n}\nexport enum StartedByAnnotation {\n  user = 'pipeline.openshift.io/started-by',\n}\nexport enum TektonTaskAnnotation {\n  minVersion = ' tekton.dev/pipelines.minVersion',\n  tags = 'tekton.dev/tags',\n  categories = 'tekton.dev/categories',\n  installedFrom = 'openshift.io/installed-from',\n  semVersion = 'openshift.io/sem-version',\n}\nexport enum TaskProviders {\n  redhat = 'Red Hat',\n  community = 'Community',\n  tektonHub = 'TektonHub',\n  artifactHub = 'ArtifactHub',\n}\nexport enum TektonTaskLabel {\n  providerType = 'operator.tekton.dev/provider-type',\n  version = 'app.kubernetes.io/version',\n}\nexport enum TektonResourceLabel {\n  pipeline = 'tekton.dev/pipeline',\n  pipelinerun = 'tekton.dev/pipelineRun',\n  taskrun = 'tekton.dev/taskRun',\n  pipelineTask = 'tekton.dev/pipelineTask',\n}\n\nexport enum PipelineResourceType {\n  git = 'git',\n  image = 'image',\n  cluster = 'cluster',\n  storage = 'storage',\n}\n\nexport enum VolumeTypes {\n  NoWorkspace = 'noWorkspace',\n  EmptyDirectory = 'emptyDirectory',\n  ConfigMap = 'configMap',\n  Secret = 'secret',\n  PVC = 'pvc',\n  VolumeClaimTemplate = 'volumeClaimTemplate',\n}\n\nexport enum SecretAnnotationId {\n  Git = 'git',\n  Image = 'docker',\n}\n\nexport const SecretAnnotationType = {\n  [SecretAnnotationId.Git]: 'Git Server',\n  [SecretAnnotationId.Image]: 'Image Registry',\n};\n\nexport const PIPELINE_GA_VERSION = '1.4.0';\nexport const TRIGGERS_GA_VERSION = '1.6.0';\nexport const PIPELINE_UNSIMPLIFIED_METRICS_VERSION = '1.5.2';\nexport const PIPELINE_SERVICE_ACCOUNT = 'pipeline';\nexport const PIPELINE_RUN_AUTO_START_FAILED = `bridge/pipeline-run-auto-start-failed`;\n\nexport const DEFAULT_CHART_HEIGHT = 275;\nexport const DEFAULT_LEGEND_CHART_HEIGHT = 375;\nexport const DEFAULT_TIME_RANGE = '1w';\nexport const DEFAULT_REFRESH_INTERVAL = '30s';\nexport const DEFAULT_SAMPLES = 60;\n\n// Annotation for referencing pipeline name in case of PipelineRun with no reference to a Pipeline (embedded pipeline)\nexport const preferredNameAnnotation = 'pipeline.openshift.io/preferredName';\nexport const chainsSignedAnnotation = 'chains.tekton.dev/signed';\n\nexport const PIPELINE_NAMESPACE = 'openshift-pipelines';\nexport const PIPELINERUN_TEMPLATE_NAMESPACE = 'openshift';\nexport const PIPELINE_CONFIG_NAME = 'config';\n\nexport enum PipelineMetricsLevel {\n  PIPELINE_TASK_LEVEL = 'pipeline/task',\n  PIPELINERUN_TASKRUN_LEVEL = 'pipelinerun/taskrun',\n  UNSUPPORTED_LEVEL = 'unsupported',\n  UNSIMPLIFIED_METRICS_LEVEL = 'unsimplified',\n}\n\nexport const FLAG_TEKTON_V1_ENABLED = 'FLAG_TEKTON_V1_ENABLED';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER';\n","import { PipelineKind } from '../../types';\n\nexport enum PipelineType {\n  PAC = 'pac',\n  PIPELINE = 'pipeline',\n}\nexport interface PipelineData {\n  enabled: boolean;\n  type?: PipelineType;\n  template?: PipelineKind;\n}\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { BuildOptions, Resources } from './import-types';\nimport { removeKsvcInfoFromDomainMapping } from './serverless/serverless-utils';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nconst convertToSec = (value: number, unit: string): number => {\n  switch (unit) {\n    case 'm': {\n      return value * 60;\n    }\n    case 'h': {\n      return value * 3600;\n    }\n    default: {\n      return value;\n    }\n  }\n};\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    replicas: yup\n      .number()\n      .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n      .test(isInteger(t('devconsole~Replicas must be an integer.')))\n      .min(0, t('devconsole~Replicas must be greater than or equal to 0.'))\n      .max(\n        Number.MAX_SAFE_INTEGER,\n        t('devconsole~Replicas must be lesser than or equal to {{maxSafeInteger}}.', {\n          maxSafeInteger: Number.MAX_SAFE_INTEGER,\n        }),\n      )\n      .test({\n        name: 'isEmpty',\n        test: (value) => value !== undefined,\n        message: t('devconsole~This field cannot be empty.'),\n      }),\n  });\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = (t: TFunction) =>\n  yup.object().when('resources', {\n    is: Resources.KnativeService,\n    then: yup.object().shape({\n      scaling: yup.object({\n        minpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Min Pods must be an integer.')))\n          .min(0, t('devconsole~Min Pods must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Min Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        maxpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Max Pods must be an integer.')))\n          .min(1, t('devconsole~Max Pods must be greater than or equal to 1.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Max Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          )\n          .test({\n            test(limit) {\n              const { minpods } = this.parent;\n              return limit ? limit >= minpods : true;\n            },\n            message: t('devconsole~Max Pods must be greater than or equal to Min Pods.'),\n          }),\n        concurrencytarget: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency target must be an integer.')))\n          .min(0, t('devconsole~Concurrency target must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency target must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencylimit: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency limit must be an integer.')))\n          .min(0, t('devconsole~Concurrency limit must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency limit must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencyutilization: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .min(0, t('devconsole~Concurrency utilization must be between 0 and 100.'))\n          .max(100, t('devconsole~Concurrency utilization must be between 0 and 100.')),\n        autoscale: yup.object().shape({\n          autoscalewindow: yup\n            .number()\n            .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n            .test({\n              test(autoscalewindow) {\n                if (autoscalewindow) {\n                  const { autoscalewindowUnit } = this.parent;\n                  const value = convertToSec(autoscalewindow, autoscalewindowUnit);\n                  return value >= 6 && value <= 3600;\n                }\n                return true;\n              },\n              message: t('devconsole~Autoscale window must be between 6s and 1h.'),\n            }),\n        }),\n      }),\n      domainMapping: yup.array().of(\n        yup\n          .string()\n          .transform(removeKsvcInfoFromDomainMapping)\n          .matches(hostnameRegex, {\n            message: t(\n              'devconsole~Domain name must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n            ),\n            excludeEmptyString: true,\n          })\n          .test(\n            'domainname-has-segements',\n            t('devconsole~Domain name must consist of at least two segments separated by dots.'),\n            function (domainName: string) {\n              return domainName.split('.').length >= 2;\n            },\n          ),\n      ),\n    }),\n  });\n\nexport const routeValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    secure: yup.boolean(),\n    tls: yup.object().when('secure', {\n      is: true,\n      then: yup.object({\n        termination: yup.string().required(t('devconsole~Please select a termination type.')),\n      }),\n    }),\n    hostname: yup\n      .string()\n      .matches(hostnameRegex, {\n        message: t(\n          'devconsole~Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.')),\n    path: yup.string().matches(pathRegex, {\n      message: t('devconsole~Path must start with /.'),\n      excludeEmptyString: true,\n    }),\n    unknownTargetPort: yup\n      .number()\n      .typeError(t('devconsole~Port must be an integer.'))\n      .integer(t('devconsole~Port must be an integer.'))\n      .min(1, t('devconsole~Port must be between 1 and 65535.'))\n      .max(65535, t('devconsole~Port must be between 1 and 65535.')),\n  });\n\nexport const limitsValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    cpu: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limitUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${limit}${limitUnit}`) >=\n                convertToBaseValue(`${request}${requestUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU limit must be greater than or equal to request.'),\n        }),\n    }),\n    memory: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory limit must be greater than or equal to request.'),\n        }),\n      limitUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n    }),\n  });\n\nexport const imageValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Source',\n    then: yup.object().shape({\n      selected: yup.string().required(t('devconsole~Required')),\n      tag: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const gitValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    url: yup\n      .string()\n      .max(2000, t('devconsole~Please enter a URL that is less then 2000 characters.'))\n      .matches(gitUrlRegex, t('devconsole~Invalid Git URL.'))\n      .required(t('devconsole~Required')),\n    type: yup.string().when('showGitType', {\n      is: true,\n      then: yup\n        .string()\n        .required(t('devconsole~We failed to detect the Git type. Please choose a Git type.')),\n    }),\n    showGitType: yup.boolean(),\n  });\n\nexport const dockerValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Docker',\n    then: yup.object().shape({\n      containerPort: yup\n        .number()\n        .test(isInteger(t('devconsole~Container port should be an integer'))),\n      dockerfilePath: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const devfileValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Devfile',\n    then: yup.object().shape({\n      devfilePath: yup.string().required(t('devconsole~Required')),\n      devfileContent: yup\n        .string()\n        .min(1, t('devconsole~Required'))\n        .required(t('devconsole~Required')),\n      devfileHasError: yup.boolean().oneOf([false]),\n      devfileSuggestedResources: yup.object().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = (t: TFunction) =>\n  yup.string().required(t('devconsole~Required'));\n\nexport const isiValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup.string().required(t('devconsole~Required')),\n    image: yup.object().required(t('devconsole~Required')),\n    tag: yup.string(),\n    status: yup.string().required(t('devconsole~Required')),\n  });\n\nexport const importFlowPipelineTemplateValidationSchema = yup\n  .object()\n  .when(['enabled', 'build.option', 'type'], {\n    is: (isPipelineEnabled, buildOption, pipelineType) =>\n      (isPipelineEnabled || buildOption === BuildOptions.PIPELINES) &&\n      pipelineType !== PipelineType.PAC,\n    then: yup.object().shape({\n      templateSelected: yup.string().required(),\n    }),\n  });\n","import { chart_color_green_400 as tektonGroupColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { K8sKind } from '@console/internal/module/k8s';\n\nconst color = tektonGroupColor.value;\n\nexport const PipelineModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const CustomRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'CustomRun',\n  // t('pipelines-plugin~CustomRun')\n  labelKey: 'pipelines-plugin~CustomRun',\n  // t('pipelines-plugin~CustomRuns')\n  labelPluralKey: 'pipelines-plugin~CustomRuns',\n  plural: 'customruns',\n  abbr: 'CR',\n  namespaced: true,\n  kind: 'CustomRun',\n  id: 'customrun',\n  labelPlural: 'CustomRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'PipelineResource',\n  // t('pipelines-plugin~PipelineResource')\n  labelKey: 'pipelines-plugin~PipelineResource',\n  // t('pipelines-plugin~PipelineResources')\n  labelPluralKey: 'pipelines-plugin~PipelineResources',\n  plural: 'pipelineresources',\n  abbr: 'PR',\n  namespaced: true,\n  kind: 'PipelineResource',\n  id: 'pipelineresource',\n  labelPlural: 'PipelineResources',\n  crd: true,\n  color,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTask',\n  // t('pipelines-plugin~ClusterTask')\n  labelKey: 'pipelines-plugin~ClusterTask',\n  // t('pipelines-plugin~ClusterTasks')\n  labelPluralKey: 'pipelines-plugin~ClusterTasks',\n  plural: 'clustertasks',\n  abbr: 'CT',\n  namespaced: false,\n  kind: 'ClusterTask',\n  id: 'clustertask',\n  labelPlural: 'ClusterTasks',\n  crd: true,\n  color,\n};\n\nexport const ConditionModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Condition',\n  // t('pipelines-plugin~Condition')\n  labelKey: 'pipelines-plugin~Condition',\n  // t('pipelines-plugin~Conditions')\n  labelPluralKey: 'pipelines-plugin~Conditions',\n  plural: 'conditions',\n  abbr: 'C',\n  namespaced: true,\n  kind: 'Condition',\n  id: 'condition',\n  labelPlural: 'Conditions',\n  crd: true,\n  color,\n};\n\nexport const TriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerBinding',\n  // t('pipelines-plugin~TriggerBinding')\n  labelKey: 'pipelines-plugin~TriggerBinding',\n  // t('pipelines-plugin~TriggerBindings')\n  labelPluralKey: 'pipelines-plugin~TriggerBindings',\n  plural: 'triggerbindings',\n  abbr: 'TB',\n  namespaced: true,\n  kind: 'TriggerBinding',\n  id: 'triggerbinding',\n  labelPlural: 'TriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const ClusterTriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBinding')\n  labelKey: 'pipelines-plugin~ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBindings')\n  labelPluralKey: 'pipelines-plugin~ClusterTriggerBindings',\n  plural: 'clustertriggerbindings',\n  abbr: 'CTB',\n  namespaced: false,\n  kind: 'ClusterTriggerBinding',\n  id: 'clustertriggerbinding',\n  labelPlural: 'ClusterTriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const TriggerTemplateModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplate')\n  labelKey: 'pipelines-plugin~TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplates')\n  labelPluralKey: 'pipelines-plugin~TriggerTemplates',\n  plural: 'triggertemplates',\n  abbr: 'TT',\n  namespaced: true,\n  kind: 'TriggerTemplate',\n  id: 'triggertemplate',\n  labelPlural: 'TriggerTemplates',\n  crd: true,\n  color,\n};\n\nexport const EventListenerModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'EventListener',\n  // t('pipelines-plugin~EventListener')\n  labelKey: 'pipelines-plugin~EventListener',\n  // t('pipelines-plugin~EventListeners')\n  labelPluralKey: 'pipelines-plugin~EventListeners',\n  plural: 'eventlisteners',\n  abbr: 'EL',\n  namespaced: true,\n  kind: 'EventListener',\n  id: 'eventlistener',\n  labelPlural: 'EventListeners',\n  crd: true,\n  color,\n};\n\nexport const RepositoryModel: K8sKind = {\n  apiGroup: 'pipelinesascode.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Repository',\n  // t('pipelines-plugin~Repository')\n  labelKey: 'pipelines-plugin~Repository',\n  // t('pipelines-plugin~Repositories')\n  labelPluralKey: 'pipelines-plugin~Repositories',\n  plural: 'repositories',\n  abbr: 'R',\n  namespaced: true,\n  kind: 'Repository',\n  id: 'repository',\n  labelPlural: 'Repositories',\n  crd: true,\n  color,\n};\n\nexport const TektonConfigModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonConfig',\n  // t('pipelines-plugin~TektonConfig')\n  labelKey: 'pipelines-plugin~TektonConfig',\n  // t('pipelines-plugin~TektonConfigs')\n  labelPluralKey: 'pipelines-plugin~TektonConfigs',\n  plural: 'tektonconfigs',\n  abbr: 'TC',\n  namespaced: false,\n  kind: 'TektonConfig',\n  id: 'tektonconfig',\n  labelPlural: 'TektonConfigs',\n  crd: true,\n};\n\nexport const TektonHubModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonHub',\n  // t('pipelines-plugin~TektonHub')\n  labelKey: 'pipelines-plugin~TektonHub',\n  // t('pipelines-plugin~TektonHubs')\n  labelPluralKey: 'pipelines-plugin~TektonHubs',\n  plural: 'tektonhubs',\n  abbr: 'TH',\n  namespaced: false,\n  kind: 'TektonHub',\n  id: 'tektonhub',\n  labelPlural: 'TektonHubs',\n  crd: true,\n};\n\nexport const TektonResultModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonResult',\n  // t('pipelines-plugin~TektonResult')\n  labelKey: 'pipelines-plugin~TektonResult',\n  // t('pipelines-plugin~TektonResults')\n  labelPluralKey: 'pipelines-plugin~TektonResults',\n  plural: 'tektonresults',\n  abbr: 'TR',\n  namespaced: false,\n  kind: 'TektonResult',\n  id: 'tektonresult',\n  labelPlural: 'TektonResults',\n  crd: true,\n};\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n\nexport const bitBucketUserNameRegex = /^[a-z]([a-z0-9_]-?)*[a-z0-9]$/;\n","import { GitProvider } from '@console/git-service/src';\nimport { RepositoryFormValues } from './types';\n\nexport enum RepositoryFields {\n  REPOSITORY = 'Repository',\n  URL_REPO = 'RepoUrl',\n  URL_ORG = 'RepoOrg',\n  SHA = 'sha',\n  EVENT_TYPE = 'EventType',\n}\n\nexport enum RepoAnnotationFields {\n  SHA_MESSAGE = 'sha_message',\n  SHA_URL = 'sha_url',\n  REPO_URL = 'repo_url',\n  BRANCH = 'Branch',\n}\n\nexport enum RepositoryRuntimes {\n  golang = 'go',\n  nodejs = 'nodejs',\n  python = 'python',\n  java = 'java',\n}\n\nexport const RepositoryLabels: Record<RepositoryFields, string> = {\n  [RepositoryFields.REPOSITORY]: 'pipelinesascode.tekton.dev/repository',\n  [RepositoryFields.URL_REPO]: 'pipelinesascode.tekton.dev/url-repository',\n  [RepositoryFields.URL_ORG]: 'pipelinesascode.tekton.dev/url-org',\n  [RepositoryFields.SHA]: 'pipelinesascode.tekton.dev/sha',\n  [RepositoryFields.EVENT_TYPE]: 'pipelinesascode.tekton.dev/event-type',\n};\n\nexport const RepositoryAnnotations: Record<RepoAnnotationFields, string> = {\n  [RepoAnnotationFields.SHA_MESSAGE]: 'pipelinesascode.tekton.dev/sha-title',\n  [RepoAnnotationFields.SHA_URL]: 'pipelinesascode.tekton.dev/sha-url',\n  [RepoAnnotationFields.REPO_URL]: 'pipelinesascode.tekton.dev/repo-url',\n  [RepoAnnotationFields.BRANCH]: 'pipelinesascode.tekton.dev/branch',\n};\n\nexport const baseURL = 'https://github.com';\n\nexport enum PacConfigurationTypes {\n  GITHUB = 'github',\n  WEBHOOK = 'webhook',\n}\n\nexport const defaultRepositoryFormValues: RepositoryFormValues = {\n  gitUrl: '',\n  githubAppAvailable: false,\n  gitProvider: GitProvider.INVALID,\n  name: '',\n  method: 'github',\n  showOverviewPage: false,\n  yamlData: ``,\n  webhook: {\n    token: '',\n    method: 'token',\n    secret: '',\n    url: '',\n    user: '',\n    autoAttach: false,\n  },\n};\n\nexport const AccessTokenDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token',\n  [GitProvider.GITLAB]: 'https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/',\n};\n\nexport const WebhookDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/developers/webhooks-and-events/webhooks/creating-webhooks',\n  [GitProvider.GITLAB]:\n    'https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#configure-a-webhook-in-gitlab',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/manage-webhooks/',\n};\n\nexport const gitProviderTypesHosts = ['github.com', 'bitbucket.org', 'gitlab.com'];\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { GitProvider } from '@console/git-service/src';\nimport { importFlowRepositoryValidationSchema } from '@console/pipelines-plugin/src/components/repository/repository-form-utils';\nimport { nameValidationSchema, nameRegex } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  gitValidationSchema,\n  dockerValidationSchema,\n  buildValidationSchema,\n  gitUrlRegex,\n  resourcesValidationSchema,\n  devfileValidationSchema,\n  importFlowPipelineTemplateValidationSchema,\n} from './validation-schema';\n\nexport const validationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: nameValidationSchema(t),\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    image: imageValidationSchema(t),\n    git: gitValidationSchema(t),\n    docker: dockerValidationSchema(t),\n    devfile: devfileValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    build: buildValidationSchema,\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n    pac: importFlowRepositoryValidationSchema(t),\n    pipeline: importFlowPipelineTemplateValidationSchema,\n  });\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  if (hasDomain(url, 'gitea.com') || url.includes('gitea')) {\n    return GitProvider.GITEA;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nexport const createComponentName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return nameString;\n  }\n\n  const kebabCaseStr = _.kebabCase(nameString);\n  return nameString.match(/^\\d/) || kebabCaseStr.match(/^\\d/)\n    ? `ocp-${kebabCaseStr}`\n    : kebabCaseStr;\n};\n\nexport const detectGitRepoName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createComponentName(name);\n};\n","import { apiVersionForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin/src';\nimport { AutoscaleWindowType } from '../import-types';\n\nexport const getAutoscaleWindow = (autoscaleValue: string): AutoscaleWindowType => {\n  const windowRegEx = /^[0-9]+|[a-zA-Z]*/g;\n  const [val, unit] = autoscaleValue?.match(windowRegEx);\n  return {\n    autoscalewindow: Number(val) || '',\n    autoscalewindowUnit: unit || 's',\n    defaultAutoscalewindowUnit: unit || 's',\n  };\n};\n\nconst DOMAIN_MAPPING_KSVC_INFO_REGEX = / *\\([^)]*\\) */g;\n\nexport const removeKsvcInfoFromDomainMapping = (dm: string) =>\n  dm.replace(DOMAIN_MAPPING_KSVC_INFO_REGEX, '');\n\nexport const getOtherKsvcFromDomainMapping = (\n  dm: K8sResourceKind,\n  currentKsvcName: string,\n): string | null => {\n  if (!dm.spec?.ref) return null;\n  const { apiVersion, kind, name } = dm.spec.ref;\n  return apiVersionForModel(ServiceModel) === apiVersion &&\n    kind === ServiceModel.kind &&\n    name !== currentKsvcName\n    ? name\n    : null;\n};\n\nexport const removeDuplicateDomainMappings = (\n  allDomainMappings: string[],\n  connectedDomainMappings: string[],\n): string[] => {\n  return [\n    ...new Set(\n      allDomainMappings\n        ?.filter((dm) =>\n          connectedDomainMappings?.length > 0\n            ? connectedDomainMappings?.includes(removeKsvcInfoFromDomainMapping(dm))\n            : true,\n        )\n        .map((n) => removeKsvcInfoFromDomainMapping(n)),\n    ),\n  ];\n};\n\nexport const hasOtherKsvcDomainMappings = (domainMapping: string[]): boolean =>\n  domainMapping.some((dm) => new RegExp(DOMAIN_MAPPING_KSVC_INFO_REGEX).test(dm));\n\nexport const getAllOtherDomainMappingInUse = (\n  domainMappings: string[],\n  data: K8sResourceKind[] = [],\n  serviceName: string,\n): K8sResourceKind[] =>\n  domainMappings\n    .filter((d) => hasOtherKsvcDomainMappings([d]))\n    .map((dm) => {\n      const selectedDomain = data?.find(\n        (d) => d.metadata.name === removeKsvcInfoFromDomainMapping(dm),\n      );\n      return selectedDomain && selectedDomain.spec?.ref?.name !== serviceName\n        ? selectedDomain\n        : null;\n    })\n    .filter((d) => !!d);\n","import * as GitUrlParse from 'git-url-parse';\nimport { TFunction } from 'i18next';\nimport { Base64 } from 'js-base64';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { gitUrlRegex } from '@console/dev-console/src/components/import/validation-schema';\nimport { bitBucketUserNameRegex } from '@console/dev-console/src/utils/yup-validation-util';\nimport {\n  k8sCreateResource,\n  k8sGetResource,\n  k8sListResourceItems,\n  k8sPatchResource,\n} from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { getGitService, GitProvider } from '@console/git-service/src';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { ConfigMapModel, SecretModel } from '@console/internal/models';\nimport { ConfigMapKind, SecretKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { nameRegex } from '@console/shared/src';\nimport { RepositoryModel } from '../../models';\nimport { PipelineType } from '../import/import-types';\nimport { PAC_TEMPLATE_DEFAULT } from '../pac/const';\nimport { PIPELINERUN_TEMPLATE_NAMESPACE } from '../pipelines/const';\nimport { RepositoryRuntimes, gitProviderTypesHosts } from './consts';\nimport { RepositoryFormValues } from './types';\n\nexport const dryRunOpt = { dryRun: 'All' };\n\nexport const repositoryValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .matches(nameRegex, {\n        message: t(\n          'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .required(t('pipelines-plugin~Required')),\n    gitUrl: yup\n      .string()\n      .matches(gitUrlRegex, t('pipelines-plugin~Invalid Git URL.'))\n      .required(t('pipelines-plugin~Required')),\n    accessToken: yup.string(),\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(bitBucketUserNameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers, underscores and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl && !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const pipelinesAccessTokenValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(nameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl &&\n          gitProvider &&\n          !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const importFlowRepositoryValidationSchema = (t: TFunction) => {\n  return yup.object().shape({\n    repository: yup.object().when(['pipelineType', 'pipelineEnabled'], {\n      is: (pipelineType, pipelineEnabled) => pipelineType === PipelineType.PAC && pipelineEnabled,\n      then: pipelinesAccessTokenValidationSchema(t),\n    }),\n  });\n};\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nconst createTokenSecret = async (\n  repositoryName: string,\n  user: string,\n  token: string,\n  namespace: string,\n  detectedGitType: GitProvider,\n  webhookSecret?: string,\n  dryRun?: boolean,\n) => {\n  const data: SecretKind = {\n    apiVersion: SecretModel.apiVersion,\n    kind: SecretModel.kind,\n    metadata: {\n      generateName: `${repositoryName}-token-`,\n      namespace,\n    },\n    type: SecretType.opaque,\n    stringData: {\n      'provider.token': token,\n      ...(webhookSecret && { 'webhook.secret': webhookSecret }),\n      ...(detectedGitType === GitProvider.BITBUCKET && {\n        'webhook.auth': Base64.encode(`${user}:${token}`),\n      }),\n    },\n  };\n\n  return k8sCreateResource({\n    model: SecretModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n};\n\nexport const createRepositoryResources = async (\n  values: RepositoryFormValues,\n  namespace: string,\n  labels: { [key: string]: string } = {},\n  dryRun?: boolean,\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    gitUrl,\n    webhook: { secretObj, method, token, secret: webhookSecret, user },\n  } = values;\n  const encodedSecret = Base64.encode(webhookSecret);\n  const detectedGitType = detectGitType(gitUrl);\n  let secret: SecretKind;\n  if (token && method === 'token') {\n    secret = await createTokenSecret(\n      name,\n      user,\n      token,\n      namespace,\n      detectedGitType,\n      webhookSecret,\n      dryRun,\n    );\n  } else if (\n    method === 'secret' &&\n    secretObj &&\n    secretObj?.data?.['webhook.secret'] !== encodedSecret\n  ) {\n    await k8sPatchResource({\n      model: SecretModel,\n      resource: secretObj,\n      data: [{ op: 'replace', path: `/data/webhook.secret`, value: Base64.encode(webhookSecret) }],\n    });\n  }\n  const gitHost = GitUrlParse(gitUrl).source;\n  const secretRef = secret || secretObj;\n  const data = {\n    kind: RepositoryModel.kind,\n    apiVersion: 'pipelinesascode.tekton.dev/v1alpha1',\n    metadata: {\n      name,\n      namespace,\n      ...(labels || {}),\n    },\n    spec: {\n      url: gitUrl,\n      ...(secretRef || gitHost !== 'github.com'\n        ? {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            git_provider: {\n              ...(!gitProviderTypesHosts.includes(gitHost) ? { url: gitHost } : {}),\n              ...(gitHost === 'bitbucket.org'\n                ? {\n                    user,\n                  }\n                : {}),\n              ...(secretRef\n                ? {\n                    secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'provider.token',\n                    },\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    webhook_secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'webhook.secret',\n                    },\n                  }\n                : {}),\n            },\n          }\n        : {}),\n    },\n  };\n\n  const resource = await k8sCreateResource({\n    model: RepositoryModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n\n  return resource;\n};\n\nexport const createRemoteWebhook = async (\n  values: RepositoryFormValues,\n  pac: ConfigMapKind,\n  loaded: boolean,\n): Promise<boolean> => {\n  const {\n    gitUrl,\n    webhook: { method, token, secret: webhookSecret, url: webhookURL, secretObj, user },\n  } = values;\n  const detectedGitType = detectGitType(gitUrl);\n  const gitService = getGitService(gitUrl, detectedGitType);\n\n  let sslVerification = true;\n  if (loaded && pac?.data?.['webhook-ssl-verification'] === 'false') {\n    sslVerification = false;\n  }\n\n  let authToken: string;\n  if (detectedGitType === GitProvider.BITBUCKET) {\n    authToken =\n      method === 'token'\n        ? Base64.encode(`${user}:${token}`)\n        : Base64.decode(secretObj?.data?.['webhook.auth']);\n  } else {\n    authToken = method === 'token' ? token : Base64.decode(secretObj?.data?.['provider.token']);\n  }\n\n  const webhookCreationStatus = await gitService.createRepoWebhook(\n    authToken,\n    webhookURL,\n    sslVerification,\n    webhookSecret,\n  );\n\n  return webhookCreationStatus;\n};\n\nexport const createRepositoryName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return `git-${nameString}`;\n  }\n  return `git-${_.kebabCase(nameString)}`;\n};\n\nexport const recommendRepositoryName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createRepositoryName(name);\n};\n\nexport const getFallbackTemplate = (repoName: string): string => `apiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: ${repoName ?? 'pull_request'}\n  annotations:\n    # The event we are targeting as seen from the webhook payload\n    # this can be an array too, i.e: [pull_request, push]\n    pipelinesascode.tekton.dev/on-event: \"[pull_request, push]\"\n\n    # The branch or tag we are targeting (ie: main, refs/tags/*)\n    pipelinesascode.tekton.dev/on-target-branch: \"main\"\n\n    # Fetch the git-clone task from hub, we are able to reference later on it\n    # with taskRef and it will automatically be embedded into our pipeline.\n    pipelinesascode.tekton.dev/task: \"git-clone\"\n\n    # You can add more tasks in here to reuse, browse the one you like from here\n    # https://hub.tekton.dev/\n    # example:\n    # pipelinesascode.tekton.dev/task-2: \"[maven, buildah]\"\n\n    # How many runs we want to keep attached to this event\n    pipelinesascode.tekton.dev/max-keep-runs: \"5\"\nspec:\n  params:\n    # The variable with brackets are special to Pipelines as Code\n    # They will automatically be expanded with the events from Github.\n    - name: repo_url\n      value: \"{{ repo_url }}\"\n    - name: revision\n      value: \"{{ revision }}\"\n  pipelineSpec:\n    params:\n      - name: repo_url\n      - name: revision\n    workspaces:\n      - name: source\n      - name: basic-auth\n    tasks:\n      - name: fetch-repository\n        taskRef:\n          name: git-clone\n        workspaces:\n          - name: output\n            workspace: source\n          - name: basic-auth\n            workspace: basic-auth\n        params:\n          - name: url\n            value: $(params.repo_url)\n          - name: revision\n            value: $(params.revision)\n\n      # Customize this task if you like, or just do a taskRef\n      # to one of the hub task.\n      - name: noop-task\n        runAfter:\n          - fetch-repository\n        workspaces:\n          - name: source\n            workspace: source\n        taskSpec:\n          workspaces:\n            - name: source\n          steps:\n            - name: noop-task\n              image: registry.access.redhat.com/ubi9/ubi-micro\n              workingDir: $(workspaces.source.path)\n              script: |\n                exit 0\n  workspaces:\n  - name: source\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n  # This workspace will inject secret to help the git-clone task to be able to\n  # checkout the private repositories\n  - name: basic-auth\n    secret:\n      secretName: \"{{ git_auth_secret }}\"`;\n\nexport const getPipelineRunDefaultTemplate = async (repoName: string): Promise<string> => {\n  let pipelineRunTemplate = getFallbackTemplate(repoName);\n  try {\n    const template = await k8sGetResource<ConfigMapKind>({\n      model: ConfigMapModel,\n      ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n      name: PAC_TEMPLATE_DEFAULT,\n    });\n    if (template?.data?.template) {\n      pipelineRunTemplate = template.data.template;\n    }\n  } catch (e) {\n    console.log('failed to fetch default template:', e); // eslint-disable-line no-console\n  }\n\n  return pipelineRunTemplate;\n};\n\nexport const getPipelineRunTemplate = async (\n  runtime: string,\n  repoName: string,\n): Promise<string> => {\n  let runTimeTemplate;\n  try {\n    const [pipelineRunTemplateCfg] = await k8sListResourceItems<ConfigMapKind>({\n      model: ConfigMapModel,\n      queryParams: {\n        ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n        labelSelector: {\n          matchLabels: {\n            'pipelinesascode.openshift.io/runtime': RepositoryRuntimes[runtime] || runtime,\n          },\n        },\n      },\n    });\n    runTimeTemplate = pipelineRunTemplateCfg?.data?.template;\n  } catch (e) {\n    console.log('failed to fetch runtime template:', e); // eslint-disable-line no-console\n  }\n  const pipelineRunTemplate = runTimeTemplate ?? (await getPipelineRunDefaultTemplate(repoName));\n  return pipelineRunTemplate;\n};\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\n\nconst pathRegex = /^\\/.*$/;\n\nexport const MAX_INT32 = 2147483647;\n\nexport const healthChecksValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    containerName: yup.string(),\n    showForm: yup.boolean(),\n    enabled: yup.boolean(),\n    modified: yup.boolean(),\n    data: yup.object().when('showForm', {\n      is: true,\n      then: yup.object().shape({\n        periodSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Period must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        initialDelaySeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(0, t('devconsole~Initial delay must be greater than or equal to 0.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        failureThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Failure threshold must be greater than or equal to 1.')),\n        timeoutSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Timeout must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        successThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Success threshold must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        requestType: yup.string(),\n        httpGet: yup.object().when('requestType', {\n          is: 'httpGet',\n          then: yup.object({\n            path: yup.string().matches(pathRegex, {\n              message: t('devconsole~Path must start with /.'),\n              excludeEmptyString: true,\n            }),\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        tcpSocket: yup.object().when('requestType', {\n          is: 'tcpSocket',\n          then: yup.object({\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        exec: yup.object().when('requestType', {\n          is: 'command',\n          then: yup.object({\n            command: yup.array().of(yup.string().required(t('devconsole~Required'))),\n          }),\n        }),\n      }),\n    }),\n  });\n\nexport const healthChecksProbesValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    readinessProbe: healthChecksValidationSchema(t),\n    livenessProbe: healthChecksValidationSchema(t),\n    startupProbe: healthChecksValidationSchema(t),\n  });\n","export const PAC_GH_APP_NEW = 'https://github.com/settings/apps/new';\nexport const PAC_GH_APP_DOC =\n  'https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#about-github-apps';\nexport const PAC_GH_APP_MANIFEST_API = 'https://api.github.com/app-manifests';\nexport const EVENT_LISTNER_NAME = 'pipelines-as-code-interceptor';\nexport const PAC_SECRET_NAME = 'pipelines-as-code-secret';\nexport const PAC_GH_APP_NAME = 'pipelines-ci-clustername';\nexport const PAC_INFO = 'pipelines-as-code-info';\nexport const PAC_TEMPLATE_DEFAULT = 'pipelines-as-code-pipelinerun-generic';\n"],"sourceRoot":""}