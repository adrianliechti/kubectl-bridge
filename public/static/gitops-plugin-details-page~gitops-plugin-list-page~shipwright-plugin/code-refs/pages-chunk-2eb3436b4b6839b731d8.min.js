(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{5586:function(e,n,t){"use strict";t.r(n);var i=t(5622);t.d(n,"PipelineModel",(function(){return i.f})),t.d(n,"PipelineModelV1Beta1",(function(){return i.g})),t.d(n,"PipelineRunModel",(function(){return i.i})),t.d(n,"PipelineRunModelV1Beta1",(function(){return i.j})),t.d(n,"TaskModel",(function(){return i.l})),t.d(n,"TaskModelV1Beta1",(function(){return i.m})),t.d(n,"TaskRunModel",(function(){return i.n})),t.d(n,"TaskRunModelV1Beta1",(function(){return i.o})),t.d(n,"CustomRunModelV1Beta1",(function(){return i.d})),t.d(n,"PipelineResourceModel",(function(){return i.h})),t.d(n,"ClusterTaskModel",(function(){return i.a})),t.d(n,"ConditionModel",(function(){return i.c})),t.d(n,"TriggerBindingModel",(function(){return i.s})),t.d(n,"ClusterTriggerBindingModel",(function(){return i.b})),t.d(n,"TriggerTemplateModel",(function(){return i.t})),t.d(n,"EventListenerModel",(function(){return i.e})),t.d(n,"RepositoryModel",(function(){return i.k})),t.d(n,"TektonConfigModel",(function(){return i.p})),t.d(n,"TektonHubModel",(function(){return i.q})),t.d(n,"TektonResultModel",(function(){return i.r}))},5588:function(e,n,t){"use strict";var i,r,o,s,a,l,u,c,d;t.d(n,"r",(function(){return i})),t.d(n,"q",(function(){return r})),t.d(n,"v",(function(){return o})),t.d(n,"t",(function(){return s})),t.d(n,"w",(function(){return a})),t.d(n,"u",(function(){return l})),t.d(n,"o",(function(){return u})),t.d(n,"x",(function(){return c})),t.d(n,"p",(function(){return d})),t.d(n,"i",(function(){return p})),t.d(n,"s",(function(){return b})),t.d(n,"m",(function(){return m})),t.d(n,"l",(function(){return g})),t.d(n,"k",(function(){return h})),t.d(n,"a",(function(){return v})),t.d(n,"b",(function(){return f})),t.d(n,"c",(function(){return k})),t.d(n,"z",(function(){return T})),t.d(n,"y",(function(){return R})),t.d(n,"j",(function(){return y})),t.d(n,"g",(function(){return P})),t.d(n,"h",(function(){return w})),t.d(n,"n",(function(){return E})),t.d(n,"f",(function(){return q})),t.d(n,"d",(function(){return j})),t.d(n,"e",(function(){return I})),function(e){e.triggers="triggers.tekton.dev/eventlistener"}(i||(i={})),function(e){e.user="pipeline.openshift.io/started-by"}(r||(r={})),function(e){e.minVersion=" tekton.dev/pipelines.minVersion",e.tags="tekton.dev/tags",e.categories="tekton.dev/categories",e.installedFrom="openshift.io/installed-from",e.semVersion="openshift.io/sem-version"}(o||(o={})),function(e){e.redhat="Red Hat",e.community="Community",e.tektonHub="TektonHub",e.artifactHub="ArtifactHub"}(s||(s={})),function(e){e.providerType="operator.tekton.dev/provider-type",e.version="app.kubernetes.io/version"}(a||(a={})),function(e){e.pipeline="tekton.dev/pipeline",e.pipelinerun="tekton.dev/pipelineRun",e.taskrun="tekton.dev/taskRun",e.pipelineTask="tekton.dev/pipelineTask"}(l||(l={})),function(e){e.git="git",e.image="image",e.cluster="cluster",e.storage="storage"}(u||(u={})),function(e){e.NoWorkspace="noWorkspace",e.EmptyDirectory="emptyDirectory",e.ConfigMap="configMap",e.Secret="secret",e.PVC="pvc",e.VolumeClaimTemplate="volumeClaimTemplate"}(c||(c={})),function(e){e.Git="git",e.Image="docker"}(d||(d={}));d.Git,d.Image;const p="1.4.0",b="1.6.0",m="1.5.2",g="pipeline",h="bridge/pipeline-run-auto-start-failed",v=275,f=375,k=60,T="pipeline.openshift.io/preferredName",R="chains.tekton.dev/signed",y="openshift-pipelines",P="openshift",w="config";var E;!function(e){e.PIPELINE_TASK_LEVEL="pipeline/task",e.PIPELINERUN_TASKRUN_LEVEL="pipelinerun/taskrun",e.UNSUPPORTED_LEVEL="unsupported",e.UNSIMPLIFIED_METRICS_LEVEL="unsimplified"}(E||(E={}));const q="FLAG_TEKTON_V1_ENABLED",j="PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER",I="PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER"},5620:function(e,n,t){"use strict";var i;t.d(n,"a",(function(){return i})),function(e){e.PAC="pac",e.PIPELINE="pipeline"}(i||(i={}))},5621:function(e,n,t){"use strict";t.d(n,"f",(function(){return b})),t.d(n,"l",(function(){return m})),t.d(n,"a",(function(){return g})),t.d(n,"c",(function(){return h})),t.d(n,"m",(function(){return v})),t.d(n,"o",(function(){return f})),t.d(n,"n",(function(){return k})),t.d(n,"k",(function(){return T})),t.d(n,"h",(function(){return R})),t.d(n,"g",(function(){return y})),t.d(n,"e",(function(){return P})),t.d(n,"d",(function(){return w})),t.d(n,"b",(function(){return E})),t.d(n,"j",(function(){return q})),t.d(n,"i",(function(){return j}));var i=t(4413),r=t(689),o=t(5),s=t(5620),a=t(2221),l=t(5624),u=t(5599),c=t(5651);const d=/^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/,p=/^\/.*$/,b=/^((((ssh|git|https?:?):\/\/:?)(([^\s@]+@|[^@]:?)[-\w.]+(:\d\d+:?)?(\/[-\w.~/?[\]!$&'()*+,;=:@%]*:?)?:?))|([^\s@]+@[-\w.]+:[-\w.~/?[\]!$&'()*+,;=:@%]*?:?))$/,m=r.object().shape({name:r.string().matches(/^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/,"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.").required("Required")}),g=r.object().shape({selectedKey:r.string(),name:r.string().max(63,"Cannot be longer than 63 characters.").when("selectedKey",{is:a.b,then:r.string().required("Required")})}),h=e=>r.object().shape({replicas:r.number().transform(e=>i.a(e)?void 0:e).test(Object(l.b)(e("devconsole~Replicas must be an integer."))).min(0,e("devconsole~Replicas must be greater than or equal to 0.")).max(Number.MAX_SAFE_INTEGER,e("devconsole~Replicas must be lesser than or equal to {{maxSafeInteger}}.",{maxSafeInteger:Number.MAX_SAFE_INTEGER})).test({name:"isEmpty",test:e=>void 0!==e,message:e("devconsole~This field cannot be empty.")})}),v=r.string().oneOf([u.k.OpenShift,u.k.Kubernetes,u.k.KnativeService]).required(),f=e=>r.object().when("resources",{is:u.k.KnativeService,then:r.object().shape({scaling:r.object({minpods:r.number().transform(e=>i.a(e)?void 0:e).test(Object(l.b)(e("devconsole~Min Pods must be an integer."))).min(0,e("devconsole~Min Pods must be greater than or equal to 0.")).max(Number.MAX_SAFE_INTEGER,e("devconsole~Min Pods must be lesser than or equal to {{maxSafeInteger}}.",{maxSafeInteger:Number.MAX_SAFE_INTEGER})),maxpods:r.number().transform(e=>i.a(e)?void 0:e).test(Object(l.b)(e("devconsole~Max Pods must be an integer."))).min(1,e("devconsole~Max Pods must be greater than or equal to 1.")).max(Number.MAX_SAFE_INTEGER,e("devconsole~Max Pods must be lesser than or equal to {{maxSafeInteger}}.",{maxSafeInteger:Number.MAX_SAFE_INTEGER})).test({test(e){const{minpods:n}=this.parent;return!e||e>=n},message:e("devconsole~Max Pods must be greater than or equal to Min Pods.")}),concurrencytarget:r.number().transform(e=>i.a(e)?void 0:e).test(Object(l.b)(e("devconsole~Concurrency target must be an integer."))).min(0,e("devconsole~Concurrency target must be greater than or equal to 0.")).max(Number.MAX_SAFE_INTEGER,e("devconsole~Concurrency target must be lesser than or equal to {{maxSafeInteger}}.",{maxSafeInteger:Number.MAX_SAFE_INTEGER})),concurrencylimit:r.number().transform(e=>i.a(e)?void 0:e).test(Object(l.b)(e("devconsole~Concurrency limit must be an integer."))).min(0,e("devconsole~Concurrency limit must be greater than or equal to 0.")).max(Number.MAX_SAFE_INTEGER,e("devconsole~Concurrency limit must be lesser than or equal to {{maxSafeInteger}}.",{maxSafeInteger:Number.MAX_SAFE_INTEGER})),concurrencyutilization:r.number().transform(e=>i.a(e)?void 0:e).min(0,e("devconsole~Concurrency utilization must be between 0 and 100.")).max(100,e("devconsole~Concurrency utilization must be between 0 and 100.")),autoscale:r.object().shape({autoscalewindow:r.number().transform(e=>i.a(e)?void 0:e).test({test(e){if(e){const{autoscalewindowUnit:n}=this.parent,t=((e,n)=>{switch(n){case"m":return 60*e;case"h":return 3600*e;default:return e}})(e,n);return t>=6&&t<=3600}return!0},message:e("devconsole~Autoscale window must be between 6s and 1h.")})})}),domainMapping:r.array().of(r.string().transform(c.f).matches(d,{message:e("devconsole~Domain name must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number."),excludeEmptyString:!0}).test("domainname-has-segements",e("devconsole~Domain name must consist of at least two segments separated by dots."),(function(e){return e.split(".").length>=2})))})}),k=e=>r.object().shape({secure:r.boolean(),tls:r.object().when("secure",{is:!0,then:r.object({termination:r.string().required(e("devconsole~Please select a termination type."))})}),hostname:r.string().matches(d,{message:e("devconsole~Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number."),excludeEmptyString:!0}).max(253,e("devconsole~Cannot be longer than 253 characters.")),path:r.string().matches(p,{message:e("devconsole~Path must start with /."),excludeEmptyString:!0}),unknownTargetPort:r.number().typeError(e("devconsole~Port must be an integer.")).integer(e("devconsole~Port must be an integer.")).min(1,e("devconsole~Port must be between 1 and 65535.")).max(65535,e("devconsole~Port must be between 1 and 65535."))}),T=e=>r.object().shape({cpu:r.object().shape({request:r.number().transform(e=>i.a(e)?void 0:e).min(0,e("devconsole~Request must be greater than or equal to 0.")).test({test(e){const{requestUnit:n,limit:t,limitUnit:i}=this.parent;return void 0===t||Object(o.Ib)(`${e}${n}`)<=Object(o.Ib)(`${t}${i}`)},message:e("devconsole~CPU request must be less than or equal to limit.")}),requestUnit:r.string(e("devconsole~Unit must be millicores or cores.")).ensure(),limitUnit:r.string(e("devconsole~Unit must be millicores or cores.")).ensure(),limit:r.number().transform(e=>i.a(e)?void 0:e).min(0,e("devconsole~Limit must be greater than or equal to 0.")).test({test(e){const{request:n,requestUnit:t,limitUnit:i}=this.parent;return void 0===e||Object(o.Ib)(`${e}${i}`)>=Object(o.Ib)(`${n}${t}`)},message:e("devconsole~CPU limit must be greater than or equal to request.")})}),memory:r.object().shape({request:r.number().transform(e=>i.a(e)?void 0:e).min(0,e("devconsole~Request must be greater than or equal to 0.")).test({test(e){const{requestUnit:n,limit:t,limitUnit:i}=this.parent;return void 0===t||Object(o.Ib)(`${e}${n}`)<=Object(o.Ib)(`${t}${i}`)},message:e("devconsole~Memory request must be less than or equal to limit.")}),requestUnit:r.string(e("devconsole~Unit must be Mi or Gi.")),limit:r.number().transform(e=>i.a(e)?void 0:e).min(0,e("devconsole~Limit must be greater than or equal to 0.")).test({test(e){const{request:n,requestUnit:t,limitUnit:i}=this.parent;return void 0===e||Object(o.Ib)(`${n}${t}`)<=Object(o.Ib)(`${e}${i}`)},message:e("devconsole~Memory limit must be greater than or equal to request.")}),limitUnit:r.string(e("devconsole~Unit must be Mi or Gi."))})}),R=e=>r.object().when("build",{is:e=>"Source"===e.strategy,then:r.object().shape({selected:r.string().required(e("devconsole~Required")),tag:r.string().required(e("devconsole~Required"))})}),y=e=>r.object().shape({url:r.string().max(2e3,e("devconsole~Please enter a URL that is less then 2000 characters.")).matches(b,e("devconsole~Invalid Git URL.")).required(e("devconsole~Required")),type:r.string().when("showGitType",{is:!0,then:r.string().required(e("devconsole~We failed to detect the Git type. Please choose a Git type."))}),showGitType:r.boolean()}),P=e=>r.object().when("build",{is:e=>"Docker"===e.strategy,then:r.object().shape({containerPort:r.number().test(Object(l.b)(e("devconsole~Container port should be an integer"))),dockerfilePath:r.string().required(e("devconsole~Required"))})}),w=e=>r.object().when("build",{is:e=>"Devfile"===e.strategy,then:r.object().shape({devfilePath:r.string().required(e("devconsole~Required")),devfileContent:r.string().min(1,e("devconsole~Required")).required(e("devconsole~Required")),devfileHasError:r.boolean().oneOf([!1]),devfileSuggestedResources:r.object().required(e("devconsole~Required"))})}),E=r.object().shape({strategy:r.string()}),q=e=>r.object().shape({name:r.string().required(e("devconsole~Required")),image:r.object().required(e("devconsole~Required")),tag:r.string(),status:r.string().required(e("devconsole~Required"))}),j=r.object().when(["enabled","build.option","type"],{is:(e,n,t)=>(e||n===u.a.PIPELINES)&&t!==s.a.PAC,then:r.object().shape({templateSelected:r.string().required()})})},5622:function(e,n,t){"use strict";t.d(n,"f",(function(){return o})),t.d(n,"g",(function(){return s})),t.d(n,"i",(function(){return a})),t.d(n,"j",(function(){return l})),t.d(n,"l",(function(){return u})),t.d(n,"m",(function(){return c})),t.d(n,"n",(function(){return d})),t.d(n,"o",(function(){return p})),t.d(n,"d",(function(){return b})),t.d(n,"h",(function(){return m})),t.d(n,"a",(function(){return g})),t.d(n,"c",(function(){return h})),t.d(n,"s",(function(){return v})),t.d(n,"b",(function(){return f})),t.d(n,"t",(function(){return k})),t.d(n,"e",(function(){return T})),t.d(n,"k",(function(){return R})),t.d(n,"p",(function(){return y})),t.d(n,"q",(function(){return P})),t.d(n,"r",(function(){return w}));var i=t(5654);const r=i.chart_color_green_400.value,o={apiGroup:"tekton.dev",apiVersion:"v1",label:"Pipeline",labelKey:"pipelines-plugin~Pipeline",labelPluralKey:"pipelines-plugin~Pipelines",plural:"pipelines",abbr:"PL",namespaced:!0,kind:"Pipeline",id:"pipeline",labelPlural:"Pipelines",crd:!0,color:r},s={apiGroup:"tekton.dev",apiVersion:"v1beta1",label:"Pipeline",labelKey:"pipelines-plugin~Pipeline",labelPluralKey:"pipelines-plugin~Pipelines",plural:"pipelines",abbr:"PL",namespaced:!0,kind:"Pipeline",id:"pipeline",labelPlural:"Pipelines",crd:!0,color:r},a={apiGroup:"tekton.dev",apiVersion:"v1",label:"PipelineRun",labelKey:"pipelines-plugin~PipelineRun",labelPluralKey:"pipelines-plugin~PipelineRuns",plural:"pipelineruns",abbr:"PLR",namespaced:!0,kind:"PipelineRun",id:"pipelinerun",labelPlural:"PipelineRuns",crd:!0,color:r},l={apiGroup:"tekton.dev",apiVersion:"v1beta1",label:"PipelineRun",labelKey:"pipelines-plugin~PipelineRun",labelPluralKey:"pipelines-plugin~PipelineRuns",plural:"pipelineruns",abbr:"PLR",namespaced:!0,kind:"PipelineRun",id:"pipelinerun",labelPlural:"PipelineRuns",crd:!0,color:r},u={apiGroup:"tekton.dev",apiVersion:"v1",label:"Task",labelKey:"pipelines-plugin~Task",labelPluralKey:"pipelines-plugin~Tasks",plural:"tasks",abbr:"T",namespaced:!0,kind:"Task",id:"task",labelPlural:"Tasks",crd:!0,color:r},c={apiGroup:"tekton.dev",apiVersion:"v1beta1",label:"Task",labelKey:"pipelines-plugin~Task",labelPluralKey:"pipelines-plugin~Tasks",plural:"tasks",abbr:"T",namespaced:!0,kind:"Task",id:"task",labelPlural:"Tasks",crd:!0,color:r},d={apiGroup:"tekton.dev",apiVersion:"v1",label:"TaskRun",labelKey:"pipelines-plugin~TaskRun",labelPluralKey:"pipelines-plugin~TaskRuns",plural:"taskruns",abbr:"TR",namespaced:!0,kind:"TaskRun",id:"taskrun",labelPlural:"TaskRuns",crd:!0,color:r},p={apiGroup:"tekton.dev",apiVersion:"v1beta1",label:"TaskRun",labelKey:"pipelines-plugin~TaskRun",labelPluralKey:"pipelines-plugin~TaskRuns",plural:"taskruns",abbr:"TR",namespaced:!0,kind:"TaskRun",id:"taskrun",labelPlural:"TaskRuns",crd:!0,color:r},b={apiGroup:"tekton.dev",apiVersion:"v1beta1",label:"CustomRun",labelKey:"pipelines-plugin~CustomRun",labelPluralKey:"pipelines-plugin~CustomRuns",plural:"customruns",abbr:"CR",namespaced:!0,kind:"CustomRun",id:"customrun",labelPlural:"CustomRuns",crd:!0,color:r},m={apiGroup:"tekton.dev",apiVersion:"v1alpha1",label:"PipelineResource",labelKey:"pipelines-plugin~PipelineResource",labelPluralKey:"pipelines-plugin~PipelineResources",plural:"pipelineresources",abbr:"PR",namespaced:!0,kind:"PipelineResource",id:"pipelineresource",labelPlural:"PipelineResources",crd:!0,color:r},g={apiGroup:"tekton.dev",apiVersion:"v1beta1",label:"ClusterTask",labelKey:"pipelines-plugin~ClusterTask",labelPluralKey:"pipelines-plugin~ClusterTasks",plural:"clustertasks",abbr:"CT",namespaced:!1,kind:"ClusterTask",id:"clustertask",labelPlural:"ClusterTasks",crd:!0,color:r},h={apiGroup:"tekton.dev",apiVersion:"v1alpha1",label:"Condition",labelKey:"pipelines-plugin~Condition",labelPluralKey:"pipelines-plugin~Conditions",plural:"conditions",abbr:"C",namespaced:!0,kind:"Condition",id:"condition",labelPlural:"Conditions",crd:!0,color:r},v={apiGroup:"triggers.tekton.dev",apiVersion:"v1beta1",label:"TriggerBinding",labelKey:"pipelines-plugin~TriggerBinding",labelPluralKey:"pipelines-plugin~TriggerBindings",plural:"triggerbindings",abbr:"TB",namespaced:!0,kind:"TriggerBinding",id:"triggerbinding",labelPlural:"TriggerBindings",crd:!0,color:r},f={apiGroup:"triggers.tekton.dev",apiVersion:"v1beta1",label:"ClusterTriggerBinding",labelKey:"pipelines-plugin~ClusterTriggerBinding",labelPluralKey:"pipelines-plugin~ClusterTriggerBindings",plural:"clustertriggerbindings",abbr:"CTB",namespaced:!1,kind:"ClusterTriggerBinding",id:"clustertriggerbinding",labelPlural:"ClusterTriggerBindings",crd:!0,color:r},k={apiGroup:"triggers.tekton.dev",apiVersion:"v1beta1",label:"TriggerTemplate",labelKey:"pipelines-plugin~TriggerTemplate",labelPluralKey:"pipelines-plugin~TriggerTemplates",plural:"triggertemplates",abbr:"TT",namespaced:!0,kind:"TriggerTemplate",id:"triggertemplate",labelPlural:"TriggerTemplates",crd:!0,color:r},T={apiGroup:"triggers.tekton.dev",apiVersion:"v1beta1",label:"EventListener",labelKey:"pipelines-plugin~EventListener",labelPluralKey:"pipelines-plugin~EventListeners",plural:"eventlisteners",abbr:"EL",namespaced:!0,kind:"EventListener",id:"eventlistener",labelPlural:"EventListeners",crd:!0,color:r},R={apiGroup:"pipelinesascode.tekton.dev",apiVersion:"v1alpha1",label:"Repository",labelKey:"pipelines-plugin~Repository",labelPluralKey:"pipelines-plugin~Repositories",plural:"repositories",abbr:"R",namespaced:!0,kind:"Repository",id:"repository",labelPlural:"Repositories",crd:!0,color:r},y={apiGroup:"operator.tekton.dev",apiVersion:"v1alpha1",label:"TektonConfig",labelKey:"pipelines-plugin~TektonConfig",labelPluralKey:"pipelines-plugin~TektonConfigs",plural:"tektonconfigs",abbr:"TC",namespaced:!1,kind:"TektonConfig",id:"tektonconfig",labelPlural:"TektonConfigs",crd:!0},P={apiGroup:"operator.tekton.dev",apiVersion:"v1alpha1",label:"TektonHub",labelKey:"pipelines-plugin~TektonHub",labelPluralKey:"pipelines-plugin~TektonHubs",plural:"tektonhubs",abbr:"TH",namespaced:!1,kind:"TektonHub",id:"tektonhub",labelPlural:"TektonHubs",crd:!0},w={apiGroup:"operator.tekton.dev",apiVersion:"v1alpha1",label:"TektonResult",labelKey:"pipelines-plugin~TektonResult",labelPluralKey:"pipelines-plugin~TektonResults",plural:"tektonresults",abbr:"TR",namespaced:!1,kind:"TektonResult",id:"tektonresult",labelPlural:"TektonResults",crd:!0}},5624:function(e,n,t){"use strict";t.d(n,"b",(function(){return i})),t.d(n,"a",(function(){return r}));const i=e=>({test:e=>null==e||Number.isInteger(e),message:e}),r=/^[a-z]([a-z0-9_]-?)*[a-z0-9]$/},5648:function(e,n,t){"use strict";t.d(n,"e",(function(){return i})),t.d(n,"c",(function(){return r})),t.d(n,"g",(function(){return o})),t.d(n,"f",(function(){return a})),t.d(n,"d",(function(){return l})),t.d(n,"b",(function(){return u})),t.d(n,"i",(function(){return c})),t.d(n,"a",(function(){return d})),t.d(n,"h",(function(){return p})),t.d(n,"j",(function(){return b}));var i,r,o,s=t(5591);!function(e){e.REPOSITORY="Repository",e.URL_REPO="RepoUrl",e.URL_ORG="RepoOrg",e.SHA="sha",e.EVENT_TYPE="EventType"}(i||(i={})),function(e){e.SHA_MESSAGE="sha_message",e.SHA_URL="sha_url",e.REPO_URL="repo_url",e.BRANCH="Branch"}(r||(r={})),function(e){e.golang="go",e.nodejs="nodejs",e.python="python",e.java="java"}(o||(o={}));const a={[i.REPOSITORY]:"pipelinesascode.tekton.dev/repository",[i.URL_REPO]:"pipelinesascode.tekton.dev/url-repository",[i.URL_ORG]:"pipelinesascode.tekton.dev/url-org",[i.SHA]:"pipelinesascode.tekton.dev/sha",[i.EVENT_TYPE]:"pipelinesascode.tekton.dev/event-type"},l={[r.SHA_MESSAGE]:"pipelinesascode.tekton.dev/sha-title",[r.SHA_URL]:"pipelinesascode.tekton.dev/sha-url",[r.REPO_URL]:"pipelinesascode.tekton.dev/repo-url",[r.BRANCH]:"pipelinesascode.tekton.dev/branch"};var u;!function(e){e.GITHUB="github",e.WEBHOOK="webhook"}(u||(u={}));const c={gitUrl:"",githubAppAvailable:!1,gitProvider:s.b.INVALID,name:"",method:"github",showOverviewPage:!1,yamlData:"",webhook:{token:"",method:"token",secret:"",url:"",user:"",autoAttach:!1}},d={[s.b.GITHUB]:"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token",[s.b.GITLAB]:"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html",[s.b.BITBUCKET]:"https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/"},p={[s.b.GITHUB]:"https://docs.github.com/en/developers/webhooks-and-events/webhooks/creating-webhooks",[s.b.GITLAB]:"https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#configure-a-webhook-in-gitlab",[s.b.BITBUCKET]:"https://support.atlassian.com/bitbucket-cloud/docs/manage-webhooks/"},b=["github.com","bitbucket.org","gitlab.com"]},5649:function(e,n,t){"use strict";t.d(n,"d",(function(){return c})),t.d(n,"c",(function(){return p})),t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var i=t(2338),r=t(689),o=t(5591),s=t(5653),a=t(15),l=t(5655),u=t(5621);const c=e=>r.object().shape({name:Object(a.Zd)(e),project:u.l,application:u.a,image:Object(u.h)(e),git:Object(u.g)(e),docker:Object(u.e)(e),devfile:Object(u.d)(e),deployment:Object(u.c)(e),serverless:Object(u.o)(e),route:Object(u.n)(e),limits:Object(u.k)(e),build:u.b,resources:u.m,healthChecks:Object(l.a)(e),pac:Object(s.e)(e),pipeline:u.i}),d=(e,n)=>e.startsWith(`https://${n}/`)||e.startsWith(`https://www.${n}/`)||e.includes(`@${n}:`),p=e=>u.f.test(e)?d(e,"github.com")?o.b.GITHUB:d(e,"bitbucket.org")?o.b.BITBUCKET:d(e,"gitlab.com")?o.b.GITLAB:d(e,"gitea.com")||e.includes("gitea")?o.b.GITEA:o.b.UNSURE:o.b.INVALID,b=e=>{if(a.Yd.test(e))return e;const n=i.a(e);return e.match(/^\d/)||n.match(/^\d/)?"ocp-"+n:n},m=e=>{if(!u.f.test(e))return;const n=e.replace(/\/$/,"").split("/").pop();return b(n)}},5651:function(e,n,t){"use strict";t.d(n,"b",(function(){return o})),t.d(n,"f",(function(){return a})),t.d(n,"c",(function(){return l})),t.d(n,"e",(function(){return u})),t.d(n,"d",(function(){return c})),t.d(n,"a",(function(){return d}));var i=t(8),r=t(1402);const o=e=>{const[n,t]=null==e?void 0:e.match(/^[0-9]+|[a-zA-Z]*/g);return{autoscalewindow:Number(n)||"",autoscalewindowUnit:t||"s",defaultAutoscalewindowUnit:t||"s"}},s=/ *\([^)]*\) */g,a=e=>e.replace(s,""),l=(e,n)=>{var t;if(!(null===(t=e.spec)||void 0===t?void 0:t.ref))return null;const{apiVersion:o,kind:s,name:a}=e.spec.ref;return Object(i.n)(r.l)===o&&s===r.l.kind&&a!==n?a:null},u=(e,n)=>[...new Set(null==e?void 0:e.filter(e=>!((null==n?void 0:n.length)>0)||(null==n?void 0:n.includes(a(e)))).map(e=>a(e)))],c=e=>e.some(e=>new RegExp(s).test(e)),d=(e,n=[],t)=>e.filter(e=>c([e])).map(e=>{var i,r;const o=null==n?void 0:n.find(n=>n.metadata.name===a(e));return o&&(null===(r=null===(i=o.spec)||void 0===i?void 0:i.ref)||void 0===r?void 0:r.name)!==t?o:null}).filter(e=>!!e)},5653:function(e,n,t){"use strict";t.d(n,"g",(function(){return R})),t.d(n,"e",(function(){return P})),t.d(n,"c",(function(){return E})),t.d(n,"b",(function(){return q})),t.d(n,"a",(function(){return j})),t.d(n,"f",(function(){return I})),t.d(n,"d",(function(){return C}));var i=t(5596),r=t(320),o=t(2338),s=t(689),a=t(5621),l=t(5624),u=t(77),c=t(5591),d=t(4359),p=t(10),b=t(15),m=t(5586),g=t(5620),h=t(5656),v=t(5588),f=t(5648),k=function(e,n,t,i){return new(t||(t=Promise))((function(r,o){function s(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,a)}l((i=i.apply(e,n||[])).next())}))};const T={dryRun:"All"},R=e=>s.object().shape({name:s.string().matches(b.Yd,{message:e("pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number."),excludeEmptyString:!0}).required(e("pipelines-plugin~Required")),gitUrl:s.string().matches(a.f,e("pipelines-plugin~Invalid Git URL.")).required(e("pipelines-plugin~Required")),accessToken:s.string(),webhook:s.object().when("gitProvider",{is:c.b.BITBUCKET,then:s.object().shape({user:s.string().matches(l.a,{message:e("pipelines-plugin~Name must consist of lower-case letters, numbers, underscores and hyphens. It must start with a letter and end with a letter or number."),excludeEmptyString:!0}).required(e("pipelines-plugin~Required"))})}).when(["method","gitProvider","gitUrl"],{is:(e,n,t)=>t&&!(n===c.b.GITHUB&&e===c.b.GITHUB),then:s.object().shape({token:s.string().test("oneOfRequired","Required",(function(){return this.parent.token||this.parent.secretRef})),secretRef:s.string().test("oneOfRequired","Required",(function(){return this.parent.token||this.parent.secretRef}))})})}),y=e=>s.object().shape({webhook:s.object().when("gitProvider",{is:c.b.BITBUCKET,then:s.object().shape({user:s.string().matches(b.Yd,{message:e("pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number."),excludeEmptyString:!0}).required(e("pipelines-plugin~Required"))})}).when(["method","gitProvider","gitUrl"],{is:(e,n,t)=>t&&n&&!(n===c.b.GITHUB&&e===c.b.GITHUB),then:s.object().shape({token:s.string().test("oneOfRequired","Required",(function(){return this.parent.token||this.parent.secretRef})),secretRef:s.string().test("oneOfRequired","Required",(function(){return this.parent.token||this.parent.secretRef}))})})}),P=e=>s.object().shape({repository:s.object().when(["pipelineType","pipelineEnabled"],{is:(e,n)=>e===g.a.PAC&&n,then:y(e)})}),w=(e,n)=>e.startsWith(`https://${n}/`)||e.startsWith(`https://www.${n}/`)||e.includes(`@${n}:`),E=e=>a.f.test(e)?w(e,"github.com")?c.b.GITHUB:w(e,"bitbucket.org")?c.b.BITBUCKET:w(e,"gitlab.com")?c.b.GITLAB:c.b.UNSURE:c.b.INVALID,q=(e,n,t={},o)=>k(void 0,void 0,void 0,(function*(){var s,a,l;const{name:b,gitUrl:g,webhook:{secretObj:h,method:v,token:R,secret:y,user:P}}=e,w=r.Base64.encode(y),q=E(g);let j;R&&"token"===v?j=yield((e,n,t,i,o,s,a)=>k(void 0,void 0,void 0,(function*(){const l={apiVersion:p.SecretModel.apiVersion,kind:p.SecretModel.kind,metadata:{generateName:e+"-token-",namespace:i},type:d.SecretType.opaque,stringData:Object.assign(Object.assign({"provider.token":t},s&&{"webhook.secret":s}),o===c.b.BITBUCKET&&{"webhook.auth":r.Base64.encode(`${n}:${t}`)})};return Object(u.g)({model:p.SecretModel,data:l,ns:i,queryParams:a?T:{}})})))(b,P,R,n,q,y,o):"secret"===v&&h&&(null===(s=null==h?void 0:h.data)||void 0===s?void 0:s["webhook.secret"])!==w&&(yield Object(u.p)({model:p.SecretModel,resource:h,data:[{op:"replace",path:"/data/webhook.secret",value:r.Base64.encode(y)}]}));const I=i(g).source,C=j||h,_={kind:m.RepositoryModel.kind,apiVersion:"pipelinesascode.tekton.dev/v1alpha1",metadata:Object.assign({name:b,namespace:n},t||{}),spec:Object.assign({url:g},C||"github.com"!==I?{git_provider:Object.assign(Object.assign(Object.assign({},f.j.includes(I)?{}:{url:I}),"bitbucket.org"===I?{user:P}:{}),C?{secret:{name:null===(a=null==C?void 0:C.metadata)||void 0===a?void 0:a.name,key:"provider.token"},webhook_secret:{name:null===(l=null==C?void 0:C.metadata)||void 0===l?void 0:l.name,key:"webhook.secret"}}:{})}:{})};return yield Object(u.g)({model:m.RepositoryModel,data:_,ns:n,queryParams:o?T:{}})})),j=(e,n,t)=>k(void 0,void 0,void 0,(function*(){var i,o,s;const{gitUrl:a,webhook:{method:l,token:u,secret:d,url:p,secretObj:b,user:m}}=e,g=E(a),h=Object(c.e)(a,g);let v,f=!0;t&&"false"===(null===(i=null==n?void 0:n.data)||void 0===i?void 0:i["webhook-ssl-verification"])&&(f=!1),v=g===c.b.BITBUCKET?"token"===l?r.Base64.encode(`${m}:${u}`):r.Base64.decode(null===(o=null==b?void 0:b.data)||void 0===o?void 0:o["webhook.auth"]):"token"===l?u:r.Base64.decode(null===(s=null==b?void 0:b.data)||void 0===s?void 0:s["provider.token"]);return yield h.createRepoWebhook(v,p,f,d)})),I=e=>{if(!a.f.test(e))return;const n=e.replace(/\/$/,"").split("/").pop();return t=n,b.Yd.test(t)?"git-"+t:"git-"+o.a(t);var t},C=(e,n)=>k(void 0,void 0,void 0,(function*(){var t;let i;try{const[n]=yield Object(u.n)({model:p.ConfigMapModel,queryParams:{ns:v.g,labelSelector:{matchLabels:{"pipelinesascode.openshift.io/runtime":f.g[e]||e}}}});i=null===(t=null==n?void 0:n.data)||void 0===t?void 0:t.template}catch(e){console.log("failed to fetch runtime template:",e)}return null!=i?i:yield(e=>k(void 0,void 0,void 0,(function*(){var n;let t=(e=>`apiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: ${null!=e?e:"pull_request"}\n  annotations:\n    # The event we are targeting as seen from the webhook payload\n    # this can be an array too, i.e: [pull_request, push]\n    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"\n\n    # The branch or tag we are targeting (ie: main, refs/tags/*)\n    pipelinesascode.tekton.dev/on-target-branch: "main"\n\n    # Fetch the git-clone task from hub, we are able to reference later on it\n    # with taskRef and it will automatically be embedded into our pipeline.\n    pipelinesascode.tekton.dev/task: "git-clone"\n\n    # You can add more tasks in here to reuse, browse the one you like from here\n    # https://hub.tekton.dev/\n    # example:\n    # pipelinesascode.tekton.dev/task-2: "[maven, buildah]"\n\n    # How many runs we want to keep attached to this event\n    pipelinesascode.tekton.dev/max-keep-runs: "5"\nspec:\n  params:\n    # The variable with brackets are special to Pipelines as Code\n    # They will automatically be expanded with the events from Github.\n    - name: repo_url\n      value: "{{ repo_url }}"\n    - name: revision\n      value: "{{ revision }}"\n  pipelineSpec:\n    params:\n      - name: repo_url\n      - name: revision\n    workspaces:\n      - name: source\n      - name: basic-auth\n    tasks:\n      - name: fetch-repository\n        taskRef:\n          name: git-clone\n        workspaces:\n          - name: output\n            workspace: source\n          - name: basic-auth\n            workspace: basic-auth\n        params:\n          - name: url\n            value: $(params.repo_url)\n          - name: revision\n            value: $(params.revision)\n\n      # Customize this task if you like, or just do a taskRef\n      # to one of the hub task.\n      - name: noop-task\n        runAfter:\n          - fetch-repository\n        workspaces:\n          - name: source\n            workspace: source\n        taskSpec:\n          workspaces:\n            - name: source\n          steps:\n            - name: noop-task\n              image: registry.access.redhat.com/ubi9/ubi-micro\n              workingDir: $(workspaces.source.path)\n              script: |\n                exit 0\n  workspaces:\n  - name: source\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n  # This workspace will inject secret to help the git-clone task to be able to\n  # checkout the private repositories\n  - name: basic-auth\n    secret:\n      secretName: "{{ git_auth_secret }}"`)(e);try{const e=yield Object(u.j)({model:p.ConfigMapModel,ns:v.g,name:h.h});(null===(n=null==e?void 0:e.data)||void 0===n?void 0:n.template)&&(t=e.data.template)}catch(e){console.log("failed to fetch default template:",e)}return t})))(n)}))},5655:function(e,n,t){"use strict";t.d(n,"a",(function(){return s}));var i=t(689);const r=/^\/.*$/,o=e=>i.object().shape({containerName:i.string(),showForm:i.boolean(),enabled:i.boolean(),modified:i.boolean(),data:i.object().when("showForm",{is:!0,then:i.object().shape({periodSeconds:i.number().integer(e("devconsole~Value must be an integer.")).min(1,e("devconsole~Period must be greater than or equal to 1.")).max(2147483647,e("devconsole~Value is larger than maximum value allowed.")),initialDelaySeconds:i.number().integer(e("devconsole~Value must be an integer.")).min(0,e("devconsole~Initial delay must be greater than or equal to 0.")).max(2147483647,e("devconsole~Value is larger than maximum value allowed.")),failureThreshold:i.number().integer(e("devconsole~Value must be an integer.")).min(1,e("devconsole~Failure threshold must be greater than or equal to 1.")),timeoutSeconds:i.number().integer(e("devconsole~Value must be an integer.")).min(1,e("devconsole~Timeout must be greater than or equal to 1.")).max(2147483647,e("devconsole~Value is larger than maximum value allowed.")),successThreshold:i.number().integer(e("devconsole~Value must be an integer.")).min(1,e("devconsole~Success threshold must be greater than or equal to 1.")).max(2147483647,e("devconsole~Value is larger than maximum value allowed.")),requestType:i.string(),httpGet:i.object().when("requestType",{is:"httpGet",then:i.object({path:i.string().matches(r,{message:e("devconsole~Path must start with /."),excludeEmptyString:!0}),port:i.number().required(e("devconsole~Required"))})}),tcpSocket:i.object().when("requestType",{is:"tcpSocket",then:i.object({port:i.number().required(e("devconsole~Required"))})}),exec:i.object().when("requestType",{is:"command",then:i.object({command:i.array().of(i.string().required(e("devconsole~Required")))})})})})}),s=e=>i.object().shape({readinessProbe:o(e),livenessProbe:o(e),startupProbe:o(e)})},5656:function(e,n,t){"use strict";t.d(n,"e",(function(){return i})),t.d(n,"b",(function(){return r})),t.d(n,"c",(function(){return o})),t.d(n,"a",(function(){return s})),t.d(n,"g",(function(){return a})),t.d(n,"d",(function(){return l})),t.d(n,"f",(function(){return u})),t.d(n,"h",(function(){return c}));const i="https://github.com/settings/apps/new",r="https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#about-github-apps",o="https://api.github.com/app-manifests",s="pipelines-as-code-interceptor",a="pipelines-as-code-secret",l="pipelines-ci-clustername",u="pipelines-as-code-info",c="pipelines-as-code-pipelinerun-generic"}}]);
//# sourceMappingURL=pages-chunk-2eb3436b4b6839b731d8.min.js.map