{"version":3,"sources":["webpack:///./public/components/modals/configure-machine-autoscaler-modal.tsx"],"names":["ConfigureMachineAutoscalerModal","props","navigate","minReplicas","setMinReplicas","maxReplicas","setMaxReplicas","machineSet","metadata","name","inProgress","errorMessage","cancel","t","onSubmit","event","preventDefault","close","promise","apiVersion","kind","namespace","machineAutoscaler","spec","scaleTargetRef","createAutoscaler","handlePromise","obj","className","ns","value","onChange","target","changeValueBy","operation","autoFocus","required","submitText","cancelText","configureMachineAutoscalerModal"],"mappings":"6FAAA,yIAeA,MAAMA,EAAkC,aACrCC,IACC,MAAMC,EAAW,yBACVC,EAAaC,GAAkB,WAAe,IAC9CC,EAAaC,GAAkB,WAAe,KA0DnDC,YACEC,UAAU,KAAEC,IACb,WACDC,EAAU,aACVC,EAAY,OACZC,GACEX,GACE,EAAEY,GAAM,2BAEd,OACE,wBAAMC,SAvBQC,IACdA,EAAMC,iBACN,MAAM,MAAEC,GAAUhB,EACZiB,EA9BiB,MACvB,MAAM,WACJC,EAAU,KACVC,EACAZ,UAAU,KAAEC,EAAI,UAAEY,IAChBpB,EAAMM,WAEJe,EAAoB,CACxBH,WAAY,mCACZC,KAAM,oBACNZ,SAAU,CACRC,OACAY,aAEFE,KAAM,CACJpB,cACAE,cACAmB,eAAgB,CACdL,aACAC,OACAX,UAIN,OAAO,aAAU,yBAAwBa,IAMzBG,GAChBxB,EAAMyB,cAAcR,EAAUS,IAC5BV,IACAf,EACE,aAAsB,yBAAwByB,EAAInB,SAASC,KAAMkB,EAAInB,SAASa,eAgB1DZ,KAAK,OAAOmB,UAAU,iBAC5C,gBAAC,IAAU,CAACA,UAAU,gBAAgBf,EAAE,oCACxC,gBAAC,IAAS,KACR,yBACE,gBAAC,QAAK,CAACA,EAAGA,EAAGgB,GAAG,U,6CAC4B,yBAAI,CAAEpB,S,MAGpD,uBAAKmB,UAAU,cACb,6BACGf,EAAE,4BACH,gBAAC,IAAa,CACZiB,MAAO3B,EACP4B,SA/EehB,IACzBX,EAAe,IAAYW,EAAMiB,OAAOF,SA+E9BG,cA5EiBC,IAC3B9B,EAAeD,EAAc+B,IA4EnBC,WAAS,EACTC,UAAQ,MAId,uBAAKR,UAAU,cACb,6BACGf,EAAE,4BACH,gBAAC,IAAa,CACZiB,MAAOzB,EACP0B,SAnFehB,IACzBT,EAAe,IAAYS,EAAMiB,OAAOF,SAmF9BG,cAhFiBC,IAC3B5B,EAAeD,EAAc6B,IAgFnBE,UAAQ,OAKhB,gBAAC,IAAiB,CAChB1B,WAAYA,EACZC,aAAcA,EACdC,OAAQA,EACRyB,WAAYxB,EAAE,iBACdyB,WAAYzB,EAAE,sBAOX0B,EAAkC,YAAoBvC","file":"configure-machine-autoscaler-modal-chunk-70652c8a51e6ae0b9027.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\n\nimport { MachineAutoscalerModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport {\n  HandlePromiseProps,\n  NumberSpinner,\n  resourcePathFromModel,\n  withHandlePromise,\n} from '../utils';\nimport { k8sCreate, K8sResourceKind } from '../../module/k8s';\n\nconst ConfigureMachineAutoscalerModal = withHandlePromise(\n  (props: ConfigureMachineAutoscalerModalProps) => {\n    const navigate = useNavigate();\n    const [minReplicas, setMinReplicas] = React.useState(1);\n    const [maxReplicas, setMaxReplicas] = React.useState(12);\n\n    const changeMinReplicas = (event) => {\n      setMinReplicas(_.toInteger(event.target.value));\n    };\n\n    const changeMinReplicasBy = (operation) => {\n      setMinReplicas(minReplicas + operation);\n    };\n\n    const changeMaxReplicas = (event) => {\n      setMaxReplicas(_.toInteger(event.target.value));\n    };\n\n    const changeMaxReplicasBy = (operation) => {\n      setMaxReplicas(maxReplicas + operation);\n    };\n\n    const createAutoscaler = (): Promise<K8sResourceKind> => {\n      const {\n        apiVersion,\n        kind,\n        metadata: { name, namespace },\n      } = props.machineSet;\n\n      const machineAutoscaler = {\n        apiVersion: 'autoscaling.openshift.io/v1beta1',\n        kind: 'MachineAutoscaler',\n        metadata: {\n          name,\n          namespace,\n        },\n        spec: {\n          minReplicas,\n          maxReplicas,\n          scaleTargetRef: {\n            apiVersion,\n            kind,\n            name,\n          },\n        },\n      };\n      return k8sCreate(MachineAutoscalerModel, machineAutoscaler);\n    };\n\n    const submit = (event): void => {\n      event.preventDefault();\n      const { close } = props;\n      const promise = createAutoscaler();\n      props.handlePromise(promise, (obj: K8sResourceKind) => {\n        close();\n        navigate(\n          resourcePathFromModel(MachineAutoscalerModel, obj.metadata.name, obj.metadata.namespace),\n        );\n      });\n    };\n\n    const {\n      machineSet: {\n        metadata: { name },\n      },\n      inProgress,\n      errorMessage,\n      cancel,\n    } = props;\n    const { t } = useTranslation();\n\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle className=\"modal-header\">{t('public~Create MachineAutoscaler')}</ModalTitle>\n        <ModalBody>\n          <p>\n            <Trans t={t} ns=\"public\">\n              This will automatically scale machine set <b>{{ name }}</b>.\n            </Trans>\n          </p>\n          <div className=\"form-group\">\n            <label>\n              {t('public~Minimum replicas:')}\n              <NumberSpinner\n                value={minReplicas}\n                onChange={changeMinReplicas}\n                changeValueBy={changeMinReplicasBy}\n                autoFocus\n                required\n              />\n            </label>\n          </div>\n          <div className=\"form-group\">\n            <label>\n              {t('public~Maximum replicas:')}\n              <NumberSpinner\n                value={maxReplicas}\n                onChange={changeMaxReplicas}\n                changeValueBy={changeMaxReplicasBy}\n                required\n              />\n            </label>\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          inProgress={inProgress}\n          errorMessage={errorMessage}\n          cancel={cancel}\n          submitText={t('public~Create')}\n          cancelText={t('public~Cancel')}\n        />\n      </form>\n    );\n  },\n);\n\nexport const configureMachineAutoscalerModal = createModalLauncher(ConfigureMachineAutoscalerModal);\n\ntype ConfigureMachineAutoscalerModalProps = {\n  machineSet: K8sResourceKind;\n  cancel: () => void;\n  close: () => void;\n  inProgress: boolean;\n  errorMessage?: string;\n} & HandlePromiseProps;\n"],"sourceRoot":""}