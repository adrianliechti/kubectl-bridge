{"version":3,"sources":["webpack:///./packages/pipelines-plugin/src/components/catalog/index.ts","webpack:///./packages/pipelines-plugin/src/models/index.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/const.ts","webpack:///./packages/pipelines-plugin/src/types/index.ts","webpack:///./packages/console-shared/src/utils/proxy.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-filter-reducer.ts","webpack:///./packages/pipelines-plugin/src/models/pipelines.ts","webpack:///./packages/pipelines-plugin/src/types/coreTekton.ts","webpack:///./packages/pipelines-plugin/src/types/pipelineRun.ts","webpack:///./packages/pipelines-plugin/src/types/taskRun.ts","webpack:///./packages/pipelines-plugin/src/types/computedStatus.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-augment.ts","webpack:///./packages/pipelines-plugin/src/const.ts","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./packages/pipelines-plugin/src/components/quicksearch/const.ts","webpack:///./packages/pipelines-plugin/src/components/catalog/apis/artifactHub.ts","webpack:///./packages/pipelines-plugin/src/components/catalog/apis/tektonHub.ts","webpack:///./packages/pipelines-plugin/src/components/catalog/hooks/useApiResponse.ts","webpack:///./packages/pipelines-plugin/src/components/catalog/providers/index.ts","webpack:///./packages/pipelines-plugin/src/components/catalog/providers/useTasksProvider.tsx","webpack:///./packages/pipelines-plugin/src/components/catalog/providers/useTekonHubTasksProvider.tsx","webpack:///./packages/pipelines-plugin/src/components/catalog/catalog-utils.ts","webpack:///./packages/pipelines-plugin/src/components/catalog/providers/useArtifactHubTasksProvider.tsx"],"names":["StartedByLabel","StartedByAnnotation","TektonTaskAnnotation","TaskProviders","TektonTaskLabel","TektonResourceLabel","PipelineResourceType","VolumeTypes","SecretAnnotationId","Git","Image","PIPELINE_GA_VERSION","TRIGGERS_GA_VERSION","PIPELINE_UNSIMPLIFIED_METRICS_VERSION","PIPELINE_SERVICE_ACCOUNT","PIPELINE_RUN_AUTO_START_FAILED","DEFAULT_CHART_HEIGHT","DEFAULT_LEGEND_CHART_HEIGHT","DEFAULT_SAMPLES","preferredNameAnnotation","chainsSignedAnnotation","PIPELINE_NAMESPACE","PIPELINERUN_TEMPLATE_NAMESPACE","PIPELINE_CONFIG_NAME","PipelineMetricsLevel","FLAG_TEKTON_V1_ENABLED","FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER","FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER","API_PROXY_URL","convertHeaders","headers","Object","keys","reduce","output","key","consoleProxyFetch","proxyRequest","proxyResponse","post","statusCode","Error","consoleProxyFetchJSON","then","response","str","JSON","parse","e","isJSONString","body","SucceedConditionReason","pipelineRunStatus","pipelineRun","conditions","length","succeedCondition","find","c","type","cancelledCondition","reason","PipelineRunStopped","PipelineRunCancelled","includes","spec","status","Cancelling","Succeeded","Failed","Running","TaskRunCancelled","Cancelled","PipelineRunStopping","TaskRunStopping","CreateContainerConfigError","ExceededNodeResources","ExceededResourceQuota","PipelineRunPending","Pending","ConditionCheckFailed","Skipped","pipelineRunStatusTitle","t","pipelineFilterReducer","pipeline","latestRun","Other","pipelineTitleFilterReducer","pipelineRunTitleFilterReducer","pipelineRunFilterReducer","pipelineStatusFilter","filters","selected","all","pipelineRunStatusFilter","phases","taskRunFilterReducer","taskRun","taskRunFilterTitleReducer","color","value","PipelineModel","apiGroup","apiVersion","label","labelKey","labelPluralKey","plural","abbr","namespaced","kind","id","labelPlural","crd","PipelineModelV1Beta1","PipelineRunModel","PipelineRunModelV1Beta1","TaskModel","TaskModelV1Beta1","TaskRunModel","TaskRunModelV1Beta1","CustomRunModelV1Beta1","PipelineResourceModel","ClusterTaskModel","ConditionModel","TriggerBindingModel","ClusterTriggerBindingModel","TriggerTemplateModel","EventListenerModel","RepositoryModel","TektonConfigModel","TektonHubModel","TektonResultModel","MetricsLevel","LevelTypes","DurationTypes","PipelineRunGroupVersionKind","group","version","TaskRunGroupVersionKind","ComputedStatus","CustomRunStatus","getLatestRun","runs","field","i","metadata","Date","pipelineSpec","tasks","succeededCondition","augmentRunsToData","pipelines","pipelineruns","map","prsForPipeline","filter","pr","labels","name","getRunStatusColor","message","pftoken","FailedToStart","Idle","getPipelineFromPipelineRun","pipelineName","namespace","getTaskStatus","pipelinerun","taskRuns","totalTasks","executedPipeline","finally","totalPipelineRunTasks","task","taskRef","totalPipelineRunCustomTasks","plrTasks","tRun","plrTaskLength","skippedTaskLength","skippedTasks","taskStatus","PipelineNotStarted","forEach","pipelineRunHasFailure","pipelineRunIsCancelled","unhandledTasks","getResourceModelFromTaskKind","undefined","getSafeTaskResourceKind","getResourceModelFromBindingKind","getSafeBindingResourceKind","getModelReferenceFromTaskKind","model","countRunningTasks","taskStatuses","shouldHidePipelineRunStop","shouldHidePipelineRunStopForTaskRunStatus","taskRunStatusObj","shouldHidePipelineRunCancel","shouldHidePipelineRunCancelForTaskRunStatus","FLAG_OPENSHIFT_PIPELINE","FLAG_OPENSHIFT_PIPELINE_AS_CODE","FLAG_OPENSHIFT_PIPELINE_CONDITION","CLUSTER_PIPELINE_NS","PIPELINE_RUNTIME_LABEL","PIPELINE_RUNTIME_VERSION_LABEL","PIPELINE_STRATEGY_LABEL","PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY","FUNC_PIPELINE_RUNTIME_LABEL","ARTIFACTHUB_API_BASE_URL","DELETED_RESOURCE_IN_K8S_ANNOTATION","RESOURCE_LOADED_FROM_RESULTS_ANNOTATION","useK8sGet","opts","data","setData","loaded","setLoaded","loadError","setLoadError","resource","error","CTALabel","TEKTONHUB","ARTIFACTHUB","ARTIFACRHUB_TASKS_SEARCH_URL","getArtifactHubTaskDetails","item","v","API_BASE_URL","repository","repoName","url","method","useGetArtifactHubTasks","hasPermission","resultData","setResult","loadedError","setLoadedError","mounted","packages","catch","err","createArtifactHubTask","annotations","installedFrom","semVersion","console","warn","updateArtifactHubTask","taskData","TEKTON_HUB_INTEGRATION_KEY","getHubUIPath","path","baseURL","useInclusterTektonHubURLs","hub","apiURL","apiUrl","uiURL","uiUrl","useTektonHubResources","getTektonHubTaskVersions","resourceId","json","versions","res","values","taskResources","namespacedTasks","clusterTasks","tasksLoaded","tektonTasks","acc","uid","creationTimestamp","description","tags","split","categories","provider","redhat","normalizedTektonTask","icon","node","attributes","installed","cta","callback","push","normalizeTektonTasks","taskLoadingError","normalizedTektonHubTasks","setNormalizedTektonHubTasks","canCreateTask","verb","canUpdateTask","integrationEnabled","baseURLLoaded","tektonHubTasks","tasksError","latestVersion","tektonHub","ct","secondaryLabelName","toString","community","secondaryLabel","normalizeTektonHubTasks","filterBySupportedPlatforms","platforms","p","window","SERVER_FLAGS","GOOS","GOARCH","useTektonHubIntegration","config","configLoaded","configLoadErr","devconsoleIntegrationEnabled","params","toLowerCase","artifactHubIntegration","artifactHubTasks","package_id","artifactHub","normalizedArtifactHubTask","source","normalizeArtifactHubTasks"],"mappings":"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","file":"pipelines-plugin/code-refs/catalog-chunk-544ae83901b1954db8ae.min.js","sourcesContent":["export * from './providers';\n","export * from './pipelines';\n","export enum StartedByLabel {\n  triggers = 'triggers.tekton.dev/eventlistener',\n}\nexport enum StartedByAnnotation {\n  user = 'pipeline.openshift.io/started-by',\n}\nexport enum TektonTaskAnnotation {\n  minVersion = ' tekton.dev/pipelines.minVersion',\n  tags = 'tekton.dev/tags',\n  categories = 'tekton.dev/categories',\n  installedFrom = 'openshift.io/installed-from',\n  semVersion = 'openshift.io/sem-version',\n}\nexport enum TaskProviders {\n  redhat = 'Red Hat',\n  community = 'Community',\n  tektonHub = 'TektonHub',\n  artifactHub = 'ArtifactHub',\n}\nexport enum TektonTaskLabel {\n  providerType = 'operator.tekton.dev/provider-type',\n  version = 'app.kubernetes.io/version',\n}\nexport enum TektonResourceLabel {\n  pipeline = 'tekton.dev/pipeline',\n  pipelinerun = 'tekton.dev/pipelineRun',\n  taskrun = 'tekton.dev/taskRun',\n  pipelineTask = 'tekton.dev/pipelineTask',\n}\n\nexport enum PipelineResourceType {\n  git = 'git',\n  image = 'image',\n  cluster = 'cluster',\n  storage = 'storage',\n}\n\nexport enum VolumeTypes {\n  NoWorkspace = 'noWorkspace',\n  EmptyDirectory = 'emptyDirectory',\n  ConfigMap = 'configMap',\n  Secret = 'secret',\n  PVC = 'pvc',\n  VolumeClaimTemplate = 'volumeClaimTemplate',\n}\n\nexport enum SecretAnnotationId {\n  Git = 'git',\n  Image = 'docker',\n}\n\nexport const SecretAnnotationType = {\n  [SecretAnnotationId.Git]: 'Git Server',\n  [SecretAnnotationId.Image]: 'Image Registry',\n};\n\nexport const PIPELINE_GA_VERSION = '1.4.0';\nexport const TRIGGERS_GA_VERSION = '1.6.0';\nexport const PIPELINE_UNSIMPLIFIED_METRICS_VERSION = '1.5.2';\nexport const PIPELINE_SERVICE_ACCOUNT = 'pipeline';\nexport const PIPELINE_RUN_AUTO_START_FAILED = `bridge/pipeline-run-auto-start-failed`;\n\nexport const DEFAULT_CHART_HEIGHT = 275;\nexport const DEFAULT_LEGEND_CHART_HEIGHT = 375;\nexport const DEFAULT_TIME_RANGE = '1w';\nexport const DEFAULT_REFRESH_INTERVAL = '30s';\nexport const DEFAULT_SAMPLES = 60;\n\n// Annotation for referencing pipeline name in case of PipelineRun with no reference to a Pipeline (embedded pipeline)\nexport const preferredNameAnnotation = 'pipeline.openshift.io/preferredName';\nexport const chainsSignedAnnotation = 'chains.tekton.dev/signed';\n\nexport const PIPELINE_NAMESPACE = 'openshift-pipelines';\nexport const PIPELINERUN_TEMPLATE_NAMESPACE = 'openshift';\nexport const PIPELINE_CONFIG_NAME = 'config';\n\nexport enum PipelineMetricsLevel {\n  PIPELINE_TASK_LEVEL = 'pipeline/task',\n  PIPELINERUN_TASKRUN_LEVEL = 'pipelinerun/taskrun',\n  UNSUPPORTED_LEVEL = 'unsupported',\n  UNSIMPLIFIED_METRICS_LEVEL = 'unsimplified',\n}\n\nexport const FLAG_TEKTON_V1_ENABLED = 'FLAG_TEKTON_V1_ENABLED';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER';\n","export * from './coreTekton';\nexport * from './pipeline';\nexport * from './pipelineRun';\nexport * from './pipelineResource';\nexport * from './task';\nexport * from './taskRun';\nexport * from './computedStatus';\n","import { safeLoad } from 'js-yaml';\nimport { consoleFetchJSON } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { HttpError } from '@console/dynamic-plugin-sdk/src/utils/error/http-error';\n\nexport const API_PROXY_URL = '/api/dev-console/proxy/internet';\n\ntype ProxyRequest = {\n  allowInsecure?: boolean;\n  allowAuthHeader?: boolean;\n  method: string;\n  url: string;\n  headers?: Record<string, string[]>;\n  queryparams?: Record<string, string[]>;\n  body?: string;\n};\n\nexport type ProxyResponse = {\n  statusCode: number;\n  headers: Record<string, string[]>;\n  body: string;\n};\n\nconst isJSONString = (str: string): boolean => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\nexport const convertHeaders = (headers): Record<string, string[]> => {\n  return Object.keys(headers).reduce((output, key) => {\n    output[key] = [headers[key]];\n    return output;\n  }, {});\n};\n\n/**\n * Calls the proxy in our backend to bypass CORS headers.\n */\nexport const consoleProxyFetch = async (proxyRequest: ProxyRequest): Promise<ProxyResponse> => {\n  const proxyResponse: ProxyResponse = await consoleFetchJSON.post(API_PROXY_URL, proxyRequest);\n  if (!proxyResponse.statusCode) {\n    throw new Error('Unexpected proxy response: Status code is missing!');\n  }\n  if (proxyResponse.statusCode < 200 || proxyResponse.statusCode >= 300) {\n    throw new HttpError(\n      `Unexpected status code: ${proxyResponse.statusCode}`,\n      proxyResponse.statusCode,\n      null,\n      proxyResponse,\n    );\n  }\n  return proxyResponse;\n};\n\nexport const consoleProxyFetchJSON = <T>(proxyRequest: ProxyRequest): Promise<T> => {\n  return consoleProxyFetch(proxyRequest).then((response) => {\n    return isJSONString(response.body) ? JSON.parse(response.body) : safeLoad(response.body);\n  });\n};\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { ComputedStatus } from '../types';\n\nexport enum SucceedConditionReason {\n  PipelineRunCancelled = 'StoppedRunFinally',\n  PipelineRunStopped = 'CancelledRunFinally',\n  TaskRunCancelled = 'TaskRunCancelled',\n  Cancelled = 'Cancelled',\n  PipelineRunStopping = 'PipelineRunStopping',\n  PipelineRunPending = 'PipelineRunPending',\n  TaskRunStopping = 'TaskRunStopping',\n  CreateContainerConfigError = 'CreateContainerConfigError',\n  ExceededNodeResources = 'ExceededNodeResources',\n  ExceededResourceQuota = 'ExceededResourceQuota',\n  ConditionCheckFailed = 'ConditionCheckFailed',\n}\n\nexport const pipelineRunStatus = (pipelineRun): ComputedStatus => {\n  const conditions = _.get(pipelineRun, ['status', 'conditions'], []);\n  if (conditions.length === 0) return null;\n\n  const succeedCondition = conditions.find((c) => c.type === 'Succeeded');\n  const cancelledCondition = conditions.find((c) => c.reason === 'Cancelled');\n\n  if (\n    [\n      SucceedConditionReason.PipelineRunStopped,\n      SucceedConditionReason.PipelineRunCancelled,\n    ].includes(pipelineRun.spec?.status) &&\n    !cancelledCondition\n  ) {\n    return ComputedStatus.Cancelling;\n  }\n\n  if (!succeedCondition || !succeedCondition.status) {\n    return null;\n  }\n\n  const status =\n    succeedCondition.status === 'True'\n      ? ComputedStatus.Succeeded\n      : succeedCondition.status === 'False'\n      ? ComputedStatus.Failed\n      : ComputedStatus.Running;\n\n  if (succeedCondition.reason && succeedCondition.reason !== status) {\n    switch (succeedCondition.reason) {\n      case SucceedConditionReason.PipelineRunCancelled:\n      case SucceedConditionReason.TaskRunCancelled:\n      case SucceedConditionReason.Cancelled:\n      case SucceedConditionReason.PipelineRunStopped:\n        return ComputedStatus.Cancelled;\n      case SucceedConditionReason.PipelineRunStopping:\n      case SucceedConditionReason.TaskRunStopping:\n        return ComputedStatus.Failed;\n      case SucceedConditionReason.CreateContainerConfigError:\n      case SucceedConditionReason.ExceededNodeResources:\n      case SucceedConditionReason.ExceededResourceQuota:\n      case SucceedConditionReason.PipelineRunPending:\n        return ComputedStatus.Pending;\n      case SucceedConditionReason.ConditionCheckFailed:\n        return ComputedStatus.Skipped;\n      default:\n        return status;\n    }\n  }\n  return status;\n};\n\n// Converts the PipelineRun (and TaskRun) condition status into a human readable string.\n// See also tkn cli implementation at https://github.com/tektoncd/cli/blob/release-v0.15.0/pkg/formatted/k8s.go#L54-L83\nexport const pipelineRunStatusTitle = (pipelineRun): string => {\n  const status = pipelineRunStatus(pipelineRun);\n  if (!status) return '-';\n  switch (status) {\n    case ComputedStatus.Cancelled:\n      return i18next.t('pipelines-plugin~Cancelled');\n    case ComputedStatus.Failed:\n      return i18next.t('pipelines-plugin~Failed');\n    case ComputedStatus.Succeeded:\n      return i18next.t('pipelines-plugin~Succeeded');\n    case ComputedStatus.Pending:\n      return i18next.t('pipelines-plugin~Pending');\n    case ComputedStatus.Running:\n      return i18next.t('pipelines-plugin~Running');\n    case ComputedStatus.Skipped:\n      return i18next.t('pipelines-plugin~Skipped');\n    case ComputedStatus.Cancelling:\n      return i18next.t('pipelines-plugin~Cancelling');\n    default:\n      return status;\n  }\n};\n\nexport const pipelineFilterReducer = (pipeline): ComputedStatus => {\n  if (!pipeline.latestRun) return ComputedStatus.Other;\n  return pipelineRunStatus(pipeline.latestRun) || ComputedStatus.Other;\n};\n\nexport const pipelineTitleFilterReducer = (pipeline): string => {\n  if (!pipeline.latestRun) return '-';\n  return pipelineRunStatusTitle(pipeline.latestRun) || '-';\n};\n\nexport const pipelineRunTitleFilterReducer = (pipelineRun): string => {\n  const status = pipelineRunStatusTitle(pipelineRun);\n  return status || '-';\n};\nexport const pipelineRunFilterReducer = (pipelineRun): ComputedStatus => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const pipelineStatusFilter = (filters, pipeline) => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const status = pipelineFilterReducer(pipeline);\n  return filters.selected?.includes(status) || !_.includes(filters.all, status);\n};\n\nexport const pipelineRunStatusFilter = (phases, pipeline) => {\n  if (!phases || !phases.selected || !phases.selected.length) {\n    return true;\n  }\n\n  const status = pipelineRunFilterReducer(pipeline);\n  return phases.selected?.includes(status) || !_.includes(phases.all, status);\n};\n\nexport const pipelineResourceFilterReducer = (pipelineResource): string => {\n  return pipelineResource.spec.type;\n};\n\nexport const pipelineResourceTypeFilter = (filters, pipelineResource): boolean => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const type = pipelineResourceFilterReducer(pipelineResource);\n  return filters.selected?.includes(type) || !_.includes(filters.all, type);\n};\n\nexport const taskRunFilterReducer = (taskRun): ComputedStatus => {\n  const status = pipelineRunStatus(taskRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const taskRunFilterTitleReducer = (taskRun): string => {\n  const status = pipelineRunStatusTitle(taskRun);\n  return status || '-';\n};\n","import { chart_color_green_400 as tektonGroupColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { K8sKind } from '@console/internal/module/k8s';\n\nconst color = tektonGroupColor.value;\n\nexport const PipelineModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const CustomRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'CustomRun',\n  // t('pipelines-plugin~CustomRun')\n  labelKey: 'pipelines-plugin~CustomRun',\n  // t('pipelines-plugin~CustomRuns')\n  labelPluralKey: 'pipelines-plugin~CustomRuns',\n  plural: 'customruns',\n  abbr: 'CR',\n  namespaced: true,\n  kind: 'CustomRun',\n  id: 'customrun',\n  labelPlural: 'CustomRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'PipelineResource',\n  // t('pipelines-plugin~PipelineResource')\n  labelKey: 'pipelines-plugin~PipelineResource',\n  // t('pipelines-plugin~PipelineResources')\n  labelPluralKey: 'pipelines-plugin~PipelineResources',\n  plural: 'pipelineresources',\n  abbr: 'PR',\n  namespaced: true,\n  kind: 'PipelineResource',\n  id: 'pipelineresource',\n  labelPlural: 'PipelineResources',\n  crd: true,\n  color,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTask',\n  // t('pipelines-plugin~ClusterTask')\n  labelKey: 'pipelines-plugin~ClusterTask',\n  // t('pipelines-plugin~ClusterTasks')\n  labelPluralKey: 'pipelines-plugin~ClusterTasks',\n  plural: 'clustertasks',\n  abbr: 'CT',\n  namespaced: false,\n  kind: 'ClusterTask',\n  id: 'clustertask',\n  labelPlural: 'ClusterTasks',\n  crd: true,\n  color,\n};\n\nexport const ConditionModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Condition',\n  // t('pipelines-plugin~Condition')\n  labelKey: 'pipelines-plugin~Condition',\n  // t('pipelines-plugin~Conditions')\n  labelPluralKey: 'pipelines-plugin~Conditions',\n  plural: 'conditions',\n  abbr: 'C',\n  namespaced: true,\n  kind: 'Condition',\n  id: 'condition',\n  labelPlural: 'Conditions',\n  crd: true,\n  color,\n};\n\nexport const TriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerBinding',\n  // t('pipelines-plugin~TriggerBinding')\n  labelKey: 'pipelines-plugin~TriggerBinding',\n  // t('pipelines-plugin~TriggerBindings')\n  labelPluralKey: 'pipelines-plugin~TriggerBindings',\n  plural: 'triggerbindings',\n  abbr: 'TB',\n  namespaced: true,\n  kind: 'TriggerBinding',\n  id: 'triggerbinding',\n  labelPlural: 'TriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const ClusterTriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBinding')\n  labelKey: 'pipelines-plugin~ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBindings')\n  labelPluralKey: 'pipelines-plugin~ClusterTriggerBindings',\n  plural: 'clustertriggerbindings',\n  abbr: 'CTB',\n  namespaced: false,\n  kind: 'ClusterTriggerBinding',\n  id: 'clustertriggerbinding',\n  labelPlural: 'ClusterTriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const TriggerTemplateModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplate')\n  labelKey: 'pipelines-plugin~TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplates')\n  labelPluralKey: 'pipelines-plugin~TriggerTemplates',\n  plural: 'triggertemplates',\n  abbr: 'TT',\n  namespaced: true,\n  kind: 'TriggerTemplate',\n  id: 'triggertemplate',\n  labelPlural: 'TriggerTemplates',\n  crd: true,\n  color,\n};\n\nexport const EventListenerModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'EventListener',\n  // t('pipelines-plugin~EventListener')\n  labelKey: 'pipelines-plugin~EventListener',\n  // t('pipelines-plugin~EventListeners')\n  labelPluralKey: 'pipelines-plugin~EventListeners',\n  plural: 'eventlisteners',\n  abbr: 'EL',\n  namespaced: true,\n  kind: 'EventListener',\n  id: 'eventlistener',\n  labelPlural: 'EventListeners',\n  crd: true,\n  color,\n};\n\nexport const RepositoryModel: K8sKind = {\n  apiGroup: 'pipelinesascode.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Repository',\n  // t('pipelines-plugin~Repository')\n  labelKey: 'pipelines-plugin~Repository',\n  // t('pipelines-plugin~Repositories')\n  labelPluralKey: 'pipelines-plugin~Repositories',\n  plural: 'repositories',\n  abbr: 'R',\n  namespaced: true,\n  kind: 'Repository',\n  id: 'repository',\n  labelPlural: 'Repositories',\n  crd: true,\n  color,\n};\n\nexport const TektonConfigModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonConfig',\n  // t('pipelines-plugin~TektonConfig')\n  labelKey: 'pipelines-plugin~TektonConfig',\n  // t('pipelines-plugin~TektonConfigs')\n  labelPluralKey: 'pipelines-plugin~TektonConfigs',\n  plural: 'tektonconfigs',\n  abbr: 'TC',\n  namespaced: false,\n  kind: 'TektonConfig',\n  id: 'tektonconfig',\n  labelPlural: 'TektonConfigs',\n  crd: true,\n};\n\nexport const TektonHubModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonHub',\n  // t('pipelines-plugin~TektonHub')\n  labelKey: 'pipelines-plugin~TektonHub',\n  // t('pipelines-plugin~TektonHubs')\n  labelPluralKey: 'pipelines-plugin~TektonHubs',\n  plural: 'tektonhubs',\n  abbr: 'TH',\n  namespaced: false,\n  kind: 'TektonHub',\n  id: 'tektonhub',\n  labelPlural: 'TektonHubs',\n  crd: true,\n};\n\nexport const TektonResultModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonResult',\n  // t('pipelines-plugin~TektonResult')\n  labelKey: 'pipelines-plugin~TektonResult',\n  // t('pipelines-plugin~TektonResults')\n  labelPluralKey: 'pipelines-plugin~TektonResults',\n  plural: 'tektonresults',\n  abbr: 'TR',\n  namespaced: false,\n  kind: 'TektonResult',\n  id: 'tektonresult',\n  labelPlural: 'TektonResults',\n  crd: true,\n};\n","import { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\n\nexport type ResourceTarget = 'inputs' | 'outputs';\n\nexport type TektonParam = {\n  default?: string | string[];\n  description?: string;\n  name: string;\n  type?: 'string' | 'array';\n};\n\nexport type TektonTaskSteps = {\n  // TODO: Figure out required fields\n  name: string;\n  args?: string[];\n  command?: string[];\n  image?: string;\n  resources?: {}[] | {};\n  env?: { name: string; value: string }[];\n  script?: string[];\n};\n\nexport type TaskResult = {\n  name: string;\n  description?: string;\n};\n\nexport type TektonTaskSpec = {\n  metadata?: {};\n  description?: string;\n  steps: TektonTaskSteps[];\n  params?: TektonParam[];\n  resources?: TektonResourceGroup<TektonResource>;\n  results?: TaskResult[];\n  workspaces?: TektonWorkspace[];\n};\n\nexport type TektonResourceGroup<ResourceType> = {\n  inputs?: ResourceType[];\n  outputs?: ResourceType[];\n};\n\n/** Deprecated upstream - Workspaces are replacing Resources */\nexport type TektonResource = {\n  name: string;\n  optional?: boolean;\n  type: string; // TODO: limit to known strings\n};\n\nexport type TektonWorkspace = {\n  name: string;\n  description?: string;\n  mountPath?: string;\n  readOnly?: boolean;\n  optional?: boolean;\n};\n\nexport type TektonResultsRun = {\n  name: string;\n  value: string;\n};\n\nexport interface Addon {\n  enablePipelinesAsCode: boolean;\n  params: Param[];\n}\n\nexport interface Param {\n  name: string;\n  value: string;\n}\n\nexport interface Dashboard {\n  readonly: boolean;\n}\n\nexport enum MetricsLevel {\n  METRICS_PIPELINERUN_DURATION_TYPE = 'metrics.pipelinerun.duration-type',\n  METRICS_PIPELINERUN_LEVEL = 'metrics.pipelinerun.level',\n  METRICS_TASKRUN_DURATION_TYPE = 'metrics.taskrun.duration-type',\n  METRICS_TASKRUN_LEVEL = 'metrics.taskrun.level',\n}\n\nexport enum LevelTypes {\n  PIPELINE = 'pipeline',\n  PIPELINERUN = 'pipelinerun',\n  TASK = 'task',\n  TASKRUN = 'taskrun',\n}\n\nexport enum DurationTypes {\n  HISTOGRAM = 'histogram',\n  LASTVALUE = 'lastvalue',\n  NAMESPACE = 'namespace',\n}\n\nexport interface Pipeline {\n  'default-service-account': string;\n  'disable-affinity-assistant': boolean;\n  'disable-creds-init': boolean;\n  'enable-api-fields': string;\n  'enable-custom-tasks': boolean;\n  'enable-tekton-oci-bundles': boolean;\n  [MetricsLevel.METRICS_PIPELINERUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_PIPELINERUN_LEVEL]: LevelTypes;\n  [MetricsLevel.METRICS_TASKRUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_TASKRUN_LEVEL]: LevelTypes;\n  params: Param[];\n  'require-git-ssh-secret-known-hosts': boolean;\n  'running-in-environment-with-injected-sidecars': boolean;\n  'scope-when-expressions-to-task': boolean;\n}\n\nexport interface Pruner {\n  keep: number;\n  resources: string[];\n  schedule: string;\n}\n\nexport interface Trigger {\n  'default-service-account': string;\n  'enable-api-fields': string;\n}\n\nexport interface Spec {\n  addon: Addon;\n  config: {};\n  dashboard: Dashboard;\n  hub: {};\n  params: Param[];\n  pipeline: Pipeline;\n  profile: string;\n  pruner: Pruner;\n  targetNamespace: string;\n  trigger: Trigger;\n}\n\nexport interface Status {\n  conditions: TektonConfigCondition[];\n}\n\nexport interface TektonConfigCondition {\n  lastTransitionTime: string;\n  status: string;\n  type: string;\n}\n\nexport type TektonConfig = K8sResourceCommon & {\n  spec: Spec;\n  status: Status;\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  ObjectMetadata,\n} from '@console/internal/module/k8s';\nimport { TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineKind, PipelineSpec } from './pipeline';\n\nexport type PLRTaskRunStep = {\n  container: string;\n  imageID?: string;\n  name: string;\n  waiting?: {\n    reason: string;\n  };\n  running?: {\n    startedAt: string;\n  };\n  terminated?: {\n    containerID: string;\n    exitCode: number;\n    finishedAt: string;\n    reason: string;\n    startedAt: string;\n    message?: string;\n  };\n};\n\nexport type PLRTaskRunData = {\n  pipelineTaskName: string;\n  status: {\n    completionTime?: string;\n    conditions: Condition[];\n    /** Can be empty */\n    podName: string;\n    startTime: string;\n    steps?: PLRTaskRunStep[];\n    taskSpec?: TektonTaskSpec;\n    taskResults?: { name: string; value: string }[]; // in tekton v1 taskResults is renamed to results\n    results?: { name: string; value: string }[];\n  };\n};\n\nexport type PLRTaskRuns = {\n  [taskRunName: string]: PLRTaskRunData;\n};\n\nexport type VolumeTypeSecret = {\n  secretName: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypeConfigMaps = {\n  name: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypePVC = {\n  claimName: string;\n};\n\nexport type PersistentVolumeClaimType = {\n  persistentVolumeClaim: VolumeTypePVC;\n};\n\nexport type VolumeClaimTemplateType = {\n  volumeClaimTemplate: VolumeTypeClaim;\n};\nexport type VolumeTypeClaim = {\n  metadata?: ObjectMetadata;\n  spec: {\n    accessModes: string[];\n    resources: {\n      requests: {\n        storage: string;\n      };\n    };\n    storageClassName?: string;\n    volumeMode?: string;\n  };\n};\n\nexport type Condition = {\n  type: string;\n  status: string;\n  reason?: string;\n  message?: string;\n  lastTransitionTime?: string;\n};\n\nexport type ChildReferences = {\n  apiVersion: string;\n  kind: string;\n  name: string;\n  pipelineTaskName: string;\n};\n\nexport type PipelineRunEmbeddedResourceParam = { name: string; value: string };\nexport type PipelineRunEmbeddedResource = {\n  name: string;\n  resourceSpec: {\n    params: PipelineRunEmbeddedResourceParam[];\n    type: string;\n  };\n};\nexport type PipelineRunReferenceResource = {\n  name: string;\n  resourceRef: {\n    name: string;\n  };\n};\nexport type PipelineRunResource = PipelineRunReferenceResource | PipelineRunEmbeddedResource;\n\nexport type PipelineRunWorkspace = {\n  name: string;\n  [volumeType: string]:\n    | VolumeTypeSecret\n    | VolumeTypeConfigMaps\n    | VolumeTypePVC\n    | VolumeTypeClaim\n    | {};\n};\n\nexport type PipelineRunParam = {\n  name: string;\n  value: string | string[];\n\n  // TODO: To be validated\n  input?: string;\n  output?: string;\n  resource?: object;\n};\n\nexport type PipelineRunStatus = {\n  succeededCondition?: string;\n  creationTimestamp?: string;\n  conditions?: Condition[];\n  startTime?: string;\n  completionTime?: string;\n  taskRuns?: PLRTaskRuns;\n  pipelineSpec: PipelineSpec;\n  skippedTasks?: {\n    name: string;\n  }[];\n  pipelineResults?: TektonResultsRun[]; // in tekton v1 pipelineResults is renamed to results\n  results?: TektonResultsRun[];\n  childReferences?: ChildReferences[];\n};\n\nexport type PipelineRunKind = K8sResourceCommon & {\n  spec: {\n    pipelineRef?: { name: string };\n    pipelineSpec?: PipelineSpec;\n    params?: PipelineRunParam[];\n    workspaces?: PipelineRunWorkspace[];\n    resources?: PipelineRunResource[];\n    serviceAccountName?: string;\n    timeout?: string;\n    // Only used in a single case - cancelling a pipeline; should not be copied between PLRs\n    status?: 'StoppedRunFinally' | 'PipelineRunPending' | 'CancelledRunFinally';\n    // In tekton v1 ServiceAccountName is moved\n    // to TaskRunTemplate as TaskRunTemplate.ServiceAccountName\n    taskRunTemplate?: {\n      serviceAccountName?: string;\n    };\n  };\n  status?: PipelineRunStatus;\n};\n\nexport type PipelineWithLatest = PipelineKind & {\n  latestRun?: PipelineRunKind;\n};\n\nexport const PipelineRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'PipelineRun',\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  PersistentVolumeClaimKind,\n} from '@console/internal/module/k8s';\nimport { TektonResource, TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineTaskParam, PipelineTaskRef } from './pipeline';\nimport {\n  Condition,\n  PLRTaskRunStep,\n  VolumeTypeConfigMaps,\n  VolumeTypePVC,\n  VolumeTypeSecret,\n} from './pipelineRun';\n\nexport type TaskRunWorkspace = {\n  name: string;\n  volumeClaimTemplate?: PersistentVolumeClaimKind;\n  persistentVolumeClaim?: VolumeTypePVC;\n  configMap?: VolumeTypeConfigMaps;\n  emptyDir?: {};\n  secret?: VolumeTypeSecret;\n  subPath?: string;\n};\n\nexport type TaskRunStatus = {\n  completionTime?: string;\n  conditions?: Condition[];\n  podName?: string;\n  startTime?: string;\n  steps?: PLRTaskRunStep[];\n  taskResults?: TektonResultsRun[]; // in tekton v1 taskResults is renamed to results\n  results?: TektonResultsRun[];\n};\n\nexport type TaskRunKind = K8sResourceCommon & {\n  spec: {\n    taskRef?: PipelineTaskRef;\n    taskSpec?: TektonTaskSpec;\n    serviceAccountName?: string;\n    params?: PipelineTaskParam[];\n    resources?: TektonResource[];\n    timeout?: string;\n    workspaces?: TaskRunWorkspace[];\n  };\n  status?: TaskRunStatus;\n};\n\nexport const TaskRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'TaskRun',\n};\n\nexport type PipelineRunStatusType = {\n  Completed?: number;\n  Failed?: number;\n  Skipped?: number;\n  Cancelled?: number;\n  Incomplete?: number;\n  PipelineNotStarted?: number;\n  Pending?: number;\n  Running?: number;\n  Succeeded?: number;\n};\n","export enum ComputedStatus {\n  Cancelling = 'Cancelling',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Running = 'Running',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'In Progress' = 'In Progress',\n  FailedToStart = 'FailedToStart',\n  PipelineNotStarted = 'PipelineNotStarted',\n  Skipped = 'Skipped',\n  Cancelled = 'Cancelled',\n  Pending = 'Pending',\n  Idle = 'Idle',\n  Other = '-',\n}\n\nexport enum CustomRunStatus {\n  RunCancelled = 'RunCancelled',\n}\n","import { chart_color_black_400 as skippedColor } from '@patternfly/react-tokens/dist/js/chart_color_black_400';\nimport { chart_color_black_500 as cancelledColor } from '@patternfly/react-tokens/dist/js/chart_color_black_500';\nimport { chart_color_blue_100 as pendingColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_300 as runningColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_green_400 as successColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { global_danger_color_100 as failureColor } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport i18next from 'i18next';\nimport {\n  K8sKind,\n  referenceForModel,\n  GroupVersionKind,\n  apiVersionForModel,\n} from '@console/internal/module/k8s';\nimport { TektonResourceLabel } from '../components/pipelines/const';\nimport {\n  ClusterTaskModel,\n  ClusterTriggerBindingModel,\n  TaskModel,\n  TriggerBindingModel,\n  PipelineModel,\n} from '../models';\nimport { ComputedStatus, PipelineKind, PipelineRunKind, PipelineTask, TaskRunKind } from '../types';\nimport { pipelineRunFilterReducer, SucceedConditionReason } from './pipeline-filter-reducer';\n\ninterface Metadata {\n  name: string;\n  namespace?: string;\n}\n\nexport interface PropPipelineData {\n  metadata: Metadata;\n  latestRun?: PipelineRunKind;\n}\n\nexport interface StatusMessage {\n  message: string;\n  pftoken: { name: string; value: string; var: string };\n}\n\nexport interface TaskStatus {\n  PipelineNotStarted: number;\n  Pending: number;\n  Running: number;\n  Succeeded: number;\n  Cancelled: number;\n  Failed: number;\n  Skipped: number;\n  Completed?: number;\n  Cancelling?: number;\n}\n\nexport const getLatestRun = (runs: PipelineRunKind[], field: string): PipelineRunKind => {\n  if (!runs || !(runs.length > 0) || !field) {\n    return null;\n  }\n  let latestRun = runs[0];\n  if (field === 'creationTimestamp') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].metadata &&\n        runs[i].metadata[field] &&\n        new Date(runs[i].metadata[field]) > new Date(latestRun.metadata[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else if (field === 'startTime' || field === 'completionTime') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].status &&\n        runs[i].status[field] &&\n        new Date(runs[i].status[field]) > new Date(latestRun.status[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else {\n    latestRun = runs[runs.length - 1];\n  }\n  if (!latestRun.status) {\n    latestRun = { ...latestRun, status: { pipelineSpec: { tasks: [] } } };\n  }\n  if (!latestRun.status.succeededCondition) {\n    latestRun.status = { ...latestRun.status, succeededCondition: '' };\n  }\n  latestRun.status.succeededCondition = pipelineRunFilterReducer(latestRun);\n  return latestRun;\n};\n\nexport const augmentRunsToData = (\n  pipelines: PropPipelineData[],\n  pipelineruns: PipelineRunKind[],\n): PropPipelineData[] => {\n  return pipelines.map((pipeline) => {\n    const prsForPipeline = pipelineruns.filter(\n      (pr) => pr.metadata.labels?.['tekton.dev/pipeline'] === pipeline.metadata.name,\n    );\n    pipeline.latestRun = getLatestRun(prsForPipeline, 'creationTimestamp');\n    return pipeline;\n  });\n};\n\nexport const getRunStatusColor = (status: string): StatusMessage => {\n  switch (status) {\n    case ComputedStatus.Succeeded:\n      return { message: i18next.t('pipelines-plugin~Succeeded'), pftoken: successColor };\n    case ComputedStatus.Failed:\n      return { message: i18next.t('pipelines-plugin~Failed'), pftoken: failureColor };\n    case ComputedStatus.FailedToStart:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun failed to start'),\n        pftoken: failureColor,\n      };\n    case ComputedStatus.Running:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n    case ComputedStatus['In Progress']:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n\n    case ComputedStatus.Skipped:\n      return { message: i18next.t('pipelines-plugin~Skipped'), pftoken: skippedColor };\n    case ComputedStatus.Cancelled:\n      return { message: i18next.t('pipelines-plugin~Cancelled'), pftoken: cancelledColor };\n    case ComputedStatus.Cancelling:\n      return { message: i18next.t('pipelines-plugin~Cancelling'), pftoken: cancelledColor };\n    case ComputedStatus.Idle:\n    case ComputedStatus.Pending:\n      return { message: i18next.t('pipelines-plugin~Pending'), pftoken: pendingColor };\n    default:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun not started yet'),\n        pftoken: pendingColor,\n      };\n  }\n};\n\nexport const truncateName = (name: string, length: number): string =>\n  name.length < length ? name : `${name.slice(0, length - 1)}...`;\n\nexport const getPipelineFromPipelineRun = (pipelineRun: PipelineRunKind): PipelineKind => {\n  const pipelineName =\n    pipelineRun?.metadata?.labels?.[TektonResourceLabel.pipeline] || pipelineRun?.metadata?.name;\n  const pipelineSpec = pipelineRun?.status?.pipelineSpec || pipelineRun?.spec?.pipelineSpec;\n  if (!pipelineName || !pipelineSpec) {\n    return null;\n  }\n  return {\n    apiVersion: apiVersionForModel(PipelineModel),\n    kind: PipelineModel.kind,\n    metadata: {\n      name: pipelineName,\n      namespace: pipelineRun.metadata.namespace,\n    },\n    spec: pipelineSpec,\n  };\n};\n\nexport const totalPipelineRunTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalTasks = (executedPipeline.spec?.tasks || []).length ?? 0;\n  const finallyTasks = (executedPipeline.spec?.finally || []).length ?? 0;\n  return totalTasks + finallyTasks;\n};\n\nexport const totalPipelineRunCustomTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalCustomTasks =\n    (executedPipeline.spec?.tasks || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  const finallyCustomTasks =\n    (executedPipeline.spec?.finally || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  return totalCustomTasks + finallyCustomTasks;\n};\n\nexport const getTaskStatus = (\n  pipelinerun: PipelineRunKind,\n  pipeline: PipelineKind,\n  taskRuns: TaskRunKind[],\n): TaskStatus => {\n  const totalTasks = totalPipelineRunTasks(pipeline) - totalPipelineRunCustomTasks(pipeline);\n  const plrTasks = (): string[] => {\n    if (pipelinerun?.status?.taskRuns) {\n      return Object.keys(pipelinerun.status.taskRuns);\n    }\n    if (taskRuns) {\n      return taskRuns?.map((tRun) => tRun.metadata.name);\n    }\n    return [];\n  };\n  const plrTaskLength = plrTasks().length;\n  const skippedTaskLength = (pipelinerun?.status?.skippedTasks || []).length;\n  const taskStatus: TaskStatus = {\n    PipelineNotStarted: 0,\n    Pending: 0,\n    Running: 0,\n    Succeeded: 0,\n    Failed: 0,\n    Cancelled: 0,\n    Skipped: skippedTaskLength,\n  };\n\n  if (pipelinerun?.status?.taskRuns || taskRuns) {\n    plrTasks().forEach((taskRun) => {\n      const status = pipelineRunFilterReducer(\n        taskRuns?.find((tRun) => tRun.metadata.name === taskRun) ||\n          pipelinerun.status.taskRuns[taskRun],\n      );\n      if (status === 'Succeeded') {\n        taskStatus[ComputedStatus.Succeeded]++;\n      } else if (status === 'Running') {\n        taskStatus[ComputedStatus.Running]++;\n      } else if (status === 'Failed') {\n        taskStatus[ComputedStatus.Failed]++;\n      } else if (status === 'Cancelled') {\n        taskStatus[ComputedStatus.Cancelled]++;\n      } else {\n        taskStatus[ComputedStatus.Pending]++;\n      }\n    });\n\n    const pipelineRunHasFailure = taskStatus[ComputedStatus.Failed] > 0;\n    const pipelineRunIsCancelled =\n      pipelineRunFilterReducer(pipelinerun) === ComputedStatus.Cancelled;\n    const unhandledTasks =\n      totalTasks >= plrTaskLength ? totalTasks - plrTaskLength - skippedTaskLength : totalTasks;\n\n    if (pipelineRunHasFailure || pipelineRunIsCancelled) {\n      taskStatus[ComputedStatus.Cancelled] += unhandledTasks;\n    } else {\n      taskStatus[ComputedStatus.Pending] += unhandledTasks;\n    }\n  } else if (\n    pipelinerun?.status?.conditions?.[0]?.status === 'False' ||\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunCancelled\n  ) {\n    taskStatus[ComputedStatus.Cancelled] = totalTasks;\n  } else if (pipelinerun?.spec.status === SucceedConditionReason.PipelineRunPending) {\n    taskStatus[ComputedStatus.Pending] += totalTasks;\n  } else {\n    taskStatus[ComputedStatus.PipelineNotStarted]++;\n  }\n  return taskStatus;\n};\n\nexport const getResourceModelFromTaskKind = (kind: string): K8sKind => {\n  if (kind === ClusterTaskModel.kind) {\n    return ClusterTaskModel;\n  }\n  if (kind === TaskModel.kind || kind === undefined) {\n    return TaskModel;\n  }\n  return null;\n};\n\nexport const getSafeTaskResourceKind = (kind: string): string =>\n  (getResourceModelFromTaskKind(kind) || TaskModel).kind;\n\nexport const getResourceModelFromBindingKind = (kind: string): K8sKind => {\n  if (kind === ClusterTriggerBindingModel.kind) {\n    return ClusterTriggerBindingModel;\n  }\n  if (kind === TriggerBindingModel.kind || kind === undefined) {\n    return TriggerBindingModel;\n  }\n  return null;\n};\n\nexport const getSafeBindingResourceKind = (kind: string): string =>\n  (getResourceModelFromBindingKind(kind) || TriggerBindingModel).kind;\n\nexport const getResourceModelFromTask = (task: PipelineTask): K8sKind => {\n  const {\n    taskRef: { kind },\n  } = task;\n\n  return getResourceModelFromTaskKind(kind);\n};\n\nexport const pipelineRefExists = (pipelineRun: PipelineRunKind): boolean =>\n  !!pipelineRun.spec.pipelineRef?.name;\n\nexport const getModelReferenceFromTaskKind = (kind: string): GroupVersionKind => {\n  const model = getResourceModelFromTaskKind(kind);\n  return referenceForModel(model);\n};\n\nexport const countRunningTasks = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): number => {\n  const taskStatuses = taskRuns && getTaskStatus(pipelineRun, undefined, taskRuns);\n  return taskStatuses?.Running;\n};\n\nexport const shouldHidePipelineRunStop = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    (countRunningTasks(pipelineRun, taskRuns) > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunStopForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    (taskRunStatusObj?.Running > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunCancel = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    countRunningTasks(pipelineRun, taskRuns) > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n\nexport const shouldHidePipelineRunCancelForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    taskRunStatusObj?.Running > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n","export const FLAG_OPENSHIFT_PIPELINE = 'OPENSHIFT_PIPELINE';\nexport const FLAG_OPENSHIFT_PIPELINE_AS_CODE = 'OPENSHIFT_PIPELINE_AS_CODE';\nexport const FLAG_OPENSHIFT_PIPELINE_CONDITION = 'OPENSHIFT_PIPELINE_CONDITION';\nexport const CLUSTER_PIPELINE_NS = 'openshift';\nexport const PIPELINE_RUNTIME_LABEL = 'pipeline.openshift.io/runtime';\nexport const PIPELINE_RUNTIME_VERSION_LABEL = 'pipeline.openshift.io/runtime-version';\nexport const PIPELINE_STRATEGY_LABEL = 'pipeline.openshift.io/strategy';\nexport const PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY = 'pipeline.preferredPipelinePageTab';\nexport const FUNC_PIPELINE_RUNTIME_LABEL = 'function.knative.dev/runtime';\nexport const ARTIFACTHUB_API_BASE_URL = 'https://artifacthub.io/api/v1';\nexport const DELETED_RESOURCE_IN_K8S_ANNOTATION = 'resource.deleted.in.k8s';\nexport const RESOURCE_LOADED_FROM_RESULTS_ANNOTATION = 'resource.loaded.from.tektonResults';\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","export enum CTALabel {\n  Add = 'Add',\n  Install = 'Install',\n  Update = 'Update',\n}\n\nexport const TEKTONHUB = 'Tektonhub';\nexport const ARTIFACTHUB = 'ArtifactHub';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { CatalogItem } from '@console/dynamic-plugin-sdk';\nimport { K8sResourceKind, k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport { consoleProxyFetchJSON } from '@console/shared/src/utils/proxy';\nimport { ARTIFACTHUB_API_BASE_URL } from '../../../const';\nimport { TaskModel, TaskModelV1Beta1 } from '../../../models';\nimport { TektonTaskAnnotation } from '../../pipelines/const';\nimport { ARTIFACTHUB } from '../../quicksearch/const';\nimport { ApiResult } from '../hooks/useApiResponse';\n\nexport type ArtifactHubRepository = {\n  name: string;\n  kind: number;\n  url: string;\n  display_name: string;\n  repository_id: string;\n  organization_name: string;\n  organization_display_name: string;\n};\n\nexport type ArtifactHubVersion = {\n  version: string;\n  contains_security_update: boolean;\n  prerelease: boolean;\n  ts: number;\n};\n\nexport type ArtifactHubTask = {\n  package_id: string;\n  name: string;\n  description: string;\n  version: string;\n  display_name: string;\n  repository: ArtifactHubRepository;\n};\n\nexport type ArtifactHubTaskDetails = {\n  package_id: string;\n  name: string;\n  description: string;\n  display_name: string;\n  keywords: string[];\n  platforms: string[];\n  version: ArtifactHubVersion[];\n  available_versions: [];\n  content_url: string;\n  repository: ArtifactHubRepository;\n};\n\nconst ARTIFACRHUB_TASKS_SEARCH_URL = `${ARTIFACTHUB_API_BASE_URL}/packages/search?offset=0&limit=60&facets=false&kind=7&deprecated=false&sort=relevance`;\n\nexport const getArtifactHubTaskDetails = async (\n  item: CatalogItem,\n  v?: string,\n): Promise<ArtifactHubTaskDetails> => {\n  const API_BASE_URL = `${ARTIFACTHUB_API_BASE_URL}/packages/tekton-task`;\n  const { name, data } = item;\n  const {\n    task: {\n      version,\n      repository: { name: repoName },\n    },\n  } = data;\n  const url = `${API_BASE_URL}/${repoName}/${name}/${v || version}`;\n  return consoleProxyFetchJSON({ url, method: 'GET' });\n};\n\nexport const useGetArtifactHubTasks = (hasPermission: boolean): ApiResult<ArtifactHubTask[]> => {\n  const [resultData, setResult] = React.useState<ArtifactHubTask[]>([]);\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadedError, setLoadedError] = React.useState<string>();\n\n  React.useEffect(() => {\n    let mounted = true;\n    if (hasPermission) {\n      consoleProxyFetchJSON<{ packages: ArtifactHubTask[] }>({\n        url: ARTIFACRHUB_TASKS_SEARCH_URL,\n        method: 'GET',\n      })\n        .then(({ packages }) => {\n          if (mounted) {\n            setLoaded(true);\n            setResult(packages);\n          }\n        })\n        .catch((err) => {\n          if (mounted) {\n            setLoaded(true);\n            setLoadedError(err?.message);\n          }\n        });\n    } else {\n      setLoaded(true);\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [hasPermission]);\n  return [resultData, loaded, loadedError];\n};\n\nexport const createArtifactHubTask = (url: string, namespace: string, version: string) => {\n  return consoleProxyFetchJSON({ url, method: 'GET' })\n    .then((task: K8sResourceKind) => {\n      task.metadata.namespace = namespace;\n      task.metadata.annotations = {\n        ...task.metadata.annotations,\n        [TektonTaskAnnotation.installedFrom]: ARTIFACTHUB,\n        [TektonTaskAnnotation.semVersion]: version,\n      };\n      return k8sCreate(task.apiVersion === 'tekton.dev/v1' ? TaskModel : TaskModelV1Beta1, task);\n    })\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.warn('Error while importing ArtifactHub Task:', err);\n      throw err;\n    });\n};\n\nexport const updateArtifactHubTask = async (\n  url: string,\n  taskData: CatalogItem,\n  namespace: string,\n  name: string,\n  version: string,\n) => {\n  return consoleProxyFetchJSON({ url, method: 'GET' })\n    .then((task: K8sResourceKind) => {\n      task.metadata.namespace = namespace;\n      task.metadata.annotations = {\n        ...task.metadata.annotations,\n        [TektonTaskAnnotation.semVersion]: version,\n      };\n      task.metadata = _.merge({}, taskData.data.metadata, task.metadata);\n      return k8sUpdate(\n        task.apiVersion === 'tekton.dev/v1' ? TaskModel : TaskModelV1Beta1,\n        task,\n        namespace,\n        name,\n      );\n    })\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.warn('Error while updating ArtifactHub Task:', err);\n      throw err;\n    });\n};\n","import { coFetch } from '@console/internal/co-fetch';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { TektonHubModel } from '../../../models';\nimport { TektonHub } from '../../../types/hub';\nimport useApiResponse, { ApiResult } from '../hooks/useApiResponse';\n\nexport type TektonHubItem = {\n  id: number;\n  name: string;\n};\nexport type TektonHubCategory = TektonHubItem;\n\nexport type TektonHubTag = TektonHubItem;\n\nexport type TektonHubPlatform = TektonHubItem;\n\nexport type TektonHubCatalog = TektonHubItem & {\n  type: string;\n};\n\nexport type TektonHubTaskVersion = {\n  id: number;\n  version: string;\n  hubURLPath: string;\n  rawURL: string;\n  webURL: string;\n  platforms: TektonHubPlatform[];\n};\n\nexport type TektonHubLatestVersion = TektonHubTaskVersion & {\n  displayName: string;\n  description: string;\n  minPipelinesVersion: string;\n  updatedAt: string;\n};\n\nexport type TektonHubTask = {\n  id: number;\n  name: string;\n  categories: TektonHubCategory[];\n  catalog: TektonHubCatalog;\n  platforms: TektonHubPlatform[];\n  kind: string;\n  latestVersion: TektonHubLatestVersion;\n  tags: TektonHubTag[];\n  rating: number;\n};\nexport const TEKTON_HUB_API_VERSION = 'v1';\nexport const TEKTON_HUB_API_ENDPOINT = 'https://api.hub.tekton.dev';\nexport const TEKTON_HUB_ENDPOINT = `https://hub.tekton.dev`;\nexport const TEKTON_HUB_INTEGRATION_KEY = 'enable-devconsole-integration';\n\nexport const getHubUIPath = (path: string = '', baseURL: string = TEKTON_HUB_ENDPOINT): string => {\n  if (!path) {\n    return null;\n  }\n  return `${baseURL}/${path}`;\n};\n\nexport const getApiResponse = async (url: string) => (await coFetch(url)).json();\n\nexport const useInclusterTektonHubURLs = () => {\n  const [hub, loaded] = useK8sGet<TektonHub>(TektonHubModel, 'hub');\n  // check in-cluster hub exists, if yes use incluster hub instance api url and ui url\n  return {\n    loaded,\n    apiURL: hub?.status?.apiUrl || TEKTON_HUB_API_ENDPOINT,\n    uiURL: hub?.status?.uiUrl || TEKTON_HUB_ENDPOINT,\n  };\n};\n\nexport const useTektonHubResources = (\n  baseURL,\n  hasPermission: boolean,\n): ApiResult<TektonHubTask[]> => {\n  return useApiResponse<TektonHubTask>(\n    `${baseURL}/${TEKTON_HUB_API_VERSION}/resources`,\n    hasPermission,\n  );\n};\n\nexport const getTektonHubTaskVersions = async (\n  resourceId: string,\n  baseURL?: string,\n): Promise<TektonHubTaskVersion[]> => {\n  const API_BASE_URL = baseURL || TEKTON_HUB_API_ENDPOINT;\n  const response = await getApiResponse(\n    `${API_BASE_URL}/${TEKTON_HUB_API_VERSION}/resource/${resourceId}/versions`,\n  );\n  return response?.data?.versions ?? [];\n};\n","import * as React from 'react';\nimport { coFetch } from '@console/internal/co-fetch';\n\nexport type ApiResult<R extends any[]> = [R, boolean, string];\nexport type UseApiResponse = <R extends any = any>(\n  url: string,\n  hasPermission: boolean,\n) => ApiResult<R[]>;\n\nconst useApiResponse: UseApiResponse = (url: string, hasPermission: boolean) => {\n  const [resultData, setResult] = React.useState([]);\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadedError, setLoadedError] = React.useState<string>();\n\n  React.useEffect(() => {\n    let mounted = true;\n    if (hasPermission) {\n      coFetch(url)\n        .then(async (res) => {\n          const json = await res.json();\n          if (mounted) {\n            setLoaded(true);\n            setResult(json.data);\n          }\n        })\n        .catch((err) => {\n          if (mounted) {\n            setLoaded(true);\n            setLoadedError(err?.message);\n          }\n        });\n    } else {\n      setLoaded(true);\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [url, hasPermission]);\n\n  return [resultData, loaded, loadedError];\n};\n\nexport default useApiResponse;\n","export { default as TektonTaskProvider } from './useTasksProvider';\n\nexport { default as TektonHubTaskProvider } from './useTekonHubTasksProvider';\n\nexport { default as ArtifactHubTaskProvider } from './useArtifactHubTasksProvider';\n","import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { CatalogItem, ExtensionHook } from '@console/dynamic-plugin-sdk';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { TaskKind } from '../../../types';\nimport { getModelReferenceFromTaskKind } from '../../../utils/pipeline-augment';\nimport { TektonTaskAnnotation, TektonTaskLabel, TaskProviders } from '../../pipelines/const';\nimport { PipelineBuilderFormikValues } from '../../pipelines/pipeline-builder/types';\nimport { ARTIFACTHUB } from '../../quicksearch/const';\n\nconst normalizeTektonTasks = (tektonTasks: TaskKind[]): CatalogItem<TaskKind>[] => {\n  const normalizedTektonTasks: CatalogItem<TaskKind>[] = _.reduce(\n    tektonTasks,\n    (acc, task) => {\n      const { uid, name, annotations = {}, creationTimestamp, labels = {} } = task.metadata;\n      const { description } = task.spec;\n      const tags = annotations[TektonTaskAnnotation.tags]?.split(/\\s*,\\s*/) || [];\n      const categories = annotations[TektonTaskAnnotation.categories]?.split(/\\s*,\\s*/) || [];\n      const provider = annotations[TektonTaskAnnotation.installedFrom] || TaskProviders.redhat;\n      const versions =\n        annotations[TektonTaskAnnotation.installedFrom] === ARTIFACTHUB\n          ? labels[TektonTaskLabel.version]\n            ? [\n                {\n                  id: annotations[TektonTaskAnnotation.semVersion],\n                  version: annotations[TektonTaskAnnotation.semVersion],\n                },\n              ]\n            : []\n          : labels[TektonTaskLabel.version]\n          ? [{ id: labels[TektonTaskLabel.version], version: labels[TektonTaskLabel.version] }]\n          : [];\n      const normalizedTektonTask: CatalogItem<TaskKind> = {\n        uid,\n        type: TaskProviders.redhat,\n        name,\n        description,\n        provider,\n        tags,\n        creationTimestamp,\n        icon: {\n          node: <ResourceIcon kind={getModelReferenceFromTaskKind(task.kind)} />,\n        },\n        attributes: {\n          installed:\n            annotations[TektonTaskAnnotation.installedFrom] === ARTIFACTHUB\n              ? annotations[TektonTaskAnnotation.semVersion]\n              : labels[TektonTaskLabel.version],\n          versions,\n          categories,\n        },\n        cta: {\n          label: i18next.t('pipelines-plugin~Add'),\n          callback: () => {},\n        },\n        data: task,\n      };\n      acc.push(normalizedTektonTask);\n      return acc;\n    },\n    [],\n  );\n\n  return normalizedTektonTasks;\n};\n\nconst useTasksProvider: ExtensionHook<CatalogItem[]> = (): [CatalogItem[], boolean, string] => {\n  const { values, status } = useFormikContext<PipelineBuilderFormikValues>();\n  const {\n    taskResources: { namespacedTasks, clusterTasks, tasksLoaded },\n  } = values;\n\n  const tektonTasks = React.useMemo(() => _.filter([...namespacedTasks, ...clusterTasks]), [\n    namespacedTasks,\n    clusterTasks,\n  ]);\n\n  const normalizedTektonTasks = React.useMemo(() => normalizeTektonTasks(tektonTasks), [\n    tektonTasks,\n  ]);\n  return [normalizedTektonTasks, tasksLoaded, status?.taskLoadingError];\n};\n\nexport default useTasksProvider;\n","import * as React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport i18next from 'i18next';\nimport { CatalogItem, ExtensionHook } from '@console/dynamic-plugin-sdk';\nimport { ResourceIcon, useAccessReview } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { TaskModel } from '../../../models/pipelines';\nimport { TaskProviders } from '../../pipelines/const';\nimport { TektonHubTask, useInclusterTektonHubURLs, useTektonHubResources } from '../apis/tektonHub';\nimport { filterBySupportedPlatforms, useTektonHubIntegration } from '../catalog-utils';\n\nconst normalizeTektonHubTasks = (\n  tektonHubTasks: TektonHubTask[],\n  apiURL: string,\n  uiURL: string,\n): CatalogItem<TektonHubTask>[] => {\n  const normalizedTektonHubTasks: CatalogItem<TektonHubTask>[] = tektonHubTasks\n    .filter(filterBySupportedPlatforms)\n    .reduce((acc, task) => {\n      if (task.kind !== TaskModel.kind) {\n        return acc;\n      }\n      const { id, name } = task;\n      const { description } = task.latestVersion;\n      const provider = TaskProviders.tektonHub;\n      const tags = task.tags?.map((t) => t.name) ?? [];\n      const categories = task.categories?.map((ct) => ct.name) ?? [];\n      const [secondaryLabelName] = categories;\n      const versions = [];\n      const normalizedTektonTask: CatalogItem<TektonHubTask> = {\n        uid: id.toString(),\n        type: TaskProviders.community,\n        name,\n        description,\n        provider,\n        tags,\n        secondaryLabel: secondaryLabelName && <Label color=\"blue\">{secondaryLabelName}</Label>,\n        icon: {\n          node: <ResourceIcon kind={referenceForModel(TaskModel)} />,\n        },\n        attributes: { installed: '', versions, categories, apiURL, uiURL },\n        cta: {\n          label: i18next.t('pipelines-plugin~Add'),\n        },\n        data: task,\n      };\n      acc.push(normalizedTektonTask);\n\n      return acc;\n    }, []);\n\n  return normalizedTektonHubTasks;\n};\n\nconst useTektonHubTasksProvider: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, string] => {\n  const [normalizedTektonHubTasks, setNormalizedTektonHubTasks] = React.useState<\n    CatalogItem<TektonHubTask>[]\n  >([]);\n\n  const canCreateTask = useAccessReview({\n    group: TaskModel.apiGroup,\n    resource: TaskModel.plural,\n    namespace,\n    verb: 'create',\n  });\n\n  const canUpdateTask = useAccessReview({\n    group: TaskModel.apiGroup,\n    resource: TaskModel.plural,\n    namespace,\n    verb: 'update',\n  });\n\n  const integrationEnabled = useTektonHubIntegration();\n  const { apiURL, uiURL, loaded: baseURLLoaded } = useInclusterTektonHubURLs();\n\n  const [tektonHubTasks, tasksLoaded, tasksError] = useTektonHubResources(\n    apiURL,\n    canCreateTask && canUpdateTask && integrationEnabled && baseURLLoaded,\n  );\n\n  React.useMemo(\n    () => setNormalizedTektonHubTasks(normalizeTektonHubTasks(tektonHubTasks, apiURL, uiURL)),\n    [apiURL, tektonHubTasks, uiURL],\n  );\n  return [normalizedTektonHubTasks, tasksLoaded, tasksError];\n};\n\nexport default useTektonHubTasksProvider;\n","import { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { TektonConfigModel } from '../../models';\nimport { TektonHubTask, TEKTON_HUB_INTEGRATION_KEY } from './apis/tektonHub';\n\nexport const getClusterPlatform = (): string =>\n  `${window.SERVER_FLAGS.GOOS}/${window.SERVER_FLAGS.GOARCH}`;\n\nexport const filterBySupportedPlatforms = (task: TektonHubTask): boolean => {\n  const supportedPlatforms = task?.platforms.map((p) => p.name) ?? [];\n  return supportedPlatforms.includes(getClusterPlatform());\n};\n\nexport const useTektonHubIntegration = () => {\n  const [config, configLoaded, configLoadErr] = useK8sGet<K8sResourceKind>(\n    TektonConfigModel,\n    'config',\n  );\n  if (!configLoaded) {\n    return false;\n  }\n  // return false only if TEKTON_HUB_INTEGRATION_KEY value is set to 'false'\n  if (config && configLoaded && !configLoadErr) {\n    const devconsoleIntegrationEnabled = config.spec?.hub?.params?.find(\n      (p) => p.name === TEKTON_HUB_INTEGRATION_KEY,\n    );\n    return devconsoleIntegrationEnabled?.value?.toLowerCase() !== 'false';\n  }\n  return true;\n};\n","import * as React from 'react';\nimport i18next from 'i18next';\nimport { CatalogItem, ExtensionHook } from '@console/dynamic-plugin-sdk';\nimport { ResourceIcon, useAccessReview } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { TaskModel } from '../../../models/pipelines';\nimport { TaskProviders } from '../../pipelines/const';\nimport { ARTIFACTHUB } from '../../quicksearch/const';\nimport { ArtifactHubTask, useGetArtifactHubTasks } from '../apis/artifactHub';\nimport { TektonHubTask } from '../apis/tektonHub';\nimport { useTektonHubIntegration } from '../catalog-utils';\n\nconst normalizeArtifactHubTasks = (artifactHubTasks: ArtifactHubTask[]): CatalogItem<any>[] => {\n  const normalizedArtifactHubTasks: CatalogItem<ArtifactHubTask>[] = artifactHubTasks.reduce(\n    (acc, task) => {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const { package_id, name, description } = task;\n      const provider = TaskProviders.artifactHub;\n      const normalizedArtifactHubTask: CatalogItem<any> = {\n        uid: package_id.toString(),\n        type: TaskProviders.community,\n        name,\n        description,\n        provider,\n        icon: {\n          node: <ResourceIcon kind={referenceForModel(TaskModel)} />,\n        },\n        attributes: { installed: '' },\n        cta: {\n          label: i18next.t('pipelines-plugin~Add'),\n        },\n        data: {\n          task,\n          source: ARTIFACTHUB,\n        },\n      };\n      acc.push(normalizedArtifactHubTask);\n\n      return acc;\n    },\n    [],\n  );\n\n  return normalizedArtifactHubTasks;\n};\n\nconst useArtifactHubTasksProvider: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, string] => {\n  const artifactHubIntegration = useTektonHubIntegration();\n  const canCreateTask = useAccessReview({\n    group: TaskModel.apiGroup,\n    resource: TaskModel.plural,\n    namespace,\n    verb: 'create',\n  });\n\n  const canUpdateTask = useAccessReview({\n    group: TaskModel.apiGroup,\n    resource: TaskModel.plural,\n    namespace,\n    verb: 'update',\n  });\n\n  const [artifactHubTasks, tasksLoaded, tasksError] = useGetArtifactHubTasks(\n    canCreateTask && canUpdateTask && artifactHubIntegration,\n  );\n  const normalizedArtifactHubTasks = React.useMemo<CatalogItem<TektonHubTask>[]>(\n    () => normalizeArtifactHubTasks(artifactHubTasks),\n    [artifactHubTasks],\n  );\n  return [normalizedArtifactHubTasks, tasksLoaded, tasksError];\n};\n\nexport default useArtifactHubTasksProvider;\n"],"sourceRoot":""}