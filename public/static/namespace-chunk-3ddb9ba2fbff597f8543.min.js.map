{"version":3,"sources":["webpack:///./public/components/namespace.jsx","webpack:///./packages/console-shared/src/components/dashboard/inventory-card/utils.ts","webpack:///./public/components/dashboard/project-dashboard/project-dashboard-context.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/utils.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx","webpack:///./packages/console-shared/src/promql/project-dashboard.ts","webpack:///./packages/console-shared/src/components/dashboard/resource-quota-card/QuotaSummary.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/context.ts","webpack:///./packages/console-shared/src/components/dashboard/status-card/OperatorStatusBody.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx","webpack:///./public/components/dashboard/project-dashboard/project-dashboard.tsx","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/resources-almost-empty-icon.js","webpack:///./public/components/overview/index.tsx","webpack:///./public/components/dashboard/project-dashboard/details-card.tsx","webpack:///./public/components/dashboard/project-dashboard/status-card.tsx","webpack:///./public/components/dashboard/project-dashboard/utilization-card.tsx","webpack:///./public/components/dashboard/project-dashboard/utilization-popovers.tsx","webpack:///./public/components/dashboard/project-dashboard/inventory-card.tsx","webpack:///./public/components/dashboard/project-dashboard/activity-card.tsx","webpack:///./public/components/dashboard/project-dashboard/launcher-card.tsx","webpack:///./packages/console-shared/src/components/dashboard/launcher-card/LauncherBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/launcher-card/LauncherItem.tsx","webpack:///./public/components/dashboard/project-dashboard/resource-quota-card.tsx","webpack:///./packages/console-shared/src/components/dashboard/resource-quota-card/ResourceQuotaBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/resource-quota-card/ResourceQuotaItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/resource-quota-card/AppliedClusterResourceQuotaItem.tsx","webpack:///./node_modules/@patternfly/react-charts/dist/esm/components/ChartDonutUtilization/ChartDonutThreshold.js","webpack:///./node_modules/@patternfly/react-charts/dist/esm/components/ChartDonutUtilization/ChartDonutUtilization.js","webpack:///./node_modules/@patternfly/react-tokens/dist/esm/chart_color_gold_400.js","webpack:///./node_modules/@patternfly/react-tokens/dist/esm/chart_color_gold_500.js","webpack:///./node_modules/@patternfly/react-tokens/dist/esm/chart_color_black_100.js","webpack:///./node_modules/@patternfly/react-tokens/dist/esm/chart_color_green_300.js","webpack:///./node_modules/@patternfly/react-tokens/dist/esm/chart_color_green_500.js"],"names":["getDisplayName","obj","getFilters","filterGroupName","t","type","reducer","namespace","name","metadata","requester","annotations","ME","USER","title","SYSTEM","items","id","hideIfEmpty","deleteModal","kind","ns","labelKey","labelKind","weight","accessReview","factory","Delete","tooltip","label","callback","undefined","status","phase","resource","className","content","nsMenuActions","ModifyLabels","ModifyAnnotations","Edit","fetchNamespaceMetrics","promises","key","query","map","url","then","data","result","reduce","acc","value","Number","metric","Promise","all","catch","console","error","namespaceColumnInfo","Object","freeze","classes","displayName","memory","cpu","created","description","labels","NamespacesTableHeader","sortField","transforms","props","sortFunc","additional","columnClass","NamespacesColumnManagementID","getNamespacesSelectedColumns","Set","column","push","NamespacesTableRow","customData","tableColumns","metrics","UI","getIn","bytes","cores","columns","length","columnID","timestamp","creationTimestamp","actions","NamespacesNotFoundMessage","Icon","NamespacesEmptyMessage","NamespacesList","dispatch","updateMetrics","setInterval","clearInterval","selectedColumns","activeColumns","columnManagementID","Header","Row","virtualize","EmptyMsg","NoDataEmptyMsg","NamespacesPage","createNamespaceModal","rowFilters","ListComponent","canCreate","createHandler","columnLayout","projectMenuActions","projectColumnManagementID","projectTableHeader","showMetrics","showActions","ProjectLink","project","setLastNamespace","URL","window","location","href","params","URLSearchParams","search","basePath","pathname","has","delete","newUrl","toString","hash","namespacedPath","to","onClick","e","sessionStorage","setItem","projectHeaderWithoutActions","ProjectTableRow","ProjectLinkComponent","actionsEnabled","isColumnManagementEnabled","getProjectSelectedColumns","ProjectsTable","headerWithMetrics","headerNoMetrics","ProjectNotFoundMessage","canCreateNs","CAN_CREATE_NS","canCreateProject","CAN_CREATE_PROJECT","ProjectEmptyMessage","icon","ProjectList","tableProps","canGetNS","CAN_GET_NS","screen","width","ProjectsPage","createProjectModal","filterLabel","skipAccessReview","textFilter","PullSecret","isLoading","setIsLoading","setData","setError","canViewSecrets","serviceAccount","imagePullSecrets","err","modal","pullSecret","count","variant","isInline","secret","linkTo","NamespaceLineCharts","humanize","byteDataType","BinaryBytes","TopPodsBarChart","ResourceUsage","text","NamespaceSummary","serviceMeshEnabled","canListSecrets","group","apiGroup","plural","verb","showLabelEditor","path","NamespaceDetails","perspective","consoleLinks","isList","optional","links","hideHeading","link","uid","spec","RolesPage","createPath","showTitle","NamespacesDetailsPage","menuActions","pages","details","editYaml","roles","ProjectsDetailsPage","nameKey","component","workloads","POD_PHASE_GROUP_MAPPING","NOT_MAPPED","ERROR","PROGRESS","WARN","PVC_STATUS_GROUP_MAPPING","PV_STATUS_GROUP_MAPPING","NODE_STATUS_GROUP_MAPPING","VS_STATUS_GROUP_MAPPING","getStatusGroups","resources","mapping","mapper","filterType","groups","UNKNOWN","statusIDs","keys","forEach","find","includes","getPodStatusGroups","getNodeStatusGroups","getPVCStatusGroups","pvc","getPVStatusGroups","pv","getVSStatusGroups","ProjectDashboardContext","uniqueResource","prefix","prop","OperatorRow","operatorStatus","isResolved","Component","LoadingComponent","ResolvedComponent","operators","loader","OperatorsPopup","operatorExtensions","dynamicOperatorSubsystems","sections","o","index","operatorResources","r","getOperatorsWithStatuses","viewAllLink","operatorRowLoader","reverse","hasGutter","OperatorHealthItem","watchK8sResource","stopWatchK8sResource","healthStatuses","some","loadError","health","NOT_AVAILABLE","loaded","LOADING","operatorStatuses","OK","importantStatuses","operatorsHealth","state","detailMessage","popupTitle","URLHealthItem","watchURL","stopWatchURL","urlResults","subsystem","models","modelExists","additionalResource","get","fetch","healthResult","healthResultError","k8sResult","healthState","healthHandler","message","popupBodyContent","popupComponent","hide","PrometheusHealthItem","watchPrometheus","stopWatchPrometheusQuery","prometheusResults","infrastructure","queries","q","queryResults","response","popupClassname","popupKeepOnOutsideClick","responses","ResourceHealthItem","resourcesWithNamespace","imageManifestVuln","resourcesResult","ProjectQueries","CPU_USAGE","CPU_REQUESTS","MEMORY_USAGE","MEMORY_REQUESTS","POD_COUNT","FILESYSTEM_USAGE","NETWORK_IN_UTILIZATION","NETWORK_OUT_UTILIZATION","top25Queries","PODS_BY_CPU","PODS_BY_MEMORY","PODS_BY_FILESYSTEM","PODS_BY_NETWORK_IN","PODS_BY_NETWORK_OUT","getMultilineQueries","NETWORK_UTILIZATION","desc","getUtilizationQueries","getTopConsumerQueries","hard","used","resourcesAtQuota","ClusterDashboardContext","infrastructureLoaded","infrastructureError","OperatorsSection","sortedOperatorStatuses","sort","a","b","localeCompare","operatorsHealthy","every","RowLoading","firstColumn","operatorStatusLength","secondColumn","toLowerCase","cvResource","namespaced","DashboardAlerts","labelSelector","hasCVResource","CLUSTER_VERSION","alerts","cv","cvLoaded","showClusterUpdate","alert","rule","StatusCard","k8sModels","k8s","subsystemExtensions","dynamicSubsystemExtensions","subsystems","filter","s","properties","filterSubsystems","popup","resolve","operatorSubsystemIndex","findIndex","healthItems","disallowedControlPlaneTopology","SERVER_FLAGS","controlPlaneTopology","operatorSubsystems","splice","isClickable","isSelectable","hasNoOffset","item","mainCards","Card","leftCards","rightCards","getNamespaceDashboardConsoleLinks","namespaces","selector","matches","ProjectDashboard","namespaceLinks","context","hasNamespaceLinks","rc","Provider","OutlinedCircleIcon","height","svgPath","yOffset","xOffset","ResourcesAlmostEmptyIcon","OverviewListPageLoader","m","OverviewListPage","DetailsCard","labelsSubset","firstThreelabels","detailsLink","networkPopovers","UtilizationCard","projectName","multilineQueries","dynamicItemExtensions","humanizeValue","utilizationQuery","requestQuery","TopConsumerPopover","TopConsumerPopovers","getUtilizationQuery","getRequestQuery","limitQuery","getLimitQuery","totalQuery","getTotalQuery","ProjectUtilizationContext","useConsumers","consumers","model","CPUPopover","current","MemoryPopover","FilesystemPopover","NetworkInPopover","NetworkOutPopover","ProjectInventoryItem","additionalResources","additionalDynamicResources","crd","createFirehoseResource","resourceData","resourceLoaded","resourceLoadError","additionalResourcesData","additionalResourcesLoaded","additionalResourcesLoadError","dynamicResources","dynamicResourcesError","values","dynamicResourcesLoaded","dataTest","InventoryCard","itemExtensions","inventoryExtensions","RecentEvent","viewEvents","eventsResource","getEventsResource","events","moreLink","OngoingActivity","resourceActivityExtensions","dynamicResourceActivityExtensions","resourceActivities","k8sResource","allResourceActivities","isActivity","getTimestamp","resourcesLoaded","size","ActivityCard","LauncherCard","nl","consoleLink","children","additionalClassName","dataTestID","ResourceQuotaCard","quotas","rqLoaded","rqLoadError","groupVersionKind","version","apiVersion","clusterQuotas","acrqLoaded","acrqLoadError","rq","resourceQuota","noText","cq","body","isExpanded","setExpanded","scopes","isFilled","onToggle","_event","isOpen","toggleContent","inline","truncate","total","quota","appliedClusterResourceQuota","ChartDonutThreshold","_a","allowTooltip","ariaDesc","ariaTitle","colorScale","constrainToVisibleArea","containerComponent","hasPatterns","invert","padding","radius","standalone","subTitlePosition","themeColor","x","y","theme","pie","rest","defaultPadding","bottom","left","right","top","chartRadius","getRadius","computedData","datum","formatData","assign","_y","prev","dataPoint","_x","getComputedData","renderChildren","toArray","child","childData","childProps","dynamicTheme","endAngle","isStatic","patternUnshiftIndex","chart","container","ChartDonutUtilization","legendPosition","legend","position","legendDirection","thresholds","getData","Math","abs","newTheme","donutThresholds","sThresholds","numColors","i","color","getDonutThresholds","mergeThemeProps","Array","getThresholdTheme","chart_color_gold_400","chart_color_gold_500","chart_color_black_100","chart_color_green_300","chart_color_green_500"],"mappings":"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","file":"namespace-chunk-3ddb9ba2fbff597f8543.min.js","sourcesContent":["/* eslint-disable tsdoc/syntax */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert, Button, Tooltip } from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\n// FIXME upgrading redux types is causing many errors at this time\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\n\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { Link } from 'react-router-dom';\n\nimport {\n  Status,\n  getRequester,\n  getDescription,\n  FLAGS,\n  GreenCheckCircleIcon,\n  getName,\n  COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n  COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n  LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY,\n  LAST_NAMESPACE_NAME_USER_SETTINGS_KEY,\n  useUserSettingsCompatibility,\n  isModifiedEvent,\n  REQUESTER_FILTER,\n  useFlag,\n  usePrometheusGate,\n} from '@console/shared';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport * as k8sActions from '@console/dynamic-plugin-sdk/src/app/k8s/actions/k8s';\nimport { useActivePerspective } from '@console/dynamic-plugin-sdk';\nimport {\n  ConsoleLinkModel,\n  NamespaceModel,\n  ProjectModel,\n  SecretModel,\n  ServiceAccountModel,\n} from '../models';\nimport { coFetchJSON } from '../co-fetch';\nimport { k8sGet, referenceForModel } from '../module/k8s';\nimport * as UIActions from '../actions/ui';\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport {\n  DetailsItem,\n  ExternalLink,\n  Kebab,\n  LabelList,\n  LoadingInline,\n  ConsoleEmptyState,\n  ResourceIcon,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n  formatBytesAsMiB,\n  formatCores,\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  navFactory,\n  useAccessReview,\n} from './utils';\nimport { deleteNamespaceModal, configureNamespacePullSecretModal } from './modals';\nimport { RoleBindingsPage } from './RBAC';\nimport { Bar, Area, PROMETHEUS_BASE_PATH } from './graphs';\nimport { flagPending } from '../reducers/features';\nimport { OpenShiftGettingStarted } from './start-guide';\nimport { OverviewListPage } from './overview';\nimport {\n  getNamespaceDashboardConsoleLinks,\n  ProjectDashboard,\n} from './dashboard/project-dashboard/project-dashboard';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n\nimport {\n  isCurrentUser,\n  isOtherUser,\n  isSystemNamespace,\n} from '@console/shared/src/components/namespace';\nimport { useCreateNamespaceModal } from '@console/shared/src/hooks/useCreateNamespaceModal';\nimport { useCreateProjectModal } from '@console/shared/src/hooks/useCreateProjectModal';\n\nconst getDisplayName = (obj) =>\n  _.get(obj, ['metadata', 'annotations', 'openshift.io/display-name']);\n\n// KKD CHECK TO SEE THAT ITEMS CHANGE WHEN LANGUAGE CHANGES\nconst getFilters = () => [\n  {\n    filterGroupName: i18next.t('public~Requester'),\n    type: 'requester',\n    reducer: (namespace) => {\n      const name = namespace.metadata?.name;\n      const requester = namespace.metadata?.annotations?.['openshift.io/requester'];\n      if (isCurrentUser(requester)) {\n        return REQUESTER_FILTER.ME;\n      }\n      if (isOtherUser(requester, name)) {\n        return REQUESTER_FILTER.USER;\n      }\n      if (isSystemNamespace({ title: name })) {\n        return REQUESTER_FILTER.SYSTEM;\n      }\n    },\n    items: [\n      { id: REQUESTER_FILTER.ME, title: i18next.t('public~Me') },\n      { id: REQUESTER_FILTER.USER, title: i18next.t('public~User') },\n      { id: REQUESTER_FILTER.SYSTEM, title: i18next.t('public~System'), hideIfEmpty: true },\n    ],\n  },\n];\n\nexport const deleteModal = (kind, ns) => {\n  const { labelKey, labelKind, weight, accessReview } = Kebab.factory.Delete(kind, ns);\n  let callback = undefined;\n  let tooltip;\n  let label;\n\n  if (ns.metadata.name === 'default') {\n    tooltip = `${kind.label} default cannot be deleted`;\n  } else if (ns.status?.phase === 'Terminating') {\n    tooltip = `${kind.label} is already terminating`;\n  } else {\n    callback = () => deleteNamespaceModal({ kind, resource: ns });\n  }\n  if (tooltip) {\n    label = (\n      <div className=\"dropdown__disabled\">\n        <Tooltip content={tooltip}>\n          <span>{i18next.t(labelKey, labelKind)}</span>\n        </Tooltip>\n      </div>\n    );\n  }\n  return { label, labelKey, labelKind, weight, callback, accessReview };\n};\n\nconst nsMenuActions = [\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  Kebab.factory.Edit,\n  deleteModal,\n];\n\nconst fetchNamespaceMetrics = () => {\n  const metrics = [\n    {\n      key: 'memory',\n      query: 'sum by(namespace) (container_memory_working_set_bytes{container=\"\",pod!=\"\"})',\n    },\n    {\n      key: 'cpu',\n      query: 'namespace:container_cpu_usage:sum',\n    },\n  ];\n  const promises = metrics.map(({ key, query }) => {\n    const url = `${PROMETHEUS_BASE_PATH}/api/v1/query?&query=${query}`;\n    return coFetchJSON(url).then(({ data: { result } }) => {\n      return result.reduce((acc, data) => {\n        const value = Number(data.value[1]);\n        return _.set(acc, [key, data.metric.namespace], value);\n      }, {});\n    });\n  });\n  return (\n    Promise.all(promises)\n      .then((data) => _.assign({}, ...data))\n      // eslint-disable-next-line no-console\n      .catch(console.error)\n  );\n};\n\nconst namespaceColumnInfo = Object.freeze({\n  name: {\n    classes: '',\n    id: 'name',\n  },\n  displayName: {\n    classes: 'co-break-word',\n    id: 'displayName',\n  },\n  status: {\n    classes: '',\n    id: 'status',\n  },\n  requester: {\n    classes: '',\n    id: 'requester',\n  },\n  memory: {\n    classes: '',\n    id: 'memory',\n  },\n  cpu: {\n    classes: '',\n    id: 'cpu',\n  },\n  created: {\n    classes: '',\n    id: 'created',\n  },\n  description: {\n    classes: '',\n    id: 'description',\n  },\n  labels: {\n    classes: '',\n    id: 'labels',\n  },\n});\n\nconst NamespacesTableHeader = () => {\n  return [\n    {\n      title: i18next.t('public~Name'),\n      id: namespaceColumnInfo.name.id,\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.name.classes },\n    },\n    {\n      title: i18next.t('public~Display name'),\n      id: namespaceColumnInfo.displayName.id,\n      sortField: 'metadata.annotations[\"openshift.io/display-name\"]',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.displayName.classes },\n    },\n    {\n      title: i18next.t('public~Status'),\n      id: namespaceColumnInfo.status.id,\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.status.classes },\n    },\n    {\n      title: i18next.t('public~Requester'),\n      id: namespaceColumnInfo.requester.id,\n      sortField: \"metadata.annotations.['openshift.io/requester']\",\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.requester.classes },\n    },\n    {\n      title: i18next.t('public~Memory'),\n      id: namespaceColumnInfo.memory.id,\n      sortFunc: 'namespaceMemory',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.memory.classes },\n    },\n    {\n      title: i18next.t('public~CPU'),\n      id: namespaceColumnInfo.cpu.id,\n      sortFunc: 'namespaceCPU',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.cpu.classes },\n    },\n    {\n      title: i18next.t('public~Created'),\n      id: namespaceColumnInfo.created.id,\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.created.classes },\n    },\n    {\n      title: i18next.t('public~Description'),\n      id: namespaceColumnInfo.description.id,\n      sortField: \"metadata.annotations.['openshift.io/description']\",\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.description.classes },\n      additional: true,\n    },\n    {\n      title: i18next.t('public~Labels'),\n      id: namespaceColumnInfo.labels.id,\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.labels.classes },\n      additional: true,\n    },\n    { title: '', props: { className: Kebab.columnClass } },\n  ];\n};\nNamespacesTableHeader.displayName = 'NamespacesTableHeader';\n\nconst NamespacesColumnManagementID = referenceForModel(NamespaceModel);\n\nconst getNamespacesSelectedColumns = () => {\n  return new Set(\n    NamespacesTableHeader().reduce((acc, column) => {\n      if (column.id && !column.additional) {\n        acc.push(column.id);\n      }\n      return acc;\n    }, []),\n  );\n};\n\nconst NamespacesTableRow = ({ obj: ns, customData: { tableColumns } }) => {\n  const { t } = useTranslation();\n  const metrics = useSelector(({ UI }) => UI.getIn(['metrics', 'namespace']));\n  const name = getName(ns);\n  const requester = getRequester(ns);\n  const bytes = metrics?.memory?.[name];\n  const cores = metrics?.cpu?.[name];\n  const description = getDescription(ns);\n  const labels = ns.metadata.labels;\n  const columns = tableColumns?.length > 0 ? new Set(tableColumns) : getNamespacesSelectedColumns();\n  return (\n    <>\n      <TableData className={namespaceColumnInfo.name.classes}>\n        <ResourceLink kind=\"Namespace\" name={ns.metadata.name} />\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.displayName.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.displayName.id}\n      >\n        <span className=\"co-break-word co-line-clamp\">\n          {getDisplayName(ns) || <span className=\"text-muted\">{t('public~No display name')}</span>}\n        </span>\n      </TableData>\n      <TableData\n        className={classNames(namespaceColumnInfo.status.classes, 'co-break-word')}\n        columns={columns}\n        columnID={namespaceColumnInfo.status.id}\n      >\n        <Status status={ns.status?.phase} />\n      </TableData>\n      <TableData\n        className={classNames(namespaceColumnInfo.requester.classes, 'co-break-word')}\n        columns={columns}\n        columnID={namespaceColumnInfo.requester.id}\n      >\n        {requester || <span className=\"text-muted\">{t('public~No requester')}</span>}\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.memory.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.memory.id}\n      >\n        {bytes ? `${formatBytesAsMiB(bytes)} MiB` : '-'}\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.cpu.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.cpu.id}\n      >\n        {cores ? t('public~{{cores}} cores', { cores: formatCores(cores) }) : '-'}\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.created.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.created.id}\n      >\n        <Timestamp timestamp={ns.metadata.creationTimestamp} />\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.description.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.description.id}\n      >\n        <span className=\"co-break-word co-line-clamp\">\n          {description || <span className=\"text-muted\">{t('public~No description')}</span>}\n        </span>\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.labels.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.labels.id}\n      >\n        <LabelList kind=\"Namespace\" labels={labels} />\n      </TableData>\n      <TableData className={Kebab.columnClass}>\n        <ResourceKebab actions={nsMenuActions} kind=\"Namespace\" resource={ns} />\n      </TableData>\n    </>\n  );\n};\n\nconst NamespacesNotFoundMessage = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('public~No Namespaces found')} Icon={SearchIcon}>\n      {t('public~No results were found for the requested Namespaces.')}\n    </ConsoleEmptyState>\n  );\n};\n\nconst NamespacesEmptyMessage = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('public~No matching Namespaces')} Icon={SearchIcon}>\n      {t('public~No results match the filter criteria.')}\n    </ConsoleEmptyState>\n  );\n};\n\nexport const NamespacesList = (props) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [tableColumns] = useUserSettingsCompatibility(\n    COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n    COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n    undefined,\n    true,\n  );\n\n  // TODO Utilize usePoll hook\n  React.useEffect(() => {\n    const updateMetrics = () =>\n      fetchNamespaceMetrics().then((result) => dispatch(UIActions.setNamespaceMetrics(result)));\n    updateMetrics();\n    const id = setInterval(updateMetrics, 30 * 1000);\n    return () => clearInterval(id);\n  }, [dispatch]);\n  const selectedColumns =\n    tableColumns?.[NamespacesColumnManagementID]?.length > 0\n      ? new Set(tableColumns[NamespacesColumnManagementID])\n      : null;\n\n  const customData = React.useMemo(\n    () => ({\n      tableColumns: tableColumns?.[NamespacesColumnManagementID],\n    }),\n    [tableColumns],\n  );\n\n  return (\n    <Table\n      {...props}\n      activeColumns={selectedColumns}\n      columnManagementID={NamespacesColumnManagementID}\n      aria-label={t('public~Namespaces')}\n      Header={NamespacesTableHeader}\n      Row={NamespacesTableRow}\n      customData={customData}\n      virtualize\n      EmptyMsg={NamespacesEmptyMessage}\n      NoDataEmptyMsg={NamespacesNotFoundMessage}\n    />\n  );\n};\n\nexport const NamespacesPage = (props) => {\n  const { t } = useTranslation();\n  const createNamespaceModal = useCreateNamespaceModal();\n  const [tableColumns] = useUserSettingsCompatibility(\n    COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n    COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n    undefined,\n    true,\n  );\n  const selectedColumns =\n    tableColumns?.[NamespacesColumnManagementID]?.length > 0\n      ? new Set(tableColumns[NamespacesColumnManagementID])\n      : getNamespacesSelectedColumns();\n  return (\n    <ListPage\n      {...props}\n      rowFilters={getFilters()}\n      ListComponent={NamespacesList}\n      canCreate={true}\n      createHandler={() => createNamespaceModal()}\n      columnLayout={{\n        columns: NamespacesTableHeader(null, t).map((column) =>\n          _.pick(column, ['title', 'additional', 'id']),\n        ),\n        id: NamespacesColumnManagementID,\n        selectedColumns,\n        type: t('public~Namespaces'),\n      }}\n    />\n  );\n};\n\nexport const projectMenuActions = [Kebab.factory.Edit, deleteModal];\n\nconst projectColumnManagementID = referenceForModel(ProjectModel);\n\nconst projectTableHeader = ({ showMetrics, showActions }) => {\n  return [\n    {\n      title: i18next.t('public~Name'),\n      id: namespaceColumnInfo.name.id,\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.name.classes },\n    },\n    {\n      title: i18next.t('public~Display name'),\n      id: namespaceColumnInfo.displayName.id,\n      sortField: 'metadata.annotations[\"openshift.io/display-name\"]',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.displayName.classes },\n    },\n    {\n      title: i18next.t('public~Status'),\n      id: namespaceColumnInfo.status.id,\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.status.classes },\n    },\n    {\n      title: i18next.t('public~Requester'),\n      id: namespaceColumnInfo.requester.id,\n      sortField: \"metadata.annotations.['openshift.io/requester']\",\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.requester.classes },\n    },\n    ...(showMetrics\n      ? [\n          {\n            title: i18next.t('public~Memory'),\n            id: namespaceColumnInfo.memory.id,\n            sortFunc: 'namespaceMemory',\n            transforms: [sortable],\n            props: { className: namespaceColumnInfo.memory.classes },\n          },\n          {\n            title: i18next.t('public~CPU'),\n            id: namespaceColumnInfo.cpu.id,\n            sortFunc: 'namespaceCPU',\n            transforms: [sortable],\n            props: { className: namespaceColumnInfo.cpu.classes },\n          },\n        ]\n      : []),\n    {\n      title: i18next.t('public~Created'),\n      id: namespaceColumnInfo.created.id,\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.created.classes },\n    },\n    {\n      title: i18next.t('public~Description'),\n      id: namespaceColumnInfo.description.id,\n      sortField: \"metadata.annotations.['openshift.io/description']\",\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.description.classes },\n      additional: true,\n    },\n    {\n      title: i18next.t('public~Labels'),\n      id: namespaceColumnInfo.labels.id,\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: namespaceColumnInfo.labels.classes },\n      additional: true,\n    },\n    ...(showActions ? [{ title: '', props: { className: Kebab.columnClass } }] : []),\n  ];\n};\n\nconst getProjectSelectedColumns = ({ showMetrics, showActions }) => {\n  return new Set(\n    projectTableHeader({ showMetrics, showActions }).reduce((acc, column) => {\n      if (column.id && !column.additional) {\n        acc.push(column.id);\n      }\n      return acc;\n    }, []),\n  );\n};\n\nconst ProjectLink = ({ project }) => {\n  const dispatch = useDispatch();\n  const [, setLastNamespace] = useUserSettingsCompatibility(\n    LAST_NAMESPACE_NAME_USER_SETTINGS_KEY,\n    LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY,\n  );\n  const url = new URL(window.location.href);\n  const params = new URLSearchParams(url.search);\n  const basePath = url.pathname;\n  if (params.has('project-name')) {\n    // clear project-name query param from the url\n    params.delete('project-name');\n  }\n  const newUrl = {\n    search: `?${params.toString()}`,\n    hash: url.hash,\n  };\n  const namespacedPath = UIActions.formatNamespaceRoute(project.metadata.name, basePath, newUrl);\n\n  const handleClick = (e) => {\n    // Don't set last namespace if its modified click (Ctrl+Click).\n    if (isModifiedEvent(e)) {\n      return;\n    }\n    setLastNamespace(project.metadata.name);\n    // update last namespace in session storage (persisted only for current browser tab). Used to remember/restore if\n    // \"All Projects\" was selected when returning to the list view (typically from details view) via breadcrumb or\n    // sidebar navigation\n    sessionStorage.setItem(LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY, project.metadata.name);\n    // clear project-name filter when active namespace is changed\n    dispatch(k8sActions.filterList(referenceForModel(ProjectModel), 'project-name', ''));\n  };\n\n  return (\n    <span className=\"co-resource-item co-resource-item--truncate\">\n      <ResourceIcon kind=\"Project\" />\n      <Link to={namespacedPath} className=\"co-resource-item__resource-name\" onClick={handleClick}>\n        {project.metadata.name}\n      </Link>\n    </span>\n  );\n};\nconst projectHeaderWithoutActions = () =>\n  projectTableHeader({ showMetrics: false, showActions: false });\n\nconst ProjectTableRow = ({ obj: project, customData = {} }) => {\n  const { t } = useTranslation();\n  const metrics = useSelector(({ UI }) => UI.getIn(['metrics', 'namespace']));\n  const name = getName(project);\n  const requester = getRequester(project);\n  const {\n    ProjectLinkComponent,\n    actionsEnabled = true,\n    showMetrics,\n    showActions,\n    isColumnManagementEnabled = true,\n    tableColumns,\n  } = customData;\n  const bytes = metrics?.memory?.[name];\n  const cores = metrics?.cpu?.[name];\n  const description = getDescription(project);\n  const labels = project.metadata.labels;\n  const columns = isColumnManagementEnabled\n    ? tableColumns?.length > 0\n      ? new Set(tableColumns)\n      : getProjectSelectedColumns({ showMetrics, showActions })\n    : null;\n  return (\n    <>\n      <TableData className={namespaceColumnInfo.name.classes}>\n        {customData && ProjectLinkComponent ? (\n          <ProjectLinkComponent project={project} />\n        ) : (\n          <span className=\"co-resource-item\">\n            <ResourceLink kind=\"Project\" name={project.metadata.name} />\n          </span>\n        )}\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.displayName.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.displayName.id}\n      >\n        <span className=\"co-break-word co-line-clamp\">\n          {getDisplayName(project) || (\n            <span className=\"text-muted\">{t('public~No display name')}</span>\n          )}\n        </span>\n      </TableData>\n      <TableData\n        className={namespaceColumnInfo.status.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.status.id}\n      >\n        <Status status={project.status?.phase} />\n      </TableData>\n      <TableData\n        className={classNames(namespaceColumnInfo.requester.classes, 'co-break-word')}\n        columns={columns}\n        columnID={namespaceColumnInfo.requester.id}\n      >\n        {requester || <span className=\"text-muted\">{t('public~No requester')}</span>}\n      </TableData>\n      {showMetrics && (\n        <>\n          <TableData\n            className={namespaceColumnInfo.memory.classes}\n            columns={columns}\n            columnID={namespaceColumnInfo.memory.id}\n          >\n            {bytes ? `${formatBytesAsMiB(bytes)} MiB` : '-'}\n          </TableData>\n          <TableData\n            className={namespaceColumnInfo.cpu.classes}\n            columns={columns}\n            columnID={namespaceColumnInfo.cpu.id}\n          >\n            {cores ? t('public~{{cores}} cores', { cores: formatCores(cores) }) : '-'}\n          </TableData>\n        </>\n      )}\n      <TableData\n        className={namespaceColumnInfo.created.classes}\n        columns={columns}\n        columnID={namespaceColumnInfo.created.id}\n      >\n        <Timestamp timestamp={project.metadata.creationTimestamp} />\n      </TableData>\n      {isColumnManagementEnabled && (\n        <>\n          <TableData\n            className={namespaceColumnInfo.description.classes}\n            columns={columns}\n            columnID={namespaceColumnInfo.description.id}\n          >\n            <span className=\"co-break-word co-line-clamp\">\n              {description || <span className=\"text-muted\">{t('public~No description')}</span>}\n            </span>\n          </TableData>\n          <TableData\n            className={namespaceColumnInfo.labels.classes}\n            columns={columns}\n            columnID={namespaceColumnInfo.labels.id}\n          >\n            <LabelList labels={labels} kind=\"Project\" />\n          </TableData>\n        </>\n      )}\n      {actionsEnabled && (\n        <TableData className={Kebab.columnClass}>\n          <ResourceKebab actions={projectMenuActions} kind=\"Project\" resource={project} />\n        </TableData>\n      )}\n    </>\n  );\n};\nProjectTableRow.displayName = 'ProjectTableRow';\n\nexport const ProjectsTable = (props) => {\n  const { t } = useTranslation();\n  const customData = React.useMemo(\n    () => ({\n      ProjectLinkComponent: ProjectLink,\n      actionsEnabled: false,\n      isColumnManagementEnabled: false,\n    }),\n    [],\n  );\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~Projects')}\n      Header={projectHeaderWithoutActions}\n      Row={ProjectTableRow}\n      customData={customData}\n      virtualize\n    />\n  );\n};\n\nconst headerWithMetrics = () => projectTableHeader({ showMetrics: true, showActions: true });\nconst headerNoMetrics = () => projectTableHeader({ showMetrics: false, showActions: true });\n\nconst ProjectNotFoundMessage = () => {\n  const { t } = useTranslation();\n  const canCreateNs = useFlag(FLAGS.CAN_CREATE_NS);\n  const canCreateProject = useFlag(FLAGS.CAN_CREATE_PROJECT);\n  const canCreate = canCreateNs || canCreateProject;\n  return (\n    <ConsoleEmptyState title={t('public~Welcome to OpenShift')}>\n      <OpenShiftGettingStarted canCreate={canCreate} />\n    </ConsoleEmptyState>\n  );\n};\n\nconst ProjectEmptyMessage = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('public~No matching Projects')} icon={SearchIcon}>\n      {t('public~No results match the filter criteria.')}\n    </ConsoleEmptyState>\n  );\n};\n\nexport const ProjectList = ({ data, ...tableProps }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const canGetNS = useFlag(FLAGS.CAN_GET_NS);\n  const [tableColumns] = useUserSettingsCompatibility(\n    COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n    COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n    undefined,\n    true,\n  );\n  const isPrometheusAvailable = usePrometheusGate();\n  const showMetrics = isPrometheusAvailable && canGetNS && window.screen.width >= 1200;\n  const customData = React.useMemo(\n    () => ({\n      showMetrics,\n      tableColumns: tableColumns?.[projectColumnManagementID],\n    }),\n    [showMetrics, tableColumns],\n  );\n\n  // TODO Utilize usePoll hook\n  React.useEffect(() => {\n    if (showMetrics) {\n      const updateMetrics = () =>\n        fetchNamespaceMetrics().then((result) => dispatch(UIActions.setNamespaceMetrics(result)));\n      updateMetrics();\n      const id = setInterval(updateMetrics, 30 * 1000);\n      return () => clearInterval(id);\n    }\n  }, [dispatch, showMetrics]);\n  const selectedColumns =\n    tableColumns?.[projectColumnManagementID]?.length > 0\n      ? new Set(tableColumns[projectColumnManagementID])\n      : null;\n\n  // Don't render the table until we know whether we can get metrics. It's\n  // not possible to change the table headers once the component is mounted.\n  if (flagPending(canGetNS)) {\n    return null;\n  }\n\n  return (\n    <Table\n      {...tableProps}\n      activeColumns={selectedColumns}\n      columnManagementID={projectColumnManagementID}\n      aria-label={t('public~Projects')}\n      data={data}\n      Header={showMetrics ? headerWithMetrics : headerNoMetrics}\n      Row={ProjectTableRow}\n      NoDataEmptyMsg={ProjectNotFoundMessage}\n      EmptyMsg={ProjectEmptyMessage}\n      customData={customData}\n      virtualize\n    />\n  );\n};\n\nexport const ProjectsPage = (props) => {\n  const { t } = useTranslation();\n  const createProjectModal = useCreateProjectModal();\n  // Skip self-subject access review for projects since they use a special project request API.\n  // `FLAGS.CAN_CREATE_PROJECT` determines if the user can create projects.\n  const canGetNS = useFlag(FLAGS.CAN_GET_NS);\n  const canCreateProject = useFlag(FLAGS.CAN_CREATE_PROJECT);\n  const [tableColumns] = useUserSettingsCompatibility(\n    COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n    COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n    undefined,\n    true,\n  );\n  const isPrometheusAvailable = usePrometheusGate();\n  const showMetrics = isPrometheusAvailable && canGetNS && window.screen.width >= 1200;\n  const showActions = showMetrics;\n  return (\n    <ListPage\n      {...props}\n      rowFilters={getFilters()}\n      ListComponent={ProjectList}\n      canCreate={canCreateProject}\n      createHandler={() => createProjectModal()}\n      filterLabel={t('public~by name or display name')}\n      skipAccessReview\n      textFilter=\"project-name\"\n      kind=\"Project\"\n      columnLayout={{\n        columns: projectTableHeader({ showMetrics, showActions }).map((column) =>\n          _.pick(column, ['title', 'additional', 'id']),\n        ),\n        id: projectColumnManagementID,\n        selectedColumns:\n          tableColumns?.[projectColumnManagementID]?.length > 0\n            ? new Set(tableColumns[projectColumnManagementID])\n            : null,\n        type: t('public~Project'),\n      }}\n    />\n  );\n};\n\n/** @type {React.SFC<{namespace: K8sResourceKind}>} */\nexport const PullSecret = (props) => {\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [data, setData] = React.useState([]);\n  const [error, setError] = React.useState(false);\n  const { t } = useTranslation();\n  const { namespace, canViewSecrets } = props;\n\n  React.useEffect(() => {\n    k8sGet(ServiceAccountModel, 'default', namespace.metadata.name, {})\n      .then((serviceAccount) => {\n        setIsLoading(false);\n        setData(serviceAccount.imagePullSecrets ?? []);\n        setError(false);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setData([]);\n        setError(true);\n        // eslint-disable-next-line no-console\n        console.error('Error getting default ServiceAccount', err);\n      });\n  }, [namespace.metadata.name]);\n\n  const modal = () => configureNamespacePullSecretModal({ namespace, pullSecret: undefined });\n\n  const secrets = () => {\n    if (error) {\n      return <Alert variant=\"danger\" isInline title={t('Error loading default pull Secrets')} />;\n    }\n    return data.length > 0 ? (\n      data.map((secret) => (\n        <div key={secret.name}>\n          <ResourceLink\n            kind=\"Secret\"\n            name={secret.name}\n            namespace={namespace.metadata.name}\n            linkTo={canViewSecrets}\n          />\n        </div>\n      ))\n    ) : (\n      <Button variant=\"link\" type=\"button\" isInline onClick={modal}>\n        {t('public~Not configured')}\n        <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      <dt>{t('public~Default pull Secret', { count: data.length })}</dt>\n      <dd>{isLoading ? <LoadingInline /> : secrets()}</dd>\n    </>\n  );\n};\n\nexport const NamespaceLineCharts = ({ ns }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6 col-sm-12\">\n        <Area\n          title={t('public~CPU usage')}\n          humanize={humanizeCpuCores}\n          namespace={ns.metadata.name}\n          query={`namespace:container_cpu_usage:sum{namespace='${ns.metadata.name}'}`}\n        />\n      </div>\n      <div className=\"col-md-6 col-sm-12\">\n        <Area\n          title={t('public~Memory usage')}\n          humanize={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          namespace={ns.metadata.name}\n          query={`sum by(namespace) (container_memory_working_set_bytes{namespace=\"${ns.metadata.name}\",container=\"\",pod!=\"\"})`}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const TopPodsBarChart = ({ ns }) => {\n  const { t } = useTranslation();\n  return (\n    <Bar\n      title={t('public~Memory usage by pod (top 10)')}\n      namespace={ns.metadata.name}\n      query={`sort_desc(topk(10, sum by (pod)(container_memory_working_set_bytes{container=\"\",pod!=\"\",namespace=\"${ns.metadata.name}\"})))`}\n      humanize={humanizeBinaryBytes}\n      metric=\"pod\"\n    />\n  );\n};\n\nconst ResourceUsage = ({ ns }) => {\n  const { t } = useTranslation();\n  const isPrometheusAvailable = usePrometheusGate();\n  return isPrometheusAvailable ? (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('public~Resource usage')} />\n      <NamespaceLineCharts ns={ns} />\n      <TopPodsBarChart ns={ns} />\n    </div>\n  ) : null;\n};\n\nexport const NamespaceSummary = ({ ns }) => {\n  const { t } = useTranslation();\n  const displayName = getDisplayName(ns);\n  const description = getDescription(ns);\n  const requester = getRequester(ns);\n  const serviceMeshEnabled = ns.metadata?.labels?.['maistra.io/member-of'];\n  const canListSecrets = useAccessReview({\n    group: SecretModel.apiGroup,\n    resource: SecretModel.plural,\n    verb: 'patch',\n    namespace: ns.metadata.name,\n  });\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm-6 col-xs-12\">\n        {/* Labels aren't editable on kind Project, only Namespace. */}\n        <ResourceSummary resource={ns} showLabelEditor={ns.kind === 'Namespace'}>\n          <dt>{t('public~Display name')}</dt>\n          <dd\n            className={classNames({\n              'text-muted': !displayName,\n            })}\n          >\n            {displayName || t('public~No display name')}\n          </dd>\n          <dt>{t('public~Description')}</dt>\n          <dd>\n            <p\n              className={classNames({\n                'text-muted': !description,\n                'co-pre-wrap': description,\n                'co-namespace-summary__description': description,\n              })}\n            >\n              {description || t('public~No description')}\n            </p>\n          </dd>\n          {requester && <dt>Requester</dt>}\n          {requester && <dd>{requester}</dd>}\n        </ResourceSummary>\n      </div>\n      <div className=\"col-sm-6 col-xs-12\">\n        <dl className=\"co-m-pane__details\">\n          <DetailsItem label={t('public~Status')} obj={ns} path=\"status.phase\">\n            <Status status={ns.status?.phase} />\n          </DetailsItem>\n          <PullSecret namespace={ns} canViewSecrets={canListSecrets} />\n          <dt>{t('public~NetworkPolicies')}</dt>\n          <dd>\n            <Link to={`/k8s/ns/${ns.metadata.name}/networkpolicies`}>\n              {t('public~NetworkPolicies')}\n            </Link>\n          </dd>\n          {serviceMeshEnabled && (\n            <>\n              <dt>{t('public~Service mesh')}</dt>\n              <dd>\n                <GreenCheckCircleIcon /> {t('public~Service mesh enabled')}\n              </dd>\n            </>\n          )}\n        </dl>\n      </div>\n    </div>\n  );\n};\n\nexport const NamespaceDetails = ({ obj: ns, customData }) => {\n  const { t } = useTranslation();\n  const [perspective] = useActivePerspective();\n  const [consoleLinks] = useK8sWatchResource({\n    isList: true,\n    kind: referenceForModel(ConsoleLinkModel),\n    optional: true,\n  });\n  const links = getNamespaceDashboardConsoleLinks(ns, consoleLinks);\n  return (\n    <div>\n      {perspective === 'dev' && (\n        <Helmet>\n          <title>{t('public~Project details')}</title>\n        </Helmet>\n      )}\n      <div className=\"co-m-pane__body\">\n        {!customData?.hideHeading && (\n          <SectionHeading text={t('public~{{kind}} details', { kind: ns.kind })} />\n        )}\n        <NamespaceSummary ns={ns} />\n      </div>\n      {ns.kind === 'Namespace' && <ResourceUsage ns={ns} />}\n      {!_.isEmpty(links) && (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~Launcher')} />\n          <ul className=\"pf-v5-c-list pf-m-plain\">\n            {_.map(_.sortBy(links, 'spec.text'), (link) => {\n              return (\n                <li key={link.metadata.uid}>\n                  <ExternalLink href={link.spec.href} text={link.spec.text} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst RolesPage = ({ obj: { metadata } }) => {\n  return (\n    <RoleBindingsPage\n      createPath={`/k8s/ns/${metadata.name}/rolebindings/~new`}\n      namespace={metadata.name}\n      showTitle={false}\n    />\n  );\n};\n\nexport const NamespacesDetailsPage = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={nsMenuActions}\n    pages={[\n      navFactory.details(NamespaceDetails),\n      navFactory.editYaml(),\n      navFactory.roles(RolesPage),\n    ]}\n  />\n);\n\nexport const ProjectsDetailsPage = (props) => {\n  return (\n    <DetailsPage\n      {...props}\n      menuActions={projectMenuActions}\n      pages={[\n        {\n          href: '',\n          // t('public~Overview')\n          nameKey: 'public~Overview',\n          component: ProjectDashboard,\n        },\n        {\n          href: 'details',\n          // t('public~Details')\n          nameKey: 'public~Details',\n          component: NamespaceDetails,\n        },\n        navFactory.editYaml(),\n        navFactory.workloads(OverviewListPage),\n        navFactory.roles(RolesPage),\n      ]}\n    />\n  );\n};\n","import { nodeStatus } from '@console/app/src/status/node';\nimport { volumeSnapshotStatus } from '@console/app/src/status/snapshot';\nimport { podPhaseFilterReducer } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from './InventoryItem';\nimport { InventoryStatusGroup } from './status-group';\n\nconst POD_PHASE_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Running', 'Succeeded'],\n  [InventoryStatusGroup.ERROR]: ['CrashLoopBackOff', 'Failed'],\n  [InventoryStatusGroup.PROGRESS]: ['Terminating', 'Pending'],\n  [InventoryStatusGroup.WARN]: ['Unknown'],\n};\n\nconst PVC_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.ERROR]: ['Lost'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n};\n\nconst PV_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Available', 'Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nconst NODE_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n};\n\nconst VS_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n  [InventoryStatusGroup.ERROR]: ['Error'],\n};\n\nexport const getStatusGroups = (resources, mapping, mapper, filterType) => {\n  const groups = {\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [],\n      count: 0,\n    },\n  };\n  Object.keys(mapping).forEach((key) => {\n    groups[key] = {\n      statusIDs: [...mapping[key]],\n      count: 0,\n      filterType,\n    };\n  });\n\n  resources.forEach((resource) => {\n    const status = mapper(resource);\n    const group =\n      Object.keys(mapping).find((key) => mapping[key].includes(status)) ||\n      InventoryStatusGroup.UNKNOWN;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n\nexport const getPodStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, POD_PHASE_GROUP_MAPPING, podPhaseFilterReducer, 'pod-status');\nexport const getNodeStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, NODE_STATUS_GROUP_MAPPING, nodeStatus, 'node-status');\nexport const getPVCStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PVC_STATUS_GROUP_MAPPING, (pvc) => pvc.status.phase, 'pvc-status');\nexport const getPVStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PV_STATUS_GROUP_MAPPING, (pv) => pv.status.phase, 'pv-status');\nexport const getVSStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, VS_STATUS_GROUP_MAPPING, volumeSnapshotStatus, 'snapshot-status');\n","import * as React from 'react';\nimport { K8sResourceKind } from '../../../module/k8s';\n\nexport const ProjectDashboardContext = React.createContext<ProjectDashboardContext>({});\n\n// eslint-disable-next-line no-redeclare\ntype ProjectDashboardContext = {\n  obj?: K8sResourceKind;\n  namespaceLinks?: K8sResourceKind[];\n};\n","import { FirehoseResource } from '../../../utils';\n\nexport const uniqueResource = (\n  resource: FirehoseResource,\n  prefix: string | number,\n): FirehoseResource => ({\n  ...resource,\n  prop: `${prefix}-${resource.prop}`,\n});\n","import * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useTranslation } from 'react-i18next';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport {\n  DashboardsOverviewHealthOperator,\n  DashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthResourceSubsystem,\n  SubsystemHealth,\n  OperatorRowProps,\n  LazyLoader,\n} from '@console/plugin-sdk';\nimport {\n  ResolvedExtension,\n  DashboardsOverviewHealthOperator as DynamicDashboardsOverviewHealthOperator,\n  DashboardsOverviewHealthURLSubsystem as DynamicDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem as DynamicDashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthResourceSubsystem as DynamicDashboardsOverviewHealthResourceSubsystem,\n  WatchK8sResources,\n  WatchK8sResults,\n  ResourcesObject,\n} from '@console/dynamic-plugin-sdk';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { OperatorsSection } from '@console/shared/src/components/dashboard/status-card/OperatorStatusBody';\nimport {\n  getOperatorsHealthState,\n  getMostImportantStatuses,\n} from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { K8sKind } from '../../../../module/k8s';\nimport { FirehoseResourcesResult, AsyncComponent, resourcePath } from '../../../utils';\nimport { useK8sWatchResources } from '../../../utils/k8s-watch-hook';\nimport { withDashboardResources, DashboardItemProps } from '../../with-dashboard-resources';\nimport { uniqueResource } from './utils';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { ClusterDashboardContext } from './context';\n\nconst OperatorRow: React.FC<\n  OperatorRowProps & {\n    LoadingComponent: () => JSX.Element;\n    Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n    key: string;\n    isResolved: boolean;\n  }\n> = ({ operatorStatus, isResolved, key, Component, LoadingComponent }) => {\n  const ResolvedComponent = Component as React.ComponentType<OperatorRowProps>;\n  return isResolved ? (\n    <ResolvedComponent key={key} operatorStatus={operatorStatus} />\n  ) : (\n    <AsyncComponent\n      key={operatorStatus.operators[0].metadata.uid}\n      operatorStatus={operatorStatus}\n      loader={Component}\n      LoadingComponent={LoadingComponent}\n    />\n  );\n};\n\nexport const OperatorsPopup: React.FC<OperatorsPopupProps> = ({\n  resources,\n  operatorExtensions,\n  dynamicOperatorSubsystems,\n}) => {\n  const { t } = useTranslation();\n  const sections = [\n    ...operatorExtensions.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return (\n        <StackItem key={o.title}>\n          <OperatorsSection\n            resources={operatorResources}\n            getOperatorsWithStatuses={o.getOperatorsWithStatuses}\n            title={o.title}\n            linkTo={o.viewAllLink || resourcePath(o.resources[0].kind)}\n            Row={OperatorRow}\n            Component={o.operatorRowLoader}\n            isResolved={false}\n          />\n        </StackItem>\n      );\n    }),\n    ...dynamicOperatorSubsystems.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return (\n        <StackItem key={o.title}>\n          <OperatorsSection\n            resources={operatorResources}\n            getOperatorsWithStatuses={o.getOperatorsWithStatuses}\n            title={o.title}\n            linkTo={o.viewAllLink || resourcePath(o.resources[0].kind)}\n            Row={OperatorRow}\n            Component={o.operatorRowLoader}\n            isResolved\n          />\n        </StackItem>\n      );\n    }),\n  ].reverse();\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        {t(\n          'public~Operators create, configure, and manage applications by extending the Kubernetes API.',\n        )}\n      </StackItem>\n      {sections}\n    </Stack>\n  );\n};\n\nexport const OperatorHealthItem = withDashboardResources<OperatorHealthItemProps>(\n  ({\n    resources,\n    watchK8sResource,\n    stopWatchK8sResource,\n    operatorExtensions,\n    dynamicOperatorSubsystems,\n  }) => {\n    const { t } = useTranslation();\n    React.useEffect(() => {\n      operatorExtensions.forEach((o, index) =>\n        o.resources.forEach((r) => watchK8sResource(uniqueResource(r, index))),\n      );\n      return () => {\n        operatorExtensions.forEach((o, index) =>\n          o.resources.forEach((r) => stopWatchK8sResource(uniqueResource(r, index))),\n        );\n      };\n    }, [watchK8sResource, stopWatchK8sResource, operatorExtensions]);\n\n    const healthStatuses = operatorExtensions.map((o, index) => {\n      const operatorResources = o.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop] || {};\n        return acc;\n      }, {});\n      if (\n        Object.keys(operatorResources).some((resource) => operatorResources[resource].loadError)\n      ) {\n        return { health: HealthState.NOT_AVAILABLE };\n      }\n      if (Object.keys(operatorResources).some((resource) => !operatorResources[resource].loaded)) {\n        return { health: HealthState.LOADING };\n      }\n      const operatorStatuses = o.getOperatorsWithStatuses(operatorResources);\n      if (!operatorStatuses.length) {\n        return { health: HealthState.OK };\n      }\n      const importantStatuses = getMostImportantStatuses(operatorStatuses);\n      return {\n        health: importantStatuses[0].status.health,\n        count: importantStatuses.length,\n      };\n    });\n\n    const operatorsHealth = getOperatorsHealthState(healthStatuses, t);\n\n    return (\n      <HealthItem\n        title={t('public~Operators')}\n        state={operatorsHealth.health}\n        details={operatorsHealth.detailMessage}\n        popupTitle={t('public~Operator status')}\n      >\n        <OperatorsPopup\n          resources={resources}\n          operatorExtensions={operatorExtensions}\n          dynamicOperatorSubsystems={dynamicOperatorSubsystems}\n        />\n      </HealthItem>\n    );\n  },\n);\n\nexport const URLHealthItem = withDashboardResources<URLHealthItemProps>(\n  ({\n    watchURL,\n    stopWatchURL,\n    urlResults,\n    resources,\n    watchK8sResource,\n    stopWatchK8sResource,\n    subsystem,\n    models,\n  }) => {\n    const modelExists =\n      subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n      watchURL(\n        subsystem.url,\n        (subsystem as DashboardsOverviewHealthURLSubsystem<any>['properties']).fetch\n          ? (subsystem as DashboardsOverviewHealthURLSubsystem<any>['properties']).fetch\n          : undefined,\n      );\n      if (modelExists) {\n        watchK8sResource(subsystem.additionalResource);\n      }\n      return () => {\n        stopWatchURL(subsystem.url);\n        if (modelExists) {\n          stopWatchK8sResource(subsystem.additionalResource);\n        }\n      };\n    }, [watchURL, stopWatchURL, watchK8sResource, stopWatchK8sResource, subsystem, modelExists]);\n\n    const healthResult = urlResults.getIn([subsystem.url, 'data']);\n    const healthResultError = urlResults.getIn([subsystem.url, 'loadError']);\n\n    const k8sResult = subsystem.additionalResource\n      ? resources[subsystem.additionalResource.prop]\n      : null;\n    const healthState = subsystem.healthHandler(healthResult, healthResultError, k8sResult);\n\n    return (\n      <HealthItem\n        title={subsystem.title}\n        state={healthState.state}\n        details={healthState.message}\n        popupTitle={subsystem.popupTitle}\n        popupBodyContent={\n          subsystem.popupComponent\n            ? (hide) => (\n                <AsyncComponent\n                  loader={subsystem.popupComponent}\n                  healthResult={healthResult}\n                  healthResultError={healthResultError}\n                  k8sResult={k8sResult}\n                  hide={hide}\n                />\n              )\n            : undefined\n        }\n      />\n    );\n  },\n);\n\nexport const PrometheusHealthItem = withDashboardResources<PrometheusHealthItemProps>(\n  ({\n    watchK8sResource,\n    stopWatchK8sResource,\n    resources,\n    watchPrometheus,\n    stopWatchPrometheusQuery,\n    prometheusResults,\n    subsystem,\n    models,\n  }) => {\n    const { t } = useTranslation();\n    const { infrastructure } = React.useContext(ClusterDashboardContext);\n\n    const modelExists =\n      subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n      subsystem.queries.forEach((q) => watchPrometheus(q));\n      if (modelExists) {\n        watchK8sResource(subsystem.additionalResource);\n      }\n      return () => {\n        subsystem.queries.forEach((q) => stopWatchPrometheusQuery(q));\n        if (modelExists) {\n          stopWatchK8sResource(subsystem.additionalResource);\n        }\n      };\n    }, [\n      watchK8sResource,\n      stopWatchK8sResource,\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      subsystem,\n      modelExists,\n    ]);\n\n    const queryResults = React.useMemo(\n      () =>\n        subsystem.queries.map((q) => {\n          const [response, error] = getPrometheusQueryResponse(prometheusResults, q);\n          return {\n            response,\n            error,\n          };\n        }),\n      [prometheusResults, subsystem.queries],\n    );\n    const k8sResult = subsystem.additionalResource\n      ? resources[subsystem.additionalResource.prop]\n      : null;\n    const healthState = subsystem.healthHandler(queryResults, t, k8sResult, infrastructure);\n\n    return (\n      <HealthItem\n        title={subsystem.title}\n        state={healthState.state}\n        details={healthState.message}\n        popupTitle={subsystem.popupTitle}\n        popupClassname={subsystem.popupClassname}\n        popupKeepOnOutsideClick={subsystem.popupKeepOnOutsideClick}\n        popupBodyContent={\n          subsystem.popupComponent\n            ? (hide) => (\n                <AsyncComponent\n                  loader={subsystem.popupComponent}\n                  responses={queryResults}\n                  k8sResult={k8sResult}\n                  hide={hide}\n                />\n              )\n            : undefined\n        }\n      />\n    );\n  },\n);\n\nexport const ResourceHealthItem: React.FC<ResourceHealthItemProps> = ({ subsystem, namespace }) => {\n  const { t } = useTranslation();\n\n  const { title, resources, healthHandler, popupComponent, popupTitle } = subsystem;\n\n  const resourcesWithNamespace: WatchK8sResources<ResourcesObject> = React.useMemo(() => {\n    return {\n      ...resources,\n      ...(resources.imageManifestVuln && {\n        imageManifestVuln: { ...resources.imageManifestVuln, namespace },\n      }),\n    };\n  }, [resources, namespace]);\n\n  const resourcesResult: WatchK8sResults<ResourcesObject> = useK8sWatchResources(\n    resourcesWithNamespace,\n  );\n  const healthState: SubsystemHealth = healthHandler(resourcesResult, t);\n\n  return (\n    <HealthItem\n      title={title}\n      state={healthState.state}\n      details={healthState.message}\n      popupTitle={popupTitle}\n    >\n      {popupComponent && resourcesResult && (\n        <AsyncComponent loader={popupComponent} {...resourcesResult} namespace={namespace} />\n      )}\n    </HealthItem>\n  );\n};\n\ntype OperatorHealthItemProps = DashboardItemProps & {\n  operatorExtensions: DashboardsOverviewHealthOperator['properties'][];\n  dynamicOperatorSubsystems: ResolvedExtension<\n    DynamicDashboardsOverviewHealthOperator\n  >['properties'][];\n};\n\ntype URLHealthItemProps = DashboardItemProps & {\n  subsystem:\n    | DashboardsOverviewHealthURLSubsystem<any>['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthURLSubsystem<any>>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype PrometheusHealthItemProps = DashboardItemProps & {\n  subsystem:\n    | DashboardsOverviewHealthPrometheusSubsystem['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthPrometheusSubsystem>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype ResourceHealthItemProps = {\n  subsystem:\n    | DashboardsOverviewHealthResourceSubsystem['properties']\n    | ResolvedExtension<DynamicDashboardsOverviewHealthResourceSubsystem>['properties'];\n  namespace?: string;\n};\n\ntype OperatorsPopupProps = {\n  resources: FirehoseResourcesResult;\n  operatorExtensions: DashboardsOverviewHealthOperator['properties'][];\n  dynamicOperatorSubsystems: ResolvedExtension<\n    DynamicDashboardsOverviewHealthOperator\n  >['properties'][];\n};\n","import * as _ from 'lodash';\nimport { QueryWithDescription } from '../components/dashboard/utilization-card/UtilizationItem';\n\nexport enum ProjectQueries {\n  CPU_USAGE = 'CPU_USAGE',\n  CPU_REQUESTS = 'CPU_REQUESTS',\n  MEMORY_USAGE = 'MEMORY_USAGE',\n  MEMORY_REQUESTS = 'MEMORY_REQUESTS',\n  POD_COUNT = 'POD_COUNT',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_FILESYSTEM = 'PODS_BY_FILESYSTEM',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  FILESYSTEM_USAGE = 'FILESYSTEM_USAGE',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n}\n\nconst queries = {\n  [ProjectQueries.CPU_USAGE]: _.template(\n    `namespace:container_cpu_usage:sum{namespace='<%= project %>'}`,\n  ),\n  [ProjectQueries.CPU_REQUESTS]: _.template(\n    `sum(kube_pod_resource_request{resource=\"cpu\", namespace=\"<%= project %>\"}) by (namespace)`,\n  ),\n  [ProjectQueries.MEMORY_USAGE]: _.template(\n    `sum(container_memory_working_set_bytes{namespace='<%= project %>',container=\"\",pod!=\"\"}) BY (namespace)`,\n  ),\n  [ProjectQueries.MEMORY_REQUESTS]: _.template(\n    `sum(kube_pod_resource_request{resource=\"memory\", namespace=\"<%= project %>\"}) by (namespace)`,\n  ),\n  [ProjectQueries.POD_COUNT]: _.template(\n    `count(kube_running_pod_ready{namespace='<%= project %>'}) BY (namespace)`,\n  ),\n  [ProjectQueries.FILESYSTEM_USAGE]: _.template(\n    `sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (namespace)`,\n  ),\n  [ProjectQueries.NETWORK_IN_UTILIZATION]: _.template(\n    `sum(rate(container_network_receive_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`,\n  ),\n  [ProjectQueries.NETWORK_OUT_UTILIZATION]: _.template(\n    `sum(rate(container_network_transmit_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`,\n  ),\n};\n\nconst top25Queries = {\n  [ProjectQueries.PODS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_FILESYSTEM]: _.template(\n    `topk(25, sort_desc(sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_NETWORK_IN]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`,\n  ),\n  [ProjectQueries.PODS_BY_NETWORK_OUT]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`,\n  ),\n};\n\nexport const getMultilineQueries = (\n  project: string,\n): { [key: string]: QueryWithDescription[] } => ({\n  [ProjectQueries.NETWORK_UTILIZATION]: [\n    {\n      query: queries[ProjectQueries.NETWORK_IN_UTILIZATION]({ project }),\n      desc: 'in',\n    },\n    {\n      query: queries[ProjectQueries.NETWORK_OUT_UTILIZATION]({ project }),\n      desc: 'out',\n    },\n  ],\n});\n\nexport const getUtilizationQueries = (project: string) => ({\n  [ProjectQueries.CPU_USAGE]: queries[ProjectQueries.CPU_USAGE]({ project }),\n  [ProjectQueries.CPU_REQUESTS]: queries[ProjectQueries.CPU_REQUESTS]({ project }),\n  [ProjectQueries.MEMORY_USAGE]: queries[ProjectQueries.MEMORY_USAGE]({ project }),\n  [ProjectQueries.MEMORY_REQUESTS]: queries[ProjectQueries.MEMORY_REQUESTS]({ project }),\n  [ProjectQueries.POD_COUNT]: queries[ProjectQueries.POD_COUNT]({ project }),\n  [ProjectQueries.FILESYSTEM_USAGE]: queries[ProjectQueries.FILESYSTEM_USAGE]({\n    project,\n  }),\n});\n\nexport const getTopConsumerQueries = (project: string) => ({\n  [ProjectQueries.PODS_BY_CPU]: top25Queries[ProjectQueries.PODS_BY_CPU]({ project }),\n  [ProjectQueries.PODS_BY_MEMORY]: top25Queries[ProjectQueries.PODS_BY_MEMORY]({ project }),\n  [ProjectQueries.PODS_BY_FILESYSTEM]: top25Queries[ProjectQueries.PODS_BY_FILESYSTEM]({ project }),\n  [ProjectQueries.PODS_BY_NETWORK_IN]: top25Queries[ProjectQueries.PODS_BY_NETWORK_IN]({ project }),\n  [ProjectQueries.PODS_BY_NETWORK_OUT]: top25Queries[ProjectQueries.PODS_BY_NETWORK_OUT]({\n    project,\n  }),\n});\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getUsedPercentage } from '@console/app/src/components/resource-quota/utils';\nimport { YellowExclamationTriangleIcon } from '../../status';\n\nimport './quota-summary.scss';\n\ntype QuotaSummaryProps = {\n  hard: { [key: string]: string };\n  used: { [key: string]: string };\n};\n\nconst QuotaSummary = ({ hard, used }: QuotaSummaryProps): JSX.Element => {\n  const { t } = useTranslation();\n  const resourcesAtQuota = Object.keys(hard || {}).reduce(\n    (acc, resource) => (getUsedPercentage(hard[resource], used?.[resource]) >= 100 ? acc + 1 : acc),\n    0,\n  );\n\n  return (\n    <div className=\"co-resource-quota__summary\">\n      {t('console-shared~{{count}} resource', { count: Object.keys(hard || {}).length })}\n      {', '}\n      {resourcesAtQuota > 0 ? (\n        <>\n          <YellowExclamationTriangleIcon />{' '}\n          {t('console-shared~{{count}} resource reached quota', { count: resourcesAtQuota })}\n        </>\n      ) : (\n        t('console-shared~none are at quota')\n      )}\n    </div>\n  );\n};\n\nexport default QuotaSummary;\n","import * as React from 'react';\nimport { K8sResourceKind } from '../../../../module/k8s';\n\nexport const ClusterDashboardContext = React.createContext<ClusterDashboardContext>({\n  infrastructureLoaded: true,\n  infrastructureError: null,\n});\n\n// eslint-disable-next-line no-redeclare\ntype ClusterDashboardContext = {\n  infrastructure?: K8sResourceKind;\n  infrastructureLoaded: boolean;\n  infrastructureError: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { FirehoseResourcesResult } from '@console/internal/components/utils';\nimport { GetOperatorsWithStatuses, LazyLoader, OperatorRowProps } from '@console/plugin-sdk';\nimport { getMostImportantStatuses } from './state-utils';\nimport { HealthState } from './states';\nimport StatusItem, { StatusPopupSection } from './StatusPopup';\n\nimport './operator-body.scss';\n\nexport const OperatorsSection: React.FC<OperatorsSectionProps> = ({\n  resources,\n  getOperatorsWithStatuses,\n  title,\n  linkTo,\n  Row,\n  Component,\n  isResolved,\n}) => {\n  const { t } = useTranslation();\n  const error = _.values(resources).some((r) => r.loadError);\n  const operatorStatuses = getOperatorsWithStatuses(resources);\n  const sortedOperatorStatuses = getMostImportantStatuses(operatorStatuses).sort((a, b) =>\n    a.operators[0].metadata.name.localeCompare(b.operators[0].metadata.name),\n  );\n  const operatorsHealthy = sortedOperatorStatuses.every((o) => o.status.health === HealthState.OK);\n  const RowLoading = React.useCallback(() => <div className=\"co-status__operator-skeleton\" />, []);\n  if (!operatorStatuses.length) {\n    return null;\n  }\n\n  return (\n    <StatusPopupSection\n      firstColumn={\n        <>\n          <span>{title}</span>\n          <span className=\"text-secondary co-status__operator-detail\">\n            {' '}\n            {t('console-shared~({{operatorStatusLength}} installed)', {\n              operatorStatusLength: operatorStatuses.length,\n            })}\n          </span>\n        </>\n      }\n      secondColumn={t('console-shared~Status')}\n    >\n      {error ? (\n        <div className=\"text-secondary\">{t('console-shared~Not available')}</div>\n      ) : (\n        !operatorsHealthy &&\n        sortedOperatorStatuses.map((operatorStatus) => (\n          <Row\n            key={operatorStatus.operators[0].metadata.uid}\n            Component={Component}\n            operatorStatus={operatorStatus}\n            LoadingComponent={RowLoading}\n            isResolved={isResolved}\n          />\n        ))\n      )}\n      <StatusItem\n        value={t('console-shared~All {{status}}', {\n          status: operatorStatuses[0].status.title.toLowerCase(),\n        })}\n        icon={operatorStatuses[0].status.icon}\n      >\n        <Link to={linkTo}>{t('console-shared~View all')}</Link>\n      </StatusItem>\n    </StatusPopupSection>\n  );\n};\n\ntype OperatorsSectionProps = {\n  resources: FirehoseResourcesResult;\n  getOperatorsWithStatuses: GetOperatorsWithStatuses;\n  title: string;\n  linkTo: string;\n  Row: React.ComponentType<\n    OperatorRowProps & {\n      LoadingComponent: () => JSX.Element;\n      Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n      key: string;\n      isResolved: boolean;\n    }\n  >;\n  isResolved: boolean;\n  Component: React.ComponentType<OperatorRowProps> | LazyLoader<OperatorRowProps>;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useTranslation } from 'react-i18next';\nimport {\n  useExtensions,\n  DashboardsOverviewHealthSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthOperator,\n  isDashboardsOverviewHealthSubsystem,\n  isDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthURLSubsystem,\n  isDashboardsOverviewHealthPrometheusSubsystem,\n  isDashboardsOverviewHealthResourceSubsystem,\n  isDashboardsOverviewHealthOperator,\n} from '@console/plugin-sdk';\nimport {\n  DashboardsOverviewHealthSubsystem as DynamicDashboardsOverviewHealthSubsystem,\n  DashboardsOverviewHealthPrometheusSubsystem as DynamicDashboardsOverviewHealthPrometheusSubsystem,\n  DashboardsOverviewHealthURLSubsystem as DynamicDashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewHealthOperator as DynamicDashboardsOverviewHealthOperator,\n  isDashboardsOverviewHealthSubsystem as isDynamicDashboardsOverviewHealthSubsystem,\n  isDashboardsOverviewHealthURLSubsystem as isDynamicDashboardsOverviewHealthURLSubsystem,\n  isDashboardsOverviewHealthPrometheusSubsystem as isDynamicDashboardsOverviewHealthPrometheusSubsystem,\n  isResolvedDashboardsOverviewHealthURLSubsystem,\n  isResolvedDashboardsOverviewHealthPrometheusSubsystem,\n  isResolvedDashboardsOverviewHealthResourceSubsystem,\n  isResolvedDashboardsOverviewHealthOperator,\n  ResolvedExtension,\n  useResolvedExtensions,\n  WatchK8sResource,\n} from '@console/dynamic-plugin-sdk';\nimport { Gallery, GalleryItem, Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { BlueArrowCircleUpIcon, FLAGS, useCanClusterUpgrade } from '@console/shared';\n\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport AlertItem, {\n  StatusItem,\n} from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '../../../monitoring/utils';\nimport {\n  ClusterVersionKind,\n  referenceForModel,\n  hasAvailableUpdates,\n  K8sKind,\n  ObjectMetadata,\n} from '../../../../module/k8s';\nimport { ClusterVersionModel } from '../../../../models';\nimport { RootState } from '../../../../redux';\nimport {\n  OperatorHealthItem,\n  PrometheusHealthItem,\n  URLHealthItem,\n  ResourceHealthItem,\n} from './health-item';\nimport { useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { useNotificationAlerts } from '@console/shared/src/hooks/useNotificationAlerts';\n\nconst filterSubsystems = (\n  subsystems: (\n    | DashboardsOverviewHealthSubsystem\n    | ResolvedExtension<DynamicDashboardsOverviewHealthSubsystem>\n  )[],\n  k8sModels: ImmutableMap<string, K8sKind>,\n) =>\n  subsystems.filter((s) => {\n    if (\n      isDashboardsOverviewHealthURLSubsystem(s) ||\n      isDashboardsOverviewHealthPrometheusSubsystem(s) ||\n      isDynamicDashboardsOverviewHealthURLSubsystem(s) ||\n      isDynamicDashboardsOverviewHealthPrometheusSubsystem(s)\n    ) {\n      const subsystem = s as\n        | DashboardsOverviewHealthPrometheusSubsystem\n        | DashboardsOverviewHealthURLSubsystem\n        | ResolvedExtension<DynamicDashboardsOverviewHealthPrometheusSubsystem>\n        | ResolvedExtension<DynamicDashboardsOverviewHealthURLSubsystem>;\n      return subsystem.properties.additionalResource &&\n        !subsystem.properties.additionalResource.optional\n        ? !!k8sModels.get(subsystem.properties.additionalResource.kind)\n        : true;\n    }\n    return true;\n  });\n\nconst cvResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nexport const DashboardAlerts: React.FC<DashboardAlertsProps> = ({ labelSelector }) => {\n  const { t } = useTranslation();\n  const hasCVResource = useFlag(FLAGS.CLUSTER_VERSION);\n  const [alerts, , loadError] = useNotificationAlerts(labelSelector);\n  const [cv, cvLoaded] = useK8sWatchResource<ClusterVersionKind>(\n    hasCVResource ? cvResource : ({} as WatchK8sResource),\n  );\n  const canUpgrade = useCanClusterUpgrade();\n\n  const showClusterUpdate =\n    canUpgrade && hasCVResource && cvLoaded && hasAvailableUpdates(cv) && !labelSelector;\n  return (\n    <AlertsBody error={!_.isEmpty(loadError)}>\n      {showClusterUpdate && (\n        <StatusItem\n          key=\"clusterUpdate\"\n          Icon={BlueArrowCircleUpIcon}\n          message={t('public~A cluster version update is available')}\n        >\n          <Link to=\"/settings/cluster?showVersions\">{t('public~Update cluster')}</Link>\n        </StatusItem>\n      )}\n      {alerts.map((alert) => (\n        <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />\n      ))}\n    </AlertsBody>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\nexport const StatusCard = connect<StatusCardProps>(mapStateToProps)(({ k8sModels }) => {\n  const subsystemExtensions = useExtensions<DashboardsOverviewHealthSubsystem>(\n    isDashboardsOverviewHealthSubsystem,\n  );\n  const [dynamicSubsystemExtensions] = useResolvedExtensions<\n    DynamicDashboardsOverviewHealthSubsystem\n  >(isDynamicDashboardsOverviewHealthSubsystem);\n\n  const subsystems = React.useMemo(() => {\n    const filteredSubsystems = filterSubsystems(\n      [...subsystemExtensions, ...dynamicSubsystemExtensions],\n      k8sModels,\n    );\n    return filteredSubsystems.map((e) => {\n      if (\n        isResolvedDashboardsOverviewHealthURLSubsystem(e) ||\n        isResolvedDashboardsOverviewHealthPrometheusSubsystem(e) ||\n        isResolvedDashboardsOverviewHealthResourceSubsystem(e)\n      ) {\n        const popup = e.properties.popupComponent\n          ? { popupComponent: () => Promise.resolve(e.properties.popupComponent) }\n          : {};\n        return {\n          ...e,\n          properties: {\n            ...e.properties,\n            ...popup,\n          },\n        };\n      }\n      return e;\n    });\n  }, [subsystemExtensions, dynamicSubsystemExtensions, k8sModels]);\n\n  const operatorSubsystemIndex = React.useMemo(\n    () =>\n      subsystems.findIndex(\n        (e) =>\n          isDashboardsOverviewHealthOperator(e) || isResolvedDashboardsOverviewHealthOperator(e),\n      ),\n    [subsystems],\n  );\n  const { t } = useTranslation();\n  const healthItems: { title: string; Component: React.ReactNode }[] = [];\n  subsystems.forEach((subsystem) => {\n    if (\n      isDashboardsOverviewHealthURLSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthURLSubsystem(subsystem)\n    ) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <URLHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (\n      isDashboardsOverviewHealthPrometheusSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthPrometheusSubsystem(subsystem)\n    ) {\n      const { disallowedControlPlaneTopology } = subsystem.properties;\n      if (\n        disallowedControlPlaneTopology?.length &&\n        disallowedControlPlaneTopology.includes(window.SERVER_FLAGS.controlPlaneTopology)\n      ) {\n        return;\n      }\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <PrometheusHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (\n      isDashboardsOverviewHealthResourceSubsystem(subsystem) ||\n      isResolvedDashboardsOverviewHealthResourceSubsystem(subsystem)\n    ) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <ResourceHealthItem subsystem={subsystem.properties} />,\n      });\n    }\n  });\n\n  if (operatorSubsystemIndex !== -1) {\n    const operatorSubsystems: DashboardsOverviewHealthOperator['properties'][] = [];\n    const dynamicOperatorSubsystems: ResolvedExtension<\n      DynamicDashboardsOverviewHealthOperator\n    >['properties'][] = [];\n    subsystems.forEach((e) => {\n      if (isResolvedDashboardsOverviewHealthOperator(e)) {\n        dynamicOperatorSubsystems.push(e.properties);\n      } else if (isDashboardsOverviewHealthOperator(e)) {\n        operatorSubsystems.push(e.properties);\n      }\n    });\n    healthItems.splice(operatorSubsystemIndex, 0, {\n      title: 'Operators',\n      Component: (\n        <OperatorHealthItem\n          operatorExtensions={operatorSubsystems}\n          dynamicOperatorSubsystems={dynamicOperatorSubsystems}\n        />\n      ),\n    });\n  }\n\n  return (\n    <Card\n      data-test-id=\"status-card\"\n      className=\"co-overview-card--gradient\"\n      isClickable\n      isSelectable\n    >\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to=\"/monitoring/alerts\" data-test=\"status-card-view-alerts\">\n                {t('public~View alerts')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('public~Status')}</CardTitle>\n      </CardHeader>\n      <HealthBody>\n        <Gallery className=\"co-overview-status__health\" hasGutter>\n          {healthItems.map((item) => {\n            return (\n              <GalleryItem key={item.title} data-test={item.title}>\n                {item.Component}\n              </GalleryItem>\n            );\n          })}\n        </Gallery>\n      </HealthBody>\n      <DashboardAlerts />\n    </Card>\n  );\n});\n\ntype StatusCardProps = {\n  k8sModels: ImmutableMap<string, K8sKind>;\n};\n\ntype DashboardAlertsProps = {\n  labelSelector?: ObjectMetadata['labels'];\n};\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { useActivePerspective } from '@console/dynamic-plugin-sdk';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ConsoleLinkModel } from '@console/internal/models';\nimport { K8sResourceKind, LabelSelector, referenceForModel, Selector } from '../../../module/k8s';\nimport { DetailsCard } from './details-card';\nimport { StatusCard } from './status-card';\nimport { UtilizationCard } from './utilization-card';\nimport { InventoryCard } from './inventory-card';\nimport { ActivityCard } from './activity-card';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { LauncherCard } from './launcher-card';\nimport { ResourceQuotaCard } from './resource-quota-card';\n\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }, { Card: ResourceQuotaCard }];\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nexport const getNamespaceDashboardConsoleLinks = (\n  ns: K8sResourceKind,\n  consoleLinks: K8sResourceKind[],\n): K8sResourceKind[] => {\n  return _.filter(consoleLinks, (link: K8sResourceKind): boolean => {\n    if (link.spec.location !== 'NamespaceDashboard') {\n      return false;\n    }\n\n    const namespaces: string[] = _.get(link, 'spec.namespaceDashboard.namespaces');\n    const selector: Selector = _.get(link, 'spec.namespaceDashboard.namespaceSelector');\n\n    // If neither namespaces or selector was provided, show the link for all namespaces.\n    if (_.isEmpty(namespaces) && _.isEmpty(selector)) {\n      return true;\n    }\n\n    // Show the link if either namespaces or the selector matches this namespace.\n    if (_.includes(namespaces, ns.metadata.name)) {\n      return true;\n    }\n\n    return !_.isEmpty(selector) && new LabelSelector(selector).matches(ns);\n  });\n};\n\nexport const ProjectDashboard: React.FC<ProjectDashboardProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const [perspective] = useActivePerspective();\n  const [consoleLinks] = useK8sWatchResource<K8sResourceKind[]>({\n    isList: true,\n    kind: referenceForModel(ConsoleLinkModel),\n    optional: true,\n  });\n  const namespaceLinks = getNamespaceDashboardConsoleLinks(obj, consoleLinks);\n  const context = {\n    obj,\n    namespaceLinks,\n  };\n\n  const hasNamespaceLinks = !!namespaceLinks.length;\n\n  const rc = React.useMemo(\n    () => (hasNamespaceLinks ? [{ Card: LauncherCard }, ...rightCards] : rightCards),\n    [hasNamespaceLinks],\n  );\n\n  return (\n    <>\n      {perspective === 'dev' && (\n        <Helmet>\n          <title>{t('public~Project overview')}</title>\n        </Helmet>\n      )}\n      <ProjectDashboardContext.Provider value={context}>\n        <Dashboard>\n          <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rc} />\n        </Dashboard>\n      </ProjectDashboardContext.Provider>\n    </>\n  );\n};\n\ntype ProjectDashboardProps = {\n  obj: K8sResourceKind;\n};\n","import { createIcon } from '../createIcon';\n\nexport const OutlinedCircleIconConfig = {\n  name: 'OutlinedCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedCircleIcon = createIcon(OutlinedCircleIconConfig);\n\nexport default OutlinedCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const ResourcesAlmostEmptyIconConfig = {\n  name: 'ResourcesAlmostEmptyIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,0 C229.7,0 0,229.8 0,512 C0,794.3 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0 Z M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.7,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 Z M254,640 C301.1,734.8 399,800 512,800 C625,800 722.9,734.8 770,640 L254,640 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ResourcesAlmostEmptyIcon = createIcon(ResourcesAlmostEmptyIconConfig);\n\nexport default ResourcesAlmostEmptyIcon;","import * as React from 'react';\nimport { AsyncComponent } from '../utils';\n\nexport const OverviewListPageLoader = () =>\n  import('./OverviewListPage' /* webpackChunkName: \"overview-list-page\" */).then(\n    (m) => m.OverviewListPage,\n  );\n\nexport const OverviewListPage: React.FC = (props) => {\n  return <AsyncComponent loader={OverviewListPageLoader} {...props} />;\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport cx from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardBody, CardHeader, CardTitle, Button } from '@patternfly/react-core';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport { OverviewDetailItem } from '@openshift-console/plugin-shared/src';\nimport { getName, getRequester, GreenCheckCircleIcon } from '@console/shared';\nimport { LabelList, resourcePathFromModel } from '../../utils';\nimport { ProjectModel } from '../../../models';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { Link } from 'react-router-dom-v5-compat';\n\nexport const DetailsCard: React.FC = () => {\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const keys = _.keys(obj.metadata.labels).sort();\n  const labelsSubset = _.take(keys, 3);\n  const firstThreelabels = _.pick(obj.metadata.labels, labelsSubset);\n  const description = obj.metadata.annotations?.['openshift.io/description'];\n  const detailsLink = `${resourcePathFromModel(ProjectModel, obj.metadata.name)}/details`;\n  const serviceMeshEnabled = obj.metadata?.labels?.['maistra.io/member-of'];\n  const { t } = useTranslation();\n  return (\n    <Card data-test-id=\"details-card\" isClickable isSelectable>\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to={detailsLink} data-test=\"details-card-view-all\">\n                {t('public~View all')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('public~Details')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <DetailsBody>\n          <OverviewDetailItem isLoading={!obj} title={t('public~Name')}>\n            {getName(obj)}\n          </OverviewDetailItem>\n          <OverviewDetailItem isLoading={!obj} title={t('public~Requester')}>\n            {getRequester(obj) || <span className=\"text-muted\">{t('public~No requester')}</span>}\n          </OverviewDetailItem>\n          <OverviewDetailItem isLoading={!obj} title={t('public~Labels')}>\n            <div className=\"co-project-dashboard__details-labels\">\n              <LabelList kind={ProjectModel.kind} labels={firstThreelabels} />\n              {keys.length > 3 && (\n                <Button variant=\"link\">\n                  <Link to={detailsLink}>{t('public~View all')}</Link>\n                </Button>\n              )}\n            </div>\n          </OverviewDetailItem>\n          <OverviewDetailItem isLoading={!obj} title={t('public~Description')}>\n            <span\n              className={cx({\n                'text-muted': !description,\n                'co-project-dashboard-details-card__description': description,\n              })}\n            >\n              {description || t('public~No description')}\n            </span>\n          </OverviewDetailItem>\n          {serviceMeshEnabled && (\n            <OverviewDetailItem isLoading={!obj} title={t('public~Service mesh')}>\n              <GreenCheckCircleIcon /> {t('public~Service mesh enabled')}\n            </OverviewDetailItem>\n          )}\n        </DetailsBody>\n      </CardBody>\n    </Card>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardHeader, CardTitle, Gallery } from '@patternfly/react-core';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport { Status } from '@console/shared';\nimport { LoadingInline } from '@console/internal/components/utils/status-box';\nimport {\n  DashboardsOverviewHealthResourceSubsystem,\n  DashboardsOverviewHealthSubsystem,\n  isDashboardsOverviewHealthResourceSubsystem,\n  isDashboardsOverviewHealthSubsystem,\n  useExtensions,\n} from '@console/plugin-sdk';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { ResourceHealthItem } from '../dashboards-page/cluster-dashboard/health-item';\n\nimport { DashboardAlerts } from '../dashboards-page/cluster-dashboard/status-card';\n\nexport const StatusCard: React.FC = () => {\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const filterSubsystems = (subsystems: DashboardsOverviewHealthSubsystem[]) =>\n    subsystems.filter(isDashboardsOverviewHealthResourceSubsystem);\n  const subsystemExtensions = useExtensions<DashboardsOverviewHealthSubsystem>(\n    isDashboardsOverviewHealthSubsystem,\n  );\n  const subsystem: DashboardsOverviewHealthResourceSubsystem = React.useMemo(\n    () =>\n      filterSubsystems(subsystemExtensions).find(\n        (s) => s.properties.title === 'Image Vulnerabilities',\n      ),\n    [subsystemExtensions],\n  );\n  const {\n    metadata: { name: namespace },\n  } = obj;\n  const { t } = useTranslation();\n\n  return (\n    <Card data-test-id=\"status-card\" className=\"co-overview-card--gradient\">\n      <CardHeader>\n        <CardTitle>{t('public~Status')}</CardTitle>\n      </CardHeader>\n      {obj ? (\n        <>\n          <HealthBody>\n            <Gallery className=\"co-overview-status__health\" hasGutter>\n              <div className=\"co-status-card__health-item\" data-test=\"project-status\">\n                <Status status={obj.status?.phase} className=\"co-icon-and-text--lg\" />\n              </div>\n              {subsystem && (\n                <ResourceHealthItem subsystem={subsystem.properties} namespace={namespace} />\n              )}\n            </Gallery>\n          </HealthBody>\n          <DashboardAlerts labelSelector={{ namespace }} />\n        </>\n      ) : (\n        <LoadingInline />\n      )}\n    </Card>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport {\n  isProjectOverviewUtilizationItem,\n  ProjectOverviewUtilizationItem,\n  useResolvedExtensions,\n} from '@console/dynamic-plugin-sdk/src';\nimport {\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n  humanizeNumber,\n} from '../../utils';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport {\n  getUtilizationQueries,\n  ProjectQueries,\n  getMultilineQueries,\n} from '@console/shared/src/promql/project-dashboard';\nimport {\n  PrometheusUtilizationItem,\n  PrometheusMultilineUtilizationItem,\n} from '../dashboards-page/cluster-dashboard/utilization-card';\nimport { UtilizationDurationDropdown } from '@console/shared/src/components/dashboard/utilization-card/UtilizationDurationDropdown';\nimport {\n  CPUPopover,\n  FilesystemPopover,\n  MemoryPopover,\n  NetworkInPopover,\n  NetworkOutPopover,\n  ProjectUtilizationContext,\n} from './utilization-popovers';\n\nconst networkPopovers = [NetworkInPopover, NetworkOutPopover];\n\nexport const UtilizationCard: React.FC = () => {\n  const { t } = useTranslation();\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = obj?.metadata?.name;\n  const [queries, multilineQueries] = React.useMemo(\n    () => [getUtilizationQueries(projectName), getMultilineQueries(projectName)],\n    [projectName],\n  );\n\n  const [dynamicItemExtensions] = useResolvedExtensions<ProjectOverviewUtilizationItem>(\n    isProjectOverviewUtilizationItem,\n  );\n\n  return (\n    <Card data-test-id=\"utilization-card\" isClickable isSelectable>\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <UtilizationDurationDropdown />\n            </>\n          ),\n          hasNoOffset: false,\n          className: undefined,\n        }}\n      >\n        <CardTitle>{t('public~Utilization')}</CardTitle>\n      </CardHeader>\n      <UtilizationBody>\n        <ProjectUtilizationContext.Provider value={projectName}>\n          <PrometheusUtilizationItem\n            title={t('public~CPU')}\n            humanizeValue={humanizeCpuCores}\n            utilizationQuery={queries[ProjectQueries.CPU_USAGE]}\n            requestQuery={queries[ProjectQueries.CPU_REQUESTS]}\n            TopConsumerPopover={CPUPopover}\n            namespace={projectName}\n          />\n          <PrometheusUtilizationItem\n            title={t('public~Memory')}\n            humanizeValue={humanizeBinaryBytes}\n            utilizationQuery={queries[ProjectQueries.MEMORY_USAGE]}\n            requestQuery={queries[ProjectQueries.MEMORY_REQUESTS]}\n            byteDataType={ByteDataTypes.BinaryBytes}\n            TopConsumerPopover={MemoryPopover}\n            namespace={projectName}\n          />\n          <PrometheusUtilizationItem\n            title={t('public~Filesystem')}\n            humanizeValue={humanizeBinaryBytes}\n            utilizationQuery={queries[ProjectQueries.FILESYSTEM_USAGE]}\n            byteDataType={ByteDataTypes.BinaryBytes}\n            TopConsumerPopover={FilesystemPopover}\n            namespace={projectName}\n          />\n          <PrometheusMultilineUtilizationItem\n            title={t('public~Network transfer')}\n            humanizeValue={humanizeDecimalBytesPerSec}\n            queries={multilineQueries[ProjectQueries.NETWORK_UTILIZATION]}\n            TopConsumerPopovers={networkPopovers}\n            namespace={projectName}\n          />\n          <PrometheusUtilizationItem\n            title={t('public~Pod count')}\n            humanizeValue={humanizeNumber}\n            utilizationQuery={queries[ProjectQueries.POD_COUNT]}\n            namespace={projectName}\n          />\n          {dynamicItemExtensions.map(({ uid, properties }) => (\n            <PrometheusUtilizationItem\n              key={uid}\n              title={properties.title}\n              humanizeValue={properties.humanize}\n              utilizationQuery={properties.getUtilizationQuery(projectName)}\n              requestQuery={properties.getRequestQuery?.(projectName)}\n              limitQuery={properties.getLimitQuery?.(projectName)}\n              totalQuery={properties.getTotalQuery?.(projectName)}\n              namespace={projectName}\n              TopConsumerPopover={properties.TopConsumerPopover}\n            />\n          ))}\n        </ProjectUtilizationContext.Provider>\n      </UtilizationBody>\n    </Card>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TopConsumerPopoverProps } from '@console/dynamic-plugin-sdk';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport {\n  ProjectQueries,\n  getTopConsumerQueries,\n} from '@console/shared/src/promql/project-dashboard';\nimport { PodModel } from '../../../models';\nimport { humanizeCpuCores, humanizeBinaryBytes, humanizeDecimalBytesPerSec } from '../../utils';\n\nexport const ProjectUtilizationContext = React.createContext('');\n\nconst useConsumers = (query: ProjectQueries) => {\n  const namespace = React.useContext(ProjectUtilizationContext);\n  const consumers = React.useMemo(\n    () => [\n      {\n        query: getTopConsumerQueries(namespace)[query],\n        model: PodModel,\n        metric: 'pod',\n      },\n    ],\n    [query, namespace],\n  );\n  return {\n    consumers,\n    namespace,\n  };\n};\n\nexport const CPUPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(ProjectQueries.PODS_BY_CPU);\n  return (\n    <ConsumerPopover\n      title={t('public~CPU')}\n      current={current}\n      humanize={humanizeCpuCores}\n      {...consumers}\n    />\n  );\n};\n\nexport const MemoryPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(ProjectQueries.PODS_BY_MEMORY);\n  return (\n    <ConsumerPopover\n      title={t('public~Memory')}\n      current={current}\n      humanize={humanizeBinaryBytes}\n      {...consumers}\n    />\n  );\n};\n\nexport const FilesystemPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(ProjectQueries.PODS_BY_FILESYSTEM);\n  return (\n    <ConsumerPopover\n      title={t('public~Filesystem')}\n      current={current}\n      humanize={humanizeBinaryBytes}\n      {...consumers}\n    />\n  );\n};\n\nexport const NetworkInPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(ProjectQueries.PODS_BY_NETWORK_IN);\n  return (\n    <ConsumerPopover\n      title={t('public~Network in')}\n      current={current}\n      humanize={humanizeDecimalBytesPerSec}\n      {...consumers}\n    />\n  );\n};\n\nexport const NetworkOutPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(ProjectQueries.PODS_BY_NETWORK_OUT);\n  return (\n    <ConsumerPopover\n      title={t('public~Network out')}\n      current={current}\n      humanize={humanizeDecimalBytesPerSec}\n      {...consumers}\n    />\n  );\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { DashboardItemProps, withDashboardResources } from '../with-dashboard-resources';\nimport { Card, CardBody, CardHeader, CardTitle, Stack, StackItem } from '@patternfly/react-core';\nimport {\n  PodModel,\n  DeploymentModel,\n  DeploymentConfigModel,\n  PersistentVolumeClaimModel,\n  ServiceModel,\n  StatefulSetModel,\n  RouteModel,\n  ConfigMapModel,\n  SecretModel,\n  VolumeSnapshotModel,\n} from '../../../models';\nimport {\n  ResourceInventoryItem,\n  StatusGroupMapper,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport {\n  getPodStatusGroups,\n  getPVCStatusGroups,\n  getVSStatusGroups,\n} from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { FirehoseResult, FirehoseResource, useAccessReview } from '../../utils';\nimport { K8sKind, referenceForModel } from '../../../module/k8s';\nimport { getName } from '@console/shared';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport {\n  useExtensions,\n  ProjectDashboardInventoryItem,\n  isProjectDashboardInventoryItem,\n} from '@console/plugin-sdk';\nimport {\n  useResolvedExtensions,\n  DashboardsProjectOverviewInventoryItem as DynamicProjectDashboardInventoryItem,\n  isDashboardsProjectOverviewInventoryItem as isDynamicProjectDashboardInventoryItem,\n  K8sResourceCommon,\n  WatchK8sResources,\n  ProjectOverviewInventoryItem,\n  isProjectOverviewInventoryItem,\n} from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ErrorBoundary } from '@console/shared/src/components/error';\n\nconst createFirehoseResource = (model: K8sKind, projectName: string): FirehoseResource => ({\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  isList: true,\n  prop: 'resource',\n  namespace: projectName,\n});\n\nconst ProjectInventoryItem = withDashboardResources(\n  ({\n    projectName,\n    watchK8sResource,\n    stopWatchK8sResource,\n    resources,\n    model,\n    mapper,\n    additionalResources,\n    additionalDynamicResources,\n  }: ProjectInventoryItemProps) => {\n    React.useEffect(() => {\n      if (projectName) {\n        const resource = createFirehoseResource(model, projectName);\n        watchK8sResource(resource);\n        if (additionalResources) {\n          additionalResources.forEach((r) => watchK8sResource({ ...r, namespace: projectName }));\n        }\n        return () => {\n          stopWatchK8sResource(resource);\n          if (additionalResources) {\n            additionalResources.forEach(stopWatchK8sResource);\n          }\n        };\n      }\n    }, [watchK8sResource, stopWatchK8sResource, projectName, model, additionalResources]);\n\n    const resourceData = _.get(resources.resource, 'data', []) as FirehoseResult['data'];\n    const resourceLoaded = _.get(resources.resource, 'loaded');\n    const resourceLoadError = _.get(resources.resource, 'loadError');\n\n    const additionalResourcesData = additionalResources\n      ? additionalResources.reduce((acc, r) => {\n          acc[r.prop] = _.get(resources[r.prop], 'data');\n          return acc;\n        }, {})\n      : {};\n    const additionalResourcesLoaded = additionalResources\n      ? additionalResources\n          .filter((r) => !r.optional)\n          .every((r) => _.get(resources[r.prop], 'loaded'))\n      : true;\n    const additionalResourcesLoadError = additionalResources\n      ? additionalResources\n          .filter((r) => !r.optional)\n          .some((r) => !!_.get(resources[r.prop], 'loadError'))\n      : false;\n\n    const dynamicResources = useK8sWatchResources(additionalDynamicResources || {});\n    const dynamicResourcesError = Object.values(dynamicResources).find((r) => r.loadError)\n      ?.loadError;\n    const dynamicResourcesLoaded = Object.keys(dynamicResources).every(\n      (key) => dynamicResources[key].loaded,\n    );\n\n    return (\n      <StackItem>\n        <ResourceInventoryItem\n          kind={model}\n          isLoading={\n            !projectName || !resourceLoaded || !additionalResourcesLoaded || !dynamicResourcesLoaded\n          }\n          namespace={projectName}\n          error={!!resourceLoadError || additionalResourcesLoadError || dynamicResourcesError}\n          resources={resourceData}\n          additionalResources={additionalResourcesData}\n          mapper={mapper}\n          dataTest=\"resource-inventory-item\"\n        />\n      </StackItem>\n    );\n  },\n);\n\nexport const InventoryCard = () => {\n  const itemExtensions = useExtensions<ProjectDashboardInventoryItem>(\n    isProjectDashboardInventoryItem,\n  );\n  const [dynamicItemExtensions] = useResolvedExtensions<DynamicProjectDashboardInventoryItem>(\n    isDynamicProjectDashboardInventoryItem,\n  );\n  const [inventoryExtensions] = useResolvedExtensions<ProjectOverviewInventoryItem>(\n    isProjectOverviewInventoryItem,\n  );\n\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = getName(obj);\n  const canListSecrets = useAccessReview({\n    group: SecretModel.apiGroup,\n    resource: SecretModel.plural,\n    namespace: projectName,\n    verb: 'list',\n  });\n  const { t } = useTranslation();\n\n  return (\n    <Card data-test-id=\"inventory-card\">\n      <CardHeader>\n        <CardTitle>{t('public~Inventory')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Stack hasGutter>\n          <ProjectInventoryItem projectName={projectName} model={DeploymentModel} />\n          <ProjectInventoryItem projectName={projectName} model={DeploymentConfigModel} />\n          <ProjectInventoryItem projectName={projectName} model={StatefulSetModel} />\n          <ProjectInventoryItem\n            projectName={projectName}\n            model={PodModel}\n            mapper={getPodStatusGroups}\n          />\n          <ProjectInventoryItem\n            projectName={projectName}\n            model={PersistentVolumeClaimModel}\n            mapper={getPVCStatusGroups}\n          />\n          <ProjectInventoryItem projectName={projectName} model={ServiceModel} />\n          <ProjectInventoryItem projectName={projectName} model={RouteModel} />\n          <ProjectInventoryItem projectName={projectName} model={ConfigMapModel} />\n          {canListSecrets && <ProjectInventoryItem projectName={projectName} model={SecretModel} />}\n          <ProjectInventoryItem\n            projectName={projectName}\n            model={VolumeSnapshotModel}\n            mapper={getVSStatusGroups}\n          />\n          {itemExtensions.map((item) => (\n            <ProjectInventoryItem\n              key={item.properties.model.kind}\n              projectName={projectName}\n              model={item.properties.model}\n              mapper={item.properties.mapper}\n              additionalResources={item.properties.additionalResources}\n            />\n          ))}\n          {dynamicItemExtensions.map((item) => (\n            <ProjectInventoryItem\n              key={item.properties.model.kind}\n              projectName={projectName}\n              model={item.properties.model}\n              mapper={item.properties.mapper}\n              additionalDynamicResources={item.properties.additionalResources}\n            />\n          ))}\n          {inventoryExtensions.map(({ uid, properties: { component: Component } }) => (\n            <ErrorBoundary key={uid}>\n              <StackItem>\n                <Component projectName={projectName} />\n              </StackItem>\n            </ErrorBoundary>\n          ))}\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\ntype ProjectInventoryItemProps = DashboardItemProps & {\n  projectName: string;\n  model: K8sKind;\n  mapper?: StatusGroupMapper;\n  additionalResources?: FirehoseResource[];\n  additionalDynamicResources?: WatchK8sResources<{\n    [key: string]: K8sResourceCommon[];\n  }>;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Map as ImmutableMap } from 'immutable';\nimport { connect } from 'react-redux';\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport ActivityBody, {\n  RecentEventsBody,\n  OngoingActivityBody,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { DashboardItemProps, withDashboardResources } from '../with-dashboard-resources';\nimport { FirehoseResource, FirehoseResult } from '../../utils';\nimport { EventModel } from '../../../models';\nimport { EventKind, K8sKind } from '../../../module/k8s';\nimport {\n  useExtensions,\n  DashboardsOverviewResourceActivity,\n  isDashboardsOverviewResourceActivity,\n} from '@console/plugin-sdk';\nimport {\n  useResolvedExtensions,\n  DashboardsOverviewResourceActivity as DynamicDashboardsOverviewResourceActivity,\n  isDashboardsOverviewResourceActivity as isDynamicDashboardsOverviewResourceActivity,\n  ResolvedExtension,\n} from '@console/dynamic-plugin-sdk';\nimport { uniqueResource } from '../dashboards-page/cluster-dashboard/utils';\nimport { RootState } from '../../../redux';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { getName } from '@console/shared';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\n\nconst getEventsResource = (projectName: string): FirehoseResource => ({\n  isList: true,\n  kind: EventModel.kind,\n  prop: 'events',\n  namespace: projectName,\n});\n\nconst RecentEvent = withDashboardResources<RecentEventProps>(\n  ({ watchK8sResource, stopWatchK8sResource, resources, projectName, viewEvents }) => {\n    React.useEffect(() => {\n      if (projectName) {\n        const eventsResource = getEventsResource(projectName);\n        watchK8sResource(eventsResource);\n        return () => {\n          stopWatchK8sResource(eventsResource);\n        };\n      }\n    }, [watchK8sResource, stopWatchK8sResource, projectName]);\n    return (\n      <RecentEventsBody\n        events={resources.events as FirehoseResult<EventKind[]>}\n        moreLink={viewEvents}\n      />\n    );\n  },\n);\n\nconst mapStateToProps = (state: RootState): OngoingActivityReduxProps => ({\n  models: state.k8s.getIn(['RESOURCES', 'models']) as ImmutableMap<string, K8sKind>,\n});\n\nconst OngoingActivity = connect(mapStateToProps)(\n  withDashboardResources(\n    ({\n      watchK8sResource,\n      stopWatchK8sResource,\n      resources,\n      projectName,\n      models,\n    }: DashboardItemProps & OngoingActivityProps) => {\n      const resourceActivityExtensions = useExtensions<DashboardsOverviewResourceActivity>(\n        isDashboardsOverviewResourceActivity,\n      );\n      const [dynamicResourceActivityExtensions] = useResolvedExtensions<\n        DynamicDashboardsOverviewResourceActivity\n      >(isDynamicDashboardsOverviewResourceActivity);\n\n      const resourceActivities = React.useMemo(\n        () =>\n          [...resourceActivityExtensions, ...dynamicResourceActivityExtensions].filter((e) => {\n            const model = models.get(e.properties.k8sResource.kind);\n            return model && model.namespaced;\n          }),\n        [resourceActivityExtensions, dynamicResourceActivityExtensions, models],\n      );\n\n      React.useEffect(() => {\n        if (projectName) {\n          resourceActivities.forEach((a, index) => {\n            watchK8sResource(\n              uniqueResource({ ...a.properties.k8sResource, namespace: projectName }, index),\n            );\n          });\n          return () => {\n            resourceActivities.forEach((a, index) => {\n              stopWatchK8sResource(uniqueResource(a.properties.k8sResource, index));\n            });\n          };\n        }\n      }, [watchK8sResource, stopWatchK8sResource, projectName, resourceActivities]);\n\n      const allResourceActivities = React.useMemo(\n        () =>\n          _.flatten(\n            resourceActivities.map((a, index) => {\n              const k8sResources = _.get(\n                resources,\n                [uniqueResource(a.properties.k8sResource, index).prop, 'data'],\n                [],\n              ) as FirehoseResult['data'];\n              return k8sResources\n                .filter((r) => (a.properties.isActivity ? a.properties.isActivity(r) : true))\n                .map((r) => ({\n                  resource: r,\n                  timestamp: a.properties.getTimestamp ? a.properties.getTimestamp(r) : null,\n                  loader: (a as DashboardsOverviewResourceActivity)?.properties?.loader,\n                  component: (a as ResolvedExtension<DynamicDashboardsOverviewResourceActivity>)\n                    ?.properties?.component,\n                }));\n            }),\n          ),\n        [resourceActivities, resources],\n      );\n\n      const resourcesLoaded = React.useMemo(\n        () =>\n          resourceActivities.every((a, index) =>\n            _.get(resources, [uniqueResource(a.properties.k8sResource, index).prop, 'loaded']),\n          ),\n        [resourceActivities, resources],\n      );\n\n      return (\n        <OngoingActivityBody\n          loaded={projectName && resourcesLoaded && models.size !== 0}\n          resourceActivities={allResourceActivities}\n        />\n      );\n    },\n  ),\n);\n\nexport const ActivityCard: React.FC = () => {\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = getName(obj);\n  const viewEvents = `/k8s/ns/${projectName}/events`;\n  const { t } = useTranslation();\n  return (\n    <Card\n      data-test-id=\"activity-card\"\n      className=\"co-overview-card--gradient\"\n      isClickable\n      isSelectable\n    >\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link to={viewEvents} data-test=\"view-events-link\">\n                {t('public~View events')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('public~Activity')}</CardTitle>\n      </CardHeader>\n      <ActivityBody className=\"co-project-dashboard__activity-body\">\n        <OngoingActivity projectName={projectName} />\n        <RecentEvent projectName={projectName} viewEvents={viewEvents} />\n      </ActivityBody>\n    </Card>\n  );\n};\n\ntype RecentEventProps = DashboardItemProps & {\n  projectName: string;\n  viewEvents: string;\n};\n\ntype OngoingActivityReduxProps = {\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype OngoingActivityProps = OngoingActivityReduxProps & {\n  projectName: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardBody, CardHeader, CardTitle } from '@patternfly/react-core';\nimport LauncherBody from '@console/shared/src/components/dashboard/launcher-card/LauncherBody';\nimport LauncherItem from '@console/shared/src/components/dashboard/launcher-card/LauncherItem';\nimport { ProjectDashboardContext } from './project-dashboard-context';\n\nexport const LauncherCard: React.FC = () => {\n  const { namespaceLinks } = React.useContext(ProjectDashboardContext);\n  const { t } = useTranslation();\n  return (\n    <Card data-test-id=\"launcher-card\">\n      <CardHeader>\n        <CardTitle>{t('public~Launcher')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <LauncherBody>\n          {_.sortBy(namespaceLinks, 'spec.text').map((nl) => (\n            <LauncherItem key={nl.metadata.uid} consoleLink={nl} />\n          ))}\n        </LauncherBody>\n      </CardBody>\n    </Card>\n  );\n};\n","import * as React from 'react';\n\nimport './launcher-card.scss';\n\nconst LauncherBody: React.FC = ({ children }) => (\n  <div className=\"co-launcher-card__body\">{children}</div>\n);\n\nexport default LauncherBody;\n","import * as React from 'react';\nimport { ExternalLink } from '@console/internal/components/utils/link';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nconst LauncherItem: React.FC<LauncherItemProps> = ({ consoleLink }) => (\n  <ExternalLink\n    additionalClassName=\"co-launcher-card__item\"\n    href={consoleLink.spec.href}\n    text={consoleLink.spec.text}\n    dataTestID=\"launcher-item\"\n  />\n);\n\nexport default LauncherItem;\n\ntype LauncherItemProps = {\n  consoleLink: K8sResourceKind;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Card, CardBody, CardHeader, CardTitle, Stack, StackItem } from '@patternfly/react-core';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport ResourceQuotaBody from '@console/shared/src/components/dashboard/resource-quota-card/ResourceQuotaBody';\nimport ResourceQuotaItem from '@console/shared/src/components/dashboard/resource-quota-card/ResourceQuotaItem';\nimport AppliedClusterResourceQuotaItem from '@console/shared/src/components/dashboard/resource-quota-card/AppliedClusterResourceQuotaItem';\nimport { AppliedClusterResourceQuotaModel, ResourceQuotaModel } from '../../../models';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { ResourceQuotaKind, AppliedClusterResourceQuotaKind } from '../../../module/k8s';\n\nexport const ResourceQuotaCard = () => {\n  const { obj } = React.useContext(ProjectDashboardContext);\n\n  const [quotas, rqLoaded, rqLoadError] = useK8sWatchResource<ResourceQuotaKind[]>({\n    groupVersionKind: {\n      kind: ResourceQuotaModel.kind,\n      version: ResourceQuotaModel.apiVersion,\n    },\n    namespace: obj.metadata.name,\n    isList: true,\n  });\n\n  const [clusterQuotas, acrqLoaded, acrqLoadError] = useK8sWatchResource<\n    AppliedClusterResourceQuotaKind[]\n  >({\n    groupVersionKind: {\n      kind: AppliedClusterResourceQuotaModel.kind,\n      version: AppliedClusterResourceQuotaModel.apiVersion,\n      group: AppliedClusterResourceQuotaModel.apiGroup,\n    },\n    namespace: obj.metadata.name,\n    isList: true,\n  });\n\n  const { t } = useTranslation();\n\n  return (\n    <Card data-test-id=\"resource-quotas-card\">\n      <CardHeader>\n        <CardTitle>{t('public~ResourceQuotas')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <ResourceQuotaBody error={!!rqLoadError} isLoading={!rqLoaded}>\n          {quotas.length ? (\n            <Stack hasGutter>\n              {quotas.map((rq) => (\n                <StackItem key={rq.metadata.uid}>\n                  <ResourceQuotaItem resourceQuota={rq} />\n                </StackItem>\n              ))}\n            </Stack>\n          ) : undefined}\n        </ResourceQuotaBody>\n      </CardBody>\n      <CardHeader>\n        <CardTitle>{t('public~AppliedClusterResourceQuotas')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <ResourceQuotaBody\n          error={!!acrqLoadError}\n          isLoading={!acrqLoaded}\n          noText={t('public~No AppliedClusterResourceQuotas')}\n        >\n          {clusterQuotas.length ? (\n            <Stack hasGutter>\n              {clusterQuotas.map((cq) => (\n                <StackItem key={cq.metadata.uid}>\n                  <AppliedClusterResourceQuotaItem\n                    resourceQuota={cq}\n                    namespace={obj.metadata.name}\n                  />\n                </StackItem>\n              ))}\n            </Stack>\n          ) : undefined}\n        </ResourceQuotaBody>\n      </CardBody>\n    </Card>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport './resource-quota-card.scss';\n\nconst ResourceQuotaBody: React.FC<ResourceQuotaBodyProps> = ({\n  error,\n  isLoading,\n  noText,\n  children,\n}) => {\n  let body: React.ReactNode;\n  const { t } = useTranslation();\n  if (error) {\n    body = <div className=\"text-secondary\">{t('console-shared~Not available')}</div>;\n  } else if (isLoading) {\n    body = <div className=\"skeleton-quota\" />;\n  } else if (!React.Children.count(children)) {\n    body = <div className=\"text-secondary\">{noText || t('console-shared~No ResourceQuotas')}</div>;\n  }\n\n  return <>{body || children}</>;\n};\n\nexport default ResourceQuotaBody;\n\ntype ResourceQuotaBodyProps = {\n  error: boolean;\n  isLoading: boolean;\n  noText?: string;\n};\n","import * as React from 'react';\nimport { ExpandableSection, Split, SplitItem } from '@patternfly/react-core';\nimport ResourceQuotaCharts from '@console/app/src/components/resource-quota/ResourceQuotaCharts';\nimport { QuotaScopesInline } from '@console/internal/components/resource-quota';\nimport { ResourceLink } from '@console/internal/components/utils/resource-link';\nimport { ResourceQuotaModel } from '@console/internal/models';\nimport { ResourceQuotaKind } from '@console/internal/module/k8s';\nimport QuotaSummary from './QuotaSummary';\n\nconst ResourceQuotaItem: React.FC<ResourceQuotaItemProps> = ({ resourceQuota }) => {\n  const resources = Object.keys(resourceQuota.status?.hard ?? {});\n  const [isExpanded, setExpanded] = React.useState(resources.length <= 4);\n\n  const scopes = resourceQuota.spec?.scopes;\n  return (\n    <>\n      <Split hasGutter>\n        <SplitItem isFilled>\n          <ExpandableSection\n            onToggle={(_event, isOpen) => setExpanded(isOpen)}\n            isExpanded={isExpanded}\n            toggleContent={\n              <ResourceLink\n                groupVersionKind={{\n                  kind: ResourceQuotaModel.kind,\n                  version: ResourceQuotaModel.apiVersion,\n                }}\n                name={resourceQuota.metadata.name}\n                namespace={resourceQuota.metadata.namespace}\n                inline\n                truncate\n                dataTest=\"resource-quota-link\"\n              />\n            }\n          />\n        </SplitItem>\n        <SplitItem>\n          <QuotaSummary hard={resourceQuota.status?.hard} used={resourceQuota.status?.used} />\n        </SplitItem>\n      </Split>\n      {isExpanded && (\n        <>\n          {scopes && <QuotaScopesInline scopes={scopes} />}\n          <ResourceQuotaCharts resourceQuota={resourceQuota} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ResourceQuotaItem;\n\ntype ResourceQuotaItemProps = {\n  resourceQuota: ResourceQuotaKind;\n};\n","import * as React from 'react';\nimport { ExpandableSection, Split, SplitItem } from '@patternfly/react-core';\nimport AppliedClusterResourceQuotaCharts from '@console/app/src/components/resource-quota/AppliedClusterResourceQuotaCharts';\nimport { QuotaScopesInline } from '@console/internal/components/resource-quota';\nimport { ResourceLink } from '@console/internal/components/utils/resource-link';\nimport { AppliedClusterResourceQuotaModel } from '@console/internal/models';\nimport { AppliedClusterResourceQuotaKind } from '@console/internal/module/k8s';\nimport QuotaSummary from './QuotaSummary';\n\nconst AppliedClusterResourceQuotaItem: React.FC<AppliedClusterResourceQuotaItemProps> = ({\n  resourceQuota,\n  namespace,\n}) => {\n  const resources = Object.keys(resourceQuota.status?.total?.hard ?? {});\n  const [isExpanded, setExpanded] = React.useState(resources.length <= 4);\n  const scopes = resourceQuota?.spec?.quota?.scopes;\n  return (\n    <>\n      <Split hasGutter>\n        <SplitItem isFilled>\n          <ExpandableSection\n            onToggle={(_event, isOpen: boolean) => setExpanded(isOpen)}\n            isExpanded={isExpanded}\n            toggleContent={\n              <ResourceLink\n                groupVersionKind={{\n                  kind: AppliedClusterResourceQuotaModel.kind,\n                  version: AppliedClusterResourceQuotaModel.apiVersion,\n                  group: AppliedClusterResourceQuotaModel.apiGroup,\n                }}\n                name={resourceQuota.metadata.name}\n                namespace={namespace}\n                inline\n                truncate\n              />\n            }\n          />\n        </SplitItem>\n        <SplitItem>\n          <QuotaSummary\n            hard={resourceQuota.status?.total?.hard}\n            used={resourceQuota.status?.total?.used}\n          />\n        </SplitItem>\n      </Split>\n      {isExpanded && (\n        <>\n          {scopes && <QuotaScopesInline scopes={scopes} />}\n          <AppliedClusterResourceQuotaCharts\n            appliedClusterResourceQuota={resourceQuota}\n            namespace={namespace}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AppliedClusterResourceQuotaItem;\n\ntype AppliedClusterResourceQuotaItemProps = {\n  resourceQuota: AppliedClusterResourceQuotaKind;\n  namespace: string;\n};\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Data, Helpers } from 'victory-core';\nimport { VictoryPie } from 'victory-pie';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ChartContainer } from '../ChartContainer/ChartContainer';\nimport { ChartDonut } from '../ChartDonut/ChartDonut';\nimport { ChartDonutStyles } from '../ChartTheme/ChartStyles';\nimport { getPaddingForSide } from '../ChartUtils/chart-padding';\nimport { getDonutThresholdDynamicTheme, getDonutThresholdStaticTheme } from '../ChartUtils/chart-theme-types';\nexport const ChartDonutThreshold = (_a) => {\n    var { allowTooltip = true, ariaDesc, ariaTitle, children, colorScale, constrainToVisibleArea = false, containerComponent = React.createElement(ChartContainer, null), data = [], hasPatterns, invert = false, labels = [], // Don't show any tooltip labels by default, let consumer override if needed\n    name, padding, radius, standalone = true, subTitlePosition = ChartDonutStyles.label.subTitlePosition, themeColor, x, y, \n    // destructure last\n    theme = getDonutThresholdStaticTheme(themeColor, invert), height = theme.pie.height, width = theme.pie.width } = _a, rest = __rest(_a, [\"allowTooltip\", \"ariaDesc\", \"ariaTitle\", \"children\", \"colorScale\", \"constrainToVisibleArea\", \"containerComponent\", \"data\", \"hasPatterns\", \"invert\", \"labels\", \"name\", \"padding\", \"radius\", \"standalone\", \"subTitlePosition\", \"themeColor\", \"x\", \"y\", \"theme\", \"height\", \"width\"]);\n    const defaultPadding = {\n        bottom: getPaddingForSide('bottom', padding, theme.pie.padding),\n        left: getPaddingForSide('left', padding, theme.pie.padding),\n        right: getPaddingForSide('right', padding, theme.pie.padding),\n        top: getPaddingForSide('top', padding, theme.pie.padding)\n    };\n    const chartRadius = radius ||\n        Helpers.getRadius({\n            height,\n            width,\n            padding: defaultPadding\n        });\n    // Returns computed data representing pie chart slices\n    const getComputedData = () => {\n        // Format and sort data. Sorting ensures thresholds are displayed in the correct order and simplifies calculations.\n        const datum = Data.formatData(data, Object.assign({ x, y }, rest), ['x', 'y']).sort((a, b) => a._y - b._y);\n        // Data must be offset so that the sum of all data point y-values (including the final slice) == 100.\n        const [prev, computedData] = datum.reduce((acc, dataPoint) => [\n            dataPoint._y,\n            [\n                ...acc[1],\n                {\n                    x: dataPoint._x,\n                    y: dataPoint._y - acc[0] // Must be offset by previous value\n                }\n            ]\n        ], [0, []]);\n        return [\n            ...computedData,\n            {\n                y: prev ? 100 - prev : 0\n            }\n        ];\n    };\n    // Render dynamic utilization donut cart\n    const computedData = getComputedData();\n    const renderChildren = () => React.Children.toArray(children).map((child, index) => {\n        if (React.isValidElement(child)) {\n            const _a = child.props, { data: childData } = _a, childProps = __rest(_a, [\"data\"]);\n            const datum = Data.formatData([childData], childProps, ['x', 'y']); // Format child data independently of this component's props\n            const dynamicTheme = childProps.theme || getDonutThresholdDynamicTheme(childProps.themeColor || themeColor);\n            return React.cloneElement(child, Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (hasPatterns && { hasPatterns: true })), { // Enable ChartDonutUtilization patterns\n                constrainToVisibleArea, data: childData, endAngle: 360 * (datum[0]._y ? datum[0]._y / 100 : 0), height }), (name &&\n                typeof child.name !== undefined && {\n                name: `${name}-${child.type.displayName}-${index}`\n            })), { invert, isStatic: false, key: `pf-chart-donut-threshold-child-${index}`, padding: defaultPadding, patternUnshiftIndex: computedData.length, radius: chartRadius - 14, standalone: false, subTitlePosition: childProps.subTitlePosition || subTitlePosition, theme: dynamicTheme, width }), childProps));\n        }\n        return child;\n    });\n    // Static threshold donut chart\n    const chart = (React.createElement(ChartDonut, Object.assign({ allowTooltip: allowTooltip, colorScale: colorScale, constrainToVisibleArea: constrainToVisibleArea, data: computedData, height: height, hasPatterns: hasPatterns, key: \"pf-chart-donut-threshold\", labels: labels, name: name, padding: defaultPadding, standalone: false, theme: theme, width: width }, rest)));\n    // Clone so users can override container props\n    const container = React.cloneElement(containerComponent, Object.assign({ desc: ariaDesc, height, title: ariaTitle, width,\n        theme }, containerComponent.props), [chart, renderChildren()]);\n    return standalone ? (React.createElement(React.Fragment, null, container)) : (React.createElement(React.Fragment, null,\n        chart,\n        renderChildren()));\n};\nChartDonutThreshold.displayName = 'ChartDonutThreshold';\n// Note: VictoryPie.role must be hoisted\nhoistNonReactStatics(ChartDonutThreshold, VictoryPie);\n//# sourceMappingURL=ChartDonutThreshold.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport orderBy from 'lodash/orderBy';\nimport { Data } from 'victory-core';\nimport { VictoryPie } from 'victory-pie';\nimport { ChartContainer } from '../ChartContainer/ChartContainer';\nimport { ChartDonut } from '../ChartDonut/ChartDonut';\nimport { ChartCommonStyles, ChartDonutUtilizationStyles } from '../ChartTheme/ChartStyles';\nimport { getDonutUtilizationTheme } from '../ChartUtils/chart-theme-types';\nexport const ChartDonutUtilization = (_a) => {\n    var { allowTooltip = true, ariaDesc, ariaTitle, colorScale, containerComponent = React.createElement(ChartContainer, null), data, invert = false, isStatic = true, legendPosition = ChartCommonStyles.legend.position, legendDirection = 'ltr', padding, standalone = true, themeColor, thresholds, x, y, \n    // destructure last\n    theme = getDonutUtilizationTheme(themeColor), height = theme.pie.height, width = theme.pie.width } = _a, rest = __rest(_a, [\"allowTooltip\", \"ariaDesc\", \"ariaTitle\", \"colorScale\", \"containerComponent\", \"data\", \"invert\", \"isStatic\", \"legendPosition\", \"legendDirection\", \"padding\", \"standalone\", \"themeColor\", \"thresholds\", \"x\", \"y\", \"theme\", \"height\", \"width\"]);\n    // Returns computed data representing pie chart slices\n    const getComputedData = () => {\n        const datum = getData();\n        const computedData = [{ x: datum[0]._x, y: datum[0]._y || 0 }];\n        if (isStatic) {\n            computedData.push({ y: datum[0]._x ? Math.abs(100 - datum[0]._y) : 100 });\n        }\n        return computedData;\n    };\n    const getData = () => {\n        const datum = [Object.assign({}, data)];\n        return Data.formatData(datum, Object.assign({ x, y }, rest), ['x', 'y']).sort((a, b) => a._y - b._y);\n    };\n    // Returns thresholds with default color scale\n    const getDonutThresholds = () => {\n        const result = [];\n        if (thresholds) {\n            // Ensure thresholds are in sorted order\n            const sThresholds = orderBy(thresholds, 'value', invert ? 'desc' : 'asc');\n            const numColors = ChartDonutUtilizationStyles.thresholds.colorScale.length;\n            for (let i = 0; i < sThresholds.length; i++) {\n                result.push({\n                    color: sThresholds[i].color\n                        ? sThresholds[i].color\n                        : ChartDonutUtilizationStyles.thresholds.colorScale[i % numColors],\n                    value: sThresholds[i].value\n                });\n            }\n        }\n        return result;\n    };\n    // Returns theme based on threshold and current value\n    const getThresholdTheme = () => {\n        const newTheme = Object.assign({}, theme);\n        const datum = getData();\n        if (datum) {\n            const donutThresholds = getDonutThresholds();\n            const mergeThemeProps = (i) => {\n                // Merge just the first color of dynamic (blue, green, etc.) with static (gray) for expected colorScale\n                if (newTheme.pie.colorScale instanceof Array) {\n                    newTheme.pie.colorScale[0] = donutThresholds[i].color;\n                }\n                else {\n                    newTheme.pie.colorScale = donutThresholds[i].color;\n                }\n                if (newTheme.legend.colorScale instanceof Array) {\n                    newTheme.legend.colorScale[0] = donutThresholds[i].color;\n                }\n                else {\n                    newTheme.legend.colorScale = donutThresholds[i].color;\n                }\n            };\n            for (let i = 0; i < donutThresholds.length; i++) {\n                if (invert) {\n                    if (datum[0]._y <= donutThresholds[i].value) {\n                        mergeThemeProps(i);\n                    }\n                }\n                else {\n                    if (datum[0]._y >= donutThresholds[i].value) {\n                        mergeThemeProps(i);\n                    }\n                }\n            }\n        }\n        return newTheme;\n    };\n    // Dynamic donut chart\n    const chart = (React.createElement(ChartDonut, Object.assign({ allowTooltip: allowTooltip, colorScale: colorScale, data: getComputedData(), height: height, key: \"pf-chart-donut-utilization\", legendPosition: legendPosition, legendDirection: legendDirection, padding: padding, standalone: false, theme: getThresholdTheme(), width: width }, rest)));\n    // Clone so users can override container props\n    const container = React.cloneElement(containerComponent, Object.assign({ desc: ariaDesc, height, title: ariaTitle, width,\n        theme }, containerComponent.props), [chart]);\n    return standalone ? React.createElement(React.Fragment, null, container) : React.createElement(React.Fragment, null, chart);\n};\nChartDonutUtilization.displayName = 'ChartDonutUtilization';\n// Note: VictoryPie.role must be hoisted\nhoistNonReactStatics(ChartDonutUtilization, VictoryPie);\n//# sourceMappingURL=ChartDonutUtilization.js.map","export const chart_color_gold_400 = {\n  \"name\": \"--pf-v5-chart-color-gold-400\",\n  \"value\": \"#f0ab00\",\n  \"var\": \"var(--pf-v5-chart-color-gold-400, #f0ab00)\"\n};\nexport default chart_color_gold_400;","export const chart_color_gold_500 = {\n  \"name\": \"--pf-v5-chart-color-gold-500\",\n  \"value\": \"#c58c00\",\n  \"var\": \"var(--pf-v5-chart-color-gold-500, #c58c00)\"\n};\nexport default chart_color_gold_500;","export const chart_color_black_100 = {\n  \"name\": \"--pf-v5-chart-color-black-100\",\n  \"value\": \"#f0f0f0\",\n  \"var\": \"var(--pf-v5-chart-color-black-100, #f0f0f0)\"\n};\nexport default chart_color_black_100;","export const chart_color_green_300 = {\n  \"name\": \"--pf-v5-chart-color-green-300\",\n  \"value\": \"#4cb140\",\n  \"var\": \"var(--pf-v5-chart-color-green-300, #4cb140)\"\n};\nexport default chart_color_green_300;","export const chart_color_green_500 = {\n  \"name\": \"--pf-v5-chart-color-green-500\",\n  \"value\": \"#23511e\",\n  \"var\": \"var(--pf-v5-chart-color-green-500, #23511e)\"\n};\nexport default chart_color_green_500;"],"sourceRoot":""}