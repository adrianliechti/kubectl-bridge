{"version":3,"sources":["webpack:///./packages/vsphere-plugin/src/components/getVSphereHealth.ts","webpack:///./packages/vsphere-plugin/src/components/VSphereConnectionModal.tsx","webpack:///./packages/vsphere-plugin/src/hooks/use-connection-form.ts","webpack:///./packages/vsphere-plugin/src/hooks/use-popup-visibility.ts","webpack:///./packages/vsphere-plugin/src/components/persist.ts","webpack:///./packages/vsphere-plugin/src/components/VSphereConnectionForm.tsx","webpack:///./packages/vsphere-plugin/src/PopoverHelpButton.tsx","webpack:///./packages/vsphere-plugin/src/components/TextField.tsx","webpack:///./packages/vsphere-plugin/src/resources/index.ts","webpack:///./packages/vsphere-plugin/src/components/ClusterOverview/VSphereStatus.tsx","webpack:///./packages/vsphere-plugin/src/constants.ts","webpack:///./packages/vsphere-plugin/src/components/utils.ts","webpack:///./packages/vsphere-plugin/src/hooks/use-connection-models.ts","webpack:///./packages/vsphere-plugin/src/components/VSphereOperatorStatuses.tsx","webpack:///./packages/vsphere-plugin/src/resources/clusterOperator.ts","webpack:///./packages/vsphere-plugin/src/resources/statusCondition.ts"],"names":["getPrometheusMetricValue","prometheusResult","reason","find","r","metric","value","getVSphereHealth","t","responses","configMapResult","state","LOADING","loadError","WARNING","message","loaded","data","length","error","ERROR","response","status","result","invCreds","syncErr","anyFailingMetric","OK","VSphereConnectionModalFooter","onClose","mustPatch","isSubmitting","isValid","dirty","submitForm","hasGutter","variant","isDisabled","onClick","isLoading","VSphereConnectionModalAlert","health","isInline","title","danger","info","warning","datastoreRegex","folderRegex","validationSchema","values","vcenter","required","username","password","datacenter","defaultDatastore","test","startsWith","matches","folder","vCenterCluster","VSphereConnectionModal","hide","cloudProviderConfig","isModalOpen","setModalOpen","setError","models","initValues","isLoaded","onSave","undefined","e","detail","modalBody","initialValues","onSubmit","className","medium","position","isOpen","showClose","LoadError","Error","super","this","name","useConnectionForm","setIsLoaded","secretModel","infrastructureModel","setResult","loadResult","config","keyValues","server","resourcePoolPath","paths","split","secret","model","ns","console","secretKeyValues","infrastructure","domain","spec","platformSpec","vsphere","failureDomains","d","computeCluster","topology","infraVCenterCluster","datacenterDiff","datastoreDiff","datastore","vCenterClusterDiff","initialLoad","setPopupVisibility","v","popup","document","getElementsByClassName","style","visibility","usePopupVisibility","PersistError","taintValue","key","effect","persist","configMapModel","kubeControllerManagerModel","nodeModel","secretData","resource","op","path","apiVersion","kind","metadata","namespace","e2","persistSecret","cm","date","Date","toISOString","forceRedeploymentReason","patchKubeControllerManager","configIniString","configIni","persistProviderConfigMap","nodesModel","nodes","queryParams","patchRequests","node","taints","taintIndex","findIndex","taint","push","results","Promise","allSettled","rejectedPromise","addTaints","cloudConfig","type","region","networks","resourcePool","zone","nodeNetworking","external","internal","vcenters","datacenters","port","persistInfrastructure","VSphereConnectionForm","vcenterRef","setFieldTouched","current","focus","id","label","labelIcon","content","isRequired","fieldId","ref","onChange","PopoverHelpButton","bodyContent","TextField","helperText","onParentChange","props","field","meta","setValue","hasError","touched","_ev","validated","icon","displayName","healthHandler","additionalResource","k8sResult","PROGRESS","includes","VSPHERE_FEATURE_FLAG","VSPHERE_PLATFORM","VSPHERE_CREDS_SECRET_NAME","VSPHERE_CREDS_SECRET_NAMESPACE","VSPHERE_CONFIGMAP_NAME","VSPHERE_CONFIGMAP_NAMESPACE","KUBE_CONTROLLER_MANAGER_NAME","FAILURE_DOMAIN_NAME","parseKeyValue","delimiter","lines","forEach","line","idx","indexOf","substring","trim","charAt","encodeBase64","from","toString","decodeBase64","mergeCloudProviderConfig","existingIni","Global","Workspace","Object","keys","k","map","join","getErrorMessage","String","useConnectionModels","group","version","ohlCounter","OperatorHealthLevel","Unknown","Healthy","Progressing","Degraded","useOperatorHealth","operator","groupVersionKind","isList","namespaced","level","color","progressing","available","degraded","VSphereOperatorStatuses","isExpanded","setIsExpanded","kubeControllerManager","kubeApiServer","storage","worstIconState","states","worst","getWorstIconState","toggleContent","onToggle","_event","firstColumn","secondColumn","to","CONSOLE_PREFIX_CLUSTER_OPERATOR","getCondition","conditions","c"],"mappings":"8FACA,uDAUA,MAAMA,EAA2B,CAC/BC,EACAC,KAC+B,MAAC,OAAwD,QAAxD,EAAAD,EAAiBE,KAAMC,GAAMA,EAAEC,OAAOH,SAAWA,UAAO,eAAEI,OAE/EC,EAAmB,CAC9BC,EACAC,EACAC,K,UAEA,IAAKA,EACH,MAAO,CAAEC,MAAO,IAAYC,SAG9B,GAAIF,EAAgBG,UAElB,MAAO,CACLF,MAAO,IAAYG,QACnBC,QAASP,EAAE,mDAIf,IAAKE,EAAgBM,OACnB,MAAO,CAAEL,MAAO,IAAYC,SAI9B,IAD4BF,EAAgBO,KAE1C,MAAO,CACLN,MAAO,IAAYG,QACnBC,QAASP,EAAE,sCAKf,GAAIC,EAAUS,OAAS,EACrB,MAAO,CAAEP,MAAO,IAAYC,SAG9B,GAAIH,EAAUN,KAAMC,GAAMA,EAAEe,OAC1B,MAAO,CAAER,MAAO,IAAYS,MAAOL,QAASP,EAAE,4CAGhD,KAA0B,QAArB,EAAAC,EAAU,GAAGY,gBAAQ,eAAEC,QAC1B,MAAO,CAAEX,MAAO,IAAYC,SAG9B,MAAMX,EAA8C,QAA3B,EAAqB,QAArB,EAAAQ,EAAU,GAAGY,gBAAQ,eAAEJ,YAAI,eAAEM,OACtD,GAAqC,YAAjCd,EAAU,GAAGY,SAASC,SAAyBrB,EACjD,MAAO,CAAEU,MAAO,IAAYS,MAAOL,QAASP,EAAE,4CAGhD,MAAMgB,EAAWxB,EAAyBC,EAAkB,sBAE5D,IAAIuB,aAAQ,EAARA,EAAW,KAAM,YAAUA,aAAQ,EAARA,EAAW,IAAM,EAG9C,MAAO,CAAEb,MAAO,IAAYG,QAASC,QAASP,EAAE,uCAGlD,MAAMiB,EAAUzB,EAAyBC,EAAkB,aAC3D,GAAI,YAAUwB,aAAO,EAAPA,EAAU,IAEtB,MAAO,CAAEd,MAAO,IAAYG,QAASC,QAAS,yCAGhD,MAAMW,EAAmBzB,EAAiBE,KAAMC,IAAK,MAAC,mBAAiB,QAAP,EAAAA,EAAEE,aAAK,eAAG,IAAM,IAChF,OAAIoB,EAEK,CACLf,MAAO,IAAYG,QACnBC,QAASP,EAAE,oCAAqC,CAAEN,OAAQwB,EAAiBrB,OAAOH,UAI/E,CACLS,MAAO,IAAYgB,M,8jBCtDvB,MAAMC,EAA4E,EAChFC,UACAC,gBAEA,MAAM,EAAEtB,GAAM,yBAAe,mBACvB,aAAEuB,EAAY,QAAEC,EAAO,MAAEC,EAAK,WAAEC,GAAe,cACrD,OACE,gBAAC,IAAK,CAACC,WAAS,GACd,gBAAC,IAAS,KACR,gBAAC,IAAM,CACLC,QAAQ,UACRC,WAAYN,IAAiBC,IAAYF,IAAqBG,EAC9DK,QAASJ,EACTK,UAAWR,GAEKvB,EAAfuB,EAAiB,SAAc,wBAGpC,gBAAC,IAAS,KACR,gBAAC,IAAM,CAACK,QAAQ,OAAOE,QAAST,EAASQ,WAAYN,GAClDvB,EAAE,cAYPgC,EAA0E,EAC9EC,SACAtB,YAEA,MAAM,EAAEX,GAAM,yBAAe,mBACvB,aAAEuB,GAAiB,cAEzB,OAAIZ,EAEA,gBAAC,IAAK,CAACuB,UAAQ,EAACC,MAAOxB,EAAMwB,MAAOP,QAAS,IAAaQ,QACvDzB,EAAMJ,SAKRgB,GAAgBU,EAAO9B,QAAU,IAAYG,QAahD,gBAAC,IAAK,CAACsB,QAAS,IAAaS,KAAMH,UAAQ,EAACC,MAAOnC,EAAE,yCAClDA,EACC,sNAEF,2BACCA,EACC,+FAjBF,gBAAC,IAAK,CACJkC,UAAQ,EACRC,MAAOnC,EAAE,8CACT4B,QAAS,IAAaU,SAErBL,EAAO1B,UAkBVgC,EAAiB,wBACjBC,EAAc,iBAEdC,EAAmB,OAAUC,GACjC,SAAuC,CACrCC,QAAS,WAAaC,SAAS,wBAC/BC,SAAU,WAAaD,SAAS,yBAChCE,SAAU,WAAaF,SAAS,yBAChCG,WAAY,WAAaH,SAAS,2BAClCI,iBAAkB,WACfJ,SAAS,mCACTK,KACC,iBACA,oBAAoBP,EAAOK,wBAC1BjD,IACMA,IAAU4C,EAAOK,YAGfjD,EAAMoD,WAAW,IAAIR,EAAOK,0BAGtCI,QAAQZ,EAAgB,oBAAoBA,GAC/Ca,OAAQ,WACLR,SAAS,uCACTK,KAAK,iBAAkB,oBAAoBP,EAAOK,iBAAmBjD,IAC/DA,IAAU4C,EAAOK,YAGfjD,EAAMoD,WAAW,IAAIR,EAAOK,mBAEpCI,QAAQX,EAAa,oBAAoBA,GAC5Ca,eAAgB,WAAaT,SAAS,mCAI7BU,EAA2D,EACtErB,SACAsB,OACAC,0BAEA,cACA,MAAM,EAAExD,GAAM,yBAAe,mBACtByD,EAAaC,GAAgB,YAAe,IAC5C/C,EAAOgD,GAAY,aAEpBC,EAAS,eAET,WAAEC,EAAU,SAAEC,EAAQ,UAAExC,EAAWX,MAAON,GAAc,YAC5DmD,GAGInC,EAAU,KACdqC,GAAa,GACbH,KAGIQ,EAAgBrB,GAAuC,OAAD,6BAC1DiB,OAASK,GAET,UACQ,YAAQhE,EAAG4D,EAAQlB,EAAQc,GACjCnC,IACA,MAAO4C,GACHA,aAAa,IACfN,EAAS,CAAExB,MAAO8B,EAAE1D,QAASA,QAAS0D,EAAEC,SAExCP,EAAS,CAAExB,MAAOnC,EAAE,qBAAsBO,QAAS,YAAgBP,EAAGiE,SAK5E,IAAIE,EAuCJ,OApCEA,EADE9D,EAEA,gBAAC,IAAK,CAAC6B,UAAQ,EAACC,MAAO9B,EAAU8B,MAAOP,QAAQ,UAC7CvB,EAAUE,SAGNuD,EAEP,gBAAC,IAAM,CACLM,cAAeP,EACfQ,SAAUN,EACVtB,iBAAkBA,GAElB,gBAAC,IAAK,CAACd,WAAS,GACd,gBAAC,IAAS,KACR,gBAAC,IAAqB,OAExB,gBAAC,IAAS,KACR,gBAAC,IAAuB,OAE1B,gBAAC,IAAS,KACR,gBAACK,EAA2B,CAACrB,MAAOA,EAAOsB,OAAQA,KAErD,gBAAC,IAAS,KACR,gBAACb,EAA4B,CAACC,QAASA,EAASC,UAAWA,KAAeX,OAOhF,gBAAC,IAAQ,KACP,gBAAC,IAAO,OAMZ8C,GACE,gBAAC,IAAK,CACJa,UAAU,uBACV1C,QAAS,IAAa2C,OACtBC,SAAS,MACTrC,MAAOnC,EAAE,oCACTyE,QAAM,EACNC,WAAYZ,EACZzC,QAAUyC,OAAqBE,EAAV3C,GAEpB8C,K,0ZCzNF,MAAMQ,UAAkBC,MAG7B,YAAYzC,EAAe+B,GACzBW,MAAM1C,GACN2C,KAAKC,KAAO,YACZD,KAAKZ,OAASA,GAIlB,MA+Gac,EAAqBxB,IAChC,MAAM,EAAExD,GAAM,yBAAe,mBACtB8D,EAAUmB,GAAe,YAAe,IACxCtE,EAAOgD,GAAY,cACpB,YAAEuB,EAAW,oBAAEC,GAAwB,eACtCpE,EAAQqE,GAAa,aA+B5B,OA1BA,YAAgB,KACgB,OAAD,6BAC3B,IAAItB,GAAaN,EAAjB,CAGA,IACE,MAAM6B,OA/HM,EAClBrF,EACAkF,EACAC,EACA3B,IACwE,OAAD,6B,kBACvE,MAAM8B,EAAiC,QAAxB,EAAA9B,EAAoB/C,YAAI,eAAE6E,OACzC,IAAKA,EACH,MAAO,CACL5C,OAAQ,CACNC,QAAS,GACTI,WAAY,GACZC,iBAAkB,GAClBI,OAAQ,GACRP,SAAU,GACVC,SAAU,GACVO,eAAgB,IAElB/B,WAAW,GAIf,MAAMiE,EAAY,YAAcD,GAE1BE,EAASD,EAAUC,QAAU,GAC7BzC,EAAawC,EAAUxC,YAAc,GACrCC,EAAmBuC,EAAU,sBAAwB,GACrDnC,EAASmC,EAAUnC,QAAU,GAEnC,IAAIC,EAAiB,GACrB,MAAMoC,EAAmBF,EAAU,qBACnC,GAAIE,aAAgB,EAAhBA,EAAkB/E,OAAQ,CAC5B,MAAMgF,EAAQD,EAAiBE,MAAM,KACjCD,EAAMhF,OAAS,KAChB,CAAE,CAAE,CAAE2C,GAAkBqC,GAG7B,IAAI7C,EAAW,GACXC,EAAW,GAGf,GAAIyC,EAAU,gBAAkBA,EAAU,oBAExC,IACE,MAAMK,QAAe,aAAe,CAClCC,MAAOX,EACPH,KAAMQ,EAAU,eAChBO,GAAIP,EAAU,sBAGXK,EAAOnF,MAEVsF,QAAQpF,MAAM,gCAAgC4E,EAAU,0BAG1D,MAAMS,EAAkBJ,EAAOnF,MAAQ,GACvCoC,EAAW,YAAamD,EAAmBR,EAAH,cACxC1C,EAAW,YAAakD,EAAmBR,EAAH,cACxC,MAAOvB,GAGP8B,QAAQpF,MACN,mBAAmB4E,EAAU,yBAAyBA,EAAU,gCAChEtB,GAKN,IAAI3C,GAAY,EAChB,IACE,MAAM2E,QAAuB,aAAuB,CAClDJ,MAAOV,EACPJ,KAAM,YAGFmB,EAAoE,QAA3D,EAA2C,QAA3C,EAAkC,QAAlC,EAAoB,QAApB,EAAAD,aAAc,EAAdA,EAAgBE,YAAI,eAAEC,oBAAY,eAAEC,eAAO,eAAEC,sBAAc,eAAE3G,KACzE4G,GAAMA,EAAEf,SAAWA,GAEtB,GAAIU,EAAQ,CACV,MAAMM,EAAiD,QAAhC,EAAgB,QAAhB,EAAAN,aAAM,EAANA,EAAQO,gBAAQ,eAAED,sBAAc,eAAEb,MAAM,KAC/D,IAAIe,EAAsB,GACtBF,EAAe9F,OAAS,KACzB,CAAE,CAAE,CAAEgG,GAAuBF,GAG3BnD,IACHA,EAAiBqD,GAEnB,MAAMC,EAAiBT,EAAOO,SAAS1D,aAAeA,EAChD6D,EAAgBV,EAAOO,SAASI,YAAc7D,EAC9C8D,EAAqBJ,IAAwBrD,EACnD/B,EAAYqF,GAAkBC,GAAiBE,GAEjD,MAAO7C,GACP,MAAM,IAAIU,EAAU3E,EAAE,2CAA4C,YAAgBA,EAAGiE,IAGvF,MAAO,CACLvB,OAAQ,CACNC,QAAS6C,EACTzC,aACAC,mBACAI,SACAP,WACAC,WACAO,kBAEF/B,gBAoB6ByF,CACvB/G,EACAkF,EACAC,EACA3B,GAEF4B,EAAUC,GACV,MAAOpB,GAELN,EADEM,aAAaU,EACN,CAAExC,MAAO8B,EAAE1D,QAASA,QAAS0D,EAAEC,QAE/B,CAAE/B,MAAOnC,EAAE,oBAAqBO,QAAS,YAAgBP,EAAGiE,KAGzEgB,GAAY,QAIb,CAACzB,EAAqB2B,EAAqBrB,EAAUoB,EAAalF,IAE9D,CACL6D,WAAY9C,aAAM,EAANA,EAAQ2B,OACpBoB,WACAnD,QACAW,UAAWP,aAAM,EAANA,EAAQO,a,mCC1KvB,6CAEA,MAAM0F,EAAsBC,I,MAC1B,MAAMC,EAAQC,SAASC,uBAAuB,+BAExCC,EAA2B,QAAlB,EAAAH,aAAK,EAALA,EAAQ,UAAU,eAAEG,MACnCA,IAAUA,EAAMC,WAAaL,IAGlBM,EAAqB,KAChC,YAEE,KACEP,EAAmB,UACZ,KACLA,EAAmB,aAGvB,M,sbCGG,MAAMQ,UAAqB5C,MAGhC,YAAYzC,EAAe+B,GACzBW,MAAM1C,GACN2C,KAAKC,KAAO,eACZD,KAAKZ,OAASA,GAIlB,MAmMMuD,EAAa,CACjBC,IAAK,iDACL5H,MAAO,OACP6H,OAAQ,cAsIGC,EAAU,CACrB5H,GAEEkF,cACA2C,iBACAC,6BACAC,YACA5C,uBAQFzC,EACAc,IACkB,OAAD,kCA7VG,EACpBxD,EACAkF,EACAxC,IACkB,OAAD,6BACjB,MAAM,QAAEC,EAAO,SAAEE,EAAQ,SAAEC,GAAaJ,EAKlCsF,EAAa,CACjB,CAAIrF,EAAH,aAJiB,YAAaE,GAK/B,CAAIF,EAAH,aAJiB,YAAaG,IAOjC,IACE,MAAM8C,QAAe,aAAe,CAClCC,MAAOX,EACPH,KAAM,IACNe,GAAI,MAIN,UACQ,aAAS,CACbD,MAAOX,EACP+C,SAAUrC,EACVnF,KAAM,CACJ,CACEyH,GAAI,UACJC,KAAM,QACNrI,MAAOkI,MAIb,MAAO/D,GACP,MAAM,IAAIuD,EACRxH,EAAE,6BAA8B,CAC9B4F,OAAQ,MAEV,YAAgB5F,EAAGiE,KAGvB,MAAOA,GAEP,MAAMxD,EAAe,CACnB2H,WAAYlD,EAAYkD,WACxBC,KAAMnD,EAAYmD,KAClBC,SAAU,CACRvD,KAAM,IACNwD,UAAW,KAEb9H,KAAMuH,GAGR,UACQ,aAAU,CACdnC,MAAOX,EACPzE,SAEF,MAAO+H,GACP,MAAM,IAAIhB,EACRxH,EAAE,qCAAsC,CACtC4F,OAAQ,MAEV,YAAgB5F,EAAGwI,SA6RnBC,CAAczI,EAAGkF,EAAaxC,QAtRH,EACjC1C,EACA8H,IACkB,OAAD,6BACjB,IACE,MAAMY,QAAW,aAA8B,CAC7C7C,MAAOiC,EACP/C,KAAM,MAGR,IAAK2D,EACH,MAAM,IAAIlB,EAAaxH,EAAE,wCAAyCA,EAAE,eAGtE0I,EAAGvC,KAAOuC,EAAGvC,MAAQ,GACrB,MAAMwC,GAAO,IAAIC,MAAOC,cACxBH,EAAGvC,KAAK2C,wBAA0B,YAAYH,QAExC,aAAS,CACb9C,MAAOiC,EACPG,SAAU,CACRK,SAAU,CACRvD,KAAM,MAGVtE,KAAM,CACJ,CACEyH,GAAI,UACJC,KAAM,QACNrI,MAAO4I,EAAGvC,SAIhB,MAAOlC,GACP,MAAM,IAAIuD,EAAaxH,EAAE,yCAA0C,YAAgBA,EAAGiE,QAqPlF8E,CAA2B/I,EAAG8H,QAjPL,EAC/B9H,EACA6H,EACAnF,EACAc,IACkB,OAAD,6B,MACjB,MAAM,QAAEb,EAAO,WAAEI,EAAU,iBAAEC,EAAgB,OAAEI,EAAM,eAAEC,GAAmBX,EAE1E,GAAIc,EAAqB,CACvB,MAAMwF,EAAkB,aACE,QAAxB,EAAAxF,EAAoB/C,YAAI,eAAE6E,SAAU,GACpC5C,GAGF,UACQ,aAAS,CACbmD,MAAOgC,EACPI,SAAU,CACRK,SAAU,CACRvD,KAAM,IACNwD,UAAW,MAGf9H,KAAM,CACJ,CACEyH,GAAI1E,EAAoB/C,KAAO,UAAY,MAC3C0H,KAAM,QACNrI,MAAO,CAAEwF,OAAQ0D,OAIvB,MAAO/E,GACP,MAAM,IAAIuD,EACRxH,EAAE,yBAA0B,CAAE0I,GAAI,MAClC,YAAgB1I,EAAGiE,SAGlB,CAIL,MAAMgF,EAAY,4BACL,6BACK,uDAIVtG,qBACII,4BACOC,iBACXI,6BACYL,UAAmBM,mCAEzBV,uBACDI,OAGPtC,EAAkB,CACtB2H,WAAYP,EAAeO,WAC3BC,KAAMR,EAAeQ,KACrBC,SAAU,CACRvD,KAAM,IACNwD,UAAW,KAEb9H,KAAM,CACJ6E,OAAQ2D,IAIZ,UACQ,aAAU,CACdpD,MAAOgC,EACPpH,SAEF,MAAOwD,GACP,MAAM,IAAIuD,EACRxH,EAAE,oCAAqC,CACrC0I,GAAI,MAEN,YAAgB1I,EAAGiE,SAmKnBiF,CAAyBlJ,EAAG6H,EAAgBnF,EAAQc,QAvJ1C,EAAOxD,EAAgCmJ,IAAyB,OAAD,6B,MAC/E,MAAMC,QAAc,YAA+B,CAAEvD,MAAOsD,EAAYE,YAAa,KAC/EC,EAAgB,GACtB,IAAK,MAAMC,KAAQH,EACjB,GAAKG,EAAKpD,KAAKqD,OAcR,CACL,MAAMC,EAAaF,EAAKpD,KAAKqD,OAAOE,UACjCC,GAAwB,mDAAdA,EAAMjC,KAEnB,IAAoB,IAAhB+B,EACFH,EAAcM,KACZ,aAAS,CACP/D,MAAOsD,EACPlB,SAAUsB,EACV9I,KAAM,CACJ,CACEyH,GAAI,MACJC,KAAM,iBACNrI,MAAO2H,WAKV,CACL,MAAMkC,EAAQJ,EAAKpD,KAAKqD,OAAOC,GACzBE,EAAMhC,SAAWF,EAAW3H,OAAS6J,EAAMjC,MAAQD,EAAWC,KAClE4B,EAAcM,KACZ,aAAS,CACP/D,MAAOsD,EACPlB,SAAUsB,EACV9I,KAAM,CACJ,CACEyH,GAAI,UACJC,KAAM,gBAAgBsB,EACtB3J,MAAO2H,aA1CnB6B,EAAcM,KACZ,aAAS,CACP/D,MAAOsD,EACPlB,SAAUsB,EACV9I,KAAM,CACJ,CACEyH,GAAI,MACJC,KAAM,eACNrI,MAAO,CAAC2H,QA2CpB,MAAMoC,QAAgBC,QAAQC,WAAWT,GACnCU,EAAkBH,EAAQH,UAAW9J,GAAmB,aAAbA,EAAEkB,QACnD,IAAyB,IAArBkJ,EACF,MAAM,IAAIxC,EACRxH,EAAE,uCAAwC,CACxCuJ,KAAqC,QAA/B,EAAAH,EAAMY,GAAiB1B,gBAAQ,eAAEvD,OAEzC,YAAgB/E,EAAI6J,EAAQG,GAA2CtK,YAyFrEuK,CAAUjK,EAAG+H,QApFS,EAC5B/H,EACAmF,EACAzC,IACG,OAAD,6BACF,MAAMyD,EAA+B,CACnC+D,YAAa,CACXxC,IAAK,SACL3C,KAAM,KAERqB,aAAc,CACZ+D,KAAM,UACN9D,QAAS,CACPC,eAAgB,CACd,CACEvB,KAAM,IACNqF,OAAQ,mBACR5E,OAAQ9C,EAAOC,QACf8D,SAAU,CACRD,eAAgB,IAAI9D,EAAOK,mBAAmBL,EAAOW,iBACrDN,WAAYL,EAAOK,WACnB8D,UAAWnE,EAAOM,iBAClBqH,SAAU,CAAC3H,EAAOW,gBAClBiH,aAAc,IAAI5H,EAAOK,mBAAmBL,EAAOW,4BAErDkH,KAAM,mBAGVC,eAAgB,CACdC,SAAU,GACVC,SAAU,IAEZC,SAAU,CACR,CACEC,YAAa,CAAClI,EAAOK,YACrB8H,KAAM,IACNrF,OAAQ9C,EAAOC,aAMzB,UACQ,aAAS,CACbkD,MAAOV,EACP8C,SAAU,CACRK,SAAU,CACRvD,KAAM,YAGVtE,KAAM,CACJ,CACEyH,GAAI,UACJC,KAAM,QACNrI,MAAOqG,MAIb,MAAOlC,GACP,MAAM,IAAIuD,EAAaxH,EAAE,uCAAwC,YAAgBA,EAAGiE,QA0BhF6G,CAAsB9K,EAAGmF,EAAqBzC,O,mCCjYtD,gHAUO,MAAMqI,EAAwB,KACnC,MAAM,EAAE/K,GAAM,yBAAe,kBACvBgL,EAAa,SAA+B,OAC5C,gBAAEC,GAAoB,cAM5B,OAJA,YAAgB,K,MACK,QAAnB,EAAAD,aAAU,EAAVA,EAAYE,eAAO,SAAEC,SACpB,IAGD,gBAAC,IAAI,CAACC,GAAG,iCACP,gBAAC,IAAS,CACRC,MAAOrL,EAAE,WACTsL,UACE,gBAAC,IAAiB,CAChBC,QAASvL,EACP,mGAINwL,YAAU,EACVC,QAAQ,sBAER,gBAAC,IAAS,CAAC1G,KAAK,UAAU2G,IAAKV,KAEjC,gBAAC,IAAS,CACRK,MAAOrL,EAAE,mBACTwL,YAAU,EACVC,QAAQ,6BACRH,UACE,gBAAC,IAAiB,CAChBC,QAASvL,EACP,qGAKN,gBAAC,IAAS,CAAC+E,KAAK,oBAElB,gBAAC,IAAS,CACRsG,MAAOrL,EAAE,YACTwL,YAAU,EACVC,QAAQ,sBACRH,UACE,gBAAC,IAAiB,CAChBC,QAASvL,EACP,yIAKN,gBAAC,IAAS,CAAC+E,KAAK,cAElB,gBAAC,IAAS,CACRsG,MAAOrL,EAAE,YACTsL,UACE,gBAAC,IAAiB,CAChBC,QAASvL,EACP,+NAINwL,YAAU,EACVC,QAAQ,uBAER,gBAAC,IAAS,CAAC1G,KAAK,WAAWoF,KAAK,cAElC,gBAAC,IAAS,CACRkB,MAAOrL,EAAE,cACTsL,UACE,gBAAC,IAAiB,CAChBC,QACE,gCACE,gBAAC,QAAK,CAACvL,EAAGA,GAAC,kHAIX,2BACA,8BACE,gBAAC,QAAK,CAACA,EAAGA,GAAC,sHASrBwL,YAAU,EACVC,QAAQ,wBACRE,SAAU,KACRV,EAAgB,oBAChBA,EAAgB,YAGlB,gBAAC,IAAS,CAAClG,KAAK,gBAElB,gBAAC,IAAS,CACRsG,MAAOrL,EAAE,sBACTsL,UACE,gBAAC,IAAiB,CAChBC,QACE,gCACE,gBAAC,QAAK,CAACvL,EAAGA,GAAC,kGAIX,2BACA,8BACE,gBAAC,QAAK,CAACA,EAAGA,GAAC,+EAQrBwL,YAAU,EACVC,QAAQ,+BAER,gBAAC,IAAS,CAAC1G,KAAK,sBAElB,gBAAC,IAAS,CACRsG,MAAOrL,EAAE,0BACTsL,UACE,gBAAC,IAAiB,CAChBC,QACE,gBAAC,QAAK,CAACvL,EAAGA,G,WACA,uC,gDAKhBwL,YAAU,EACVC,QAAQ,qBAER,gBAAC,IAAS,CAAC1G,KAAK,e,mCClJxB,+EAKO,MAAM6G,EAA4D,EAAGL,cAC1E,MAAM,EAAEvL,GAAM,yBAAe,kBAC7B,OACE,gBAAC,IAAO,cAAaA,EAAE,QAAS6L,YAAaN,GAC3C,gBAAC,IAAM,cAAavL,EAAE,QAAS4B,QAAQ,OAAOM,UAAQ,EAACoC,UAAU,uBAC/D,gBAAC,IAA0B,CAACA,UAAU,kC,0bCO9C,MAAMwH,EAAY,aAChB,CACE,EACAJ,K,IADA,WAAEK,EAAYJ,SAAUK,GAAc,EAAKC,EAAK,IAAhD,2BAGA,MAAOC,EAAOC,GAAM,SAAEC,IAAc,YAAS,CAC3CrH,KAAMkH,EAAMlH,OAQR0G,EAAU,aAAaQ,EAAMlH,KAC7BsH,EAAWF,EAAKG,WAAaH,EAAKxL,MAExC,OACE,gBAAC,IAAS,CAACyK,GAAI,iBAAiBK,EAAWA,QAASA,GAClD,gBAAC,IAAS,iBACJS,EACAD,EAAK,CACTP,IAAKA,EACLN,GAAIK,EACJE,SAfW,CAACY,EAAKzM,KACrBsM,EAAStM,GACTkM,WAAiBO,EAAKzM,IAclB0M,UAAWH,EAAW,QAAU,aAGjCN,GACC,gBAAC,IAAc,KACb,gBAAC,IAAU,KACT,gBAAC,IAAc,CAACnK,QAAS,WAAYmK,KAI1CM,GACC,gBAAC,IAAc,KACb,gBAAC,IAAU,KACT,gBAAC,IAAc,CAACI,KAAM,gBAAC,IAAqB,MAAK7K,QAAS,SACvDuK,EAAKxL,YAUtBmL,EAAUY,YAAc,YAET,O,2DCpEf,6J,kFCAA,0IAiBA,MAsCaC,EAAyC,CAAC1M,EAAWD,EAAG4M,KACnE,MAAM3K,EAAS,YAAiBjC,EAAGC,EAAW2M,IACxC,MAAEzM,GAAU8B,EAElB,IAAI1B,EACJ,OAAQJ,GACN,KAAK,IAAYG,QACfC,EAAU0B,EAAO1B,QACjB,MACF,KAAK,IAAYY,GACfZ,EAAUP,EAAE,sEAKhB,MAAO,CAAEG,QAAOI,YAGH,UAxD6C,EAAGgD,OAAMtD,YAAW4M,gBAC9E,MAAM,EAAE7M,GAAM,2BACRiC,EAAS,YAAiBjC,EAAGC,EAAW4M,GAE9C,GACE,CAAC,IAAY1L,GAAI,IAAYb,QAAS,IAAYwM,UAAUC,SAAS9K,EAAO9B,SAC5E0M,aAAS,EAATA,EAAWpM,MACX,CACA,MAAM+C,EAAsBqJ,EAAUpM,KACtC,OACE,gBAAC,IAAsB,CACrB8C,KAAMA,EACNC,oBAAqBA,EACrBvB,OAAQA,IAKd,OAAIA,EAAO9B,QAAU,IAAYC,QAE7B,gBAAC,IAAK,CAACuB,WAAS,GACd,gBAAC,IAAS,KAAE3B,EAAE,sDAMlB,2BACE,gBAAC,IAAK,CAAC2B,WAAS,GACd,gBAAC,IAAS,KAAE3B,EAAE,4DACd,gBAAC,IAAS,KACR,gBAAC,IAAuB,W,kCChDlC,gRAAO,MAAMgN,EAAuB,oBACvBC,EAAmB,UAEnBC,EAA4B,gBAC5BC,EAAiC,cAEjCC,EAAyB,wBACzBC,EAA8B,mBAE9BC,EAA+B,UAE/BC,EAAsB,4B,kCCXnC,4MAMO,MAAMC,EAAgB,CAAClI,EAAgBmI,EAAY,OACxD,MAAMC,EAAQpI,EAAOK,MAAM,MAErB5E,EAAoC,GAa1C,OAZA2M,EAAMC,QAASC,IACb,MAAMC,EAAMD,EAAKE,QAAQL,GACzB,GAAII,EAAM,EAAG,CACX,MAAMnG,EAAMkG,EAAKG,UAAU,EAAGF,GAAKG,OACnC,IAAIlO,EAAQ8N,EAAKG,UAAUF,EAAM,GAAGG,OAEZ,MAApBlO,EAAMmO,OAAO,KAAYnO,EAAQA,EAAMiO,UAAU,IACd,MAAnCjO,EAAMmO,OAAOnO,EAAMY,OAAS,KAAYZ,EAAQA,EAAMiO,UAAU,EAAGjO,EAAMY,OAAS,IACtFK,EAAO2G,GAAO5H,KAIXiB,GAGImN,EAAgBzN,GAAiB,SAAO0N,KAAK1N,GAAM2N,SAAS,UAC5DC,EAAgB5N,GAAiB,SAAO0N,KAAK1N,EAAM,UAAU2N,SAAS,SAEtEE,EAA2B,CACtCC,GACE5L,UAASI,aAAYC,mBAAkBI,SAAQC,qBAEjD,MAAM4F,EAAY,iBAAOsF,GAEzBtF,EAAUuF,OAASvF,EAAUuF,QAAU,GACvCvF,EAAUuF,OAAO,eAAiB,IAClCvF,EAAUuF,OAAO,oBAAsB,IACvCvF,EAAUuF,OAAO,iBAAmB,IAGpCvF,EAAUwF,UAAYxF,EAAUwF,WAAa,GAC7CxF,EAAUwF,UAAUjJ,OAAS7C,EAC7BsG,EAAUwF,UAAU1L,WAAaA,EACjCkG,EAAUwF,UAAU,qBAAuBzL,EAC3CiG,EAAUwF,UAAUrL,OAASA,EAC7B6F,EAAUwF,UAAU,qBAAuB,IAAI1L,UAAmBM,cAElEqL,OAAOC,KAAK1F,GAAW0E,QAASiB,IAC1BA,EAAE1L,WAAW,yBACR+F,EAAU2F,KAGrB3F,EAAU,kBAAkBtG,MAAc,CACxCiI,YAAa7H,GAuBf,OApBY,iBAAOkG,GAIhBtD,MAAM,MACNkJ,IAAKjB,IACJ,GAAIA,EAAK1K,WAAW,oBAElB,MAAO,mBAAmBP,MAE5B,GAAIiL,EAAK1K,WAAW,WAAY,CAC9B,MAAMpD,EAAQ8N,EAAKjI,MAAM,UAAW,GACpC,GAAI7F,EAAM,GACR,MAAO,WAAWA,EAAM,MAG5B,OAAO8N,IAERkB,KAAK,OAKGC,EAAkB,CAAC/O,EAAgCW,IAC1DA,aAAiBiE,MACZjE,EAAMJ,SAAW,GAEL,iBAAVI,EACFA,EAELA,aAAiBqO,OACZrO,EAAMyN,WAERpO,EAAE,qB,kCCzFX,+CAEO,MAAMiP,EAAsB,KACjC,MAAO/J,GAAe,aAAY,CAAEgK,MAAO,MAAOC,QAAS,KAAM9G,KAAM,YAChER,GAAkB,aAAY,CAAEqH,MAAO,MAAOC,QAAS,KAAM9G,KAAM,eACnEP,GAA8B,aAAY,CAC/CoH,MAAO,wBACPC,QAAS,KACT9G,KAAM,2BAEDN,GAAa,aAAY,CAAEmH,MAAO,OAAQC,QAAS,KAAM9G,KAAM,UAC/DlD,GAAuB,aAAY,CACxC+J,MAAO,sBACPC,QAAS,KACT9G,KAAM,mBAER,MAAO,CACLnD,cACA2C,iBACAC,6BACAC,YACA5C,yB,kCCrBJ,oJAsBA,IAAIiK,EAAa,EACjB,MAAMC,EAAiD,CAErDC,QAASF,IACTG,QAASH,IACTI,YAAaJ,IACbK,SAAUL,IACVxK,MAAOwK,KAoBHM,EAAoB,CAAC1P,EAAc+E,K,UACvC,MAAO4K,EAAU7L,EAAUnD,GAAS,aAAqC,CACvEiP,iBAAkB,CAAEV,MAAO,sBAAuBC,QAAS,KAAM9G,KAAM,mBACvEtD,OACA8K,QAAQ,EACRC,YAAY,IAGd,IAAKhM,EACH,MAAO,CACLvD,QAASP,EAAE,0BACXyM,KAAM,gBAAC,IAAc,MACrBsD,MAAOV,EAAoBC,SAI/B,GAAI3O,EAGF,OADAoF,QAAQpF,MAAM,4BAA4BoE,OAAWpE,GAC9C,CACLJ,QAASP,EAAE,wBACXyM,KAAM,gBAAC,IAAqB,CAACuD,MAAO,IAAWlQ,QAC/CiQ,MAAOV,EAAoBzK,OAI/B,MAAMqL,EAAmD,QAArC,cAAaN,EAAU,sBAAc,eAAE7O,OAGrDoP,EAA+C,QAAnC,cAAaP,EAAU,oBAAY,eAAE7O,OAGjDqP,EAA6C,QAAlC,cAAaR,EAAU,mBAAW,eAAE7O,OAIrD,MAAoB,SAAhBmP,EACK,CACL1P,QAASP,EAAE,8BACXyM,KAAM,gBAAC,IAAc,MACrBsD,MAAOV,EAAoBG,aAId,SAAbW,EACK,CACL5P,QAASP,EAAE,2BACXyM,KAAM,gBAAC,IAAqB,CAACuD,MAAO,IAAWlQ,QAC/CiQ,MAAOV,EAAoBI,UAIb,SAAdS,EACK,CACL3P,QAASP,EAAE,0BACXyM,KAAM,gBAAC,IAAe,CAACuD,MAAO,IAAQlQ,QACtCiQ,MAAOV,EAAoBE,SAIxB,CACLhP,QAASP,EAAE,0BACXyM,KAAM,gBAAC,IAAW,MAClBsD,MAAOV,EAAoBC,UAIlBc,EAAoC,KAC/C,MAAM,EAAEpQ,GAAM,4BACPqQ,EAAYC,GAAiB,YAAe,GAE7CC,EAAwBb,EAAkB1P,EAAG,2BAC7CwQ,EAAgBd,EAAkB1P,EAAG,kBACrCyQ,EAAUf,EAAkB1P,EAAG,WAM/B0Q,EA1FkB,CAACC,IACzB,IAAIC,EAAQD,EAAO,GAOnB,OANAA,EAAOhD,QAASxN,IACVyQ,EAAMb,MAAQ5P,EAAM4P,QACtBa,EAAQzQ,KAILyQ,EAAMnE,MAkFUoE,CAAkB,CAACL,EAAeD,EAAuBE,IAEhF,OACE,gBAAC,IAAiB,CAChBK,cACE,4BACG9Q,EAAE,sC,IAAwCqQ,EAAa,KAAOK,GAGnEK,SAba,CAACC,EAAQlR,KACxBwQ,EAAcxQ,IAaZuQ,WAAYA,GAEZ,gBAAC,IAAkB,CACjBY,YAAajR,EAAE,2BACfkR,aAAclR,EAAE,0BAEhB,gBAAC,IAAe,CAACF,MAAO0Q,EAAcjQ,QAASkM,KAAM+D,EAAc/D,MACjE,gBAAC,OAAI,CAAC0E,GAAO,IAAH,mBACPnR,EAAE,oCAIP,gBAAC,IAAe,CAACF,MAAOyQ,EAAsBhQ,QAASkM,KAAM8D,EAAsB9D,MACjF,gBAAC,OAAI,CAAC0E,GAAO,IAAH,4BACPnR,EAAE,4CAIP,gBAAC,IAAe,CAACF,MAAO2Q,EAAQlQ,QAASkM,KAAMgE,EAAQhE,MACrD,gBAAC,OAAI,CAAC0E,GAAO,IAAH,YACPnR,EAAE,gC,mMC5Jf,kCAAO,MAAMoR,EACX,uD,kCCQF,kCAAO,MAAMC,EAAe,CAC1BpJ,EAKAkC,KACoC,QACpC,OAA4B,QAA5B,EAAgB,QAAhB,EAAAlC,aAAQ,EAARA,EAAUnH,cAAM,eAAEwQ,kBAAU,eAAE3R,KAAM4R,GAA4BA,EAAEpH,OAASA","file":"vsphere-plugin/code-refs/vsphereStatus-chunk-aed886aaa703675a83d6.min.js","sourcesContent":["import { TFunction } from 'i18next';\nimport { toInteger } from 'lodash';\nimport {\n  HealthState,\n  PrometheusHealthPopupProps,\n  PrometheusResult,\n  PrometheusValue,\n  SubsystemHealth,\n} from '@console/dynamic-plugin-sdk';\nimport { ConfigMap } from '../resources';\n\nconst getPrometheusMetricValue = (\n  prometheusResult: PrometheusResult[],\n  reason: string,\n): PrometheusValue | undefined => prometheusResult.find((r) => r.metric.reason === reason)?.value;\n\nexport const getVSphereHealth = (\n  t: TFunction,\n  responses: PrometheusHealthPopupProps['responses'],\n  configMapResult: PrometheusHealthPopupProps['k8sResult'],\n): SubsystemHealth => {\n  if (!configMapResult) {\n    return { state: HealthState.LOADING };\n  }\n\n  if (configMapResult.loadError) {\n    // This should not happen if the vSphere FLAG is true\n    return {\n      state: HealthState.WARNING,\n      message: t('vsphere-plugin~Missing the vSphere config map.'),\n    };\n  }\n\n  if (!configMapResult.loaded) {\n    return { state: HealthState.LOADING };\n  }\n\n  const cloudProviderConfig = configMapResult.data as ConfigMap | undefined;\n  if (!cloudProviderConfig) {\n    return {\n      state: HealthState.WARNING,\n      message: t('vsphere-plugin~Not configured yet'),\n    };\n  }\n\n  // by vSphere Problem Detector\n  if (responses.length < 1) {\n    return { state: HealthState.LOADING };\n  }\n\n  if (responses.find((r) => r.error)) {\n    return { state: HealthState.ERROR, message: t('vsphere-plugin~Prometheus query failed.') };\n  }\n\n  if (!responses[0].response?.status) {\n    return { state: HealthState.LOADING };\n  }\n\n  const prometheusResult = responses[0].response?.data?.result;\n  if (responses[0].response.status !== 'success' || !prometheusResult) {\n    return { state: HealthState.ERROR, message: t('vsphere-plugin~Prometheus query failed.') };\n  }\n\n  const invCreds = getPrometheusMetricValue(prometheusResult, 'InvalidCredentials');\n\n  if (invCreds?.[0] && toInteger(invCreds?.[1]) > 0) {\n    // TODO: Add timestamp to the message but where to get it from?? It's not invCreds[0]\n\n    return { state: HealthState.WARNING, message: t('vsphere-plugin~Invalid credentials') };\n  }\n\n  const syncErr = getPrometheusMetricValue(prometheusResult, 'SyncError');\n  if (toInteger(syncErr?.[1])) {\n    // TODO: Add timestamp to the message\n    return { state: HealthState.WARNING, message: 'vsphere-plugin~Synchronization failed' };\n  }\n\n  const anyFailingMetric = prometheusResult.find((r) => toInteger(r.value?.[1]) > 0);\n  if (anyFailingMetric) {\n    // TODO: Add timestamp to the message\n    return {\n      state: HealthState.WARNING,\n      message: t('vsphere-plugin~Failing {{reason}}', { reason: anyFailingMetric.metric.reason }),\n    };\n  }\n\n  return {\n    state: HealthState.OK,\n    /* To be changed. Since the Problem detector is unreliable, we can not be sure about the result so showing Progress instead and instructing the user to take actions to verify. */\n  };\n};\n","import * as React from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Alert,\n  AlertVariant,\n  Stack,\n  StackItem,\n  Bullseye,\n  Spinner,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { Formik, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport * as Yup from 'yup';\nimport { HealthState, SubsystemHealth } from '@console/dynamic-plugin-sdk';\nimport { useConnectionForm } from '../hooks/use-connection-form';\nimport { useConnectionModels } from '../hooks/use-connection-models';\nimport { usePopupVisibility } from '../hooks/use-popup-visibility';\nimport { PersistError, persist } from './persist';\nimport { ConnectionFormFormikValues, VSphereConnectionProps } from './types';\nimport { getErrorMessage } from './utils';\nimport { VSphereConnectionForm } from './VSphereConnectionForm';\nimport { VSphereOperatorStatuses } from './VSphereOperatorStatuses';\nimport './VSphereConnectionModal.css';\n\ntype VSphereConnectionModalFooterProps = {\n  onClose: VoidFunction;\n  mustPatch: boolean;\n};\n\nconst VSphereConnectionModalFooter: React.FC<VSphereConnectionModalFooterProps> = ({\n  onClose,\n  mustPatch,\n}) => {\n  const { t } = useTranslation('vsphere-plugin');\n  const { isSubmitting, isValid, dirty, submitForm } = useFormikContext();\n  return (\n    <Split hasGutter>\n      <SplitItem>\n        <Button\n          variant=\"primary\"\n          isDisabled={isSubmitting || !isValid || (mustPatch ? false : !dirty)}\n          onClick={submitForm}\n          isLoading={isSubmitting}\n        >\n          {isSubmitting ? t('Saving') : t('Save configuration')}\n        </Button>\n      </SplitItem>\n      <SplitItem>\n        <Button variant=\"link\" onClick={onClose} isDisabled={isSubmitting}>\n          {t('Cancel')}\n        </Button>\n      </SplitItem>\n    </Split>\n  );\n};\n\ntype VSphereConnectionModalAlertProps = {\n  health: SubsystemHealth;\n  error?: { title: string; message: string };\n};\n\nconst VSphereConnectionModalAlert: React.FC<VSphereConnectionModalAlertProps> = ({\n  health,\n  error,\n}) => {\n  const { t } = useTranslation('vsphere-plugin');\n  const { isSubmitting } = useFormikContext();\n\n  if (error) {\n    return (\n      <Alert isInline title={error.title} variant={AlertVariant.danger}>\n        {error.message}\n      </Alert>\n    );\n  }\n\n  if (!isSubmitting && health.state === HealthState.WARNING) {\n    return (\n      <Alert\n        isInline\n        title={t('vSphere Problem Detector (can be outdated)')}\n        variant={AlertVariant.warning}\n      >\n        {health.message}\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert variant={AlertVariant.info} isInline title={t('Delayed propagation of configuration')}>\n      {t(\n        'The configuration process updates operator statuses and reboots nodes. This process typically takes about an hour. Existing resources such as previously bound Persistent Volume Claims might become disconnected.',\n      )}\n      <br />\n      {t(\n        'Note, that existing resources (like already bound PVCs) might get broken by these changes.',\n      )}\n    </Alert>\n  );\n};\n\nconst datastoreRegex = /^\\/.*?\\/datastore\\/.+/;\nconst folderRegex = /^\\/.*?\\/vm\\/.+/;\n\nconst validationSchema = Yup.lazy((values: ConnectionFormFormikValues) =>\n  Yup.object<ConnectionFormFormikValues>({\n    vcenter: Yup.string().required('vCenter is required.'),\n    username: Yup.string().required('Username is required.'),\n    password: Yup.string().required('Password is required.'),\n    datacenter: Yup.string().required('Datacenter is required.'),\n    defaultDatastore: Yup.string()\n      .required('Default data store is required.')\n      .test(\n        'Correct prefix',\n        `Must start with /${values.datacenter}/datastore/`,\n        (value: string) => {\n          if (!value || !values.datacenter) {\n            return true;\n          }\n          return value.startsWith(`/${values.datacenter}/datastore/`);\n        },\n      )\n      .matches(datastoreRegex, `Must match regex ${datastoreRegex}`),\n    folder: Yup.string()\n      .required('Virtual Machine Folder is required.')\n      .test('Correct prefix', `Must start with /${values.datacenter}/vm/`, (value: string) => {\n        if (!value || !values.datacenter) {\n          return true;\n        }\n        return value.startsWith(`/${values.datacenter}/vm/`);\n      })\n      .matches(folderRegex, `Must match regex ${folderRegex}`),\n    vCenterCluster: Yup.string().required('vCenter cluster is required.'),\n  }),\n);\n\nexport const VSphereConnectionModal: React.FC<VSphereConnectionProps> = ({\n  health,\n  hide,\n  cloudProviderConfig,\n}) => {\n  usePopupVisibility();\n  const { t } = useTranslation('vsphere-plugin');\n  const [isModalOpen, setModalOpen] = React.useState(true);\n  const [error, setError] = React.useState<{ title: string; message: string }>();\n\n  const models = useConnectionModels();\n\n  const { initValues, isLoaded, mustPatch, error: loadError } = useConnectionForm(\n    cloudProviderConfig,\n  );\n\n  const onClose = () => {\n    setModalOpen(false);\n    hide();\n  };\n\n  const onSave = async (values: ConnectionFormFormikValues) => {\n    setError(undefined);\n\n    try {\n      await persist(t, models, values, cloudProviderConfig);\n      onClose();\n    } catch (e) {\n      if (e instanceof PersistError) {\n        setError({ title: e.message, message: e.detail });\n      } else {\n        setError({ title: t('An error occured.'), message: getErrorMessage(t, e) });\n      }\n    }\n  };\n\n  let modalBody: React.ReactNode;\n\n  if (loadError) {\n    modalBody = (\n      <Alert isInline title={loadError.title} variant=\"danger\">\n        {loadError.message}\n      </Alert>\n    );\n  } else if (isLoaded) {\n    modalBody = (\n      <Formik<ConnectionFormFormikValues>\n        initialValues={initValues}\n        onSubmit={onSave}\n        validationSchema={validationSchema}\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <VSphereConnectionForm />\n          </StackItem>\n          <StackItem>\n            <VSphereOperatorStatuses />\n          </StackItem>\n          <StackItem>\n            <VSphereConnectionModalAlert error={error} health={health} />\n          </StackItem>\n          <StackItem>\n            <VSphereConnectionModalFooter onClose={onClose} mustPatch={mustPatch || !!error} />\n          </StackItem>\n        </Stack>\n      </Formik>\n    );\n  } else {\n    modalBody = (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    isModalOpen && (\n      <Modal\n        className=\"plugin-vsphere-modal\"\n        variant={ModalVariant.medium}\n        position=\"top\"\n        title={t('vSphere connection configuration')}\n        isOpen\n        showClose={!isLoaded}\n        onClose={!isLoaded ? onClose : undefined}\n      >\n        {modalBody}\n      </Modal>\n    )\n  );\n};\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { K8sModel, k8sGet } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { ConnectionFormFormikValues } from '../components/types';\nimport { decodeBase64, getErrorMessage, parseKeyValue } from '../components/utils';\nimport { ConfigMap, Infrastructure, Secret } from '../resources';\nimport { useConnectionModels } from './use-connection-models';\n\nexport class LoadError extends Error {\n  detail: string;\n\n  constructor(title: string, detail: string) {\n    super(title);\n    this.name = 'LoadError';\n    this.detail = detail;\n  }\n}\n\nconst initialLoad = async (\n  t: TFunction,\n  secretModel: K8sModel,\n  infrastructureModel: K8sModel,\n  cloudProviderConfig: ConfigMap,\n): Promise<{ values: ConnectionFormFormikValues; mustPatch: boolean }> => {\n  const config = cloudProviderConfig.data?.config;\n  if (!config) {\n    return {\n      values: {\n        vcenter: '',\n        datacenter: '',\n        defaultDatastore: '',\n        folder: '',\n        username: '',\n        password: '',\n        vCenterCluster: '',\n      },\n      mustPatch: false,\n    };\n  }\n\n  const keyValues = parseKeyValue(config);\n\n  const server = keyValues.server || '';\n  const datacenter = keyValues.datacenter || '';\n  const defaultDatastore = keyValues['default-datastore'] || '';\n  const folder = keyValues.folder || '';\n\n  let vCenterCluster = '';\n  const resourcePoolPath = keyValues['resourcepool-path'] as string;\n  if (resourcePoolPath?.length) {\n    const paths = resourcePoolPath.split('/');\n    if (paths.length > 3) {\n      [, , , vCenterCluster] = paths;\n    }\n  }\n  let username = '';\n  let password = '';\n\n  // query Secret\n  if (keyValues['secret-name'] && keyValues['secret-namespace']) {\n    // parse secret for username and password\n    try {\n      const secret = await k8sGet<Secret>({\n        model: secretModel,\n        name: keyValues['secret-name'],\n        ns: keyValues['secret-namespace'],\n      });\n\n      if (!secret.data) {\n        // eslint-disable-next-line no-console\n        console.error(`Unexpected structure of the \"${keyValues['secret-name']}\" secret`);\n      }\n\n      const secretKeyValues = secret.data || {};\n      username = decodeBase64(secretKeyValues[`${server}.username`]);\n      password = decodeBase64(secretKeyValues[`${server}.password`]);\n    } catch (e) {\n      // It should be there if referenced\n      // eslint-disable-next-line no-console\n      console.error(\n        `Failed to load \"${keyValues['secret-name']}\" from \"${keyValues['secret-namespace']}\" secret: `,\n        e,\n      );\n    }\n  }\n\n  let mustPatch = false;\n  try {\n    const infrastructure = await k8sGet<Infrastructure>({\n      model: infrastructureModel,\n      name: 'cluster',\n    });\n\n    const domain = infrastructure?.spec?.platformSpec?.vsphere?.failureDomains?.find(\n      (d) => d.server === server,\n    );\n    if (domain) {\n      const computeCluster = domain?.topology?.computeCluster?.split('/');\n      let infraVCenterCluster = '';\n      if (computeCluster.length > 3) {\n        [, , , infraVCenterCluster] = computeCluster;\n      }\n\n      if (!vCenterCluster) {\n        vCenterCluster = infraVCenterCluster;\n      }\n      const datacenterDiff = domain.topology.datacenter !== datacenter;\n      const datastoreDiff = domain.topology.datastore !== defaultDatastore;\n      const vCenterClusterDiff = infraVCenterCluster !== vCenterCluster;\n      mustPatch = datacenterDiff || datastoreDiff || vCenterClusterDiff;\n    }\n  } catch (e) {\n    throw new LoadError(t('Failed to fetch infrastructure resource'), getErrorMessage(t, e));\n  }\n\n  return {\n    values: {\n      vcenter: server,\n      datacenter,\n      defaultDatastore,\n      folder,\n      username,\n      password,\n      vCenterCluster,\n    },\n    mustPatch,\n  };\n};\n\nexport const useConnectionForm = (cloudProviderConfig?: ConfigMap) => {\n  const { t } = useTranslation('vsphere-plugin');\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [error, setError] = React.useState<{ title: string; message: string }>();\n  const { secretModel, infrastructureModel } = useConnectionModels();\n  const [result, setResult] = React.useState<{\n    values: ConnectionFormFormikValues;\n    mustPatch: boolean;\n  }>();\n\n  React.useEffect(() => {\n    const doItAsync = async () => {\n      if (isLoaded || !cloudProviderConfig) {\n        return;\n      }\n      try {\n        const loadResult = await initialLoad(\n          t,\n          secretModel,\n          infrastructureModel,\n          cloudProviderConfig,\n        );\n        setResult(loadResult);\n      } catch (e) {\n        if (e instanceof LoadError) {\n          setError({ title: e.message, message: e.detail });\n        } else {\n          setError({ title: t('An error occured'), message: getErrorMessage(t, e) });\n        }\n      }\n      setIsLoaded(true);\n    };\n\n    doItAsync();\n  }, [cloudProviderConfig, infrastructureModel, isLoaded, secretModel, t]);\n\n  return {\n    initValues: result?.values,\n    isLoaded,\n    error,\n    mustPatch: result?.mustPatch,\n  };\n};\n","import * as React from 'react';\n\nconst setPopupVisibility = (v: 'visible' | 'hidden') => {\n  const popup = document.getElementsByClassName('plugin-vsphere-status-popup');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const style = (popup?.[0] as any)?.style;\n  style && (style.visibility = v);\n};\n\nexport const usePopupVisibility = () => {\n  React.useEffect(\n    // Hack to stick with the Health status popup\n    () => {\n      setPopupVisibility('hidden');\n      return () => {\n        setPopupVisibility('visible');\n      };\n    },\n    [\n      /* just once */\n    ],\n  );\n};\n","import { TFunction } from 'react-i18next';\nimport {\n  k8sCreate,\n  k8sGet,\n  K8sModel,\n  k8sPatch,\n} from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { k8sListResourceItems } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport {\n  FAILURE_DOMAIN_NAME,\n  KUBE_CONTROLLER_MANAGER_NAME,\n  VSPHERE_CONFIGMAP_NAME,\n  VSPHERE_CONFIGMAP_NAMESPACE,\n  VSPHERE_CREDS_SECRET_NAME,\n  VSPHERE_CREDS_SECRET_NAMESPACE,\n} from '../constants';\nimport { ConfigMap, Infrastructure, KubeControllerManager, Secret } from '../resources';\nimport { ConnectionFormFormikValues } from './types';\nimport { encodeBase64, getErrorMessage, mergeCloudProviderConfig } from './utils';\n\nexport class PersistError extends Error {\n  detail: string;\n\n  constructor(title: string, detail: string) {\n    super(title);\n    this.name = 'PersistError';\n    this.detail = detail;\n  }\n}\n\nconst persistSecret = async (\n  t: TFunction<'vsphere-plugin'>,\n  secretModel: K8sModel,\n  values: ConnectionFormFormikValues,\n): Promise<void> => {\n  const { vcenter, username, password } = values;\n\n  const usernameB64 = encodeBase64(username);\n  const passwordB64 = encodeBase64(password);\n\n  const secretData = {\n    [`${vcenter}.username`]: usernameB64,\n    [`${vcenter}.password`]: passwordB64,\n  };\n\n  try {\n    const secret = await k8sGet<Secret>({\n      model: secretModel,\n      name: VSPHERE_CREDS_SECRET_NAME,\n      ns: VSPHERE_CREDS_SECRET_NAMESPACE,\n    });\n\n    // Found - do PATCH\n    try {\n      await k8sPatch({\n        model: secretModel,\n        resource: secret,\n        data: [\n          {\n            op: 'replace',\n            path: '/data',\n            value: secretData,\n          },\n        ],\n      });\n    } catch (e) {\n      throw new PersistError(\n        t('Failed to patch {{secret}}', {\n          secret: VSPHERE_CREDS_SECRET_NAME,\n        }),\n        getErrorMessage(t, e),\n      );\n    }\n  } catch (e) {\n    // Not found, create one\n    const data: Secret = {\n      apiVersion: secretModel.apiVersion,\n      kind: secretModel.kind,\n      metadata: {\n        name: VSPHERE_CREDS_SECRET_NAME,\n        namespace: VSPHERE_CREDS_SECRET_NAMESPACE,\n      },\n      data: secretData,\n    };\n\n    try {\n      await k8sCreate({\n        model: secretModel,\n        data,\n      });\n    } catch (e2) {\n      throw new PersistError(\n        t('Failed to create {{secret}} secret', {\n          secret: VSPHERE_CREDS_SECRET_NAME,\n        }),\n        getErrorMessage(t, e2),\n      );\n    }\n  }\n};\n\n/** oc patch kubecontrollermanager cluster -p='{\"spec\": {\"forceRedeploymentReason\": \"recovery-'\"$( date --rfc-3339=ns )\"'\"}}' --type=merge */\nconst patchKubeControllerManager = async (\n  t: TFunction<'vsphere-plugin'>,\n  kubeControllerManagerModel: K8sModel,\n): Promise<void> => {\n  try {\n    const cm = await k8sGet<KubeControllerManager>({\n      model: kubeControllerManagerModel,\n      name: KUBE_CONTROLLER_MANAGER_NAME,\n    });\n\n    if (!cm) {\n      throw new PersistError(t('Failed to load kubecontrollermanager'), t('Not found.'));\n    }\n\n    cm.spec = cm.spec || {};\n    const date = new Date().toISOString();\n    cm.spec.forceRedeploymentReason = `recovery-${date}`;\n\n    await k8sPatch({\n      model: kubeControllerManagerModel,\n      resource: {\n        metadata: {\n          name: KUBE_CONTROLLER_MANAGER_NAME,\n        },\n      },\n      data: [\n        {\n          op: 'replace',\n          path: '/spec',\n          value: cm.spec,\n        },\n      ],\n    });\n  } catch (e) {\n    throw new PersistError(t('Failed to patch kubecontrollermanager'), getErrorMessage(t, e));\n  }\n};\n\nconst persistProviderConfigMap = async (\n  t: TFunction<'vsphere-plugin'>,\n  configMapModel: K8sModel,\n  values: ConnectionFormFormikValues,\n  cloudProviderConfig?: ConfigMap,\n): Promise<void> => {\n  const { vcenter, datacenter, defaultDatastore, folder, vCenterCluster } = values;\n\n  if (cloudProviderConfig) {\n    const configIniString = mergeCloudProviderConfig(\n      cloudProviderConfig.data?.config || '',\n      values,\n    );\n\n    try {\n      await k8sPatch({\n        model: configMapModel,\n        resource: {\n          metadata: {\n            name: VSPHERE_CONFIGMAP_NAME,\n            namespace: VSPHERE_CONFIGMAP_NAMESPACE,\n          },\n        },\n        data: [\n          {\n            op: cloudProviderConfig.data ? 'replace' : 'add',\n            path: '/data',\n            value: { config: configIniString },\n          },\n        ],\n      });\n    } catch (e) {\n      throw new PersistError(\n        t('Failed to patch {{cm}}', { cm: VSPHERE_CONFIGMAP_NAME }),\n        getErrorMessage(t, e),\n      );\n    }\n  } else {\n    // Not found - create new one\n\n    // Keep following allignment\n    const configIni = `[Global]\nsecret-name = \"${VSPHERE_CREDS_SECRET_NAME}\"\nsecret-namespace = \"${VSPHERE_CREDS_SECRET_NAMESPACE}\"\ninsecure-flag = \"1\"\n\n[Workspace]\nserver = \"${vcenter}\"\ndatacenter = \"${datacenter}\"\ndefault-datastore = \"${defaultDatastore}\"\nfolder = \"${folder}\"\nresourcepool-path = \"/${datacenter}/host/${vCenterCluster}/Resources\"\n\n[VirtualCenter \"${vcenter}\"]\ndatacenters = \"${datacenter}\"\n`;\n\n    const data: ConfigMap = {\n      apiVersion: configMapModel.apiVersion,\n      kind: configMapModel.kind,\n      metadata: {\n        name: VSPHERE_CONFIGMAP_NAME,\n        namespace: VSPHERE_CONFIGMAP_NAMESPACE,\n      },\n      data: {\n        config: configIni,\n      },\n    };\n\n    try {\n      await k8sCreate({\n        model: configMapModel,\n        data,\n      });\n    } catch (e) {\n      throw new PersistError(\n        t('Failed to create {{cm}} ConfigMap', {\n          cm: VSPHERE_CONFIGMAP_NAME,\n        }),\n        getErrorMessage(t, e),\n      );\n    }\n  }\n};\n\nconst taintValue = {\n  key: 'node.cloudprovider.kubernetes.io/uninitialized',\n  value: 'true',\n  effect: 'NoSchedule',\n};\n\nconst addTaints = async (t: TFunction<'vsphere-plugin'>, nodesModel: K8sModel) => {\n  const nodes = await k8sListResourceItems<NodeKind>({ model: nodesModel, queryParams: {} });\n  const patchRequests = [];\n  for (const node of nodes) {\n    if (!node.spec.taints) {\n      patchRequests.push(\n        k8sPatch({\n          model: nodesModel,\n          resource: node,\n          data: [\n            {\n              op: 'add',\n              path: `/spec/taints`,\n              value: [taintValue],\n            },\n          ],\n        }),\n      );\n    } else {\n      const taintIndex = node.spec.taints.findIndex(\n        (taint) => taint.key === 'node.cloudprovider.kubernetes.io/uninitialized',\n      );\n      if (taintIndex === -1) {\n        patchRequests.push(\n          k8sPatch({\n            model: nodesModel,\n            resource: node,\n            data: [\n              {\n                op: 'add',\n                path: `/spec/taints/-`,\n                value: taintValue,\n              },\n            ],\n          }),\n        );\n      } else {\n        const taint = node.spec.taints[taintIndex];\n        if (!(taint.effect === taintValue.value && taint.key === taintValue.key)) {\n          patchRequests.push(\n            k8sPatch({\n              model: nodesModel,\n              resource: node,\n              data: [\n                {\n                  op: 'replace',\n                  path: `/spec/taints/${taintIndex}`,\n                  value: taintValue,\n                },\n              ],\n            }),\n          );\n        }\n      }\n    }\n  }\n  const results = await Promise.allSettled(patchRequests);\n  const rejectedPromise = results.findIndex((r) => r.status === 'rejected');\n  if (rejectedPromise !== -1) {\n    throw new PersistError(\n      t('Failed to add taint to node {{node}}', {\n        node: nodes[rejectedPromise].metadata?.name,\n      }),\n      getErrorMessage(t, (results[rejectedPromise] as PromiseRejectedResult).reason),\n    );\n  }\n};\n\nconst persistInfrastructure = async (\n  t: TFunction<'vsphere-plugin'>,\n  infrastructureModel: K8sModel,\n  values: ConnectionFormFormikValues,\n) => {\n  const spec: Infrastructure['spec'] = {\n    cloudConfig: {\n      key: 'config',\n      name: VSPHERE_CONFIGMAP_NAME,\n    },\n    platformSpec: {\n      type: 'VSphere',\n      vsphere: {\n        failureDomains: [\n          {\n            name: FAILURE_DOMAIN_NAME,\n            region: 'generated-region',\n            server: values.vcenter,\n            topology: {\n              computeCluster: `/${values.datacenter}/host/${values.vCenterCluster}`,\n              datacenter: values.datacenter,\n              datastore: values.defaultDatastore,\n              networks: [values.vCenterCluster],\n              resourcePool: `/${values.datacenter}/host/${values.vCenterCluster}/Resources`,\n            },\n            zone: 'generated-zone',\n          },\n        ],\n        nodeNetworking: {\n          external: {},\n          internal: {},\n        },\n        vcenters: [\n          {\n            datacenters: [values.datacenter],\n            port: 443,\n            server: values.vcenter,\n          },\n        ],\n      },\n    },\n  };\n  try {\n    await k8sPatch({\n      model: infrastructureModel,\n      resource: {\n        metadata: {\n          name: 'cluster',\n        },\n      },\n      data: [\n        {\n          op: 'replace',\n          path: `/spec`,\n          value: spec,\n        },\n      ],\n    });\n  } catch (e) {\n    throw new PersistError(t('Failed to patch infrastructure spec'), getErrorMessage(t, e));\n  }\n};\n\nexport const persist = async (\n  t: TFunction<'vsphere-plugin'>,\n  {\n    secretModel,\n    configMapModel,\n    kubeControllerManagerModel,\n    nodeModel,\n    infrastructureModel,\n  }: {\n    secretModel: K8sModel;\n    configMapModel: K8sModel;\n    kubeControllerManagerModel: K8sModel;\n    nodeModel: K8sModel;\n    infrastructureModel: K8sModel;\n  },\n  values: ConnectionFormFormikValues,\n  cloudProviderConfig?: ConfigMap,\n): Promise<void> => {\n  await persistSecret(t, secretModel, values);\n  await patchKubeControllerManager(t, kubeControllerManagerModel);\n  await persistProviderConfigMap(t, configMapModel, values, cloudProviderConfig);\n  await addTaints(t, nodeModel);\n  await persistInfrastructure(t, infrastructureModel, values);\n};\n","import * as React from 'react';\nimport { Form, FormGroup } from '@patternfly/react-core';\nimport { useFormikContext } from 'formik';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { PopoverHelpButton } from '../PopoverHelpButton';\nimport TextField from './TextField';\nimport { ConnectionFormFormikValues } from './types';\n\nimport './VSphereConnectionForm.css';\n\nexport const VSphereConnectionForm = () => {\n  const { t } = useTranslation('vsphere-plugin');\n  const vcenterRef = React.useRef<HTMLInputElement>(null);\n  const { setFieldTouched } = useFormikContext<ConnectionFormFormikValues>();\n\n  React.useEffect(() => {\n    vcenterRef?.current?.focus();\n  }, []);\n\n  return (\n    <Form id=\"vsphere-connection-modal-form\">\n      <FormGroup\n        label={t('vCenter')}\n        labelIcon={\n          <PopoverHelpButton\n            content={t(\n              'Enter the network address of the vCenter server. It can either be a domain name or IP address',\n            )}\n          />\n        }\n        isRequired\n        fieldId=\"connection-vcenter\"\n      >\n        <TextField name=\"vcenter\" ref={vcenterRef} />\n      </FormGroup>\n      <FormGroup\n        label={t('vCenter cluster')}\n        isRequired\n        fieldId=\"connection-vcenter-cluster\"\n        labelIcon={\n          <PopoverHelpButton\n            content={t(\n              'Enter the name of the vSphere vCenter cluster where OpenShift Container Platform is installed.',\n            )}\n          />\n        }\n      >\n        <TextField name=\"vCenterCluster\" />\n      </FormGroup>\n      <FormGroup\n        label={t('Username')}\n        isRequired\n        fieldId=\"connection-username\"\n        labelIcon={\n          <PopoverHelpButton\n            content={t(\n              'Enter the vSphere vCenter username. An incorrect username will render the cluster nodes unschedulable (known issue: OCPBUGS-2353).',\n            )}\n          />\n        }\n      >\n        <TextField name=\"username\" />\n      </FormGroup>\n      <FormGroup\n        label={t('Password')}\n        labelIcon={\n          <PopoverHelpButton\n            content={t(\n              'Enter the vSphere vCenter password. The password will be stored in a Secret in the kube-system namespace for this cluster. An incorrect password will render the cluster nodes unschedulable (known issue: OCPBUGS-2353).',\n            )}\n          />\n        }\n        isRequired\n        fieldId=\"connection-password\"\n      >\n        <TextField name=\"password\" type=\"password\" />\n      </FormGroup>\n      <FormGroup\n        label={t('Datacenter')}\n        labelIcon={\n          <PopoverHelpButton\n            content={\n              <>\n                <Trans t={t}>\n                  Enter the name of the vSphere data center that contains the virtual machines\n                  currently backing-up the cluster.\n                </Trans>\n                <br />\n                <strong>\n                  <Trans t={t}>\n                    Warning: Updating this value once the configuration has been saved will detach\n                    any existing PersistentVolumes.\n                  </Trans>\n                </strong>\n              </>\n            }\n          />\n        }\n        isRequired\n        fieldId=\"connection-datacenter\"\n        onChange={() => {\n          setFieldTouched('defaultDatastore');\n          setFieldTouched('folder');\n        }}\n      >\n        <TextField name=\"datacenter\" />\n      </FormGroup>\n      <FormGroup\n        label={t('Default data store')}\n        labelIcon={\n          <PopoverHelpButton\n            content={\n              <>\n                <Trans t={t}>\n                  Select the data store in the vSphere data center that is to store the persistent\n                  data volumes.\n                </Trans>\n                <br />\n                <strong>\n                  <Trans t={t}>\n                    Warning: Updating this value will break any existing PersistentVolumes.\n                  </Trans>\n                </strong>\n              </>\n            }\n          />\n        }\n        isRequired\n        fieldId=\"connection-defaultdatastore\"\n      >\n        <TextField name=\"defaultDatastore\" />\n      </FormGroup>\n      <FormGroup\n        label={t('Virtual Machine Folder')}\n        labelIcon={\n          <PopoverHelpButton\n            content={\n              <Trans t={t}>\n                Provide <b>datacenter</b> folder which contains VMs of the cluster.\n              </Trans>\n            }\n          />\n        }\n        isRequired\n        fieldId=\"connection-folder\"\n      >\n        <TextField name=\"folder\" />\n      </FormGroup>\n    </Form>\n  );\n};\n","import * as React from 'react';\nimport { Button, Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { useTranslation } from 'react-i18next';\n\nexport const PopoverHelpButton: React.FC<{ content: React.ReactNode }> = ({ content }) => {\n  const { t } = useTranslation('vsphere-plugin');\n  return (\n    <Popover aria-label={t('Help')} bodyContent={content}>\n      <Button aria-label={t('Help')} variant=\"link\" isInline className=\"co-field-level-help\">\n        <OutlinedQuestionCircleIcon className=\"co-field-level-help__icon\" />\n      </Button>\n    </Popover>\n  );\n};\n","import * as React from 'react';\nimport {\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  TextInput,\n  TextInputProps,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useField } from 'formik';\n\ninterface TextFieldProps extends TextInputProps {\n  name: string;\n  helperText?: React.ReactNode;\n}\n\nconst TextField = React.forwardRef(\n  (\n    { helperText, onChange: onParentChange, ...props }: TextFieldProps,\n    ref: React.Ref<HTMLInputElement>,\n  ) => {\n    const [field, meta, { setValue }] = useField({\n      name: props.name,\n    });\n\n    const onChange = (_ev, value: string) => {\n      setValue(value);\n      onParentChange?.(_ev, value);\n    };\n\n    const fieldId = `textfield-${props.name}`;\n    const hasError = meta.touched && !!meta.error;\n\n    return (\n      <FormGroup id={`form-control__${fieldId}`} fieldId={fieldId}>\n        <TextInput\n          {...field}\n          {...props}\n          ref={ref}\n          id={fieldId}\n          onChange={onChange}\n          validated={hasError ? 'error' : 'default'}\n        />\n\n        {helperText && (\n          <FormHelperText>\n            <HelperText>\n              <HelperTextItem variant={'default'}>{helperText}</HelperTextItem>\n            </HelperText>\n          </FormHelperText>\n        )}\n        {hasError && (\n          <FormHelperText>\n            <HelperText>\n              <HelperTextItem icon={<ExclamationCircleIcon />} variant={'error'}>\n                {meta.error}\n              </HelperTextItem>\n            </HelperText>\n          </FormHelperText>\n        )}\n      </FormGroup>\n    );\n  },\n);\n\nTextField.displayName = 'TextField';\n\nexport default TextField;\n","export * from './node';\nexport * from './configMap';\nexport * from './secret';\nexport * from './kubeControllerManager';\nexport * from './storageClass';\nexport * from './persistentVolumeClaim';\nexport * from './infrastructure';\nexport * from './clusterOperator';\nexport * from './statusCondition';\n","import * as React from 'react';\nimport { StackItem, Stack } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { HealthState } from '@console/dynamic-plugin-sdk';\nimport {\n  PrometheusHealthPopupProps,\n  PrometheusHealthHandler,\n} from '@console/dynamic-plugin-sdk/dist/core/lib/lib-core';\nimport { ConfigMap } from '../../resources';\nimport { getVSphereHealth } from '../getVSphereHealth';\nimport { VSphereConnectionModal } from '../VSphereConnectionModal';\nimport { VSphereOperatorStatuses } from '../VSphereOperatorStatuses';\nimport './VSphereStatus.css';\n\n// https://issues.redhat.com/browse/MGMT-9085\n// https://access.redhat.com/solutions/6677901\n\nconst VSphereStatus: React.FC<PrometheusHealthPopupProps> = ({ hide, responses, k8sResult }) => {\n  const { t } = useTranslation();\n  const health = getVSphereHealth(t, responses, k8sResult);\n\n  if (\n    [HealthState.OK, HealthState.WARNING, HealthState.PROGRESS].includes(health.state) &&\n    k8sResult?.data\n  ) {\n    const cloudProviderConfig = k8sResult.data as ConfigMap;\n    return (\n      <VSphereConnectionModal\n        hide={hide}\n        cloudProviderConfig={cloudProviderConfig}\n        health={health}\n      />\n    );\n  }\n\n  if (health.state === HealthState.LOADING) {\n    return (\n      <Stack hasGutter>\n        <StackItem>{t('vsphere-plugin~Loading vSphere connection status')}</StackItem>\n      </Stack>\n    );\n  }\n\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>{t('vsphere-plugin~The vSphere Connection check is failing.')}</StackItem>\n        <StackItem>\n          <VSphereOperatorStatuses />\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nexport const healthHandler: PrometheusHealthHandler = (responses, t, additionalResource) => {\n  const health = getVSphereHealth(t, responses, additionalResource);\n  const { state } = health;\n\n  let message: string | undefined;\n  switch (state) {\n    case HealthState.WARNING:\n      message = health.message;\n      break;\n    case HealthState.OK:\n      message = t('vsphere-plugin~No errors are reported. Click the link for details.');\n      break;\n    default:\n      break;\n  }\n  return { state, message };\n};\n\nexport default VSphereStatus;\n","export const VSPHERE_FEATURE_FLAG = 'VSPHERECONNECTION';\nexport const VSPHERE_PLATFORM = 'VSphere';\n\nexport const VSPHERE_CREDS_SECRET_NAME = 'vsphere-creds';\nexport const VSPHERE_CREDS_SECRET_NAMESPACE = 'kube-system';\n\nexport const VSPHERE_CONFIGMAP_NAME = 'cloud-provider-config';\nexport const VSPHERE_CONFIGMAP_NAMESPACE = 'openshift-config';\n\nexport const KUBE_CONTROLLER_MANAGER_NAME = 'cluster';\n\nexport const FAILURE_DOMAIN_NAME = 'generated-failure-domain';\n","import { Buffer } from 'buffer';\nimport { encode, decode } from 'ini';\nimport { TFunction } from 'react-i18next';\nimport { VSPHERE_CREDS_SECRET_NAME, VSPHERE_CREDS_SECRET_NAMESPACE } from '../constants';\nimport { ConnectionFormFormikValues } from './types';\n\nexport const parseKeyValue = (config: string, delimiter = '='): { [key: string]: string } => {\n  const lines = config.split('\\n');\n\n  const result: { [key: string]: string } = {};\n  lines.forEach((line) => {\n    const idx = line.indexOf(delimiter);\n    if (idx > 0) {\n      const key = line.substring(0, idx).trim();\n      let value = line.substring(idx + 1).trim();\n\n      if (value.charAt(0) === '\"') value = value.substring(1);\n      if (value.charAt(value.length - 1) === '\"') value = value.substring(0, value.length - 1);\n      result[key] = value;\n    }\n  });\n\n  return result;\n};\n\nexport const encodeBase64 = (data: string) => Buffer.from(data).toString('base64');\nexport const decodeBase64 = (data: string) => Buffer.from(data, 'base64').toString('ascii');\n\nexport const mergeCloudProviderConfig = (\n  existingIni: string,\n  { vcenter, datacenter, defaultDatastore, folder, vCenterCluster }: ConnectionFormFormikValues,\n): string => {\n  const configIni = decode(existingIni);\n\n  configIni.Global = configIni.Global || {};\n  configIni.Global['secret-name'] = VSPHERE_CREDS_SECRET_NAME;\n  configIni.Global['secret-namespace'] = VSPHERE_CREDS_SECRET_NAMESPACE;\n  configIni.Global['insecure-flag'] = '1' /* string */;\n\n  // TODO: figure-out how to use quotes here\n  configIni.Workspace = configIni.Workspace || {};\n  configIni.Workspace.server = vcenter;\n  configIni.Workspace.datacenter = datacenter;\n  configIni.Workspace['default-datastore'] = defaultDatastore;\n  configIni.Workspace.folder = folder;\n  configIni.Workspace['resourcepool-path'] = `/${datacenter}/host/${vCenterCluster}/Resources`;\n\n  Object.keys(configIni).forEach((k: string) => {\n    if (k.startsWith('VirtualCenter')) {\n      delete configIni[k];\n    }\n  });\n  configIni[`VirtualCenter \"${vcenter}\"`] = {\n    datacenters: datacenter,\n  };\n\n  const ini = encode(configIni);\n\n  // correct the encoded string to the expected one\n  const result = ini\n    .split('\\n')\n    .map((line: string) => {\n      if (line.startsWith('[VirtualCenter \"')) {\n        // We do not want to have the value escaped (\"safe\")\n        return `[VirtualCenter \"${vcenter}\"]`;\n      }\n      if (line.startsWith('folder=')) {\n        const value = line.split('folder=', 2);\n        if (value[1]) {\n          return `folder=\"${value[1]}\"`;\n        }\n      }\n      return line;\n    })\n    .join('\\n');\n\n  return result;\n};\n\nexport const getErrorMessage = (t: TFunction<'vsphere-plugin'>, error: unknown): string => {\n  if (error instanceof Error) {\n    return error.message || '';\n  }\n  if (typeof error === 'string') {\n    return error;\n  }\n  if (error instanceof String) {\n    return error.toString();\n  }\n  return t('Unexpected error');\n};\n","import { useK8sModel } from '@console/dynamic-plugin-sdk/src/api/core-api';\n\nexport const useConnectionModels = () => {\n  const [secretModel] = useK8sModel({ group: 'app', version: 'v1', kind: 'Secret' });\n  const [configMapModel] = useK8sModel({ group: 'app', version: 'v1', kind: 'ConfigMap' });\n  const [kubeControllerManagerModel] = useK8sModel({\n    group: 'operator.openshift.io',\n    version: 'v1',\n    kind: 'KubeControllerManager',\n  });\n  const [nodeModel] = useK8sModel({ group: 'core', version: 'v1', kind: 'Node' });\n  const [infrastructureModel] = useK8sModel({\n    group: 'config.openshift.io',\n    version: 'v1',\n    kind: 'Infrastructure',\n  });\n  return {\n    secretModel,\n    configMapModel,\n    kubeControllerManagerModel,\n    nodeModel,\n    infrastructureModel,\n  };\n};\n","import * as React from 'react';\nimport { ExpandableSection } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport { UnknownIcon } from '@patternfly/react-icons/dist/esm/icons/unknown-icon';\nimport {\n  global_palette_green_500 as okColor,\n  global_palette_red_100 as errorColor,\n} from '@patternfly/react-tokens';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport {\n  StatusPopupItem,\n  StatusPopupSection,\n  useK8sWatchResource,\n} from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { ClusterOperator } from '@console/internal/module/k8s';\nimport { CONSOLE_PREFIX_CLUSTER_OPERATOR, getCondition } from '../resources';\nimport { K8sResourceConditionStatus } from '../resources/k8sResource';\n\nlet ohlCounter = 0;\nconst OperatorHealthLevel: { [key: string]: number } = {\n  // The order matters!\n  Unknown: ohlCounter++,\n  Healthy: ohlCounter++,\n  Progressing: ohlCounter++,\n  Degraded: ohlCounter++,\n  Error: ohlCounter++,\n};\n\ntype OperatorHealthType = {\n  message: string;\n  icon: React.ReactNode | undefined;\n  level: number;\n};\n\nconst getWorstIconState = (states: OperatorHealthType[]): OperatorHealthType['icon'] => {\n  let worst = states[0];\n  states.forEach((state) => {\n    if (worst.level < state.level) {\n      worst = state;\n    }\n  });\n\n  return worst.icon;\n};\n\nconst useOperatorHealth = (t: TFunction, name: string): OperatorHealthType => {\n  const [operator, isLoaded, error] = useK8sWatchResource<ClusterOperator>({\n    groupVersionKind: { group: 'config.openshift.io', version: 'v1', kind: 'ClusterOperator' },\n    name,\n    isList: false,\n    namespaced: false,\n  });\n\n  if (!isLoaded) {\n    return {\n      message: t('vsphere-plugin~Pending'),\n      icon: <InProgressIcon />,\n      level: OperatorHealthLevel.Unknown,\n    };\n  }\n\n  if (error) {\n    // eslint-disable-next-line no-console\n    console.error(`Failed to load operator \"${name}\": `, error);\n    return {\n      message: t('vsphere-plugin~Error'),\n      icon: <ExclamationCircleIcon color={errorColor.value} />,\n      level: OperatorHealthLevel.Error,\n    };\n  }\n\n  const progressing = getCondition(operator, 'Progressing')?.status as\n    | K8sResourceConditionStatus\n    | undefined;\n  const available = getCondition(operator, 'Available')?.status as\n    | K8sResourceConditionStatus\n    | undefined;\n  const degraded = getCondition(operator, 'Degraded')?.status as\n    | K8sResourceConditionStatus\n    | undefined;\n\n  if (progressing === 'True') {\n    return {\n      message: t('vsphere-plugin~Progressing'),\n      icon: <InProgressIcon />,\n      level: OperatorHealthLevel.Progressing,\n    };\n  }\n\n  if (degraded === 'True') {\n    return {\n      message: t('vsphere-plugin~Degraded'),\n      icon: <ExclamationCircleIcon color={errorColor.value} />,\n      level: OperatorHealthLevel.Degraded,\n    };\n  }\n\n  if (available === 'True') {\n    return {\n      message: t('vsphere-plugin~Healthy'),\n      icon: <CheckCircleIcon color={okColor.value} />,\n      level: OperatorHealthLevel.Healthy,\n    };\n  }\n\n  return {\n    message: t('vsphere-plugin~Unknown'),\n    icon: <UnknownIcon />,\n    level: OperatorHealthLevel.Unknown,\n  };\n};\n\nexport const VSphereOperatorStatuses: React.FC = () => {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  const kubeControllerManager = useOperatorHealth(t, 'kube-controller-manager');\n  const kubeApiServer = useOperatorHealth(t, 'kube-apiserver');\n  const storage = useOperatorHealth(t, 'storage');\n\n  const onToggle = (_event, value: boolean) => {\n    setIsExpanded(value);\n  };\n\n  const worstIconState = getWorstIconState([kubeApiServer, kubeControllerManager, storage]);\n\n  return (\n    <ExpandableSection\n      toggleContent={\n        <span>\n          {t('vsphere-plugin~Monitored operators')} {isExpanded ? null : worstIconState}\n        </span>\n      }\n      onToggle={onToggle}\n      isExpanded={isExpanded}\n    >\n      <StatusPopupSection\n        firstColumn={t('vsphere-plugin~Operator')}\n        secondColumn={t('vsphere-plugin~Status')}\n      >\n        <StatusPopupItem value={kubeApiServer.message} icon={kubeApiServer.icon}>\n          <Link to={`${CONSOLE_PREFIX_CLUSTER_OPERATOR}/kube-apiserver`}>\n            {t('vsphere-plugin~Kube API Server')}\n          </Link>\n        </StatusPopupItem>\n\n        <StatusPopupItem value={kubeControllerManager.message} icon={kubeControllerManager.icon}>\n          <Link to={`${CONSOLE_PREFIX_CLUSTER_OPERATOR}/kube-controller-manager`}>\n            {t('vsphere-plugin~Kube Controller Manager')}\n          </Link>\n        </StatusPopupItem>\n\n        <StatusPopupItem value={storage.message} icon={storage.icon}>\n          <Link to={`${CONSOLE_PREFIX_CLUSTER_OPERATOR}/storage`}>\n            {t('vsphere-plugin~Storage')}\n          </Link>\n        </StatusPopupItem>\n      </StatusPopupSection>\n    </ExpandableSection>\n  );\n};\n","import { K8sResourceConditionStatus } from './k8sResource';\n\nexport const CONSOLE_PREFIX_CLUSTER_OPERATOR =\n  '/k8s/cluster/config.openshift.io~v1~ClusterOperator';\n\nexport type OperatorStateType = {\n  progressing?: K8sResourceConditionStatus;\n  degraded?: K8sResourceConditionStatus;\n  available?: K8sResourceConditionStatus;\n};\n","import { K8sResourceCondition } from './k8sResource';\n\nexport type StatusCondition = {\n  status: string;\n  type: string;\n\n  lastTransitionTime: string;\n  message: string;\n  reason: string;\n};\n\nexport const getCondition = (\n  resource: {\n    status: {\n      conditions?: K8sResourceCondition[];\n    };\n  },\n  type: string,\n): K8sResourceCondition | undefined =>\n  resource?.status?.conditions?.find((c: K8sResourceCondition) => c.type === type);\n"],"sourceRoot":""}