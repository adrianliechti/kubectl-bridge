{"version":3,"sources":["webpack:///./packages/insights-plugin/src/components/InsightsPopup/index.tsx"],"names":["DataComponent","x","y","datum","Icon","id","fill","LabelComponent","clusterID","props","href","style","SubTitleComponent","InsightsPopup","responses","k8sResult","response","metricsResponse","error","metricsError","operatorStatusResponse","operatorStatusError","lastGatherResponse","t","metrics","conditions","data","spec","riskEntries","Object","entries","sort","k1","k2","numberOfIssues","values","reduce","acc","cur","waiting","disabled","Disabled","insightsURL","usingInsights","riskKeys","low","moderate","important","critical","lastRefreshTime","parseInt","result","value","hasGutter","timestamp","simple","className","innerRadius","ariaTitle","ariaDesc","map","k","v","title","subTitle","count","legendOrientation","width","height","radius","colorScale","subTitleComponent","constrainToVisibleArea","legendComponent","titleComponent","dx","dy","fontWeight","fontSize","name","dataComponent","labelComponent","rowGutter","padding","bottom","left","right","top","labels","padAngle","text","displayName"],"mappings":"kkBA2BA,MAAMA,EAA8C,EAAGC,IAAGC,IAAGC,YAC3D,MAAMC,EAAO,IAAUD,EAAME,IAC7B,OAAO,gBAACD,EAAI,CAACH,EAAGA,EAAGC,EAAGA,EAAI,EAAGI,KAAM,IAAiBH,EAAME,OAGtDE,EAAkB,I,IAAA,UAAEC,GAAS,EAAKC,EAAK,IAArB,eAA4B,OAClD,gBAAC,IAAY,CACXC,KAAM,kEAAkEF,gBACtE,IAAYC,EAAMN,MAAME,IAAM,KAGhC,gBAAC,IAAU,iBAAKI,EAAK,CAAEE,MAAO,CAAEL,KAAM,yCAIpCM,EAAqBH,GACzB,gBAAC,IAAU,iBAAKA,EAAK,CAAEE,MAAO,CAAEL,KAAM,yCAG3BO,EAAsD,EAAGC,YAAWC,gB,kBAC/E,OACIC,SAAUC,EAAiBC,MAAOC,IAClCH,SAAUI,EAAwBF,MAAOG,IACzCL,SAAUM,IACVR,GACE,EAAES,GAAM,2BACRC,EAAU,YAAWP,GACrBQ,EAAa,YAAcL,GAC3BZ,GAAsD,QAA1C,EAAoC,QAApC,EAA8B,QAA9B,EAACO,SAA6B,eAAEW,YAAI,eAAEC,YAAI,eAAEnB,YAAa,GACrEoB,EAAcC,OAAOC,QAAQN,GAASO,KAC1C,EAAEC,IAAMC,KAAQ,IAAYA,GAAM,IAAYD,IAE1CE,EAAiBL,OAAOM,OAAOX,GAASY,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAK,GACxEC,EAAU,YAAUf,KAAaP,IAAoBG,EACrDF,EAAQ,YAAQM,IAAYL,GAAgBE,EAC5CmB,IAAaf,EAAWgB,SAExBC,EAAc,aAAoB,KAAkBC,eAEpDC,EAAW,CAEfC,IAAK,sBAELC,SAAU,2BAEVC,UAAW,4BAEXC,SAAU,4BAGNC,EACqE,IAAzEC,UAAqD,QAA5C,EAAqC,QAArC,EAAgC,QAAhC,EAAwB,QAAxB,EAAA5B,aAAkB,EAAlBA,EAAoBI,YAAI,eAAEyB,cAAM,eAAG,UAAE,eAAEC,aAAK,eAAG,KAAM,IAAK,IAErE,OAAO,YAAY3B,GACjB,gBAAC,aAAU,MAEX,gBAAC,IAAK,CAAC4B,WAAS,GACd,gBAAC,IAAS,KACP9B,EAAE,gC,KAAkC,gBAAC,KAAS,CAAC+B,UAAWL,EAAiBM,QAAM,KAEpF,gBAAC,IAAS,CAACC,UAAU,cAClBjC,EACC,8IAGHL,EACC,gBAAC,IAAS,CAACsC,UAAU,cAClBjC,EAAE,6CAEHiB,EACF,gBAAC,IAAS,CAACgB,UAAU,cAAcjC,EAAE,8BACnCgB,EACF,gBAAC,IAAS,CAACiB,UAAU,cAAcjC,EAAE,yCAErC,gBAAC,IAAS,KACR,2BACE,gBAAC,IAAU,CACTkC,YAAa,GACbC,UAAU,iCACVC,SAAS,wEACTjC,KAAME,EAAYgC,IAAI,EAAEC,EAAGC,MAAO,CAChC7D,EAAG,GAAG,IAAasB,EAAEqB,EAASiB,KAC9B3D,EAAG4D,KAELC,MAAO,GAAG7B,EACV8B,SAAUzC,EAAE,8BAA+B,CAAE0C,MAAO/B,IACpDgC,kBAAkB,WAClBC,MAAO,IACPC,OAAQ,IACRC,OAAQ,GACRC,WAAY,IACZC,kBAAmB,gBAAC3D,EAAiB,MACrC4D,wBAAsB,EACtBC,gBACE,gBAAC,IAAW,CACVV,MAAOxC,EAAE,8BACTmD,eACE,gBAAC,IAAU,CAACC,GAAI,GAAIC,IAAK,GAAIjE,MAAO,CAAEkE,WAAY,OAAQC,SAAU,UAEtEpD,KAAME,EAAYgC,IAAI,EAAEC,EAAGC,MAAO,CAChCiB,KAAM,GAAGjB,KAAK,IAAavC,EAAEqB,EAASiB,OACtCxD,GAAIwD,KAENmB,cAAe,gBAAChF,EAAa,MAC7BiF,eAAgB,gBAAC1E,EAAc,CAACC,UAAWA,IAC3CP,GAAI,GACJiF,WAAY,IAGhBC,QAAS,CACPC,OAAQ,EACRC,KAAM,IACNC,MAAO,GACPC,IAAK,GAEPC,OAAQ,EAAGrF,WAAY,GAAGA,EAAMF,MAAME,EAAMD,IAC5CuF,SAAU,KAGbjF,EACC,gCACE,sBAAIgD,UAAU,yBAAyBjC,EAAE,mCACzC,2BACE,gBAAC,IAAY,CACXb,KAAM,kEAAkEF,EACxEkF,KAAMnE,EAAE,oEAKd,2BACE,gBAAC,IAAY,CACXb,KAAM,wDACNgF,KAAMnE,EAAE,sDAMhBgB,GAAWC,GAAYtB,KAAW,gBAClC,gBAAC,IAAY,CAACR,KAAMgC,EAAagD,KAAMnE,EAAE,2CAcjDV,EAAc8E,YAAc","file":"insights-plugin-chunk-2197994bc288aaf7fab5.min.js","sourcesContent":["import * as React from 'react';\nimport { ChartDonut, ChartLegend, ChartLabel } from '@patternfly/react-charts';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { ErrorState } from '@console/internal/components/error';\nimport {\n  documentationURLs,\n  ExternalLink,\n  getDocumentationURL,\n  Timestamp,\n  isManaged,\n} from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { PrometheusHealthPopupProps } from '@console/plugin-sdk';\nimport {\n  riskIcons,\n  colorScale,\n  legendColorScale,\n  riskSorting,\n  mapMetrics,\n  isWaiting,\n  isError,\n  mapConditions,\n  errorUpload,\n} from './mappers';\n\nconst DataComponent: React.FC<DataComponentProps> = ({ x, y, datum }) => {\n  const Icon = riskIcons[datum.id];\n  return <Icon x={x} y={y - 5} fill={legendColorScale[datum.id]} />;\n};\n\nconst LabelComponent = ({ clusterID, ...props }) => (\n  <ExternalLink\n    href={`https://console.redhat.com/openshift/insights/advisor/clusters/${clusterID}?total_risk=${\n      riskSorting[props.datum.id] + 1\n    }`}\n  >\n    <ChartLabel {...props} style={{ fill: 'var(--pf-v5-global--link--Color)' }} />\n  </ExternalLink>\n);\n\nconst SubTitleComponent = (props) => (\n  <ChartLabel {...props} style={{ fill: 'var(--pf-v5-chart-color-black-500)' }} />\n);\n\nexport const InsightsPopup: React.FC<PrometheusHealthPopupProps> = ({ responses, k8sResult }) => {\n  const [\n    { response: metricsResponse, error: metricsError },\n    { response: operatorStatusResponse, error: operatorStatusError },\n    { response: lastGatherResponse },\n  ] = responses;\n  const { t } = useTranslation();\n  const metrics = mapMetrics(metricsResponse);\n  const conditions = mapConditions(operatorStatusResponse);\n  const clusterID = (k8sResult as K8sResourceKind)?.data?.spec?.clusterID || '';\n  const riskEntries = Object.entries(metrics).sort(\n    ([k1], [k2]) => riskSorting[k2] - riskSorting[k1],\n  );\n  const numberOfIssues = Object.values(metrics).reduce((acc, cur) => acc + cur, 0);\n  const waiting = isWaiting(metrics) || !metricsResponse || !operatorStatusResponse;\n  const error = isError(metrics) || metricsError || operatorStatusError;\n  const disabled = !!conditions.Disabled;\n\n  const insightsURL = getDocumentationURL(documentationURLs.usingInsights);\n\n  const riskKeys = {\n    // t('insights-plugin~low')\n    low: 'insights-plugin~low',\n    // t('insights-plugin~moderate')\n    moderate: 'insights-plugin~moderate',\n    // t('insights-plugin~important')\n    important: 'insights-plugin~important',\n    // t('insights-plugin~critical')\n    critical: 'insights-plugin~critical',\n  };\n\n  const lastRefreshTime =\n    parseInt(lastGatherResponse?.data?.result?.[0]?.value?.[1] || '0', 10) * 1000;\n\n  return errorUpload(conditions) ? (\n    <ErrorState />\n  ) : (\n    <Stack hasGutter>\n      <StackItem>\n        {t('insights-plugin~Last refresh')}: <Timestamp timestamp={lastRefreshTime} simple />\n      </StackItem>\n      <StackItem className=\"text-muted\">\n        {t(\n          'insights-plugin~Insights Advisor identifies and prioritizes risks to security, performance, availability, and stability of your clusters.',\n        )}\n      </StackItem>\n      {error ? (\n        <StackItem className=\"text-muted\">\n          {t('insights-plugin~Temporarily unavailable.')}\n        </StackItem>\n      ) : disabled ? (\n        <StackItem className=\"text-muted\">{t('insights-plugin~Disabled.')}</StackItem>\n      ) : waiting ? (\n        <StackItem className=\"text-muted\">{t('insights-plugin~Waiting for results.')}</StackItem>\n      ) : (\n        <StackItem>\n          <div>\n            <ChartDonut\n              innerRadius={67}\n              ariaTitle=\"Insights recommendations chart\"\n              ariaDesc=\"Donut chart that shows Insights recommendations divided by severities\"\n              data={riskEntries.map(([k, v]) => ({\n                x: `${_.capitalize(t(riskKeys[k]))}`,\n                y: v,\n              }))}\n              title={`${numberOfIssues}`}\n              subTitle={t('insights-plugin~Total issue', { count: numberOfIssues })}\n              legendOrientation=\"vertical\"\n              width={320}\n              height={180}\n              radius={80}\n              colorScale={colorScale}\n              subTitleComponent={<SubTitleComponent />}\n              constrainToVisibleArea\n              legendComponent={\n                <ChartLegend\n                  title={t('insights-plugin~Total risk')}\n                  titleComponent={\n                    <ChartLabel dx={13} dy={-10} style={{ fontWeight: 'bold', fontSize: '14px' }} />\n                  }\n                  data={riskEntries.map(([k, v]) => ({\n                    name: `${v} ${_.capitalize(t(riskKeys[k]))}`,\n                    id: k,\n                  }))}\n                  dataComponent={<DataComponent />}\n                  labelComponent={<LabelComponent clusterID={clusterID} />}\n                  x={-10}\n                  rowGutter={-3}\n                />\n              }\n              padding={{\n                bottom: 0,\n                left: 135,\n                right: 10, // Adjusted to accommodate legend\n                top: 0,\n              }}\n              labels={({ datum }) => `${datum.x}: ${datum.y}`}\n              padAngle={0}\n            />\n          </div>\n          {clusterID ? (\n            <>\n              <h6 className=\"pf-v5-c-title pf-m-md\">{t('insights-plugin~Fixable issues')}</h6>\n              <div>\n                <ExternalLink\n                  href={`https://console.redhat.com/openshift/insights/advisor/clusters/${clusterID}`}\n                  text={t('insights-plugin~View all recommendations in Insights Advisor')}\n                />\n              </div>\n            </>\n          ) : (\n            <div>\n              <ExternalLink\n                href={`https://console.redhat.com/openshift/insights/advisor`}\n                text={t('insights-plugin~View more in Insights Advisor')}\n              />\n            </div>\n          )}\n        </StackItem>\n      )}\n      {(waiting || disabled || error) && !isManaged() && (\n        <ExternalLink href={insightsURL} text={t('insights-plugin~More about Insights')} />\n      )}\n    </Stack>\n  );\n};\n\nexport type DataComponentProps = {\n  x?: number;\n  y?: number;\n  datum?: {\n    id: string;\n  };\n};\n\nInsightsPopup.displayName = 'InsightsPopup';\n"],"sourceRoot":""}