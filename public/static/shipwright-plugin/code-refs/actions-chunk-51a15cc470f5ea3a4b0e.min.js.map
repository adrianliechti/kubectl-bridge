{"version":3,"sources":["webpack:///./packages/shipwright-plugin/src/actions.ts","webpack:///./packages/console-app/src/actions/creators/common-factory.ts","webpack:///./packages/shipwright-plugin/src/models.ts","webpack:///./packages/shipwright-plugin/src/const.ts","webpack:///./packages/shipwright-plugin/src/types.ts","webpack:///./packages/shipwright-plugin/src/utils.ts","webpack:///./packages/shipwright-plugin/src/components/buildrun-status/BuildRunStatus.tsx","webpack:///./packages/shipwright-plugin/src/api.ts","webpack:///./packages/shipwright-plugin/src/actions/useBuildActions.ts","webpack:///./packages/shipwright-plugin/src/actions/useBuildRunActions.ts"],"names":["CommonActionFactory","Delete","kind","obj","relatedResource","message","id","label","t","cta","resource","accessReview","Edit","href","crd","ModifyLabels","blocking","ModifyAnnotations","ModifyCount","resourceKind","ModifyPodSelector","ModifyTolerations","modalClassName","AddStorage","getCommonResourceActions","undefined","ClusterBuildStrategyModelV1Alpha1","plural","apiGroup","apiVersion","namespaced","labelKey","labelPlural","labelPluralKey","abbr","BuildStrategyModelV1Alpha1","BuildModelV1Alpha1","BuildRunModelV1Alpha1","ClusterBuildStrategyModel","BuildStrategyModel","BuildModel","BuildRunModel","API_GROUP","API_VERSION_LATEST","BUILDRUN_TO_BUILD_REFERENCE_LABEL","BUILDRUN_TO_RESOURCE_MAP_LABEL","BUILD_OUTPUT_IMAGESTREAM_URL","BUILD_OUTPUT_QUAY_URL","ComputedBuildRunStatus","ClusterBuildStrategy","ReadableClusterBuildStrategies","BUILDAH","S2I","UNKNOWN","getLatestBuildRunStatusforDeployment","buildRuns","buildRunsforDeployment","filter","run","metadata","labels","length","latestBuildRun","status","runs","field","data","latestRun","i","Date","getLatestRun","isBuildRunNewerThen","newBuildRun","prevBuildRun","prevCreationTime","creationTimestamp","getTime","byCreationTime","left","right","leftCreationTime","now","isV1Alpha1Resource","getBuildNameFromBuildRun","buildRun","spec","buildRef","name","build","useDetermineModelVersion","modelOne","modelTwo","modelFlagOne","modelFlagTwo","flagTwo","flagOne","useBuildModel","useBuildRunModel","useBuildStrategyModel","useClusterBuildStrategyModel","kindToTabMap","useShipwrightBreadcrumbsFor","isAdminPerspective","params","location","resourceToModel","getSucceededCondition","conditions","find","condition","type","getBuildRunStatus","succeededCondition","reason","PENDING","RUNNING","SUCCEEDED","FAILED","failedCondition","title","getBuildRunStatusProps","startBuild","resourceMapLabel","newBuildRunData","namespace","generateName","model","canRerunBuildRun","hasBuildRef","hasBuildSpec","buildSpec","rerunBuildRun","buildRefName","Error","navigate","kindObj","inFlight","actions","push","then","catch","err","error","verb","group","latestBuild","disabled","rerun"],"mappings":"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","file":"shipwright-plugin/code-refs/actions-chunk-51a15cc470f5ea3a4b0e.min.js","sourcesContent":["export { default as useBuildActions } from './actions/useBuildActions';\nexport { default as useBuildRunActions } from './actions/useBuildRunActions';\n","import i18next from 'i18next';\nimport { Action } from '@console/dynamic-plugin-sdk';\nimport {\n  annotationsModalLauncher,\n  deleteModal,\n  labelsModalLauncher,\n  configureReplicaCountModal,\n  podSelectorModal,\n  tolerationsModal,\n} from '@console/internal/components/modals';\nimport { resourceObjPath, asAccessReview } from '@console/internal/components/utils';\nimport { referenceForModel, K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nexport type ResourceActionCreator = (\n  kind: K8sKind,\n  obj: K8sResourceKind,\n  relatedResource?: K8sResourceKind,\n  message?: JSX.Element,\n) => Action;\n\nexport type ResourceActionFactory = { [name: string]: ResourceActionCreator };\n\nexport const CommonActionFactory: ResourceActionFactory = {\n  Delete: (\n    kind: K8sKind,\n    obj: K8sResourceKind,\n    relatedResource?: K8sResourceKind,\n    message?: JSX.Element,\n  ): Action => ({\n    id: `delete-resource`,\n    label: i18next.t('console-app~Delete {{kind}}', { kind: kind.kind }),\n    cta: () =>\n      deleteModal({\n        kind,\n        resource: obj,\n        message,\n      }),\n    accessReview: asAccessReview(kind, obj, 'delete'),\n  }),\n  Edit: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: `edit-resource`,\n    label: i18next.t('console-app~Edit {{kind}}', { kind: kind.kind }),\n    cta: {\n      href: `${resourceObjPath(obj, kind.crd ? referenceForModel(kind) : kind.kind)}/yaml`,\n    },\n    // TODO: Fallback to \"View YAML\"? We might want a similar fallback for annotations, labels, etc.\n    accessReview: asAccessReview(kind, obj, 'update'),\n  }),\n  ModifyLabels: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-labels',\n    label: i18next.t('console-app~Edit labels'),\n    cta: () =>\n      labelsModalLauncher({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyAnnotations: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-annotations',\n    label: i18next.t('console-app~Edit annotations'),\n    cta: () =>\n      annotationsModalLauncher({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyCount: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-pod-count',\n    label: i18next.t('console-app~Edit Pod count'),\n    cta: () =>\n      configureReplicaCountModal({\n        resourceKind: kind,\n        resource: obj,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch', 'scale'),\n  }),\n  ModifyPodSelector: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-pod-selector',\n    label: i18next.t('console-app~Edit Pod selector'),\n    cta: () =>\n      podSelectorModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyTolerations: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-toleration',\n    label: i18next.t('console-app~Edit tolerations'),\n    cta: () =>\n      tolerationsModal({\n        resourceKind: kind,\n        resource: obj,\n        modalClassName: 'modal-lg',\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  AddStorage: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'add-storage',\n    label: i18next.t('console-app~Add storage'),\n    cta: {\n      href: `${resourceObjPath(\n        obj,\n        kind.crd ? referenceForModel(kind) : kind.kind,\n      )}/attach-storage`,\n    },\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n};\n\nexport const getCommonResourceActions = (\n  kind: K8sKind,\n  obj: K8sResourceKind,\n  message?: JSX.Element,\n): Action[] => {\n  return [\n    CommonActionFactory.ModifyLabels(kind, obj),\n    CommonActionFactory.ModifyAnnotations(kind, obj),\n    CommonActionFactory.Edit(kind, obj),\n    CommonActionFactory.Delete(kind, obj, undefined, message),\n  ];\n};\n","import { K8sModel } from '@console/dynamic-plugin-sdk/src/api/common-types';\nimport { API_GROUP, API_VERSION_LATEST } from './const';\n\nexport const ClusterBuildStrategyModelV1Alpha1: K8sModel = {\n  id: 'clusterbuildstrategy',\n  plural: 'clusterbuildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'ClusterBuildStrategy',\n  namespaced: false,\n  crd: true,\n\n  label: 'ClusterBuildStrategy',\n  // t('shipwright-plugin~ClusterBuildStrategy')\n  labelKey: 'shipwright-plugin~ClusterBuildStrategy',\n  labelPlural: 'ClusterBuildStrategies',\n  // t('shipwright-plugin~ClusterBuildStrategies')\n  labelPluralKey: 'shipwright-plugin~ClusterBuildStrategies',\n  abbr: 'CBS',\n};\n\nexport const BuildStrategyModelV1Alpha1: K8sModel = {\n  id: 'buildstrategy',\n  plural: 'buildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'BuildStrategy',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildStrategy',\n  // t('shipwright-plugin~BuildStrategy')\n  labelKey: 'shipwright-plugin~BuildStrategy',\n  labelPlural: 'BuildStrategies',\n  // t('shipwright-plugin~BuildStrategies')\n  labelPluralKey: 'shipwright-plugin~BuildStrategies',\n  abbr: 'BS',\n};\n\nexport const BuildModelV1Alpha1: K8sModel = {\n  id: 'build',\n  plural: 'builds',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'Build',\n  namespaced: true,\n  crd: true,\n\n  label: 'Build',\n  // t('shipwright-plugin~Build')\n  labelKey: 'shipwright-plugin~Build',\n  labelPlural: 'Builds',\n  // t('shipwright-plugin~Builds')\n  labelPluralKey: 'shipwright-plugin~Builds',\n  abbr: 'B',\n};\n\nexport const BuildRunModelV1Alpha1: K8sModel = {\n  id: 'buildrun',\n  plural: 'buildruns',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'BuildRun',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildRun',\n  // t('shipwright-plugin~BuildRun')\n  labelKey: 'shipwright-plugin~BuildRun',\n  labelPlural: 'BuildRuns',\n  // t('shipwright-plugin~BuildRuns')\n  labelPluralKey: 'shipwright-plugin~BuildRuns',\n  abbr: 'BR',\n};\n\nexport const ClusterBuildStrategyModel: K8sModel = {\n  id: 'clusterbuildstrategy',\n  plural: 'clusterbuildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'ClusterBuildStrategy',\n  namespaced: false,\n  crd: true,\n\n  label: 'ClusterBuildStrategy',\n  // t('shipwright-plugin~ClusterBuildStrategy')\n  labelKey: 'shipwright-plugin~ClusterBuildStrategy',\n  labelPlural: 'ClusterBuildStrategies',\n  // t('shipwright-plugin~ClusterBuildStrategies')\n  labelPluralKey: 'shipwright-plugin~ClusterBuildStrategies',\n  abbr: 'CBS',\n};\n\nexport const BuildStrategyModel: K8sModel = {\n  id: 'buildstrategy',\n  plural: 'buildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'BuildStrategy',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildStrategy',\n  // t('shipwright-plugin~BuildStrategy')\n  labelKey: 'shipwright-plugin~BuildStrategy',\n  labelPlural: 'BuildStrategies',\n  // t('shipwright-plugin~BuildStrategies')\n  labelPluralKey: 'shipwright-plugin~BuildStrategies',\n  abbr: 'BS',\n};\n\nexport const BuildModel: K8sModel = {\n  id: 'build',\n  plural: 'builds',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'Build',\n  namespaced: true,\n  crd: true,\n\n  label: 'Build',\n  // t('shipwright-plugin~Build')\n  labelKey: 'shipwright-plugin~Build',\n  labelPlural: 'Builds',\n  // t('shipwright-plugin~Builds')\n  labelPluralKey: 'shipwright-plugin~Builds',\n  abbr: 'B',\n};\n\nexport const BuildRunModel: K8sModel = {\n  id: 'buildrun',\n  plural: 'buildruns',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'BuildRun',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildRun',\n  // t('shipwright-plugin~BuildRun')\n  labelKey: 'shipwright-plugin~BuildRun',\n  labelPlural: 'BuildRuns',\n  // t('shipwright-plugin~BuildRuns')\n  labelPluralKey: 'shipwright-plugin~BuildRuns',\n  abbr: 'BR',\n};\n","export const API_GROUP = 'shipwright.io';\nexport const API_VERSION_LATEST = 'v1beta1';\n\nexport const BUILDRUN_TO_BUILD_REFERENCE_LABEL = 'build.shipwright.io/name';\nexport const BUILDRUN_TO_RESOURCE_MAP_LABEL = 'app.kubernetes.io/instance';\n\nexport const BUILD_OUTPUT_IMAGESTREAM_URL = 'image-registry.openshift-image-registry.svc:5000';\nexport const BUILD_OUTPUT_QUAY_URL = 'quay.io';\n","import { IBuild as IBuildV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/Build';\nimport { IBuildRun as IBuildRunV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/ClusterBuildStrategy';\nimport { IBuild as IBuildV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/Build';\nimport { IBuildRun as IBuildRunV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/ClusterBuildStrategy';\nimport { K8sResourceCondition } from '@console/internal/module/k8s';\n\n// Add missing latestBuild to Build\nexport type Build =\n  | (IBuildV1Alpha1 & { latestBuild?: BuildRun })\n  | (IBuildV1Beta1 & { latestBuild?: BuildRun });\n\nexport type BuildSpec = IBuildV1Alpha1['spec'] & IBuildV1Beta1['spec'];\n\nexport type BuildStatus = IBuildV1Alpha1['status'] & IBuildV1Beta1['status'];\n\nexport type ClusterBuildStrategyKind = IClusterBuildStrategyV1Alpha1 | IClusterBuildStrategyV1Beta1;\n\nexport type BuildStrategyKind = IBuildStrategyV1Alpha1 | IBuildStrategyV1Beta1;\n\n// Make status.conditions compatible with @console/internal/components/conditions props\nexport type BuildRun =\n  | (IBuildRunV1Alpha1 & {\n      status?: { conditions?: K8sResourceCondition[]; latestTaskRunRef?: string };\n    })\n  | (IBuildRunV1Beta1 & {\n      status?: { conditions?: K8sResourceCondition[]; taskRunName?: string };\n    });\n\n// The enum values need to match the dynamic-plugin `Status` `status` prop.\n// A translation (title) is added in the BuildRunStatus component.\nexport enum ComputedBuildRunStatus {\n  PENDING = 'Pending',\n  RUNNING = 'Running',\n  SUCCEEDED = 'Succeeded',\n  FAILED = 'Failed',\n  UNKNOWN = 'Unknown',\n}\n\n/** WARNING: The enum values corresponds to the `metadata.name` of the ClusterBuildStrategy CRs */\nexport enum ClusterBuildStrategy {\n  BUILDAH = 'buildah',\n  S2I = 'source-to-image',\n  UNKNOWN = 'unknown',\n}\n\nexport const ReadableClusterBuildStrategies: Record<ClusterBuildStrategy, string> = {\n  // t('shipwright-plugin~Buildah')\n  [ClusterBuildStrategy.BUILDAH]: `shipwright-plugin~Buildah`,\n  // t('shipwright-plugin~Source-to-Image')\n  [ClusterBuildStrategy.S2I]: `shipwright-plugin~Source-to-Image`,\n  [ClusterBuildStrategy.UNKNOWN]: `shipwright-plugin~Unknown`,\n};\n","import { IBuild as IBuildV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/Build';\nimport { IBuildRun as IBuildRunV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildRun';\nimport { useLocation, useParams } from 'react-router-dom-v5-compat';\nimport { useActivePerspective } from '@console/dynamic-plugin-sdk';\nimport { K8sModel } from '@console/dynamic-plugin-sdk/src/api/common-types';\nimport { useFlag } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { K8sResourceCondition, K8sResourceKind } from '@console/internal/module/k8s';\nimport { useTabbedTableBreadcrumbsFor } from '@console/shared';\nimport { getBuildRunStatus } from './components/buildrun-status/BuildRunStatus';\nimport { BUILDRUN_TO_RESOURCE_MAP_LABEL } from './const';\nimport {\n  BuildModel,\n  BuildModelV1Alpha1,\n  BuildRunModel,\n  BuildRunModelV1Alpha1,\n  BuildStrategyModel,\n  BuildStrategyModelV1Alpha1,\n  ClusterBuildStrategyModel,\n  ClusterBuildStrategyModelV1Alpha1,\n} from './models';\nimport { Build, BuildRun, ComputedBuildRunStatus } from './types';\n\nexport type LatestBuildRunStatus = {\n  latestBuildRun: BuildRun;\n  status: ComputedBuildRunStatus;\n};\n\nexport interface Runs {\n  data?: BuildRun[];\n}\n\nexport const getLatestRun = (runs: Runs, field: string): BuildRun => {\n  if (!runs || !runs.data || !(runs.data.length > 0) || !field) {\n    return null;\n  }\n\n  let latestRun = runs.data[0];\n  if (field === 'creationTimestamp') {\n    for (let i = 1; i < runs.data.length; i++) {\n      latestRun =\n        runs.data[i]?.metadata?.[field] &&\n        new Date(runs.data[i].metadata[field]) > new Date(latestRun.metadata[field])\n          ? runs.data[i]\n          : latestRun;\n    }\n  } else if (field === 'startTime' || field === 'completionTime') {\n    for (let i = 1; i < runs.data.length; i++) {\n      latestRun =\n        runs.data[i]?.status?.[field] &&\n        new Date(runs.data[i].status[field]) > new Date(latestRun.status[field])\n          ? runs.data[i]\n          : latestRun;\n    }\n  } else {\n    latestRun = runs.data[runs.data.length - 1];\n  }\n  return latestRun;\n};\n\nexport const getLatestBuildRunStatusforDeployment = (\n  buildRuns: BuildRun[],\n  resource: K8sResourceKind,\n): LatestBuildRunStatus => {\n  const buildRunsforDeployment = buildRuns.filter(\n    (run) =>\n      run.metadata?.labels?.[BUILDRUN_TO_RESOURCE_MAP_LABEL] ===\n      resource.metadata?.labels?.[BUILDRUN_TO_RESOURCE_MAP_LABEL],\n  );\n\n  if (!buildRunsforDeployment || buildRunsforDeployment.length === 0) {\n    return { latestBuildRun: null, status: ComputedBuildRunStatus.UNKNOWN };\n  }\n\n  const latestBuildRun = getLatestRun({ data: buildRunsforDeployment }, 'creationTimestamp');\n\n  if (!latestBuildRun) {\n    return { latestBuildRun: null, status: ComputedBuildRunStatus.UNKNOWN };\n  }\n\n  const status = getBuildRunStatus(latestBuildRun);\n\n  return {\n    latestBuildRun,\n    status,\n  };\n};\n\nexport const isBuildRunNewerThen = (newBuildRun: BuildRun, prevBuildRun: BuildRun | undefined) => {\n  const prevCreationTime = new Date(prevBuildRun?.metadata?.creationTimestamp);\n  const newCreationTime = new Date(newBuildRun?.metadata?.creationTimestamp);\n  const timeDifference = newCreationTime.getTime() - prevCreationTime.getTime();\n  return timeDifference > 0;\n};\n\nexport const byCreationTime = (left: K8sResourceKind, right: K8sResourceKind): number => {\n  const leftCreationTime = new Date(left?.metadata?.creationTimestamp || Date.now());\n  const rightCreationTime = new Date(right?.metadata?.creationTimestamp || Date.now());\n  return rightCreationTime.getTime() - leftCreationTime.getTime();\n};\n\nexport const isV1Alpha1Resource = (\n  resource: Build | BuildRun,\n): resource is\n  | IBuildV1Alpha1\n  | (IBuildRunV1Alpha1 & { status?: { conditions?: K8sResourceCondition[] } }) => {\n  return resource.apiVersion === 'shipwright.io/v1alpha1';\n};\n\nexport const getBuildNameFromBuildRun = (buildRun: BuildRun) => {\n  if (isV1Alpha1Resource(buildRun)) {\n    return buildRun.spec?.buildRef?.name;\n  }\n  return buildRun.spec?.build?.name;\n};\n\n/**\n * Given two flags that determine the presence of two versions of a CRD,\n * determine which version is enabled.\n *\n * If both flags are enabled, the first model gets priority.\n *\n * @return the K8s model of the CRD that is enabled, or null if neither are enabled\n */\nconst useDetermineModelVersion = (\n  modelOne: K8sModel,\n  modelTwo: K8sModel,\n  modelFlagOne: string,\n  modelFlagTwo: string,\n) => {\n  const flagTwo = useFlag(modelFlagTwo);\n  const flagOne = useFlag(modelFlagOne);\n\n  if (!flagTwo && !flagOne) {\n    return null;\n  }\n\n  return flagOne ? modelOne : modelTwo;\n};\n\n/**\n * @returns latest `BuildModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useBuildModel = () =>\n  useDetermineModelVersion(\n    BuildModel,\n    BuildModelV1Alpha1,\n    'SHIPWRIGHT_BUILD',\n    'SHIPWRIGHT_BUILD_V1ALPHA1',\n  );\n\n/**\n * @returns latest `BuildRunModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useBuildRunModel = () =>\n  useDetermineModelVersion(\n    BuildRunModel,\n    BuildRunModelV1Alpha1,\n    'SHIPWRIGHT_BUILDRUN',\n    'SHIPWRIGHT_BUILDRUN_V1ALPHA1',\n  );\n\n/**\n * @returns latest `BuildStrategyModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useBuildStrategyModel = () =>\n  useDetermineModelVersion(\n    BuildStrategyModel,\n    BuildStrategyModelV1Alpha1,\n    'SHIPWRIGHT_BUILDSTRATEGY',\n    'SHIPWRIGHT_BUILDSTRATEGY_V1ALPHA1',\n  );\n\n/**\n * @returns latest `ClusterBuildStrategyModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useClusterBuildStrategyModel = () =>\n  useDetermineModelVersion(\n    ClusterBuildStrategyModel,\n    ClusterBuildStrategyModelV1Alpha1,\n    'SHIPWRIGHT_CLUSTERBUILDSTRATEGY',\n    'SHIPWRIGHT_CLUSTERBUILDSTRATEGY_V1ALPHA1',\n  );\n\n/** map of shipwright kinds to tab names */\nconst kindToTabMap = {\n  [BuildModel.kind]: 'builds',\n  [BuildModelV1Alpha1.kind]: 'builds',\n  [BuildRunModel.kind]: 'buildruns',\n  [BuildRunModelV1Alpha1.kind]: 'buildruns',\n  [BuildStrategyModel.kind]: 'buildstrategies',\n  [BuildStrategyModelV1Alpha1.kind]: 'buildstrategies',\n  [ClusterBuildStrategyModel.kind]: 'clusterbuildstrategies',\n  [ClusterBuildStrategyModelV1Alpha1.kind]: 'clusterbuildstrategies',\n};\n\n/** convert a resource using a shipwright model to its corresponding k8s model */\nconst resourceToModel = (obj: K8sResourceKind): K8sModel => {\n  if (obj?.apiVersion === 'shipwright.io/v1alpha1') {\n    switch (obj?.kind) {\n      case 'Build':\n        return BuildModelV1Alpha1;\n      case 'BuildRun':\n        return BuildRunModelV1Alpha1;\n      case 'BuildStrategy':\n        return BuildStrategyModelV1Alpha1;\n      case 'ClusterBuildStrategy':\n        return ClusterBuildStrategyModelV1Alpha1;\n      default:\n        return null;\n    }\n  }\n  switch (obj?.kind) {\n    case 'Build':\n      return BuildModel;\n    case 'BuildRun':\n      return BuildRunModel;\n    case 'BuildStrategy':\n      return BuildStrategyModel;\n    case 'ClusterBuildStrategy':\n      return ClusterBuildStrategyModel;\n    default:\n      return null;\n  }\n};\n\nexport const useShipwrightBreadcrumbsFor = (obj: K8sResourceKind) => {\n  const isAdminPerspective = useActivePerspective()[0] === 'admin';\n  const params = useParams();\n  const location = useLocation();\n  return useTabbedTableBreadcrumbsFor(\n    resourceToModel(obj),\n    location,\n    params,\n    'k8s',\n    `shipwright.io/${kindToTabMap[obj.kind]}`,\n    undefined,\n    isAdminPerspective,\n  );\n};\n","import * as React from 'react';\nimport i18next from 'i18next';\nimport Status, { StatusProps } from '@console/dynamic-plugin-sdk/src/app/components/status/Status';\nimport { BuildRun, ComputedBuildRunStatus } from '../../types';\n\nconst getSucceededCondition = (buildRun: BuildRun) =>\n  buildRun?.status?.conditions?.find((condition) => condition.type === 'Succeeded');\n\nexport const getBuildRunStatus = (buildRun: BuildRun): ComputedBuildRunStatus => {\n  const succeededCondition = getSucceededCondition(buildRun);\n  if (succeededCondition) {\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Pending') {\n      return ComputedBuildRunStatus.PENDING;\n    }\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Running') {\n      return ComputedBuildRunStatus.RUNNING;\n    }\n    if (succeededCondition.status === 'True') {\n      return ComputedBuildRunStatus.SUCCEEDED;\n    }\n    if (succeededCondition.status === 'False') {\n      return ComputedBuildRunStatus.FAILED;\n    }\n  }\n  return ComputedBuildRunStatus.UNKNOWN;\n};\n\nexport const getBuildRunStatusProps = (buildRun: BuildRun): StatusProps => {\n  const succeededCondition = getSucceededCondition(buildRun);\n  if (succeededCondition) {\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Pending') {\n      return {\n        status: ComputedBuildRunStatus.PENDING,\n        title: i18next.t('shipwright-plugin~Pending'),\n      };\n    }\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Running') {\n      return {\n        status: ComputedBuildRunStatus.RUNNING,\n        title: i18next.t('shipwright-plugin~Running'),\n      };\n    }\n    if (succeededCondition.status === 'True') {\n      return {\n        status: ComputedBuildRunStatus.SUCCEEDED,\n        title: i18next.t('shipwright-plugin~Succeeded'),\n      };\n    }\n    if (succeededCondition.status === 'False') {\n      return {\n        status: ComputedBuildRunStatus.FAILED,\n        title: i18next.t('shipwright-plugin~Failed'),\n      };\n    }\n  }\n  return {\n    status: ComputedBuildRunStatus.UNKNOWN,\n    title: i18next.t('shipwright-plugin~Unknown'),\n  };\n};\n\nconst BuildRunStatus: React.FC<{ buildRun: BuildRun }> = ({ buildRun }) => {\n  const status = getBuildRunStatus(buildRun);\n  const failedCondition = getSucceededCondition(buildRun);\n  return (\n    <Status {...getBuildRunStatusProps(buildRun)}>\n      {status === ComputedBuildRunStatus.FAILED ? (\n        <>\n          <pre data-test=\"failure-popup\">{failedCondition.reason}</pre>\n          {failedCondition.message}\n        </>\n      ) : null}\n    </Status>\n  );\n};\n\nexport default BuildRunStatus;\n","import { k8sCreateResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { BUILDRUN_TO_BUILD_REFERENCE_LABEL, BUILDRUN_TO_RESOURCE_MAP_LABEL } from './const';\nimport { BuildRunModel, BuildRunModelV1Alpha1 } from './models';\nimport { Build, BuildRun } from './types';\nimport { isV1Alpha1Resource } from './utils';\n\n/** Create a new BuildRun for a given Build to start it. */\nexport const startBuild = async (build: Build): Promise<BuildRun> => {\n  const resourceMapLabel = build.metadata?.labels?.[BUILDRUN_TO_RESOURCE_MAP_LABEL] || null;\n  let newBuildRunData: BuildRun;\n\n  if (isV1Alpha1Resource(build)) {\n    newBuildRunData = {\n      apiVersion: 'shipwright.io/v1alpha1',\n      kind: 'BuildRun',\n      metadata: {\n        namespace: build.metadata.namespace,\n        generateName: `${build.metadata.name}-`,\n        labels: {\n          [BUILDRUN_TO_BUILD_REFERENCE_LABEL]: build.metadata.name,\n          ...(resourceMapLabel ? { [BUILDRUN_TO_RESOURCE_MAP_LABEL]: resourceMapLabel } : {}),\n        },\n      },\n      spec: {\n        buildRef: {\n          name: build.metadata.name,\n        },\n      },\n    };\n  } else {\n    newBuildRunData = {\n      apiVersion: 'shipwright.io/v1beta1',\n      kind: 'BuildRun',\n      metadata: {\n        namespace: build.metadata.namespace,\n        generateName: `${build.metadata.name}-`,\n        labels: {\n          [BUILDRUN_TO_BUILD_REFERENCE_LABEL]: build.metadata.name,\n          ...(resourceMapLabel ? { [BUILDRUN_TO_RESOURCE_MAP_LABEL]: resourceMapLabel } : {}),\n        },\n      },\n      spec: {\n        build: {\n          name: build.metadata.name,\n        },\n      },\n    };\n  }\n  return k8sCreateResource({\n    model: isV1Alpha1Resource(newBuildRunData) ? BuildRunModelV1Alpha1 : BuildRunModel,\n    data: newBuildRunData,\n  });\n};\n\n/**\n * Return if re-run is supported for a specific BuildRun.\n *\n * Checks that BuildRun has a buildRef or buildSpec. Doesn't check any permissions!\n */\nexport const canRerunBuildRun = (buildRun: BuildRun): boolean => {\n  const hasBuildRef = isV1Alpha1Resource(buildRun)\n    ? !!buildRun.spec?.buildRef?.name\n    : !!buildRun.spec?.build?.name;\n  const hasBuildSpec = isV1Alpha1Resource(buildRun)\n    ? !!buildRun.spec?.buildSpec\n    : !!buildRun.spec?.build?.spec;\n\n  return hasBuildRef || hasBuildSpec;\n};\n\n/**\n * Create a new BuildRun for a given BuildRun to re-run it.\n *\n * Will fail for BuildRuns without buildRef or buildSpec. See `canRerunBuildRun`\n */\nexport const rerunBuildRun = async (buildRun: BuildRun): Promise<BuildRun> => {\n  const buildRefName = isV1Alpha1Resource(buildRun)\n    ? buildRun.spec?.buildRef?.name\n    : buildRun.spec?.build?.name;\n  const buildSpec = isV1Alpha1Resource(buildRun)\n    ? buildRun.spec?.buildSpec\n    : buildRun.spec?.build?.spec;\n  const resourceMapLabel = buildRun.metadata?.labels?.[BUILDRUN_TO_RESOURCE_MAP_LABEL] || null;\n\n  if (buildRefName) {\n    const generateName = buildRun.metadata.generateName || `${buildRefName}-`;\n    let newBuildRunData: BuildRun;\n\n    if (isV1Alpha1Resource(buildRun)) {\n      newBuildRunData = {\n        apiVersion: 'shipwright.io/v1alpha1',\n        kind: 'BuildRun',\n        metadata: {\n          namespace: buildRun.metadata.namespace,\n          generateName,\n          labels: {\n            [BUILDRUN_TO_BUILD_REFERENCE_LABEL]: buildRefName,\n            ...(resourceMapLabel ? { [BUILDRUN_TO_RESOURCE_MAP_LABEL]: resourceMapLabel } : {}),\n          },\n        },\n        spec: {\n          buildRef: {\n            name: buildRefName,\n          },\n        },\n      };\n    } else {\n      newBuildRunData = {\n        apiVersion: 'shipwright.io/v1beta1',\n        kind: 'BuildRun',\n        metadata: {\n          namespace: buildRun.metadata.namespace,\n          generateName,\n          labels: {\n            [BUILDRUN_TO_BUILD_REFERENCE_LABEL]: buildRefName,\n            ...(resourceMapLabel ? { [BUILDRUN_TO_RESOURCE_MAP_LABEL]: resourceMapLabel } : {}),\n          },\n        },\n        spec: {\n          build: {\n            name: buildRefName,\n          },\n        },\n      };\n    }\n\n    return k8sCreateResource({\n      model: isV1Alpha1Resource(newBuildRunData) ? BuildRunModelV1Alpha1 : BuildRunModel,\n      data: newBuildRunData,\n    });\n  }\n\n  if (buildSpec) {\n    const generateName = buildRun.metadata.generateName || `${buildRun.metadata.name}-`;\n    let newBuildRunData: BuildRun;\n\n    if (isV1Alpha1Resource(buildRun)) {\n      newBuildRunData = {\n        apiVersion: 'shipwright.io/v1alpha1',\n        kind: 'BuildRun',\n        metadata: {\n          namespace: buildRun.metadata.namespace,\n          generateName,\n          ...(resourceMapLabel\n            ? { labels: { [BUILDRUN_TO_RESOURCE_MAP_LABEL]: resourceMapLabel } }\n            : {}),\n        },\n        spec: {\n          buildSpec,\n        },\n      };\n    } else {\n      newBuildRunData = {\n        apiVersion: 'shipwright.io/v1beta1',\n        kind: 'BuildRun',\n        metadata: {\n          namespace: buildRun.metadata.namespace,\n          generateName,\n          ...(resourceMapLabel\n            ? { labels: { [BUILDRUN_TO_RESOURCE_MAP_LABEL]: resourceMapLabel } }\n            : {}),\n        },\n        spec: {\n          build: {\n            spec: buildSpec,\n          },\n        },\n      };\n    }\n    return k8sCreateResource({\n      model: isV1Alpha1Resource(newBuildRunData) ? BuildRunModelV1Alpha1 : BuildRunModel,\n      data: newBuildRunData,\n    });\n  }\n\n  if (isV1Alpha1Resource(buildRun)) {\n    throw new Error('Could not rerun BuildRun without buildRef.name or inline buildSpec.');\n  } else {\n    throw new Error('Could not rerun BuildRun without build.name or inline buildSpec.');\n  }\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { CommonActionFactory } from '@console/app/src/actions/creators/common-factory';\nimport { Action } from '@console/dynamic-plugin-sdk/src/extensions/actions';\nimport { errorModal } from '@console/internal/components/modals';\nimport { resourceObjPath } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { useK8sModel } from '@console/shared/src/hooks/useK8sModel';\nimport { rerunBuildRun, startBuild } from '../api';\nimport { BuildRunModel } from '../models';\nimport { Build } from '../types';\n\nconst useBuildActions = (build: Build) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const [kindObj, inFlight] = useK8sModel(referenceFor(build));\n\n  const actionsMenu = React.useMemo<Action[]>(() => {\n    const actions: Action[] = [];\n    actions.push({\n      id: 'shipwright-build-start',\n      label: t('shipwright-plugin~Start'),\n      cta: () => {\n        startBuild(build)\n          .then((newBuildRun) => {\n            navigate(resourceObjPath(newBuildRun, referenceFor(newBuildRun)));\n          })\n          .catch((err) => {\n            errorModal({ error: err.message });\n          });\n      },\n      accessReview: {\n        verb: 'create',\n        group: BuildRunModel.apiGroup,\n        resource: BuildRunModel.plural,\n        namespace: build.metadata?.namespace,\n      },\n    });\n\n    if (build.latestBuild) {\n      actions.push({\n        id: 'shipwright-build-start-last-run',\n        label: t('shipwright-plugin~Start last run'),\n        disabled: !build.latestBuild,\n        cta: () => {\n          rerunBuildRun(build.latestBuild)\n            .then((newBuildRun) => {\n              navigate(resourceObjPath(newBuildRun, referenceFor(newBuildRun)));\n            })\n            .catch((err) => {\n              const error = err.message;\n              errorModal({ error });\n            });\n        },\n        accessReview: {\n          verb: 'create',\n          group: BuildRunModel.apiGroup,\n          resource: BuildRunModel.plural,\n          namespace: build.metadata?.namespace,\n        },\n      });\n    }\n    actions.push(\n      ...[\n        CommonActionFactory.ModifyLabels(kindObj, build),\n        CommonActionFactory.ModifyAnnotations(kindObj, build),\n      ],\n    );\n    actions.push({\n      id: 'shipwright-build-edit',\n      label: t('shipwright-plugin~Edit Build'),\n      cta: {\n        href: `${resourceObjPath(build, referenceFor(build))}/form`,\n      },\n      accessReview: {\n        verb: 'update',\n        group: BuildRunModel.apiGroup,\n        resource: BuildRunModel.plural,\n        namespace: build.metadata?.namespace,\n      },\n    });\n    actions.push(CommonActionFactory.Delete(kindObj, build));\n    return actions;\n  }, [t, build, kindObj, navigate]);\n\n  return [actionsMenu, !inFlight, undefined];\n};\n\nexport default useBuildActions;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { getCommonResourceActions } from '@console/app/src/actions/creators/common-factory';\nimport { Action } from '@console/dynamic-plugin-sdk/src/extensions/actions';\nimport { errorModal } from '@console/internal/components/modals';\nimport { resourceObjPath } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { useK8sModel } from '@console/shared/src/hooks/useK8sModel';\nimport { canRerunBuildRun, rerunBuildRun } from '../api';\nimport { BuildRunModel } from '../models';\nimport { BuildRun } from '../types';\n\nconst useBuildRunActions = (buildRun: BuildRun) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const [kindObj, inFlight] = useK8sModel(referenceFor(buildRun));\n\n  const actions = React.useMemo<Action[]>(() => {\n    const rerun: Action = {\n      id: 'shipwright-buildrun-rerun',\n      label: t('shipwright-plugin~Rerun'),\n      cta: () => {\n        rerunBuildRun(buildRun)\n          .then((newBuildRun) => {\n            navigate(resourceObjPath(newBuildRun, referenceFor(newBuildRun)));\n          })\n          .catch((err) => {\n            const error = err.message;\n            errorModal({ error });\n          });\n      },\n      accessReview: {\n        verb: 'create',\n        group: BuildRunModel.apiGroup,\n        resource: BuildRunModel.plural,\n        namespace: buildRun.metadata?.namespace,\n      },\n    };\n\n    return [\n      ...(canRerunBuildRun(buildRun) ? [rerun] : []),\n      ...getCommonResourceActions(kindObj, buildRun),\n    ];\n  }, [t, buildRun, kindObj, navigate]);\n\n  return [actions, !inFlight, undefined];\n};\n\nexport default useBuildRunActions;\n"],"sourceRoot":""}