{"version":3,"sources":["webpack:///./packages/console-app/src/components/volume-snapshot/volume-snapshot.tsx"],"names":["common","RestorePVC","factory","menuActions","tableColumnInfo","id","className","columnClass","getTableColumns","disableItems","title","t","sort","transforms","props","filter","item","Row","obj","rowData","customData","name","namespace","creationTimestamp","metadata","size","status","restoreSize","sizeBase","sizeMetrics","string","sourceModel","spec","source","persistentVolumeClaimName","sourceName","snapshotContent","boundVolumeSnapshotContentName","snapshotClass","volumeSnapshotClassName","kind","columnID","Source","timestamp","resource","actions","VolumeSnapshotTable","columns","data","label","checkPVCSnapshot","volumeSnapshots","pvc","snapshot","FilteredSnapshotTable","VolumeSnapshotPVCPage","ns","params","canListVSC","CAN_LIST_VSC","resources","loaded","loadError","groupVersionKind","group","apiGroup","version","apiVersion","isList","namespaced","filteredData","onFilterChange","rowFilters","unfilteredData","canCreate","showTitle","selector","createPath","plural","labelPluralKey","undefined","to"],"mappings":"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","file":"volume-snapshot-chunk-197a4f7e207543cdea5a.min.js","sourcesContent":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport {\n  ListPageBody,\n  useListPageFilter,\n  ListPageFilter,\n  ListPageHeader,\n  ListPageCreateLink,\n  VirtualizedTable,\n  TableColumn,\n  RowProps,\n} from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { TableData } from '@console/internal/components/factory';\nimport { useActiveColumns } from '@console/internal/components/factory/Table/active-columns-hook';\nimport {\n  ResourceLink,\n  ResourceKebab,\n  Timestamp,\n  Kebab,\n  convertToBaseValue,\n  humanizeBinaryBytes,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport {\n  NamespaceModel,\n  PersistentVolumeClaimModel,\n  VolumeSnapshotModel,\n  VolumeSnapshotClassModel,\n  VolumeSnapshotContentModel,\n} from '@console/internal/models';\nimport {\n  K8sResourceKind,\n  PersistentVolumeClaimKind,\n  referenceForModel,\n  VolumeSnapshotKind,\n  Selector,\n} from '@console/internal/module/k8s';\nimport { Status, getName, getNamespace, snapshotSource, FLAGS } from '@console/shared';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { snapshotStatusFilters, volumeSnapshotStatus } from '../../status';\n\nconst { common, RestorePVC } = Kebab.factory;\nconst menuActions = [RestorePVC, ...common];\n\nconst tableColumnInfo = [\n  { id: 'name' },\n  { id: 'namespace' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'status' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-lg'), id: 'size' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-xl'), id: 'source' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), id: 'snapshotContent' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), id: 'snapshotClass' },\n  { className: classNames('pf-m-hidden', 'pf-m-visible-on-xl'), id: 'createdAt' },\n  { className: Kebab.columnClass, id: '' },\n];\n\nconst getTableColumns = (disableItems = {}): TableColumn<VolumeSnapshotKind>[] =>\n  [\n    {\n      title: i18next.t('console-app~Name'),\n      sort: 'metadata.name',\n      transforms: [sortable],\n      id: tableColumnInfo[0].id,\n    },\n    {\n      title: i18next.t('console-app~Namespace'),\n      sort: 'metadata.namespace',\n      transforms: [sortable],\n      id: tableColumnInfo[1].id,\n    },\n    {\n      title: i18next.t('console-app~Status'),\n      sort: 'snapshotStatus',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[2].className },\n      id: tableColumnInfo[2].id,\n    },\n    {\n      title: i18next.t('console-app~Size'),\n      sort: 'volumeSnapshotSize',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[3].className },\n      id: tableColumnInfo[3].id,\n    },\n    {\n      title: i18next.t('console-app~Source'),\n      sort: 'volumeSnapshotSource',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[4].className },\n      id: tableColumnInfo[4].id,\n    },\n    {\n      title: i18next.t('console-app~Snapshot content'),\n      sort: 'status.boundVolumeSnapshotContentName',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[5].className },\n      id: tableColumnInfo[5].id,\n    },\n    {\n      title: i18next.t('console-app~VolumeSnapshotClass'),\n      sort: 'spec.volumeSnapshotClassName',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[6].className },\n      id: tableColumnInfo[6].id,\n    },\n    {\n      title: i18next.t('console-app~Created at'),\n      sort: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnInfo[7].className },\n      id: tableColumnInfo[7].id,\n    },\n    {\n      title: '',\n      props: { className: tableColumnInfo[8].className },\n      id: tableColumnInfo[8].id,\n    },\n  ].filter((item) => !disableItems[item.title]);\n\nconst Row: React.FC<RowProps<VolumeSnapshotKind, VolumeSnapshotRowProsCustomData>> = ({\n  obj,\n  rowData: { customData },\n}) => {\n  const { name, namespace, creationTimestamp } = obj?.metadata || {};\n  const size = obj?.status?.restoreSize;\n  const sizeBase = convertToBaseValue(size);\n  const sizeMetrics = size ? humanizeBinaryBytes(sizeBase).string : '-';\n  const sourceModel = obj?.spec?.source?.persistentVolumeClaimName\n    ? PersistentVolumeClaimModel\n    : VolumeSnapshotContentModel;\n  const sourceName = snapshotSource(obj);\n  const snapshotContent = obj?.status?.boundVolumeSnapshotContentName;\n  const snapshotClass = obj?.spec?.volumeSnapshotClassName;\n\n  return (\n    <>\n      <TableData {...tableColumnInfo[0]}>\n        <ResourceLink\n          kind={referenceForModel(VolumeSnapshotModel)}\n          name={name}\n          namespace={namespace}\n        />\n      </TableData>\n      <TableData {...tableColumnInfo[1]} columnID=\"namespace\">\n        <ResourceLink kind={NamespaceModel.kind} name={namespace} />\n      </TableData>\n      <TableData {...tableColumnInfo[2]}>\n        <Status status={volumeSnapshotStatus(obj)} />\n      </TableData>\n      <TableData {...tableColumnInfo[3]}>{sizeMetrics}</TableData>\n      {!customData?.disableItems?.Source && (\n        <TableData {...tableColumnInfo[4]}>\n          <ResourceLink\n            kind={referenceForModel(sourceModel)}\n            name={sourceName}\n            namespace={namespace}\n          />\n        </TableData>\n      )}\n      {!customData?.disableItems?.['Snapshot Content'] && (\n        <TableData {...tableColumnInfo[5]}>\n          {snapshotContent ? (\n            <ResourceLink\n              kind={referenceForModel(VolumeSnapshotContentModel)}\n              name={snapshotContent}\n            />\n          ) : (\n            '-'\n          )}\n        </TableData>\n      )}\n      <TableData {...tableColumnInfo[6]}>\n        {snapshotClass ? (\n          <ResourceLink kind={referenceForModel(VolumeSnapshotClassModel)} name={snapshotClass} />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData {...tableColumnInfo[7]}>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData {...tableColumnInfo[8]}>\n        <ResourceKebab\n          kind={referenceForModel(VolumeSnapshotModel)}\n          resource={obj}\n          actions={menuActions}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst VolumeSnapshotTable: React.FC<VolumeSnapshotTableProps> = (props) => {\n  const { t } = useTranslation();\n  const [columns] = useActiveColumns({\n    columns: getTableColumns(props.rowData.customData.disableItems),\n  });\n\n  return (\n    <VirtualizedTable<VolumeSnapshotKind>\n      {...props}\n      data={props.data}\n      aria-label={t('console-app~VolumeSnapshots')}\n      label={t('console-app~VolumeSnapshots')}\n      columns={columns}\n      Row={Row}\n    />\n  );\n};\n\nconst VolumeSnapshotPage: React.FC<VolumeSnapshotPageProps> = ({\n  canCreate = true,\n  showTitle = true,\n  namespace = 'default',\n  selector,\n}) => {\n  const { t } = useTranslation();\n  const canListVSC = useFlag(FLAGS.CAN_LIST_VSC);\n\n  const createPath = `/k8s/ns/${namespace}/${VolumeSnapshotModel.plural}/~new/form`;\n  const [resources, loaded, loadError] = useK8sWatchResource<VolumeSnapshotKind[]>({\n    groupVersionKind: {\n      group: VolumeSnapshotModel.apiGroup,\n      kind: VolumeSnapshotModel.kind,\n      version: VolumeSnapshotModel.apiVersion,\n    },\n    isList: true,\n    namespaced: true,\n    namespace,\n    selector,\n  });\n  const [data, filteredData, onFilterChange] = useListPageFilter(resources);\n\n  return (\n    <>\n      <ListPageHeader title={showTitle ? t(VolumeSnapshotModel.labelPluralKey) : undefined}>\n        {canCreate && (\n          <ListPageCreateLink to={createPath}>\n            {t('console-app~Create VolumeSnapshot')}\n          </ListPageCreateLink>\n        )}\n      </ListPageHeader>\n      <ListPageBody>\n        <ListPageFilter\n          data={data}\n          loaded={loaded}\n          onFilterChange={onFilterChange}\n          rowFilters={snapshotStatusFilters(t)}\n        />\n        <VolumeSnapshotTable\n          data={filteredData}\n          unfilteredData={resources}\n          rowData={{\n            customData: {\n              disableItems: { 'Snapshot Content': !canListVSC },\n            },\n          }}\n          loaded={loaded}\n          loadError={loadError}\n        />\n      </ListPageBody>\n    </>\n  );\n};\n\nconst checkPVCSnapshot: CheckPVCSnapshot = (volumeSnapshots, pvc) =>\n  volumeSnapshots?.filter(\n    (snapshot) =>\n      snapshot?.spec?.source?.persistentVolumeClaimName === getName(pvc) &&\n      getNamespace(snapshot) === getNamespace(pvc),\n  );\n\nconst FilteredSnapshotTable: React.FC<FilteredSnapshotTable> = (props) => {\n  const { t } = useTranslation();\n  const { data, rowData } = props;\n\n  const [columns] = useActiveColumns({\n    columns: getTableColumns(rowData.customData?.disableItems),\n  });\n  return (\n    <VirtualizedTable<VolumeSnapshotKind>\n      {...props}\n      data={checkPVCSnapshot(data, rowData.customData.pvc)}\n      aria-label={t('console-app~VolumeSnapshots')}\n      label={t('console-app~VolumeSnapshots')}\n      columns={columns}\n      Row={Row}\n    />\n  );\n};\n\nexport const VolumeSnapshotPVCPage: React.FC<VolumeSnapshotPVCPage> = ({ ns, obj }) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const canListVSC = useFlag(FLAGS.CAN_LIST_VSC);\n  const namespace = ns || params?.ns;\n  const [resources, loaded, loadError] = useK8sWatchResource<VolumeSnapshotKind[]>({\n    groupVersionKind: {\n      group: VolumeSnapshotModel.apiGroup,\n      kind: VolumeSnapshotModel.kind,\n      version: VolumeSnapshotModel.apiVersion,\n    },\n    isList: true,\n    namespaced: true,\n    namespace,\n  });\n  const [data, filteredData, onFilterChange] = useListPageFilter(resources);\n\n  return (\n    <ListPageBody>\n      <ListPageFilter\n        data={checkPVCSnapshot(data, obj)}\n        loaded={loaded}\n        onFilterChange={onFilterChange}\n        rowFilters={snapshotStatusFilters(t)}\n      />\n      <FilteredSnapshotTable\n        data={filteredData}\n        unfilteredData={resources}\n        rowData={{\n          customData: {\n            pvc: obj,\n            disableItems: { Source: true, 'Snapshot Content': !canListVSC },\n          },\n        }}\n        loaded={loaded}\n        loadError={loadError}\n      />\n    </ListPageBody>\n  );\n};\ntype VolumeSnapshotPageProps = {\n  namespace?: string;\n  canCreate?: boolean;\n  showTitle?: boolean;\n  selector?: Selector;\n};\n\ntype CheckPVCSnapshot = (\n  volumeSnapshots: VolumeSnapshotKind[],\n  pvc: K8sResourceKind,\n) => VolumeSnapshotKind[];\n\ntype FilteredSnapshotTable = {\n  data: VolumeSnapshotKind[];\n  unfilteredData: VolumeSnapshotKind[];\n  rowData: { [key: string]: any };\n  loaded: boolean;\n  loadError: any;\n};\n\ntype VolumeSnapshotPVCPage = {\n  obj: PersistentVolumeClaimKind;\n  ns: string;\n};\n\ntype VolumeSnapshotTableProps = {\n  data: VolumeSnapshotKind[];\n  unfilteredData: VolumeSnapshotKind[];\n  rowData?: { [key: string]: any };\n  loaded: boolean;\n  loadError: any;\n};\n\ntype VolumeSnapshotRowProsCustomData = {\n  customData?: { [key: string]: any };\n};\n\nexport default VolumeSnapshotPage;\n"],"sourceRoot":""}