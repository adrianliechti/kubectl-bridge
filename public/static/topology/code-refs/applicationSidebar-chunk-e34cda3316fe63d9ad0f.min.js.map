{"version":3,"sources":["webpack:///./packages/topology/src/components/application-panel/TopologyApplicationResources.tsx","webpack:///./packages/topology/src/components/application-panel/ApplicationGroupResource.tsx","webpack:///./packages/topology/src/components/application-panel/TopologyApplicationList.tsx","webpack:///./packages/topology/src/components/application-panel/index.ts","webpack:///./packages/topology/src/components/application-panel/application-resource-link.tsx","webpack:///./packages/topology/src/components/application-panel/application-resource-tab-section.tsx"],"names":["resources","group","resourcesData","reduce","acc","resource","kind","key","title","t","className","text","to","encodeURIComponent","size","metadata","name","namespace","uid","getApplicationPanelResourceLink","element","getType","getLabel","useApplicationPanelResourceTabSection","undefined","getData","groupResources"],"mappings":"8FAAA,wDAsCe,IAzBmE,EAChFA,YACAC,YAEA,MAAMC,EAAgBF,EAAUG,OAAO,CAACC,GAAOC,gBACzCA,aAAQ,EAARA,EAAUC,QACZF,EAAIC,EAASC,MAAQ,IAAKF,EAAIC,EAASC,MAAQF,EAAIC,EAASC,MAAQ,GAAKD,IAEpED,GACN,IAEH,OACE,gCACG,IAAM,IAAOF,GAAiBK,GAC7B,gBAAC,IAAwB,CACvBA,IAAK,GAAGN,KAASM,IACjBC,MAAO,aAAoBD,GAC3BL,cAAeA,EAAcK,GAC7BN,MAAOA,Q,mCC/BjB,sFA0Ce,IAzB2D,EACxEO,QACAN,gBACAD,YAEA,MAAM,EAAEQ,GAAM,2BACd,OAAQ,IAAUP,GAgBd,KAfF,uBAAKQ,UAAU,+BACb,gBAAC,KAAqB,CAACC,KAAMH,GAC1B,IAAON,GAjBM,GAkBZ,gBAAC,OAAI,CACHQ,UAAU,4BACVE,GAAI,cAAc,sBAA6B,aAC7CV,EAAc,SACTW,mBAAmB,6BAA6BZ,MAEtDQ,EAAE,6BAA8B,CAAEK,KAAM,IAAOZ,OAItD,gBAAC,IAA+B,CAACF,UAAW,IAAOE,EA5BnC,Q,mCCTtB,iCA4Be,IAnByE,EACtFF,eAGE,sBAAIU,UAAU,cACX,IAAMV,EAAYK,IACjB,MACEU,UAAU,KAAEC,EAAI,UAAEC,EAAS,IAAEC,IAC3Bb,EACJ,OACE,sBAAIK,UAAU,mCAAmCH,IAAKW,GACpD,gBAAC,KAAY,CAACZ,KAAM,aAAaD,GAAWW,KAAMA,EAAMC,UAAWA,S,0DCpB/E,8K,kCCAA,8DAKO,MAAME,EAAmCC,IAC9C,GAAIA,EAAQC,YAAc,IAC1B,OACE,gCACE,gBAAC,KAAY,CAACX,UAAU,yBAAyBJ,KAAK,gBACrDc,EAAQE,c,kCCVf,kEAMO,MAAMC,EACXH,IAEA,GAAIA,EAAQC,YAAc,IACxB,MAAO,MAACG,GAAW,OAAMA,GAQ3B,MAAO,CALL,gBAAC,IAA4B,CAC3BxB,UAAWoB,EAAQK,UAAUC,eAC7BzB,MAAOmB,EAAQE,cAGF,OAAME","file":"topology/code-refs/applicationSidebar-chunk-e34cda3316fe63d9ad0f.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { getTitleForNodeKind } from '@console/shared';\nimport { OdcNodeModel } from '../../topology-types';\nimport ApplicationGroupResource from './ApplicationGroupResource';\n\nimport './TopologyApplicationResources.scss';\n\ntype TopologyApplicationResourcesProps = {\n  resources: OdcNodeModel[];\n  group: string;\n};\n\nconst TopologyApplicationResources: React.FC<TopologyApplicationResourcesProps> = ({\n  resources,\n  group,\n}) => {\n  const resourcesData = resources.reduce((acc, { resource }) => {\n    if (resource?.kind) {\n      acc[resource.kind] = [...(acc[resource.kind] ? acc[resource.kind] : []), resource];\n    }\n    return acc;\n  }, {});\n\n  return (\n    <>\n      {_.map(_.keys(resourcesData), (key) => (\n        <ApplicationGroupResource\n          key={`${group}-${key}`}\n          title={getTitleForNodeKind(key)}\n          resourcesData={resourcesData[key]}\n          group={group}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default TopologyApplicationResources;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { SidebarSectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport TopologyApplicationResourceList from './TopologyApplicationList';\n\nconst MAX_RESOURCES = 5;\n\nexport type ApplicationGroupResourceProps = {\n  title: string;\n  resourcesData: K8sResourceKind[];\n  group: string;\n};\n\nconst ApplicationGroupResource: React.FC<ApplicationGroupResourceProps> = ({\n  title,\n  resourcesData,\n  group,\n}) => {\n  const { t } = useTranslation();\n  return !_.isEmpty(resourcesData) ? (\n    <div className=\"overview__sidebar-pane-body\">\n      <SidebarSectionHeading text={title}>\n        {_.size(resourcesData) > MAX_RESOURCES && (\n          <Link\n            className=\"sidebar__section-view-all\"\n            to={`/search/ns/${getActiveNamespace()}?kind=${referenceFor(\n              resourcesData[0],\n            )}&q=${encodeURIComponent(`app.kubernetes.io/part-of=${group}`)}`}\n          >\n            {t('topology~View all {{size}}', { size: _.size(resourcesData) })}\n          </Link>\n        )}\n      </SidebarSectionHeading>\n      <TopologyApplicationResourceList resources={_.take(resourcesData, MAX_RESOURCES)} />\n    </div>\n  ) : null;\n};\n\nexport default ApplicationGroupResource;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\ntype TopologyApplicationResourceListProps = {\n  resources: K8sResourceKind[];\n};\n\nconst TopologyApplicationResourceList: React.FC<TopologyApplicationResourceListProps> = ({\n  resources,\n}) => {\n  return (\n    <ul className=\"list-group\">\n      {_.map(resources, (resource) => {\n        const {\n          metadata: { name, namespace, uid },\n        } = resource;\n        return (\n          <li className=\"list-group-item  container-fluid\" key={uid}>\n            <ResourceLink kind={referenceFor(resource)} name={name} namespace={namespace} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TopologyApplicationResourceList;\n","export * from './application-resource-link';\nexport * from './application-resource-tab-section';\n","import * as React from 'react';\nimport { GraphElement } from '@patternfly/react-topology';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { TYPE_APPLICATION_GROUP } from '../../const';\n\nexport const getApplicationPanelResourceLink = (element: GraphElement) => {\n  if (element.getType() !== TYPE_APPLICATION_GROUP) return undefined;\n  return (\n    <>\n      <ResourceIcon className=\"co-m-resource-icon--lg\" kind=\"application\" />\n      {element.getLabel()}\n    </>\n  );\n};\n","import * as React from 'react';\nimport { GraphElement } from '@patternfly/react-topology';\nimport { DetailsTabSectionExtensionHook } from '@console/dynamic-plugin-sdk/src/extensions/topology-details';\nimport { TYPE_APPLICATION_GROUP } from '../../const';\nimport TopologyApplicationResources from './TopologyApplicationResources';\n\nexport const useApplicationPanelResourceTabSection: DetailsTabSectionExtensionHook = (\n  element: GraphElement,\n) => {\n  if (element.getType() !== TYPE_APPLICATION_GROUP) {\n    return [undefined, true, undefined];\n  }\n  const section = (\n    <TopologyApplicationResources\n      resources={element.getData().groupResources}\n      group={element.getLabel()}\n    />\n  );\n  return [section, true, undefined];\n};\n"],"sourceRoot":""}