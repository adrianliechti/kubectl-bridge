{"version":3,"sources":["webpack:///./packages/console-shared/src/utils/owner-references.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsTable.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostSecondaryStatus.tsx","webpack:///./packages/metal3-plugin/src/components/maintenance/MaintenancePopover.tsx","webpack:///./packages/metal3-plugin/src/components/maintenance/StartingMaintenancePopoverContent.tsx","webpack:///./packages/metal3-plugin/src/components/maintenance/MaintenancePopoverPodList.tsx","webpack:///./packages/metal3-plugin/src/components/maintenance/UnderMaintenancePopoverContent.tsx","webpack:///./packages/metal3-plugin/src/k8s/objects/bare-metal-host.ts","webpack:///./packages/metal3-plugin/src/components/modals/PowerOffStatusValidations.tsx","webpack:///./packages/metal3-plugin/src/components/modals/RestartHostModal.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostDetails.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/MachineLink.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostDisks.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostNICs.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/BareMetalHostDashboard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/DetailsCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/EventsCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/InventoryCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/StatusCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/UtilizationCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/queries.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/add-baremetal-host/AddBareMetalHost.tsx","webpack:///./packages/metal3-plugin/src/selectors/secret.ts","webpack:///./packages/metal3-plugin/src/validations/validations.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/add-baremetal-host/AddBareMetalHostForm.tsx","webpack:///./packages/console-shared/src/components/dashboard/inventory-card/utils.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/add-baremetal-host/AddBareMetalHostPage.tsx","webpack:///./public/components/modals/confirm-modal.jsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsPage.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostDetailsPage.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/utils.ts","webpack:///./packages/metal3-plugin/src/status/host-status.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/BareMetalHostDashboardContext.tsx","webpack:///./packages/metal3-plugin/src/components/modals/StopNodeMaintenanceModal.tsx","webpack:///./packages/metal3-plugin/src/components/modals/StartNodeMaintenanceModal.tsx","webpack:///./packages/metal3-plugin/src/k8s/requests/bare-metal-host.ts","webpack:///./packages/metal3-plugin/src/k8s/requests/node-maintenance/index.ts","webpack:///./packages/metal3-plugin/src/k8s/objects/node-maintenance/index.ts","webpack:///./packages/metal3-plugin/src/status/node-maintenance-status.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostStatus.tsx","webpack:///./packages/metal3-plugin/src/selectors/machine.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostRole.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/host-menu-actions.tsx","webpack:///./packages/console-shared/src/k8s/index.ts","webpack:///./packages/console-shared/src/k8s/patch.ts","webpack:///./packages/metal3-plugin/src/constants/machine.ts","webpack:///./packages/metal3-plugin/src/selectors/machine-set.ts","webpack:///./packages/metal3-plugin/src/components/modals/PowerOffHostModal.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/NodeLink.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/table-filters.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostPowerStatusIcon.tsx","webpack:///./packages/metal3-plugin/src/validations/regex.tsx"],"names":["compareOwnerReference","obj","otherObj","compareModelOnly","isUIDEqual","uid","isNameEqual","name","apiVersion","kind","tableColumnClasses","status","node","role","address","serialNumber","kebab","columnClass","HostsTableHeader","t","title","sortField","transforms","props","className","HostsTableRow","host","nodeMaintenance","machine","machineSet","maintenanceModel","bmoEnabled","namespace","nodeName","options","map","action","hasNodeMaintenanceCapability","key","id","defaultSortField","Header","Row","virtualize","powerStatus","provisioningState","includes","push","children","phase","statusBody","icon","reason","creationTimestamp","lastError","pendingPods","timestamp","variant","isInline","value","size","sm","toggleText","listLength","length","pods","onClick","podRowRenderer","index","style","pod","disableHeight","width","height","rowCount","rowHeight","rowRenderer","getSecretName","buildBareMetalHostSecret","username","password","metadata","data","btoa","type","buildBareMetalHostObject","BMCAddress","bootMACAddress","disableCertificateVerification","online","description","enablePowerManagement","bootMode","bmh","apiGroup","spec","bmc","credentialsName","getStaticPods","filter","annotations","getDaemonSetsOfPods","namespaces","forEach","ownerReferences","or","Object","getOwnPropertyNames","ns","ExpandableResources","resources","onLinkClicked","subject","isExpanded","setExpanded","onToggle","onLinkClick","event","sort","a","b","localeCompare","resource","onKeyPress","tabIndex","StatusValidations","nodePods","loadError","validations","daemonSets","staticPods","level","detail","hasGutter","validation","restartHostModal","inProgress","errorMessage","handlePromise","close","cancel","onSubmit","preventDefault","promise","restart","submitDisabled","submitText","machines","nodes","nodeMaintenances","ips","nic","ip","join","machineName","hostRAM","RAMGB","string","hostStorage","totalStorageCapacity","count","CPUCount","model","CPUModel","manufacturer","productName","bios","text","version","vendor","date","DisksTableHeader","getRowProps","DisksTableRow","hctl","rotational","sizeBytes","loaded","disks","message","undefined","NICsTableHeader","NICsTableRow","mac","pxe","speedGbps","vlanId","nics","context","mainCards","Card","leftCards","rightCards","Provider","hostName","nodeCell","hostRole","isClickable","isSelectable","actions","to","hasNoOffset","isLoading","eventsResource","isList","prop","matchesInvolvedObject","involvedObject","hostEventsFilter","watchK8sResource","stopWatchK8sResource","getHostEventsFilter","hostStatus","titleKey","events","PodInventoryItem","podResource","fieldSelector","podsLoaded","podsError","label","basePath","mapper","error","NICTitleComponent","DiskTitleComponent","TitleComponent","watchAlerts","stopWatchAlerts","notificationAlerts","hwHealth","state","ERROR","OK","getHostHardwareHealthState","alerts","alert","filterAlerts","hasPowerMgmt","restartScheduled","details","NOT_AVAILABLE","Icon","rule","queries","multilineQueries","humanizePods","v","unit","cpuPopover","current","topConsumerQueries","humanize","consumers","query","PROJECTS_BY_CPU","metric","PODS_BY_CPU","memPopover","PROJECTS_BY_MEMORY","PODS_BY_MEMORY","storagePopover","PROJECTS_BY_STORAGE","PODS_BY_STORAGE","utilizationQuery","CPU_UTILIZATION","utilization","humanizeValue","TopConsumerPopover","MEMORY_UTILIZATION","totalQuery","total","byteDataType","BinaryBytes","STORAGE_UTILIZATION","NETWORK_UTILIZATION","NUMBER_OF_PODS","HostQuery","nodeQueriesByNodeName","MEMORY_TOTAL","STORAGE_TOTAL","NETWORK_IN_UTILIZATION","NETWORK_OUT_UTILIZATION","getQuery","getUtilizationQueries","getMultilineUtilizationQueries","desc","getTopConsumerQueries","getInitialValues","secret","isEditing","enablePowerMgmt","bmhResource","bmhResources","hostLoaded","hostError","hosts","hostsLoaded","hostsError","secretResource","secretLoaded","secretError","reload","setReload","initialHost","initialSecret","hostNames","initialValues","prevInitialValues","showUpdated","addHostValidationSchema","shape","test","concat","matches","required","enableReinitialize","values","opts","then","catch","setStatus","submitError","onReset","validationSchema","validateOnMount","initialTouched","keys","reduce","acc","curr","getSecretUsername","atob","getSecretPassword","nameValidationSchema","maxLength","excludeEmptyString","max","characterCount","errors","handleSubmit","handleReset","isSubmitting","dirty","placeholder","helpText","isDisabled","handleCancel","goBack","submitLabel","disableSubmit","infoTitle","infoMessage","showAlert","POD_PHASE_GROUP_MAPPING","NOT_MAPPED","PROGRESS","WARN","PVC_STATUS_GROUP_MAPPING","PV_STATUS_GROUP_MAPPING","NODE_STATUS_GROUP_MAPPING","VS_STATUS_GROUP_MAPPING","getStatusGroups","mapping","filterType","groups","UNKNOWN","statusIDs","group","find","getPodStatusGroups","getNodeStatusGroups","getPVCStatusGroups","pvc","getPVStatusGroups","pv","getVSStatusGroups","location","URLSearchParams","search","has","ConfirmModal","super","this","_submit","bind","_cancel","executeFn","supressNotifications","messageKey","btnText","btnTextKey","cancelText","cancelTextKey","submitDanger","propTypes","isRequired","confirmModal","flattenResources","optional","machineSets","hostsData","machinesData","maintenancesByNodeName","nodesByMachineName","machineSetByUID","machineOwner","getCreateProps","items","dialog","yaml","createLink","itemName","base","namespaced","canCreate","rowFilters","createProps","createButtonText","flatten","ListComponent","nicsPage","href","nameKey","component","disksPage","dashboardPage","detailsPage","pagesFor","editYaml","menuActions","customData","BMH_STATUS_GROUP_MAPPER","getBMHStatusGroups","maintenances","kvAlphaMaintenances","kvBetaMaintenances","kvBetaMaintenancesByNodeName","kvAlphaMaintenancesByNodeName","bareMetalHostStatus","getBareMetalHostStatus","operationalStatus","errorType","descriptionKey","getHostStatus","isHostInProgressState","BareMetalHostDashboardContext","reasonLabel","getMaintenanceModel","cephClusterResource","StartNodeMaintenanceModal","setReason","cephClusters","cephCluster","cephClusterHealthy","ceph","health","fieldId","onChange","_event","startNodeMaintenanceModal","powerOffHost","op","path","restartHost","deprovision","setObjectUpdate","build","replicas","replace","ignored","createBareMetalHost","bareMetalHost","updateBareMetalHost","patches","buildAddObjectKeysPatches","secretPatch","remove","startNodeMaintenance","buildNodeMaintenance","generateName","getNodeMaintenanceStatus","maintenance","statusTitle","hostStatusActions","getMachineMachineSetOwner","desiredReference","reference","kindObj","hidden","callback","accessReview","poweroffAnnotation","factory","ModifyLabels","ModifyAnnotations","menuActionsCreator","patchSafeValue","PatchOperation","PatchBuilder","valueIndex","valueKey","valid","setValue","setOperation","operation","setListIndex","add","ADD","REPLACE","REMOVE","setListRemove","removedItemEquals","foundIndex","findIndex","setListUpdate","item","updatedItemEquals","other","updatedValue","setObjectRemove","object","isPatchValid","resultPath","result","newObject","oldObject","builders","u","DELETE_MACHINE_ANNOTATION","findMachineSet","getReplicas","defaultValue","PowerOffWarning","getPowerOffMessage","podListlength","daemonListlength","ForcePowerOffDialog","canStartMaintenance","forceOff","setForceOff","hasMaintenance","mainText","isChecked","PowerOffHostModal","canPowerOffSafely","isPowerOffSafe","isUnderMaintenance","powerOffHostModal","hostStatesToFilterMap","freeze","registering","states","ready","provisioning","provisioned","unmanaged","getHostFilterStatus","bundle","hostStatusFilter","filterGroupName","reducer","selected","all","iconProps","MAC_REGEX","BMC_ADDRESS_REGEX","RegExp","RESOURCE_NAME_REGEX"],"mappings":"kGAEA,kCAAO,MAAMA,EAAwB,CACnCC,EACAC,EACAC,KAEA,GAAIF,IAAQC,EACV,OAAO,EAET,IAAKD,IAAQC,EACX,OAAO,EAET,MAAME,GAAaH,EAAII,MAAOH,EAASG,MAAMF,GAAoBF,EAAII,MAAQH,EAASG,KAChFC,EAAcH,GAAoBF,EAAIM,OAASL,EAASK,KAE9D,OACEN,EAAIO,aAAeN,EAASM,YAC5BP,EAAIQ,OAASP,EAASO,MACtBH,GACAF,I,mCCpBJ,0JAoBA,MAAMM,EAAqB,CACzBH,KAAM,GACNI,OAAQ,iCACRC,KAAM,iCACNC,KAAM,iCACNC,QAAS,iCACTC,aAAc,iCACdC,MAAO,IAAMC,aAGTC,EAAoBC,GAAiB,IAAM,CAC/C,CACEC,MAAOD,EAAE,sBACTE,UAAW,qBACXC,WAAY,CAAC,KACbC,MAAO,CAAEC,UAAWd,EAAmBH,OAEzC,CACEa,MAAOD,EAAE,wBACTE,UAAW,gBACXC,WAAY,CAAC,KACbC,MAAO,CAAEC,UAAWd,EAAmBC,SAEzC,CACES,MAAOD,EAAE,sBACTE,UAAW,qBACXC,WAAY,CAAC,KACbC,MAAO,CAAEC,UAAWd,EAAmBE,OAEzC,CACEQ,MAAOD,EAAE,sBACTE,UAAW,2EACXC,WAAY,CAAC,KACbC,MAAO,CAAEC,UAAWd,EAAmBG,OAEzC,CACEO,MAAOD,EAAE,oCACTE,UAAW,wBACXC,WAAY,CAAC,KACbC,MAAO,CAAEC,UAAWd,EAAmBI,UAEzC,CACEM,MAAOD,EAAE,+BACTE,UAAW,iDACXC,WAAY,CAAC,KACbC,MAAO,CAAEC,UAAWd,EAAmBK,eAEzC,CACEK,MAAO,GACPG,MAAO,CAAEC,UAAWd,EAAmBM,SAIrCS,EAAgE,EACpExB,KAAOyB,OAAMd,OAAMe,kBAAiBC,UAASC,aAAYlB,cAEzD,MAAM,EAAEQ,GAAM,4BACPW,GAAoB,cACrBC,EAAa,YAAQ,oBACrBxB,EAAO,aAAQmB,GACfM,EAAY,aAAaN,GACzBZ,EAAU,YAAkBY,GAC5BrB,EAAM,aAAOqB,GACbO,EAAW,aAAQrB,IACnB,aAAEG,GAAiB,YAAkBW,GAE3C,OACE,gCACE,gBAAC,IAAS,CAACF,UAAWd,EAAmBH,MACvC,gBAAC,KAAY,CACXE,KAAM,aAAkB,KACxBF,KAAMA,EACNyB,UAAWA,KAGf,gBAAC,IAAS,CAACR,UAAWd,EAAmBC,QACvC,gBAAC,IAAmB,iBAAKA,EAAM,CAAEgB,gBAAiBA,EAAiBD,KAAMA,KACzE,gBAAC,IAA4B,CAACA,KAAMA,KAEtC,gBAAC,IAAS,CAACF,UAAWd,EAAmBE,MACvC,gBAAC,IAAQ,CAACqB,SAAUA,KAEtB,gBAAC,IAAS,CAACT,UAAWd,EAAmBG,MACvC,gBAAC,IAAiB,CAACe,QAASA,EAAShB,KAAMA,KAE7C,gBAAC,IAAS,CAACY,UAAWd,EAAmBI,SAAUA,GAAW,KAC9D,gBAAC,IAAS,CAACU,UAAWd,EAAmBK,cAAeA,GAAgB,KACxE,gBAAC,IAAS,CAACS,UAAWd,EAAmBM,OACvC,gBAAC,IAAK,CACJkB,QAAS,IAAYC,IAAKC,GACxBA,EAAO,IAAoBV,EAAM,CAC/BC,kBACAM,WACAI,+BAAgCP,EAChCF,UACAC,aACAlB,SACAoB,aACAD,mBACAX,OAGJmB,IAAK,aAAajC,EAClBkC,GAAI,aAAalC,OAyBZ,IAdkDkB,IAC/D,MAAM,EAAEJ,GAAM,2BACd,OACE,gBAAC,IAAK,iBACAI,EAAK,CACTiB,iBAAiB,qBAAoB,aACzBrB,EAAE,kCACdsB,OAAQvB,EAAiBC,GACzBuB,IAAKjB,EACLkB,YAAU,O,mCC/IhB,6CAuCe,IAvBmE,EAAGjB,WACnF,MAAM,EAAEP,GAAM,2BACRyB,EAAc,YAAmBlB,GACjCmB,EAAoB,YAAyBnB,GAC7Cf,EAAS,GAgBf,OAdK,YAAmBe,GAGZ,IAAwBoB,SAASD,KACvC,YAA0BnB,IAC5Bf,EAAOoC,KAAK5B,EAAE,kCAIZyB,IAAgB,KAClBjC,EAAOoC,KAAKH,IATdjC,EAAOoC,KAAK5B,EAAE,sCAaT,gBAAC,KAAe,CAACR,OAAQA,M,mCCpClC,sEA4Ce,IA7B+C,EAC5DS,QACAO,kBACAH,YACAwB,eAEA,MAAMC,EAAQ,YAAwBtB,GAEtC,OACE,gBAAC,IAAa,CACZP,MAAOA,EACP8B,WACE,gBAAC,IAAiB,CAChB9B,MAAOA,EACP+B,KAAgB,cAAVF,EAAwB,gBAAC,IAAe,MAAM,gBAAC,IAAc,MACnEzB,UAAWA,KAIJ,cAAVyB,EACC,gBAAC,IAA8B,CAACtB,gBAAiBA,IAEjD,gBAAC,IAAiC,CAACA,gBAAiBA,IAErDqB,K,mCCvCP,4FAyEe,IAtD6E,EAC1FrB,sBAEA,MAAM,EAAER,GAAM,2BACRiC,EAAS,YAAyBzB,GAClC0B,EAAoB,YAAoC1B,GACxD2B,EAAY,YAA4B3B,GACxC4B,EAAc,YAA8B5B,GAElD,OACE,gCACE,yBACGR,EACC,0IAGJ,0BACE,0BAAKA,EAAE,sCACP,0BAAKiC,GACL,0BAAKjC,EAAE,6BACP,0BACE,gBAAC,KAAS,CAACqC,UAAWH,MAG1B,2BACCC,GACC,gCACE,gBAAC,IAAK,CAACG,QAAQ,UAAUrC,MAAOD,EAAE,2CAA4CuC,UAAQ,GACnFJ,GAEH,4BAGJ,gBAAC,IAAQ,CACPK,MAAO,YAAkChC,GACzCP,MAAOD,EAAE,kCACTyC,KAAM,IAAaC,KAErB,2BACA,gBAAC,IAAiB,CAChBC,WAAY3C,EAAE,0DAA2D,CACvE4C,WAAYR,EAAYS,UAG1B,gBAAC,IAAyB,CAACC,KAAMV,KAEnC,2BACA,gBAAC,IAAM,CAACE,QAAQ,OAAOS,QAAS,IAAM,YAAyBvC,EAAiBR,GAAIuC,UAAQ,GACzFvC,EAAE,0B,mCCnEX,mDAOA,MAAMgD,EAAkBF,GAAS,EAAG3B,MAAK8B,QAAOC,YAC9C,MAAMC,EAAML,EAAKG,GACjB,OACE,uBAAK9B,IAAKA,EAAK+B,MAAOA,EAAO7C,UAAU,2CACrC,gBAAC,KAAY,CAACf,KAAM,aAAkB,YAAWF,KAAM+D,EAAKlD,MAAOkD,MAsB1D,IAd6D,EAAGL,UAC7E,gBAAC,IAAS,CAACM,eAAa,GACrB,EAAGC,WACF,gBAAC,IAAI,CACHA,MAAOA,EACPC,OAAQR,EAAKD,OAAS,EAAkB,GAAdC,EAAKD,OAAc,IAC7CU,SAAUT,EAAKD,OACfW,UAAW,GACXC,YAAaT,EAAeF,O,2DC3BpC,qDA0Ce,IA9BuE,EACpFtC,sBAEA,MAAM,EAAER,GAAM,2BACRiC,EAAS,YAAyBzB,GAClC0B,EAAoB,YAAoC1B,GAE9D,OACE,gCACE,yBACGR,EACC,uIAGJ,0BACE,0BAAKA,EAAE,sCACP,0BAAKiC,GACL,0BAAKjC,EAAE,6BACP,0BACE,gBAAC,KAAS,CAACqC,UAAWH,MAG1B,2BACA,gBAAC,IAAM,CAACI,QAAQ,OAAOS,QAAS,IAAM,YAAyBvC,EAAiBR,GAAIuC,UAAQ,GACzFvC,EAAE,sC,2DCpCX,2HAIO,MAAM0D,EAAiBtE,GAA4BA,EAAH,cAE1CuE,EAA2B,CAACvE,EAAMyB,EAAW+C,EAAUC,KAAa,CAC/ExE,WAAY,cAAYA,WACxBC,KAAM,cAAYA,KAClBwE,SAAU,CACRjD,YACAzB,KAAMsE,EAActE,IAEtB2E,KAAM,CACJH,SAAUI,KAAKJ,GACfC,SAAUG,KAAKH,IAEjBI,KAAM,WAGKC,EAA2B,CACtC9E,EACAyB,EACAsD,EACAC,EACAC,GAAiC,EACjCC,GAAS,EACTC,EAAc,GACdC,EACAC,KAEA,MAAMC,EAAyB,CAC7BrF,WAAY,GAAG,IAAmBsF,YAAY,IAAmBtF,aACjEC,KAAM,IAAmBA,KACzBwE,SAAU,CACR1E,OACAyB,aAEF+D,KAAM,CACJR,iBACAG,cACAD,WAaJ,OAVIG,IACFC,EAAIE,KAAKH,SAAWA,GAElBD,IACFE,EAAIE,KAAKC,IAAM,CACblF,QAASwE,EACTW,gBAAiBpB,EAActE,GAC/BiF,mCAGGK,I,mCCtDT,qMAgCO,MAAMK,EAAiBjC,KAE1BA,aAAI,EAAJA,EAAMkC,OAAQ7B,I,MAEZ,UADgC,QAAZ,EAAAA,EAAIW,gBAAQ,eAAEmB,cAAe,IAC5B,mCACjB,IACNjE,IAAKmC,IAAQ,CACb/D,KAAM,aAAQ+D,GACdtC,UAAW,aAAasC,GACxB7D,KAAM,WAASA,QAGN4F,EAAuBpC,IAClC,IAAKA,EACH,MAAO,GAGT,MAAMqC,EAA0C,GAChDrC,EAAKsC,QAASjC,I,UAEmB,QAA7B,EAAY,QAAZ,EAAAA,EAAIW,gBAAQ,eAAEuB,uBAAe,eAAEL,OAAQM,GAAOA,EAAGhG,OAAS,iBAAeA,QAAS,IACpE8F,QAASE,IACvBH,EAAW,aAAahC,IAAQgC,EAAW,aAAahC,KAAS,GACjEgC,EAAW,aAAahC,IAAMvB,KAAK0D,EAAGlG,UAa1C,OATe,IACbmG,OAAOC,oBAAoBL,GAAYnE,IAAKyE,GAC1CN,EAAWM,GAAIzE,IAAK5B,IAAS,CAC3BA,OACAyB,UAAW4E,EACXnG,KAAM,iBAAeA,WAOvBoG,EAA0D,EAC9DC,YACAC,gBACAC,cAEA,MAAOC,EAAYC,GAAe,YAAe,GAC3CC,EAAW,cAAkB,IAAMD,GAAaD,GAAa,CAACA,EAAYC,IAC1EE,EAAc,cACjBC,IACCN,KAAmBM,EAAM/E,KAAqB,UAAd+E,EAAM/E,MAAoByE,KAE5D,CAACA,IAGH,IAAKD,GAAkC,IAArBA,EAAU9C,OAC1B,OAAO,KAGT,MAAMF,EAAa,GAAGmD,EAAa,OAAS,UAAUD,MAAYF,EAAU9C,UAE5E,OACE,gBAAC,IAAiB,CAACmD,SAAUA,EAAUF,WAAYA,EAAYnD,WAAYA,GACxEgD,EACEQ,KAAK,CAACC,EAAGC,IAAMD,EAAEhH,KAAKkH,cAAcD,EAAEjH,OACtC4B,IAAKuF,GACJ,uBACExD,QAASkD,EACTO,WAAYP,EACZ9E,IAAK,GAAGoF,EAASnH,QAAQmH,EAAS1F,YAClCnB,KAAK,OACL+G,SAAU,GAEV,gBAAC,KAAY,CACXnH,KAAMiH,EAASjH,KACfF,KAAMmH,EAASnH,KACfyB,UAAW0F,EAAS1F,gBAQrB6F,EAAqD,EAChElH,SACAmH,WACAC,YACAhB,oBAEA,MAAM,EAAE5F,GAAM,2BACR6G,EAAc,IACbC,EAAYC,GAAc,UAC/B,IAAM,CAAC7B,EAAoByB,GAAW5B,EAAc4B,IACpD,CAACA,IA2EH,OAxEIC,GACFC,EAAYjF,KAAK,CACf3B,MAAOD,EAAE,sCACTuE,YAAavE,EAAE,8CACfgH,MAAO,WAIP,CAAC,OAAwB,KAAmBrF,SAASnC,IACvDqH,EAAYjF,KAAK,CACf3B,MAAOD,EAAE,qDACTuE,YAAavE,EACX,0FAEFgH,MAAO,YAIPxH,IAAW,KACbqH,EAAYjF,KAAK,CACf3B,MAAOD,EAAE,mDACTuE,YAAavE,EACX,mGAEFgH,MAAO,SAIPxH,IAAW,KACbqH,EAAYjF,KAAK,CACf3B,MAAOD,EAAE,mDACTuE,YAAavE,EACX,4FAEFgH,MAAO,SAIPF,EAAWjE,OAAS,GACtBgE,EAAYjF,KAAK,CACf3B,MAAOD,EAAE,oDACTuE,YAAavE,EACX,0IAEFgH,MAAO,OACPC,OACE,gBAACvB,EAAmB,CAClBG,QAAQ,cACRF,UAAWmB,EACXlB,cAAeA,MAMnBmB,EAAWlE,OAAS,GACtBgE,EAAYjF,KAAK,CACf3B,MAAOD,EAAE,2DACTuE,YAAavE,EACX,kGAEFgH,MAAO,UACPC,OACE,gBAACvB,EAAmB,CAClBG,QAAQ,iBACRF,UAAWoB,EACXnB,cAAeA,MAOrB,gBAAC,IAAK,CAACsB,WAAS,GACbL,EAAY7F,IAAKmG,GAChB,gBAAC,IAAS,CAAChG,IAAKgG,EAAWlH,OACzB,gBAAC,IAAK,CAACqC,QAAS6E,EAAWH,MAAOzE,UAAQ,EAACtC,MAAOkH,EAAWlH,OAC1DkH,EAAW5C,YACX4C,EAAWF,a,gaCvLxB,MAqCaG,EAAmB,YAAoB,aArC3B,EACvB7G,OACA8G,aACAC,eACAC,gBACAC,QACAC,aAEA,MAAM,EAAEzH,GAAM,2BACR0H,EAAW,cACRxB,GAAU,OAAD,6BACdA,EAAMyB,iBACN,MAAMC,EAAU,YAAYrH,GAE5B,aADMgH,EAAcK,GACbJ,OAET,CAACjH,EAAMiH,EAAOD,IAGhB,OACE,wBAAMG,SAAUA,EAAUtI,KAAK,OAAOiB,UAAU,iBAC9C,gBAAC,IAAU,KAAEL,EAAE,0CACf,gBAAC,IAAS,KACR,yBAAIA,EAAE,6DACN,gBAAC,IAAe,CAAC6H,SAAO,KAE1B,gBAAC,IAAiB,CAChBJ,OAAQA,EACRH,aAAcA,EACdD,WAAYA,EACZS,gBAAgB,EAChBC,WAAY/H,EAAE,gC,mCCrDtB,gJA2Oe,IA9KmD,EAChElB,IAAKyB,EACLyH,WACAC,QACAC,uBAEA,MAAM,EAAElI,GAAM,4BACR,kBAAEkC,GAAsB3B,EAAKuD,SAC7BjD,EAAY,aAAaN,GAEzB4H,EADO,YAAY5H,GACRS,IAAKoH,GAAQA,EAAIC,IAAIC,KAAK,MACrCC,EAAc,YAAmBhI,GACjCE,EAAU,YAAeF,EAAMyH,GAC/BlH,EAAW,aAAmBL,GAC9BhB,EAAO,aAAegB,EAASwH,GAC/BvI,EAAO,aAAee,GACtB+H,EAAU,YAAcjI,GACxBkI,EAAQD,EAAU,aAAqBA,EAAU,GAAK,IAAIE,OAAS,IACnEC,EAAc,YAA4BpI,GAC1CqI,EAAuBD,EAAc,aAAqBA,GAAaD,OAAS,IAChFnE,EAAc,YAAmBhE,GACjCkB,EAAc,YAAmBlB,GACjCmB,EAAoB,YAAyBnB,IAC3CsI,MAAOC,EAAUC,MAAOC,GAAa,YAAWzI,IAClD,aAAE0I,EAAY,YAAEC,EAAW,aAAEtJ,GAAiB,YAAkBW,GAChE4I,EAAO,YAAY5I,GAEnBC,EAAkB,YAAoB0H,EAAkBpH,GACxDtB,EAAS,YAAc,CAAEe,OAAME,UAAShB,OAAMe,oBAEpD,OACE,uBAAKH,UAAU,mBACb,gBAAC,KAAc,CAAC+I,KAAMpJ,EAAE,2CACxB,uBAAKK,UAAU,OACb,uBAAKA,UAAU,qBAAqBe,GAAG,2BACrC,0BACE,0BAAKpB,EAAE,uBACP,0BAAK,aAAQO,IACZgE,GACC,gCACE,0BAAKvE,EAAE,8BACP,0BAAKuE,IAGT,0BAAKvE,EAAE,iCACP,0BACE,gBAAC,IAAkB,KACjB,gBAAC,IAAsB,CAACC,MAAM,cAC3B,YAAkBM,IAAS,KAE9B,gBAAC,IAAsB,CAACN,MAAM,QAAQkI,GACtC,gBAAC,IAAsB,CAAClI,MAAM,sBAC3B,YAAsBM,MAI5BgI,GACC,gCACE,0BAAKvI,EAAE,0BACP,0BACE,gBAAC,IAAW,CAACO,KAAMA,MAIxBO,GACC,gCACE,0BAAKd,EAAE,uBACP,0BACE,gBAAC,KAAY,CACXV,KAAM,aAAkB,aACxBF,KAAM0B,EACND,UAAWA,EACXZ,MAAOa,MAKf,0BAAKd,EAAE,6BACP,0BACE,gBAAC,KAAS,CAACqC,UAAWH,OAI5B,uBAAK7B,UAAU,sBACb,0BACE,0BAAKL,EAAE,yBACP,0BACE,gBAAC,IAAmB,iBAAKR,EAAM,CAAEgB,gBAAiBA,EAAiBD,KAAMA,OAGzE,IAAwBoB,SAASD,IACjC,gCACE,0BAAK1B,EAAE,+BACP,0BACI,YAAmBO,GAGnB,gCACE,gBAAC,IAAiB,CAChBN,MAAOwB,EACPO,KAAM,gBAAC,IAA4B,CAACP,YAAaA,MAElD,YAA0BlB,IACzB,gBAAC,IAAiB,CAChBN,MAAOD,EAAE,iCACTgC,KAAM,gBAAC,IAAa,SAV1B,gBAAC,KAAe,CAACxC,OAAQQ,EAAE,yCAkBlCN,GACC,gCACE,0BAAKM,EAAE,uBACP,0BAAKN,KAGPuJ,GAAgBC,IAChB,gCACE,0BAAKlJ,EAAE,wBACP,0BAAK,IAAS,CAACiJ,EAAcC,IAAcZ,KAAK,QAGnDa,GACC,gCACE,0BAAKnJ,EAAE,uBACP,0BACE,gBAAC,IAAkB,KACjB,gBAAC,IAAsB,CAACC,MAAM,WAC3BkJ,EAAKE,SAAW,KAEnB,gBAAC,IAAsB,CAACpJ,MAAM,UAC3BkJ,EAAKG,QAAU,KAElB,gBAAC,IAAsB,CAACrJ,MAAM,QAC3BkJ,EAAKI,MAAQ,QAMvB3J,GACC,gCACE,0BAAKI,EAAE,gCACP,0BAAKJ,IAGR,IAAMW,EAAM,oBACX,gCACE,0BAAKP,EAAE,2BACP,0BACE,gBAAC,IAAkB,KACjB,gBAAC,IAAsB,CAACC,MAAOD,EAAE,sBAC9B8I,EAAW,GAAGA,MAAaE,IAAa,KAE3C,gBAAC,IAAsB,CAAC/I,MAAOD,EAAE,sBAC9ByI,GAEH,gBAAC,IAAsB,CAACxI,MAAOD,EAAE,0BAC9B4I,Y,mCC9NvB,mDA6Be,IAjBiC,EAAGrI,WACjD,MAAMgI,EAAc,YAAmBhI,GACjCM,EAAY,aAAaN,GAE/B,OAAIgI,EAEA,gBAAC,KAAY,CACXjJ,KAAM,aAAkB,gBACxBF,KAAMmJ,EACN1H,UAAWA,EACXZ,MAAOsI,IAIN,gCAAG,O,mCC1BZ,mDASA,MAAMiB,EAAoBxJ,GAAiB,IAAM,CAC/C,CAAEC,MAAOD,EAAE,sBAAuBE,UAAW,OAAQC,WAAY,CAAC,MAClE,CAAEF,MAAOD,EAAE,sBAAuBE,UAAW,YAAaC,WAAY,CAAC,MACvE,CAAEF,MAAOD,EAAE,sBAAuBE,UAAW,aAAcC,WAAY,CAAC,MACxE,CAAEF,MAAOD,EAAE,uBAAwBE,UAAW,QAASC,WAAY,CAAC,MACpE,CAAEF,MAAOD,EAAE,+BAAgCE,UAAW,eAAgBC,WAAY,CAAC,MACnF,CAAEF,MAAOD,EAAE,wBAAyBE,UAAW,SAAUC,WAAY,CAAC,MACtE,CAAEF,MAAOD,EAAE,sBAAuBE,UAAW,OAAQC,WAAY,CAAC,OAG9DsJ,EAAe3K,IAAQ,CAC3BsC,GAAItC,EAAIM,OAGJsK,EAA8D,EAAG5K,UACrE,MAAM,KAAE6K,EAAI,MAAEZ,EAAK,KAAE3J,EAAI,WAAEwK,EAAU,aAAEhK,EAAY,UAAEiK,EAAS,OAAEP,GAAWxK,GACnE4J,OAAQjG,GAAS,aAAqBoH,GAC9C,OACE,gCACE,gBAAC,IAAS,KAAEzK,GACZ,gBAAC,IAAS,KAAEqD,GACZ,gBAAC,IAAS,KAAEmH,EAAa,aAAe,OACxC,gBAAC,IAAS,KAAEb,GACZ,gBAAC,IAAS,KAAEnJ,GACZ,gBAAC,IAAS,KAAE0J,GACZ,gBAAC,IAAS,KAAEK,KAwCH,IA7B+C,EAC5D7K,IAAKyB,EACLqG,YACAkD,aAEA,MAAM,EAAE9J,GAAM,2BACR+J,EAAQ,YAAexJ,GAC7B,OACE,uBAAKF,UAAU,aACb,uBAAKA,UAAU,mBACb,gBAAC,IAAK,CACJ0D,KAAMgG,EAAK,aACA,wBACXzI,OAAQkI,EAAiBxJ,GACzBuB,IAAKmI,EACLI,OAAQA,EACRlD,UACEA,IACCkD,IAAWvJ,EACR,CAAEyJ,QAAShK,EAAE,wDACbiK,GAENR,YAAaA,Q,mCCnEvB,kEAUA,MAAMS,EAAmBlK,GAAiB,IAAM,CAC9C,CAAEC,MAAOD,EAAE,sBAAuBE,UAAW,OAAQC,WAAY,CAAC,MAClE,CAAEF,MAAOD,EAAE,uBAAwBE,UAAW,QAASC,WAAY,CAAC,MACpE,CAAEF,MAAOD,EAAE,qBAAsBE,UAAW,MAAOC,WAAY,CAAC,MAChE,CAAEF,MAAOD,EAAE,oBAAqBE,UAAW,KAAMC,WAAY,CAAC,MAC9D,CAAEF,MAAOD,EAAE,uBAAwBE,UAAW,YAAaC,WAAY,CAAC,MACxE,CAAEF,MAAOD,EAAE,6BAA8BE,UAAW,MAAOC,WAAY,CAAC,MACxE,CAAEF,MAAOD,EAAE,yBAA0BE,UAAW,SAAUC,WAAY,CAAC,OAGnEsJ,EAAe3K,IAAQ,CAC3BsC,GAAItC,EAAIuJ,KAGJ8B,EAA4D,EAAGrL,IAAKsJ,MACxE,MAAM,GAAEC,EAAE,IAAE+B,EAAG,MAAErB,EAAK,KAAE3J,EAAI,IAAEiL,EAAG,UAAEC,EAAS,OAAEC,GAAWnC,EACzD,OACE,gCACE,gBAAC,IAAS,KAAEhJ,GACZ,gBAAC,IAAS,KAAE2J,GACZ,gBAAC,IAAS,KAAEsB,EAAM,gBAAC,IAAuB,MAAM,gBAAC,IAAkB,OACnE,gBAAC,IAAS,KAAEhC,GACZ,gBAAC,IAAS,KAAEiC,E,SACZ,gBAAC,IAAS,KAAEF,GACZ,gBAAC,IAAS,KAAEG,KAoCH,IAzB6C,EAAGzL,IAAKyB,EAAMqG,YAAWkD,aACnF,MAAM,EAAE9J,GAAM,2BACRwK,EAAO,YAAYjK,GACzB,OACE,uBAAKF,UAAU,aACb,uBAAKA,UAAU,mBACb,gBAAC,IAAK,CACJ0D,KAAMyG,EAAI,aACExK,EAAE,sCACdsB,OAAQ4I,EAAgBlK,GACxBuB,IAAK4I,EACLL,OAAQA,EACRlD,UACEA,IACCkD,IAAWvJ,EACR,CAAEyJ,QAAShK,EAAE,wDACbiK,GAENR,YAAaA,Q,mCC/DvB,mHAqDe,IAvCuD,EACpE3K,MACAkJ,WACAC,QACAC,mBACA4B,a,MAEA,MAAMrJ,EAAU,YAAe3B,EAAKkJ,GAC9BvI,EAAO,YAAegB,EAASwH,GAE/BwC,EAAU,CACd3L,MACA2B,UACAhB,OACAe,gBALsB,YAAoB0H,EAAgC,QAAd,EAAAzI,aAAI,EAAJA,EAAMqE,gBAAQ,eAAE1E,MAM5E0K,UAGIY,EAAY,CAAC,CAAEC,KAAM,KAAc,CAAEA,KAAM,MAC3CC,EAAY,CAAC,CAAED,KAAM,KAAe,CAAEA,KAAM,MAC5CE,EAAa,CAAC,CAAEF,KAAM,MAE5B,OACE,gBAAC,IAA8BG,SAAQ,CAACtI,MAAOiI,GAC7C,gBAAC,UAAS,KACR,gBAAC,UAAa,CAACC,UAAWA,EAAWE,UAAWA,EAAWC,WAAYA,Q,mCCvC/E,wIA8De,IA/CiC,KAC9C,MAAM,EAAE7K,GAAM,4BACR,IAAElB,EAAG,QAAE2B,EAAO,KAAEhB,GAAS,aAAiB,KAC1CsL,EAAW,aAAQjM,GACnBkM,EAAW,gBAAC,IAAQ,CAAClK,SAAU,aAAQrB,KACvCwL,EAAW,gBAAC,IAAiB,CAACxK,QAASA,EAAShB,KAAMA,IAE5D,OACE,gBAAC,IAAI,CAACyL,aAAW,EAACC,cAAY,GAC5B,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,OAAI,CACHC,GAAO,aACL,IACA,aAAQvM,GACR,aAAaA,IAHX,YAMHkB,EAAE,4BAITsL,aAAa,EACbjL,UAAW,8BAGb,gBAAC,IAAS,KAAEL,EAAE,2BAEhB,gBAAC,IAAQ,KACP,gBAAC,UAAW,KACV,gBAAC,IAAkB,CAACC,MAAOD,EAAE,2BAA4BuL,WAAW,GACjER,GAEH,gBAAC,IAAkB,CAAC9K,MAAOD,EAAE,sBAAuBuL,WAAW,GAC5DN,GAEH,gBAAC,IAAkB,CAAChL,MAAOD,EAAE,sBAAuBuL,WAAW,GAC5DP,Q,mCCtDb,2JA4BA,MAAMQ,EAAmC,CAAEC,QAAQ,EAAMnM,KAAM,aAAWA,KAAMoM,KAAM,UAEhFC,EAAwB,CAC5BrM,EACAF,EACAyB,EACAqF,IAEA9G,GACA,IAAU8G,EAAM0F,eAAgB,CAC9BtM,OACAF,OACAyB,cAGEgL,EAAmB,CACvBtL,EACAE,EACAyF,IAEAyF,EAAsB,IAAmBrM,KAAM,aAAQiB,GAAO,aAAaA,GAAO2F,IAClFyF,EAAsB,eAAarM,KAAM,aAAQmB,GAAU,aAAaA,GAAUyF,IAClFyF,EAAsB,YAAUrM,KAAM,aAAmBmB,GAAU,KAAMyF,GAgF5D,gBAzE+B,EAC5C4F,mBACAC,uBACApG,gBAEA,MAAM,EAAE3F,GAAM,4BACR,IAAElB,EAAG,QAAE2B,GAAY,aAAiB,KAC1C,YAAgB,KACdqL,EAAiBN,GACV,KACLO,EAAqBP,KAEtB,CAACM,EAAkBC,IAEtB,MAAM/G,EAnBoB,EAC1BzE,EACAE,IACoC,IAAUoL,EAAkBtL,EAAME,GAgBvDuL,CAAoBlN,EAAK2B,GAElC4G,EAAa,YAAsBvI,GACnCmN,EAAa,YAAuBnN,GAE1C,OACE,gBAAC,IAAI,CAACuB,UAAU,6BAA6B6K,aAAW,EAACC,cAAY,GACnE,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,OAAI,CACHC,GAAO,aACL,IACA,aAAQvM,GACR,aAAaA,IAHX,WAMHkB,EAAE,+BAITsL,aAAa,EACbjL,UAAW,8BAGb,gBAAC,IAAS,kBAEZ,gBAAC,UAAY,KACX,uBAAKA,UAAU,mCAAiC,WAChD,uBAAKA,UAAU,kCACZgH,EACC,gBAAC,WAAQ,CAAChF,UAAW,MACnB,gBAAC,UAAY,KACVrC,EAAEiM,EAAWC,UACd,gBAAC,KAAY,CACX5M,KAAM,IAAmBA,KACzBF,KAAM,aAAQN,GACd+B,UAAW,aAAa/B,OAK9B,gBAAC,WAAQ,KACP,uBAAKuB,UAAU,kBACZL,EAAE,qDAKX,gBAAC,mBAAgB,CACfmM,OAAQxG,EAAUwG,OAClBnH,OAAQA,S,mCC3HlB,mKAiBA,MAAMoH,EAA6B,KACjC,MAAM,KAAE3M,EAAI,OAAEqK,GAAW,aAAiB,KACpChJ,EAAW,YAAQrB,GAEnB4M,EAAc,UAClB,IACEvC,GAAUhJ,EACN,CACE2K,QAAQ,EACRnM,KAAM,WAASA,KACfgN,cAAe,iBAAiBxL,GAElC,KACN,CAACA,EAAUgJ,KAGNhH,EAAMyJ,EAAYC,GAAa,YAA+BH,GAErE,IAAKvL,IAAagJ,EAChB,OAAO,gBAAC,UAAa,CAAC7J,MAAO,WAASwM,MAAO5D,MAAO,EAAG0C,WAAYzB,IAGrE,MAAM4C,EAAc,gCAAsB,YAAW5L,GAApC,QAEjB,OACE,gBAAC,wBAAqB,CACpB6E,UAAW7C,EACX4J,SAAUA,EACVC,OAAQ,qBACRrN,KAAM,WACNiM,WAAYgB,EACZK,QAASJ,KAqEA,IAhEiB,KAC9B,MAAM,EAAExM,GAAM,4BACR,IAAElB,GAAQ,aAAiB,KAE3B+B,EAAY,YAAa/B,GACzBiM,EAAW,YAAQjM,GAEnB+N,EAAoB,cACxB,EAAGhL,cACD,gBAAC,OAAI,CAACwJ,GAAO,gCAAsB,IAAoBN,EAAUlK,GAAvD,SACPgB,GAGL,CAACkJ,EAAUlK,IAGPiM,EAAqB,cACzB,EAAGjL,cACD,gBAAC,OAAI,CAACwJ,GAAO,gCAAsB,IAAoBN,EAAUlK,GAAvD,UACPgB,GAGL,CAACkJ,EAAUlK,IAGb,OACE,gBAAC,IAAI,KACH,gBAAC,IAAU,KACT,gBAAC,IAAS,KAAEb,EAAE,6BAEhB,gBAAC,IAAQ,KACP,gBAAC,IAAK,CAACkH,WAAS,GACd,gBAAC,IAAS,KACR,gBAACkF,EAAgB,OAEnB,gBAAC,IAAS,KACR,gBAAC,UAAa,CACZnM,MAAOD,EAAE,sBACTuL,WAAYzM,EACZ+J,MAAO,YAAe/J,GAAK+D,OAC3BkK,eAAgBD,KAGpB,gBAAC,IAAS,KACR,gBAAC,UAAa,CACZ7M,MAAOD,EAAE,qBACTuL,WAAYzM,EACZ+J,MAAO,YAAY/J,GAAK+D,OACxBkK,eAAgBF,KAGpB,gBAAC,IAAS,KACR,gBAAC,UAAa,CACZ5M,MAAOD,EAAE,qBACTuL,WAAYzM,EACZ+J,MAAO,YAAW/J,GAAK+J,c,mCC5GrC,kRAsKe,gBApG+B,EAC5CmE,cACAC,kBACAC,yBAEA,MAAM,EAAElN,GAAM,4BACR,IAAElB,EAAG,QAAE2B,EAAO,KAAEhB,EAAI,gBAAEe,GAAoB,aAAiB,KAEjE,YAAgB,KACdwM,IACO,IAAMC,KACZ,CAACD,EAAaC,IAEjB,MAAMzN,EAAS,YAAc,CAAEe,KAAMzB,EAAK2B,UAAShB,OAAMe,oBAEnD2M,EAhC2B,CAACrO,IAClC,MAAM,OAAEU,EAAM,SAAE0M,GAAa,YAAuBpN,GAEpD,OAAO,IAA2B6C,SAASnC,GACvC,CACE4N,MAAO,IAAYC,MACnBnB,YAEF,CACEA,SAAU,GACVkB,MAAO,IAAYE,KAsBRC,CAA2BzO,IAEtC,KAAEiF,EAAI,OAAE+F,EAAM,UAAElD,GAAcsG,GAAsB,GACpDM,EAAS,UAAc,IArBV,CAACA,GACpBA,EAAOxI,OAAQyI,GAAU,IAAMA,EAAO,mBAoBHC,CAAa3J,GAAO,CAACA,IAElD4J,EAAe,YAAmB7O,GAClC4C,EAAoB,YAAyB5C,GAC7C2C,EAAc,YAAmB3C,GACjC8O,EAAmB,YAA0B9O,GAEnD,OACE,gBAAC,IAAI,CAACuB,UAAU,8BACd,gBAAC,IAAU,KACT,gBAAC,IAAS,gBAEZ,gBAAC,IAAQ,KACP,gBAAC,UAAU,KACT,gBAAC,IAAO,CAACA,UAAU,6BAA6B6G,WAAS,GACvD,gBAAC,IAAW,CAAC7G,UAAU,2BACrB,gBAAC,IAAmB,iBACdb,EAAM,CACVgB,gBAAiBA,EACjBD,KAAMzB,EACNuB,UAAU,yBAGd,gBAAC,IAAW,KACV,gBAAC,UAAU,CACTJ,MAAOD,EAAE,0BACToN,MAAOD,EAASC,MAChBS,QAAS7N,EAAEmN,EAASjB,cAGtB,IAAwBvK,SAASD,IACjC,gBAAC,IAAW,KACRiM,EAMA,gBAAC,IAAiB,CAChB1N,MAAO2N,EAAmB5N,EAAE,iCAAmCyB,EAC/DO,KACE4L,EACE,gBAAC,IAAa,MAEd,gBAAC,IAA4B,CAACnM,YAAaA,IAG/CpB,UAAU,uBAdZ,gBAAC,UAAU,CACTJ,MAAOD,EAAE,qCACToN,MAAO,IAAYU,mBAmB/B,gBAAC,UAAU,CAAClB,OAAQ,IAAUhG,KAC1B+G,GACA,gBAAC,aAAU,CACTI,KAAM,IACN/D,QAAShK,EAAE,IAA6B,OAExC,gBAAC,OAAI,CACHqL,GAAO,aACL,IACAvM,EAAIgF,SAAS1E,KACbN,EAAIgF,SAASjD,WAHX,mBAIc,oBAMvBiJ,GAA4B,IAAlB0D,EAAO3K,OACd2K,EAAOxM,IAAKyM,GACV,gBAAC,UAAS,CAACtM,IAAK,YAASsM,EAAOA,EAAMO,KAAK5M,IAAKqM,MAAOA,KAEzD,W,2DC/Jd,0IAgLe,IAtJmB,KAChC,MAAM,EAAEzN,GAAM,4BACR,QAAES,GAAY,aAAiB,KAC/BK,EAAW,aAAmBL,GAE9BwN,EAAU,UAAc,IAAM,YAAsBnN,GAAW,CAACA,IAChEoN,EAAmB,UAAc,IAAM,YAA+BpN,GAAW,CACrFA,IAGIqN,EAAe,cAClBC,IAAM,CACL1F,OAAQ,GAAG0F,EACX5L,MAAO4L,EACPC,KAAM,KAER,IAGIC,EAAa,cACjB,EAAGC,cACD,MAAMC,EAAqB,YAAsB1N,GACjD,OACE,gBAAC,IAAe,CACdb,MAAOD,EAAE,qBACTuO,QAASA,EACTE,SAAU,KACVC,UAAW,CACT,CACEC,MAAOH,EAAmB,IAAUI,iBACpC7F,MAAO,eACP8F,OAAQ,aAEV,CACEF,MAAOH,EAAmB,IAAUM,aACpC/F,MAAO,WACP8F,OAAQ,WAMlB,CAAC/N,EAAUd,IAGP+O,EAAa,cACjB,EAAGR,cACD,MAAMC,EAAqB,YAAsB1N,GACjD,OACE,gBAAC,IAAe,CACdb,MAAOD,EAAE,wBACTuO,QAASA,EACTE,SAAU,KACVC,UAAW,CACT,CACEC,MAAOH,EAAmB,IAAUQ,oBACpCjG,MAAO,eACP8F,OAAQ,aAEV,CACEF,MAAOH,EAAmB,IAAUS,gBACpClG,MAAO,WACP8F,OAAQ,WAMlB,CAAC/N,EAAUd,IAGPkP,EAAiB,cACrB,EAAGX,cACD,MAAMC,EAAqB,YAAsB1N,GACjD,OACE,gBAAC,IAAe,CACdb,MAAOD,EAAE,4BACTuO,QAASA,EACTE,SAAU,KACVC,UAAW,CACT,CACEC,MAAOH,EAAmB,IAAUW,qBACpCpG,MAAO,eACP8F,OAAQ,aAEV,CACEF,MAAOH,EAAmB,IAAUY,iBACpCrG,MAAO,WACP8F,OAAQ,WAMlB,CAAC/N,EAAUd,IAGb,OACE,gBAAC,IAAI,CAACkL,aAAW,EAACC,cAAY,GAC5B,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,8BAA2B,OAGhCE,aAAa,EACbjL,eAAW4J,IAGb,gBAAC,IAAS,KAAEjK,EAAE,+BAEhB,gBAAC,UAAe,KACd,gBAAC,IAAyB,CACxBC,MAAOD,EAAE,qBACTqP,iBAAkBpB,EAAQ,IAAUqB,iBAAiBC,YACrDC,cAAe,KACfC,mBAAoBnB,IAEtB,gBAAC,IAAyB,CACxBrO,MAAOD,EAAE,wBACTqP,iBAAkBpB,EAAQ,IAAUyB,oBAAoBH,YACxDI,WAAY1B,EAAQ,IAAUyB,oBAAoBE,MAClDJ,cAAe,KACfK,aAAc,IAAcC,YAC5BL,mBAAoBV,IAEtB,gBAAC,IAAyB,CACxB9O,MAAOD,EAAE,4BACTqP,iBAAkBpB,EAAQ,IAAU8B,qBAAqBR,YACzDI,WAAY1B,EAAQ,IAAU8B,qBAAqBH,MACnDJ,cAAe,KACfK,aAAc,IAAcC,YAC5BL,mBAAoBP,IAEtB,gBAAC,IAAkC,CACjCjP,MAAOD,EAAE,kCACTiO,QAASC,EAAiB,IAAU8B,qBACpCR,cAAe,OAEjB,gBAAC,IAAyB,CACxBvP,MAAOD,EAAE,2BACTqP,iBAAkBpB,EAAQ,IAAUgC,gBAAgBV,YACpDC,cAAerB,Q,mCCzKzB,4IAGY+B,EAHZ,gBAGA,SAAYA,GACV,oCACA,0CACA,8BACA,4CACA,gCACA,kDACA,oDACA,4CACA,kCACA,kCACA,kCAGA,4BACA,kCACA,oCACA,oCACA,0CACA,4CAnBF,CAAYA,MAAS,KAsBrB,MAAMC,EAAwB,CAC5B,CAACD,EAAUZ,iBAAkB,IAAW,uDACxC,CAACY,EAAUR,oBAAqB,IAAW,qDAC3C,CAACQ,EAAUE,cAAe,IAAW,uDACrC,CAACF,EAAUH,qBAAsB,IAC/B,4LAEF,CAACG,EAAUG,eAAgB,IACzB,8FAEF,CAACH,EAAUI,wBAAyB,IAClC,yEAEF,CAACJ,EAAUK,yBAA0B,IACnC,0EAEF,CAACL,EAAUD,gBAAiB,IAAW,4CACvC,CAACC,EAAUpB,aAAc,IACvB,2IAEF,CAACoB,EAAUtB,iBAAkB,IAC3B,sIAEF,CAACsB,EAAUjB,gBAAiB,IAC1B,6HAEF,CAACiB,EAAUlB,oBAAqB,IAC9B,wHAEF,CAACkB,EAAUd,iBAAkB,IAC3B,4IAEF,CAACc,EAAUf,qBAAsB,IAC/B,wIAUEqB,EAAW,CAAC/Q,EAAckP,IAAsCA,EAAM,CAAElP,SAEjEgR,EAAyB3P,IAA+C,CACnF,CAACoP,EAAUZ,iBAAkB,CAC3BC,YAAaiB,EAAS1P,EAAUqP,EAAsBD,EAAUZ,mBAElE,CAACY,EAAUR,oBAAqB,CAC9BH,YAAaiB,EAAS1P,EAAUqP,EAAsBD,EAAUR,qBAChEE,MAAOY,EAAS1P,EAAUqP,EAAsBD,EAAUE,gBAE5D,CAACF,EAAUH,qBAAsB,CAC/BR,YAAaiB,EAAS1P,EAAUqP,EAAsBD,EAAUH,sBAChEH,MAAOY,EAAS1P,EAAUqP,EAAsBD,EAAUG,iBAE5D,CAACH,EAAUD,gBAAiB,CAC1BV,YAAaiB,EAAS1P,EAAUqP,EAAsBD,EAAUD,oBAIvDS,EAAkC5P,IAAqB,CAClE,CAACoP,EAAUF,qBAAsB,CAC/B,CACErB,MAAO6B,EAAS1P,EAAUqP,EAAsBD,EAAUI,yBAC1DK,KAAM,MAER,CACEhC,MAAO6B,EAAS1P,EAAUqP,EAAsBD,EAAUK,0BAC1DI,KAAM,UAgBCC,EAAyB9P,IAAoC,CACxE,CAACoP,EAAUpB,aAAc0B,EAAS1P,EAAUqP,EAAsBD,EAAUpB,cAC5E,CAACoB,EAAUtB,iBAAkB4B,EAAS1P,EAAUqP,EAAsBD,EAAUtB,kBAChF,CAACsB,EAAUjB,gBAAiBuB,EAAS1P,EAAUqP,EAAsBD,EAAUjB,iBAC/E,CAACiB,EAAUlB,oBAAqBwB,EAC9B1P,EACAqP,EAAsBD,EAAUlB,qBAElC,CAACkB,EAAUd,iBAAkBoB,EAAS1P,EAAUqP,EAAsBD,EAAUd,kBAChF,CAACc,EAAUf,qBAAsBqB,EAC/B1P,EACAqP,EAAsBD,EAAUf,yB,mCC1HpC,6KAiCA,MAAM0B,EAAmB,CACvBtQ,EACAuQ,EACAC,EACAC,K,cAC+B,OAC/B5R,KAAM,aAAQmB,IAAS,GACvB4D,WAAY,YAAkB5D,IAAS,GACvCqD,SAAU,YAAkBkN,IAAW,GACvCjN,SAAU,YAAkBiN,IAAW,GACvCzM,+BAAgC,YAAsC9D,KAAS,EAC/E6D,eAAgB,YAAsB7D,IAAS,GAC/C+D,OAAQ,YAAa/D,KAAS,EAC9BgE,YAAa,YAAmBhE,IAAS,GACzCiE,uBAAuBuM,OACF,QAAf,EAAU,QAAV,EAAAxQ,aAAI,EAAJA,EAAMqE,YAAI,eAAEC,WAAG,eAAElF,aAA4B,QAAf,EAAU,QAAV,EAAAY,aAAI,EAAJA,EAAMqE,YAAI,eAAEC,WAAG,eAAEC,kBAAmBkM,GAExEvM,UAAoB,QAAV,EAAAlE,aAAI,EAAJA,EAAMqE,YAAI,eAAEH,WAAY,SA+JrB,IAtJ2C,EACxD5D,YACAzB,OACA4R,sB,QAEA,MAAM,EAAEhR,GAAM,2BACRiR,EAAc,UAClB,IACE7R,EACI,CACEE,KAAM,aAAkB,KACxBuB,YACAzB,aAEF6K,EACN,CAAC7K,EAAMyB,IAEHqQ,EAAe,UACnB,IACG9R,OAMG6K,EALA,CACE3K,KAAM,aAAkB,KACxBuB,YACA4K,QAAQ,GAGhB,CAACrM,EAAMyB,KAEFN,EAAM4Q,EAAYC,GAAa,YAAuCH,IACtEI,EAAOC,EAAaC,GAAc,YAAyCL,GAE5EpM,EAAiC,QAAf,EAAU,QAAV,EAAAvE,aAAI,EAAJA,EAAMqE,YAAI,eAAEC,WAAG,eAAEC,gBACnC0M,EAAiB,UACrB,IACE1M,EACI,CACExF,KAAM,cAAYA,KAClBuB,YACAzB,KAAM0F,QAERmF,EACN,CAACnF,EAAiBjE,KAEbiQ,EAAQW,EAAcC,GAAe,YAAgCF,IAErEG,EAAQC,GAAa,YAAwB,GACpD,YAAgB,KACVD,GACFC,GAAU,IAEX,CAACD,EAAQC,IAEZ,MAAMC,EAAc,YAA+BtR,EAAM,CAAC4Q,EAAYQ,IAChEG,EAAgB,YAAwBhB,EAAQ,CAACW,EAAcE,IAErE,GAAIvS,GAAQ+R,GAAeK,IAAkBC,GAAyBH,EACpE,OAAO,gBAAC,IAAU,MAGpB,GAAIF,GAAaM,GAAeH,EAC9B,OAAO,gBAAC,IAAS,CAAC9E,MAAOzM,EAAE,6BAG7B,MAAM+R,EAAa3S,EAA4B,GAArBiS,EAAMrQ,IAAI,MAE9BgR,EAAgBnB,EAAiBtQ,EAAMuQ,IAAU1R,EAAM4R,GACvDiB,EAAoBpB,EAAiBgB,EAAaC,IAAiB1S,EAAM4R,GAEzEkB,IACHpN,GAAmB,IAAUgN,IAC7B,IAAUD,IACV,IAAUI,EAAmBD,IAE1BG,EAA0B,OAAS,EAAG3N,2BAC1C,WAAa4N,MAAM,CACjBhT,KAAM,UACHiT,KACC,cACArS,EAAE,mDACDwC,IAAWuP,EAAUpQ,SAASa,IAEhC8P,OAAO,YAAqBtS,IAC/BmE,WAAYK,EACR,WACG+N,QACC,IACAvS,EAAE,4DAEHwS,SAASxS,EAAE,iCACdiK,EACJrG,SAAUY,EACN,WAAagO,SAASxS,EAAE,iCACxBiK,EACJpG,SAAUW,EACN,WAAagO,SAASxS,EAAE,iCACxBiK,EACJ7F,eAAgB,WACbmO,QAAQ,IAAWvS,EAAE,6DACrBwS,SAASxS,EAAE,+BA0BZ+Q,IAAc3R,EAEpB,OACE,gBAAC,IAAM,CACL4S,cAAeA,EACfS,qBAAsBrT,GAAQuS,EAC9BjK,SA5BiB,CACnBgL,EACAtH,KAEA,MAAMuH,EAAO,OAAH,wBAAQD,GAAM,CAAE7R,cAS1B,OARgBzB,EACZ,YACE,IAAUyS,GAAetR,EAAOsR,EAChC,IAAUC,GAAiBhB,EAASgB,EACpCa,GAEF,YAAoBA,IAGrBC,KAAK,KACJ,KAAQhR,KAAK,aAAsB,IAAoB8Q,EAAOtT,KAAMyB,MAErEgS,MAAOjG,IACNxB,EAAQ0H,UAAU,CAAEC,YAAanG,EAAM5C,aAWzCgJ,QAAS,IAAMpB,GAAU,GACzBqB,iBAAkBd,EAClBe,gBAAiBnC,EACjBoC,eACEpC,EACIxL,OAAO6N,KAAKpB,GAAeqB,OAAO,CAACC,EAAKC,KACtCD,EAAIC,IAAQ,EACLD,GACN,SACHrJ,GAGJ7J,GACA,gBAAC,IAAoB,iBAAKA,EAAK,CAAE2Q,UAAWA,EAAWmB,YAAaA,Q,mCCzM5E,oEAAO,MAAMsB,EAAqB1C,GAChCA,GAAUA,EAAO/M,MAAQ0P,KAAK3C,EAAO/M,KAAKH,UAC/B8P,EAAqB5C,GAChCA,GAAUA,EAAO/M,MAAQ0P,KAAK3C,EAAO/M,KAAKF,W,mCCJ5C,yDAGO,MAAM8P,EAAuB,CAAC3T,EAA+B4T,EAAY,MAC9E,WAEGrB,QAAQ,IAAqB,CAC5BvI,QAAShK,EACP,kJAEF6T,oBAAoB,IAErBC,IACCF,EAEA5T,EAAE,qEAAsE,CACtE+T,eAAgBH,KAGnBpB,SAASxS,EAAE,4B,mCCpBhB,4DAiJe,IA5HmD,EAChEgU,SACAC,eACAC,cACA1U,SACA2U,eACAC,QACArD,YACAmB,cACAQ,aAEA,MAAM,EAAE1S,GAAM,2BACd,OACE,gBAAC,IAAI,CAAC0H,SAAUuM,GACd,gBAAC,KAAU,CACThQ,KAAM,IAAemF,KAAI,eACZ,qCACbhK,KAAK,OACLqN,MAAOzM,EAAE,sBACTqU,YAAY,mBACZC,SAAUtU,EAAE,oEACZwS,UAAQ,EACR+B,WAAYxD,IAEd,gBAAC,KAAa,gBACC,4CACb3R,KAAK,cACLqN,MAAOzM,EAAE,+BAEX,gBAAC,IAAe,gBACD,yCACbZ,KAAK,WACLqN,MAAOzM,EAAE,2BACTe,QAAS,CACP,CACEyB,MAAO,OACPiK,MAAO,QAET,CACEjK,MAAO,iBACPiK,MAAO,kBAET,CACEjK,MAAO,SACPiK,MAAO,aAIb,gBAAC,KAAU,CACTxI,KAAM,IAAemF,KAAI,eACZ,iDACbhK,KAAK,iBACLqN,MAAOzM,EAAE,kCACTsU,SAAUtU,EACR,8GAEFwS,UAAQ,IAEV,gBAAC,IAAa,gBACC,kDACbpT,KAAK,wBACLqN,MAAOzM,EAAE,yCACTsU,SAAUtU,EACR,mNAGH0S,EAAOlO,uBACN,gCACE,gBAAC,KAAU,CACTP,KAAM,IAAemF,KAAI,eACZ,4CACbhK,KAAK,aACLqN,MAAOzM,EAAE,4DACTsU,SAAUtU,EACR,kGAEFwS,UAAQ,IAEV,gBAAC,IAAa,gBACC,iEACbpT,KAAK,iCACLqN,MAAOzM,EAAE,kDACTsU,SAAUtU,EACR,uPAGJ,gBAAC,KAAU,CACTiE,KAAM,IAAemF,KAAI,eACZ,yCACbhK,KAAK,WACLqN,MAAOzM,EAAE,8BACTwS,UAAQ,IAEV,gBAAC,KAAU,CACTvO,KAAM,IAAeJ,SAAQ,eAChB,yCACbzE,KAAK,WACLqN,MAAOzM,EAAE,8BACTwS,UAAQ,KAERzB,GACA,gBAAC,KAAW,CACV3R,KAAK,SAAQ,eACA,wCACbqN,MAAOzM,EAAE,iDAKjB,gBAAC,IAAU,CACTmU,aAAcA,EACdD,YAAahC,GAAegC,EAC5BM,aAAc,KAAQC,OACtBC,YAAyB1U,EAAZ+Q,EAAc,qBAA0B,wBACrDzJ,aAAc9H,GAAUA,EAAOuT,YAC/B4B,cAAeR,IAAiBC,IAAU,IAAUJ,GACpDY,UAAW5U,EAAE,kDACb6U,YAAa7U,EAAE,wDACf8U,UAAW5C,O,kCC3InB,6VAMA,MAAM6C,EAA0B,CAC9B,CAAC,IAAqBC,YAAa,CAAC,UAAW,aAC/C,CAAC,IAAqB3H,OAAQ,CAAC,mBAAoB,UACnD,CAAC,IAAqB4H,UAAW,CAAC,cAAe,WACjD,CAAC,IAAqBC,MAAO,CAAC,YAG1BC,EAA2B,CAC/B,CAAC,IAAqBH,YAAa,CAAC,SACpC,CAAC,IAAqB3H,OAAQ,CAAC,QAC/B,CAAC,IAAqB4H,UAAW,CAAC,YAG9BG,EAA0B,CAC9B,CAAC,IAAqBJ,YAAa,CAAC,YAAa,SACjD,CAAC,IAAqBC,UAAW,CAAC,YAClC,CAAC,IAAqB5H,OAAQ,CAAC,WAG3BgI,EAA4B,CAChC,CAAC,IAAqBL,YAAa,CAAC,SACpC,CAAC,IAAqBC,UAAW,CAAC,cAG9BK,EAA0B,CAC9B,CAAC,IAAqBN,YAAa,CAAC,SACpC,CAAC,IAAqBC,UAAW,CAAC,WAClC,CAAC,IAAqB5H,OAAQ,CAAC,UAGpBkI,EAAkB,CAAC5P,EAAW6P,EAAS7I,EAAQ8I,KAC1D,MAAMC,EAAS,CACb,CAAC,IAAqBC,SAAU,CAC9BC,UAAW,GACX/M,MAAO,IAmBX,OAhBAtD,OAAO6N,KAAKoC,GAASpQ,QAASjE,IAC5BuU,EAAOvU,GAAO,CACZyU,UAAW,IAAIJ,EAAQrU,IACvB0H,MAAO,EACP4M,gBAIJ9P,EAAUP,QAASmB,IACjB,MAAM/G,EAASmN,EAAOpG,GAChBsP,EACJtQ,OAAO6N,KAAKoC,GAASM,KAAM3U,GAAQqU,EAAQrU,GAAKQ,SAASnC,KACzD,IAAqBmW,QACvBD,EAAOG,GAAOhN,UAGT6M,GAGIK,EAAyCpQ,GACpD4P,EAAgB5P,EAAWoP,EAAyB,KAAuB,cAChEiB,EAA0CrQ,GACrD4P,EAAgB5P,EAAW0P,EAA2B,IAAY,eACvDY,EAAyCtQ,GACpD4P,EAAgB5P,EAAWwP,EAA2Be,GAAQA,EAAI1W,OAAOsC,MAAO,cACrEqU,EAAwCxQ,GACnD4P,EAAgB5P,EAAWyP,EAA0BgB,GAAOA,EAAG5W,OAAOsC,MAAO,aAClEuU,EAAwC1Q,GACnD4P,EAAgB5P,EAAW2P,EAAyB,IAAsB,oB,kCCvE5E,qDAsCe,UAhCuC,KACpD,MAAM,EAAEtV,GAAM,2BACRsW,EAAW,yBACX,KAAElX,EAAMqG,GAAI5E,GAAc,sBAC1BmQ,EAAkB,IAAIuF,gBAAgBD,EAASE,QAAQC,IAAI,aAE3D1F,IAAc3R,EACda,EACFD,EADU+Q,EACR,qCACA,qCACN,OACE,gCACE,gBAAC,IAAM,KACL,6BAAQ9Q,IAEV,uBAAKI,UAAU,mCAGb,sBAAIA,UAAU,mDACZ,uBAAKA,UAAU,mBAAmBJ,KAElC8Q,GACA,qBAAG1Q,UAAU,0BACVL,EAAE,sFAGP,gBAAC,IAAgB,CAACa,UAAWA,EAAWzB,KAAMA,EAAM4R,gBAAiBA,Q,kCChC7E,8FAOA,MAAM0F,UAAqB,KACzB,YAAYtW,GACVuW,MAAMvW,GACNwW,KAAKC,QAAUD,KAAKC,QAAQC,KAAKF,MACjCA,KAAKG,QAAUH,KAAKxW,MAAMqH,OAAOqP,KAAKF,MAGxC,QAAQ1Q,GACNA,EAAMyB,iBAENiP,KAAKrP,cACHqP,KAAKxW,MAAM4W,UAAU,KAAM,CACzBC,sBAAsB,KAExBrE,KAAKgE,KAAKxW,MAAMoH,OAGpB,SACE,MAAM,MACJvH,EAAK,SACLiM,EAAQ,QACRlC,EAAO,WACPkN,EAAU,QACVC,EAAO,WACPC,EAAU,WACVC,EAAU,cACVC,EAAa,aACbC,GACEX,KAAKxW,MAET,OACE,gBAAC,cAAW,KACRJ,GACA,wBAAM0H,SAAUkP,KAAKC,QAASzX,KAAK,OAAOiB,UAAU,iBAClD,gBAAC,IAAU,KAAE6L,EAAWlM,EAAEkM,GAAYjM,GACtC,gBAAC,IAAS,KAAEiX,EAAalX,EAAEkX,GAAclN,GACzC,gBAAC,IAAiB,CAChB1C,aAAcsP,KAAKxJ,MAAM9F,aACzBD,WAAYuP,KAAKxJ,MAAM/F,WACvBU,WAAYqP,EAAapX,EAAEoX,GAAcD,GAAWnX,EAAE,WACtDyH,OAAQmP,KAAKG,QACbM,WAAYC,EAAgBtX,EAAEsX,GAAiBD,GAAcrX,EAAE,UAC/DuX,aAAcA,OAQ5Bb,EAAac,UAAY,CACvBL,QAAS,OACTC,WAAY,SACZ3P,OAAQ,OAAegQ,WACvBJ,WAAY,OACZC,cAAe,SACf9P,MAAO,OAAeiQ,WACtBT,UAAW,OAAeS,WAC1BzN,QAAS,OACTkN,WAAY,SACZjX,MAAO,OACPiM,SAAU,SACVqL,aAAc,QAGT,MAAMG,EAAe,YAAoBhB,I,kCCxEhD,+IAgCA,MAAMiB,EAAoBhS,IAOxB,GAJe,IAAQA,EAAYY,GACjCA,EAASqR,SAAWrR,EAASuD,SAAW,IAAUvD,EAASK,WAAaL,EAASuD,QAGvE,CACV,MAAM,MAAEuH,EAAK,SAAErJ,EAAQ,YAAE6P,EAAW,MAAE5P,EAAK,iBAAEC,GAAqBvC,EAC5DmS,GAAYzG,aAAK,EAALA,EAAOtN,OAAQ,GAC3BgU,GAAe/P,aAAQ,EAARA,EAAUjE,OAAQ,GAEjCiU,EAAyB,aAAa9P,EAAkB,KACxD+P,EAAqB,aAAahQ,EAAO,MACzCiQ,EAAkB,aAAaL,GAErC,OAAOC,EAAU9W,IACdT,IAGC,MAAME,EAAU,YAAeF,EAAMwX,GAC/BtY,EAAOwY,EAAmB,aAAQxX,IAClCD,EAAkBwX,EAAuB,aAAQvY,IACjD0Y,EAAe,YAA0B1X,GACzCC,EAAayX,GAAgBD,EAAgBC,EAAajZ,KAE1DM,EAAS,YAAc,CAAEe,OAAME,UAAShB,OAAMe,oBAGpD,MAAO,CACLsD,SAAU,CAAE1E,KAAM,aAAQmB,IAC1BA,OACAE,UACAhB,OACAe,kBACAE,aACAlB,YAKR,MAAO,IAOH4Y,EAAiB,EAAGvX,YAAWb,QAM5B,CACLqY,MANiB,CACjBC,OAAQtY,EAAE,iCACVuY,KAAMvY,EAAE,gCAKRwY,WAAaC,IACX,MAAMC,EAAO,WAAW7X,GAAa,aAAa,aAAkB,OAEpE,OAAQ4X,GACN,IAAK,SACH,OAAUC,EAAH,aACT,IAAK,OACL,QACE,OAAUA,EAAH,YA4DF,UAtDgDtY,IAC7D,MAAM,EAAEJ,GAAM,4BACP+I,GAAS,eACV,UAAElI,GAAcT,EAChBuF,EAAgC,CACpC,CACErG,KAAM,aAAkB,KACxBqZ,YAAY,EACZjN,KAAM,SAER,CACEpM,KAAM,aAAkB,gBACxBqZ,YAAY,EACZjN,KAAM,YAER,CACEpM,KAAM,aAAkB,mBACxBqZ,YAAY,EACZlN,QAAQ,EACRC,KAAM,eAER,CACEpM,KAAM,YAAUA,KAChBqZ,YAAY,EACZjN,KAAM,UAcV,OAVI3C,GACFpD,EAAU/D,KAAK,CACbtC,KAAM,aAAkByJ,GACxB4P,YAAY,EACZlN,QAAQ,EACRC,KAAM,mBACNkM,UAAU,IAKZ,gBAAC,IAAa,iBACRxX,EAAK,CACTwY,WAAS,EACTC,WAAY,CAAC,YAAiB7Y,IAC9B8Y,YAAaV,EAAe,CAAEvX,YAAWb,MACzC+Y,iBAAkB/Y,EAAE,0BACpBa,UAAWA,EACX8E,UAAWA,EACXqT,QAASrB,EACTsB,cAAe,IACfhZ,MAAOD,EAAE,uC,kCCvJf,2JAwGe,UAlF4DI,IACzE,MAAM,EAAEJ,GAAM,4BACPW,GAAoB,cACrBC,EAAa,YAAQ,oBACrB+E,EAAgC,CACpC,CACErG,KAAM,aAAkB,gBACxBqZ,YAAY,EACZlN,QAAQ,EACRC,KAAM,YAER,CACEpM,KAAM,aAAkB,mBACxBqZ,YAAY,EACZlN,QAAQ,EACRC,KAAM,eAER,CACEpM,KAAM,YAAUA,KAChBqZ,YAAY,EACZlN,QAAQ,EACRC,KAAM,UAIN/K,GACFgF,EAAU/D,KAAK,CACbtC,KAAM,aAAkBqB,GACxBgY,YAAY,EACZlN,QAAQ,EACRC,KAAM,mBACNkM,UAAU,IAId,MAAMsB,EAAW,CACfC,KAAM,OAENC,QAAS,mCACTC,UAAW,KAEPC,EAAY,CAChBH,KAAM,QAENC,QAAS,sBACTC,UAAW,KAEPE,EAAgB,CACpBJ,KAAM,GAENC,QAAS,yBACTC,UAAW,KAEPG,EAAc,CAClBL,KAAM,UAENC,QAAS,wBACTC,UAAW,KAEb,OACE,gBAAC,IAAW,iBACNjZ,EAAK,CACTqZ,SAAU,IAAM,CACdF,EACAC,EACA,KAAWE,WACXR,EACAI,EACA,KAAWnN,OAAO,wBAEpB7M,KAAM,aAAkB,KACxBqG,UAAWA,EACXgU,YAAa,IACbC,WAAY,CACV1Y,+BAAgCP,EAChCA,mBACAC,aACAZ,U,kCCjGR,0IAUA,MAAM6Z,EAA0B,CAC9B,CAAC,IAAqB7E,YAAa,IACnC,CAAC,IAAqBC,UAAW,IACjC,CAAC,IAAqB5H,OAAQ,IAC9B,mBAAoB,CAAC,gBAGVyM,EAAwC,CACnDzI,GACErJ,WAAUC,QAAO8R,eAAcC,sBAAqBC,yBAEtD,MAAMvE,EAAS,CACb,CAAC,IAAqBV,YAAa,CACjCY,UAAW,CAAC,QAAS,eACrB/M,MAAO,EACP4M,WAAY,eAEd,CAAC,IAAqBpI,OAAQ,CAC5BuI,UAAW,CAAC,SACZ/M,MAAO,EACP4M,WAAY,eAEd,CAAC,IAAqBR,UAAW,CAC/BW,UAAW,CAAC,cAAe,gBAC3B/M,MAAO,EACP4M,WAAY,eAEd,CAAC,IAAqBE,SAAU,CAC9BC,UAAW,CAAC,SACZ/M,MAAO,EACP4M,WAAY,eAEd,mBAAoB,CAClBG,UAAW,CAAC,eACZ/M,MAAO,EACP4M,WAAY,gBAIVuC,EAAyB,YAAkB+B,EAAc,KACzDG,EAA+B,YACnCD,EACA,KAEIE,EAAgC,YACpCH,EACA,KAEI/B,EAAqB,YAAkBhQ,EAAO,KA2BpD,OAzBAoJ,EAAMjM,QAAS7E,IAGb,MAAME,EAAU,YAAeF,EAAMyH,GAC/BvI,EAAOwY,EAAmB,YAAQxX,IAClCD,EACJwX,EAAuB,YAAQvY,KAC/Bya,EAA6B,YAAQza,KACrC0a,EAA8B,YAAQ1a,IAClC2a,EAAsB,YAAc,CAAE7Z,OAAMC,oBAE5ChB,EAAS,YAAoB,CACjCiB,UACAhB,OACAc,OACAC,kBACAhB,OAAQ4a,IAEJvE,EACJtQ,OAAO6N,KAAKyG,GAAyB/D,KAAM3U,GACzC0Y,EAAwB1Y,GAAKQ,SAASnC,KACnC,IAAqBwV,WAC5BU,EAAOG,GAAOhN,UAGT6M,I,kCCrFT,uIAYO,MAAM2E,EAA0B9Z,IACrC,MAAM+Z,EAAoB,YAAyB/Z,GAC7CmB,EAAoB,YAAyBnB,GAC7Cga,EAAY,YAAiBha,GAEnC,IAAI0L,EAcJ,OAVIA,EAFAqO,IAAsB,IACpBC,GAGW,IAEN7Y,GAGI,IAGR,CACLlC,OAAQyM,EACRC,SAAU,IAAuBD,IAAeA,EAChDuO,eAAgB,IAA6BvO,KAWpCwO,EAAgB,EAAGla,OAAMC,sBACpC,MAAMyL,EAAaoO,EAAuB9Z,GAC1C,OAAI0L,EAAWzM,SAAW,IAAmCyM,EACtD,YAAyBzL,IAAoByL,GAGzCyO,EAAyBna,GACpC,IAAqBoB,SAAS0Y,EAAuB9Z,GAAMf,S,kCCtD7D,6CAIO,MAAMmb,EAAgC,gBAA+C,K,kCCJ5F,sDA6Ce,IAjBkB,CAACna,EAAkCR,KAClE,MAAMiC,EAAS,YAAyBzB,GAClCoa,EAAc3Y,EAAS,IAAIA,KAAY,GACvCnB,EAAW,YAA2BN,GAC5C,OAAO,uBAAa,CAClBP,MAAOD,EAAE,kCACTgK,QACE,gBAAC,QAAK,CAAChK,EAAGA,EAAGyF,GAAG,iB,6CAC4B,8BAASmV,G,WAA8B,IACjF,8BAAS9Z,G,KAGbqW,QAASnX,EAAE,kCACXgX,UAAW,IAAM,aA7BO,CAACxW,GAEzBA,EAAgBnB,aAChB,GAAG,IAAqBsF,YAAY,IAAqBtF,aAElD,IAGPmB,EAAgBnB,aAChB,GAAG,IAAiCsF,YAAY,IAAiCtF,aAE1E,IAEF,IAgBoBwb,CAAoBra,GAAkBA,O,kCCzCnE,4JAiBA,MAAMsa,EAAsB,CAC1Bxb,KAAM,aAAkB,KACxBqZ,YAAY,EACZlN,QAAQ,GAQJsP,EAA4B,aAAmD3a,I,QACnF,MAAM,EAAEJ,GAAM,4BACR,SAAEc,EAAQ,WAAEuG,EAAU,aAAEC,EAAY,cAAEC,EAAa,MAAEC,EAAK,OAAEC,GAAWrH,GACtE2I,GAAS,eAET9G,EAAQ+Y,GAAa,WAAe,KAQpCC,EAAcnR,GAAU,YAAuCgR,GAChEI,EAAcD,aAAY,EAAZA,EAAe,GAC7BE,EAA2D,eAAb,QAAzB,EAAmB,QAAnB,EAAAD,aAAW,EAAXA,EAAa1b,cAAM,eAAE4b,YAAI,eAAEC,QAEhDpa,EAASjB,EAAE,mCACjB,OACE,wBAAM0H,SAZQxB,IACdA,EAAMyB,iBACN,MAAMC,EAAU,YAAqB9G,EAAUmB,EAAQ8G,GACvD,OAAOxB,EAAcK,EAASJ,IASNpI,KAAK,OAAOiB,UAAU,iBAC5C,gBAAC,IAAU,KAAEY,GACb,gBAAC,IAAS,KACR,gBAAC,IAAK,CAACiG,WAAS,GACd,gBAAC,IAAS,KACPlH,EACC,4JAGJ,gBAAC,IAAS,KACR,gBAAC,QAAK,CAACyF,GAAG,iB,gDACqC,4C,oDACT,I,mCAGxC,gBAAC,IAAS,KACR,gBAAC,IAAS,CAACgH,MAAM,SAAS6O,QAAQ,2BAChC,gBAAC,IAAS,CACRrX,KAAK,OACL7C,GAAG,0BACHoB,MAAOP,EACPsZ,SAAU,CAACC,EAAQhZ,IAAUwY,EAAUxY,SAI1C0Y,IAAgBC,GACjB,gBAAC,IAAS,KACR,gBAAC,IAAK,CACJ7Y,QAAQ,UACRrC,MAAOD,EAAE,qEACTuC,UAAQ,GAEPvC,EACC,4GAOZ,gBAAC,IAAiB,CAChB8H,gBAAiBgC,EACjBxC,aAAcA,EACdD,WAAYA,EACZU,WAAY9G,EACZwG,OAAQA,OAMHgU,EAA4B,YAAoBV,I,+jBC5EtD,MAAMW,EAAgBnb,GAC3B,aAAS,IAAoBA,EAAM,CAAC,CAAEob,GAAI,UAAWC,KAAM,eAAgBpZ,OAAO,KAKvEqZ,EAAetb,GAC1B,aAAS,IAAoBA,EAAM,CACjC,CACEob,GAAI,UACJC,KAAM,wBACNpZ,MAAO,OAAF,wBACAjC,EAAKuD,SAASmB,aAAW,CAC5B,mBAAoB,QAKf6W,EAAc,CAAOrb,EAAsBC,IAAgC,OAAD,6BAOrF,SANM,aAAS,eAAcD,EAAS,CACpC,IAAI,IAAa,yBACdsb,gBAAgB,IAA2B,OAAQ,aAAetb,IAClEub,UAGDtb,EAAY,CACd,MAAMub,EAAW,YAAYvb,GAE7B,GAAIub,EAAW,EACb,UACQ,aAAS,kBAAiBvb,EAAY,CAC1C,IAAI,IAAa,kBAAkBwb,QAAQD,EAAW,GAAGD,UAE3D,MAAOG,SACD,aAAS,eAAc1b,EAAS,CACpC,IAAI,IAAa,yBACdsb,gBAAgB,IAA2B,QAAS,aAAetb,IACnEub,sBAKH,aAAQ,eAAcvb,MAQnB2b,EAAsB,EACjChd,OACA+E,aACAC,iBACAC,iCACAE,cACA1D,YACAgD,WACAD,WACAU,SACAE,wBACAC,cACuB,OAAD,6BACtB,MAAMqM,EACJtM,GAAyB,YAAyBpF,EAAMyB,EAAW+C,EAAUC,GACzEwY,EAAgB,YACpBjd,EACAyB,EACAsD,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEFD,UAAgC,aAAU,cAAasM,UACjD,aAAU,IAAoBuL,MAGzBC,EAAsB,CACjC/b,EACAuQ,GAEE1R,OACA+E,aACAC,iBACAC,iCACAE,cACA1D,YACAgD,WACAD,WACAY,wBACAC,cAEC,OAAD,6BACF,MAAM8X,EAAU,IACX,IAAI,IAAa,SAASC,0BAC3B,CAAEjY,cAAaH,iBAAgBK,YAC/BlE,EAAKqE,OAIT,GAAIJ,EAAuB,CACzB,GAAIsM,EAAQ,CACV,MAAM2L,EAAc,IAAI,IAAa,SAASD,0BAC5C,CAAE5Y,SAAUI,KAAKJ,GAAWC,SAAUG,KAAKH,IAC3CiN,EAAO/M,MAGL0Y,EAAY5Z,OAAS,UACjB,aAAS,cAAaiO,EAAQ2L,eAGhC,aAAU,cAAa,YAAyBrd,EAAMyB,EAAW+C,EAAUC,IAEnF0Y,EAAQ3a,QACH,IAAI,IAAa,aAAa4a,0BAC/B,CACE7c,QAASwE,EACTW,gBAAiB,YAAc1F,GAC/BiF,kCAEF9D,EAAKqE,KAAKC,WAGLiM,UACH,aAAQ,cAAaA,GAC3ByL,EAAQ3a,KAAK,IAAI,IAAa,aAAa8a,SAASV,UAGlDO,EAAQ1Z,OAAS,UACb,aAAS,IAAoBtC,EAAMgc,Q,kCC1J7C,uDAGO,MAAMI,EAAuB,CAAC7b,EAAkBmB,EAAgB8G,IAC9D,aAAUA,EAAO,YAAqB,CAAEjI,WAAUmB,SAAQ8G,Y,kCCJnE,6CAEO,MAAM6T,EAAuB,EAClCC,eACA/b,WACAmB,SACA8G,YAMI,CACJ1J,WAAY,YAAmB0J,GAC/BzJ,KAAMyJ,EAAMzJ,KACZwE,SAAU,CACR+Y,cAAiBA,GAAgB/b,GAAnB,KAEhB8D,KAAM,CACJ9D,WACAmB,a,kCCnBJ,mEAUO,MAAM6a,EAA4BC,GAClCA,EAED,YAAuBA,GAClB,CACLvd,OAAQ,IACR0M,SAAU,IAAuB,MAGQ,cAAzC,YAAwB6Q,GACnB,CACLvd,OAAQ,IACR0M,SAAU,IAAuB,MAG9B,CACL1M,OAAQ,IACR0M,SAAU,IAAuB,MAhBV,M,kCCZ3B,iGAgHe,IAtEiD,EAC9D1M,SACA0M,WACAsO,iBACAja,OACAC,kBACAH,gB,QAEA,MAAM,EAAEL,GAAM,2BACRgd,EAAchd,EAAEkM,IAAa1M,EAC7ByB,EAAqC,QAA5B,KA1BgB,CAACjB,IAAiB,CACjD,CAAC,KAAyBO,GACxB,uBAAKF,UAAU,qBACb,gBAAC,OAAI,CACHgL,GAAO,aACL,IACA9K,EAAKuD,SAAS1E,KACdmB,EAAKuD,SAASjD,WAHZ,mBAMHb,EAAE,qCAgBMid,CAAkBjd,IAAGR,UAAO,sBAAGe,GAC9C,QAAQ,GACN,IAAK,CAAC,IAAkC,KAA+BoB,SAASnC,GAC9E,OACE,gBAAC,IAAkB,CACjBS,MAAO+c,EACPxc,gBAAiBA,EACjBH,UAAWA,IAGjB,IAAK,CAAC,OAAqC,KAAsBsB,SAASnC,GACxE,OACE,gBAAC,KAAc,CAACS,MAAO+c,EAAa3c,UAAWA,GAC5Cma,GAAkBxa,EAAEwa,GACpBvZ,GAGP,KAAK,IAAkBU,SAASnC,GAC9B,OACE,gBAAC,IAAW,CAACS,MAAO+c,EAAa3c,UAAWA,GAC1C,yBAAIL,EAAEwa,IACN,yBAAI,YAAoBja,IACvBU,GAGP,KAAK,IAAoBU,SAASnC,GAChC,OACE,gBAAC,KAAa,CAACS,MAAO+c,EAAa3c,UAAWA,GAC3Cma,GAAkBxa,EAAEwa,GACpBvZ,GAGP,KAAK,IAAiBU,SAASnC,GAC7B,OACE,gBAAC,IAAU,CAACS,MAAO+c,EAAa3c,UAAWA,GACxCma,GAAkBxa,EAAEwa,GACpBvZ,GAGP,QAAS,CACP,MAAMc,EAAa,gBAAC,KAAM,CAACvC,OAAQA,EAAQS,MAAO+c,EAAa3c,UAAWA,IAE1E,OAAOma,GAAkBvZ,EACvB,gBAAC,IAAa,CAAChB,MAAO+c,EAAajb,WAAYA,GAC5CyY,GAAkBxa,EAAEwa,GACpBvZ,GAED,M,kCCnGV,wEAKO,MAAMic,EAA6Bzc,IACxC,MAAM0c,EAAmB,CACvB9d,WAAY,YAAmB,mBAC/BC,KAAM,kBAAgBA,MAExB,OAAQ,aAAmBmB,IAAY,IAAIqV,KAAMsH,GAC/C,YAAsBD,EAAkBC,GAAW,M,kCCXvD,mBAae,IAJ6C,EAAG3c,UAAShB,UACtE,gCAAG,aAAaA,GAAM0G,OAAOmC,KAAK,OAAS,aAAe7H,IAAY,M,kCCTxE,gPAiEO,MA0JMkZ,EAAc,CAjJO,CAChC0D,EACA9c,GACEW,+BAA8BV,kBAAiBM,WAAUd,QAC3C,CAChBsd,QAASxc,IAAaI,KAAkCV,EACxDiM,MAAOzM,EAAE,mCACTud,SAAU,IAAM,YAA0B,CAAEzc,eAGT,CACnCuc,EACA9c,GACEW,+BAA8BV,kBAAiBM,WAAUH,mBAAkBX,QAC7D,CAChBsd,QAASxc,IAAaI,IAAiCV,EACvDiM,MAAOzM,EAAE,kCACTud,SAAU,IAAM,YAAyB/c,EAAiBR,GAC1Dwd,aAAchd,GAAmB,aAAeG,EAAkBH,EAAiB,YAG9D,CACrB6c,EACA9c,GACEK,aAAYZ,QAEd,MAAMC,EAAQD,EAAE,0BAChB,MAAO,CACLsd,OACE,CAAC,IAA8B,KAA+B3b,SAC5D,YAAmBpB,MAEpB,YAAmBA,KACnBK,EACH6L,MAAOxM,EACPsd,SAAU,KACR,MAAMhB,EAAmB,CAAC,CAAEZ,GAAI,UAAWC,KAAM,eAAgBpZ,OAAO,IAClEib,EAAqB,YAAsBld,GAC7Ckd,GACFlB,EAAQ3a,KAAK,CACX+Z,GAAI,SACJC,KAAM,yBAAyB,YAAe6B,KAGlD,aAAS,IAAoBld,EAAMgc,IAErCiB,aAAcjd,GAAQ,aAAe,IAAoBA,EAAM,YAIxC,CACzB8c,EACA9c,GACEE,UAASC,aAAYE,aAAYZ,QAE5B,CACLsd,OACE,CAAC,IAA+B,KAAgC3b,SAC9D,YAAmBpB,KAErB,YAA0BA,KACzBE,KACC,aAAeA,EAAS,IAAI,MAC7B,YAA0BA,KAAaC,IACvCE,EACH6L,MAAOzM,EAAE,6BACTud,SAAU,IACR,YAAa,CACXtd,MAAOD,EAAE,qCAAsC,CAAEZ,KAAM,aAAQmB,KAC/DyJ,QACIhK,EADKU,EAEH,iGAKA,kEAJA,CACEtB,KAAM,aAAQqB,KAMtB0W,QAASnX,EAAE,6BACXgX,UAAW,IAAM,YAAYvW,EAASC,KAE1C8c,aAAc9c,EACV,aAAe,kBAAiBA,EAAY,UAC5C,aAAe,eAAcD,EAAS,YAItB,CACtB4c,EACA9c,GACEO,WAAUtB,SAAQoB,aAAYZ,QAC7B,CACHsd,OACE,CAAC,IAA+B,KAAgC3b,SAC9D,YAAmBpB,MAEpB,YAAmBA,KACnBK,EACH6L,MAAOzM,EAAE,2BACTud,SAAU,IAAM,YAAkB,CAAEhd,OAAMO,WAAUtB,WACpDge,aAAcjd,GAAQ,aAAe,IAAoBA,EAAM,YAG1C,CACrB8c,EACA9c,GACEK,aAAYZ,QACX,CACHsd,OACE,CAAC,IAA+B,KAAgC3b,SAC9D,YAAmBpB,KAErB,YAA0BA,KACzB,YAAmBA,KACnBK,EACH6L,MAAOzM,EAAE,yBACTud,SAAU,IAAM,YAAiB,CAAEhd,SACnCid,aAAcjd,GAAQ,aAAe,IAAoBA,EAAM,YAkC/D,IAAMmd,QAAQC,aACd,IAAMD,QAAQE,kBAlKI,CAClBP,EACA9c,GACEP,QACc,CAChByM,MAAOzM,EAAE,sCACTmZ,KAAM,WAAW,aAAa5Y,MAAS,aAAkB8c,MAAY,aAAQ9c,YA4HzD,CACpB8c,EACA9c,GACEf,SAAQQ,QAEV,MAAMC,EAAQD,EAAE,wCAChB,MAAO,CACLsd,QAAS,CACP,IACA,IACA,IACA,OACG,KACH3b,SAASnC,EAAOA,QAClBiN,MAAOxM,EACPsd,SAAU,IACR,YAAY,CACVje,KAAM+d,EACN9W,SAAUhG,IAEdid,aAAc,aAAe,IAAoBjd,EAAM,aAwB9Csd,EAAqB,CAChCR,EACA9c,GACEyH,WAAU6P,cAAa5P,QAAOC,qBAC9BhH,+BAA8BP,mBAAkBC,aAAYZ,QAE9D,MAAMS,EAAU,YAAeF,EAAMyH,GAC/BvI,EAAO,aAAegB,EAASwH,GAC/BnH,EAAW,aAAmBL,GAC9BD,EAAkB,YAAoB0H,EAAkBpH,GACxDtB,EAAS,YAAc,CAAEe,OAAME,UAAShB,OAAMe,oBAE9C2X,EAAe,YAA0B1X,GACzCC,EAAa,YAAemX,EAAaM,GAAgBA,EAAajZ,KAE5E,OAAOya,EAAY3Y,IAAKC,GACfA,EAAOoc,EAAS9c,EAAM,CAC3BW,+BACAV,kBACAM,WACAL,UACAC,aACAlB,SACAoB,aACAD,mBACAX,S,kCCzQN,uF,kCCAA,4GAIO,MAAM8d,EAAkBtb,GAC7BA,EAAM0Z,QAAQ,IAAK,MAAMA,QAAQ,IAAK,MAExC,IAAY6B,GAAZ,SAAYA,GACV,YACA,kBACA,oBAHF,CAAYA,MAAc,KAMnB,MAAMC,EAaX,YAAYpC,GARJ,KAAAqC,YAAsB,EAEtB,KAAAC,SAAmB,GAInB,KAAAC,OAAQ,EAMhB,KAAAC,SAAY5b,IACVoU,KAAKpU,MAAQA,EACNoU,MAGT,KAAAyH,aAAgBC,IACd1H,KAAK0H,UAAYA,EACV1H,MAGT,KAAA2H,aAAgBtb,IACd2T,KAAKqH,WAAahb,EACX2T,MAGT,KAAA4H,IAAOhc,IACLoU,KAAKpU,MAAQA,EACNoU,KAAKyH,aAAaN,EAAeU,MAG1C,KAAAvC,QAAW1Z,IACToU,KAAKpU,MAAQA,EACNoU,KAAKyH,aAAaN,EAAeW,UAG1C,KAAAhC,OAAS,IAAM9F,KAAKyH,aAAaN,EAAeY,QAEhD,KAAAC,cAAgB,CAAIvG,EAAYwG,KAG9B,GAFAjI,KAAKpU,WAAQyH,EACb2M,KAAK0H,UAAYP,EAAeY,OAC5BtG,EAAO,CACT,MAAMyG,EAAazG,EAAM0G,UAAUF,GAC/BC,EAAa,EACflI,KAAKuH,OAAQ,EAEbvH,KAAKqH,WAA8B,IAAjB5F,EAAMxV,QAAgB,EAAIic,OAG9ClI,KAAKqH,YAAc,EAErB,OAAOrH,MAGT,KAAAoI,cAAgB,CACdC,EACA5G,EACA6G,EAA2D,EAACC,EAAOC,IACjED,IAAUC,MAEZ,GAAI/G,EAAO,CACT,MAAMyG,EAAazG,EAAM0G,UAAWI,GAAUD,EAAkBC,EAAOF,IACnEH,EAAa,GACflI,KAAKpU,MAAQyc,EACbrI,KAAKqH,WAAa5F,EAAMxV,OACxB+T,KAAK0H,UAAYP,EAAeU,KACvB,IAAUpG,EAAMyG,GAAaG,GACtCrI,KAAKuH,OAAQ,GAEbvH,KAAKpU,MAAQyc,EACbrI,KAAKqH,WAAaa,EAClBlI,KAAK0H,UAAYP,EAAeW,cAIlC9H,KAAKpU,MAAQ,CAACyc,GACdrI,KAAKqH,YAAc,EACnBrH,KAAK0H,UAAYP,EAAeU,IAElC,OAAO7H,MAGT,KAAAyI,gBAAkB,CAACle,EAAame,KAC1B,IAAMA,EAAQ,CAACne,KACjByV,KAAKpU,WAAQyH,EACb2M,KAAKsH,SAAW/c,EAChByV,KAAK0H,UAAYP,EAAeY,QAEhC/H,KAAKuH,OAAQ,EAERvH,MAGT,KAAAmF,gBAAkB,CAAC5a,EAAaqB,EAAY8c,KAC5B,MAAVA,EACF1I,KAAKpU,MAAQ,CAAE,CAACrB,GAAMqB,GACb8c,EAAOne,KAASqB,EACzBoU,KAAKuH,OAAQ,GAEbvH,KAAKpU,MAAQA,EACboU,KAAKsH,SAAW/c,GAElByV,KAAK0H,UAAY,IAAMgB,EAAQ,CAACne,IAAQ4c,EAAeW,QAAUX,EAAeU,IACzE7H,MAGT,KAAA2I,aAAe,IAAM3I,KAAKuH,UAAYvH,KAAKgF,OAAQhF,KAAK0H,WAExD,KAAAtC,MAAQ,KACN,IAAKpF,KAAK2I,eACR,OAAO,KAGT,IAAIC,EAGFA,EADE5I,KAAKqH,WAAa,EACPrH,KAAKsH,SACd,YAAetH,KAAKgF,KAAM,IAAIkC,EAAelH,KAAKsH,WAClDtH,KAAKgF,KAEI,GAAG,YAAehF,KAAKgF,KAAM,OAAOhF,KAAKqH,aAGxD,MAAMwB,EAAgB,CACpB9D,GAAI/E,KAAK0H,UACT1C,KAAM4D,GAOR,OAJI5I,KAAK0H,YAAcP,EAAeY,SACpCc,EAAOjd,MAAQoU,KAAKpU,OAGfid,GAGT,KAAAjD,0BAA4B,CAC1BkD,EACAC,KAEA,IAAKD,EACH,MAAO,GAET,IAAIE,EASJ,OALEA,EAHGD,EAGQpa,OAAO6N,KAAKsM,GAAW1e,IAAKG,GACrC,IAAI6c,EAAapH,KAAKgF,MAAMG,gBAAgB5a,EAAKue,EAAUve,GAAMwe,IAHxD,CAAC,IAAI3B,EAAapH,KAAKgF,MAAM4C,IAAIkB,IAOvC,IAAUE,EAAS5e,IAAK6e,GAAMA,EAAE7D,WA/IvCpF,KAAKgF,KAAOA,K,kCC3BhB,kCAAO,MAAMkE,EAA4B,mD,kCCAzC,yFAIO,MAAMC,EAAiB,CAAClI,EAA+B3Y,IAC5DA,GAAO2Y,EAAcA,EAAY/B,KAAMpV,GAAe,aAAOA,KAAgBxB,GAAO,KAEzE8gB,EAAc,CAACtf,EAA4Buf,EAAuB,IAC7E,IAAMvf,EAAY,QAAUA,EAAWkE,KAAKqX,SAAWgE,G,kCCRzD,mNAoCO,MAAMC,EAA6C,EAAGrY,cAC3D,MAAM,EAAE7H,GAAM,2BACd,OACE,gBAAC,IAAK,CACJsC,QAAQ,UACRrC,MAAOD,EAAE,4DACTuC,UAAQ,GAGJvC,EADH6H,EAEK,kIAGA,uIAMNsY,EAAqB,CAACngB,EAAc8C,KACxC,MAAMiE,EAAa,YAAcjE,GAC3BgE,EAAa,YAAoBhE,GACvC,OAAKiE,EAAWlE,QAAWiE,EAAWjE,OAGlCkE,EAAWlE,SAAWiE,EAAWjE,OAC5B7C,EACL,qGACA,CAAE6C,OAAQkE,EAAWlE,UAGpBkE,EAAWlE,QAAUiE,EAAWjE,OAC5B7C,EACL,qGACA,CAAE6C,OAAQiE,EAAWjE,SAIlB7C,EACL,iJACA,CAAEogB,cAAerZ,EAAWlE,OAAQwd,iBAAkBvZ,EAAWjE,SAjB1D7C,EAAE,yDAgCPsgB,EAA0D,EAC9DC,sBACAC,WACA1f,WACA2f,cACAjhB,SACAsD,OACA8D,YACAa,aAEA,MAAM,EAAEzH,GAAM,2BACR0gB,EAAiB,CACrB,IACA,IACA,KACA/e,SAASnC,EAAOA,QAClB,IAAImhB,EACC7f,EAEO4f,IACVC,EACE,yBACE,gBAAC,QAAK,CAAClb,GAAG,iB,2BACiB,IACzB,gBAAC,IAAM,CACLnD,QAAQ,OACRS,QAAS,IAAM,YAA0B,CAAEjC,aAC3CyT,YAAagM,EACbhe,UAAQ,wBAGA,I,+EAbhBoe,EAAW,yBAAI3gB,EAAE,2DAoBnB,MAAMsU,EACFtU,EADac,EACX,wEACA,8EAEN,OACE,gBAAC,IAAK,CAACoG,WAAS,GACd,gBAAC,IAAS,KACPyZ,EACD,gBAAC,IAAiB,CAChBnhB,OAAQA,EAAOA,OACfmH,SAAU7D,EACV8D,UAAWA,EACXhB,cAAe6B,KAGnB,gBAAC,IAAS,KACR,gBAAC,IAAQ,CACPrG,GAAG,iBACHqL,MAAOzM,EAAE,uCACTub,SAAU,CAACC,EAAQhZ,IAAUie,EAAYje,GACzCoe,UAAWJ,EAAQ,qBACCA,IAEtB,uBAAKngB,UAAU,kBAAkBiU,IAEnC,gBAAC,IAAS,KAAEkM,GAAY,gBAACN,EAAe,SAkBxCW,EAAoB,aACxB,EAAGtgB,OAAMO,WAAUtB,SAAQ6H,aAAYC,eAAcC,gBAAeC,QAAOC,aACzE,MAAO3E,EAAMgH,EAAQlD,GAAa,YAA+B,CAC/DtH,KAAM,WAASA,KACfqZ,YAAY,EACZlN,QAAQ,EACRa,cAAe,iBAAiBxL,KAE5B,EAAEd,GAAM,4BACPW,GAAoB,eACpB6f,EAAUC,GAAe,YAAe,GAQzCK,GAAqBla,GA/BR,CAACpH,GACH,CAAC,IAA+B,IAAmB,KACpDmC,SAASnC,GA6BeuhB,CAAevhB,EAAOA,QAExDwhB,EAAqBxhB,EAAOA,SAAW,IAC7C,OACE,wBAAMkI,SAVQxB,IACdA,EAAMyB,iBACN,MAAMC,EAAU,YAAarH,GAC7B,OAAOgH,EAAcK,EAASJ,IAONpI,KAAK,OAAOiB,UAAU,iBAC5C,gBAAC,IAAU,KAAEL,EAAE,iCACf,gBAAC,IAAS,KACN8J,EAEEgX,EACFE,EACEhhB,EACE,oHACA,CAAEgK,QAASmW,EAAmBngB,EAAG8C,KAGnC9C,EAAE,6DAGJ,gBAACsgB,EAAmB,CAClBE,SAAUA,EACVC,YAAaA,EACbF,qBAAsBS,GAAsBlgB,KAAcH,EAC1DG,SAAUA,EACVtB,OAAQA,EACRsD,KAAMA,EACN8D,UAAWA,EACXa,OAAQA,IAnBV,gBAAC,IAAU,OAuBf,gBAAC,IAAiB,CAChBA,OAAQA,EACRH,aAAcA,EACdD,WAAYA,EACZS,gBAAiBgZ,IAAsBN,EACvCzY,WAAY/H,EAAE,gCAOXihB,EAAoB,YAAoBJ,I,kCCzOrD,yCAiBe,IAP2B,EAAG/f,cACvCA,EACK,gBAAC,KAAY,CAACxB,KAAM,aAAkB,aAAYF,KAAM0B,IAE1D,gCAAG,M,kCCbZ,oHA0BA,MAAMogB,EAAwB3b,OAAO4b,OAAO,CAC1CC,YAAa,CACXnhB,MAAO,cACPohB,OAAQ,KAEVC,MAAO,CACLrhB,MAAO,YACPohB,OAAQ,CAAC,IAAmB,MAE9BE,aAAc,CACZthB,MAAO,eACPohB,OAAQ,KAEVG,YAAa,CACXvhB,MAAO,cACPohB,OAAQ,CAAC,IAAyB,MAEpCzU,MAAO,CACL3M,MAAO,QACPohB,OAAQ,KAEVtE,YAAa,CACX9c,MAAO,cACPohB,OAAQ9b,OAAO6N,KAAK,MAEtBqO,UAAW,CACTxhB,MAAO,YACPohB,OAAQ,CAAC,MAEXlC,MAAO,CACLlf,MAAO,QACPohB,OAAQ9b,OAAO6N,KAAK,QAIXsO,EAAuBC,GAC3B,IAAUT,EAAuB,EAAGG,YAAaA,EAAO1f,SAASggB,EAAOniB,OAAOA,SAG3EoiB,EAAoB5hB,IAAiD,CAChF6hB,gBAAiB7hB,EAAE,wBACnBiE,KAAM,cACN6d,QAASJ,EACTrJ,MAAO,IAAM6I,EAAuB,EAAGjhB,SAASmB,KAAO,CAAGA,KAAInB,MAAOD,EAAEC,MACvE+E,OAAQ,CAAC0Q,EAAQiM,K,MACf,MAAMniB,EAASkiB,EAAoBC,GACnC,OACiB,QAAf,EAAAjM,EAAOqM,gBAAQ,eAAEpgB,SAASnC,MACzB,IAAWkW,EAAOsM,IAAKxiB,IACxB,IAAUkW,EAAOqM,c,iaCzDR,IAToE,I,IAAA,YACjFtgB,GAAW,EACRwgB,EAAS,IAFqE,iBAIjF,OAAIxgB,IAAgB,IAAqC,gBAAC,IAAa,iBAAKwgB,IACxExgB,IAAgB,IAAsC,gBAAC,IAAO,iBAAKwgB,IAChE,gBAAC,IAAc,iBAAKA,M,kCChB7B,sGAAO,MAAMC,EAAY,uCAUZC,GARe,IAAIC,OAC9B,2jCAGuB,IAAIA,OAC3B,2aAG+B,IAAIA,OACnC,khBAGWC,EAAsB","file":"metal3-baremetalhost-chunk-c9d4e6d6056faddd9a3d.min.js","sourcesContent":["import { OwnerReference } from '@console/internal/module/k8s';\n\nexport const compareOwnerReference = (\n  obj: OwnerReference,\n  otherObj: OwnerReference,\n  compareModelOnly?: boolean,\n) => {\n  if (obj === otherObj) {\n    return true;\n  }\n  if (!obj || !otherObj) {\n    return false;\n  }\n  const isUIDEqual = obj.uid && otherObj.uid ? compareModelOnly || obj.uid === otherObj.uid : true;\n  const isNameEqual = compareModelOnly || obj.name === otherObj.name;\n\n  return (\n    obj.apiVersion === otherObj.apiVersion &&\n    obj.kind === otherObj.kind &&\n    isNameEqual &&\n    isUIDEqual\n  );\n};\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { TableData, Table, RowFunctionArgs } from '@console/internal/components/factory';\nimport { Kebab, ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { getName, getUID, getNamespace, DASH } from '@console/shared';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { BMO_ENABLED_FLAG } from '../../features';\nimport { useMaintenanceCapability } from '../../hooks/useMaintenanceCapability';\nimport { BareMetalHostModel } from '../../models';\nimport { getHostBMCAddress, getHostVendorInfo } from '../../selectors';\nimport { BareMetalHostBundle } from '../types';\nimport BareMetalHostRole from './BareMetalHostRole';\nimport BareMetalHostSecondaryStatus from './BareMetalHostSecondaryStatus';\nimport BareMetalHostStatus from './BareMetalHostStatus';\nimport { menuActions } from './host-menu-actions';\nimport NodeLink from './NodeLink';\n\nconst tableColumnClasses = {\n  name: '',\n  status: 'pf-m-hidden pf-m-visible-on-sm',\n  node: 'pf-m-hidden pf-m-visible-on-md',\n  role: 'pf-m-hidden pf-m-visible-on-lg',\n  address: 'pf-m-hidden pf-m-visible-on-lg',\n  serialNumber: 'pf-m-hidden pf-m-visible-on-lg',\n  kebab: Kebab.columnClass,\n};\n\nconst HostsTableHeader = (t: TFunction) => () => [\n  {\n    title: t('metal3-plugin~Name'),\n    sortField: 'host.metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.name },\n  },\n  {\n    title: t('metal3-plugin~Status'),\n    sortField: 'status.status',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.status },\n  },\n  {\n    title: t('metal3-plugin~Node'),\n    sortField: 'node.metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.node },\n  },\n  {\n    title: t('metal3-plugin~Role'),\n    sortField: 'machine.metadata.labels[\"machine.openshift.io/cluster-api-machine-role\"]',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.role },\n  },\n  {\n    title: t('metal3-plugin~Management Address'),\n    sortField: 'host.spec.bmc.address',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.address },\n  },\n  {\n    title: t('metal3-plugin~Serial Number'),\n    sortField: 'host.status.hardware.systemVendor.serialNumber',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.serialNumber },\n  },\n  {\n    title: '',\n    props: { className: tableColumnClasses.kebab },\n  },\n];\n\nconst HostsTableRow: React.FC<RowFunctionArgs<BareMetalHostBundle>> = ({\n  obj: { host, node, nodeMaintenance, machine, machineSet, status },\n}) => {\n  const { t } = useTranslation();\n  const [maintenanceModel] = useMaintenanceCapability();\n  const bmoEnabled = useFlag(BMO_ENABLED_FLAG);\n  const name = getName(host);\n  const namespace = getNamespace(host);\n  const address = getHostBMCAddress(host);\n  const uid = getUID(host);\n  const nodeName = getName(node);\n  const { serialNumber } = getHostVendorInfo(host);\n\n  return (\n    <>\n      <TableData className={tableColumnClasses.name}>\n        <ResourceLink\n          kind={referenceForModel(BareMetalHostModel)}\n          name={name}\n          namespace={namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses.status}>\n        <BareMetalHostStatus {...status} nodeMaintenance={nodeMaintenance} host={host} />\n        <BareMetalHostSecondaryStatus host={host} />\n      </TableData>\n      <TableData className={tableColumnClasses.node}>\n        <NodeLink nodeName={nodeName} />\n      </TableData>\n      <TableData className={tableColumnClasses.role}>\n        <BareMetalHostRole machine={machine} node={node} />\n      </TableData>\n      <TableData className={tableColumnClasses.address}>{address || DASH}</TableData>\n      <TableData className={tableColumnClasses.serialNumber}>{serialNumber || DASH}</TableData>\n      <TableData className={tableColumnClasses.kebab}>\n        <Kebab\n          options={menuActions.map((action) =>\n            action(BareMetalHostModel, host, {\n              nodeMaintenance,\n              nodeName,\n              hasNodeMaintenanceCapability: !!maintenanceModel,\n              machine,\n              machineSet,\n              status,\n              bmoEnabled,\n              maintenanceModel,\n              t,\n            }),\n          )}\n          key={`kebab-for-${uid}`}\n          id={`kebab-for-${uid}`}\n        />\n      </TableData>\n    </>\n  );\n};\n\ntype BareMetalHostsTableProps = React.ComponentProps<typeof Table> & {\n  data: BareMetalHostBundle[];\n};\n\nconst BareMetalHostsTable: React.FC<BareMetalHostsTableProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <Table\n      {...props}\n      defaultSortField=\"host.metadata.name\"\n      aria-label={t('metal3-plugin~Bare Metal Hosts')}\n      Header={HostsTableHeader(t)}\n      Row={HostsTableRow}\n      virtualize\n    />\n  );\n};\n\nexport default BareMetalHostsTable;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SecondaryStatus } from '@console/shared';\nimport { HOST_POWER_STATUS_POWERED_ON, HOST_REGISTERING_STATES } from '../../constants';\nimport {\n  getHostPowerStatus,\n  getHostProvisioningState,\n  isHostScheduledForRestart,\n  hasPowerManagement,\n} from '../../selectors';\nimport { BareMetalHostKind } from '../../types';\n\ntype BareMetalHostSecondaryStatusProps = {\n  host: BareMetalHostKind;\n};\n\nconst BareMetalHostSecondaryStatus: React.FC<BareMetalHostSecondaryStatusProps> = ({ host }) => {\n  const { t } = useTranslation();\n  const powerStatus = getHostPowerStatus(host);\n  const provisioningState = getHostProvisioningState(host);\n  const status = [];\n\n  if (!hasPowerManagement(host)) {\n    status.push(t('metal3-plugin~No power management'));\n    // don't show power status when host registration/inspection hasn't finished\n  } else if (!HOST_REGISTERING_STATES.includes(provisioningState)) {\n    if (isHostScheduledForRestart(host)) {\n      status.push(t('metal3-plugin~Restart pending'));\n    }\n\n    // don't show power status when host is powered on\n    if (powerStatus !== HOST_POWER_STATUS_POWERED_ON) {\n      status.push(powerStatus);\n    }\n  }\n\n  return <SecondaryStatus status={status} />;\n};\n\nexport default BareMetalHostSecondaryStatus;\n","import * as React from 'react';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport { MaintenanceIcon } from '@patternfly/react-icons/dist/esm/icons/maintenance-icon';\nimport { PopoverStatus, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getNodeMaintenancePhase } from '../../selectors';\nimport StartingMaintenancePopoverContent from './StartingMaintenancePopoverContent';\nimport UnderMaintenancePopoverContent from './UnderMaintenancePopoverContent';\n\ntype MaintenancePopoverProps = {\n  title: string;\n  nodeMaintenance: K8sResourceKind;\n  className?: string;\n};\n\nconst MaintenancePopover: React.FC<MaintenancePopoverProps> = ({\n  title,\n  nodeMaintenance,\n  className,\n  children,\n}) => {\n  const phase = getNodeMaintenancePhase(nodeMaintenance);\n\n  return (\n    <PopoverStatus\n      title={title}\n      statusBody={\n        <StatusIconAndText\n          title={title}\n          icon={phase === 'Succeeded' ? <MaintenanceIcon /> : <InProgressIcon />}\n          className={className}\n        />\n      }\n    >\n      {phase === 'Succeeded' ? (\n        <UnderMaintenancePopoverContent nodeMaintenance={nodeMaintenance} />\n      ) : (\n        <StartingMaintenancePopoverContent nodeMaintenance={nodeMaintenance} />\n      )}\n      {children}\n    </PopoverStatus>\n  );\n};\n\nexport default MaintenancePopover;\n","import * as React from 'react';\nimport { Progress, ProgressSize, Alert, ExpandableSection, Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  getNodeMaintenanceReason,\n  getNodeMaintenanceCreationTimestamp,\n  getNodeMaintenanceProgressPercent,\n  getNodeMaintenanceLastError,\n  getNodeMaintenancePendingPods,\n} from '../../selectors';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\nimport MaintenancePopoverPodList from './MaintenancePopoverPodList';\n\ntype StartingMaintenancePopoverContentProps = {\n  nodeMaintenance: K8sResourceKind;\n};\n\nconst StartingMaintenancePopoverContent: React.FC<StartingMaintenancePopoverContentProps> = ({\n  nodeMaintenance,\n}) => {\n  const { t } = useTranslation();\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const creationTimestamp = getNodeMaintenanceCreationTimestamp(nodeMaintenance);\n  const lastError = getNodeMaintenanceLastError(nodeMaintenance);\n  const pendingPods = getNodeMaintenancePendingPods(nodeMaintenance);\n\n  return (\n    <>\n      <p>\n        {t(\n          \"metal3-plugin~Node is entering maintenance. The cluster will automatically rebuild node's data 30 minutes after entering maintenance.\",\n        )}\n      </p>\n      <dl>\n        <dt>{t('metal3-plugin~Maintenance reason:')}</dt>\n        <dd>{reason}</dd>\n        <dt>{t('metal3-plugin~Requested:')}</dt>\n        <dd>\n          <Timestamp timestamp={creationTimestamp} />\n        </dd>\n      </dl>\n      <br />\n      {lastError && (\n        <>\n          <Alert variant=\"warning\" title={t('metal3-plugin~Workloads failing to move')} isInline>\n            {lastError}\n          </Alert>\n          <br />\n        </>\n      )}\n      <Progress\n        value={getNodeMaintenanceProgressPercent(nodeMaintenance)}\n        title={t('metal3-plugin~Moving workloads')}\n        size={ProgressSize.sm}\n      />\n      <br />\n      <ExpandableSection\n        toggleText={t('metal3-plugin~Show remaining workloads ({{listLength}})', {\n          listLength: pendingPods.length,\n        })}\n      >\n        <MaintenancePopoverPodList pods={pendingPods} />\n      </ExpandableSection>\n      <br />\n      <Button variant=\"link\" onClick={() => stopNodeMaintenanceModal(nodeMaintenance, t)} isInline>\n        {t('metal3-plugin~Stop')}\n      </Button>\n    </>\n  );\n};\n\nexport default StartingMaintenancePopoverContent;\n","import * as React from 'react';\nimport { List, AutoSizer } from 'react-virtualized';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { PodModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport './MaintenancePopoverPodList.scss';\n\nconst podRowRenderer = (pods) => ({ key, index, style }) => {\n  const pod = pods[index];\n  return (\n    <div key={key} style={style} className=\"maintenance-popover-pod-list__list-item\">\n      <ResourceLink kind={referenceForModel(PodModel)} name={pod} title={pod} />\n    </div>\n  );\n};\n\ntype MaintenancePopoverPodListProps = {\n  pods: string[];\n};\nconst MaintenancePopoverPodList: React.FC<MaintenancePopoverPodListProps> = ({ pods }) => (\n  <AutoSizer disableHeight>\n    {({ width }) => (\n      <List\n        width={width}\n        height={pods.length < 6 ? pods.length * 30 : 150}\n        rowCount={pods.length}\n        rowHeight={30}\n        rowRenderer={podRowRenderer(pods)}\n      />\n    )}\n  </AutoSizer>\n);\n\nexport default MaintenancePopoverPodList;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getNodeMaintenanceReason, getNodeMaintenanceCreationTimestamp } from '../../selectors';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\n\ntype UnderMaintenancePopoverContentProps = {\n  nodeMaintenance: K8sResourceKind;\n};\n\nconst UnderMaintenancePopoverContent: React.FC<UnderMaintenancePopoverContentProps> = ({\n  nodeMaintenance,\n}) => {\n  const { t } = useTranslation();\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const creationTimestamp = getNodeMaintenanceCreationTimestamp(nodeMaintenance);\n\n  return (\n    <>\n      <p>\n        {t(\n          \"metal3-plugin~Node is under maintenance. The cluster will automatically rebuild node's data 30 minutes after entering maintenance.\",\n        )}\n      </p>\n      <dl>\n        <dt>{t('metal3-plugin~Maintenance reason:')}</dt>\n        <dd>{reason}</dd>\n        <dt>{t('metal3-plugin~Requested:')}</dt>\n        <dd>\n          <Timestamp timestamp={creationTimestamp} />\n        </dd>\n      </dl>\n      <br />\n      <Button variant=\"link\" onClick={() => stopNodeMaintenanceModal(nodeMaintenance, t)} isInline>\n        {t('metal3-plugin~Stop maintenance')}\n      </Button>\n    </>\n  );\n};\n\nexport default UnderMaintenancePopoverContent;\n","import { SecretModel } from '@console/internal/models';\nimport { BareMetalHostModel } from '../../models';\nimport { BareMetalHostKind } from '../../types';\n\nexport const getSecretName = (name: string): string => `${name}-bmc-secret`;\n\nexport const buildBareMetalHostSecret = (name, namespace, username, password) => ({\n  apiVersion: SecretModel.apiVersion,\n  kind: SecretModel.kind,\n  metadata: {\n    namespace,\n    name: getSecretName(name),\n  },\n  data: {\n    username: btoa(username),\n    password: btoa(password),\n  },\n  type: 'Opaque',\n});\n\nexport const buildBareMetalHostObject = (\n  name,\n  namespace,\n  BMCAddress,\n  bootMACAddress,\n  disableCertificateVerification = false,\n  online = true,\n  description = '',\n  enablePowerManagement,\n  bootMode,\n): BareMetalHostKind => {\n  const bmh: BareMetalHostKind = {\n    apiVersion: `${BareMetalHostModel.apiGroup}/${BareMetalHostModel.apiVersion}`,\n    kind: BareMetalHostModel.kind,\n    metadata: {\n      name,\n      namespace,\n    },\n    spec: {\n      bootMACAddress,\n      description,\n      online,\n    },\n  };\n  if (bootMode) {\n    bmh.spec.bootMode = bootMode;\n  }\n  if (enablePowerManagement) {\n    bmh.spec.bmc = {\n      address: BMCAddress,\n      credentialsName: getSecretName(name),\n      disableCertificateVerification,\n    };\n  }\n  return bmh;\n};\n","import * as React from 'react';\nimport { Alert, ExpandableSection, Stack, StackItem } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { DaemonSetModel, PodModel } from '@console/internal/models';\nimport { PodKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport {\n  NODE_STATUS_STARTING_MAINTENANCE,\n  HOST_STATUS_UNKNOWN,\n  HOST_STATUS_ERROR,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n} from '../../constants';\n\ntype StatusValidationProps = {\n  status: string;\n  nodePods: PodKind[];\n  loadError?: any;\n  onLinkClicked?: () => void;\n};\n\ntype ExpandableResourcesProps = {\n  resources: {\n    name: string;\n    namespace: string;\n    kind: string;\n  }[];\n  onLinkClicked?: () => void;\n  subject: string;\n};\n\nexport const getStaticPods = (pods?: PodKind[]) =>\n  (\n    pods?.filter((pod) => {\n      const annotations = pod.metadata?.annotations || {};\n      return !!annotations['kubernetes.io/config.mirror'];\n    }) || []\n  ).map((pod) => ({\n    name: getName(pod),\n    namespace: getNamespace(pod),\n    kind: PodModel.kind,\n  }));\n\nexport const getDaemonSetsOfPods = (pods?: PodKind[]) => {\n  if (!pods) {\n    return [];\n  }\n\n  const namespaces: { [key: string]: string[] } = {};\n  pods.forEach((pod) => {\n    const ownerReferences =\n      pod.metadata?.ownerReferences?.filter((or) => or.kind === DaemonSetModel.kind) || [];\n    ownerReferences.forEach((or) => {\n      namespaces[getNamespace(pod)] = namespaces[getNamespace(pod)] || [];\n      namespaces[getNamespace(pod)].push(or.name);\n    });\n  });\n\n  const result = _.flatten(\n    Object.getOwnPropertyNames(namespaces).map((ns) =>\n      namespaces[ns].map((name) => ({\n        name,\n        namespace: ns,\n        kind: DaemonSetModel.kind,\n      })),\n    ),\n  );\n  return result;\n};\n\nconst ExpandableResources: React.FC<ExpandableResourcesProps> = ({\n  resources,\n  onLinkClicked,\n  subject,\n}) => {\n  const [isExpanded, setExpanded] = React.useState(false);\n  const onToggle = React.useCallback(() => setExpanded(!isExpanded), [isExpanded, setExpanded]);\n  const onLinkClick = React.useCallback(\n    (event) => {\n      onLinkClicked && (!event.key || event.key === 'Enter') && onLinkClicked();\n    },\n    [onLinkClicked],\n  );\n\n  if (!resources || resources.length === 0) {\n    return null;\n  }\n\n  const toggleText = `${isExpanded ? 'Hide' : 'Show'} ${subject} (${resources.length})`;\n\n  return (\n    <ExpandableSection onToggle={onToggle} isExpanded={isExpanded} toggleText={toggleText}>\n      {resources\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((resource) => (\n          <div\n            onClick={onLinkClick}\n            onKeyPress={onLinkClick}\n            key={`${resource.name}-${resource.namespace}`}\n            role=\"link\"\n            tabIndex={0}\n          >\n            <ResourceLink\n              kind={resource.kind}\n              name={resource.name}\n              namespace={resource.namespace}\n            />\n          </div>\n        ))}\n    </ExpandableSection>\n  );\n};\n\nexport const StatusValidations: React.FC<StatusValidationProps> = ({\n  status,\n  nodePods,\n  loadError,\n  onLinkClicked,\n}) => {\n  const { t } = useTranslation();\n  const validations = [];\n  const [daemonSets, staticPods] = React.useMemo(\n    () => [getDaemonSetsOfPods(nodePods), getStaticPods(nodePods)],\n    [nodePods],\n  );\n\n  if (loadError) {\n    validations.push({\n      title: t('metal3-plugin~Failed to load data.'),\n      description: t('metal3-plugin~Failed to load subresources.'),\n      level: 'danger',\n    });\n  }\n\n  if ([HOST_STATUS_UNKNOWN, ...HOST_STATUS_ERROR].includes(status)) {\n    validations.push({\n      title: t('metal3-plugin~The bare metal host is not healthy.'),\n      description: t(\n        'metal3-plugin~The host cannot be powered off gracefully untils its health is restored.',\n      ),\n      level: 'warning',\n    });\n  }\n\n  if (status === NODE_STATUS_STARTING_MAINTENANCE) {\n    validations.push({\n      title: t('metal3-plugin~The node is starting maintenance.'),\n      description: t(\n        'metal3-plugin~The node cannot be powered off gracefully until it finishes entering maintenance.',\n      ),\n      level: 'info',\n    });\n  }\n\n  if (status === NODE_STATUS_STOPPING_MAINTENANCE) {\n    validations.push({\n      title: t('metal3-plugin~The node is stopping maintenance.'),\n      description: t(\n        'metal3-plugin~The node cannot be powered off gracefully while it is exiting maintenance.',\n      ),\n      level: 'info',\n    });\n  }\n\n  if (daemonSets.length > 0) {\n    validations.push({\n      title: t('metal3-plugin~This node contains DaemonSet pods.'),\n      description: t(\n        'metal3-plugin~These DaemonSets will prevent some pods from being moved. This should not prevent the host from powering off gracefully.',\n      ),\n      level: 'info',\n      detail: (\n        <ExpandableResources\n          subject=\"daemon sets\"\n          resources={daemonSets}\n          onLinkClicked={onLinkClicked}\n        />\n      ),\n    });\n  }\n\n  if (staticPods.length > 0) {\n    validations.push({\n      title: t('metal3-plugin~This host contains unmanaged static pods.'),\n      description: t(\n        'metal3-plugin~These pods must be moved manually to continue running after the host powers off.',\n      ),\n      level: 'warning',\n      detail: (\n        <ExpandableResources\n          subject=\"unmanaged pods\"\n          resources={staticPods}\n          onLinkClicked={onLinkClicked}\n        />\n      ),\n    });\n  }\n\n  return (\n    <Stack hasGutter>\n      {validations.map((validation) => (\n        <StackItem key={validation.title}>\n          <Alert variant={validation.level} isInline title={validation.title}>\n            {validation.description}\n            {validation.detail}\n          </Alert>\n        </StackItem>\n      ))}\n    </Stack>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory';\nimport { withHandlePromise } from '@console/internal/components/utils';\nimport { restartHost } from '../../k8s/requests/bare-metal-host';\nimport { BareMetalHostKind } from '../../types';\nimport { PowerOffWarning } from './PowerOffHostModal';\n\nexport type RestartHostModalProps = {\n  host: BareMetalHostKind;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nconst RestartHostModal = ({\n  host,\n  inProgress,\n  errorMessage,\n  handlePromise,\n  close = undefined,\n  cancel = undefined,\n}: RestartHostModalProps) => {\n  const { t } = useTranslation();\n  const onSubmit = React.useCallback(\n    async (event) => {\n      event.preventDefault();\n      const promise = restartHost(host);\n      await handlePromise(promise);\n      return close();\n    },\n    [host, close, handlePromise],\n  );\n\n  return (\n    <form onSubmit={onSubmit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{t('metal3-plugin~Restart Bare Metal Host')}</ModalTitle>\n      <ModalBody>\n        <p>{t('metal3-plugin~The host will be powered off and on again.')}</p>\n        <PowerOffWarning restart />\n      </ModalBody>\n      <ModalSubmitFooter\n        cancel={cancel}\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitDisabled={false}\n        submitText={t('metal3-plugin~Restart')}\n      />\n    </form>\n  );\n};\n\nexport const restartHostModal = createModalLauncher(withHandlePromise(RestartHostModal));\n","import * as React from 'react';\nimport { RebootingIcon } from '@patternfly/react-icons/dist/esm/icons/rebooting-icon';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport {\n  SectionHeading,\n  Timestamp,\n  humanizeDecimalBytes,\n  ResourceLink,\n} from '@console/internal/components/utils';\nimport { NodeModel } from '@console/internal/models';\nimport {\n  referenceForModel,\n  K8sResourceKind,\n  MachineKind,\n  NodeKind,\n} from '@console/internal/module/k8s';\nimport {\n  getName,\n  getMachineNode,\n  getMachineNodeName,\n  getNamespace,\n  getMachineRole,\n  DetailPropertyList,\n  DetailPropertyListItem,\n  SecondaryStatus,\n  DASH,\n} from '@console/shared';\nimport { HOST_REGISTERING_STATES } from '../../constants/bare-metal-host';\nimport {\n  getHostNICs,\n  getHostDescription,\n  getHostBMCAddress,\n  getHostCPU,\n  getHostRAMMiB,\n  getHostTotalStorageCapacity,\n  getHostMachineName,\n  getHostPowerStatus,\n  getHostVendorInfo,\n  getHostMachine,\n  findNodeMaintenance,\n  getHostBios,\n  getHostProvisioningState,\n  getHostBootMACAddress,\n  isHostScheduledForRestart,\n  hasPowerManagement,\n} from '../../selectors';\nimport { getHostStatus } from '../../status/host-status';\nimport { BareMetalHostKind } from '../../types';\nimport BareMetalHostPowerStatusIcon from './BareMetalHostPowerStatusIcon';\nimport BareMetalHostStatus from './BareMetalHostStatus';\nimport MachineLink from './MachineLink';\n\ntype BareMetalHostDetailsProps = {\n  obj: BareMetalHostKind;\n  machines: MachineKind[];\n  nodes: NodeKind[];\n  nodeMaintenances: K8sResourceKind[];\n};\n\nconst BareMetalHostDetails: React.FC<BareMetalHostDetailsProps> = ({\n  obj: host,\n  machines,\n  nodes,\n  nodeMaintenances,\n}) => {\n  const { t } = useTranslation();\n  const { creationTimestamp } = host.metadata;\n  const namespace = getNamespace(host);\n  const nics = getHostNICs(host);\n  const ips = nics.map((nic) => nic.ip).join(', ');\n  const machineName = getHostMachineName(host);\n  const machine = getHostMachine(host, machines);\n  const nodeName = getMachineNodeName(machine);\n  const node = getMachineNode(machine, nodes);\n  const role = getMachineRole(machine);\n  const hostRAM = getHostRAMMiB(host);\n  const RAMGB = hostRAM ? humanizeDecimalBytes(hostRAM * 2 ** 20).string : DASH;\n  const hostStorage = getHostTotalStorageCapacity(host);\n  const totalStorageCapacity = hostStorage ? humanizeDecimalBytes(hostStorage).string : DASH;\n  const description = getHostDescription(host);\n  const powerStatus = getHostPowerStatus(host);\n  const provisioningState = getHostProvisioningState(host);\n  const { count: CPUCount, model: CPUModel } = getHostCPU(host);\n  const { manufacturer, productName, serialNumber } = getHostVendorInfo(host);\n  const bios = getHostBios(host);\n\n  const nodeMaintenance = findNodeMaintenance(nodeMaintenances, nodeName);\n  const status = getHostStatus({ host, machine, node, nodeMaintenance });\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('metal3-plugin~Bare Metal Host Details')} />\n      <div className=\"row\">\n        <div className=\"col-xs-12 col-sm-6\" id=\"name-description-column\">\n          <dl>\n            <dt>{t('metal3-plugin~Name')}</dt>\n            <dd>{getName(host)}</dd>\n            {description && (\n              <>\n                <dt>{t('metal3-plugin~Description')}</dt>\n                <dd>{description}</dd>\n              </>\n            )}\n            <dt>{t('metal3-plugin~Host Addresses')}</dt>\n            <dd>\n              <DetailPropertyList>\n                <DetailPropertyListItem title=\"Management\">\n                  {getHostBMCAddress(host) || DASH}\n                </DetailPropertyListItem>\n                <DetailPropertyListItem title=\"NICs\">{ips}</DetailPropertyListItem>\n                <DetailPropertyListItem title=\"Boot Interface MAC\">\n                  {getHostBootMACAddress(host)}\n                </DetailPropertyListItem>\n              </DetailPropertyList>\n            </dd>\n            {machineName && (\n              <>\n                <dt>{t('metal3-plugin~Machine')}</dt>\n                <dd>\n                  <MachineLink host={host} />\n                </dd>\n              </>\n            )}\n            {nodeName && (\n              <>\n                <dt>{t('metal3-plugin~Node')}</dt>\n                <dd>\n                  <ResourceLink\n                    kind={referenceForModel(NodeModel)}\n                    name={nodeName}\n                    namespace={namespace}\n                    title={nodeName}\n                  />\n                </dd>\n              </>\n            )}\n            <dt>{t('metal3-plugin~Created at')}</dt>\n            <dd>\n              <Timestamp timestamp={creationTimestamp} />\n            </dd>\n          </dl>\n        </div>\n        <div className=\"col-xs-12 col-sm-6\">\n          <dl>\n            <dt>{t('metal3-plugin~Status')}</dt>\n            <dd>\n              <BareMetalHostStatus {...status} nodeMaintenance={nodeMaintenance} host={host} />\n            </dd>\n            {/* power status is not available until host registration/inspection is finished */}\n            {!HOST_REGISTERING_STATES.includes(provisioningState) && (\n              <>\n                <dt>{t('metal3-plugin~Power Status')}</dt>\n                <dd>\n                  {!hasPowerManagement(host) ? (\n                    <SecondaryStatus status={t('metal3-plugin~No power management')} />\n                  ) : (\n                    <>\n                      <StatusIconAndText\n                        title={powerStatus}\n                        icon={<BareMetalHostPowerStatusIcon powerStatus={powerStatus} />}\n                      />\n                      {isHostScheduledForRestart(host) && (\n                        <StatusIconAndText\n                          title={t('metal3-plugin~Restart pending')}\n                          icon={<RebootingIcon />}\n                        />\n                      )}\n                    </>\n                  )}\n                </dd>\n              </>\n            )}\n            {role && (\n              <>\n                <dt>{t('metal3-plugin~Role')}</dt>\n                <dd>{role}</dd>\n              </>\n            )}\n            {(manufacturer || productName) && (\n              <>\n                <dt>{t('metal3-plugin~Model')}</dt>\n                <dd>{_.filter([manufacturer, productName]).join(', ')}</dd>\n              </>\n            )}\n            {bios && (\n              <>\n                <dt>{t('metal3-plugin~Bios')}</dt>\n                <dd>\n                  <DetailPropertyList>\n                    <DetailPropertyListItem title=\"Version\">\n                      {bios.version || DASH}\n                    </DetailPropertyListItem>\n                    <DetailPropertyListItem title=\"Vendor\">\n                      {bios.vendor || DASH}\n                    </DetailPropertyListItem>\n                    <DetailPropertyListItem title=\"Date\">\n                      {bios.date || DASH}\n                    </DetailPropertyListItem>\n                  </DetailPropertyList>\n                </dd>\n              </>\n            )}\n            {serialNumber && (\n              <>\n                <dt>{t('metal3-plugin~Serial Number')}</dt>\n                <dd>{serialNumber}</dd>\n              </>\n            )}\n            {_.get(host, 'status.hardware') && (\n              <>\n                <dt>{t('metal3-plugin~Hardware')}</dt>\n                <dd>\n                  <DetailPropertyList>\n                    <DetailPropertyListItem title={t('metal3-plugin~CPU')}>\n                      {CPUCount ? `${CPUCount}x ${CPUModel}` : DASH}\n                    </DetailPropertyListItem>\n                    <DetailPropertyListItem title={t('metal3-plugin~RAM')}>\n                      {RAMGB}\n                    </DetailPropertyListItem>\n                    <DetailPropertyListItem title={t('metal3-plugin~Storage')}>\n                      {totalStorageCapacity}\n                    </DetailPropertyListItem>\n                  </DetailPropertyList>\n                </dd>\n              </>\n            )}\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BareMetalHostDetails;\n","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { MachineModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { DASH, getNamespace } from '@console/shared';\nimport { getHostMachineName } from '../../selectors';\nimport { BareMetalHostKind } from '../../types';\n\ninterface MachineLinkProps {\n  host: BareMetalHostKind;\n}\n\nconst MachineLink: React.FC<MachineLinkProps> = ({ host }) => {\n  const machineName = getHostMachineName(host);\n  const namespace = getNamespace(host);\n\n  if (machineName) {\n    return (\n      <ResourceLink\n        kind={referenceForModel(MachineModel)}\n        name={machineName}\n        namespace={namespace}\n        title={machineName}\n      />\n    );\n  }\n  return <>{DASH}</>;\n};\n\nexport default MachineLink;\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { humanizeDecimalBytes } from '@console/internal/components/utils';\nimport { getHostStorage } from '../../selectors';\nimport { BareMetalHostDisk, BareMetalHostKind } from '../../types';\n\nconst DisksTableHeader = (t: TFunction) => () => [\n  { title: t('metal3-plugin~Name'), sortField: 'name', transforms: [sortable] },\n  { title: t('metal3-plugin~Size'), sortField: 'sizeBytes', transforms: [sortable] },\n  { title: t('metal3-plugin~Type'), sortField: 'rotational', transforms: [sortable] },\n  { title: t('metal3-plugin~Model'), sortField: 'model', transforms: [sortable] },\n  { title: t('metal3-plugin~Serial Number'), sortField: 'serialNumber', transforms: [sortable] },\n  { title: t('metal3-plugin~Vendor'), sortField: 'vendor', transforms: [sortable] },\n  { title: t('metal3-plugin~HCTL'), sortField: 'hctl', transforms: [sortable] },\n];\n\nconst getRowProps = (obj) => ({\n  id: obj.name,\n});\n\nconst DisksTableRow: React.FC<RowFunctionArgs<BareMetalHostDisk>> = ({ obj }) => {\n  const { hctl, model, name, rotational, serialNumber, sizeBytes, vendor } = obj;\n  const { string: size } = humanizeDecimalBytes(sizeBytes);\n  return (\n    <>\n      <TableData>{name}</TableData>\n      <TableData>{size}</TableData>\n      <TableData>{rotational ? 'Rotational' : 'SSD'}</TableData>\n      <TableData>{model}</TableData>\n      <TableData>{serialNumber}</TableData>\n      <TableData>{vendor}</TableData>\n      <TableData>{hctl}</TableData>\n    </>\n  );\n};\n\ntype BareMetalHostDisksProps = {\n  obj: BareMetalHostKind;\n  loaded: boolean;\n  loadError?: any;\n};\n\nconst BareMetalHostDisks: React.FC<BareMetalHostDisksProps> = ({\n  obj: host,\n  loadError,\n  loaded,\n}) => {\n  const { t } = useTranslation();\n  const disks = getHostStorage(host);\n  return (\n    <div className=\"co-m-list\">\n      <div className=\"co-m-pane__body\">\n        <Table\n          data={disks}\n          aria-label=\"Bare Metal Host Disks\"\n          Header={DisksTableHeader(t)}\n          Row={DisksTableRow}\n          loaded={loaded}\n          loadError={\n            loadError ||\n            (loaded && !host\n              ? { message: t('metal3-plugin~Bare metal host is not available') }\n              : undefined)\n          }\n          getRowProps={getRowProps}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BareMetalHostDisks;\n","import * as React from 'react';\nimport { OutlinedCheckSquareIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-check-square-icon';\nimport { OutlinedSquareIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-square-icon';\nimport { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { getHostNICs } from '../../selectors';\nimport { BareMetalHostNIC, BareMetalHostKind } from '../../types';\n\nconst NICsTableHeader = (t: TFunction) => () => [\n  { title: t('metal3-plugin~Name'), sortField: 'name', transforms: [sortable] },\n  { title: t('metal3-plugin~Model'), sortField: 'model', transforms: [sortable] },\n  { title: t('metal3-plugin~PXE'), sortField: 'pxe', transforms: [sortable] },\n  { title: t('metal3-plugin~IP'), sortField: 'ip', transforms: [sortable] },\n  { title: t('metal3-plugin~Speed'), sortField: 'speedGbps', transforms: [sortable] },\n  { title: t('metal3-plugin~MAC Address'), sortField: 'mac', transforms: [sortable] },\n  { title: t('metal3-plugin~VLAN ID'), sortField: 'vlanId', transforms: [sortable] },\n];\n\nconst getRowProps = (obj) => ({\n  id: obj.ip,\n});\n\nconst NICsTableRow: React.FC<RowFunctionArgs<BareMetalHostNIC>> = ({ obj: nic }) => {\n  const { ip, mac, model, name, pxe, speedGbps, vlanId } = nic;\n  return (\n    <>\n      <TableData>{name}</TableData>\n      <TableData>{model}</TableData>\n      <TableData>{pxe ? <OutlinedCheckSquareIcon /> : <OutlinedSquareIcon />}</TableData>\n      <TableData>{ip}</TableData>\n      <TableData>{speedGbps} Gbps</TableData>\n      <TableData>{mac}</TableData>\n      <TableData>{vlanId}</TableData>\n    </>\n  );\n};\n\ntype BareMetalHostNICsProps = {\n  obj: BareMetalHostKind;\n  loaded: boolean;\n  loadError?: any;\n};\n\nconst BareMetalHostNICs: React.FC<BareMetalHostNICsProps> = ({ obj: host, loadError, loaded }) => {\n  const { t } = useTranslation();\n  const nics = getHostNICs(host);\n  return (\n    <div className=\"co-m-list\">\n      <div className=\"co-m-pane__body\">\n        <Table\n          data={nics}\n          aria-label={t('metal3-plugin~Bare Metal Host NICs')}\n          Header={NICsTableHeader(t)}\n          Row={NICsTableRow}\n          loaded={loaded}\n          loadError={\n            loadError ||\n            (loaded && !host\n              ? { message: t('metal3-plugin~Bare metal host is not available') }\n              : undefined)\n          }\n          getRowProps={getRowProps}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BareMetalHostNICs;\n","import * as React from 'react';\nimport { K8sResourceKind, MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { getMachineNode } from '@console/shared/src/selectors/machine';\nimport { findNodeMaintenance, getHostMachine } from '../../../selectors';\nimport { BareMetalHostKind } from '../../../types';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\nimport DetailsCard from './DetailsCard';\nimport EventsCard from './EventsCard';\nimport InventoryCard from './InventoryCard';\nimport StatusCard from './StatusCard';\nimport UtilizationCard from './UtilizationCard';\n\nconst BareMetalHostDashboard: React.FC<BareMetalHostDashboardProps> = ({\n  obj,\n  machines,\n  nodes,\n  nodeMaintenances,\n  loaded,\n}) => {\n  const machine = getHostMachine(obj, machines);\n  const node = getMachineNode(machine, nodes);\n  const nodeMaintenance = findNodeMaintenance(nodeMaintenances, node?.metadata?.name);\n  const context = {\n    obj,\n    machine,\n    node,\n    nodeMaintenance,\n    loaded,\n  };\n\n  const mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\n  const leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\n  const rightCards = [{ Card: EventsCard }];\n\n  return (\n    <BareMetalHostDashboardContext.Provider value={context}>\n      <Dashboard>\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n      </Dashboard>\n    </BareMetalHostDashboardContext.Provider>\n  );\n};\n\ntype BareMetalHostDashboardProps = {\n  obj: BareMetalHostKind;\n  machines: MachineKind[];\n  nodes: NodeKind[];\n  nodeMaintenances: K8sResourceKind[];\n  loaded: boolean;\n};\n\nexport default BareMetalHostDashboard;\n","import * as React from 'react';\nimport { OverviewDetailItem } from '@openshift-console/plugin-shared/src';\nimport { Card, CardBody, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport { BareMetalHostModel } from '../../../models';\nimport { BareMetalHostKind } from '../../../types';\nimport BareMetalHostRole from '../BareMetalHostRole';\nimport NodeLink from '../NodeLink';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nconst DetailsCard: React.FC<DetailsCardProps> = () => {\n  const { t } = useTranslation();\n  const { obj, machine, node } = React.useContext(BareMetalHostDashboardContext);\n  const hostName = getName(obj);\n  const nodeCell = <NodeLink nodeName={getName(node)} />;\n  const hostRole = <BareMetalHostRole machine={machine} node={node} />;\n\n  return (\n    <Card isClickable isSelectable>\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link\n                to={`${resourcePathFromModel(\n                  BareMetalHostModel,\n                  getName(obj),\n                  getNamespace(obj),\n                )}/details`}\n              >\n                {t('metal3-plugin~View all')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>{t('metal3-plugin~Details')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <DetailsBody>\n          <OverviewDetailItem title={t('metal3-plugin~Host name')} isLoading={false}>\n            {hostName}\n          </OverviewDetailItem>\n          <OverviewDetailItem title={t('metal3-plugin~Role')} isLoading={false}>\n            {hostRole}\n          </OverviewDetailItem>\n          <OverviewDetailItem title={t('metal3-plugin~Node')} isLoading={false}>\n            {nodeCell}\n          </OverviewDetailItem>\n        </DetailsBody>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default DetailsCard;\n\ntype DetailsCardProps = {\n  obj: BareMetalHostKind;\n  machines: MachineKind[];\n  nodes: NodeKind[];\n};\n","import * as React from 'react';\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport {\n  FirehoseResource,\n  FirehoseResult,\n  ResourceLink,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport { EventModel, MachineModel, NodeModel } from '@console/internal/models';\nimport { EventKind, K8sResourceKind, MachineKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace, getMachineNodeName } from '@console/shared';\nimport ActivityBody, {\n  RecentEventsBody,\n  Activity,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport ActivityItem from '@console/shared/src/components/dashboard/activity-card/ActivityItem';\nimport { BareMetalHostModel } from '../../../models';\nimport { isHostInProgressState, getBareMetalHostStatus } from '../../../status/host-status';\nimport { BareMetalHostKind } from '../../../types';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nconst eventsResource: FirehoseResource = { isList: true, kind: EventModel.kind, prop: 'events' };\n\nconst matchesInvolvedObject = (\n  kind: string,\n  name: string,\n  namespace: string,\n  event: EventKind,\n): boolean =>\n  name &&\n  _.isMatch(event.involvedObject, {\n    kind,\n    name,\n    namespace,\n  });\n\nconst hostEventsFilter = (\n  host: BareMetalHostKind,\n  machine: MachineKind,\n  event: EventKind,\n): boolean =>\n  matchesInvolvedObject(BareMetalHostModel.kind, getName(host), getNamespace(host), event) ||\n  matchesInvolvedObject(MachineModel.kind, getName(machine), getNamespace(machine), event) ||\n  matchesInvolvedObject(NodeModel.kind, getMachineNodeName(machine), null, event);\n\nconst getHostEventsFilter = (\n  host: K8sResourceKind,\n  machine: MachineKind,\n): ((event: EventKind) => boolean) => _.partial(hostEventsFilter, host, machine);\n\nconst EventsCard: React.FC<EventsCardProps> = ({\n  watchK8sResource,\n  stopWatchK8sResource,\n  resources,\n}) => {\n  const { t } = useTranslation();\n  const { obj, machine } = React.useContext(BareMetalHostDashboardContext);\n  React.useEffect(() => {\n    watchK8sResource(eventsResource);\n    return () => {\n      stopWatchK8sResource(eventsResource);\n    };\n  }, [watchK8sResource, stopWatchK8sResource]);\n\n  const filter = getHostEventsFilter(obj, machine);\n\n  const inProgress = isHostInProgressState(obj);\n  const hostStatus = getBareMetalHostStatus(obj);\n\n  return (\n    <Card className=\"co-overview-card--gradient\" isClickable isSelectable>\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <Link\n                to={`${resourcePathFromModel(\n                  BareMetalHostModel,\n                  getName(obj),\n                  getNamespace(obj),\n                )}/events`}\n              >\n                {t('metal3-plugin~View events')}\n              </Link>\n            </>\n          ),\n          hasNoOffset: false,\n          className: 'co-overview-card__actions',\n        }}\n      >\n        <CardTitle>Activity</CardTitle>\n      </CardHeader>\n      <ActivityBody>\n        <div className=\"co-activity-card__ongoing-title\">Ongoing</div>\n        <div className=\"co-activity-card__ongoing-body\">\n          {inProgress ? (\n            <Activity timestamp={null}>\n              <ActivityItem>\n                {t(hostStatus.titleKey)}\n                <ResourceLink\n                  kind={BareMetalHostModel.kind}\n                  name={getName(obj)}\n                  namespace={getNamespace(obj)}\n                />\n              </ActivityItem>\n            </Activity>\n          ) : (\n            <Activity>\n              <div className=\"text-secondary\">\n                {t('metal3-plugin~There are no ongoing activities.')}\n              </div>\n            </Activity>\n          )}\n        </div>\n        <RecentEventsBody\n          events={resources.events as FirehoseResult<EventKind[]>}\n          filter={filter}\n        />\n      </ActivityBody>\n    </Card>\n  );\n};\n\nexport default withDashboardResources(EventsCard);\n\ntype EventsCardProps = DashboardItemProps & {\n  obj: BareMetalHostKind;\n};\n","import * as React from 'react';\nimport { Card, CardBody, CardHeader, CardTitle, Stack, StackItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { resourcePathFromModel } from '@console/internal/components/utils/resource-link';\nimport { PodModel, NodeModel } from '@console/internal/models';\nimport { PodKind } from '@console/internal/module/k8s/types';\nimport InventoryItem, {\n  ResourceInventoryItem,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { getPodStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { getNamespace, getName } from '@console/shared/src/selectors/common';\nimport { BareMetalHostModel } from '../../../models';\nimport { getHostStorage, getHostNICs, getHostCPU } from '../../../selectors';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nconst PodInventoryItem: React.FC = () => {\n  const { node, loaded } = React.useContext(BareMetalHostDashboardContext);\n  const nodeName = getName(node);\n\n  const podResource = React.useMemo(\n    () =>\n      loaded && nodeName\n        ? {\n            isList: true,\n            kind: PodModel.kind,\n            fieldSelector: `spec.nodeName=${nodeName}`,\n          }\n        : null,\n    [nodeName, loaded],\n  );\n\n  const [pods, podsLoaded, podsError] = useK8sWatchResource<PodKind[]>(podResource);\n\n  if (!nodeName || !loaded) {\n    return <InventoryItem title={PodModel.label} count={0} isLoading={!loaded} />;\n  }\n\n  const basePath = `${resourcePathFromModel(NodeModel, nodeName)}/pods`;\n\n  return (\n    <ResourceInventoryItem\n      resources={pods}\n      basePath={basePath}\n      mapper={getPodStatusGroups}\n      kind={PodModel}\n      isLoading={!podsLoaded}\n      error={!!podsError}\n    />\n  );\n};\n\nconst InventoryCard: React.FC = () => {\n  const { t } = useTranslation();\n  const { obj } = React.useContext(BareMetalHostDashboardContext);\n\n  const namespace = getNamespace(obj);\n  const hostName = getName(obj);\n\n  const NICTitleComponent = React.useCallback(\n    ({ children }) => (\n      <Link to={`${resourcePathFromModel(BareMetalHostModel, hostName, namespace)}/nics`}>\n        {children}\n      </Link>\n    ),\n    [hostName, namespace],\n  );\n\n  const DiskTitleComponent = React.useCallback(\n    ({ children }) => (\n      <Link to={`${resourcePathFromModel(BareMetalHostModel, hostName, namespace)}/disks`}>\n        {children}\n      </Link>\n    ),\n    [hostName, namespace],\n  );\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{t('metal3-plugin~Inventory')}</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <Stack hasGutter>\n          <StackItem>\n            <PodInventoryItem />\n          </StackItem>\n          <StackItem>\n            <InventoryItem\n              title={t('metal3-plugin~Disk')}\n              isLoading={!obj}\n              count={getHostStorage(obj).length}\n              TitleComponent={DiskTitleComponent}\n            />\n          </StackItem>\n          <StackItem>\n            <InventoryItem\n              title={t('metal3-plugin~NIC')}\n              isLoading={!obj}\n              count={getHostNICs(obj).length}\n              TitleComponent={NICTitleComponent}\n            />\n          </StackItem>\n          <StackItem>\n            <InventoryItem\n              title={t('metal3-plugin~CPU')}\n              isLoading={!obj}\n              count={getHostCPU(obj).count}\n            />\n          </StackItem>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default InventoryCard;\n","import * as React from 'react';\nimport {\n  Gallery,\n  GalleryItem,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n} from '@patternfly/react-core';\nimport { RebootingIcon } from '@patternfly/react-icons/dist/esm/icons/rebooting-icon';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { Alert, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { alertURL } from '@console/internal/components/monitoring/utils';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { BlueInfoCircleIcon } from '@console/shared';\nimport AlertItem, {\n  StatusItem,\n} from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport {\n  HOST_STATUS_DESCRIPTION_KEYS,\n  HOST_HARDWARE_ERROR_STATES,\n  HOST_STATUS_UNMANAGED,\n  HOST_REGISTERING_STATES,\n} from '../../../constants';\nimport { BareMetalHostModel } from '../../../models';\nimport {\n  getHostPowerStatus,\n  getHostProvisioningState,\n  hasPowerManagement,\n  isHostScheduledForRestart,\n} from '../../../selectors';\nimport { getBareMetalHostStatus, getHostStatus } from '../../../status/host-status';\nimport { BareMetalHostKind } from '../../../types';\nimport BareMetalHostPowerStatusIcon from '../BareMetalHostPowerStatusIcon';\nimport BareMetalHostStatus from '../BareMetalHostStatus';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nimport './status.scss';\n\nconst getHostHardwareHealthState = (obj): HostHealthState => {\n  const { status, titleKey } = getBareMetalHostStatus(obj);\n\n  return HOST_HARDWARE_ERROR_STATES.includes(status)\n    ? {\n        state: HealthState.ERROR,\n        titleKey,\n      }\n    : {\n        titleKey: '',\n        state: HealthState.OK,\n      };\n};\n\nconst filterAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'labels.hwalert'));\n\nconst HealthCard: React.FC<HealthCardProps> = ({\n  watchAlerts,\n  stopWatchAlerts,\n  notificationAlerts,\n}) => {\n  const { t } = useTranslation();\n  const { obj, machine, node, nodeMaintenance } = React.useContext(BareMetalHostDashboardContext);\n\n  React.useEffect(() => {\n    watchAlerts();\n    return () => stopWatchAlerts();\n  }, [watchAlerts, stopWatchAlerts]);\n\n  const status = getHostStatus({ host: obj, machine, node, nodeMaintenance });\n\n  const hwHealth = getHostHardwareHealthState(obj);\n\n  const { data, loaded, loadError } = notificationAlerts || {};\n  const alerts = React.useMemo(() => filterAlerts(data), [data]);\n\n  const hasPowerMgmt = hasPowerManagement(obj);\n  const provisioningState = getHostProvisioningState(obj);\n  const powerStatus = getHostPowerStatus(obj);\n  const restartScheduled = isHostScheduledForRestart(obj);\n\n  return (\n    <Card className=\"co-overview-card--gradient\">\n      <CardHeader>\n        <CardTitle>Status</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" hasGutter>\n            <GalleryItem className=\"bmh-health__status-item\">\n              <BareMetalHostStatus\n                {...status}\n                nodeMaintenance={nodeMaintenance}\n                host={obj}\n                className=\"bmh-health__status\"\n              />\n            </GalleryItem>\n            <GalleryItem>\n              <HealthItem\n                title={t('metal3-plugin~Hardware')}\n                state={hwHealth.state}\n                details={t(hwHealth.titleKey)}\n              />\n            </GalleryItem>\n            {!HOST_REGISTERING_STATES.includes(provisioningState) && (\n              <GalleryItem>\n                {!hasPowerMgmt ? (\n                  <HealthItem\n                    title={t('metal3-plugin~No power management')}\n                    state={HealthState.NOT_AVAILABLE}\n                  />\n                ) : (\n                  <StatusIconAndText\n                    title={restartScheduled ? t('metal3-plugin~Restart pending') : powerStatus}\n                    icon={\n                      restartScheduled ? (\n                        <RebootingIcon />\n                      ) : (\n                        <BareMetalHostPowerStatusIcon powerStatus={powerStatus} />\n                      )\n                    }\n                    className=\"bmh-health__status\"\n                  />\n                )}\n              </GalleryItem>\n            )}\n          </Gallery>\n        </HealthBody>\n        <AlertsBody error={!_.isEmpty(loadError)}>\n          {!hasPowerMgmt && (\n            <StatusItem\n              Icon={BlueInfoCircleIcon}\n              message={t(HOST_STATUS_DESCRIPTION_KEYS[HOST_STATUS_UNMANAGED])}\n            >\n              <Link\n                to={`${resourcePathFromModel(\n                  BareMetalHostModel,\n                  obj.metadata.name,\n                  obj.metadata.namespace,\n                )}/edit?powerMgmt`}\n              >\n                Add credentials\n              </Link>\n            </StatusItem>\n          )}\n          {loaded && alerts.length !== 0\n            ? alerts.map((alert) => (\n                <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />\n              ))\n            : null}\n        </AlertsBody>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default withDashboardResources(HealthCard);\n\ntype HostHealthState = {\n  state: HealthState;\n  titleKey: string;\n};\n\ntype HealthCardProps = DashboardItemProps & {\n  obj: BareMetalHostKind;\n};\n","import * as React from 'react';\nimport { Card, CardHeader, CardTitle } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PrometheusUtilizationItem,\n  PrometheusMultilineUtilizationItem,\n} from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/utilization-card';\nimport {\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n} from '@console/internal/components/utils';\nimport { PodModel, ProjectModel } from '@console/internal/models';\nimport { getMachineNodeName } from '@console/shared';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { UtilizationDurationDropdown } from '@console/shared/src/components/dashboard/utilization-card/UtilizationDurationDropdown';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\nimport {\n  getUtilizationQueries,\n  HostQuery,\n  getTopConsumerQueries,\n  getMultilineUtilizationQueries,\n} from './queries';\n\nconst UtilizationCard: React.FC = () => {\n  const { t } = useTranslation();\n  const { machine } = React.useContext(BareMetalHostDashboardContext);\n  const nodeName = getMachineNodeName(machine);\n\n  const queries = React.useMemo(() => getUtilizationQueries(nodeName), [nodeName]);\n  const multilineQueries = React.useMemo(() => getMultilineUtilizationQueries(nodeName), [\n    nodeName,\n  ]);\n\n  const humanizePods = React.useCallback(\n    (v) => ({\n      string: `${v}`,\n      value: v as number,\n      unit: '',\n    }),\n    [],\n  );\n\n  const cpuPopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title={t('metal3-plugin~CPU')}\n          current={current}\n          humanize={humanizeCpuCores}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_CPU],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_CPU],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName, t],\n  );\n\n  const memPopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title={t('metal3-plugin~Memory')}\n          current={current}\n          humanize={humanizeBinaryBytes}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_MEMORY],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_MEMORY],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName, t],\n  );\n\n  const storagePopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title={t('metal3-plugin~Disk Usage')}\n          current={current}\n          humanize={humanizeBinaryBytes}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_STORAGE],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_STORAGE],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName, t],\n  );\n\n  return (\n    <Card isClickable isSelectable>\n      <CardHeader\n        actions={{\n          actions: (\n            <>\n              <UtilizationDurationDropdown />\n            </>\n          ),\n          hasNoOffset: false,\n          className: undefined,\n        }}\n      >\n        <CardTitle>{t('metal3-plugin~Utilization')}</CardTitle>\n      </CardHeader>\n      <UtilizationBody>\n        <PrometheusUtilizationItem\n          title={t('metal3-plugin~CPU')}\n          utilizationQuery={queries[HostQuery.CPU_UTILIZATION].utilization}\n          humanizeValue={humanizeCpuCores}\n          TopConsumerPopover={cpuPopover}\n        />\n        <PrometheusUtilizationItem\n          title={t('metal3-plugin~Memory')}\n          utilizationQuery={queries[HostQuery.MEMORY_UTILIZATION].utilization}\n          totalQuery={queries[HostQuery.MEMORY_UTILIZATION].total}\n          humanizeValue={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={memPopover}\n        />\n        <PrometheusUtilizationItem\n          title={t('metal3-plugin~Filesystem')}\n          utilizationQuery={queries[HostQuery.STORAGE_UTILIZATION].utilization}\n          totalQuery={queries[HostQuery.STORAGE_UTILIZATION].total}\n          humanizeValue={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={storagePopover}\n        />\n        <PrometheusMultilineUtilizationItem\n          title={t('metal3-plugin~Network Transfer')}\n          queries={multilineQueries[HostQuery.NETWORK_UTILIZATION]}\n          humanizeValue={humanizeDecimalBytesPerSec}\n        />\n        <PrometheusUtilizationItem\n          title={t('metal3-plugin~Pod count')}\n          utilizationQuery={queries[HostQuery.NUMBER_OF_PODS].utilization}\n          humanizeValue={humanizePods}\n        />\n      </UtilizationBody>\n    </Card>\n  );\n};\n\nexport default UtilizationCard;\n","import * as _ from 'lodash';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\n\nexport enum HostQuery {\n  CPU_UTILIZATION = 'CPU_UTILIZATION',\n  MEMORY_UTILIZATION = 'MEMORY_UTILIZATION',\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  STORAGE_UTILIZATION = 'STORAGE_UTILIZATION',\n  STORAGE_TOTAL = 'STORAGE_TOTAL',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  NUMBER_OF_PODS = 'NUMBER_OF_PODS',\n  NUMBER_OF_FANS = 'NUMBER_OF_FANS',\n  NUMBER_OF_PSUS = 'NUMBER_OF_PSUS',\n\n  // popover queries\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_STORAGE = 'PODS_BY_STORAGE',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_STORAGE = 'PROJECTS_BY_STORAGE',\n}\n\nconst nodeQueriesByNodeName = {\n  [HostQuery.CPU_UTILIZATION]: _.template(`instance:node_cpu:rate:sum{instance=~'<%= node %>'}`),\n  [HostQuery.MEMORY_UTILIZATION]: _.template(`node_memory_Active_bytes{instance=~'<%= node %>'}`),\n  [HostQuery.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance=~'<%= node %>'}`),\n  [HostQuery.STORAGE_UTILIZATION]: _.template(\n    `sum(max by (device) (node_filesystem_size_bytes{instance='<%= node %>', device=~\"/.*\"})) - sum(max by (device) (node_filesystem_avail_bytes{instance='<%= node %>', device=~\"/.*\"}))`,\n  ),\n  [HostQuery.STORAGE_TOTAL]: _.template(\n    `sum(max by (device) (node_filesystem_size_bytes{instance='<%= node %>', device=~\"/.*\"}))`,\n  ),\n  [HostQuery.NETWORK_IN_UTILIZATION]: _.template(\n    `instance:node_network_receive_bytes:rate:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.NETWORK_OUT_UTILIZATION]: _.template(\n    `instance:node_network_transmit_bytes:rate:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.NUMBER_OF_PODS]: _.template(`kubelet_running_pods{node='<%= node %>'}`),\n  [HostQuery.PODS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (pod, namespace)))`,\n  ),\n  [HostQuery.PROJECTS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (namespace)))`,\n  ),\n  [HostQuery.PODS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (pod, namespace)))`,\n  ),\n  [HostQuery.PROJECTS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (namespace)))`,\n  ),\n  [HostQuery.PODS_BY_STORAGE]: _.template(\n    `topk(25, sort_desc(avg by (pod, namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`,\n  ),\n  [HostQuery.PROJECTS_BY_STORAGE]: _.template(\n    `topk(25, sort_desc(avg by (namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`,\n  ),\n};\n\n// TODO(jtomasek): enable and use these once ironic-exporter is available\n// const nodeQueriesByHostName = {\n//   [HostQuery.NUMBER_OF_FANS]: _.template(`baremetal_fan_rpm`),\n//   [HostQuery.NUMBER_OF_PSUS]: _.template(`baremetal_current`),\n// };\n\nconst getQuery = (node: string, query: _.TemplateExecutor): string => query({ node });\n\nexport const getUtilizationQueries = (nodeName: string): HostUtilizationQueryType => ({\n  [HostQuery.CPU_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.CPU_UTILIZATION]),\n  },\n  [HostQuery.MEMORY_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_UTILIZATION]),\n    total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_TOTAL]),\n  },\n  [HostQuery.STORAGE_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_UTILIZATION]),\n    total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_TOTAL]),\n  },\n  [HostQuery.NUMBER_OF_PODS]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NUMBER_OF_PODS]),\n  },\n});\n\nexport const getMultilineUtilizationQueries = (nodeName: string) => ({\n  [HostQuery.NETWORK_UTILIZATION]: [\n    {\n      query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_IN_UTILIZATION]),\n      desc: 'in',\n    },\n    {\n      query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_OUT_UTILIZATION]),\n      desc: 'out',\n    },\n  ],\n});\n\ntype HostQueryType = {\n  [key: string]: string;\n};\n\ntype HostUtilizationQueryType = {\n  [key: string]: { utilization: string; total?: string };\n};\n\nexport const getHostQueryResultError = (result: PrometheusResponse): boolean =>\n  _.get(result, 'status', '') !== 'success';\n\nexport const getTopConsumerQueries = (nodeName: string): HostQueryType => ({\n  [HostQuery.PODS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_CPU]),\n  [HostQuery.PROJECTS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PROJECTS_BY_CPU]),\n  [HostQuery.PODS_BY_MEMORY]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_MEMORY]),\n  [HostQuery.PROJECTS_BY_MEMORY]: getQuery(\n    nodeName,\n    nodeQueriesByNodeName[HostQuery.PROJECTS_BY_MEMORY],\n  ),\n  [HostQuery.PODS_BY_STORAGE]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_STORAGE]),\n  [HostQuery.PROJECTS_BY_STORAGE]: getQuery(\n    nodeName,\n    nodeQueriesByNodeName[HostQuery.PROJECTS_BY_STORAGE],\n  ),\n});\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport * as Yup from 'yup';\nimport { WatchK8sResource } from '@console/dynamic-plugin-sdk';\nimport {\n  history,\n  resourcePathFromModel,\n  LoadingBox,\n  LoadError,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { SecretModel } from '@console/internal/models';\nimport { referenceForModel, SecretKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared';\nimport { usePrevious } from '@console/shared/src/hooks/previous';\nimport { createBareMetalHost, updateBareMetalHost } from '../../../k8s/requests/bare-metal-host';\nimport { BareMetalHostModel } from '../../../models';\nimport {\n  getHostBMCAddress,\n  getHostBootMACAddress,\n  getHostDisableCertificateVerification,\n  getHostDescription,\n  isHostOnline,\n} from '../../../selectors';\nimport { getSecretPassword, getSecretUsername } from '../../../selectors/secret';\nimport { BareMetalHostKind } from '../../../types';\nimport { MAC_REGEX, BMC_ADDRESS_REGEX } from '../../../validations/regex';\nimport { nameValidationSchema } from '../../../validations/validations';\nimport AddBareMetalHostForm from './AddBareMetalHostForm';\nimport { AddBareMetalHostFormValues } from './types';\n\nconst getInitialValues = (\n  host: BareMetalHostKind,\n  secret: SecretKind,\n  isEditing: boolean,\n  enablePowerMgmt: boolean,\n): AddBareMetalHostFormValues => ({\n  name: getName(host) || '',\n  BMCAddress: getHostBMCAddress(host) || '',\n  username: getSecretUsername(secret) || '',\n  password: getSecretPassword(secret) || '',\n  disableCertificateVerification: getHostDisableCertificateVerification(host) || false,\n  bootMACAddress: getHostBootMACAddress(host) || '',\n  online: isHostOnline(host) || true,\n  description: getHostDescription(host) || '',\n  enablePowerManagement: isEditing\n    ? !!host?.spec?.bmc?.address || !!host?.spec?.bmc?.credentialsName || enablePowerMgmt\n    : true,\n  bootMode: host?.spec?.bootMode || 'UEFI',\n});\n\ntype AddBareMetalHostProps = {\n  namespace: string;\n  name?: string;\n  enablePowerMgmt: boolean;\n};\n\nconst AddBareMetalHost: React.FC<AddBareMetalHostProps> = ({\n  namespace,\n  name,\n  enablePowerMgmt,\n}) => {\n  const { t } = useTranslation();\n  const bmhResource = React.useMemo<WatchK8sResource>(\n    () =>\n      name\n        ? {\n            kind: referenceForModel(BareMetalHostModel),\n            namespace,\n            name,\n          }\n        : undefined,\n    [name, namespace],\n  );\n  const bmhResources = React.useMemo<WatchK8sResource>(\n    () =>\n      !name\n        ? {\n            kind: referenceForModel(BareMetalHostModel),\n            namespace,\n            isList: true,\n          }\n        : undefined,\n    [name, namespace],\n  );\n  const [host, hostLoaded, hostError] = useK8sWatchResource<BareMetalHostKind>(bmhResource);\n  const [hosts, hostsLoaded, hostsError] = useK8sWatchResource<BareMetalHostKind[]>(bmhResources);\n\n  const credentialsName = host?.spec?.bmc?.credentialsName;\n  const secretResource = React.useMemo<WatchK8sResource>(\n    () =>\n      credentialsName\n        ? {\n            kind: SecretModel.kind,\n            namespace,\n            name: credentialsName,\n          }\n        : undefined,\n    [credentialsName, namespace],\n  );\n  const [secret, secretLoaded, secretError] = useK8sWatchResource<SecretKind>(secretResource);\n\n  const [reload, setReload] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    if (reload) {\n      setReload(false);\n    }\n  }, [reload, setReload]);\n\n  const initialHost = usePrevious<BareMetalHostKind>(host, [hostLoaded, reload]);\n  const initialSecret = usePrevious<SecretKind>(secret, [secretLoaded, reload]);\n\n  if (name ? !hostLoaded || (secretResource ? !secretLoaded : false) : !hostsLoaded) {\n    return <LoadingBox />;\n  }\n\n  if (hostError || secretError || hostsError) {\n    return <LoadError label={t('metal3-plugin~resources')} />;\n  }\n\n  const hostNames = !name ? hosts.map(getName) : [];\n\n  const initialValues = getInitialValues(host, secret, !!name, enablePowerMgmt);\n  const prevInitialValues = getInitialValues(initialHost, initialSecret, !!name, enablePowerMgmt);\n\n  const showUpdated =\n    (credentialsName ? !_.isEmpty(initialSecret) : true) &&\n    !_.isEmpty(initialHost) &&\n    !_.isEqual(prevInitialValues, initialValues);\n\n  const addHostValidationSchema = Yup.lazy(({ enablePowerManagement }) =>\n    Yup.object().shape({\n      name: Yup.mixed()\n        .test(\n          'unique-name',\n          t('metal3-plugin~Name \"${value}\" is already taken.'), // eslint-disable-line no-template-curly-in-string\n          (value) => !hostNames.includes(value),\n        )\n        .concat(nameValidationSchema(t)),\n      BMCAddress: enablePowerManagement\n        ? Yup.string()\n            .matches(\n              BMC_ADDRESS_REGEX,\n              t('metal3-plugin~Value provided is not a valid BMC address'),\n            )\n            .required(t('metal3-plugin~Required.'))\n        : undefined,\n      username: enablePowerManagement\n        ? Yup.string().required(t('metal3-plugin~Required.'))\n        : undefined,\n      password: enablePowerManagement\n        ? Yup.string().required(t('metal3-plugin~Required.'))\n        : undefined,\n      bootMACAddress: Yup.string()\n        .matches(MAC_REGEX, t('metal3-plugin~Value provided is not a valid MAC Address.'))\n        .required(t('metal3-plugin~Required.')),\n    }),\n  );\n\n  const handleSubmit = (\n    values: AddBareMetalHostFormValues,\n    actions: FormikHelpers<AddBareMetalHostFormValues>,\n  ) => {\n    const opts = { ...values, namespace };\n    const promise = name\n      ? updateBareMetalHost(\n          _.isEmpty(initialHost) ? host : initialHost,\n          _.isEmpty(initialSecret) ? secret : initialSecret,\n          opts,\n        )\n      : createBareMetalHost(opts);\n\n    return promise\n      .then(() => {\n        history.push(resourcePathFromModel(BareMetalHostModel, values.name, namespace));\n      })\n      .catch((error) => {\n        actions.setStatus({ submitError: error.message });\n      });\n  };\n\n  const isEditing = !!name;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      enableReinitialize={!!name && reload}\n      onSubmit={handleSubmit}\n      onReset={() => setReload(true)}\n      validationSchema={addHostValidationSchema}\n      validateOnMount={isEditing}\n      initialTouched={\n        isEditing\n          ? Object.keys(initialValues).reduce((acc, curr) => {\n              acc[curr] = true;\n              return acc;\n            }, {})\n          : undefined\n      }\n    >\n      {(props) => (\n        <AddBareMetalHostForm {...props} isEditing={isEditing} showUpdated={showUpdated} />\n      )}\n    </Formik>\n  );\n};\n\nexport default AddBareMetalHost;\n","import { SecretKind } from '@console/internal/module/k8s/types';\n\nexport const getSecretUsername = (secret: SecretKind): string =>\n  secret && secret.data && atob(secret.data.username);\nexport const getSecretPassword = (secret: SecretKind): string =>\n  secret && secret.data && atob(secret.data.password);\n","import { TFunction } from 'react-i18next';\nimport * as yup from 'yup';\nimport { RESOURCE_NAME_REGEX } from './regex';\n\nexport const nameValidationSchema = (t: TFunction<'metal3-plugin'>, maxLength = 263) =>\n  yup\n    .string()\n    .matches(RESOURCE_NAME_REGEX, {\n      message: t(\n        'metal3-plugin~Name must consist of lower case alphanumeric characters, hyphens or dots, and must start and end with an alphanumeric character.',\n      ),\n      excludeEmptyString: true,\n    })\n    .max(\n      maxLength,\n      // see https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n      t('metal3-plugin~Cannot be longer than {{characterCount}} characters.', {\n        characterCount: maxLength,\n      }),\n    )\n    .required(t('metal3-plugin~Required'));\n","import * as React from 'react';\nimport { Form, TextInputTypes } from '@patternfly/react-core';\nimport { FormikProps } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { history } from '@console/internal/components/utils';\nimport {\n  InputField,\n  TextAreaField,\n  SwitchField,\n  FormFooter,\n  CheckboxField,\n  FormSelectField,\n} from '@console/shared/src';\nimport { AddBareMetalHostFormValues } from './types';\n\ntype AddBareMetalHostFormProps = FormikProps<AddBareMetalHostFormValues> & {\n  isEditing: boolean;\n  showUpdated: boolean;\n};\n\nconst AddBareMetalHostForm: React.FC<AddBareMetalHostFormProps> = ({\n  errors,\n  handleSubmit,\n  handleReset,\n  status,\n  isSubmitting,\n  dirty,\n  isEditing,\n  showUpdated,\n  values,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputField\n        type={TextInputTypes.text}\n        data-test-id=\"add-baremetal-host-form-name-input\"\n        name=\"name\"\n        label={t('metal3-plugin~Name')}\n        placeholder=\"openshift-worker\"\n        helpText={t('metal3-plugin~Provide a unique name for the new Bare Metal Host.')}\n        required\n        isDisabled={isEditing}\n      />\n      <TextAreaField\n        data-test-id=\"add-baremetal-host-form-description-input\"\n        name=\"description\"\n        label={t('metal3-plugin~Description')}\n      />\n      <FormSelectField\n        data-test-id=\"add-baremetal-host-form-bootmode-input\"\n        name=\"bootMode\"\n        label={t('metal3-plugin~Boot mode')}\n        options={[\n          {\n            value: 'UEFI',\n            label: 'UEFI',\n          },\n          {\n            value: 'UEFISecureBoot',\n            label: 'UEFISecureBoot',\n          },\n          {\n            value: 'legacy',\n            label: 'Legacy',\n          },\n        ]}\n      />\n      <InputField\n        type={TextInputTypes.text}\n        data-test-id=\"add-baremetal-host-form-boot-mac-address-input\"\n        name=\"bootMACAddress\"\n        label={t('metal3-plugin~Boot MAC Address')}\n        helpText={t(\n          'metal3-plugin~The MAC address of the NIC connected to the network that will be used to provision the host.',\n        )}\n        required\n      />\n      <CheckboxField\n        data-test-id=\"add-baremetal-host-form-enable-power-mgmt-input\"\n        name=\"enablePowerManagement\"\n        label={t('metal3-plugin~Enable power management')}\n        helpText={t(\n          'metal3-plugin~Provide credentials for the hosts baseboard management controller (BMC) device to enable OpenShift to control its power state. This is required for automatic machine health check remediation.',\n        )}\n      />\n      {values.enablePowerManagement && (\n        <>\n          <InputField\n            type={TextInputTypes.text}\n            data-test-id=\"add-baremetal-host-form-bmc-address-input\"\n            name=\"BMCAddress\"\n            label={t('metal3-plugin~Baseboard Management Console (BMC) Address')}\n            helpText={t(\n              'metal3-plugin~The URL for communicating with the hosts baseboard management controller device.',\n            )}\n            required\n          />\n          <CheckboxField\n            data-test-id=\"add-baremetal-host-form-disable-certificate-verification-input\"\n            name=\"disableCertificateVerification\"\n            label={t('metal3-plugin~Disable Certificate Verification')}\n            helpText={t(\n              'metal3-plugin~Disable verification of server certificates when using HTTPS to connect to the BMC. This is required when the server certificate is self-signed, but is insecure because it allows a man-in-the-middle to intercept the connection.',\n            )}\n          />\n          <InputField\n            type={TextInputTypes.text}\n            data-test-id=\"add-baremetal-host-form-username-input\"\n            name=\"username\"\n            label={t('metal3-plugin~BMC Username')}\n            required\n          />\n          <InputField\n            type={TextInputTypes.password}\n            data-test-id=\"add-baremetal-host-form-password-input\"\n            name=\"password\"\n            label={t('metal3-plugin~BMC Password')}\n            required\n          />\n          {!isEditing && (\n            <SwitchField\n              name=\"online\"\n              data-test-id=\"add-baremetal-host-form-online-switch\"\n              label={t('metal3-plugin~Power host on after creation')}\n            />\n          )}\n        </>\n      )}\n      <FormFooter\n        isSubmitting={isSubmitting}\n        handleReset={showUpdated && handleReset}\n        handleCancel={history.goBack}\n        submitLabel={isEditing ? t('metal3-plugin~Save') : t('metal3-plugin~Create')}\n        errorMessage={status && status.submitError}\n        disableSubmit={isSubmitting || !dirty || !_.isEmpty(errors)}\n        infoTitle={t('metal3-plugin~Bare Metal Host has been updated')}\n        infoMessage={t('metal3-plugin~Click reload to see the recent changes')}\n        showAlert={showUpdated}\n      />\n    </Form>\n  );\n};\n\nexport default AddBareMetalHostForm;\n","import { nodeStatus } from '@console/app/src/status/node';\nimport { volumeSnapshotStatus } from '@console/app/src/status/snapshot';\nimport { podPhaseFilterReducer } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from './InventoryItem';\nimport { InventoryStatusGroup } from './status-group';\n\nconst POD_PHASE_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Running', 'Succeeded'],\n  [InventoryStatusGroup.ERROR]: ['CrashLoopBackOff', 'Failed'],\n  [InventoryStatusGroup.PROGRESS]: ['Terminating', 'Pending'],\n  [InventoryStatusGroup.WARN]: ['Unknown'],\n};\n\nconst PVC_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.ERROR]: ['Lost'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n};\n\nconst PV_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Available', 'Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nconst NODE_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n};\n\nconst VS_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n  [InventoryStatusGroup.ERROR]: ['Error'],\n};\n\nexport const getStatusGroups = (resources, mapping, mapper, filterType) => {\n  const groups = {\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [],\n      count: 0,\n    },\n  };\n  Object.keys(mapping).forEach((key) => {\n    groups[key] = {\n      statusIDs: [...mapping[key]],\n      count: 0,\n      filterType,\n    };\n  });\n\n  resources.forEach((resource) => {\n    const status = mapper(resource);\n    const group =\n      Object.keys(mapping).find((key) => mapping[key].includes(status)) ||\n      InventoryStatusGroup.UNKNOWN;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n\nexport const getPodStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, POD_PHASE_GROUP_MAPPING, podPhaseFilterReducer, 'pod-status');\nexport const getNodeStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, NODE_STATUS_GROUP_MAPPING, nodeStatus, 'node-status');\nexport const getPVCStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PVC_STATUS_GROUP_MAPPING, (pvc) => pvc.status.phase, 'pvc-status');\nexport const getPVStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PV_STATUS_GROUP_MAPPING, (pv) => pv.status.phase, 'pv-status');\nexport const getVSStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, VS_STATUS_GROUP_MAPPING, volumeSnapshotStatus, 'snapshot-status');\n","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useLocation } from 'react-router-dom-v5-compat';\nimport AddBareMetalHost from './AddBareMetalHost';\n\nconst AddBareMetalHostPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const { name, ns: namespace } = useParams();\n  const enablePowerMgmt = new URLSearchParams(location.search).has('powerMgmt');\n\n  const isEditing = !!name;\n  const title = isEditing\n    ? t('metal3-plugin~Edit Bare Metal Host')\n    : t('metal3-plugin~Add Bare Metal Host');\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-pane__body co-m-pane__form\">\n        {/* TODO(jtomasek): Turn this to PageHeading alternative for create forms (e.g.\n        CreateResourceFormPageHeading) */}\n        <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n          <div className=\"co-m-pane__name\">{title}</div>\n        </h1>\n        {!isEditing && (\n          <p className=\"co-m-pane__explanation\">\n            {t('metal3-plugin~Expand the hardware inventory by registering a new Bare Metal Host.')}\n          </p>\n        )}\n        <AddBareMetalHost namespace={namespace} name={name} enablePowerMgmt={enablePowerMgmt} />\n      </div>\n    </>\n  );\n};\n\nexport default AddBareMetalHostPage;\n","import * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport * as PropTypes from 'prop-types';\n\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent } from '../utils';\n\nclass ConfirmModal extends PromiseComponent {\n  constructor(props) {\n    super(props);\n    this._submit = this._submit.bind(this);\n    this._cancel = this.props.cancel.bind(this);\n  }\n\n  _submit(event) {\n    event.preventDefault();\n\n    this.handlePromise(\n      this.props.executeFn(null, {\n        supressNotifications: true,\n      }),\n    ).then(this.props.close);\n  }\n\n  render() {\n    const {\n      title,\n      titleKey,\n      message,\n      messageKey,\n      btnText,\n      btnTextKey,\n      cancelText,\n      cancelTextKey,\n      submitDanger,\n    } = this.props;\n\n    return (\n      <Translation>\n        {(t) => (\n          <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n            <ModalTitle>{titleKey ? t(titleKey) : title}</ModalTitle>\n            <ModalBody>{messageKey ? t(messageKey) : message}</ModalBody>\n            <ModalSubmitFooter\n              errorMessage={this.state.errorMessage}\n              inProgress={this.state.inProgress}\n              submitText={btnTextKey ? t(btnTextKey) : btnText || t('Confirm')}\n              cancel={this._cancel}\n              cancelText={cancelTextKey ? t(cancelTextKey) : cancelText || t('Cancel')}\n              submitDanger={submitDanger}\n            />\n          </form>\n        )}\n      </Translation>\n    );\n  }\n}\nConfirmModal.propTypes = {\n  btnText: PropTypes.node,\n  btnTextKey: PropTypes.string,\n  cancel: PropTypes.func.isRequired,\n  cancelText: PropTypes.node,\n  cancelTextKey: PropTypes.string,\n  close: PropTypes.func.isRequired,\n  executeFn: PropTypes.func.isRequired,\n  message: PropTypes.node,\n  messageKey: PropTypes.string,\n  title: PropTypes.node,\n  titleKey: PropTypes.string,\n  submitDanger: PropTypes.bool,\n};\n\nexport const confirmModal = createModalLauncher(ConfirmModal);\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { FirehoseResource, FirehoseResult } from '@console/internal/components/utils';\nimport { MachineModel, MachineSetModel, NodeModel } from '@console/internal/models';\nimport {\n  MachineKind,\n  MachineSetKind,\n  NodeKind,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { getName, createLookup, getNodeMachineName } from '@console/shared';\nimport { useMaintenanceCapability } from '../../hooks/useMaintenanceCapability';\nimport { BareMetalHostModel } from '../../models';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../selectors';\nimport { getMachineMachineSetOwner } from '../../selectors/machine';\nimport { getHostStatus } from '../../status/host-status';\nimport { BareMetalHostKind } from '../../types';\nimport { BareMetalHostBundle } from '../types';\nimport BareMetalHostsTable from './BareMetalHostsTable';\nimport { hostStatusFilter } from './table-filters';\n\ntype Resources = {\n  hosts: FirehoseResult<BareMetalHostKind[]>;\n  machines: FirehoseResult<MachineKind[]>;\n  machineSets: FirehoseResult<MachineSetKind[]>;\n  nodes: FirehoseResult<NodeKind[]>;\n  nodeMaintenances: FirehoseResult;\n};\n\nconst flattenResources = (resources: Resources) => {\n  // TODO(jtomasek): Remove loaded check once ListPageWrapper_ is updated to call flatten only\n  // when resources are loaded\n  const loaded = _.every(resources, (resource) =>\n    resource.optional ? resource.loaded || !_.isEmpty(resource.loadError) : resource.loaded,\n  );\n\n  if (loaded) {\n    const { hosts, machines, machineSets, nodes, nodeMaintenances } = resources;\n    const hostsData = hosts?.data || [];\n    const machinesData = machines?.data || [];\n\n    const maintenancesByNodeName = createLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n    const nodesByMachineName = createLookup(nodes, getNodeMachineName);\n    const machineSetByUID = createLookup(machineSets);\n\n    return hostsData.map(\n      (host): BareMetalHostBundle => {\n        // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n        // on machines\n        const machine = getHostMachine(host, machinesData);\n        const node = nodesByMachineName[getName(machine)];\n        const nodeMaintenance = maintenancesByNodeName[getName(node)];\n        const machineOwner = getMachineMachineSetOwner(machine);\n        const machineSet = machineOwner && machineSetByUID[machineOwner.uid];\n\n        const status = getHostStatus({ host, machine, node, nodeMaintenance });\n        // TODO(jtomasek): metadata.name is needed to make 'name' textFilter work.\n        // Remove it when it is possible to pass custom textFilter as a function\n        return {\n          metadata: { name: getName(host) },\n          host,\n          machine,\n          node,\n          nodeMaintenance,\n          machineSet,\n          status,\n        };\n      },\n    );\n  }\n  return [];\n};\n\ntype BareMetalHostsPageProps = {\n  namespace: string;\n};\n\nconst getCreateProps = ({ namespace, t }: { namespace: string; t: TFunction }) => {\n  const items: any = {\n    dialog: t('metal3-plugin~New with Dialog'),\n    yaml: t('metal3-plugin~New from YAML'),\n  };\n\n  return {\n    items,\n    createLink: (itemName) => {\n      const base = `/k8s/ns/${namespace || 'default'}/${referenceForModel(BareMetalHostModel)}`;\n\n      switch (itemName) {\n        case 'dialog':\n          return `${base}/~new/form`;\n        case 'yaml':\n        default:\n          return `${base}/~new`;\n      }\n    },\n  };\n};\n\nconst BareMetalHostsPage: React.FC<BareMetalHostsPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [model] = useMaintenanceCapability();\n  const { namespace } = props;\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(BareMetalHostModel),\n      namespaced: true,\n      prop: 'hosts',\n    },\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      prop: 'machines',\n    },\n    {\n      kind: referenceForModel(MachineSetModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machineSets',\n    },\n    {\n      kind: NodeModel.kind,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  if (model) {\n    resources.push({\n      kind: referenceForModel(model),\n      namespaced: false,\n      isList: true,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n\n  return (\n    <MultiListPage\n      {...props}\n      canCreate\n      rowFilters={[hostStatusFilter(t)]}\n      createProps={getCreateProps({ namespace, t })}\n      createButtonText={t('metal3-plugin~Add Host')}\n      namespace={namespace}\n      resources={resources}\n      flatten={flattenResources}\n      ListComponent={BareMetalHostsTable}\n      title={t('metal3-plugin~Bare Metal Hosts')}\n    />\n  );\n};\n\nexport default BareMetalHostsPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { navFactory, FirehoseResource } from '@console/internal/components/utils';\nimport { MachineModel, MachineSetModel, NodeModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { BMO_ENABLED_FLAG } from '../../features';\nimport { useMaintenanceCapability } from '../../hooks/useMaintenanceCapability';\nimport { BareMetalHostModel } from '../../models';\nimport BareMetalHostDetails from './BareMetalHostDetails';\nimport BareMetalHostDisks from './BareMetalHostDisks';\nimport BareMetalHostNICs from './BareMetalHostNICs';\nimport BareMetalHostDashboard from './dashboard/BareMetalHostDashboard';\nimport { menuActionsCreator } from './host-menu-actions';\n\ntype BareMetalHostDetailsPageProps = {\n  namespace: string;\n  name: string;\n};\n\nconst BareMetalHostDetailsPage: React.FC<BareMetalHostDetailsPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [maintenanceModel] = useMaintenanceCapability();\n  const bmoEnabled = useFlag(BMO_ENABLED_FLAG);\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machines',\n    },\n    {\n      kind: referenceForModel(MachineSetModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machineSets',\n    },\n    {\n      kind: NodeModel.kind,\n      namespaced: false,\n      isList: true,\n      prop: 'nodes',\n    },\n  ];\n\n  if (maintenanceModel) {\n    resources.push({\n      kind: referenceForModel(maintenanceModel),\n      namespaced: false,\n      isList: true,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n\n  const nicsPage = {\n    href: 'nics',\n    // t('metal3-plugin~Network Interfaces')\n    nameKey: 'metal3-plugin~Network Interfaces',\n    component: BareMetalHostNICs,\n  };\n  const disksPage = {\n    href: 'disks',\n    // t('metal3-plugin~Disks')\n    nameKey: 'metal3-plugin~Disks',\n    component: BareMetalHostDisks,\n  };\n  const dashboardPage = {\n    href: '',\n    // t('metal3-plugin~Overview')\n    nameKey: 'metal3-plugin~Overview',\n    component: BareMetalHostDashboard,\n  };\n  const detailsPage = {\n    href: 'details',\n    // t('metal3-plugin~Details')\n    nameKey: 'metal3-plugin~Details',\n    component: BareMetalHostDetails,\n  };\n  return (\n    <DetailsPage\n      {...props}\n      pagesFor={() => [\n        dashboardPage,\n        detailsPage,\n        navFactory.editYaml(),\n        nicsPage,\n        disksPage,\n        navFactory.events(ResourceEventStream),\n      ]}\n      kind={referenceForModel(BareMetalHostModel)}\n      resources={resources}\n      menuActions={menuActionsCreator}\n      customData={{\n        hasNodeMaintenanceCapability: !!maintenanceModel,\n        maintenanceModel,\n        bmoEnabled,\n        t,\n      }}\n    />\n  );\n};\nexport default BareMetalHostDetailsPage;\n","import { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { getNodeMachineName } from '@console/shared/src/selectors/node';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { HOST_ERROR_STATES, HOST_PROGRESS_STATES, HOST_SUCCESS_STATES } from '../../../constants';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../../selectors';\nimport { getHostStatus } from '../../../status/host-status';\nimport { BareMetalHostKind } from '../../../types';\nimport { getHostFilterStatus } from '../table-filters';\n\nconst BMH_STATUS_GROUP_MAPPER = {\n  [InventoryStatusGroup.NOT_MAPPED]: HOST_SUCCESS_STATES,\n  [InventoryStatusGroup.PROGRESS]: HOST_PROGRESS_STATES,\n  [InventoryStatusGroup.ERROR]: HOST_ERROR_STATES,\n  'node-maintenance': ['maintenance'],\n};\n\nexport const getBMHStatusGroups: StatusGroupMapper = (\n  hosts: BareMetalHostKind[],\n  { machines, nodes, maintenances, kvAlphaMaintenances, kvBetaMaintenances },\n) => {\n  const groups = {\n    [InventoryStatusGroup.NOT_MAPPED]: {\n      statusIDs: ['ready', 'provisioned'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.ERROR]: {\n      statusIDs: ['error'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.PROGRESS]: {\n      statusIDs: ['registering', 'provisioning'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: ['other'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    'node-maintenance': {\n      statusIDs: ['maintenance'],\n      count: 0,\n      filterType: 'host-status',\n    },\n  };\n\n  const maintenancesByNodeName = createBasicLookup(maintenances, getNodeMaintenanceNodeName);\n  const kvBetaMaintenancesByNodeName = createBasicLookup(\n    kvBetaMaintenances,\n    getNodeMaintenanceNodeName,\n  );\n  const kvAlphaMaintenancesByNodeName = createBasicLookup(\n    kvAlphaMaintenances,\n    getNodeMaintenanceNodeName,\n  );\n  const nodesByMachineName = createBasicLookup(nodes, getNodeMachineName);\n\n  hosts.forEach((host) => {\n    // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n    // on machines\n    const machine = getHostMachine(host, machines as MachineKind[]);\n    const node = nodesByMachineName[getName(machine)] as NodeKind;\n    const nodeMaintenance =\n      maintenancesByNodeName[getName(node)] ||\n      kvBetaMaintenancesByNodeName[getName(node)] ||\n      kvAlphaMaintenancesByNodeName[getName(node)];\n    const bareMetalHostStatus = getHostStatus({ host, nodeMaintenance });\n\n    const status = getHostFilterStatus({\n      machine,\n      node,\n      host,\n      nodeMaintenance,\n      status: bareMetalHostStatus,\n    });\n    const group =\n      Object.keys(BMH_STATUS_GROUP_MAPPER).find((key) =>\n        BMH_STATUS_GROUP_MAPPER[key].includes(status),\n      ) || InventoryStatusGroup.NOT_MAPPED;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n","import { K8sResourceKind, MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { StatusProps } from '../components/types';\nimport {\n  HOST_STATUS_TITLE_KEYS,\n  HOST_STATUS_DESCRIPTION_KEYS,\n  HOST_STATUS_ERROR,\n  HOST_PROGRESS_STATES,\n  HOST_STATUS_DEPROVISIONING,\n  HOST_STATUS_UNKNOWN,\n} from '../constants';\nimport { getHostOperationalStatus, getHostProvisioningState, getHostErrorType } from '../selectors';\nimport { BareMetalHostKind } from '../types';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\n\nexport const getBareMetalHostStatus = (host: BareMetalHostKind): StatusProps => {\n  const operationalStatus = getHostOperationalStatus(host);\n  const provisioningState = getHostProvisioningState(host);\n  const errorType = getHostErrorType(host);\n\n  let hostStatus: string;\n\n  if (operationalStatus === HOST_STATUS_ERROR) {\n    if (errorType) {\n      hostStatus = errorType;\n    } else {\n      hostStatus = HOST_STATUS_ERROR;\n    }\n  } else if (provisioningState) {\n    hostStatus = provisioningState;\n  } else {\n    hostStatus = HOST_STATUS_UNKNOWN;\n  }\n\n  return {\n    status: hostStatus,\n    titleKey: HOST_STATUS_TITLE_KEYS[hostStatus] || hostStatus,\n    descriptionKey: HOST_STATUS_DESCRIPTION_KEYS[hostStatus],\n  };\n};\n\ntype HostStatusProps = {\n  host: BareMetalHostKind;\n  machine?: MachineKind;\n  node?: NodeKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const getHostStatus = ({ host, nodeMaintenance }: HostStatusProps): StatusProps => {\n  const hostStatus = getBareMetalHostStatus(host);\n  if (hostStatus.status === HOST_STATUS_DEPROVISIONING) return hostStatus;\n  return getNodeMaintenanceStatus(nodeMaintenance) || hostStatus;\n};\n\nexport const isHostInProgressState = (host: BareMetalHostKind): boolean =>\n  HOST_PROGRESS_STATES.includes(getBareMetalHostStatus(host).status);\n","import * as React from 'react';\nimport { K8sResourceKind, MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { BareMetalHostKind } from '../../../types';\n\nexport const BareMetalHostDashboardContext = React.createContext<BareMetalDashboardContext>({});\n\ntype BareMetalDashboardContext = {\n  obj?: BareMetalHostKind;\n  machine?: MachineKind;\n  node?: NodeKind;\n  nodeMaintenance?: K8sResourceKind;\n  loaded?: boolean;\n};\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { Trans } from 'react-i18next';\nimport { confirmModal } from '@console/internal/components/modals/confirm-modal';\nimport { k8sKill, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  NodeMaintenanceModel,\n  NodeMaintenanceKubevirtBetaModel,\n  NodeMaintenanceKubevirtAlphaModel,\n} from '../../models';\nimport { getNodeMaintenanceReason, getNodeMaintenanceNodeName } from '../../selectors';\n\nconst getMaintenanceModel = (nodeMaintenance: K8sResourceKind) => {\n  if (\n    nodeMaintenance.apiVersion ===\n    `${NodeMaintenanceModel.apiGroup}/${NodeMaintenanceModel.apiVersion}`\n  ) {\n    return NodeMaintenanceModel;\n  }\n  if (\n    nodeMaintenance.apiVersion ===\n    `${NodeMaintenanceKubevirtBetaModel.apiGroup}/${NodeMaintenanceKubevirtBetaModel.apiVersion}`\n  ) {\n    return NodeMaintenanceKubevirtBetaModel;\n  }\n  return NodeMaintenanceKubevirtAlphaModel;\n};\n\nconst stopNodeMaintenanceModal = (nodeMaintenance: K8sResourceKind, t: TFunction) => {\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const reasonLabel = reason ? `(${reason})` : '';\n  const nodeName = getNodeMaintenanceNodeName(nodeMaintenance);\n  return confirmModal({\n    title: t('metal3-plugin~Stop maintenance'),\n    message: (\n      <Trans t={t} ns=\"metal3-plugin\">\n        Are you sure you want to stop maintenance <strong>{reasonLabel}</strong> on node{' '}\n        <strong>{nodeName}</strong>?\n      </Trans>\n    ),\n    btnText: t('metal3-plugin~Stop maintenance'),\n    executeFn: () => k8sKill(getMaintenanceModel(nodeMaintenance), nodeMaintenance),\n  });\n};\n\nexport default stopNodeMaintenanceModal;\n","import * as React from 'react';\nimport { Alert, FormGroup, Stack, StackItem, TextInput } from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { withHandlePromise, HandlePromiseProps } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { useMaintenanceCapability } from '../../hooks/useMaintenanceCapability';\nimport { startNodeMaintenance } from '../../k8s/requests/node-maintenance';\nimport { CephClusterModel } from '../../models';\n\nconst cephClusterResource = {\n  kind: referenceForModel(CephClusterModel),\n  namespaced: false,\n  isList: true,\n};\n\nexport type StartNodeMaintenanceModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    nodeName: string;\n  };\n\nconst StartNodeMaintenanceModal = withHandlePromise<StartNodeMaintenanceModalProps>((props) => {\n  const { t } = useTranslation();\n  const { nodeName, inProgress, errorMessage, handlePromise, close, cancel } = props;\n  const [model] = useMaintenanceCapability();\n\n  const [reason, setReason] = React.useState('');\n\n  const submit = (event) => {\n    event.preventDefault();\n    const promise = startNodeMaintenance(nodeName, reason, model);\n    return handlePromise(promise, close);\n  };\n\n  const [cephClusters, loaded] = useK8sWatchResource<K8sResourceKind[]>(cephClusterResource);\n  const cephCluster = cephClusters?.[0];\n  const cephClusterHealthy = cephCluster?.status?.ceph?.health === 'HEALTH_OK';\n\n  const action = t('metal3-plugin~Start Maintenance');\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{action}</ModalTitle>\n      <ModalBody>\n        <Stack hasGutter>\n          <StackItem>\n            {t(\n              'metal3-plugin~All managed workloads will be moved off of this node. New workloads and data will not be added to this node until maintenance is stopped.',\n            )}\n          </StackItem>\n          <StackItem>\n            <Trans ns=\"metal3-plugin\">\n              If the node does not exit maintenance within <strong>30 minutes</strong>, the cluster\n              will automatically rebuild the node{\"'\"}s data using replicated copies\n            </Trans>\n          </StackItem>\n          <StackItem>\n            <FormGroup label=\"Reason\" fieldId=\"node-maintenance-reason\">\n              <TextInput\n                type=\"text\"\n                id=\"node-maintenance-reason\"\n                value={reason}\n                onChange={(_event, value) => setReason(value)}\n              />\n            </FormGroup>\n          </StackItem>\n          {!!cephCluster && !cephClusterHealthy && (\n            <StackItem>\n              <Alert\n                variant=\"warning\"\n                title={t('metal3-plugin~The Ceph storage cluster is not in a healthy state.')}\n                isInline\n              >\n                {t(\n                  'metal3-plugin~Maintenance should not be started until the health of the storage cluster is restored.',\n                )}\n              </Alert>\n            </StackItem>\n          )}\n        </Stack>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitDisabled={!loaded}\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={action}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const startNodeMaintenanceModal = createModalLauncher(StartNodeMaintenanceModal);\n","import { MachineModel, MachineSetModel, SecretModel } from '@console/internal/models';\nimport {\n  k8sPatch,\n  k8sCreate,\n  MachineKind,\n  MachineSetKind,\n  k8sKill,\n  SecretKind,\n} from '@console/internal/module/k8s';\nimport { getAnnotations } from '@console/shared/src';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { AddBareMetalHostFormValues } from '../../components/baremetal-hosts/add-baremetal-host/types';\nimport { DELETE_MACHINE_ANNOTATION } from '../../constants/machine';\nimport { BareMetalHostModel } from '../../models';\nimport { getReplicas } from '../../selectors/machine-set';\nimport { BareMetalHostKind } from '../../types';\nimport {\n  buildBareMetalHostObject,\n  buildBareMetalHostSecret,\n  getSecretName,\n} from '../objects/bare-metal-host';\n\nexport const powerOffHost = (host: BareMetalHostKind) =>\n  k8sPatch(BareMetalHostModel, host, [{ op: 'replace', path: '/spec/online', value: false }]);\n\nexport const powerOnHost = (host: BareMetalHostKind) =>\n  k8sPatch(BareMetalHostModel, host, [{ op: 'replace', path: '/spec/online', value: true }]);\n\nexport const restartHost = (host: BareMetalHostKind) =>\n  k8sPatch(BareMetalHostModel, host, [\n    {\n      op: 'replace',\n      path: '/metadata/annotations',\n      value: {\n        ...host.metadata.annotations,\n        'reboot.metal3.io': '',\n      },\n    },\n  ]);\n\nexport const deprovision = async (machine: MachineKind, machineSet?: MachineSetKind) => {\n  await k8sPatch(MachineModel, machine, [\n    new PatchBuilder('/metadata/annotations')\n      .setObjectUpdate(DELETE_MACHINE_ANNOTATION, 'true', getAnnotations(machine))\n      .build(),\n  ]);\n\n  if (machineSet) {\n    const replicas = getReplicas(machineSet);\n\n    if (replicas > 0) {\n      try {\n        await k8sPatch(MachineSetModel, machineSet, [\n          new PatchBuilder('/spec/replicas').replace(replicas - 1).build(),\n        ]);\n      } catch (ignored) {\n        await k8sPatch(MachineModel, machine, [\n          new PatchBuilder('/metadata/annotations')\n            .setObjectUpdate(DELETE_MACHINE_ANNOTATION, 'false', getAnnotations(machine))\n            .build(),\n        ]);\n      }\n    }\n  } else {\n    await k8sKill(MachineModel, machine);\n  }\n};\n\nexport type BareMetalHostOpts = AddBareMetalHostFormValues & {\n  namespace: string;\n};\n\nexport const createBareMetalHost = async ({\n  name,\n  BMCAddress,\n  bootMACAddress,\n  disableCertificateVerification,\n  description,\n  namespace,\n  password,\n  username,\n  online,\n  enablePowerManagement,\n  bootMode,\n}: BareMetalHostOpts) => {\n  const secret =\n    enablePowerManagement && buildBareMetalHostSecret(name, namespace, username, password);\n  const bareMetalHost = buildBareMetalHostObject(\n    name,\n    namespace,\n    BMCAddress,\n    bootMACAddress,\n    disableCertificateVerification,\n    online,\n    description,\n    enablePowerManagement,\n    bootMode,\n  );\n  enablePowerManagement && (await k8sCreate(SecretModel, secret));\n  await k8sCreate(BareMetalHostModel, bareMetalHost);\n};\n\nexport const updateBareMetalHost = async (\n  host: BareMetalHostKind,\n  secret: SecretKind,\n  {\n    name,\n    BMCAddress,\n    bootMACAddress,\n    disableCertificateVerification,\n    description,\n    namespace,\n    password,\n    username,\n    enablePowerManagement,\n    bootMode,\n  }: BareMetalHostOpts,\n) => {\n  const patches = [\n    ...new PatchBuilder('/spec').buildAddObjectKeysPatches(\n      { description, bootMACAddress, bootMode },\n      host.spec,\n    ),\n  ];\n\n  if (enablePowerManagement) {\n    if (secret) {\n      const secretPatch = new PatchBuilder('/data').buildAddObjectKeysPatches(\n        { username: btoa(username), password: btoa(password) },\n        secret.data,\n      );\n\n      if (secretPatch.length > 0) {\n        await k8sPatch(SecretModel, secret, secretPatch);\n      }\n    } else {\n      await k8sCreate(SecretModel, buildBareMetalHostSecret(name, namespace, username, password));\n    }\n    patches.push(\n      ...new PatchBuilder('/spec/bmc').buildAddObjectKeysPatches(\n        {\n          address: BMCAddress,\n          credentialsName: getSecretName(name),\n          disableCertificateVerification,\n        },\n        host.spec.bmc,\n      ),\n    );\n  } else if (secret) {\n    await k8sKill(SecretModel, secret);\n    patches.push(new PatchBuilder('/spec/bmc').remove().build());\n  }\n\n  if (patches.length > 0) {\n    await k8sPatch(BareMetalHostModel, host, patches);\n  }\n};\n","import { k8sCreate, K8sKind } from '@console/internal/module/k8s';\nimport { buildNodeMaintenance } from '../../objects/node-maintenance';\n\nexport const startNodeMaintenance = (nodeName: string, reason: string, model: K8sKind) => {\n  return k8sCreate(model, buildNodeMaintenance({ nodeName, reason, model }));\n};\n","import { apiVersionForModel, K8sKind } from '@console/internal/module/k8s';\n\nexport const buildNodeMaintenance = ({\n  generateName,\n  nodeName,\n  reason,\n  model,\n}: {\n  nodeName: string;\n  model: K8sKind;\n  generateName?: string;\n  reason?: string;\n}) => ({\n  apiVersion: apiVersionForModel(model),\n  kind: model.kind,\n  metadata: {\n    generateName: `${generateName || nodeName}-`,\n  },\n  spec: {\n    nodeName,\n    reason,\n  },\n});\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getDeletetionTimestamp } from '@console/shared/src/selectors';\nimport { StatusProps } from '../components/types';\nimport {\n  NODE_STATUS_TITLE_KEYS,\n  NODE_STATUS_UNDER_MAINTENANCE,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n  NODE_STATUS_STARTING_MAINTENANCE,\n} from '../constants';\nimport { getNodeMaintenancePhase } from '../selectors';\n\nexport const getNodeMaintenanceStatus = (maintenance: K8sResourceKind): StatusProps => {\n  if (!maintenance) return null;\n\n  if (getDeletetionTimestamp(maintenance)) {\n    return {\n      status: NODE_STATUS_STOPPING_MAINTENANCE,\n      titleKey: NODE_STATUS_TITLE_KEYS[NODE_STATUS_STOPPING_MAINTENANCE],\n    };\n  }\n  if (getNodeMaintenancePhase(maintenance) === 'Succeeded') {\n    return {\n      status: NODE_STATUS_UNDER_MAINTENANCE,\n      titleKey: NODE_STATUS_TITLE_KEYS[NODE_STATUS_UNDER_MAINTENANCE],\n    };\n  }\n  return {\n    status: NODE_STATUS_STARTING_MAINTENANCE,\n    titleKey: NODE_STATUS_TITLE_KEYS[NODE_STATUS_STARTING_MAINTENANCE],\n  };\n};\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { PopoverStatus } from '@console/dynamic-plugin-sdk';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ProgressStatus, SuccessStatus, ErrorStatus, Status, InfoStatus } from '@console/shared';\nimport {\n  HOST_PROGRESS_STATES,\n  HOST_ERROR_STATES,\n  HOST_SUCCESS_STATES,\n  NODE_STATUS_UNDER_MAINTENANCE,\n  NODE_STATUS_STARTING_MAINTENANCE,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n  HOST_STATUS_UNMANAGED,\n  HOST_INFO_STATES,\n} from '../../constants';\nimport { BareMetalHostModel } from '../../models';\nimport { getHostErrorMessage } from '../../selectors';\nimport { BareMetalHostKind } from '../../types';\nimport MaintenancePopover from '../maintenance/MaintenancePopover';\nimport { StatusProps } from '../types';\n\nimport './status.scss';\n\nexport const hostStatusActions = (t: TFunction) => ({\n  [HOST_STATUS_UNMANAGED]: (host: BareMetalHostKind) => (\n    <div className=\"bmh-status-action\">\n      <Link\n        to={`${resourcePathFromModel(\n          BareMetalHostModel,\n          host.metadata.name,\n          host.metadata.namespace,\n        )}/edit?powerMgmt`}\n      >\n        {t('metal3-plugin~Add credentials')}\n      </Link>\n    </div>\n  ),\n});\n\nconst BareMetalHostStatus: React.FC<BareMetalHostStatusProps> = ({\n  status,\n  titleKey,\n  descriptionKey,\n  host,\n  nodeMaintenance,\n  className,\n}) => {\n  const { t } = useTranslation();\n  const statusTitle = t(titleKey) || status;\n  const action = hostStatusActions(t)[status]?.(host);\n  switch (true) {\n    case [NODE_STATUS_STARTING_MAINTENANCE, NODE_STATUS_UNDER_MAINTENANCE].includes(status):\n      return (\n        <MaintenancePopover\n          title={statusTitle}\n          nodeMaintenance={nodeMaintenance}\n          className={className}\n        />\n      );\n    case [NODE_STATUS_STOPPING_MAINTENANCE, ...HOST_PROGRESS_STATES].includes(status):\n      return (\n        <ProgressStatus title={statusTitle} className={className}>\n          {descriptionKey && t(descriptionKey)}\n          {action}\n        </ProgressStatus>\n      );\n    case HOST_ERROR_STATES.includes(status):\n      return (\n        <ErrorStatus title={statusTitle} className={className}>\n          <p>{t(descriptionKey)}</p>\n          <p>{getHostErrorMessage(host)}</p>\n          {action}\n        </ErrorStatus>\n      );\n    case HOST_SUCCESS_STATES.includes(status):\n      return (\n        <SuccessStatus title={statusTitle} className={className}>\n          {descriptionKey && t(descriptionKey)}\n          {action}\n        </SuccessStatus>\n      );\n    case HOST_INFO_STATES.includes(status):\n      return (\n        <InfoStatus title={statusTitle} className={className}>\n          {descriptionKey && t(descriptionKey)}\n          {action}\n        </InfoStatus>\n      );\n    default: {\n      const statusBody = <Status status={status} title={statusTitle} className={className} />;\n\n      return descriptionKey || action ? (\n        <PopoverStatus title={statusTitle} statusBody={statusBody}>\n          {descriptionKey && t(descriptionKey)}\n          {action}\n        </PopoverStatus>\n      ) : (\n        statusBody\n      );\n    }\n  }\n};\n\ntype BareMetalHostStatusProps = StatusProps & {\n  host?: BareMetalHostKind;\n  nodeMaintenance?: K8sResourceKind;\n  className?: string;\n};\n\nexport default BareMetalHostStatus;\n","import { MachineSetModel } from '@console/internal/models';\nimport { apiVersionForModel, MachineKind } from '@console/internal/module/k8s';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\n\nexport const getMachineMachineSetOwner = (machine: MachineKind) => {\n  const desiredReference = {\n    apiVersion: apiVersionForModel(MachineSetModel),\n    kind: MachineSetModel.kind,\n  } as any;\n  return (getOwnerReferences(machine) || []).find((reference) =>\n    compareOwnerReference(desiredReference, reference, true),\n  );\n};\n","import * as React from 'react';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { DASH, getNodeRoles, getMachineRole } from '@console/shared';\n\ntype BareMetalHostRoleProps = {\n  machine?: MachineKind;\n  node?: NodeKind;\n};\n\nconst BareMetalHostRole: React.FC<BareMetalHostRoleProps> = ({ machine, node }) => (\n  <>{getNodeRoles(node).sort().join(', ') || getMachineRole(machine) || DASH}</>\n);\n\nexport default BareMetalHostRole;\n","import { TFunction } from 'i18next';\nimport { confirmModal, deleteModal } from '@console/internal/components/modals';\nimport { asAccessReview, Kebab, KebabOption } from '@console/internal/components/utils';\nimport { MachineModel, MachineSetModel } from '@console/internal/models';\nimport {\n  K8sKind,\n  k8sPatch,\n  K8sResourceKind,\n  MachineKind,\n  MachineSetKind,\n  NodeKind,\n  referenceForModel,\n  Patch,\n} from '@console/internal/module/k8s';\nimport {\n  getMachineNode,\n  getMachineNodeName,\n  getName,\n  getNamespace,\n  getAnnotations,\n} from '@console/shared';\nimport { patchSafeValue } from '@console/shared/src/k8s';\nimport {\n  HOST_POWER_STATUS_POWERED_OFF,\n  HOST_POWER_STATUS_POWERED_ON,\n  HOST_POWER_STATUS_POWERING_OFF,\n  HOST_POWER_STATUS_POWERING_ON,\n  HOST_STATUS_AVAILABLE,\n  HOST_STATUS_UNMANAGED,\n  HOST_STATUS_READY,\n  HOST_ERROR_STATES,\n  HOST_STATUS_UNKNOWN,\n} from '../../constants';\nimport { DELETE_MACHINE_ANNOTATION } from '../../constants/machine';\nimport { deprovision } from '../../k8s/requests/bare-metal-host';\nimport { BareMetalHostModel } from '../../models';\nimport {\n  findNodeMaintenance,\n  getHostMachine,\n  getHostPowerStatus,\n  isHostScheduledForRestart,\n  hasPowerManagement,\n  getPoweroffAnnotation,\n} from '../../selectors';\nimport { getMachineMachineSetOwner } from '../../selectors/machine';\nimport { findMachineSet } from '../../selectors/machine-set';\nimport { getHostStatus } from '../../status/host-status';\nimport { BareMetalHostKind } from '../../types';\nimport { powerOffHostModal } from '../modals/PowerOffHostModal';\nimport { restartHostModal } from '../modals/RestartHostModal';\nimport { startNodeMaintenanceModal } from '../modals/StartNodeMaintenanceModal';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\nimport { StatusProps } from '../types';\n\ntype ActionArgs = {\n  machine?: MachineKind;\n  machineSet?: MachineSetKind;\n  nodeName?: string;\n  nodeMaintenance?: K8sResourceKind;\n  hasNodeMaintenanceCapability?: boolean;\n  maintenanceModel: K8sKind;\n  status: StatusProps;\n  bmoEnabled: string;\n  t: TFunction;\n};\n\nexport const Edit = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { t }: ActionArgs,\n): KebabOption => ({\n  label: t('metal3-plugin~Edit Bare Metal Host'),\n  href: `/k8s/ns/${getNamespace(host)}/${referenceForModel(kindObj)}/${getName(host)}/edit`,\n});\n\nexport const SetNodeMaintenance = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { hasNodeMaintenanceCapability, nodeMaintenance, nodeName, t }: ActionArgs,\n): KebabOption => ({\n  hidden: !nodeName || !hasNodeMaintenanceCapability || !!nodeMaintenance,\n  label: t('metal3-plugin~Start Maintenance'),\n  callback: () => startNodeMaintenanceModal({ nodeName }),\n});\n\nexport const RemoveNodeMaintenance = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { hasNodeMaintenanceCapability, nodeMaintenance, nodeName, maintenanceModel, t }: ActionArgs,\n): KebabOption => ({\n  hidden: !nodeName || !hasNodeMaintenanceCapability || !nodeMaintenance,\n  label: t('metal3-plugin~Stop Maintenance'),\n  callback: () => stopNodeMaintenanceModal(nodeMaintenance, t),\n  accessReview: nodeMaintenance && asAccessReview(maintenanceModel, nodeMaintenance, 'delete'),\n});\n\nexport const PowerOn = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { bmoEnabled, t },\n): KebabOption => {\n  const title = t('metal3-plugin~Power On');\n  return {\n    hidden:\n      [HOST_POWER_STATUS_POWERED_ON, HOST_POWER_STATUS_POWERING_ON].includes(\n        getHostPowerStatus(host),\n      ) ||\n      !hasPowerManagement(host) ||\n      !bmoEnabled,\n    label: title,\n    callback: () => {\n      const patches: Patch[] = [{ op: 'replace', path: '/spec/online', value: true }];\n      const poweroffAnnotation = getPoweroffAnnotation(host);\n      if (poweroffAnnotation) {\n        patches.push({\n          op: 'remove',\n          path: `/metadata/annotations/${patchSafeValue(poweroffAnnotation)}`,\n        });\n      }\n      k8sPatch(BareMetalHostModel, host, patches);\n    },\n    accessReview: host && asAccessReview(BareMetalHostModel, host, 'update'),\n  };\n};\n\nexport const Deprovision = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { machine, machineSet, bmoEnabled, t }: ActionArgs,\n): KebabOption => {\n  return {\n    hidden:\n      [HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERING_OFF].includes(\n        getHostPowerStatus(host),\n      ) ||\n      isHostScheduledForRestart(host) ||\n      !machine ||\n      !!getAnnotations(machine, {})[DELETE_MACHINE_ANNOTATION] ||\n      (getMachineMachineSetOwner(machine) && !machineSet) ||\n      !bmoEnabled,\n    label: t('metal3-plugin~Deprovision'),\n    callback: () =>\n      confirmModal({\n        title: t('metal3-plugin~Deprovision {{name}}', { name: getName(host) }),\n        message: machineSet\n          ? t(\n              'metal3-plugin~Are you sure you want to delete {{name}} machine and scale down its machine set?',\n              {\n                name: getName(machine),\n              },\n            )\n          : t('metal3-plugin~Are you sure you want to delete {{name}} machine?', {\n              name: getName(machine),\n            }),\n        btnText: t('metal3-plugin~Deprovision'),\n        executeFn: () => deprovision(machine, machineSet),\n      }),\n    accessReview: machineSet\n      ? asAccessReview(MachineSetModel, machineSet, 'update')\n      : asAccessReview(MachineModel, machine, 'delete'),\n  };\n};\n\nexport const PowerOff = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { nodeName, status, bmoEnabled, t }: ActionArgs,\n) => ({\n  hidden:\n    [HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERING_OFF].includes(\n      getHostPowerStatus(host),\n    ) ||\n    !hasPowerManagement(host) ||\n    !bmoEnabled,\n  label: t('metal3-plugin~Power Off'),\n  callback: () => powerOffHostModal({ host, nodeName, status }),\n  accessReview: host && asAccessReview(BareMetalHostModel, host, 'update'),\n});\n\nexport const Restart = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { bmoEnabled, t }: ActionArgs,\n) => ({\n  hidden:\n    [HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERING_OFF].includes(\n      getHostPowerStatus(host),\n    ) ||\n    isHostScheduledForRestart(host) ||\n    !hasPowerManagement(host) ||\n    !bmoEnabled,\n  label: t('metal3-plugin~Restart'),\n  callback: () => restartHostModal({ host }),\n  accessReview: host && asAccessReview(BareMetalHostModel, host, 'update'),\n});\n\nexport const Delete = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { status, t }: ActionArgs,\n): KebabOption => {\n  const title = t('metal3-plugin~Delete Bare Metal Host');\n  return {\n    hidden: ![\n      HOST_STATUS_UNKNOWN,\n      HOST_STATUS_READY,\n      HOST_STATUS_AVAILABLE,\n      HOST_STATUS_UNMANAGED,\n      ...HOST_ERROR_STATES,\n    ].includes(status.status),\n    label: title,\n    callback: () =>\n      deleteModal({\n        kind: kindObj,\n        resource: host,\n      }),\n    accessReview: asAccessReview(BareMetalHostModel, host, 'delete'),\n  };\n};\n\nexport const menuActions = [\n  SetNodeMaintenance,\n  RemoveNodeMaintenance,\n  PowerOn,\n  Deprovision,\n  PowerOff,\n  Restart,\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  Edit,\n  Delete,\n];\n\ntype ExtraResources = {\n  machines: MachineKind[];\n  machineSets: MachineSetKind[];\n  nodes: NodeKind[];\n  nodeMaintenances: K8sResourceKind[];\n};\n\nexport const menuActionsCreator = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { machines, machineSets, nodes, nodeMaintenances }: ExtraResources,\n  { hasNodeMaintenanceCapability, maintenanceModel, bmoEnabled, t },\n) => {\n  const machine = getHostMachine(host, machines);\n  const node = getMachineNode(machine, nodes);\n  const nodeName = getMachineNodeName(machine);\n  const nodeMaintenance = findNodeMaintenance(nodeMaintenances, nodeName);\n  const status = getHostStatus({ host, machine, node, nodeMaintenance });\n\n  const machineOwner = getMachineMachineSetOwner(machine);\n  const machineSet = findMachineSet(machineSets, machineOwner && machineOwner.uid);\n\n  return menuActions.map((action) => {\n    return action(kindObj, host, {\n      hasNodeMaintenanceCapability,\n      nodeMaintenance,\n      nodeName,\n      machine,\n      machineSet,\n      status,\n      bmoEnabled,\n      maintenanceModel,\n      t,\n    });\n  });\n};\n","export * from './patch';\n","import * as _ from 'lodash';\nimport { Patch } from '@console/internal/module/k8s';\nimport { assureEndsWith } from '../utils';\n\nexport const patchSafeValue = (value: string): string =>\n  value.replace('~', '~0').replace('/', '~1');\n\nexport enum PatchOperation {\n  ADD = 'add',\n  REMOVE = 'remove',\n  REPLACE = 'replace',\n}\n\nexport class PatchBuilder {\n  private readonly path: string;\n\n  private value: any;\n\n  private valueIndex: number = -1;\n\n  private valueKey: string = '';\n\n  private operation: PatchOperation;\n\n  private valid = true;\n\n  constructor(path: string) {\n    this.path = path;\n  }\n\n  setValue = (value) => {\n    this.value = value;\n    return this;\n  };\n\n  setOperation = (operation: PatchOperation) => {\n    this.operation = operation;\n    return this;\n  };\n\n  setListIndex = (index: number) => {\n    this.valueIndex = index;\n    return this;\n  };\n\n  add = (value) => {\n    this.value = value;\n    return this.setOperation(PatchOperation.ADD);\n  };\n\n  replace = (value) => {\n    this.value = value;\n    return this.setOperation(PatchOperation.REPLACE);\n  };\n\n  remove = () => this.setOperation(PatchOperation.REMOVE);\n\n  setListRemove = <T>(items: T[], removedItemEquals: (item: T) => boolean) => {\n    this.value = undefined;\n    this.operation = PatchOperation.REMOVE;\n    if (items) {\n      const foundIndex = items.findIndex(removedItemEquals);\n      if (foundIndex < 0) {\n        this.valid = false; // do not do anything\n      } else {\n        this.valueIndex = items.length === 1 ? -1 : foundIndex; // delete the whole list if last value there\n      }\n    } else {\n      this.valueIndex = -1; // remove the empty list\n    }\n    return this;\n  };\n\n  setListUpdate = <T>(\n    item: T,\n    items?: T[],\n    updatedItemEquals: (other: T, updatedItem: T) => boolean = (other, updatedValue) =>\n      other === updatedValue,\n  ) => {\n    if (items) {\n      const foundIndex = items.findIndex((other) => updatedItemEquals(other, item));\n      if (foundIndex < 0) {\n        this.value = item;\n        this.valueIndex = items.length;\n        this.operation = PatchOperation.ADD;\n      } else if (_.isEqual(items[foundIndex], item)) {\n        this.valid = false; // no change\n      } else {\n        this.value = item;\n        this.valueIndex = foundIndex;\n        this.operation = PatchOperation.REPLACE;\n      }\n    } else {\n      // list is missing - add the whole list\n      this.value = [item];\n      this.valueIndex = -1;\n      this.operation = PatchOperation.ADD;\n    }\n    return this;\n  };\n\n  setObjectRemove = (key: string, object: { [k: string]: any }) => {\n    if (_.has(object, [key])) {\n      this.value = undefined;\n      this.valueKey = key;\n      this.operation = PatchOperation.REMOVE;\n    } else {\n      this.valid = false;\n    }\n    return this;\n  };\n\n  setObjectUpdate = (key: string, value: any, object: { [k: string]: any }) => {\n    if (object == null) {\n      this.value = { [key]: value };\n    } else if (object[key] === value) {\n      this.valid = false;\n    } else {\n      this.value = value;\n      this.valueKey = key;\n    }\n    this.operation = _.has(object, [key]) ? PatchOperation.REPLACE : PatchOperation.ADD;\n    return this;\n  };\n\n  isPatchValid = () => this.valid && !!(this.path && this.operation);\n\n  build = (): Patch => {\n    if (!this.isPatchValid()) {\n      return null;\n    }\n\n    let resultPath;\n\n    if (this.valueIndex < 0) {\n      resultPath = this.valueKey\n        ? assureEndsWith(this.path, `/${patchSafeValue(this.valueKey)}`)\n        : this.path;\n    } else {\n      resultPath = `${assureEndsWith(this.path, '/')}${this.valueIndex}`;\n    }\n\n    const result: Patch = {\n      op: this.operation,\n      path: resultPath,\n    };\n\n    if (this.operation !== PatchOperation.REMOVE) {\n      result.value = this.value;\n    }\n\n    return result;\n  };\n\n  buildAddObjectKeysPatches = (\n    newObject: { [k: string]: any },\n    oldObject: { [k: string]: any },\n  ): Patch[] => {\n    if (!newObject) {\n      return [];\n    }\n    let builders;\n    if (!oldObject) {\n      builders = [new PatchBuilder(this.path).add(newObject)];\n    } else {\n      builders = Object.keys(newObject).map((key) =>\n        new PatchBuilder(this.path).setObjectUpdate(key, newObject[key], oldObject),\n      );\n    }\n\n    return _.compact(builders.map((u) => u.build()));\n  };\n}\n","export const DELETE_MACHINE_ANNOTATION = 'machine.openshift.io/cluster-api-delete-machine';\n","import * as _ from 'lodash';\nimport { MachineSetKind } from '@console/internal/module/k8s';\nimport { getUID } from '@console/shared/src';\n\nexport const findMachineSet = (machineSets: MachineSetKind[], uid: string) =>\n  uid && machineSets ? machineSets.find((machineSet) => getUID(machineSet) === uid) : null;\n\nexport const getReplicas = (machineSet: MachineSetKind, defaultValue: number = 0) =>\n  _.has(machineSet, 'spec') ? machineSet.spec.replicas : defaultValue;\n","import * as React from 'react';\nimport { Alert, Button, Stack, StackItem, Checkbox } from '@patternfly/react-core';\nimport { TFunction } from 'i18next';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory';\nimport {\n  withHandlePromise,\n  HandlePromiseProps,\n  LoadingBox,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { PodModel } from '@console/internal/models';\nimport { PodKind } from '@console/internal/module/k8s';\nimport {\n  NODE_STATUS_UNDER_MAINTENANCE,\n  HOST_STATUS_READY,\n  HOST_STATUS_AVAILABLE,\n  NODE_STATUS_STARTING_MAINTENANCE,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n} from '../../constants';\nimport { useMaintenanceCapability } from '../../hooks/useMaintenanceCapability';\nimport { powerOffHost } from '../../k8s/requests/bare-metal-host';\nimport { BareMetalHostKind } from '../../types';\nimport { StatusProps } from '../types';\nimport { StatusValidations, getStaticPods, getDaemonSetsOfPods } from './PowerOffStatusValidations';\nimport { startNodeMaintenanceModal } from './StartNodeMaintenanceModal';\n\ntype PowerOffWarning = {\n  restart?: boolean;\n};\n\nexport const PowerOffWarning: React.FC<PowerOffWarning> = ({ restart }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"warning\"\n      title={t('metal3-plugin~Applications may be temporarily disrupted.')}\n      isInline\n    >\n      {restart\n        ? t(\n            'metal3-plugin~Workloads currently running on this host will not be moved before restarting. This may cause service disruptions.',\n          )\n        : t(\n            'metal3-plugin~Workloads currently running on this host will not be moved before powering off. This may cause service disruptions.',\n          )}\n    </Alert>\n  );\n};\n\nconst getPowerOffMessage = (t: TFunction, pods: PodKind[]) => {\n  const staticPods = getStaticPods(pods);\n  const daemonSets = getDaemonSetsOfPods(pods);\n  if (!staticPods.length && !daemonSets.length) {\n    return t('metal3-plugin~all workloads have already been moved.');\n  }\n  if (staticPods.length && !daemonSets.length) {\n    return t(\n      'metal3-plugin~all workloads have already been moved, but {{length}} static pods have been skipped.',\n      { length: staticPods.length },\n    );\n  }\n  if (!staticPods.length && daemonSets.length) {\n    return t(\n      'metal3-plugin~all workloads have already been moved, but {{length}} daemon sets have been skipped.',\n      { length: daemonSets.length },\n    );\n  }\n\n  return t(\n    'metal3-plugin~all workloads have already been moved, but {{podListlength}} static pods and {{daemonListlength}} daemon sets have been skipped.',\n    { podListlength: staticPods.length, daemonListlength: daemonSets.length },\n  );\n};\n\ntype ForcePowerOffDialogProps = {\n  canStartMaintenance: boolean;\n  forceOff: boolean;\n  nodeName: string;\n  setForceOff: React.Dispatch<React.SetStateAction<boolean>>;\n  status: StatusProps;\n  pods?: PodKind[];\n  loadError?: any;\n  cancel?: () => void;\n};\n\nconst ForcePowerOffDialog: React.FC<ForcePowerOffDialogProps> = ({\n  canStartMaintenance,\n  forceOff,\n  nodeName,\n  setForceOff,\n  status,\n  pods,\n  loadError,\n  cancel,\n}) => {\n  const { t } = useTranslation();\n  const hasMaintenance = [\n    NODE_STATUS_STARTING_MAINTENANCE,\n    NODE_STATUS_UNDER_MAINTENANCE,\n    NODE_STATUS_STOPPING_MAINTENANCE,\n  ].includes(status.status);\n  let mainText: React.ReactNode;\n  if (!nodeName) {\n    mainText = <p>{t('metal3-plugin~The host will be powered off gracefully.')}</p>;\n  } else if (!hasMaintenance) {\n    mainText = (\n      <p>\n        <Trans ns=\"metal3-plugin\">\n          To power off gracefully,{' '}\n          <Button\n            variant=\"link\"\n            onClick={() => startNodeMaintenanceModal({ nodeName })}\n            isDisabled={!canStartMaintenance}\n            isInline\n          >\n            start maintenance\n          </Button>{' '}\n          on this host to move all managed workloads to other nodes in the cluster.\n        </Trans>\n      </p>\n    );\n  }\n\n  const helpText = nodeName\n    ? t('metal3-plugin~Workloads will not be moved before the host powers off.')\n    : t('metal3-plugin~The host will power off immediately as if it were unplugged.');\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        {mainText}\n        <StatusValidations\n          status={status.status}\n          nodePods={pods}\n          loadError={loadError}\n          onLinkClicked={cancel}\n        />\n      </StackItem>\n      <StackItem>\n        <Checkbox\n          id=\"host-force-off\"\n          label={t('metal3-plugin~Power off immediately')}\n          onChange={(_event, value) => setForceOff(value)}\n          isChecked={forceOff}\n          data-checked-state={forceOff}\n        />\n        <div className=\"text-secondary\">{helpText}</div>\n      </StackItem>\n      <StackItem>{forceOff && <PowerOffWarning />}</StackItem>\n    </Stack>\n  );\n};\n\nconst isPowerOffSafe = (status: string) => {\n  const safeStates = [NODE_STATUS_UNDER_MAINTENANCE, HOST_STATUS_READY, HOST_STATUS_AVAILABLE];\n  return safeStates.includes(status);\n};\n\nexport type PowerOffHostModalProps = {\n  host: BareMetalHostKind;\n  nodeName: string;\n  status: StatusProps;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nconst PowerOffHostModal = withHandlePromise<PowerOffHostModalProps & HandlePromiseProps>(\n  ({ host, nodeName, status, inProgress, errorMessage, handlePromise, close, cancel }) => {\n    const [pods, loaded, loadError] = useK8sWatchResource<PodKind[]>({\n      kind: PodModel.kind,\n      namespaced: false,\n      isList: true,\n      fieldSelector: `spec.nodeName=${nodeName}`,\n    });\n    const { t } = useTranslation();\n    const [maintenanceModel] = useMaintenanceCapability();\n    const [forceOff, setForceOff] = React.useState(false);\n\n    const submit = (event) => {\n      event.preventDefault();\n      const promise = powerOffHost(host);\n      return handlePromise(promise, close);\n    };\n\n    const canPowerOffSafely = !loadError && isPowerOffSafe(status.status);\n\n    const isUnderMaintenance = status.status === NODE_STATUS_UNDER_MAINTENANCE;\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>{t('metal3-plugin~Power Off Host')}</ModalTitle>\n        <ModalBody>\n          {!loaded ? (\n            <LoadingBox />\n          ) : canPowerOffSafely ? (\n            isUnderMaintenance ? (\n              t(\n                'metal3-plugin~Host is ready to be gracefully powered off. The host is currently under maintenance and {{message}}',\n                { message: getPowerOffMessage(t, pods) },\n              )\n            ) : (\n              t('metal3-plugin~Host is ready to be gracefully powered off.')\n            )\n          ) : (\n            <ForcePowerOffDialog\n              forceOff={forceOff}\n              setForceOff={setForceOff}\n              canStartMaintenance={!isUnderMaintenance && nodeName && !!maintenanceModel}\n              nodeName={nodeName}\n              status={status}\n              pods={pods}\n              loadError={loadError}\n              cancel={cancel}\n            />\n          )}\n        </ModalBody>\n        <ModalSubmitFooter\n          cancel={cancel}\n          errorMessage={errorMessage}\n          inProgress={inProgress}\n          submitDisabled={!canPowerOffSafely && !forceOff}\n          submitText={t('metal3-plugin~Power Off')}\n        />\n      </form>\n    );\n  },\n);\n\nexport const powerOffHostModal = createModalLauncher(PowerOffHostModal);\n","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { NodeModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { DASH } from '@console/shared';\n\ntype NodeLinkProps = {\n  nodeName?: string;\n};\n\nconst NodeLink: React.FC<NodeLinkProps> = ({ nodeName }) => {\n  if (nodeName) {\n    return <ResourceLink kind={referenceForModel(NodeModel)} name={nodeName} />;\n  }\n  return <>{DASH}</>;\n};\n\nexport default NodeLink;\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { RowFilter } from '@console/dynamic-plugin-sdk';\nimport {\n  HOST_REGISTERING_STATES,\n  HOST_PROVISIONING_STATES,\n  HOST_STATUS_READY,\n  HOST_ERROR_STATES,\n  HOST_STATUS_TITLE_KEYS,\n  HOST_STATUS_PROVISIONED,\n  HOST_STATUS_EXTERNALLY_PROVISIONED,\n  NODE_STATUS_TITLE_KEYS,\n  HOST_STATUS_AVAILABLE,\n  HOST_STATUS_UNMANAGED,\n} from '../../constants';\nimport { BareMetalHostBundle } from '../types';\n\n// NOTE(yaacov): hostStatesToFilterMap titles translation keys.\n// t('metal3-plugin~Registering')\n// t('metal3-plugin~Available')\n// t('metal3-plugin~Provisioning')\n// t('metal3-plugin~Provisioned')\n// t('metal3-plugin~Error')\n// t('metal3-plugin~Maintenance')\n// t('metal3-plugin~Unmanaged')\n// t('metal3-plugin~Other')\n\nconst hostStatesToFilterMap = Object.freeze({\n  registering: {\n    title: 'Registering',\n    states: HOST_REGISTERING_STATES,\n  },\n  ready: {\n    title: 'Available',\n    states: [HOST_STATUS_READY, HOST_STATUS_AVAILABLE],\n  },\n  provisioning: {\n    title: 'Provisioning',\n    states: HOST_PROVISIONING_STATES,\n  },\n  provisioned: {\n    title: 'Provisioned',\n    states: [HOST_STATUS_PROVISIONED, HOST_STATUS_EXTERNALLY_PROVISIONED],\n  },\n  error: {\n    title: 'Error',\n    states: HOST_ERROR_STATES,\n  },\n  maintenance: {\n    title: 'Maintenance',\n    states: Object.keys(NODE_STATUS_TITLE_KEYS),\n  },\n  unmanaged: {\n    title: 'Unmanaged',\n    states: [HOST_STATUS_UNMANAGED],\n  },\n  other: {\n    title: 'Other',\n    states: Object.keys(HOST_STATUS_TITLE_KEYS),\n  },\n});\n\nexport const getHostFilterStatus = (bundle: BareMetalHostBundle): string => {\n  return _.findKey(hostStatesToFilterMap, ({ states }) => states.includes(bundle.status.status));\n};\n\nexport const hostStatusFilter = (t: TFunction): RowFilter<BareMetalHostBundle> => ({\n  filterGroupName: t('metal3-plugin~Status'),\n  type: 'host-status',\n  reducer: getHostFilterStatus,\n  items: _.map(hostStatesToFilterMap, ({ title }, id) => ({ id, title: t(title) })),\n  filter: (groups, bundle) => {\n    const status = getHostFilterStatus(bundle);\n    return (\n      groups.selected?.includes(status) ||\n      !_.includes(groups.all, status) ||\n      _.isEmpty(groups.selected)\n    );\n  },\n});\n","import * as React from 'react';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport { OffIcon } from '@patternfly/react-icons/dist/esm/icons/off-icon';\nimport { OnRunningIcon } from '@patternfly/react-icons/dist/esm/icons/on-running-icon';\nimport { HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERED_ON } from '../../constants';\n\ntype BareMetalHostPowerStatusIconProps = {\n  powerStatus: string;\n};\n\nconst BareMetalHostPowerStatusIcon: React.FC<BareMetalHostPowerStatusIconProps> = ({\n  powerStatus,\n  ...iconProps\n}) => {\n  if (powerStatus === HOST_POWER_STATUS_POWERED_ON) return <OnRunningIcon {...iconProps} />;\n  if (powerStatus === HOST_POWER_STATUS_POWERED_OFF) return <OffIcon {...iconProps} />;\n  return <InProgressIcon {...iconProps} />;\n};\n\nexport default BareMetalHostPowerStatusIcon;\n","export const MAC_REGEX = /^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}$/;\n\nexport const IPV6_ADDRESS = new RegExp(\n  /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n);\n\nexport const URL_REGEX = new RegExp(\n  /^([a-z][a-z0-9+\\-.]*:(\\/\\/([a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]+|\\[[a-f0-9:.]+\\]|\\[v[a-f0-9][a-z0-9\\-._~%!$&'()*+,;=:]+\\])(:[0-9]+)?(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/?[a-z0-9\\-._~%!$&'()*+,;=:@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?)?)|([a-z0-9\\-._~%!$&'()*+,;=@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)+\\/?))(\\?[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?(#[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?$/i,\n);\n\nexport const BMC_ADDRESS_REGEX = new RegExp(\n  /^((ipmi|idrac|idrac\\+http|idrac-virtualmedia|irmc|redfish|redfish\\+http|redfish-virtualmedia|ilo5-virtualmedia|https?|ftp):(\\/\\/([a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]+|\\[[a-f0-9:.]+\\]|\\[v[a-f0-9][a-z0-9\\-._~%!$&'()*+,;=:]+\\])(:[0-9]+)?(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/?[a-z0-9\\-._~%!$&'()*+,;=:@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?)?)|([a-z0-9\\-._~%!$&'()*+,;=@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)+\\/?))(\\?[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?(#[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?$/i,\n);\n\nexport const RESOURCE_NAME_REGEX = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\n"],"sourceRoot":""}