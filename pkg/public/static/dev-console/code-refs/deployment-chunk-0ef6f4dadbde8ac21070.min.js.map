{"version":3,"sources":["webpack:///./public/components/image-stream.tsx","webpack:///./public/components/deployment-config.tsx","webpack:///./public/components/replication-controller.jsx","webpack:///./packages/dev-console/src/components/deployments/index.ts","webpack:///./packages/pipelines-plugin/src/models/index.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/const.ts","webpack:///./packages/pipelines-plugin/src/types/index.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-filter-reducer.ts","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/import-types.ts","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/pipelines-plugin/src/models/pipelines.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-utils.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts","webpack:///./packages/pipelines-plugin/src/types/coreTekton.ts","webpack:///./packages/pipelines-plugin/src/types/pipelineRun.ts","webpack:///./packages/pipelines-plugin/src/types/taskRun.ts","webpack:///./packages/pipelines-plugin/src/types/computedStatus.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-augment.ts","webpack:///./packages/pipelines-plugin/src/components/repository/consts.ts","webpack:///./packages/dev-console/src/components/import/import-validation-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-metrics/pipeline-metrics-utils.ts","webpack:///./packages/dev-console/src/components/import/serverless/serverless-utils.ts","webpack:///./packages/pipelines-plugin/src/components/repository/repository-form-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pac/const.ts","webpack:///./packages/console-shared/src/components/pod/PodRingSet.tsx","webpack:///./packages/pipelines-plugin/src/const.ts","webpack:///./packages/dev-console/src/utils/imagestream-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/modals/common/utils.ts","webpack:///./packages/dev-console/src/utils/resource-label-utils.ts","webpack:///./packages/console-app/src/actions/modify-health-checks.ts","webpack:///./packages/dev-console/src/components/health-checks/create-health-checks-probe-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-types.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/modals/common/const.ts","webpack:///./packages/console-app/src/components/modals/resource-limits/index.ts","webpack:///./public/components/workload-table.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-resource/pipelineResource-utils.ts","webpack:///./packages/console-app/src/actions/edit-resource-limits.ts","webpack:///./packages/console-app/src/actions/modify-hpa.ts","webpack:///./public/components/image-stream-timeline.tsx","webpack:///./packages/shipwright-plugin/src/types.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/modals/start-pipeline/submit-utils.ts","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamContext.ts","webpack:///./packages/pipelines-plugin/src/components/import/pipeline/pipeline-template-utils.ts","webpack:///./packages/dev-console/src/components/edit-application/edit-application-utils.ts","webpack:///./packages/dev-console/src/components/import/CreateSecretModal.tsx","webpack:///./packages/console-shared/src/components/editor/yaml-download-utils.ts","webpack:///./packages/dev-console/src/components/import/upload-jar-validation-utils.ts","webpack:///./packages/dev-console/src/components/import/deployImage-validation-utils.ts","webpack:///./packages/dev-console/src/components/import/image-search/ImageStream.tsx","webpack:///./packages/dev-console/src/components/import/advanced/ScalingSection.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamDropdown.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamNsDropdown.tsx","webpack:///./packages/dev-console/src/components/import/image-search/ImageStreamTagDropdown.tsx","webpack:///./packages/dev-console/src/components/deployments/utils/deployment-utils.ts","webpack:///./packages/console-shared/src/components/alerts/SwitchToYAMLAlert.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/utils/types.ts","webpack:///./packages/dev-console/src/components/buildconfig/sections/NameSection.tsx","webpack:///./packages/dev-console/src/components/deployments/DeploymentConfigPage.tsx","webpack:///./packages/dev-console/src/components/deployments/EditDeployment.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/advanced-options/AdvancedStrategyOptions.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/utils/deployment-strategy-utils.ts","webpack:///./packages/dev-console/src/components/deployments/ContainerField.tsx","webpack:///./packages/dev-console/src/components/deployments/DeploymentPage.tsx","webpack:///./packages/dev-console/src/components/deployments/DeploymentForm.tsx","webpack:///./packages/dev-console/src/components/deployments/DeploymentFormEditor.tsx","webpack:///./packages/dev-console/src/components/deployments/AdvancedSection.tsx","webpack:///./packages/dev-console/src/components/deployments/PauseRolloutsSection.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/DeploymentStrategySection.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/CustomStrategy.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/RecreateStrategy.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/advanced-options/LifecycleHookField.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/advanced-options/LifecycleHookForm.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/advanced-options/ExecNewPodForm.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/advanced-options/TagImagesForm.tsx","webpack:///./packages/dev-console/src/components/deployments/deployment-strategy/RollingStrategy.tsx","webpack:///./packages/dev-console/src/components/deployments/EnvironmentVariablesSection.tsx","webpack:///./packages/dev-console/src/components/deployments/images/ImagesSection.tsx","webpack:///./packages/dev-console/src/components/deployments/images/AdvancedImageOptions.tsx","webpack:///./packages/dev-console/src/components/deployments/images/ContainerImageField.tsx","webpack:///./packages/dev-console/src/components/deployments/utils/deployment-validation-utils.ts"],"names":["getAnnotationTags","specTag","split","getBuilderTags","imageStream","statusTags","getStatusTags","spec","tags","tag","annotationTags","isBuilderTag","name","getBuilderTagsSortedByVersion","sort","a","b","v1","v2","localeCompare","getMostRecentBuilderTag","isBuilder","common","factory","menuActions","getExtensionsActionsForKind","ImageStreamTagsRow","statusTag","imageStreamStatus","latest","from","referencesTag","image","created","dockerRepositoryCheck","t","className","kind","metadata","namespace","title","linkTo","timestamp","ExampleDockerCommandPopover","publicImageRepository","pushCommand","pullCommand","headerContent","minWidth","bodyContent","value","ns","href","text","type","variant","ImageStreamsDetails","obj","imageRepository","imageCount","specTagByName","importErrors","status","acc","importErrorCondition","conditions","condition","push","message","warning","alerts","error","i","key","resource","ImageStreamHistory","imageStreamStatusTags","imageStreamTags","imageStreamName","imageStreamNamespace","displayName","pages","details","editYaml","history","ImageStreamsDetailsPage","props","tableColumnClasses","columnClass","ImageStreamsTableRow","columnID","labels","creationTimestamp","actions","ImageStreamsList","ImageStreamsTableHeader","sortField","transforms","id","Header","Row","virtualize","buildPhase","build","phase","ImageStreamsPage","ListComponent","canCreate","ModifyCount","AddStorage","labelKey","callback","dc","req","apiVersion","force","opts","path","rollout","catch","err","accessReview","group","apiGroup","plural","subresource","verb","paused","getDeploymentConfigStatus","progressingFailure","reason","replicaFailure","availableReplicas","updatedReplicas","replicas","DeploymentConfigDetailsList","timeout","updatePeriod","interval","triggers","join","label","hideEmpty","strategy","count","maxUnavailable","rollingParams","maxSurge","minReadySeconds","DeploymentConfigDeprecationAlert","isInline","deprecatedDeploymentConfig","additionalClassName","DeploymentConfigsDetails","model","uid","showPodSelector","showNodeSelector","showTolerations","containers","template","heading","EnvironmentPage","loader","then","c","envPath","nameKey","component","showTitle","selector","pods","envEditor","rawEnvData","readOnly","events","DetailsActionMenu","kindObj","context","options","loaded","DROPDOWN","DeploymentConfigsDetailsPage","customActionMenu","DeploymentConfigTableRow","DeploymentConfigTableHeader","DeploymentConfigsList","DeploymentConfigsPage","createProps","to","helpText","environmentComponent","ReplicationControllerPods","showNodes","ReplicationControllersDetailsPage","getResourceStatus","annotations","replicationController","revision","ReplicationControllerTableRow","statusReplicas","specReplicas","ReplicationControllersList","sortFunc","ReplicationControllersPage","StartedByLabel","StartedByAnnotation","TektonTaskAnnotation","TaskProviders","TektonTaskLabel","TektonResourceLabel","PipelineResourceType","VolumeTypes","SecretAnnotationId","Git","Image","PIPELINE_GA_VERSION","TRIGGERS_GA_VERSION","PIPELINE_UNSIMPLIFIED_METRICS_VERSION","PIPELINE_SERVICE_ACCOUNT","PIPELINE_RUN_AUTO_START_FAILED","DEFAULT_CHART_HEIGHT","DEFAULT_LEGEND_CHART_HEIGHT","DEFAULT_SAMPLES","preferredNameAnnotation","chainsSignedAnnotation","PIPELINE_NAMESPACE","PIPELINERUN_TEMPLATE_NAMESPACE","PIPELINE_CONFIG_NAME","PipelineMetricsLevel","FLAG_TEKTON_V1_ENABLED","FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER","FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER","SucceedConditionReason","pipelineRunStatus","pipelineRun","length","succeedCondition","find","cancelledCondition","PipelineRunStopped","PipelineRunCancelled","includes","Cancelling","Succeeded","Failed","Running","TaskRunCancelled","Cancelled","PipelineRunStopping","TaskRunStopping","CreateContainerConfigError","ExceededNodeResources","ExceededResourceQuota","PipelineRunPending","Pending","ConditionCheckFailed","Skipped","pipelineRunStatusTitle","pipelineFilterReducer","pipeline","latestRun","Other","pipelineTitleFilterReducer","pipelineRunTitleFilterReducer","pipelineRunFilterReducer","pipelineStatusFilter","filters","selected","all","pipelineRunStatusFilter","phases","taskRunFilterReducer","taskRun","taskRunFilterTitleReducer","flexStyle","display","flex","flexDirection","margin","subTitle","fullWidth","children","flexLayout","extraMargin","dataTest","style","PipelineType","hostnameRegex","pathRegex","gitUrlRegex","projectNameValidationSchema","shape","matches","required","applicationNameValidationSchema","selectedKey","max","when","is","deploymentValidationSchema","transform","cv","undefined","test","min","Number","MAX_SAFE_INTEGER","maxSafeInteger","resourcesValidationSchema","oneOf","OpenShift","Kubernetes","KnativeService","serverlessValidationSchema","scaling","minpods","maxpods","limit","this","parent","concurrencytarget","concurrencylimit","concurrencyutilization","autoscale","autoscalewindow","autoscalewindowUnit","unit","convertToSec","domainMapping","of","excludeEmptyString","domainName","routeValidationSchema","secure","tls","termination","hostname","unknownTargetPort","typeError","integer","limitsValidationSchema","cpu","request","requestUnit","limitUnit","ensure","memory","imageValidationSchema","gitValidationSchema","url","showGitType","dockerValidationSchema","containerPort","dockerfilePath","devfileValidationSchema","devfilePath","devfileContent","devfileHasError","devfileSuggestedResources","buildValidationSchema","isiValidationSchema","importFlowPipelineTemplateValidationSchema","isPipelineEnabled","buildOption","pipelineType","PIPELINES","PAC","templateSelected","color","PipelineModel","labelPluralKey","abbr","namespaced","labelPlural","crd","PipelineModelV1Beta1","PipelineRunModel","PipelineRunModelV1Beta1","TaskModel","TaskModelV1Beta1","TaskRunModel","TaskRunModelV1Beta1","CustomRunModelV1Beta1","PipelineResourceModel","ClusterTaskModel","ConditionModel","TriggerBindingModel","ClusterTriggerBindingModel","TriggerTemplateModel","EventListenerModel","RepositoryModel","TektonConfigModel","TektonHubModel","TektonResultModel","task","resources","inputs","runAfter","ListFilterId","ListFilterLabels","PipelineResourceListFilterId","PullRequest","Cluster","Storage","CloudEvent","appendPipelineRunStatus","taskRuns","isFinallyTasks","finally","tasks","map","Idle","tr","pipelineTask","taskStatus","mTask","pipelineTaskName","completionTime","startTime","date","Date","getTime","duration","getPipelineTasks","out","taskList","forEach","flag","taskRef","nextToFlag","splice","getFinallyTasksWithStatus","containerToLogSourceStatus","container","state","lastState","waiting","terminated","getLatestPipelineRunStatus","pipelineRuns","latestPipelineRun","PipelineNotStarted","getPipelineRunParams","pipelineParams","param","default","getPipelineRunWorkspaces","pipelineWorkspaces","workspace","data","calculateDuration","endTime","long","start","durationInSeconds","pipelineRunDuration","run","updateServiceAccount","secretName","originalServiceAccount","updateImagePullSecrets","updatedServiceAccount","secrets","imagePullSecrets","associateServiceAccountToSecret","secret","isImageSecret","serviceAccount","s","getAnnotationKey","secretType","suffix","getSecretAnnotations","annotation","existingAnnotations","annotationKey","pipelinesTab","getMatchedPVCs","pvcResources","ownerResourceName","ownerResourceKind","filter","pvc","ownerReferences","some","reference","getPipeline","pipelines","p","getTriggerTemplates","triggerTemplates","tt","resourcetemplates","rt","pipelineRef","getEventListeners","eventListeners","reduce","et","ref","returnValidPipelineModel","returnValidPipelineRunModel","returnValidTaskModel","TaskRunResultsAnnotations","TaskRunResultsAnnotationValue","TaskRunResults","getSbomTaskRun","taskruns","KEY","SBOM","hasExternalLink","sbomTaskRun","TYPE","EXTERNAL_LINK","getSbomLink","results","taskResults","r","getImageUrl","PipelineRun","pipelineResults","IMAGE_REPOSITORY","taskRunStatus","getPipelineRunStatus","conditionsMessage","match","result","trim","totalSucceeded","Completed","Incomplete","isInteger","bitBucketUserNameRegex","MetricsLevel","LevelTypes","DurationTypes","PipelineRunGroupVersionKind","version","TaskRunGroupVersionKind","ComputedStatus","CustomRunStatus","getLatestRun","runs","field","pipelineSpec","succeededCondition","augmentRunsToData","pipelineruns","prsForPipeline","pr","getRunStatusColor","pftoken","FailedToStart","getPipelineFromPipelineRun","pipelineName","getTaskStatus","pipelinerun","totalTasks","executedPipeline","totalPipelineRunTasks","totalPipelineRunCustomTasks","plrTasks","Object","keys","tRun","plrTaskLength","skippedTaskLength","skippedTasks","pipelineRunHasFailure","pipelineRunIsCancelled","unhandledTasks","getResourceModelFromTaskKind","getSafeTaskResourceKind","getResourceModelFromBindingKind","getSafeBindingResourceKind","getModelReferenceFromTaskKind","countRunningTasks","taskStatuses","shouldHidePipelineRunStop","shouldHidePipelineRunStopForTaskRunStatus","taskRunStatusObj","shouldHidePipelineRunCancel","shouldHidePipelineRunCancelForTaskRunStatus","RepositoryFields","RepoAnnotationFields","RepositoryRuntimes","RepositoryLabels","REPOSITORY","URL_REPO","URL_ORG","SHA","EVENT_TYPE","RepositoryAnnotations","SHA_MESSAGE","SHA_URL","REPO_URL","BRANCH","PacConfigurationTypes","defaultRepositoryFormValues","gitUrl","githubAppAvailable","gitProvider","INVALID","method","showOverviewPage","yamlData","webhook","token","user","autoAttach","AccessTokenDocLinks","GITHUB","GITLAB","BITBUCKET","WebhookDocLinks","gitProviderTypesHosts","validationSchema","project","application","git","docker","devfile","deployment","serverless","route","limits","healthChecks","pac","hasDomain","domain","startsWith","detectGitType","GITEA","UNSURE","createComponentName","nameString","kebabCaseStr","detectGitRepoName","replace","pop","PipelineQuery","MetricsQueryPrefix","metricsQueries","prefix","TEKTON_PIPELINES_CONTROLLER","PIPELINE_TASK_LEVEL","PIPELINE_SUCCESS_RATIO","NUMBER_OF_PIPELINE_RUNS","PIPELINERUN_TASKRUN_LEVEL","PIPELINE_RUN_TASK_RUN_DURATION","PIPELINE_RUN_DURATION","UNSIMPLIFIED_METRICS_LEVEL","formatValue","v","string","toExponential","formatPositiveValue","Math","abs","formatDate","format","formatTimeSeriesValues","samples","span","metric","values","newValues","y","x","setHours","isNaN","end","step","getRangeVectorData","response","xMutator","yMutator","parseFloat","time","getXaxisValues","timespan","xValues","oneDayDuration","numDays","round","d","now","setDate","getDate","slice","getDuration","seconds","sec","hr","floor","PipelineMetricsTimeRangeOptions","getTransformedDataPoints","previousValue","val","currentValue","getAutoscaleWindow","autoscaleValue","defaultAutoscalewindowUnit","DOMAIN_MAPPING_KSVC_INFO_REGEX","removeKsvcInfoFromDomainMapping","dm","getOtherKsvcFromDomainMapping","currentKsvcName","removeDuplicateDomainMappings","allDomainMappings","connectedDomainMappings","Set","n","hasOtherKsvcDomainMappings","RegExp","getAllOtherDomainMappingInUse","domainMappings","serviceName","selectedDomain","dryRunOpt","dryRun","repositoryValidationSchema","accessToken","secretRef","pipelinesAccessTokenValidationSchema","importFlowRepositoryValidationSchema","repository","pipelineEnabled","createRepositoryResources","secretObj","webhookSecret","encodedSecret","encode","detectedGitType","repositoryName","generateName","opaque","stringData","queryParams","createTokenSecret","op","gitHost","source","git_provider","webhook_secret","createRemoteWebhook","webhookURL","gitService","authToken","sslVerification","decode","createRepoWebhook","recommendRepositoryName","getPipelineRunTemplate","runtime","repoName","runTimeTemplate","pipelineRunTemplateCfg","labelSelector","matchLabels","e","console","log","pipelineRunTemplate","getFallbackTemplate","getPipelineRunDefaultTemplate","healthChecksValidationSchema","containerName","showForm","enabled","modified","periodSeconds","initialDelaySeconds","failureThreshold","timeoutSeconds","successThreshold","requestType","httpGet","port","tcpSocket","exec","command","healthChecksProbesValidationSchema","readinessProbe","livenessProbe","startupProbe","PAC_GH_APP_NEW","PAC_GH_APP_DOC","PAC_GH_APP_MANIFEST_API","EVENT_LISTNER_NAME","PAC_SECRET_NAME","PAC_GH_APP_NAME","PAC_INFO","PAC_TEMPLATE_DEFAULT","podData","loadError","resourceKind","deploymentData","inProgressDeploymentData","completedDeploymentData","current","previous","progressRC","completedRC","hasGutter","rc","isRollingOut","enableScaling","size","FLAG_OPENSHIFT_PIPELINE","FLAG_OPENSHIFT_PIPELINE_AS_CODE","FLAG_OPENSHIFT_PIPELINE_CONDITION","CLUSTER_PIPELINE_NS","PIPELINE_RUNTIME_LABEL","PIPELINE_RUNTIME_VERSION_LABEL","PIPELINE_STRATEGY_LABEL","PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY","FUNC_PIPELINE_RUNTIME_LABEL","ARTIFACTHUB_API_BASE_URL","DELETED_RESOURCE_IN_K8S_ANNOTATION","RESOURCE_LOADED_FROM_RESULTS_ANNOTATION","imageStreamLabels","getSampleRepo","sampleRepo","getSampleRef","sampleRef","getSampleContextDir","sampleContextDir","getPorts","imageStreamImage","portSpec","parts","parseInt","protocol","toUpperCase","warn","portsFromSpec","dockerImageMetadata","Config","ExposedPorts","ContainerConfig","makePortName","toLowerCase","prettifyName","first","prep","letter","normalizeBuilderImages","imageStreams","Array","isArray","builderImages","recentTag","description","iconClass","iconUrl","getTagDataWithDisplayName","imageTags","selectedTag","defaultName","imageTag","getSuggestedName","imageName","RegistryType","BuilderImagesNamespace","imageRegistryType","External","Internal","getImageStreamTags","getSortedTags","getProjectResource","isList","prop","getImageStreamResource","getPipelineRunGenerateName","getPipelineRunData","getPipelineName","workspaces","latestRunParams","params","newPipelineRun","serviceAccountName","migratePipelineRun","getDefaultVolumeClaimTemplate","volumeClaimTemplate","accessModes","requests","storage","getServerlessFunctionDefaultPersistentVolumeClaim","finalizers","storageClassName","volumeMode","supportWorkspaceDefaults","preselectPVC","workspaceSetting","EmptyDirectory","emptyDir","PVC","persistentVolumeClaim","claimName","optional","NoWorkspace","convertPipelineToModalData","alwaysCreateResources","parameters","selection","convertMapToNameValueArray","getPipelineRunFromForm","formValues","pipelineRunData","getAppLabels","applicationName","runtimeIcon","app","getCommonAnnotations","getRouteAnnotations","getGitAnnotations","gitURL","gitRef","getTriggerAnnotation","imageNamespace","imageTrigger","JSON","stringify","fieldPath","getPodLabels","mergeData","originalResource","newResource","mergedData","isDevfileResource","isFromDevfile","allAnnotations","index","volumeMounts","hasOwnProperty","sourceSecret","volumes","getTemplateLabels","healthChecksAdded","healthChecksUrl","AddHealthChecks","hidden","EditHealthChecks","constructProbeData","resourceType","ContainerCommand","HTTPGET","scheme","TCPSocket","convertResourceDataToFormData","resourceData","toString","getHealthChecksData","containerIndex","ReadinessProbe","LivenessProbe","StartupProbe","getProbesData","HealthChecksProbeType","RequestType","CREATE_PIPELINE_RESOURCE","initialResourceFormValues","location","dir","cluster","username","password","insecure","cadata","resourceLimitsModal","m","WorkloadTableRow","customData","WorkloadTableHeader","getDefinedObj","objData","createPipelineResource","secretResp","resourceName","pipelineResource","fieldName","secretKey","createSecretResource","secretResource","EditResourceLimits","hasHPAs","mapOfResources","hpas","hpaRoute","shouldHideHPA","isOperatorBacked","csvs","isOperatorBackedWorkload","AddHorizontalPodAutoScaler","EditHorizontalPodAutoScaler","DeleteHorizontalPodAutoScaler","workload","hpa","hideActionForHPAs","action","actionOptions","getImageStreamTagName","ImageStreamTimelineItem","linkToTag","referenceAndSHA","dockerImageReference","simple","isTagVersionLatest","comparedTag","comparedTagPosition","orderedTagArray","orderedTag","ImageStreamTimeline","tagsArray","items","timeline","ComputedBuildRunStatus","ClusterBuildStrategy","ReadableClusterBuildStrategies","BUILDAH","S2I","UNKNOWN","getHealthChecksProbeConfig","probe","formTitle","formSubtitle","healthChecksDefaultValues","httpHeaders","healthChecksProbeInitialData","processResources","toCreateResources","createdResources","Promise","resourceValues","resourceSubmit","indexLookup","creationIndex","indexOf","submitStartPipeline","processWorkspaces","pipelineRunResource","resolve","ImageStreamContext","getPipelineParams","gitDir","buildEnv","isDockerPipeline","createPipelineForImportFlow","createPipelineRunForImportFlow","isServerlessFunctionPipeline","pipelineInitialValues","VolumeClaimTemplate","secretOpen","updatePipelineForImportFlow","updatedPipeline","pipelineRuntimeOrVersionChanged","resourceVersion","ApplicationFlowType","getFlowTypePageTitle","flowType","Dockerfile","Container","JarUpload","BuildSourceType","getBuildSourceType","buildConfig","getResourcesType","getFlowType","buildStrategy","buildType","Source","Binary","Docker","getValidationSchema","checkIfTriggerExists","trigger","imageChangeParams","automatic","getKsvcRouteData","ports","create","targetPort","defaultUnknownPort","getRouteLabels","allLabels","allRouteLabels","getRouteData","routeData","disable","insecureEdgeTerminationPolicy","caCertificate","certificate","destinationCACertificate","getBuildData","shipwrightBuild","gitType","BUILDS","SHIPWRIGHT_BUILD","DISABLED","getBuildOption","buildStrategyType","shipwrightClusterBuildStrategyType","buildStrategyData","env","config","option","clusterBuildStrategy","getServerlessData","serverlessData","autoscalewindowAnnotation","containerConcurrency","getDeploymentData","imagePullPolicy","Always","parse","getUserLabels","getIconInitialValues","editAppResource","runtimeLabel","getGitAndDockerfileInitialValues","currentImage","sourceStrategy","isUrlValidating","getGitDataFromPipeline","getGitDataFromShipwrightBuild","uri","getGitDataFromBuildConfig","dockerStrategy","recommended","tagObj","isRecommending","couldNotRecommend","deployImageInitialValues","searchTerm","registry","allowInsecureRegistry","isi","isSearchingForImage","getExternalImageValues","appResource","getInitialValues","appResources","appName","editAppResourceData","buildConfigData","shipwrightBuildData","pipelineData","commonValues","appGroupName","formType","PIPELINE","pacHasError","import","showEditImportStrategy","selectedStrategy","priority","detectedFiles","getCommonInitialValues","gitDockerValues","fileUploadValues","iconValues","externalImageValues","internalImageValues","imageStreamList","imageStreamData","isAllowInsecureRegistry","importPolicy","getExternalImageInitialValues","imageStreamTag","getInternalImageInitialValues","fileName","jarFileName","javaArgs","args","fileUpload","getFileUploadValues","CreateSecretModal","close","save","onCancel","onSave","fixed","secretTypeAbstraction","isCreate","modal","secretModalLauncher","downloadYaml","blob","Blob","filename","fileNameRegex","fileUploadValidationSchema","getAppName","shift","deployValidationSchema","initialState","loading","accessLoading","selectedImageStream","ImageStreamReducer","setLoading","setAccessLoading","setSelectedImageStream","Error","disabled","formContextField","reloadCount","validated","setValidated","dispatch","hasImageStreams","setHasImageStreams","fromImageStreamTag","imageStreamTagList","isNamespaceSelected","isStreamsAvailable","isTagsAvailable","isImageStreamSelected","showCommandLineAlert","Openshift","helperTextInvalid","Provider","fieldId","icon","expansion","isReadOnly","setOutputAsIntegerFlag","imgCollection","setFieldValue","initialValues","initialIsi","fieldPrefix","onDropdownChange","img","dataSelector","onChange","onLoad","imgstreams","imageStreamAvailable","resourceFilter","collectImageStreams","appendItems","openshift","unmounted","touched","isiValues","isiPorts","initialImageStream","initialRoute","initialImageStreamImage","searchImageTag","imageStreamImport","imgStreamLabels","success","autocompleteFilter","getDefaultDeploymentConfig","updatePeriodSeconds","intervalSeconds","getDefaultDeployment","rollingUpdate","getContainerNames","getLchImageStreamData","resName","resNamespace","tagImages","imageTagNs","getLifecycleHookData","lch","failurePolicy","Abort","execNewPod","getLifecycleHookFormData","exists","isAddingLch","getStrategyData","recreateParams","mid","midHook","post","postHook","pre","preHook","customParams","environment","getStrategy","convertDeploymentToEditForm","deploymentStrategy","envs","imagePullSecret","getTriggersAndImageStreamValues","getUpdatedContainers","newContainers","imageRef","getUpdatedLchData","lchName","lcAction","getUpdatedTagImages","getUpdatedStrategy","newStrategy","convertEditFormToDeployment","imgNs","newDeployment","containerNames","onClose","actionClose","DeploymentStrategyType","LifecycleAction","FailurePolicyType","FailurePolicyOptions","Retry","Ignore","meta","isNew","initialValue","isDisabled","watchedDeployment","deploymentConfig","editorType","Form","skipInvalid","formData","formReloadCount","handleCancel","goBack","onSubmit","deploymentRes","YAML","setStatus","submitSuccess","submitError","res","resVersion","enableReinitialize","formikProps","dataAttribute","resourceObj","textExpanded","textCollapsed","maxWidth","number","lifecycleHookName","getDeploymentStrategyItems","getDeploymentStrategyHelpText","deploymentStrategyType","lifecycleActionType","fontWeight","position","isSubmitting","dirty","handleSubmit","setErrors","errors","isStale","formEditor","yamlEditor","showSamples","onReload","formContext","editor","sanitizeTo","yamlDeployment","yamlContext","lastViewUserSettingKey","noMargin","handleReset","errorMessage","successMessage","showAlert","infoTitle","infoMessage","submitLabel","disableSubmit","handleDownload","sticky","showYAMLAlert","setShowYAMLAlert","Footer","defaults","components","List","visibleItems","setVisibleItems","onVisibleItemChange","item","resourceLabel","deploymentStrategyFields","strategyDefaultValues","strategyData","addLabel","placeholder","dndEnabled","lifecycleHookExist","setShowForm","onRemove","link","onClick","content","plain","lifecycleHook","activeChildren","disableDeleteRow","dropdownItems","handleSave","lchValidationSchema","lchImageStreamDataSchema","deploymentStrategySchema","customParans","editDeploymentFormSchema","validate","abortEarly"],"mappings":"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","file":"dev-console/code-refs/deployment-chunk-0ef6f4dadbde8ac21070.min.js","sourcesContent":["import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport * as _ from 'lodash-es';\nimport * as semver from 'semver';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { AlertVariant, Button, Popover } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamModel } from '../models';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport { DOC_URL_PODMAN } from './utils';\nimport { CopyToClipboard } from './utils/copy-to-clipboard';\nimport { ExpandableAlert } from './utils/alerts';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { SectionHeading } from './utils/headings';\nimport { LabelList } from './utils/label-list';\nimport { navFactory } from './utils/horizontal-nav';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { Timestamp } from './utils/timestamp';\nimport { ImageStreamTimeline, getImageStreamTagName } from './image-stream-timeline';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\n\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getAnnotationTags = (specTag: any) =>\n  _.get(specTag, 'annotations.tags', '').split(/\\s*,\\s*/);\n\nconst isBuilderTag = (specTag: any) => {\n  // A spec tag has annotations tags, which is a comma-delimited string (e.g., 'builder,httpd').\n  const annotationTags = getAnnotationTags(specTag);\n  return _.includes(annotationTags, 'builder') && !_.includes(annotationTags, 'hidden');\n};\n\nconst getStatusTags = (imageStream: K8sResourceKind): any => {\n  const statusTags = _.get(imageStream, 'status.tags');\n  return _.keyBy(statusTags, 'tag');\n};\n\nexport const getBuilderTags = (imageStream: K8sResourceKind): any[] => {\n  const statusTags = getStatusTags(imageStream);\n  return _.filter(imageStream.spec.tags, (tag) => isBuilderTag(tag) && statusTags[tag.name]);\n};\n\n// Sort tags in reverse order by semver, falling back to a string comparison if not a valid version.\nexport const getBuilderTagsSortedByVersion = (imageStream: K8sResourceKind): any[] => {\n  return getBuilderTags(imageStream).sort(({ name: a }, { name: b }) => {\n    const v1 = semver.coerce(a);\n    const v2 = semver.coerce(b);\n    if (!v1 && !v2) {\n      return a.localeCompare(b);\n    }\n    if (!v1) {\n      return 1;\n    }\n    if (!v2) {\n      return -1;\n    }\n    return semver.rcompare(v1, v2);\n  });\n};\n\nexport const getMostRecentBuilderTag = (imageStream: K8sResourceKind) => {\n  const tags = getBuilderTagsSortedByVersion(imageStream);\n  return _.head(tags);\n};\n\n// An image stream is a builder image if\n// - It has a spec tag annotated with `builder` and not `hidden`\n// - It has a corresponding status tag\nexport const isBuilder = (imageStream: K8sResourceKind) => !_.isEmpty(getBuilderTags(imageStream));\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamModel), ...common];\n\nconst ImageStreamTagsRow: React.SFC<ImageStreamTagsRowProps> = ({\n  imageStream,\n  specTag,\n  statusTag,\n}) => {\n  const imageStreamStatus = _.get(imageStream, 'status');\n  const latest = _.get(statusTag, ['items', 0]);\n  const from = _.get(specTag, 'from');\n  const referencesTag = _.get(specTag, 'from.kind') === 'ImageStreamTag';\n  const image = _.get(latest, 'image');\n  const created = _.get(latest, 'created');\n  const dockerRepositoryCheck = _.has(imageStream, [\n    'metadata',\n    'annotations',\n    'openshift.io/image.dockerRepositoryCheck',\n  ]);\n  const { t } = useTranslation();\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-2 col-sm-4 col-xs-4 co-break-word\">\n        <ResourceLink\n          kind={ImageStreamTagsReference}\n          name={getImageStreamTagName(imageStream.metadata.name, statusTag.tag)}\n          namespace={imageStream.metadata.namespace}\n          title={statusTag.tag}\n          linkTo={!!image}\n        />\n      </div>\n      <span className=\"col-md-3 col-sm-4 col-xs-8 co-break-all\">\n        {from && referencesTag && (\n          <ResourceLink\n            kind={ImageStreamTagsReference}\n            name={from.name}\n            namespace={imageStream.metadata.namespace}\n            title={from.name}\n          />\n        )}\n        {from && !referencesTag && <>{from.name}</>}\n        {!from && <span className=\"text-muted\">{t('public~pushed image')}</span>}\n      </span>\n      <span className=\"col-md-4 col-sm-4 hidden-xs co-break-all\">\n        {!imageStreamStatus && dockerRepositoryCheck && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~Unable to resolve')}\n          </>\n        )}\n        {!imageStreamStatus && !dockerRepositoryCheck && !from && <>{t('public~Not synced yet')}</>}\n        {/* We have no idea why in this case  */}\n        {!imageStreamStatus && !dockerRepositoryCheck && from && <>{t('public~Unresolved')}</>}\n        {imageStreamStatus && image && <>{image}</>}\n        {imageStreamStatus && !image && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~There is no image associated with this tag')}\n          </>\n        )}\n      </span>\n      <div className=\"col-md-3 hidden-sm hidden-xs\">\n        {created && <Timestamp timestamp={created} />}\n        {!created && '-'}\n      </div>\n    </div>\n  );\n};\n\nexport const ExampleDockerCommandPopover: React.FC<ImageStreamManipulationHelpProps> = ({\n  imageStream,\n  tag,\n}) => {\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const { t } = useTranslation();\n  if (!publicImageRepository) {\n    return null;\n  }\n  const loginCommand = 'oc registry login';\n  const pushCommand = `docker push ${publicImageRepository}:${tag || '<tag>'}`;\n  const pullCommand = `docker pull ${publicImageRepository}:${tag || '<tag>'}`;\n\n  return (\n    <Popover\n      headerContent={<>{t('public~Image registry commands')}</>}\n      className=\"co-example-docker-command__popover\"\n      minWidth=\"600px\"\n      bodyContent={\n        <div>\n          <p>\n            {t(\n              'public~Create a new ImageStreamTag by pushing an image to this ImageStream with the desired tag.',\n            )}\n          </p>\n          <br />\n          <p>{t('public~Authenticate to the internal registry')}</p>\n          <CopyToClipboard value={loginCommand} />\n          <br />\n          <p>{t('public~Push an image to this ImageStream')}</p>\n          <CopyToClipboard value={pushCommand} />\n          <br />\n          <p>{t('public~Pull an image from this ImageStream')}</p>\n          <CopyToClipboard value={pullCommand} />\n          <br />\n          <p>\n            <Trans t={t} ns=\"public\">\n              Red Hat Enterprise Linux users may use the equivalent <strong>podman</strong>{' '}\n              commands.{' '}\n            </Trans>\n            <ExternalLink href={DOC_URL_PODMAN} text={t('public~Learn more.')} />\n          </p>\n        </div>\n      }\n    >\n      <Button className=\"hidden-sm hidden-xs\" type=\"button\" variant=\"link\">\n        <QuestionCircleIcon className=\"co-icon-space-r\" />\n        {t('public~Do you need to work with this ImageStream outside of the web console?')}\n      </Button>\n    </Popover>\n  );\n};\n\nexport const ImageStreamsDetails: React.SFC<ImageStreamsDetailsProps> = ({ obj: imageStream }) => {\n  const { t } = useTranslation();\n\n  const getImportErrors = (): string[] => {\n    return _.transform(imageStream.status.tags, (acc, tag: any) => {\n      const importErrorCondition = _.find(\n        tag.conditions,\n        (condition) => condition.type === 'ImportSuccess' && condition.status === 'False',\n      );\n      importErrorCondition &&\n        acc.push(\n          t('public~Unable to sync image for tag {{tag}}. {{message}}', {\n            tag: `${imageStream.metadata.name}:${tag.tag}`,\n            message: importErrorCondition.message,\n          }),\n        );\n    });\n  };\n\n  const imageRepository = _.get(imageStream, 'status.dockerImageRepository');\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const imageCount = _.get(imageStream, 'status.tags.length');\n  const specTagByName = _.keyBy(imageStream.spec.tags, 'name');\n  const importErrors = getImportErrors();\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        {!_.isEmpty(importErrors) && (\n          <ExpandableAlert\n            variant={AlertVariant.warning}\n            alerts={_.map(importErrors, (error, i) => (\n              <React.Fragment key={i}>{error}</React.Fragment>\n            ))}\n          />\n        )}\n        <SectionHeading text={t('public~ImageStream details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={imageStream}>\n              {imageRepository && <dt>{t('public~Image repository')}</dt>}\n              {imageRepository && <dd>{imageRepository}</dd>}\n              {publicImageRepository && <dt>{t('public~Public image repository')}</dt>}\n              {publicImageRepository && <dd>{publicImageRepository}</dd>}\n              <dt>{t('public~Image count')}</dt>\n              <dd>{imageCount ? imageCount : 0}</dd>\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Tags')} />\n        {_.isEmpty(imageStream.status.tags) ? (\n          <span className=\"text-muted\">{t('public~No tags')}</span>\n        ) : (\n          <div className=\"row\">\n            <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n              <div className=\"row co-m-table-grid__head\">\n                <div className=\"col-md-2 col-sm-4 col-xs-4\">{t('public~Name')}</div>\n                <div className=\"col-md-3 col-sm-4 col-xs-8\">{t('public~From')}</div>\n                <div className=\"col-md-4 col-sm-4 hidden-xs\">{t('public~Identifier')}</div>\n                <div className=\"col-md-3 hidden-sm hidden-xs\">{t('public~Last updated')}</div>\n              </div>\n              <div className=\"co-m-table-grid__body\">\n                {_.map(imageStream.status.tags, (statusTag) => (\n                  <ImageStreamTagsRow\n                    key={statusTag.tag}\n                    imageStream={imageStream}\n                    specTag={specTagByName[statusTag.tag]}\n                    statusTag={statusTag}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ImageStreamHistory: React.FC<ImageStreamHistoryProps> = ({ obj: imageStream }) => {\n  const imageStreamStatusTags = _.get(imageStream, 'status.tags');\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamHistory.displayName = 'ImageStreamHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamHistory),\n];\nexport const ImageStreamsDetailsPage: React.SFC = (props) => (\n  <DetailsPage {...props} kind={ImageStreamsReference} menuActions={menuActions} pages={pages} />\n);\nImageStreamsDetailsPage.displayName = 'ImageStreamsDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  Kebab.columnClass,\n];\n\nconst ImageStreamsTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={ImageStreamsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={ImageStreamsReference} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={ImageStreamsReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const ImageStreamsList: React.SFC = (props) => {\n  const { t } = useTranslation();\n  const ImageStreamsTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Labels'),\n        sortField: 'metadata.labels',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Created'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[4] },\n      },\n    ];\n  };\n  ImageStreamsTableHeader.displayName = 'ImageStreamsTableHeader';\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ImageStreams')}\n      Header={ImageStreamsTableHeader}\n      Row={ImageStreamsTableRow}\n      virtualize\n    />\n  );\n};\n\nImageStreamsList.displayName = 'ImageStreamsList';\n\nexport const buildPhase = (build) => build.status.phase;\n\nexport const ImageStreamsPage: React.SFC<ImageStreamsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      title={t('public~ImageStreams')}\n      kind={ImageStreamsReference}\n      ListComponent={ImageStreamsList}\n      canCreate={true}\n    />\n  );\n};\n\nImageStreamsPage.displayName = 'ImageStreamsListPage';\n\ntype ImageStreamTagsRowProps = {\n  imageStream: K8sResourceKind;\n  specTag: any;\n  statusTag: any;\n};\n\ntype ImageStreamHistoryProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamManipulationHelpProps = {\n  imageStream: K8sResourceKind;\n  tag?: string;\n};\n\nexport type ImageStreamsDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamsPageProps = {\n  filterLabel: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport {\n  Status,\n  ActionServiceProvider,\n  ActionMenu,\n  ActionMenuVariant,\n  LazyActionMenu,\n} from '@console/shared';\nimport { useTranslation } from 'react-i18next';\nimport PodRingSet from '@console/shared/src/components/pod/PodRingSet';\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { EditResourceLimits } from '@console/app/src/actions/edit-resource-limits';\nimport {\n  AddHorizontalPodAutoScaler,\n  DeleteHorizontalPodAutoScaler,\n  EditHorizontalPodAutoScaler,\n  hideActionForHPAs,\n} from '@console/app/src/actions/modify-hpa';\nimport {\n  k8sCreate,\n  K8sKind,\n  K8sResourceKind,\n  K8sResourceKindReference,\n  referenceForModel,\n  referenceFor,\n} from '../module/k8s';\nimport { errorModal } from './modals';\nimport { DeploymentConfigModel } from '../models';\nimport { Conditions } from './conditions';\nimport { ResourceEventStream } from './events';\nimport { VolumesTable } from './volumes-table';\nimport { DetailsPage, ListPage, Table, RowFunctionArgs } from './factory';\nimport {\n  AsyncComponent,\n  ContainerTable,\n  DetailsItem,\n  Kebab,\n  KebabAction,\n  ResourceSummary,\n  SectionHeading,\n  WorkloadPausedAlert,\n  getExtensionsKebabActionsForKind,\n  navFactory,\n  togglePaused,\n  RuntimeClass,\n  ExternalLink,\n  getDocumentationURL,\n  documentationURLs,\n  isManaged,\n} from './utils';\nimport { ReplicationControllersPage } from './replication-controller';\nimport { WorkloadTableRow, WorkloadTableHeader } from './workload-table';\nimport { PodDisruptionBudgetField } from '@console/app/src/components/pdb/PodDisruptionBudgetField';\nimport { Alert } from '@patternfly/react-core';\n\nconst DeploymentConfigsReference: K8sResourceKindReference = 'DeploymentConfig';\n\nconst rollout = (dc: K8sResourceKind): Promise<K8sResourceKind> => {\n  const req = {\n    kind: 'DeploymentRequest',\n    apiVersion: 'apps.openshift.io/v1',\n    name: dc.metadata.name,\n    latest: true,\n    force: true,\n  };\n  const opts = {\n    name: dc.metadata.name,\n    ns: dc.metadata.namespace,\n    path: 'instantiate',\n  };\n  return k8sCreate(DeploymentConfigModel, req, opts);\n};\n\nconst RolloutAction: KebabAction = (kind: K8sKind, obj: K8sResourceKind) => ({\n  // t('public~Start rollout')\n  labelKey: 'public~Start rollout',\n  callback: () =>\n    rollout(obj).catch((err) => {\n      const error = err.message;\n      errorModal({ error });\n    }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    subresource: 'instantiate',\n    name: obj.metadata.name,\n    namespace: obj.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst PauseAction: KebabAction = (kind: K8sKind, obj: K8sResourceKind) => ({\n  // t('public~Resume rollouts')\n  // t('public~Pause rollouts')\n  labelKey: obj.spec.paused ? 'public~Resume rollouts' : 'public~Pause rollouts',\n  callback: () => togglePaused(kind, obj).catch((err) => errorModal({ error: err.message })),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: obj.metadata.name,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  },\n});\n\nconst { ModifyCount, AddStorage, common } = Kebab.factory;\n\nexport const menuActions: KebabAction[] = [\n  RolloutAction,\n  PauseAction,\n  hideActionForHPAs(ModifyCount),\n  AddHealthChecks,\n  AddHorizontalPodAutoScaler,\n  EditHorizontalPodAutoScaler,\n  AddStorage,\n  DeleteHorizontalPodAutoScaler,\n  EditResourceLimits,\n  ...getExtensionsKebabActionsForKind(DeploymentConfigModel),\n  EditHealthChecks,\n  ...common,\n];\n\nconst getDeploymentConfigStatus = (dc: K8sResourceKind): string => {\n  const conditions = _.get(dc, 'status.conditions');\n  const progressingFailure = _.some(conditions, {\n    type: 'Progressing',\n    reason: 'ProgressDeadlineExceeded',\n    status: 'False',\n  });\n  const replicaFailure = _.some(conditions, { type: 'ReplicaFailure', status: 'True' });\n  if (progressingFailure || replicaFailure) {\n    return 'Failed';\n  }\n\n  if (\n    dc.status.availableReplicas === dc.status.updatedReplicas &&\n    dc.spec.replicas === dc.status.availableReplicas\n  ) {\n    return 'Up to date';\n  }\n  return 'Updating';\n};\n\nexport const DeploymentConfigDetailsList = ({ dc }) => {\n  const { t } = useTranslation();\n  const timeout = _.get(dc, 'spec.strategy.rollingParams.timeoutSeconds');\n  const updatePeriod = _.get(dc, 'spec.strategy.rollingParams.updatePeriodSeconds');\n  const interval = _.get(dc, 'spec.strategy.rollingParams.intervalSeconds');\n  const triggers = _.map(dc.spec.triggers, 'type').join(', ');\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t('public~Latest version')} obj={dc} path=\"status.latestVersion\" />\n      <DetailsItem label={t('public~Message')} obj={dc} path=\"status.details.message\" hideEmpty />\n      <DetailsItem label={t('public~Update strategy')} obj={dc} path=\"spec.strategy.type\" />\n      {dc.spec.strategy.type === 'Rolling' && (\n        <>\n          <DetailsItem\n            label={t('public~Timeout')}\n            obj={dc}\n            path=\"spec.strategy.rollingParams.timeoutSeconds\"\n            hideEmpty\n          >\n            {t('public~{{count}} second', { count: timeout })}\n          </DetailsItem>\n          <DetailsItem\n            label={t('public~Update period')}\n            obj={dc}\n            path=\"spec.strategy.rollingParams.updatePeriodSeconds\"\n            hideEmpty\n          >\n            {t('public~{{count}} second', { count: updatePeriod })}\n          </DetailsItem>\n          <DetailsItem\n            label={t('public~Interval')}\n            obj={dc}\n            path=\"spec.strategy.rollingParams.intervalSeconds\"\n            hideEmpty\n          >\n            {t('public~{{count}} second', { count: interval })}\n          </DetailsItem>\n          <DetailsItem\n            label={t('public~Max unavailable')}\n            obj={dc}\n            path=\"spec.strategy.rollingParams.maxUnavailable\"\n          >\n            {t('public~{{maxUnavailable}} of {{count}} pod', {\n              maxUnavailable: dc.spec.strategy.rollingParams.maxUnavailable ?? 1,\n              count: dc.spec.replicas,\n            })}\n          </DetailsItem>\n          <DetailsItem\n            label={t('public~Max surge')}\n            obj={dc}\n            path=\"spec.strategy.rollingParams.maxSurge\"\n          >\n            {t('public~{{maxSurge}} greater than {{count}} pod', {\n              maxSurge: dc.spec.strategy.rollingParams.maxSurge ?? 1,\n              count: dc.spec.replicas,\n            })}\n          </DetailsItem>\n        </>\n      )}\n      <DetailsItem label={t('public~Min ready seconds')} obj={dc} path=\"spec.minReadySeconds\">\n        {dc.spec.minReadySeconds\n          ? t('public~{{count}} second', { count: dc.spec.minReadySeconds })\n          : t('public~Not configured')}\n      </DetailsItem>\n      <DetailsItem label={t('public~Triggers')} obj={dc} path=\"spec.triggers\" hideEmpty>\n        {triggers}\n      </DetailsItem>\n      <RuntimeClass obj={dc} />\n      <PodDisruptionBudgetField obj={dc} />\n    </dl>\n  );\n};\n\nexport const DeploymentConfigDeprecationAlert: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      isInline\n      variant=\"info\"\n      title={t('public~DeploymentConfig is being deprecated with OpenShift 4.14')}\n    >\n      <p>\n        {t(\n          'public~Feature development of DeploymentConfigs will be deprecated in OpenShift Container Platform 4.14.',\n        )}\n      </p>\n      <p>\n        {t(\n          'public~DeploymentConfigs will continue to be supported for security and critical fixes, but you should migrate to Deployments wherever it is possible.',\n        )}\n      </p>\n      {!isManaged() && (\n        <ExternalLink\n          href={getDocumentationURL(documentationURLs.deprecatedDeploymentConfig)}\n          text={t('public~Learn more about Deployments')}\n          additionalClassName=\"pf-v5-u-mt-md\"\n        />\n      )}\n    </Alert>\n  );\n};\n\nexport const DeploymentConfigsDetails: React.FC<{ obj: K8sResourceKind }> = ({ obj: dc }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~DeploymentConfig details')} />\n        {dc.spec.paused && <WorkloadPausedAlert obj={dc} model={DeploymentConfigModel} />}\n        <PodRingSet key={dc.metadata.uid} obj={dc} path=\"/spec/replicas\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={dc} showPodSelector showNodeSelector showTolerations>\n                <dt>{t('public~Status')}</dt>\n                <dd>\n                  <Status status={getDeploymentConfigStatus(dc)} />\n                </dd>\n              </ResourceSummary>\n            </div>\n            <div className=\"col-sm-6\">\n              <DeploymentConfigDetailsList dc={dc} />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Containers')} />\n        <ContainerTable containers={dc.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={dc} heading={t('public~Volumes')} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={dc.status.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst environmentComponent = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nconst ReplicationControllersTab: React.FC<ReplicationControllersTabProps> = ({ obj }) => {\n  const {\n    metadata: { namespace, name },\n  } = obj;\n\n  // Hide the create button to avoid confusion when showing replication controllers for an object.\n  return (\n    <ReplicationControllersPage\n      showTitle={false}\n      namespace={namespace}\n      selector={{\n        'openshift.io/deployment-config.name': name,\n      }}\n      canCreate={false}\n    />\n  );\n};\n// t('public~ReplicationControllers')\nconst pages = [\n  navFactory.details(DeploymentConfigsDetails),\n  navFactory.editYaml(),\n  {\n    href: 'replicationcontrollers',\n    nameKey: 'public~ReplicationControllers',\n    component: ReplicationControllersTab,\n  },\n  navFactory.pods(),\n  navFactory.envEditor(environmentComponent),\n  navFactory.events(ResourceEventStream),\n];\n\nconst DetailsActionMenu: React.FC<DetailsActionMenuProps> = ({ kindObj, obj }) => {\n  const resourceKind = referenceForModel(kindObj);\n  const context = { [resourceKind]: obj };\n\n  return (\n    <ActionServiceProvider context={context}>\n      {({ actions, options, loaded }) => {\n        return (\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        );\n      }}\n    </ActionServiceProvider>\n  );\n};\n\nexport const DeploymentConfigsDetailsPage: React.FC = (props) => {\n  const customActionMenu = (kindObj, obj) => {\n    return <DetailsActionMenu kindObj={kindObj} obj={obj} />;\n  };\n  return (\n    <DetailsPage\n      {...props}\n      kind={DeploymentConfigsReference}\n      customActionMenu={customActionMenu}\n      pages={pages}\n    >\n      <DeploymentConfigDeprecationAlert />\n      <br />\n    </DetailsPage>\n  );\n};\nDeploymentConfigsDetailsPage.displayName = 'DeploymentConfigsDetailsPage';\n\nconst kind = 'DeploymentConfig';\n\nconst DeploymentConfigTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({\n  obj,\n  ...props\n}) => {\n  const resourceKind = referenceFor(obj);\n  const context = { [resourceKind]: obj };\n  const customActionMenu = <LazyActionMenu context={context} />;\n  return <WorkloadTableRow obj={obj} customActionMenu={customActionMenu} kind={kind} {...props} />;\n};\n\nconst DeploymentConfigTableHeader = () => {\n  return WorkloadTableHeader();\n};\nDeploymentConfigTableHeader.displayName = 'DeploymentConfigTableHeader';\n\nexport const DeploymentConfigsList: React.FC = (props) => {\n  const { t } = useTranslation();\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~DeploymentConfigs')}\n      Header={DeploymentConfigTableHeader}\n      Row={DeploymentConfigTableRow}\n      virtualize\n    />\n  );\n};\nDeploymentConfigsList.displayName = 'DeploymentConfigsList';\n\nexport const DeploymentConfigsPage: React.FC<DeploymentConfigsPageProps> = (props) => {\n  const createProps = {\n    to: `/k8s/ns/${props.namespace || 'default'}/deploymentconfigs/~new/form`,\n  };\n  return (\n    <ListPage\n      kind={DeploymentConfigsReference}\n      ListComponent={DeploymentConfigsList}\n      createProps={createProps}\n      canCreate={true}\n      helpText={<DeploymentConfigDeprecationAlert />}\n      {...props}\n    />\n  );\n};\nDeploymentConfigsPage.displayName = 'DeploymentConfigsListPage';\n\ntype DetailsActionMenuProps = {\n  kindObj: K8sKind;\n  obj: K8sResourceKind;\n};\n\ntype ReplicationControllersTabProps = {\n  obj: K8sResourceKind;\n};\n\ntype DeploymentConfigsPageProps = {\n  filterLabel: string;\n  namespace: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  Status,\n  LazyActionMenu,\n  ActionServiceProvider,\n  ActionMenu,\n  ActionMenuVariant,\n} from '@console/shared';\nimport { ResourceEventStream } from './events';\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport {\n  ContainerTable,\n  navFactory,\n  SectionHeading,\n  ResourceSummary,\n  ResourcePodCount,\n  AsyncComponent,\n  Kebab,\n  ResourceLink,\n  resourcePath,\n  OwnerReferences,\n  Timestamp,\n  PodsComponent,\n  RuntimeClass,\n} from './utils';\nimport { referenceFor, referenceForModel } from '../module/k8s';\nimport { VolumesTable } from './volumes-table';\nimport { PodDisruptionBudgetField } from '@console/app/src/components/pdb/PodDisruptionBudgetField';\n\nconst EnvironmentPage = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst environmentComponent = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nconst { details, editYaml, pods, envEditor, events } = navFactory;\n\nconst ReplicationControllerPods = (props) => <PodsComponent {...props} showNodes />;\n\nexport const ReplicationControllersDetailsPage = (props) => {\n  const { t } = useTranslation();\n  const Details = ({ obj: replicationController }) => {\n    const revision = _.get(replicationController, [\n      'metadata',\n      'annotations',\n      'openshift.io/deployment-config.latest-version',\n    ]);\n    const phase = _.get(replicationController, [\n      'metadata',\n      'annotations',\n      'openshift.io/deployment.phase',\n    ]);\n    return (\n      <>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~ReplicationController details')} />\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <ResourceSummary\n                resource={replicationController}\n                showPodSelector\n                showNodeSelector\n                showTolerations\n              >\n                {revision && (\n                  <>\n                    <dt>{t('public~Deployment revision')}</dt>\n                    <dd>{revision}</dd>\n                  </>\n                )}\n              </ResourceSummary>\n            </div>\n            <div className=\"col-md-6\">\n              <dl className=\"co-m-pane__details\">\n                {phase && (\n                  <>\n                    <dt>{t('public~Phase')}</dt>\n                    <dd>\n                      <Status status={phase} />\n                    </dd>\n                  </>\n                )}\n                <ResourcePodCount resource={replicationController} />\n                <RuntimeClass obj={replicationController} />\n                <PodDisruptionBudgetField obj={replicationController} />\n              </dl>\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~Containers')} />\n          <ContainerTable containers={replicationController.spec.template.spec.containers} />\n        </div>\n        <div className=\"co-m-pane__body\">\n          <VolumesTable resource={replicationController} heading={t('public~Volumes')} />\n        </div>\n      </>\n    );\n  };\n\n  const customActionMenu = (kindObj, obj) => {\n    const resourceKind = referenceForModel(kindObj);\n    const context = { [resourceKind]: obj };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={(resource) =>\n        resource?.metadata?.annotations?.['openshift.io/deployment.phase'] || null\n      }\n      customActionMenu={customActionMenu}\n      pages={[\n        details(Details),\n        editYaml(),\n        pods(ReplicationControllerPods),\n        envEditor(environmentComponent),\n        events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n\nconst kind = 'ReplicationController';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-xl',\n  Kebab.columnClass,\n];\n\nconst ReplicationControllerTableRow = ({ obj }) => {\n  const { t } = useTranslation();\n  const phase = obj?.metadata?.annotations?.['openshift.io/deployment.phase'];\n  const resourceKind = referenceFor(obj);\n  const context = { [resourceKind]: obj };\n\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`}\n          title=\"pods\"\n        >\n          {t('public~{{statusReplicas}} of {{specReplicas}} pods', {\n            statusReplicas: obj.status.replicas || 0,\n            specReplicas: obj.spec.replicas,\n          })}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Status status={phase} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <OwnerReferences resource={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nexport const ReplicationControllersList = (props) => {\n  const { t } = useTranslation();\n\n  const ReplicationControllerTableHeader = () => [\n    {\n      title: t('public~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('public~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      id: 'namespace',\n    },\n    {\n      title: t('public~Status'),\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('public~Phase'),\n      sortField: 'metadata.annotations[\"openshift.io/deployment.phase\"]',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('public~Owner'),\n      sortField: 'metadata.ownerReferences[0].name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('public~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ReplicationControllers')}\n      Header={ReplicationControllerTableHeader}\n      Row={ReplicationControllerTableRow}\n      virtualize\n    />\n  );\n};\n\nexport const ReplicationControllersPage = (props) => {\n  const { canCreate = true } = props;\n  return (\n    <ListPage\n      canCreate={canCreate}\n      kind=\"ReplicationController\"\n      ListComponent={ReplicationControllersList}\n      {...props}\n    />\n  );\n};\n","export { default as DeploymentConfigPage } from './DeploymentConfigPage';\nexport { default as DeploymentPage } from './DeploymentPage';\n","export * from './pipelines';\n","export enum StartedByLabel {\n  triggers = 'triggers.tekton.dev/eventlistener',\n}\nexport enum StartedByAnnotation {\n  user = 'pipeline.openshift.io/started-by',\n}\nexport enum TektonTaskAnnotation {\n  minVersion = ' tekton.dev/pipelines.minVersion',\n  tags = 'tekton.dev/tags',\n  categories = 'tekton.dev/categories',\n  installedFrom = 'openshift.io/installed-from',\n  semVersion = 'openshift.io/sem-version',\n}\nexport enum TaskProviders {\n  redhat = 'Red Hat',\n  community = 'Community',\n  tektonHub = 'TektonHub',\n  artifactHub = 'ArtifactHub',\n}\nexport enum TektonTaskLabel {\n  providerType = 'operator.tekton.dev/provider-type',\n  version = 'app.kubernetes.io/version',\n}\nexport enum TektonResourceLabel {\n  pipeline = 'tekton.dev/pipeline',\n  pipelinerun = 'tekton.dev/pipelineRun',\n  taskrun = 'tekton.dev/taskRun',\n  pipelineTask = 'tekton.dev/pipelineTask',\n}\n\nexport enum PipelineResourceType {\n  git = 'git',\n  image = 'image',\n  cluster = 'cluster',\n  storage = 'storage',\n}\n\nexport enum VolumeTypes {\n  NoWorkspace = 'noWorkspace',\n  EmptyDirectory = 'emptyDirectory',\n  ConfigMap = 'configMap',\n  Secret = 'secret',\n  PVC = 'pvc',\n  VolumeClaimTemplate = 'volumeClaimTemplate',\n}\n\nexport enum SecretAnnotationId {\n  Git = 'git',\n  Image = 'docker',\n}\n\nexport const SecretAnnotationType = {\n  [SecretAnnotationId.Git]: 'Git Server',\n  [SecretAnnotationId.Image]: 'Image Registry',\n};\n\nexport const PIPELINE_GA_VERSION = '1.4.0';\nexport const TRIGGERS_GA_VERSION = '1.6.0';\nexport const PIPELINE_UNSIMPLIFIED_METRICS_VERSION = '1.5.2';\nexport const PIPELINE_SERVICE_ACCOUNT = 'pipeline';\nexport const PIPELINE_RUN_AUTO_START_FAILED = `bridge/pipeline-run-auto-start-failed`;\n\nexport const DEFAULT_CHART_HEIGHT = 275;\nexport const DEFAULT_LEGEND_CHART_HEIGHT = 375;\nexport const DEFAULT_TIME_RANGE = '1w';\nexport const DEFAULT_REFRESH_INTERVAL = '30s';\nexport const DEFAULT_SAMPLES = 60;\n\n// Annotation for referencing pipeline name in case of PipelineRun with no reference to a Pipeline (embedded pipeline)\nexport const preferredNameAnnotation = 'pipeline.openshift.io/preferredName';\nexport const chainsSignedAnnotation = 'chains.tekton.dev/signed';\n\nexport const PIPELINE_NAMESPACE = 'openshift-pipelines';\nexport const PIPELINERUN_TEMPLATE_NAMESPACE = 'openshift';\nexport const PIPELINE_CONFIG_NAME = 'config';\n\nexport enum PipelineMetricsLevel {\n  PIPELINE_TASK_LEVEL = 'pipeline/task',\n  PIPELINERUN_TASKRUN_LEVEL = 'pipelinerun/taskrun',\n  UNSUPPORTED_LEVEL = 'unsupported',\n  UNSIMPLIFIED_METRICS_LEVEL = 'unsimplified',\n}\n\nexport const FLAG_TEKTON_V1_ENABLED = 'FLAG_TEKTON_V1_ENABLED';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER';\nexport const FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER =\n  'PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER';\n","export * from './coreTekton';\nexport * from './pipeline';\nexport * from './pipelineRun';\nexport * from './pipelineResource';\nexport * from './task';\nexport * from './taskRun';\nexport * from './computedStatus';\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { ComputedStatus } from '../types';\n\nexport enum SucceedConditionReason {\n  PipelineRunCancelled = 'StoppedRunFinally',\n  PipelineRunStopped = 'CancelledRunFinally',\n  TaskRunCancelled = 'TaskRunCancelled',\n  Cancelled = 'Cancelled',\n  PipelineRunStopping = 'PipelineRunStopping',\n  PipelineRunPending = 'PipelineRunPending',\n  TaskRunStopping = 'TaskRunStopping',\n  CreateContainerConfigError = 'CreateContainerConfigError',\n  ExceededNodeResources = 'ExceededNodeResources',\n  ExceededResourceQuota = 'ExceededResourceQuota',\n  ConditionCheckFailed = 'ConditionCheckFailed',\n}\n\nexport const pipelineRunStatus = (pipelineRun): ComputedStatus => {\n  const conditions = _.get(pipelineRun, ['status', 'conditions'], []);\n  if (conditions.length === 0) return null;\n\n  const succeedCondition = conditions.find((c) => c.type === 'Succeeded');\n  const cancelledCondition = conditions.find((c) => c.reason === 'Cancelled');\n\n  if (\n    [\n      SucceedConditionReason.PipelineRunStopped,\n      SucceedConditionReason.PipelineRunCancelled,\n    ].includes(pipelineRun.spec?.status) &&\n    !cancelledCondition\n  ) {\n    return ComputedStatus.Cancelling;\n  }\n\n  if (!succeedCondition || !succeedCondition.status) {\n    return null;\n  }\n\n  const status =\n    succeedCondition.status === 'True'\n      ? ComputedStatus.Succeeded\n      : succeedCondition.status === 'False'\n      ? ComputedStatus.Failed\n      : ComputedStatus.Running;\n\n  if (succeedCondition.reason && succeedCondition.reason !== status) {\n    switch (succeedCondition.reason) {\n      case SucceedConditionReason.PipelineRunCancelled:\n      case SucceedConditionReason.TaskRunCancelled:\n      case SucceedConditionReason.Cancelled:\n      case SucceedConditionReason.PipelineRunStopped:\n        return ComputedStatus.Cancelled;\n      case SucceedConditionReason.PipelineRunStopping:\n      case SucceedConditionReason.TaskRunStopping:\n        return ComputedStatus.Failed;\n      case SucceedConditionReason.CreateContainerConfigError:\n      case SucceedConditionReason.ExceededNodeResources:\n      case SucceedConditionReason.ExceededResourceQuota:\n      case SucceedConditionReason.PipelineRunPending:\n        return ComputedStatus.Pending;\n      case SucceedConditionReason.ConditionCheckFailed:\n        return ComputedStatus.Skipped;\n      default:\n        return status;\n    }\n  }\n  return status;\n};\n\n// Converts the PipelineRun (and TaskRun) condition status into a human readable string.\n// See also tkn cli implementation at https://github.com/tektoncd/cli/blob/release-v0.15.0/pkg/formatted/k8s.go#L54-L83\nexport const pipelineRunStatusTitle = (pipelineRun): string => {\n  const status = pipelineRunStatus(pipelineRun);\n  if (!status) return '-';\n  switch (status) {\n    case ComputedStatus.Cancelled:\n      return i18next.t('pipelines-plugin~Cancelled');\n    case ComputedStatus.Failed:\n      return i18next.t('pipelines-plugin~Failed');\n    case ComputedStatus.Succeeded:\n      return i18next.t('pipelines-plugin~Succeeded');\n    case ComputedStatus.Pending:\n      return i18next.t('pipelines-plugin~Pending');\n    case ComputedStatus.Running:\n      return i18next.t('pipelines-plugin~Running');\n    case ComputedStatus.Skipped:\n      return i18next.t('pipelines-plugin~Skipped');\n    case ComputedStatus.Cancelling:\n      return i18next.t('pipelines-plugin~Cancelling');\n    default:\n      return status;\n  }\n};\n\nexport const pipelineFilterReducer = (pipeline): ComputedStatus => {\n  if (!pipeline.latestRun) return ComputedStatus.Other;\n  return pipelineRunStatus(pipeline.latestRun) || ComputedStatus.Other;\n};\n\nexport const pipelineTitleFilterReducer = (pipeline): string => {\n  if (!pipeline.latestRun) return '-';\n  return pipelineRunStatusTitle(pipeline.latestRun) || '-';\n};\n\nexport const pipelineRunTitleFilterReducer = (pipelineRun): string => {\n  const status = pipelineRunStatusTitle(pipelineRun);\n  return status || '-';\n};\nexport const pipelineRunFilterReducer = (pipelineRun): ComputedStatus => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const pipelineStatusFilter = (filters, pipeline) => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const status = pipelineFilterReducer(pipeline);\n  return filters.selected?.includes(status) || !_.includes(filters.all, status);\n};\n\nexport const pipelineRunStatusFilter = (phases, pipeline) => {\n  if (!phases || !phases.selected || !phases.selected.length) {\n    return true;\n  }\n\n  const status = pipelineRunFilterReducer(pipeline);\n  return phases.selected?.includes(status) || !_.includes(phases.all, status);\n};\n\nexport const pipelineResourceFilterReducer = (pipelineResource): string => {\n  return pipelineResource.spec.type;\n};\n\nexport const pipelineResourceTypeFilter = (filters, pipelineResource): boolean => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const type = pipelineResourceFilterReducer(pipelineResource);\n  return filters.selected?.includes(type) || !_.includes(filters.all, type);\n};\n\nexport const taskRunFilterReducer = (taskRun): ComputedStatus => {\n  const status = pipelineRunStatus(taskRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const taskRunFilterTitleReducer = (taskRun): string => {\n  const status = pipelineRunStatusTitle(taskRun);\n  return status || '-';\n};\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { PipelineKind } from '../../types';\n\nexport enum PipelineType {\n  PAC = 'pac',\n  PIPELINE = 'pipeline',\n}\nexport interface PipelineData {\n  enabled: boolean;\n  type?: PipelineType;\n  template?: PipelineKind;\n}\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { BuildOptions, Resources } from './import-types';\nimport { removeKsvcInfoFromDomainMapping } from './serverless/serverless-utils';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nconst convertToSec = (value: number, unit: string): number => {\n  switch (unit) {\n    case 'm': {\n      return value * 60;\n    }\n    case 'h': {\n      return value * 3600;\n    }\n    default: {\n      return value;\n    }\n  }\n};\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    replicas: yup\n      .number()\n      .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n      .test(isInteger(t('devconsole~Replicas must be an integer.')))\n      .min(0, t('devconsole~Replicas must be greater than or equal to 0.'))\n      .max(\n        Number.MAX_SAFE_INTEGER,\n        t('devconsole~Replicas must be lesser than or equal to {{maxSafeInteger}}.', {\n          maxSafeInteger: Number.MAX_SAFE_INTEGER,\n        }),\n      )\n      .test({\n        name: 'isEmpty',\n        test: (value) => value !== undefined,\n        message: t('devconsole~This field cannot be empty.'),\n      }),\n  });\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = (t: TFunction) =>\n  yup.object().when('resources', {\n    is: Resources.KnativeService,\n    then: yup.object().shape({\n      scaling: yup.object({\n        minpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Min Pods must be an integer.')))\n          .min(0, t('devconsole~Min Pods must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Min Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        maxpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Max Pods must be an integer.')))\n          .min(1, t('devconsole~Max Pods must be greater than or equal to 1.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Max Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          )\n          .test({\n            test(limit) {\n              const { minpods } = this.parent;\n              return limit ? limit >= minpods : true;\n            },\n            message: t('devconsole~Max Pods must be greater than or equal to Min Pods.'),\n          }),\n        concurrencytarget: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency target must be an integer.')))\n          .min(0, t('devconsole~Concurrency target must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency target must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencylimit: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency limit must be an integer.')))\n          .min(0, t('devconsole~Concurrency limit must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency limit must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencyutilization: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .min(0, t('devconsole~Concurrency utilization must be between 0 and 100.'))\n          .max(100, t('devconsole~Concurrency utilization must be between 0 and 100.')),\n        autoscale: yup.object().shape({\n          autoscalewindow: yup\n            .number()\n            .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n            .test({\n              test(autoscalewindow) {\n                if (autoscalewindow) {\n                  const { autoscalewindowUnit } = this.parent;\n                  const value = convertToSec(autoscalewindow, autoscalewindowUnit);\n                  return value >= 6 && value <= 3600;\n                }\n                return true;\n              },\n              message: t('devconsole~Autoscale window must be between 6s and 1h.'),\n            }),\n        }),\n      }),\n      domainMapping: yup.array().of(\n        yup\n          .string()\n          .transform(removeKsvcInfoFromDomainMapping)\n          .matches(hostnameRegex, {\n            message: t(\n              'devconsole~Domain name must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n            ),\n            excludeEmptyString: true,\n          })\n          .test(\n            'domainname-has-segements',\n            t('devconsole~Domain name must consist of at least two segments separated by dots.'),\n            function (domainName: string) {\n              return domainName.split('.').length >= 2;\n            },\n          ),\n      ),\n    }),\n  });\n\nexport const routeValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    secure: yup.boolean(),\n    tls: yup.object().when('secure', {\n      is: true,\n      then: yup.object({\n        termination: yup.string().required(t('devconsole~Please select a termination type.')),\n      }),\n    }),\n    hostname: yup\n      .string()\n      .matches(hostnameRegex, {\n        message: t(\n          'devconsole~Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.')),\n    path: yup.string().matches(pathRegex, {\n      message: t('devconsole~Path must start with /.'),\n      excludeEmptyString: true,\n    }),\n    unknownTargetPort: yup\n      .number()\n      .typeError(t('devconsole~Port must be an integer.'))\n      .integer(t('devconsole~Port must be an integer.'))\n      .min(1, t('devconsole~Port must be between 1 and 65535.'))\n      .max(65535, t('devconsole~Port must be between 1 and 65535.')),\n  });\n\nexport const limitsValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    cpu: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limitUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${limit}${limitUnit}`) >=\n                convertToBaseValue(`${request}${requestUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU limit must be greater than or equal to request.'),\n        }),\n    }),\n    memory: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory limit must be greater than or equal to request.'),\n        }),\n      limitUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n    }),\n  });\n\nexport const imageValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Source',\n    then: yup.object().shape({\n      selected: yup.string().required(t('devconsole~Required')),\n      tag: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const gitValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    url: yup\n      .string()\n      .max(2000, t('devconsole~Please enter a URL that is less then 2000 characters.'))\n      .matches(gitUrlRegex, t('devconsole~Invalid Git URL.'))\n      .required(t('devconsole~Required')),\n    type: yup.string().when('showGitType', {\n      is: true,\n      then: yup\n        .string()\n        .required(t('devconsole~We failed to detect the Git type. Please choose a Git type.')),\n    }),\n    showGitType: yup.boolean(),\n  });\n\nexport const dockerValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Docker',\n    then: yup.object().shape({\n      containerPort: yup\n        .number()\n        .test(isInteger(t('devconsole~Container port should be an integer'))),\n      dockerfilePath: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const devfileValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Devfile',\n    then: yup.object().shape({\n      devfilePath: yup.string().required(t('devconsole~Required')),\n      devfileContent: yup\n        .string()\n        .min(1, t('devconsole~Required'))\n        .required(t('devconsole~Required')),\n      devfileHasError: yup.boolean().oneOf([false]),\n      devfileSuggestedResources: yup.object().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = (t: TFunction) =>\n  yup.string().required(t('devconsole~Required'));\n\nexport const isiValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup.string().required(t('devconsole~Required')),\n    image: yup.object().required(t('devconsole~Required')),\n    tag: yup.string(),\n    status: yup.string().required(t('devconsole~Required')),\n  });\n\nexport const importFlowPipelineTemplateValidationSchema = yup\n  .object()\n  .when(['enabled', 'build.option', 'type'], {\n    is: (isPipelineEnabled, buildOption, pipelineType) =>\n      (isPipelineEnabled || buildOption === BuildOptions.PIPELINES) &&\n      pipelineType !== PipelineType.PAC,\n    then: yup.object().shape({\n      templateSelected: yup.string().required(),\n    }),\n  });\n","import { chart_color_green_400 as tektonGroupColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { K8sKind } from '@console/internal/module/k8s';\n\nconst color = tektonGroupColor.value;\n\nexport const PipelineModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const CustomRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'CustomRun',\n  // t('pipelines-plugin~CustomRun')\n  labelKey: 'pipelines-plugin~CustomRun',\n  // t('pipelines-plugin~CustomRuns')\n  labelPluralKey: 'pipelines-plugin~CustomRuns',\n  plural: 'customruns',\n  abbr: 'CR',\n  namespaced: true,\n  kind: 'CustomRun',\n  id: 'customrun',\n  labelPlural: 'CustomRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'PipelineResource',\n  // t('pipelines-plugin~PipelineResource')\n  labelKey: 'pipelines-plugin~PipelineResource',\n  // t('pipelines-plugin~PipelineResources')\n  labelPluralKey: 'pipelines-plugin~PipelineResources',\n  plural: 'pipelineresources',\n  abbr: 'PR',\n  namespaced: true,\n  kind: 'PipelineResource',\n  id: 'pipelineresource',\n  labelPlural: 'PipelineResources',\n  crd: true,\n  color,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTask',\n  // t('pipelines-plugin~ClusterTask')\n  labelKey: 'pipelines-plugin~ClusterTask',\n  // t('pipelines-plugin~ClusterTasks')\n  labelPluralKey: 'pipelines-plugin~ClusterTasks',\n  plural: 'clustertasks',\n  abbr: 'CT',\n  namespaced: false,\n  kind: 'ClusterTask',\n  id: 'clustertask',\n  labelPlural: 'ClusterTasks',\n  crd: true,\n  color,\n};\n\nexport const ConditionModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Condition',\n  // t('pipelines-plugin~Condition')\n  labelKey: 'pipelines-plugin~Condition',\n  // t('pipelines-plugin~Conditions')\n  labelPluralKey: 'pipelines-plugin~Conditions',\n  plural: 'conditions',\n  abbr: 'C',\n  namespaced: true,\n  kind: 'Condition',\n  id: 'condition',\n  labelPlural: 'Conditions',\n  crd: true,\n  color,\n};\n\nexport const TriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerBinding',\n  // t('pipelines-plugin~TriggerBinding')\n  labelKey: 'pipelines-plugin~TriggerBinding',\n  // t('pipelines-plugin~TriggerBindings')\n  labelPluralKey: 'pipelines-plugin~TriggerBindings',\n  plural: 'triggerbindings',\n  abbr: 'TB',\n  namespaced: true,\n  kind: 'TriggerBinding',\n  id: 'triggerbinding',\n  labelPlural: 'TriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const ClusterTriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBinding')\n  labelKey: 'pipelines-plugin~ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBindings')\n  labelPluralKey: 'pipelines-plugin~ClusterTriggerBindings',\n  plural: 'clustertriggerbindings',\n  abbr: 'CTB',\n  namespaced: false,\n  kind: 'ClusterTriggerBinding',\n  id: 'clustertriggerbinding',\n  labelPlural: 'ClusterTriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const TriggerTemplateModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplate')\n  labelKey: 'pipelines-plugin~TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplates')\n  labelPluralKey: 'pipelines-plugin~TriggerTemplates',\n  plural: 'triggertemplates',\n  abbr: 'TT',\n  namespaced: true,\n  kind: 'TriggerTemplate',\n  id: 'triggertemplate',\n  labelPlural: 'TriggerTemplates',\n  crd: true,\n  color,\n};\n\nexport const EventListenerModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'EventListener',\n  // t('pipelines-plugin~EventListener')\n  labelKey: 'pipelines-plugin~EventListener',\n  // t('pipelines-plugin~EventListeners')\n  labelPluralKey: 'pipelines-plugin~EventListeners',\n  plural: 'eventlisteners',\n  abbr: 'EL',\n  namespaced: true,\n  kind: 'EventListener',\n  id: 'eventlistener',\n  labelPlural: 'EventListeners',\n  crd: true,\n  color,\n};\n\nexport const RepositoryModel: K8sKind = {\n  apiGroup: 'pipelinesascode.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Repository',\n  // t('pipelines-plugin~Repository')\n  labelKey: 'pipelines-plugin~Repository',\n  // t('pipelines-plugin~Repositories')\n  labelPluralKey: 'pipelines-plugin~Repositories',\n  plural: 'repositories',\n  abbr: 'R',\n  namespaced: true,\n  kind: 'Repository',\n  id: 'repository',\n  labelPlural: 'Repositories',\n  crd: true,\n  color,\n};\n\nexport const TektonConfigModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonConfig',\n  // t('pipelines-plugin~TektonConfig')\n  labelKey: 'pipelines-plugin~TektonConfig',\n  // t('pipelines-plugin~TektonConfigs')\n  labelPluralKey: 'pipelines-plugin~TektonConfigs',\n  plural: 'tektonconfigs',\n  abbr: 'TC',\n  namespaced: false,\n  kind: 'TektonConfig',\n  id: 'tektonconfig',\n  labelPlural: 'TektonConfigs',\n  crd: true,\n};\n\nexport const TektonHubModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonHub',\n  // t('pipelines-plugin~TektonHub')\n  labelKey: 'pipelines-plugin~TektonHub',\n  // t('pipelines-plugin~TektonHubs')\n  labelPluralKey: 'pipelines-plugin~TektonHubs',\n  plural: 'tektonhubs',\n  abbr: 'TH',\n  namespaced: false,\n  kind: 'TektonHub',\n  id: 'tektonhub',\n  labelPlural: 'TektonHubs',\n  crd: true,\n};\n\nexport const TektonResultModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonResult',\n  // t('pipelines-plugin~TektonResult')\n  labelKey: 'pipelines-plugin~TektonResult',\n  // t('pipelines-plugin~TektonResults')\n  labelPluralKey: 'pipelines-plugin~TektonResults',\n  plural: 'tektonresults',\n  abbr: 'TR',\n  namespaced: false,\n  kind: 'TektonResult',\n  id: 'tektonresult',\n  labelPlural: 'TektonResults',\n  crd: true,\n};\n","import { formatPrometheusDuration } from '@openshift-console/plugin-shared/src/datetime/prometheus';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport {\n  LOG_SOURCE_RESTARTING,\n  LOG_SOURCE_WAITING,\n  LOG_SOURCE_RUNNING,\n  LOG_SOURCE_TERMINATED,\n} from '@console/internal/components/utils';\nimport { ServiceAccountModel } from '@console/internal/models';\nimport {\n  ContainerStatus,\n  k8sUpdate,\n  k8sGet,\n  SecretKind,\n  K8sResourceCommon,\n  K8sKind,\n  K8sResourceKind,\n  PersistentVolumeClaimKind,\n  K8sModel,\n} from '@console/internal/module/k8s';\nimport {\n  PIPELINE_SERVICE_ACCOUNT,\n  SecretAnnotationId,\n  TektonResourceLabel,\n} from '../components/pipelines/const';\nimport { PipelineModalFormWorkspace } from '../components/pipelines/modals/common/types';\nimport { getDuration } from '../components/pipelines/pipeline-metrics/pipeline-metrics-utils';\nimport { EventListenerKind, TriggerTemplateKind } from '../components/pipelines/resource-types';\nimport {\n  PipelineRunModel,\n  TaskRunModel,\n  PipelineResourceModel,\n  ConditionModel,\n  ClusterTaskModel,\n  TriggerTemplateModel,\n  TriggerBindingModel,\n  ClusterTriggerBindingModel,\n  PipelineModel,\n  TaskModel,\n  EventListenerModel,\n  RepositoryModel,\n  PipelineModelV1Beta1,\n  PipelineRunModelV1Beta1,\n  TaskModelV1Beta1,\n} from '../models';\nimport {\n  ComputedStatus,\n  PipelineRunKind,\n  PipelineRunParam,\n  PipelineRunWorkspace,\n  PipelineTask,\n  PipelineKind,\n  TaskRunKind,\n  TektonParam,\n  TaskRunStatus,\n  TaskKind,\n  PLRTaskRunData,\n  PipelineRunStatusType,\n} from '../types';\nimport { TaskStatus, getLatestRun } from './pipeline-augment';\nimport {\n  pipelineRunFilterReducer,\n  pipelineRunStatus,\n  SucceedConditionReason,\n} from './pipeline-filter-reducer';\n\ninterface ServiceAccountSecretNames {\n  [name: string]: string;\n}\n\nexport type ServiceAccountType = {\n  secrets: ServiceAccountSecretNames[];\n  imagePullSecrets: ServiceAccountSecretNames[];\n} & K8sResourceCommon;\n\nexport const TaskStatusClassNameMap = {\n  'In Progress': 'is-running',\n  Succeeded: 'is-done',\n  Failed: 'is-error',\n  Idle: 'is-idle',\n};\n\nexport const conditions = {\n  hasFromDependency: (task: PipelineTask): boolean =>\n    task.resources &&\n    task.resources.inputs &&\n    task.resources.inputs.length > 0 &&\n    !!task.resources.inputs[0].from,\n  hasRunAfterDependency: (task: PipelineTask): boolean => task.runAfter && task.runAfter.length > 0,\n};\n\nexport enum ListFilterId {\n  Running = 'Running',\n  Failed = 'Failed',\n  Succeeded = 'Succeeded',\n  Cancelled = 'Cancelled',\n  Other = '-',\n}\n\nexport const ListFilterLabels = {\n  [ListFilterId.Running]: i18next.t('pipelines-plugin~Running'),\n  [ListFilterId.Failed]: i18next.t('pipelines-plugin~Failed'),\n  [ListFilterId.Succeeded]: i18next.t('pipelines-plugin~Succeeded'),\n  [ListFilterId.Cancelled]: i18next.t('pipelines-plugin~Cancelled'),\n  [ListFilterId.Other]: i18next.t('pipelines-plugin~Other'),\n};\n\nexport enum PipelineResourceListFilterId {\n  Git = 'git',\n  PullRequest = 'pullRequest',\n  Image = 'image',\n  Cluster = 'cluster',\n  Storage = 'storage',\n  CloudEvent = 'cloudEvent',\n}\n\nexport const PipelineResourceListFilterLabels = {\n  [PipelineResourceListFilterId.Git]: 'Git',\n  [PipelineResourceListFilterId.PullRequest]: 'Pull Request',\n  [PipelineResourceListFilterId.Image]: 'Image',\n  [PipelineResourceListFilterId.Cluster]: 'Cluster',\n  [PipelineResourceListFilterId.Storage]: 'Storage',\n  [PipelineResourceListFilterId.CloudEvent]: 'Cloud Event',\n};\n\n/**\n * Appends the pipeline run status to each tasks in the pipeline.\n * @param pipeline\n * @param pipelineRun\n * @param isFinallyTasks\n */\nexport const appendPipelineRunStatus = (\n  pipeline,\n  pipelineRun,\n  taskRuns: TaskRunKind[],\n  isFinallyTasks = false,\n) => {\n  const tasks = (isFinallyTasks ? pipeline.spec.finally : pipeline.spec.tasks) || [];\n\n  return tasks.map((task) => {\n    if (!pipelineRun.status) {\n      return task;\n    }\n    if (!taskRuns || taskRuns.length === 0) {\n      if (pipelineRun.spec.status === SucceedConditionReason.PipelineRunCancelled) {\n        return _.merge(task, { status: { reason: ComputedStatus.Cancelled } });\n      }\n      if (pipelineRun.spec.status === SucceedConditionReason.PipelineRunPending) {\n        return _.merge(task, { status: { reason: ComputedStatus.Idle } });\n      }\n      return _.merge(task, { status: { reason: ComputedStatus.Failed } });\n    }\n\n    const taskRun = _.find(\n      taskRuns,\n      (tr) => tr.metadata.labels[TektonResourceLabel.pipelineTask] === task.name,\n    );\n    const taskStatus: TaskRunStatus = taskRun?.status;\n\n    const mTask = _.merge(task, {\n      status: pipelineRun?.status?.taskRuns\n        ? _.get(_.find(pipelineRun.status.taskRuns, { pipelineTaskName: task.name }), 'status')\n        : taskStatus,\n    });\n    // append task duration\n    if (mTask.status && mTask.status.completionTime && mTask.status.startTime) {\n      const date =\n        new Date(mTask.status.completionTime).getTime() -\n        new Date(mTask.status.startTime).getTime();\n      mTask.status.duration = formatPrometheusDuration(date);\n    }\n    // append task status\n    if (!mTask.status) {\n      mTask.status = { reason: ComputedStatus.Pending };\n    } else if (mTask.status && mTask.status.conditions) {\n      mTask.status.reason = pipelineRunStatus(mTask) || ComputedStatus.Pending;\n    } else if (mTask.status && !mTask.status.reason) {\n      mTask.status.reason = ComputedStatus.Pending;\n    }\n    return mTask;\n  });\n};\n\nexport const getPipelineTasks = (\n  pipeline: PipelineKind,\n  pipelineRun: PipelineRunKind = {\n    apiVersion: '',\n    metadata: {},\n    kind: 'PipelineRun',\n    spec: {},\n  },\n  taskRuns: TaskRunKind[],\n): PipelineTask[][] => {\n  // Each unit in 'out' array is termed as stage | out = [stage1 = [task1], stage2 = [task2,task3], stage3 = [task4]]\n  const out = [];\n  if (!pipeline.spec?.tasks || _.isEmpty(pipeline.spec.tasks)) {\n    return out;\n  }\n  const taskList = appendPipelineRunStatus(pipeline, pipelineRun, taskRuns);\n\n  // Step 1: Push all nodes without any dependencies in different stages\n  taskList.forEach((task) => {\n    if (!conditions.hasFromDependency(task) && !conditions.hasRunAfterDependency(task)) {\n      if (out.length === 0) {\n        out.push([]);\n      }\n      out[0].push(task);\n    }\n  });\n\n  // Step 2: Push nodes with 'from' dependency and stack similar tasks in a stage\n  taskList.forEach((task) => {\n    if (!conditions.hasRunAfterDependency(task) && conditions.hasFromDependency(task)) {\n      let flag = out.length - 1;\n      for (let i = 0; i < out.length; i++) {\n        for (const t of out[i]) {\n          if (\n            t.taskRef?.name === task.resources.inputs[0].from[0] ||\n            t.name === task.resources.inputs[0].from[0]\n          ) {\n            flag = i;\n          }\n        }\n      }\n      const nextToFlag = out[flag + 1] ? out[flag + 1] : null;\n      if (\n        nextToFlag &&\n        nextToFlag[0] &&\n        nextToFlag[0].resources &&\n        nextToFlag[0].resources.inputs &&\n        nextToFlag[0].resources.inputs[0] &&\n        nextToFlag[0].resources.inputs[0].from &&\n        nextToFlag[0].resources.inputs[0].from[0] &&\n        nextToFlag[0].resources.inputs[0].from[0] === task.resources.inputs[0].from[0]\n      ) {\n        nextToFlag.push(task);\n      } else {\n        out.splice(flag + 1, 0, [task]);\n      }\n    }\n  });\n\n  // Step 3: Push nodes with 'runAfter' dependencies and stack similar tasks in a stage\n  taskList.forEach((task) => {\n    if (conditions.hasRunAfterDependency(task)) {\n      let flag = out.length - 1;\n      for (let i = 0; i < out.length; i++) {\n        for (const t of out[i]) {\n          if (t.taskRef?.name === task.runAfter[0] || t.name === task.runAfter[0]) {\n            flag = i;\n          }\n        }\n      }\n      const nextToFlag = out[flag + 1] ? out[flag + 1] : null;\n      if (\n        nextToFlag &&\n        nextToFlag[0].runAfter &&\n        nextToFlag[0].runAfter[0] &&\n        nextToFlag[0].runAfter[0] === task.runAfter[0]\n      ) {\n        nextToFlag.push(task);\n      } else {\n        out.splice(flag + 1, 0, [task]);\n      }\n    }\n  });\n  return out;\n};\n\nexport const getFinallyTasksWithStatus = (\n  pipeline: PipelineKind,\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n) => appendPipelineRunStatus(pipeline, pipelineRun, taskRuns, true);\n\nexport const containerToLogSourceStatus = (container: ContainerStatus): string => {\n  if (!container) {\n    return LOG_SOURCE_WAITING;\n  }\n  const { state, lastState } = container;\n  if (state.waiting && !_.isEmpty(lastState)) {\n    return LOG_SOURCE_RESTARTING;\n  }\n  if (state.waiting) {\n    return LOG_SOURCE_WAITING;\n  }\n  if (state.terminated) {\n    return LOG_SOURCE_TERMINATED;\n  }\n  return LOG_SOURCE_RUNNING;\n};\n\nexport type LatestPipelineRunStatus = {\n  latestPipelineRun: PipelineRunKind;\n  status: string;\n};\n\n/**\n * Takes pipeline runs and produces a latest pipeline run state.\n */\nexport const getLatestPipelineRunStatus = (\n  pipelineRuns: PipelineRunKind[],\n): LatestPipelineRunStatus => {\n  if (!pipelineRuns || pipelineRuns.length === 0) {\n    // Not enough data to build the current state\n    return { latestPipelineRun: null, status: ComputedStatus.PipelineNotStarted };\n  }\n\n  const latestPipelineRun = getLatestRun(pipelineRuns, 'creationTimestamp');\n\n  if (!latestPipelineRun) {\n    // Without the latestRun we will not have progress to show\n    return { latestPipelineRun: null, status: ComputedStatus.PipelineNotStarted };\n  }\n\n  let status: string = pipelineRunFilterReducer(latestPipelineRun);\n  if (status === '-') {\n    status = ComputedStatus.Pending;\n  }\n\n  return {\n    latestPipelineRun,\n    status,\n  };\n};\n\nexport const getPipelineRunParams = (pipelineParams: TektonParam[]): PipelineRunParam[] => {\n  return (\n    pipelineParams &&\n    pipelineParams.map((param) => ({\n      name: param.name,\n      value: param.default,\n    }))\n  );\n};\n\nexport const getPipelineRunWorkspaces = (\n  pipelineWorkspaces: PipelineModalFormWorkspace[],\n): PipelineRunWorkspace[] => {\n  return (\n    pipelineWorkspaces &&\n    pipelineWorkspaces.map((workspace) => ({\n      name: workspace.name,\n      ...workspace.data,\n    }))\n  );\n};\n\nexport const calculateDuration = (startTime: string, endTime?: string, long?: boolean) => {\n  const start = new Date(startTime).getTime();\n  const end = endTime ? new Date(endTime).getTime() : new Date().getTime();\n  const durationInSeconds = (end - start) / 1000;\n  return getDuration(durationInSeconds, long);\n};\n\nexport const pipelineRunDuration = (run: PipelineRunKind | TaskRunKind): string => {\n  const startTime = run?.status?.startTime ?? null;\n  const completionTime = run?.status?.completionTime ?? null;\n\n  // Duration cannot be computed if start time is missing or a completed/failed pipeline/task has no end time\n  if (!startTime || (!completionTime && pipelineRunStatus(run) !== 'Running')) {\n    return '-';\n  }\n  return calculateDuration(startTime, completionTime, true);\n};\n\nexport const updateServiceAccount = (\n  secretName: string,\n  originalServiceAccount: ServiceAccountType,\n  updateImagePullSecrets: boolean,\n): Promise<ServiceAccountType> => {\n  const updatedServiceAccount = _.cloneDeep(originalServiceAccount);\n  updatedServiceAccount.secrets = [...updatedServiceAccount.secrets, { name: secretName }];\n  if (updateImagePullSecrets) {\n    updatedServiceAccount.imagePullSecrets = [\n      ...updatedServiceAccount.imagePullSecrets,\n      { name: secretName },\n    ];\n  }\n  return k8sUpdate(ServiceAccountModel, updatedServiceAccount);\n};\n\nexport const associateServiceAccountToSecret = (\n  secret: SecretKind,\n  namespace: string,\n  isImageSecret: boolean,\n) => {\n  k8sGet(ServiceAccountModel, PIPELINE_SERVICE_ACCOUNT, namespace)\n    .then((serviceAccount) => {\n      if (_.find(serviceAccount.secrets, (s) => s.name === secret.metadata.name) === undefined) {\n        updateServiceAccount(secret.metadata.name, serviceAccount, isImageSecret);\n      }\n    })\n    .catch((err) => {\n      errorModal({ error: err.message });\n    });\n};\n\ntype KeyValuePair = {\n  key: string;\n  value: string;\n};\n\nconst getAnnotationKey = (secretType: string, suffix: number) => {\n  const annotationPrefix = 'tekton.dev';\n  if (secretType === SecretAnnotationId.Git) {\n    return `${annotationPrefix}/${SecretAnnotationId.Git}-${suffix}`;\n  }\n  if (secretType === SecretAnnotationId.Image) {\n    return `${annotationPrefix}/${SecretAnnotationId.Image}-${suffix}`;\n  }\n  return null;\n};\n\nexport const getSecretAnnotations = (\n  annotation: KeyValuePair,\n  existingAnnotations: { [key: string]: string } = {},\n) => {\n  let count = 0;\n  let annotationKey = getAnnotationKey(annotation?.key, count);\n  if (!annotationKey) {\n    return existingAnnotations;\n  }\n  while (\n    existingAnnotations[annotationKey] &&\n    existingAnnotations[annotationKey] !== annotation?.value\n  ) {\n    annotationKey = getAnnotationKey(annotation?.key, ++count);\n  }\n\n  return { ...existingAnnotations, [annotationKey]: annotation?.value };\n};\n\nexport const pipelinesTab = (kindObj: K8sKind) => {\n  switch (kindObj.kind) {\n    case PipelineModel.kind:\n    case TaskModel.kind:\n    case EventListenerModel.kind:\n      return '';\n    case PipelineRunModel.kind:\n      return 'pipeline-runs';\n    case PipelineResourceModel.kind:\n      return 'pipeline-resources';\n    case ConditionModel.kind:\n      return 'conditions';\n    case TaskRunModel.kind:\n      return 'task-runs';\n    case ClusterTaskModel.kind:\n      return 'cluster-tasks';\n    case TriggerTemplateModel.kind:\n      return 'trigger-templates';\n    case TriggerBindingModel.kind:\n      return 'trigger-bindings';\n    case ClusterTriggerBindingModel.kind:\n      return 'cluster-trigger-bindings';\n    case RepositoryModel.kind:\n      return 'repositories';\n    default:\n      return null;\n  }\n};\n\nexport const getMatchedPVCs = (\n  pvcResources: PersistentVolumeClaimKind[],\n  ownerResourceName: string,\n  ownerResourceKind: string,\n): PersistentVolumeClaimKind[] => {\n  return pvcResources.filter((pvc) => {\n    const { ownerReferences = [] } = pvc.metadata;\n\n    return ownerReferences.some(\n      (reference) => reference.name === ownerResourceName && reference.kind === ownerResourceKind,\n    );\n  });\n};\n\nexport const getPipeline = (resource: K8sResourceKind, pipelines: PipelineKind[]): PipelineKind => {\n  const pipeline = pipelines.find((p: PipelineKind) => p.metadata.name === resource.metadata.name);\n  return pipeline;\n};\n\nexport const getTriggerTemplates = (\n  pipeline: PipelineKind,\n  triggerTemplates: TriggerTemplateKind[],\n): TriggerTemplateKind[] => {\n  const triggerTemplate = triggerTemplates.filter(\n    (tt: TriggerTemplateKind) =>\n      !!tt.spec.resourcetemplates.find(\n        (rt) => rt.spec.pipelineRef?.name === pipeline.metadata.name,\n      ),\n  );\n  return triggerTemplate;\n};\n\nexport const getEventListeners = (\n  triggerTemplates: TriggerTemplateKind[],\n  eventListeners: EventListenerKind[],\n): EventListenerKind[] => {\n  const resourceEventListeners = eventListeners.reduce((acc, et: EventListenerKind) => {\n    const triggers = et.spec.triggers.filter((t) =>\n      triggerTemplates.find((tt) => tt?.metadata.name === t?.template?.ref),\n    );\n    if (triggers.length > 0) {\n      acc.push(et);\n    }\n    return acc;\n  }, []);\n  return resourceEventListeners;\n};\n\nexport const returnValidPipelineModel = (pipeline: PipelineKind): K8sModel => {\n  if (pipeline.apiVersion === 'tekton.dev/v1beta1') {\n    return PipelineModelV1Beta1;\n  }\n  return PipelineModel;\n};\n\nexport const returnValidPipelineRunModel = (pipelineRun: PipelineRunKind): K8sModel => {\n  if (pipelineRun.apiVersion === 'tekton.dev/v1beta1') {\n    return PipelineRunModelV1Beta1;\n  }\n  return PipelineRunModel;\n};\n\nexport const returnValidTaskModel = (task: TaskKind): K8sModel => {\n  if (task.apiVersion === 'tekton.dev/v1beta1') {\n    return TaskModelV1Beta1;\n  }\n  return TaskModel;\n};\n\nexport enum TaskRunResultsAnnotations {\n  KEY = 'task.results.key',\n  TYPE = 'task.results.type',\n}\n\nexport enum TaskRunResultsAnnotationValue {\n  EXTERNAL_LINK = 'external-link',\n}\n\nexport enum TaskRunResults {\n  IMAGE_REPOSITORY = 'IMAGE_URL',\n  SBOM = 'LINK_TO_SBOM',\n  SCAN_OUTPUT = 'SCAN_OUTPUT',\n  TEST_OUTPUT = 'TEST_OUTPUT',\n}\n\nexport const getSbomTaskRun = (taskruns: TaskRunKind[]): TaskRunKind =>\n  taskruns?.find(\n    (tr) => tr?.metadata?.annotations?.[TaskRunResultsAnnotations.KEY] === TaskRunResults.SBOM,\n  );\n\nexport const hasExternalLink = (sbomTaskRun: TaskRunKind): boolean =>\n  sbomTaskRun?.metadata?.annotations?.[TaskRunResultsAnnotations.TYPE] ===\n  TaskRunResultsAnnotationValue.EXTERNAL_LINK;\n\nexport const getSbomLink = (sbomTaskRun: TaskRunKind): string | undefined =>\n  (sbomTaskRun?.status?.results || sbomTaskRun?.status?.taskResults)?.find(\n    (r) => r.name === TaskRunResults.SBOM,\n  )?.value;\n\nexport const getImageUrl = (PipelineRun: PipelineRunKind): string | undefined =>\n  (PipelineRun?.status?.results || PipelineRun?.status?.pipelineResults)?.find(\n    (r) => r.name === TaskRunResults.IMAGE_REPOSITORY,\n  )?.value;\n\nexport const taskRunStatus = (taskRun: TaskRunKind | PLRTaskRunData): ComputedStatus => {\n  if (!taskRun?.status?.conditions?.length) {\n    return ComputedStatus.Pending;\n  }\n  const status: ComputedStatus = pipelineRunStatus(taskRun);\n  return status;\n};\n\nexport const getPipelineRunStatus = (pipelineRun: PipelineRunKind): TaskStatus => {\n  const conditionsMessage = pipelineRun?.status?.conditions?.find(\n    (condition) => condition?.type === 'Succeeded',\n  )?.message;\n\n  // Extracting key-value pairs using updated regular expression\n  const matches = conditionsMessage?.match(/(\\w+)(?::\\s*|\\s+)(\\d+)/g);\n  // Creating the object dynamically\n  const result: PipelineRunStatusType = {};\n  matches?.forEach((match) => {\n    const [key, value] = match.split(/(?::\\s*|\\s+)/);\n    result[key.trim()] = Number(value.trim());\n  });\n\n  const totalSucceeded =\n    (result?.Completed || 0) - (result?.Failed || 0) - (result?.Cancelled || 0);\n\n  const taskRunStatusObj: TaskStatus = {\n    Running: result?.Incomplete || 0,\n    Succeeded: totalSucceeded || 0,\n    Cancelled: result?.Cancelled || 0,\n    Failed: result?.Failed || 0,\n    Skipped: result?.Skipped || 0,\n    Completed: result?.Completed || 0,\n    Cancelling: result?.Cancelled || 0,\n    PipelineNotStarted: 0,\n    Pending: 0,\n  };\n\n  return taskRunStatusObj;\n};\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n\nexport const bitBucketUserNameRegex = /^[a-z]([a-z0-9_]-?)*[a-z0-9]$/;\n","import { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\n\nexport type ResourceTarget = 'inputs' | 'outputs';\n\nexport type TektonParam = {\n  default?: string | string[];\n  description?: string;\n  name: string;\n  type?: 'string' | 'array';\n};\n\nexport type TektonTaskSteps = {\n  // TODO: Figure out required fields\n  name: string;\n  args?: string[];\n  command?: string[];\n  image?: string;\n  resources?: {}[] | {};\n  env?: { name: string; value: string }[];\n  script?: string[];\n};\n\nexport type TaskResult = {\n  name: string;\n  description?: string;\n};\n\nexport type TektonTaskSpec = {\n  metadata?: {};\n  description?: string;\n  steps: TektonTaskSteps[];\n  params?: TektonParam[];\n  resources?: TektonResourceGroup<TektonResource>;\n  results?: TaskResult[];\n  workspaces?: TektonWorkspace[];\n};\n\nexport type TektonResourceGroup<ResourceType> = {\n  inputs?: ResourceType[];\n  outputs?: ResourceType[];\n};\n\n/** Deprecated upstream - Workspaces are replacing Resources */\nexport type TektonResource = {\n  name: string;\n  optional?: boolean;\n  type: string; // TODO: limit to known strings\n};\n\nexport type TektonWorkspace = {\n  name: string;\n  description?: string;\n  mountPath?: string;\n  readOnly?: boolean;\n  optional?: boolean;\n};\n\nexport type TektonResultsRun = {\n  name: string;\n  value: string;\n};\n\nexport interface Addon {\n  enablePipelinesAsCode: boolean;\n  params: Param[];\n}\n\nexport interface Param {\n  name: string;\n  value: string;\n}\n\nexport interface Dashboard {\n  readonly: boolean;\n}\n\nexport enum MetricsLevel {\n  METRICS_PIPELINERUN_DURATION_TYPE = 'metrics.pipelinerun.duration-type',\n  METRICS_PIPELINERUN_LEVEL = 'metrics.pipelinerun.level',\n  METRICS_TASKRUN_DURATION_TYPE = 'metrics.taskrun.duration-type',\n  METRICS_TASKRUN_LEVEL = 'metrics.taskrun.level',\n}\n\nexport enum LevelTypes {\n  PIPELINE = 'pipeline',\n  PIPELINERUN = 'pipelinerun',\n  TASK = 'task',\n  TASKRUN = 'taskrun',\n}\n\nexport enum DurationTypes {\n  HISTOGRAM = 'histogram',\n  LASTVALUE = 'lastvalue',\n  NAMESPACE = 'namespace',\n}\n\nexport interface Pipeline {\n  'default-service-account': string;\n  'disable-affinity-assistant': boolean;\n  'disable-creds-init': boolean;\n  'enable-api-fields': string;\n  'enable-custom-tasks': boolean;\n  'enable-tekton-oci-bundles': boolean;\n  [MetricsLevel.METRICS_PIPELINERUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_PIPELINERUN_LEVEL]: LevelTypes;\n  [MetricsLevel.METRICS_TASKRUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_TASKRUN_LEVEL]: LevelTypes;\n  params: Param[];\n  'require-git-ssh-secret-known-hosts': boolean;\n  'running-in-environment-with-injected-sidecars': boolean;\n  'scope-when-expressions-to-task': boolean;\n}\n\nexport interface Pruner {\n  keep: number;\n  resources: string[];\n  schedule: string;\n}\n\nexport interface Trigger {\n  'default-service-account': string;\n  'enable-api-fields': string;\n}\n\nexport interface Spec {\n  addon: Addon;\n  config: {};\n  dashboard: Dashboard;\n  hub: {};\n  params: Param[];\n  pipeline: Pipeline;\n  profile: string;\n  pruner: Pruner;\n  targetNamespace: string;\n  trigger: Trigger;\n}\n\nexport interface Status {\n  conditions: TektonConfigCondition[];\n}\n\nexport interface TektonConfigCondition {\n  lastTransitionTime: string;\n  status: string;\n  type: string;\n}\n\nexport type TektonConfig = K8sResourceCommon & {\n  spec: Spec;\n  status: Status;\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  ObjectMetadata,\n} from '@console/internal/module/k8s';\nimport { TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineKind, PipelineSpec } from './pipeline';\n\nexport type PLRTaskRunStep = {\n  container: string;\n  imageID?: string;\n  name: string;\n  waiting?: {\n    reason: string;\n  };\n  running?: {\n    startedAt: string;\n  };\n  terminated?: {\n    containerID: string;\n    exitCode: number;\n    finishedAt: string;\n    reason: string;\n    startedAt: string;\n    message?: string;\n  };\n};\n\nexport type PLRTaskRunData = {\n  pipelineTaskName: string;\n  status: {\n    completionTime?: string;\n    conditions: Condition[];\n    /** Can be empty */\n    podName: string;\n    startTime: string;\n    steps?: PLRTaskRunStep[];\n    taskSpec?: TektonTaskSpec;\n    taskResults?: { name: string; value: string }[]; // in tekton v1 taskResults is renamed to results\n    results?: { name: string; value: string }[];\n  };\n};\n\nexport type PLRTaskRuns = {\n  [taskRunName: string]: PLRTaskRunData;\n};\n\nexport type VolumeTypeSecret = {\n  secretName: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypeConfigMaps = {\n  name: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypePVC = {\n  claimName: string;\n};\n\nexport type PersistentVolumeClaimType = {\n  persistentVolumeClaim: VolumeTypePVC;\n};\n\nexport type VolumeClaimTemplateType = {\n  volumeClaimTemplate: VolumeTypeClaim;\n};\nexport type VolumeTypeClaim = {\n  metadata?: ObjectMetadata;\n  spec: {\n    accessModes: string[];\n    resources: {\n      requests: {\n        storage: string;\n      };\n    };\n    storageClassName?: string;\n    volumeMode?: string;\n  };\n};\n\nexport type Condition = {\n  type: string;\n  status: string;\n  reason?: string;\n  message?: string;\n  lastTransitionTime?: string;\n};\n\nexport type ChildReferences = {\n  apiVersion: string;\n  kind: string;\n  name: string;\n  pipelineTaskName: string;\n};\n\nexport type PipelineRunEmbeddedResourceParam = { name: string; value: string };\nexport type PipelineRunEmbeddedResource = {\n  name: string;\n  resourceSpec: {\n    params: PipelineRunEmbeddedResourceParam[];\n    type: string;\n  };\n};\nexport type PipelineRunReferenceResource = {\n  name: string;\n  resourceRef: {\n    name: string;\n  };\n};\nexport type PipelineRunResource = PipelineRunReferenceResource | PipelineRunEmbeddedResource;\n\nexport type PipelineRunWorkspace = {\n  name: string;\n  [volumeType: string]:\n    | VolumeTypeSecret\n    | VolumeTypeConfigMaps\n    | VolumeTypePVC\n    | VolumeTypeClaim\n    | {};\n};\n\nexport type PipelineRunParam = {\n  name: string;\n  value: string | string[];\n\n  // TODO: To be validated\n  input?: string;\n  output?: string;\n  resource?: object;\n};\n\nexport type PipelineRunStatus = {\n  succeededCondition?: string;\n  creationTimestamp?: string;\n  conditions?: Condition[];\n  startTime?: string;\n  completionTime?: string;\n  taskRuns?: PLRTaskRuns;\n  pipelineSpec: PipelineSpec;\n  skippedTasks?: {\n    name: string;\n  }[];\n  pipelineResults?: TektonResultsRun[]; // in tekton v1 pipelineResults is renamed to results\n  results?: TektonResultsRun[];\n  childReferences?: ChildReferences[];\n};\n\nexport type PipelineRunKind = K8sResourceCommon & {\n  spec: {\n    pipelineRef?: { name: string };\n    pipelineSpec?: PipelineSpec;\n    params?: PipelineRunParam[];\n    workspaces?: PipelineRunWorkspace[];\n    resources?: PipelineRunResource[];\n    serviceAccountName?: string;\n    timeout?: string;\n    // Only used in a single case - cancelling a pipeline; should not be copied between PLRs\n    status?: 'StoppedRunFinally' | 'PipelineRunPending' | 'CancelledRunFinally';\n    // In tekton v1 ServiceAccountName is moved\n    // to TaskRunTemplate as TaskRunTemplate.ServiceAccountName\n    taskRunTemplate?: {\n      serviceAccountName?: string;\n    };\n  };\n  status?: PipelineRunStatus;\n};\n\nexport type PipelineWithLatest = PipelineKind & {\n  latestRun?: PipelineRunKind;\n};\n\nexport const PipelineRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'PipelineRun',\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  PersistentVolumeClaimKind,\n} from '@console/internal/module/k8s';\nimport { TektonResource, TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineTaskParam, PipelineTaskRef } from './pipeline';\nimport {\n  Condition,\n  PLRTaskRunStep,\n  VolumeTypeConfigMaps,\n  VolumeTypePVC,\n  VolumeTypeSecret,\n} from './pipelineRun';\n\nexport type TaskRunWorkspace = {\n  name: string;\n  volumeClaimTemplate?: PersistentVolumeClaimKind;\n  persistentVolumeClaim?: VolumeTypePVC;\n  configMap?: VolumeTypeConfigMaps;\n  emptyDir?: {};\n  secret?: VolumeTypeSecret;\n  subPath?: string;\n};\n\nexport type TaskRunStatus = {\n  completionTime?: string;\n  conditions?: Condition[];\n  podName?: string;\n  startTime?: string;\n  steps?: PLRTaskRunStep[];\n  taskResults?: TektonResultsRun[]; // in tekton v1 taskResults is renamed to results\n  results?: TektonResultsRun[];\n};\n\nexport type TaskRunKind = K8sResourceCommon & {\n  spec: {\n    taskRef?: PipelineTaskRef;\n    taskSpec?: TektonTaskSpec;\n    serviceAccountName?: string;\n    params?: PipelineTaskParam[];\n    resources?: TektonResource[];\n    timeout?: string;\n    workspaces?: TaskRunWorkspace[];\n  };\n  status?: TaskRunStatus;\n};\n\nexport const TaskRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'TaskRun',\n};\n\nexport type PipelineRunStatusType = {\n  Completed?: number;\n  Failed?: number;\n  Skipped?: number;\n  Cancelled?: number;\n  Incomplete?: number;\n  PipelineNotStarted?: number;\n  Pending?: number;\n  Running?: number;\n  Succeeded?: number;\n};\n","export enum ComputedStatus {\n  Cancelling = 'Cancelling',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Running = 'Running',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'In Progress' = 'In Progress',\n  FailedToStart = 'FailedToStart',\n  PipelineNotStarted = 'PipelineNotStarted',\n  Skipped = 'Skipped',\n  Cancelled = 'Cancelled',\n  Pending = 'Pending',\n  Idle = 'Idle',\n  Other = '-',\n}\n\nexport enum CustomRunStatus {\n  RunCancelled = 'RunCancelled',\n}\n","import { chart_color_black_400 as skippedColor } from '@patternfly/react-tokens/dist/js/chart_color_black_400';\nimport { chart_color_black_500 as cancelledColor } from '@patternfly/react-tokens/dist/js/chart_color_black_500';\nimport { chart_color_blue_100 as pendingColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_300 as runningColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_green_400 as successColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { global_danger_color_100 as failureColor } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport i18next from 'i18next';\nimport {\n  K8sKind,\n  referenceForModel,\n  GroupVersionKind,\n  apiVersionForModel,\n} from '@console/internal/module/k8s';\nimport { TektonResourceLabel } from '../components/pipelines/const';\nimport {\n  ClusterTaskModel,\n  ClusterTriggerBindingModel,\n  TaskModel,\n  TriggerBindingModel,\n  PipelineModel,\n} from '../models';\nimport { ComputedStatus, PipelineKind, PipelineRunKind, PipelineTask, TaskRunKind } from '../types';\nimport { pipelineRunFilterReducer, SucceedConditionReason } from './pipeline-filter-reducer';\n\ninterface Metadata {\n  name: string;\n  namespace?: string;\n}\n\nexport interface PropPipelineData {\n  metadata: Metadata;\n  latestRun?: PipelineRunKind;\n}\n\nexport interface StatusMessage {\n  message: string;\n  pftoken: { name: string; value: string; var: string };\n}\n\nexport interface TaskStatus {\n  PipelineNotStarted: number;\n  Pending: number;\n  Running: number;\n  Succeeded: number;\n  Cancelled: number;\n  Failed: number;\n  Skipped: number;\n  Completed?: number;\n  Cancelling?: number;\n}\n\nexport const getLatestRun = (runs: PipelineRunKind[], field: string): PipelineRunKind => {\n  if (!runs || !(runs.length > 0) || !field) {\n    return null;\n  }\n  let latestRun = runs[0];\n  if (field === 'creationTimestamp') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].metadata &&\n        runs[i].metadata[field] &&\n        new Date(runs[i].metadata[field]) > new Date(latestRun.metadata[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else if (field === 'startTime' || field === 'completionTime') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].status &&\n        runs[i].status[field] &&\n        new Date(runs[i].status[field]) > new Date(latestRun.status[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else {\n    latestRun = runs[runs.length - 1];\n  }\n  if (!latestRun.status) {\n    latestRun = { ...latestRun, status: { pipelineSpec: { tasks: [] } } };\n  }\n  if (!latestRun.status.succeededCondition) {\n    latestRun.status = { ...latestRun.status, succeededCondition: '' };\n  }\n  latestRun.status.succeededCondition = pipelineRunFilterReducer(latestRun);\n  return latestRun;\n};\n\nexport const augmentRunsToData = (\n  pipelines: PropPipelineData[],\n  pipelineruns: PipelineRunKind[],\n): PropPipelineData[] => {\n  return pipelines.map((pipeline) => {\n    const prsForPipeline = pipelineruns.filter(\n      (pr) => pr.metadata.labels?.['tekton.dev/pipeline'] === pipeline.metadata.name,\n    );\n    pipeline.latestRun = getLatestRun(prsForPipeline, 'creationTimestamp');\n    return pipeline;\n  });\n};\n\nexport const getRunStatusColor = (status: string): StatusMessage => {\n  switch (status) {\n    case ComputedStatus.Succeeded:\n      return { message: i18next.t('pipelines-plugin~Succeeded'), pftoken: successColor };\n    case ComputedStatus.Failed:\n      return { message: i18next.t('pipelines-plugin~Failed'), pftoken: failureColor };\n    case ComputedStatus.FailedToStart:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun failed to start'),\n        pftoken: failureColor,\n      };\n    case ComputedStatus.Running:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n    case ComputedStatus['In Progress']:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n\n    case ComputedStatus.Skipped:\n      return { message: i18next.t('pipelines-plugin~Skipped'), pftoken: skippedColor };\n    case ComputedStatus.Cancelled:\n      return { message: i18next.t('pipelines-plugin~Cancelled'), pftoken: cancelledColor };\n    case ComputedStatus.Cancelling:\n      return { message: i18next.t('pipelines-plugin~Cancelling'), pftoken: cancelledColor };\n    case ComputedStatus.Idle:\n    case ComputedStatus.Pending:\n      return { message: i18next.t('pipelines-plugin~Pending'), pftoken: pendingColor };\n    default:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun not started yet'),\n        pftoken: pendingColor,\n      };\n  }\n};\n\nexport const truncateName = (name: string, length: number): string =>\n  name.length < length ? name : `${name.slice(0, length - 1)}...`;\n\nexport const getPipelineFromPipelineRun = (pipelineRun: PipelineRunKind): PipelineKind => {\n  const pipelineName =\n    pipelineRun?.metadata?.labels?.[TektonResourceLabel.pipeline] || pipelineRun?.metadata?.name;\n  const pipelineSpec = pipelineRun?.status?.pipelineSpec || pipelineRun?.spec?.pipelineSpec;\n  if (!pipelineName || !pipelineSpec) {\n    return null;\n  }\n  return {\n    apiVersion: apiVersionForModel(PipelineModel),\n    kind: PipelineModel.kind,\n    metadata: {\n      name: pipelineName,\n      namespace: pipelineRun.metadata.namespace,\n    },\n    spec: pipelineSpec,\n  };\n};\n\nexport const totalPipelineRunTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalTasks = (executedPipeline.spec?.tasks || []).length ?? 0;\n  const finallyTasks = (executedPipeline.spec?.finally || []).length ?? 0;\n  return totalTasks + finallyTasks;\n};\n\nexport const totalPipelineRunCustomTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalCustomTasks =\n    (executedPipeline.spec?.tasks || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  const finallyCustomTasks =\n    (executedPipeline.spec?.finally || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  return totalCustomTasks + finallyCustomTasks;\n};\n\nexport const getTaskStatus = (\n  pipelinerun: PipelineRunKind,\n  pipeline: PipelineKind,\n  taskRuns: TaskRunKind[],\n): TaskStatus => {\n  const totalTasks = totalPipelineRunTasks(pipeline) - totalPipelineRunCustomTasks(pipeline);\n  const plrTasks = (): string[] => {\n    if (pipelinerun?.status?.taskRuns) {\n      return Object.keys(pipelinerun.status.taskRuns);\n    }\n    if (taskRuns) {\n      return taskRuns?.map((tRun) => tRun.metadata.name);\n    }\n    return [];\n  };\n  const plrTaskLength = plrTasks().length;\n  const skippedTaskLength = (pipelinerun?.status?.skippedTasks || []).length;\n  const taskStatus: TaskStatus = {\n    PipelineNotStarted: 0,\n    Pending: 0,\n    Running: 0,\n    Succeeded: 0,\n    Failed: 0,\n    Cancelled: 0,\n    Skipped: skippedTaskLength,\n  };\n\n  if (pipelinerun?.status?.taskRuns || taskRuns) {\n    plrTasks().forEach((taskRun) => {\n      const status = pipelineRunFilterReducer(\n        taskRuns?.find((tRun) => tRun.metadata.name === taskRun) ||\n          pipelinerun.status.taskRuns[taskRun],\n      );\n      if (status === 'Succeeded') {\n        taskStatus[ComputedStatus.Succeeded]++;\n      } else if (status === 'Running') {\n        taskStatus[ComputedStatus.Running]++;\n      } else if (status === 'Failed') {\n        taskStatus[ComputedStatus.Failed]++;\n      } else if (status === 'Cancelled') {\n        taskStatus[ComputedStatus.Cancelled]++;\n      } else {\n        taskStatus[ComputedStatus.Pending]++;\n      }\n    });\n\n    const pipelineRunHasFailure = taskStatus[ComputedStatus.Failed] > 0;\n    const pipelineRunIsCancelled =\n      pipelineRunFilterReducer(pipelinerun) === ComputedStatus.Cancelled;\n    const unhandledTasks =\n      totalTasks >= plrTaskLength ? totalTasks - plrTaskLength - skippedTaskLength : totalTasks;\n\n    if (pipelineRunHasFailure || pipelineRunIsCancelled) {\n      taskStatus[ComputedStatus.Cancelled] += unhandledTasks;\n    } else {\n      taskStatus[ComputedStatus.Pending] += unhandledTasks;\n    }\n  } else if (\n    pipelinerun?.status?.conditions?.[0]?.status === 'False' ||\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunCancelled\n  ) {\n    taskStatus[ComputedStatus.Cancelled] = totalTasks;\n  } else if (pipelinerun?.spec.status === SucceedConditionReason.PipelineRunPending) {\n    taskStatus[ComputedStatus.Pending] += totalTasks;\n  } else {\n    taskStatus[ComputedStatus.PipelineNotStarted]++;\n  }\n  return taskStatus;\n};\n\nexport const getResourceModelFromTaskKind = (kind: string): K8sKind => {\n  if (kind === ClusterTaskModel.kind) {\n    return ClusterTaskModel;\n  }\n  if (kind === TaskModel.kind || kind === undefined) {\n    return TaskModel;\n  }\n  return null;\n};\n\nexport const getSafeTaskResourceKind = (kind: string): string =>\n  (getResourceModelFromTaskKind(kind) || TaskModel).kind;\n\nexport const getResourceModelFromBindingKind = (kind: string): K8sKind => {\n  if (kind === ClusterTriggerBindingModel.kind) {\n    return ClusterTriggerBindingModel;\n  }\n  if (kind === TriggerBindingModel.kind || kind === undefined) {\n    return TriggerBindingModel;\n  }\n  return null;\n};\n\nexport const getSafeBindingResourceKind = (kind: string): string =>\n  (getResourceModelFromBindingKind(kind) || TriggerBindingModel).kind;\n\nexport const getResourceModelFromTask = (task: PipelineTask): K8sKind => {\n  const {\n    taskRef: { kind },\n  } = task;\n\n  return getResourceModelFromTaskKind(kind);\n};\n\nexport const pipelineRefExists = (pipelineRun: PipelineRunKind): boolean =>\n  !!pipelineRun.spec.pipelineRef?.name;\n\nexport const getModelReferenceFromTaskKind = (kind: string): GroupVersionKind => {\n  const model = getResourceModelFromTaskKind(kind);\n  return referenceForModel(model);\n};\n\nexport const countRunningTasks = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): number => {\n  const taskStatuses = taskRuns && getTaskStatus(pipelineRun, undefined, taskRuns);\n  return taskStatuses?.Running;\n};\n\nexport const shouldHidePipelineRunStop = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    (countRunningTasks(pipelineRun, taskRuns) > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunStopForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    (taskRunStatusObj?.Running > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunCancel = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    countRunningTasks(pipelineRun, taskRuns) > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n\nexport const shouldHidePipelineRunCancelForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    taskRunStatusObj?.Running > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n","import { GitProvider } from '@console/git-service/src';\nimport { RepositoryFormValues } from './types';\n\nexport enum RepositoryFields {\n  REPOSITORY = 'Repository',\n  URL_REPO = 'RepoUrl',\n  URL_ORG = 'RepoOrg',\n  SHA = 'sha',\n  EVENT_TYPE = 'EventType',\n}\n\nexport enum RepoAnnotationFields {\n  SHA_MESSAGE = 'sha_message',\n  SHA_URL = 'sha_url',\n  REPO_URL = 'repo_url',\n  BRANCH = 'Branch',\n}\n\nexport enum RepositoryRuntimes {\n  golang = 'go',\n  nodejs = 'nodejs',\n  python = 'python',\n  java = 'java',\n}\n\nexport const RepositoryLabels: Record<RepositoryFields, string> = {\n  [RepositoryFields.REPOSITORY]: 'pipelinesascode.tekton.dev/repository',\n  [RepositoryFields.URL_REPO]: 'pipelinesascode.tekton.dev/url-repository',\n  [RepositoryFields.URL_ORG]: 'pipelinesascode.tekton.dev/url-org',\n  [RepositoryFields.SHA]: 'pipelinesascode.tekton.dev/sha',\n  [RepositoryFields.EVENT_TYPE]: 'pipelinesascode.tekton.dev/event-type',\n};\n\nexport const RepositoryAnnotations: Record<RepoAnnotationFields, string> = {\n  [RepoAnnotationFields.SHA_MESSAGE]: 'pipelinesascode.tekton.dev/sha-title',\n  [RepoAnnotationFields.SHA_URL]: 'pipelinesascode.tekton.dev/sha-url',\n  [RepoAnnotationFields.REPO_URL]: 'pipelinesascode.tekton.dev/repo-url',\n  [RepoAnnotationFields.BRANCH]: 'pipelinesascode.tekton.dev/branch',\n};\n\nexport const baseURL = 'https://github.com';\n\nexport enum PacConfigurationTypes {\n  GITHUB = 'github',\n  WEBHOOK = 'webhook',\n}\n\nexport const defaultRepositoryFormValues: RepositoryFormValues = {\n  gitUrl: '',\n  githubAppAvailable: false,\n  gitProvider: GitProvider.INVALID,\n  name: '',\n  method: 'github',\n  showOverviewPage: false,\n  yamlData: ``,\n  webhook: {\n    token: '',\n    method: 'token',\n    secret: '',\n    url: '',\n    user: '',\n    autoAttach: false,\n  },\n};\n\nexport const AccessTokenDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token',\n  [GitProvider.GITLAB]: 'https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/',\n};\n\nexport const WebhookDocLinks = {\n  [GitProvider.GITHUB]:\n    'https://docs.github.com/en/developers/webhooks-and-events/webhooks/creating-webhooks',\n  [GitProvider.GITLAB]:\n    'https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#configure-a-webhook-in-gitlab',\n  [GitProvider.BITBUCKET]: 'https://support.atlassian.com/bitbucket-cloud/docs/manage-webhooks/',\n};\n\nexport const gitProviderTypesHosts = ['github.com', 'bitbucket.org', 'gitlab.com'];\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { GitProvider } from '@console/git-service/src';\nimport { importFlowRepositoryValidationSchema } from '@console/pipelines-plugin/src/components/repository/repository-form-utils';\nimport { nameValidationSchema, nameRegex } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  gitValidationSchema,\n  dockerValidationSchema,\n  buildValidationSchema,\n  gitUrlRegex,\n  resourcesValidationSchema,\n  devfileValidationSchema,\n  importFlowPipelineTemplateValidationSchema,\n} from './validation-schema';\n\nexport const validationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: nameValidationSchema(t),\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    image: imageValidationSchema(t),\n    git: gitValidationSchema(t),\n    docker: dockerValidationSchema(t),\n    devfile: devfileValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    build: buildValidationSchema,\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n    pac: importFlowRepositoryValidationSchema(t),\n    pipeline: importFlowPipelineTemplateValidationSchema,\n  });\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  if (hasDomain(url, 'gitea.com') || url.includes('gitea')) {\n    return GitProvider.GITEA;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nexport const createComponentName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return nameString;\n  }\n\n  const kebabCaseStr = _.kebabCase(nameString);\n  return nameString.match(/^\\d/) || kebabCaseStr.match(/^\\d/)\n    ? `ocp-${kebabCaseStr}`\n    : kebabCaseStr;\n};\n\nexport const detectGitRepoName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createComponentName(name);\n};\n","import { parsePrometheusDuration } from '@openshift-console/plugin-shared/src/datetime/prometheus';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport {\n  DataPoint,\n  PrometheusResponse,\n  PrometheusResult,\n} from '@console/internal/components/graphs';\nimport { humanizeNumberSI } from '@console/internal/components/utils';\nimport { dateFormatterNoYear } from '@console/internal/components/utils/datetime';\nimport { PipelineKind } from '../../../types';\nimport { PipelineMetricsLevel } from '../const';\n\nexport interface GraphData {\n  chartName: string;\n  hasData: boolean;\n}\nexport interface PipelineMetricsGraphProps {\n  pipeline: PipelineKind;\n  timespan: number;\n  queryPrefix: string;\n  metricsLevel: string;\n  interval: number;\n  width?: number;\n\n  loaded?: boolean;\n  onLoad?: (g: GraphData) => void;\n}\nexport enum PipelineQuery {\n  NUMBER_OF_PIPELINE_RUNS = 'NUMBER_OF_PIPELINE_RUNS',\n  PIPELINE_RUN_DURATION = 'PIPELINE_RUN_DURATION',\n  PIPELINE_RUN_TASK_RUN_DURATION = 'PIPELINE_RUN_TASK_RUN_DURATION',\n  PIPELINE_SUCCESS_RATIO = 'PIPELINE_SUCCESS_RATIO',\n}\n\nexport enum MetricsQueryPrefix {\n  TEKTON = 'tekton',\n  TEKTON_PIPELINES_CONTROLLER = 'tekton_pipelines_controller',\n}\n\nexport const metricsQueries = (\n  prefix: string = MetricsQueryPrefix.TEKTON_PIPELINES_CONTROLLER,\n) => ({\n  [PipelineMetricsLevel.PIPELINE_TASK_LEVEL]: {\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"}`,\n    ),\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})`,\n    ),\n  },\n  [PipelineMetricsLevel.PIPELINERUN_TASKRUN_LEVEL]: {\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(count by (pipelinerun) (${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"}))`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_TASK_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_taskrun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})  by (pipelinerun, task)`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})  by (pipelinerun)`,\n    ),\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `count(sort_desc(${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})) by(status)`,\n    ),\n  },\n  [PipelineMetricsLevel.UNSIMPLIFIED_METRICS_LEVEL]: {\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(count by (pipelinerun) (${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"}))`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_TASK_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_taskrun_duration_seconds_sum{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})  by (pipelinerun, task)`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds_sum{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})  by (pipelinerun)`,\n    ),\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `count(sort_desc(${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})) by(status)`,\n    ),\n  },\n});\n\nconst formatPositiveValue = (v: number): string =>\n  v === 0 || (v >= 0.001 && v < 1e23) ? humanizeNumberSI(v).string : v.toExponential(1);\nexport const formatValue = (v: number): string =>\n  (v < 0 ? '-' : '') + formatPositiveValue(Math.abs(v));\nexport const formatDate = (date: Date) => {\n  return dateFormatterNoYear.format(date);\n};\nexport const formatTimeSeriesValues = (result: PrometheusResult, samples: number, span: number) => {\n  const { metric, values } = result;\n  const newValues = _.map(values, (v) => {\n    const y = Number(v[1]);\n    return {\n      x: new Date(new Date(v[0] * 1000).setHours(0, 0, 0, 0)),\n      y: Number.isNaN(y) ? null : y,\n      metric,\n    };\n  });\n\n  // The data may have missing values, so we fill those gaps with nulls so that the graph correctly\n  // shows the missing values as gaps in the line\n  const start = Number(_.get(newValues, '[0].x'));\n  const end = Number(_.get(_.last(newValues), 'x'));\n  const step = span / samples;\n  _.range(start, end, step).forEach((t, i) => {\n    const x = new Date(t);\n    if (_.get(newValues, [i, 'x']) > x) {\n      newValues.splice(i, 0, { x, y: null, metric });\n    }\n  });\n\n  return newValues;\n};\n\ntype XMutator = (x: any) => Date | string;\ntype YMutator = (y: any) => number;\nexport const getRangeVectorData = (\n  response: PrometheusResponse,\n  xMutator: XMutator,\n  yMutator?: YMutator,\n) => {\n  const results = response?.data?.result || [];\n  return results?.map((r) => {\n    return r?.values?.map(([x, y]) => {\n      return {\n        x: xMutator?.(r) ?? new Date(x * 1000),\n        y: yMutator?.(y) ?? parseFloat(y),\n        metric: r?.metric,\n        time: x,\n      };\n    });\n  });\n};\n\nexport const getXaxisValues = (timespan: number): number[] => {\n  const xValues = [];\n  if (!timespan) return xValues;\n  const oneDayDuration = parsePrometheusDuration('1d');\n  const numDays = Math.round(timespan / oneDayDuration);\n  const d = new Date(Date.now());\n  d.setHours(0, 0, 0, 0);\n  while (xValues.length - 1 < numDays) {\n    xValues.push(d.getTime());\n    d.setDate(d.getDate() - 1);\n  }\n  return xValues.slice(0, numDays);\n};\n\nexport const getDuration = (seconds: number, long?: boolean): string => {\n  if (seconds === 0) {\n    return i18next.t('pipelines-plugin~less than a sec');\n  }\n  let sec = Math.round(seconds);\n  let min = 0;\n  let hr = 0;\n  let duration = '';\n  if (sec >= 60) {\n    min = Math.floor(sec / 60);\n    sec %= 60;\n  }\n  if (min >= 60) {\n    hr = Math.floor(min / 60);\n    min %= 60;\n  }\n  if (hr > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} hour', { count: hr })\n      : i18next.t('pipelines-plugin~{{hr}}h', { hr });\n    duration += ' ';\n  }\n  if (min > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} minute', { count: min })\n      : i18next.t('pipelines-plugin~{{min}}m', { min });\n    duration += ' ';\n  }\n  if (sec > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} second', { count: sec })\n      : i18next.t('pipelines-plugin~{{sec}}s', { sec });\n  }\n\n  return duration.trim();\n};\n\nexport const PipelineMetricsTimeRangeOptions = () => ({\n  '1d': i18next.t('pipelines-plugin~1 day'),\n  '3d': i18next.t('pipelines-plugin~3 days'),\n  '1w': i18next.t('pipelines-plugin~1 week'),\n  '2w': i18next.t('pipelines-plugin~2 weeks'),\n  '3w': i18next.t('pipelines-plugin~3 weeks'),\n  '4w': i18next.t('pipelines-plugin~4 weeks'),\n});\n\nexport const getTransformedDataPoints = (data: DataPoint[]): DataPoint[] => {\n  let previousValue = 0;\n  return _.sortBy(data, 'x').map((val) => {\n    const currentValue = val.y - previousValue;\n    previousValue += val.y;\n    return { ...val, y: currentValue };\n  });\n};\n","import { apiVersionForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin/src';\nimport { AutoscaleWindowType } from '../import-types';\n\nexport const getAutoscaleWindow = (autoscaleValue: string): AutoscaleWindowType => {\n  const windowRegEx = /^[0-9]+|[a-zA-Z]*/g;\n  const [val, unit] = autoscaleValue?.match(windowRegEx);\n  return {\n    autoscalewindow: Number(val) || '',\n    autoscalewindowUnit: unit || 's',\n    defaultAutoscalewindowUnit: unit || 's',\n  };\n};\n\nconst DOMAIN_MAPPING_KSVC_INFO_REGEX = / *\\([^)]*\\) */g;\n\nexport const removeKsvcInfoFromDomainMapping = (dm: string) =>\n  dm.replace(DOMAIN_MAPPING_KSVC_INFO_REGEX, '');\n\nexport const getOtherKsvcFromDomainMapping = (\n  dm: K8sResourceKind,\n  currentKsvcName: string,\n): string | null => {\n  if (!dm.spec?.ref) return null;\n  const { apiVersion, kind, name } = dm.spec.ref;\n  return apiVersionForModel(ServiceModel) === apiVersion &&\n    kind === ServiceModel.kind &&\n    name !== currentKsvcName\n    ? name\n    : null;\n};\n\nexport const removeDuplicateDomainMappings = (\n  allDomainMappings: string[],\n  connectedDomainMappings: string[],\n): string[] => {\n  return [\n    ...new Set(\n      allDomainMappings\n        ?.filter((dm) =>\n          connectedDomainMappings?.length > 0\n            ? connectedDomainMappings?.includes(removeKsvcInfoFromDomainMapping(dm))\n            : true,\n        )\n        .map((n) => removeKsvcInfoFromDomainMapping(n)),\n    ),\n  ];\n};\n\nexport const hasOtherKsvcDomainMappings = (domainMapping: string[]): boolean =>\n  domainMapping.some((dm) => new RegExp(DOMAIN_MAPPING_KSVC_INFO_REGEX).test(dm));\n\nexport const getAllOtherDomainMappingInUse = (\n  domainMappings: string[],\n  data: K8sResourceKind[] = [],\n  serviceName: string,\n): K8sResourceKind[] =>\n  domainMappings\n    .filter((d) => hasOtherKsvcDomainMappings([d]))\n    .map((dm) => {\n      const selectedDomain = data?.find(\n        (d) => d.metadata.name === removeKsvcInfoFromDomainMapping(dm),\n      );\n      return selectedDomain && selectedDomain.spec?.ref?.name !== serviceName\n        ? selectedDomain\n        : null;\n    })\n    .filter((d) => !!d);\n","import * as GitUrlParse from 'git-url-parse';\nimport { TFunction } from 'i18next';\nimport { Base64 } from 'js-base64';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { gitUrlRegex } from '@console/dev-console/src/components/import/validation-schema';\nimport { bitBucketUserNameRegex } from '@console/dev-console/src/utils/yup-validation-util';\nimport {\n  k8sCreateResource,\n  k8sGetResource,\n  k8sListResourceItems,\n  k8sPatchResource,\n} from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { getGitService, GitProvider } from '@console/git-service/src';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { ConfigMapModel, SecretModel } from '@console/internal/models';\nimport { ConfigMapKind, SecretKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { nameRegex } from '@console/shared/src';\nimport { RepositoryModel } from '../../models';\nimport { PipelineType } from '../import/import-types';\nimport { PAC_TEMPLATE_DEFAULT } from '../pac/const';\nimport { PIPELINERUN_TEMPLATE_NAMESPACE } from '../pipelines/const';\nimport { RepositoryRuntimes, gitProviderTypesHosts } from './consts';\nimport { RepositoryFormValues } from './types';\n\nexport const dryRunOpt = { dryRun: 'All' };\n\nexport const repositoryValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .matches(nameRegex, {\n        message: t(\n          'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .required(t('pipelines-plugin~Required')),\n    gitUrl: yup\n      .string()\n      .matches(gitUrlRegex, t('pipelines-plugin~Invalid Git URL.'))\n      .required(t('pipelines-plugin~Required')),\n    accessToken: yup.string(),\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(bitBucketUserNameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers, underscores and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl && !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const pipelinesAccessTokenValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    webhook: yup\n      .object()\n      .when('gitProvider', {\n        is: GitProvider.BITBUCKET,\n        then: yup.object().shape({\n          user: yup\n            .string()\n            .matches(nameRegex, {\n              message: t(\n                'pipelines-plugin~Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n              ),\n              excludeEmptyString: true,\n            })\n            .required(t('pipelines-plugin~Required')),\n        }),\n      })\n      .when(['method', 'gitProvider', 'gitUrl'], {\n        is: (method, gitProvider, gitUrl) =>\n          gitUrl &&\n          gitProvider &&\n          !(gitProvider === GitProvider.GITHUB && method === GitProvider.GITHUB),\n        then: yup.object().shape({\n          token: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n          secretRef: yup.string().test('oneOfRequired', 'Required', function () {\n            return this.parent.token || this.parent.secretRef;\n          }),\n        }),\n      }),\n  });\n\nexport const importFlowRepositoryValidationSchema = (t: TFunction) => {\n  return yup.object().shape({\n    repository: yup.object().when(['pipelineType', 'pipelineEnabled'], {\n      is: (pipelineType, pipelineEnabled) => pipelineType === PipelineType.PAC && pipelineEnabled,\n      then: pipelinesAccessTokenValidationSchema(t),\n    }),\n  });\n};\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return (\n    url.startsWith(`https://${domain}/`) ||\n    url.startsWith(`https://www.${domain}/`) ||\n    url.includes(`@${domain}:`)\n  );\n};\n\nexport const detectGitType = (url: string): GitProvider => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitProvider.INVALID;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitProvider.GITHUB;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitProvider.BITBUCKET;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitProvider.GITLAB;\n  }\n  // Not a known URL\n  return GitProvider.UNSURE;\n};\n\nconst createTokenSecret = async (\n  repositoryName: string,\n  user: string,\n  token: string,\n  namespace: string,\n  detectedGitType: GitProvider,\n  webhookSecret?: string,\n  dryRun?: boolean,\n) => {\n  const data: SecretKind = {\n    apiVersion: SecretModel.apiVersion,\n    kind: SecretModel.kind,\n    metadata: {\n      generateName: `${repositoryName}-token-`,\n      namespace,\n    },\n    type: SecretType.opaque,\n    stringData: {\n      'provider.token': token,\n      ...(webhookSecret && { 'webhook.secret': webhookSecret }),\n      ...(detectedGitType === GitProvider.BITBUCKET && {\n        'webhook.auth': Base64.encode(`${user}:${token}`),\n      }),\n    },\n  };\n\n  return k8sCreateResource({\n    model: SecretModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n};\n\nexport const createRepositoryResources = async (\n  values: RepositoryFormValues,\n  namespace: string,\n  labels: { [key: string]: string } = {},\n  dryRun?: boolean,\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    gitUrl,\n    webhook: { secretObj, method, token, secret: webhookSecret, user },\n  } = values;\n  const encodedSecret = Base64.encode(webhookSecret);\n  const detectedGitType = detectGitType(gitUrl);\n  let secret: SecretKind;\n  if (token && method === 'token') {\n    secret = await createTokenSecret(\n      name,\n      user,\n      token,\n      namespace,\n      detectedGitType,\n      webhookSecret,\n      dryRun,\n    );\n  } else if (\n    method === 'secret' &&\n    secretObj &&\n    secretObj?.data?.['webhook.secret'] !== encodedSecret\n  ) {\n    await k8sPatchResource({\n      model: SecretModel,\n      resource: secretObj,\n      data: [{ op: 'replace', path: `/data/webhook.secret`, value: Base64.encode(webhookSecret) }],\n    });\n  }\n  const gitHost = GitUrlParse(gitUrl).source;\n  const secretRef = secret || secretObj;\n  const data = {\n    kind: RepositoryModel.kind,\n    apiVersion: 'pipelinesascode.tekton.dev/v1alpha1',\n    metadata: {\n      name,\n      namespace,\n      ...(labels || {}),\n    },\n    spec: {\n      url: gitUrl,\n      ...(secretRef || gitHost !== 'github.com'\n        ? {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            git_provider: {\n              ...(!gitProviderTypesHosts.includes(gitHost) ? { url: gitHost } : {}),\n              ...(gitHost === 'bitbucket.org'\n                ? {\n                    user,\n                  }\n                : {}),\n              ...(secretRef\n                ? {\n                    secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'provider.token',\n                    },\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    webhook_secret: {\n                      name: secretRef?.metadata?.name,\n                      key: 'webhook.secret',\n                    },\n                  }\n                : {}),\n            },\n          }\n        : {}),\n    },\n  };\n\n  const resource = await k8sCreateResource({\n    model: RepositoryModel,\n    data,\n    ns: namespace,\n    queryParams: dryRun ? dryRunOpt : {},\n  });\n\n  return resource;\n};\n\nexport const createRemoteWebhook = async (\n  values: RepositoryFormValues,\n  pac: ConfigMapKind,\n  loaded: boolean,\n): Promise<boolean> => {\n  const {\n    gitUrl,\n    webhook: { method, token, secret: webhookSecret, url: webhookURL, secretObj, user },\n  } = values;\n  const detectedGitType = detectGitType(gitUrl);\n  const gitService = getGitService(gitUrl, detectedGitType);\n\n  let sslVerification = true;\n  if (loaded && pac?.data?.['webhook-ssl-verification'] === 'false') {\n    sslVerification = false;\n  }\n\n  let authToken: string;\n  if (detectedGitType === GitProvider.BITBUCKET) {\n    authToken =\n      method === 'token'\n        ? Base64.encode(`${user}:${token}`)\n        : Base64.decode(secretObj?.data?.['webhook.auth']);\n  } else {\n    authToken = method === 'token' ? token : Base64.decode(secretObj?.data?.['provider.token']);\n  }\n\n  const webhookCreationStatus = await gitService.createRepoWebhook(\n    authToken,\n    webhookURL,\n    sslVerification,\n    webhookSecret,\n  );\n\n  return webhookCreationStatus;\n};\n\nexport const createRepositoryName = (nameString: string): string => {\n  if (nameRegex.test(nameString)) {\n    return `git-${nameString}`;\n  }\n  return `git-${_.kebabCase(nameString)}`;\n};\n\nexport const recommendRepositoryName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n  const name = url.replace(/\\/$/, '').split('/').pop();\n  return createRepositoryName(name);\n};\n\nexport const getFallbackTemplate = (repoName: string): string => `apiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: ${repoName ?? 'pull_request'}\n  annotations:\n    # The event we are targeting as seen from the webhook payload\n    # this can be an array too, i.e: [pull_request, push]\n    pipelinesascode.tekton.dev/on-event: \"[pull_request, push]\"\n\n    # The branch or tag we are targeting (ie: main, refs/tags/*)\n    pipelinesascode.tekton.dev/on-target-branch: \"main\"\n\n    # Fetch the git-clone task from hub, we are able to reference later on it\n    # with taskRef and it will automatically be embedded into our pipeline.\n    pipelinesascode.tekton.dev/task: \"git-clone\"\n\n    # You can add more tasks in here to reuse, browse the one you like from here\n    # https://hub.tekton.dev/\n    # example:\n    # pipelinesascode.tekton.dev/task-2: \"[maven, buildah]\"\n\n    # How many runs we want to keep attached to this event\n    pipelinesascode.tekton.dev/max-keep-runs: \"5\"\nspec:\n  params:\n    # The variable with brackets are special to Pipelines as Code\n    # They will automatically be expanded with the events from Github.\n    - name: repo_url\n      value: \"{{ repo_url }}\"\n    - name: revision\n      value: \"{{ revision }}\"\n  pipelineSpec:\n    params:\n      - name: repo_url\n      - name: revision\n    workspaces:\n      - name: source\n      - name: basic-auth\n    tasks:\n      - name: fetch-repository\n        taskRef:\n          name: git-clone\n        workspaces:\n          - name: output\n            workspace: source\n          - name: basic-auth\n            workspace: basic-auth\n        params:\n          - name: url\n            value: $(params.repo_url)\n          - name: revision\n            value: $(params.revision)\n\n      # Customize this task if you like, or just do a taskRef\n      # to one of the hub task.\n      - name: noop-task\n        runAfter:\n          - fetch-repository\n        workspaces:\n          - name: source\n            workspace: source\n        taskSpec:\n          workspaces:\n            - name: source\n          steps:\n            - name: noop-task\n              image: registry.access.redhat.com/ubi9/ubi-micro\n              workingDir: $(workspaces.source.path)\n              script: |\n                exit 0\n  workspaces:\n  - name: source\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n  # This workspace will inject secret to help the git-clone task to be able to\n  # checkout the private repositories\n  - name: basic-auth\n    secret:\n      secretName: \"{{ git_auth_secret }}\"`;\n\nexport const getPipelineRunDefaultTemplate = async (repoName: string): Promise<string> => {\n  let pipelineRunTemplate = getFallbackTemplate(repoName);\n  try {\n    const template = await k8sGetResource<ConfigMapKind>({\n      model: ConfigMapModel,\n      ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n      name: PAC_TEMPLATE_DEFAULT,\n    });\n    if (template?.data?.template) {\n      pipelineRunTemplate = template.data.template;\n    }\n  } catch (e) {\n    console.log('failed to fetch default template:', e); // eslint-disable-line no-console\n  }\n\n  return pipelineRunTemplate;\n};\n\nexport const getPipelineRunTemplate = async (\n  runtime: string,\n  repoName: string,\n): Promise<string> => {\n  let runTimeTemplate;\n  try {\n    const [pipelineRunTemplateCfg] = await k8sListResourceItems<ConfigMapKind>({\n      model: ConfigMapModel,\n      queryParams: {\n        ns: PIPELINERUN_TEMPLATE_NAMESPACE,\n        labelSelector: {\n          matchLabels: {\n            'pipelinesascode.openshift.io/runtime': RepositoryRuntimes[runtime] || runtime,\n          },\n        },\n      },\n    });\n    runTimeTemplate = pipelineRunTemplateCfg?.data?.template;\n  } catch (e) {\n    console.log('failed to fetch runtime template:', e); // eslint-disable-line no-console\n  }\n  const pipelineRunTemplate = runTimeTemplate ?? (await getPipelineRunDefaultTemplate(repoName));\n  return pipelineRunTemplate;\n};\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\n\nconst pathRegex = /^\\/.*$/;\n\nexport const MAX_INT32 = 2147483647;\n\nexport const healthChecksValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    containerName: yup.string(),\n    showForm: yup.boolean(),\n    enabled: yup.boolean(),\n    modified: yup.boolean(),\n    data: yup.object().when('showForm', {\n      is: true,\n      then: yup.object().shape({\n        periodSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Period must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        initialDelaySeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(0, t('devconsole~Initial delay must be greater than or equal to 0.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        failureThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Failure threshold must be greater than or equal to 1.')),\n        timeoutSeconds: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Timeout must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        successThreshold: yup\n          .number()\n          .integer(t('devconsole~Value must be an integer.'))\n          .min(1, t('devconsole~Success threshold must be greater than or equal to 1.'))\n          .max(MAX_INT32, t('devconsole~Value is larger than maximum value allowed.')),\n        requestType: yup.string(),\n        httpGet: yup.object().when('requestType', {\n          is: 'httpGet',\n          then: yup.object({\n            path: yup.string().matches(pathRegex, {\n              message: t('devconsole~Path must start with /.'),\n              excludeEmptyString: true,\n            }),\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        tcpSocket: yup.object().when('requestType', {\n          is: 'tcpSocket',\n          then: yup.object({\n            port: yup.number().required(t('devconsole~Required')),\n          }),\n        }),\n        exec: yup.object().when('requestType', {\n          is: 'command',\n          then: yup.object({\n            command: yup.array().of(yup.string().required(t('devconsole~Required'))),\n          }),\n        }),\n      }),\n    }),\n  });\n\nexport const healthChecksProbesValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    readinessProbe: healthChecksValidationSchema(t),\n    livenessProbe: healthChecksValidationSchema(t),\n    startupProbe: healthChecksValidationSchema(t),\n  });\n","export const PAC_GH_APP_NEW = 'https://github.com/settings/apps/new';\nexport const PAC_GH_APP_DOC =\n  'https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#about-github-apps';\nexport const PAC_GH_APP_MANIFEST_API = 'https://api.github.com/app-manifests';\nexport const EVENT_LISTNER_NAME = 'pipelines-as-code-interceptor';\nexport const PAC_SECRET_NAME = 'pipelines-as-code-secret';\nexport const PAC_GH_APP_NAME = 'pipelines-ci-clustername';\nexport const PAC_INFO = 'pipelines-as-code-info';\nexport const PAC_TEMPLATE_DEFAULT = 'pipelines-as-code-pipelinerun-generic';\n","import * as React from 'react';\nimport { Split, SplitItem, Bullseye, Icon } from '@patternfly/react-core';\nimport { LongArrowAltRightIcon } from '@patternfly/react-icons/dist/esm/icons/long-arrow-alt-right-icon';\nimport { global_Color_200 as color200 } from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { K8sResourceKind, modelFor } from '@console/internal/module/k8s';\nimport { usePodsWatcher } from '../../hooks';\nimport { getPodData } from '../../utils';\nimport PodRing from './PodRing';\n\ninterface PodRingSetProps {\n  obj: K8sResourceKind;\n  path: string;\n  impersonate?: string;\n}\n\nconst PodRingSet: React.FC<PodRingSetProps> = ({ obj, path }) => {\n  const { podData, loadError, loaded } = usePodsWatcher(obj);\n  const resourceKind = modelFor(obj?.kind);\n\n  const deploymentData = React.useMemo(() => {\n    return loaded && !loadError\n      ? getPodData({ ...podData, obj })\n      : { inProgressDeploymentData: null, completedDeploymentData: null };\n  }, [loadError, loaded, podData, obj]);\n\n  const current = podData?.current && podData?.current.obj;\n  const previous = podData?.previous && podData?.previous.obj;\n  const { inProgressDeploymentData, completedDeploymentData } = deploymentData;\n  const progressRC = inProgressDeploymentData && current;\n  const completedRC = !!inProgressDeploymentData && completedDeploymentData ? previous : current;\n\n  return loaded ? (\n    <Split hasGutter>\n      <SplitItem>\n        <PodRing\n          key={inProgressDeploymentData ? 'deploy' : 'notDeploy'}\n          pods={completedDeploymentData}\n          rc={podData?.isRollingOut ? completedRC : podData?.current?.obj}\n          resourceKind={resourceKind}\n          obj={obj}\n          path={path}\n          enableScaling={!podData?.isRollingOut}\n        />\n      </SplitItem>\n      {inProgressDeploymentData && (\n        <>\n          <SplitItem>\n            <Bullseye>\n              <Icon size=\"xl\">\n                <LongArrowAltRightIcon color={color200.value} />\n              </Icon>\n            </Bullseye>\n          </SplitItem>\n          <SplitItem>\n            <PodRing\n              pods={inProgressDeploymentData}\n              rc={progressRC}\n              resourceKind={resourceKind}\n              obj={obj}\n              path={path}\n              enableScaling={false}\n            />\n          </SplitItem>\n        </>\n      )}\n    </Split>\n  ) : (\n    <LoadingInline />\n  );\n};\n\nexport default PodRingSet;\n","export const FLAG_OPENSHIFT_PIPELINE = 'OPENSHIFT_PIPELINE';\nexport const FLAG_OPENSHIFT_PIPELINE_AS_CODE = 'OPENSHIFT_PIPELINE_AS_CODE';\nexport const FLAG_OPENSHIFT_PIPELINE_CONDITION = 'OPENSHIFT_PIPELINE_CONDITION';\nexport const CLUSTER_PIPELINE_NS = 'openshift';\nexport const PIPELINE_RUNTIME_LABEL = 'pipeline.openshift.io/runtime';\nexport const PIPELINE_RUNTIME_VERSION_LABEL = 'pipeline.openshift.io/runtime-version';\nexport const PIPELINE_STRATEGY_LABEL = 'pipeline.openshift.io/strategy';\nexport const PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY = 'pipeline.preferredPipelinePageTab';\nexport const FUNC_PIPELINE_RUNTIME_LABEL = 'function.knative.dev/runtime';\nexport const ARTIFACTHUB_API_BASE_URL = 'https://artifacthub.io/api/v1';\nexport const DELETED_RESOURCE_IN_K8S_ANNOTATION = 'resource.deleted.in.k8s';\nexport const RESOURCE_LOADED_FROM_RESULTS_ANNOTATION = 'resource.loaded.from.tektonResults';\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as semver from 'semver';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { ContainerPort, K8sResourceKind, K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  description: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getSampleRepo = (tag) => tag?.annotations?.sampleRepo ?? '';\nexport const getSampleRef = (tag) => tag?.annotations?.sampleRef ?? '';\nexport const getSampleContextDir = (tag) => tag?.annotations?.sampleContextDir ?? '';\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage): ContainerPort[] => {\n  const portSpec =\n    imageStreamImage?.image?.dockerImageMetadata?.Config?.ExposedPorts ||\n    imageStreamImage?.image?.dockerImageMetadata?.ContainerConfig?.ExposedPorts;\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceCommon | K8sResourceCommon[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = imageStream?.metadata?.annotations?.['openshift.io/display-name'];\n    const description = recentTag?.annotations?.description;\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      description,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = imageTag?.annotations?.['openshift.io/display-name'] ?? defaultName;\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = (t: TFunction) => {\n  return {\n    External: {\n      value: RegistryType.External,\n      label: t('devconsole~Image name from external registry'),\n    },\n    Internal: {\n      value: RegistryType.Internal,\n      label: t('devconsole~Image stream tag from internal registry'),\n    },\n  };\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n","import * as _ from 'lodash';\nimport { getActiveUserName } from '@console/internal/actions/ui';\nimport { getRandomChars } from '@console/shared';\nimport {\n  DELETED_RESOURCE_IN_K8S_ANNOTATION,\n  RESOURCE_LOADED_FROM_RESULTS_ANNOTATION,\n} from '../../../../const';\nimport { PipelineRunModel } from '../../../../models';\nimport {\n  PipelineKind,\n  TektonResource,\n  PipelineRunKind,\n  PipelineRunEmbeddedResource,\n  PipelineRunEmbeddedResourceParam,\n  PipelineRunReferenceResource,\n  PipelineRunResource,\n  VolumeClaimTemplateType,\n  TektonWorkspace,\n  PipelineRunParam,\n} from '../../../../types';\nimport { getPipelineRunParams, getPipelineRunWorkspaces } from '../../../../utils/pipeline-utils';\nimport {\n  TektonResourceLabel,\n  VolumeTypes,\n  preferredNameAnnotation,\n  StartedByAnnotation,\n} from '../../const';\nimport { CREATE_PIPELINE_RESOURCE, initialResourceFormValues } from './const';\nimport {\n  CommonPipelineModalFormikValues,\n  PipelineModalFormResource,\n  PipelineModalFormWorkspace,\n  PipelineModalFormWorkspaceStructure,\n} from './types';\n\n/**\n * Migrates a PipelineRun from one version to another to support auto-upgrades with old (and invalid) PipelineRuns.\n *\n * Note: Each check within this method should be driven by the apiVersion number if the API is properly up-versioned\n * for these breaking changes. (should be done moving from 0.10.x forward)\n */\nexport const migratePipelineRun = (pipelineRun: PipelineRunKind): PipelineRunKind => {\n  let newPipelineRun = pipelineRun;\n\n  const serviceAccountPath = 'spec.serviceAccount';\n  if (_.has(newPipelineRun, serviceAccountPath)) {\n    // .spec.serviceAccount was removed for .spec.serviceAccountName in 0.9.x\n    // Note: apiVersion was not updated for this change and thus we cannot gate this change behind a version number\n    const serviceAccountName = _.get(newPipelineRun, serviceAccountPath);\n    newPipelineRun = _.omit(newPipelineRun, [serviceAccountPath]);\n    newPipelineRun = _.merge(newPipelineRun, {\n      spec: {\n        serviceAccountName,\n      },\n    });\n  }\n\n  return newPipelineRun;\n};\n\nexport const getPipelineName = (pipeline?: PipelineKind, latestRun?: PipelineRunKind): string => {\n  if (pipeline) {\n    return pipeline.metadata.name;\n  }\n\n  if (latestRun) {\n    return (\n      latestRun.spec.pipelineRef?.name ??\n      (latestRun.metadata.annotations?.[preferredNameAnnotation] || latestRun.metadata.name)\n    );\n  }\n  return null;\n};\n\nexport const getPipelineRunGenerateName = (pipelineRun: PipelineRunKind): string => {\n  if (pipelineRun.metadata.generateName) {\n    return pipelineRun.metadata.generateName;\n  }\n\n  return `${pipelineRun.metadata.name?.replace(/-[a-z0-9]{5,6}$/, '')}-`;\n};\n\nexport const getPipelineRunData = (\n  pipeline: PipelineKind = null,\n  latestRun?: PipelineRunKind,\n  options?: { generateName: boolean },\n): PipelineRunKind => {\n  if (!pipeline && !latestRun) {\n    // eslint-disable-next-line no-console\n    console.error('Missing parameters, unable to create new PipelineRun');\n    return null;\n  }\n\n  const pipelineName = getPipelineName(pipeline, latestRun);\n\n  const workspaces = latestRun?.spec.workspaces;\n\n  const latestRunParams = latestRun?.spec.params;\n  const pipelineParams = pipeline?.spec.params;\n  const params = latestRunParams || getPipelineRunParams(pipelineParams);\n  // TODO: We should craft a better method to allow us to provide configurable annotations and labels instead of\n  // blinding merging existing content from potential real Pipeline and PipelineRun resources\n  const annotations = _.merge(\n    {},\n    pipeline?.metadata?.annotations,\n    latestRun?.metadata?.annotations,\n    {\n      [StartedByAnnotation.user]: getActiveUserName(),\n    },\n    !latestRun?.spec.pipelineRef &&\n      !latestRun?.metadata.annotations?.[preferredNameAnnotation] && {\n        [preferredNameAnnotation]: pipelineName,\n      },\n  );\n  delete annotations['kubectl.kubernetes.io/last-applied-configuration'];\n  delete annotations['tekton.dev/v1beta1TaskRuns'];\n  delete annotations['results.tekton.dev/log'];\n  delete annotations['results.tekton.dev/record'];\n  delete annotations['results.tekton.dev/result'];\n  delete annotations[DELETED_RESOURCE_IN_K8S_ANNOTATION];\n  delete annotations[RESOURCE_LOADED_FROM_RESULTS_ANNOTATION];\n\n  const newPipelineRun = {\n    apiVersion: pipeline ? pipeline.apiVersion : latestRun.apiVersion,\n    kind: PipelineRunModel.kind,\n    metadata: {\n      ...(options?.generateName\n        ? {\n            generateName: `${pipelineName}-`,\n          }\n        : {\n            name:\n              latestRun?.metadata?.name !== undefined\n                ? `${getPipelineRunGenerateName(latestRun)}${getRandomChars()}`\n                : `${pipelineName}-${getRandomChars()}`,\n          }),\n      annotations,\n      namespace: pipeline ? pipeline.metadata.namespace : latestRun.metadata.namespace,\n      labels: _.merge(\n        {},\n        pipeline?.metadata?.labels,\n        latestRun?.metadata?.labels,\n        (latestRun?.spec.pipelineRef || pipeline) && {\n          'tekton.dev/pipeline': pipelineName,\n        },\n      ),\n    },\n    spec: {\n      ...(latestRun?.spec || {}),\n      ...((latestRun?.spec.pipelineRef || pipeline) && {\n        pipelineRef: {\n          name: pipelineName,\n        },\n      }),\n      ...(params && { params }),\n      workspaces,\n      status: null,\n    },\n  };\n  return migratePipelineRun(newPipelineRun);\n};\n\nexport const getDefaultVolumeClaimTemplate = (pipelineName: string): VolumeClaimTemplateType => {\n  return {\n    volumeClaimTemplate: {\n      metadata: {\n        labels: { [TektonResourceLabel.pipeline]: pipelineName },\n      },\n      spec: {\n        accessModes: ['ReadWriteOnce'],\n        resources: {\n          requests: {\n            storage: '1Gi',\n          },\n        },\n      },\n    },\n  };\n};\n\nexport const getServerlessFunctionDefaultPersistentVolumeClaim = (\n  pipelineName: string,\n): VolumeClaimTemplateType => {\n  return {\n    volumeClaimTemplate: {\n      metadata: {\n        finalizers: ['kubernetes.io/pvc-protection'],\n        labels: {\n          [TektonResourceLabel.pipeline]: pipelineName,\n          'boson.dev/function': 'true',\n          'function.knative.dev': 'true',\n          'function.knative.dev/name': pipelineName,\n        },\n      },\n      spec: {\n        accessModes: ['ReadWriteOnce'],\n        resources: {\n          requests: {\n            storage: '1Gi',\n          },\n        },\n        storageClassName: 'gp3-csi',\n        volumeMode: 'Filesystem',\n      },\n    },\n  };\n};\n\nconst supportWorkspaceDefaults = (preselectPVC: string) => (\n  workspace: TektonWorkspace,\n): PipelineModalFormWorkspace => {\n  let workspaceSetting: PipelineModalFormWorkspaceStructure = {\n    type: VolumeTypes.EmptyDirectory,\n    data: { emptyDir: {} },\n  };\n\n  if (preselectPVC) {\n    workspaceSetting = {\n      type: VolumeTypes.PVC,\n      data: {\n        persistentVolumeClaim: {\n          claimName: preselectPVC,\n        },\n      },\n    };\n  }\n  if (workspace.optional) {\n    workspaceSetting = {\n      type: VolumeTypes.NoWorkspace,\n      data: {},\n    };\n  }\n\n  return {\n    ...workspace,\n    ...workspaceSetting,\n  };\n};\n\nexport const convertPipelineToModalData = (\n  pipeline: PipelineKind,\n  alwaysCreateResources: boolean = false,\n  preselectPVC: string = '',\n): CommonPipelineModalFormikValues => {\n  const {\n    metadata: { namespace },\n    spec: { params, resources },\n  } = pipeline;\n\n  return {\n    namespace,\n    parameters: (params || []).map((param) => ({\n      ...param,\n      value: param.default, // setup the default if it exists\n    })),\n    resources: (resources || []).map((resource: TektonResource) => ({\n      name: resource.name,\n      selection: alwaysCreateResources ? CREATE_PIPELINE_RESOURCE : '',\n      data: {\n        ...initialResourceFormValues[resource.type],\n        type: resource.type,\n      },\n    })),\n    workspaces: (pipeline.spec.workspaces || []).map(supportWorkspaceDefaults(preselectPVC)),\n  };\n};\n\nexport const convertMapToNameValueArray = (map: {\n  [key: string]: any;\n}): PipelineRunEmbeddedResourceParam[] => {\n  return Object.keys(map).map((name) => {\n    const value = map[name];\n    return { name, value };\n  });\n};\n\nexport const convertResources = (resource: PipelineModalFormResource): PipelineRunResource => {\n  if (resource.selection === CREATE_PIPELINE_RESOURCE) {\n    return {\n      name: resource.name,\n      resourceSpec: {\n        params: convertMapToNameValueArray(resource.data.params),\n        type: resource.data.type,\n      },\n    } as PipelineRunEmbeddedResource;\n  }\n\n  return {\n    name: resource.name,\n    resourceRef: {\n      name: resource.selection,\n    },\n  } as PipelineRunReferenceResource;\n};\n\nexport const getPipelineRunFromForm = (\n  pipeline: PipelineKind,\n  formValues: CommonPipelineModalFormikValues,\n  labels?: { [key: string]: string },\n  annotations?: { [key: string]: string },\n  options?: { generateName: boolean },\n) => {\n  const { parameters, workspaces } = formValues;\n\n  const pipelineRunData: PipelineRunKind = {\n    metadata: {\n      annotations,\n      labels,\n    },\n    spec: {\n      pipelineRef: {\n        name: pipeline.metadata.name,\n      },\n      params: parameters.map(({ name, value }): PipelineRunParam => ({ name, value })),\n      workspaces: getPipelineRunWorkspaces(workspaces),\n    },\n  };\n  return getPipelineRunData(pipeline, pipelineRunData, options);\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { TRIGGERS_ANNOTATION } from '@console/shared';\nimport { ROUTE_DISABLED_ANNOTATION } from '@console/topology/src/const';\nimport { ResourcesKinds, Resources } from '../components/import/import-types';\n\nexport const getAppLabels = ({\n  name,\n  applicationName,\n  imageStreamName,\n  runtimeIcon,\n  selectedTag,\n  namespace,\n}: {\n  name: string;\n  applicationName?: string;\n  imageStreamName?: string;\n  runtimeIcon?: string;\n  selectedTag?: string;\n  namespace?: string;\n}) => {\n  const labels = {\n    app: name,\n    'app.kubernetes.io/instance': name,\n    'app.kubernetes.io/component': name,\n    'app.kubernetes.io/name': name,\n    ...(imageStreamName && {\n      'app.openshift.io/runtime': imageStreamName,\n    }),\n  };\n\n  if (runtimeIcon) {\n    labels['app.openshift.io/runtime'] = runtimeIcon;\n  }\n  if (applicationName && applicationName.trim().length > 0) {\n    labels['app.kubernetes.io/part-of'] = applicationName;\n  }\n  if (selectedTag) {\n    labels['app.openshift.io/runtime-version'] = selectedTag;\n  }\n  if (namespace) {\n    labels['app.openshift.io/runtime-namespace'] = namespace;\n  }\n\n  return labels;\n};\n\nexport const getCommonAnnotations = () => {\n  return {\n    'openshift.io/generated-by': 'OpenShiftWebConsole',\n  };\n};\n\nexport const getRouteAnnotations = () => {\n  return {\n    [ROUTE_DISABLED_ANNOTATION]: 'false',\n  };\n};\n\nexport const getGitAnnotations = (gitURL: string, gitRef?: string) => {\n  return {\n    'app.openshift.io/vcs-uri': gitURL,\n    'app.openshift.io/vcs-ref': gitRef || '',\n  };\n};\n\nexport const getTriggerAnnotation = (\n  containerName: string,\n  imageName: string,\n  imageNamespace: string,\n  imageTrigger: boolean,\n  imageTag: string = 'latest',\n) => ({\n  [TRIGGERS_ANNOTATION]: JSON.stringify([\n    {\n      from: { kind: 'ImageStreamTag', name: `${imageName}:${imageTag}`, namespace: imageNamespace },\n      fieldPath: `spec.template.spec.containers[?(@.name==\"${containerName}\")].image`,\n      paused: `${!imageTrigger}`,\n    },\n  ]),\n});\n\nexport const getUserAnnotations = (allAnnotations: { [key: string]: string }) => {\n  const defaultAnnotations = [\n    'app.openshift.io/vcs-uri',\n    'app.openshift.io/vcs-ref',\n    'openshift.io/generated-by',\n    'image.openshift.io/triggers',\n    'alpha.image.policy.openshift.io/resolve-names',\n    'jarFileName',\n    'kubectl.kubernetes.io/last-applied-configuration',\n  ];\n  return _.omit(allAnnotations, defaultAnnotations);\n};\n\nexport const getPodLabels = (resource: Resources, name: string) => {\n  const resourceKind = ResourcesKinds[resource];\n  if (resourceKind) {\n    return {\n      app: name,\n      [resourceKind.toLowerCase()]: name,\n    };\n  }\n  return {\n    app: name,\n  };\n};\n\nexport const mergeData = (originalResource: K8sResourceKind, newResource: K8sResourceKind) => {\n  if (_.isEmpty(originalResource)) return newResource;\n\n  const mergedData = _.merge({}, originalResource || {}, newResource);\n  const isDevfileResource = originalResource?.metadata?.annotations?.isFromDevfile;\n  mergedData.metadata.labels = {\n    ...newResource.metadata.labels,\n    ...(isDevfileResource ? originalResource?.metadata?.labels : {}),\n  };\n  if (mergedData.metadata.annotations) {\n    mergedData.metadata.annotations = {\n      ...(isDevfileResource\n        ? originalResource?.metadata?.annotations\n        : getUserAnnotations(originalResource?.metadata?.annotations)),\n      ...newResource.metadata.annotations,\n    };\n  }\n  if (mergedData.spec?.template?.metadata?.labels) {\n    mergedData.spec.template.metadata.labels = newResource.spec?.template?.metadata?.labels;\n  }\n  if (!_.isEmpty(originalResource.spec?.template?.spec?.containers)) {\n    mergedData.spec.template.spec.containers = originalResource.spec.template.spec.containers;\n    const index = _.findIndex(originalResource.spec.template.spec.containers, {\n      name: originalResource.metadata.name,\n    });\n    if (index >= 0) {\n      mergedData.spec.template.spec.containers[index] = {\n        ...originalResource.spec.template.spec.containers[index],\n        ...newResource.spec.template.spec.containers[0],\n        // Keep the volumeMounts as is since we do not give an option to edit these currently\n        volumeMounts: originalResource.spec.template.spec.containers[index].volumeMounts,\n      };\n    } else {\n      mergedData.spec.template.spec.containers.push(newResource.spec.template.spec.containers[0]);\n    }\n  }\n  if (mergedData?.spec?.hasOwnProperty('strategy')) {\n    mergedData.spec.strategy = newResource.spec?.strategy ?? originalResource.spec?.strategy;\n  }\n  if (mergedData.spec?.triggers) {\n    mergedData.spec.triggers = newResource.spec.triggers;\n  }\n  if (!newResource.spec?.source?.sourceSecret) {\n    delete mergedData?.spec?.source?.sourceSecret;\n  }\n\n  if (mergedData.spec?.template?.spec?.hasOwnProperty('volumes')) {\n    mergedData.spec.template.spec.volumes = originalResource.spec?.template?.spec?.volumes;\n  }\n\n  return mergedData;\n};\n\nexport const getTemplateLabels = (deployment: K8sResourceKind) => {\n  return _.reduce(\n    deployment?.spec?.template?.metadata?.labels,\n    (acc, value, key) => {\n      if (!deployment.metadata?.labels?.hasOwnProperty(key)) {\n        acc[key] = value;\n      }\n      return acc;\n    },\n    {},\n  );\n};\n","import * as _ from 'lodash';\nimport { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nconst healthChecksAdded = (resource: K8sResourceKind): boolean => {\n  const containers = resource?.spec?.template?.spec?.containers;\n  return _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n};\n\nconst healthChecksUrl = (model: K8sKind, obj: K8sResourceKind): string => {\n  const {\n    kind,\n    metadata: { name, namespace },\n  } = obj;\n  const resourceKind = model.crd ? referenceFor(obj) : kind;\n  const containers = obj?.spec?.template?.spec?.containers;\n  const containerName = containers?.[0]?.name;\n  return `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containerName}/health-checks`;\n};\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const AddHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    // t('console-app~Add Health Checks')\n    labelKey: 'console-app~Add Health Checks',\n    hidden: healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const EditHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    // t('console-app~Edit Health Checks')\n    labelKey: 'console-app~Edit Health Checks',\n    hidden: !healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'get',\n    },\n  };\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { Resources, HealthChecksFormData } from '../import/import-types';\nimport { healthChecksDefaultValues } from './health-checks-probe-utils';\nimport {\n  HealthCheckProbeData,\n  RequestType,\n  HealthChecksProbeType,\n  HealthCheckFormProbeData,\n} from './health-checks-types';\n\nexport const constructProbeData = (\n  data: HealthCheckFormProbeData,\n  resourceType?: Resources,\n): HealthCheckProbeData => {\n  const probeData = {\n    ...(data.failureThreshold && { failureThreshold: _.toInteger(data.failureThreshold) }),\n    ...(data.successThreshold && { successThreshold: _.toInteger(data.successThreshold) }),\n    ...(data.requestType === RequestType.ContainerCommand && {\n      exec: data.exec,\n    }),\n    ...(data.requestType === RequestType.HTTPGET && {\n      httpGet: {\n        ...data[data.requestType],\n        scheme: data[data.requestType]?.scheme ? data[data.requestType].scheme[0] : 'HTTP',\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.httpGet.port),\n      },\n    }),\n    ...(data.requestType === RequestType.TCPSocket && {\n      tcpSocket: {\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.tcpSocket.port),\n      },\n    }),\n    ...(data.initialDelaySeconds && {\n      initialDelaySeconds: _.toInteger(data.initialDelaySeconds),\n    }),\n    ...(data.periodSeconds && { periodSeconds: _.toInteger(data.periodSeconds) }),\n    ...(data.timeoutSeconds && { timeoutSeconds: _.toInteger(data.timeoutSeconds) }),\n  };\n  return probeData;\n};\n\nexport const getRequestType = (data: HealthCheckProbeData) => {\n  if (_.has(data, RequestType.HTTPGET)) return RequestType.HTTPGET;\n  if (_.has(data, RequestType.TCPSocket)) return RequestType.TCPSocket;\n  if (_.has(data, 'exec.command')) return RequestType.ContainerCommand;\n  return '';\n};\n\nexport const convertResourceDataToFormData = (\n  resourceData: HealthCheckProbeData,\n): HealthCheckFormProbeData => {\n  return {\n    ...resourceData,\n    requestType: getRequestType(resourceData),\n    failureThreshold: resourceData.failureThreshold?.toString() || '',\n    successThreshold: resourceData.successThreshold?.toString() || '',\n    initialDelaySeconds: resourceData.initialDelaySeconds?.toString() || '',\n    periodSeconds: resourceData.periodSeconds?.toString() || '',\n    timeoutSeconds: resourceData.timeoutSeconds?.toString() || '',\n    ...(resourceData.httpGet && {\n      httpGet: {\n        ...resourceData.httpGet,\n        port: resourceData.httpGet.port?.toString() || '',\n        scheme: resourceData.httpGet.scheme === 'HTTP' ? undefined : ['HTTPS'],\n      },\n    }),\n    ...(resourceData.tcpSocket && {\n      tcpSocket: { port: resourceData.tcpSocket.port?.toString() || '' },\n    }),\n  };\n};\n\nexport const getHealthChecksData = (\n  resource: K8sResourceKind,\n  containerIndex: number = 0,\n): HealthChecksFormData => {\n  const containers = resource?.spec?.template?.spec?.containers ?? [];\n  const readinessProbe: HealthCheckProbeData =\n    containers?.[containerIndex]?.[HealthChecksProbeType.ReadinessProbe] ?? {};\n  const livenessProbe: HealthCheckProbeData =\n    containers?.[containerIndex]?.[HealthChecksProbeType.LivenessProbe] ?? {};\n  const startupProbe: HealthCheckProbeData =\n    containers?.[containerIndex]?.[HealthChecksProbeType.StartupProbe] ?? {};\n\n  const healthChecks = {\n    readinessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(readinessProbe),\n      data: !_.isEmpty(readinessProbe)\n        ? {\n            ...convertResourceDataToFormData(readinessProbe),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    livenessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(livenessProbe),\n      data: !_.isEmpty(livenessProbe)\n        ? {\n            ...convertResourceDataToFormData(livenessProbe),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    startupProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(startupProbe),\n      data: !_.isEmpty(startupProbe)\n        ? {\n            ...convertResourceDataToFormData(startupProbe),\n          }\n        : healthChecksDefaultValues.data,\n    },\n  };\n  return healthChecks;\n};\n\nexport const getProbesData = (healthChecks: HealthChecksFormData, resourceType?: Resources) => {\n  const { readinessProbe, livenessProbe, startupProbe } = healthChecks;\n  return {\n    ...(readinessProbe.enabled\n      ? { readinessProbe: constructProbeData(readinessProbe.data, resourceType) }\n      : {}),\n    ...(livenessProbe.enabled\n      ? { livenessProbe: constructProbeData(livenessProbe.data, resourceType) }\n      : {}),\n    ...(resourceType !== Resources.KnativeService && startupProbe?.enabled\n      ? { startupProbe: constructProbeData(startupProbe.data) }\n      : {}),\n  };\n};\n","import { NameValuePair } from '@console/shared';\n\nexport enum HealthChecksProbeType {\n  ReadinessProbe = 'readinessProbe',\n  LivenessProbe = 'livenessProbe',\n  StartupProbe = 'startupProbe',\n}\n\nexport enum RequestType {\n  HTTPGET = 'httpGet',\n  ContainerCommand = 'command',\n  TCPSocket = 'tcpSocket',\n}\nexport interface HealthCheckProbeData {\n  failureThreshold: number;\n  initialDelaySeconds: number;\n  periodSeconds: number;\n  timeoutSeconds: number;\n  successThreshold: number;\n  requestType?: string;\n  exec?: { command?: string[] };\n  httpGet?: {\n    scheme: string;\n    path: string;\n    port: number;\n    httpHeaders: NameValuePair[];\n  };\n  tcpSocket?: {\n    port: number;\n  };\n}\n\nexport interface HealthCheckFormProbeData {\n  failureThreshold: string;\n  initialDelaySeconds: string;\n  periodSeconds: string;\n  timeoutSeconds: string;\n  successThreshold: string;\n  requestType?: string;\n  exec?: { command?: string[] };\n  httpGet?: {\n    scheme: string[];\n    path: string;\n    port: string;\n    httpHeaders: NameValuePair[];\n  };\n  tcpSocket?: {\n    port: string;\n  };\n}\nexport interface HealthCheckFormProbe {\n  showForm?: boolean;\n  enabled?: boolean;\n  modified?: boolean;\n  data: HealthCheckFormProbeData;\n}\n","import { PipelineResourceType } from '../../const';\n\nexport const CREATE_PIPELINE_RESOURCE = '#CREATE_PIPELINE_RESOURCE#';\n\nexport const initialResourceFormValues = {\n  [PipelineResourceType.git]: {\n    params: {\n      url: '',\n      revision: '',\n    },\n  },\n  [PipelineResourceType.image]: {\n    params: {\n      url: '',\n    },\n  },\n  [PipelineResourceType.storage]: {\n    params: {\n      type: '',\n      location: '',\n      dir: '',\n    },\n  },\n  [PipelineResourceType.cluster]: {\n    params: {\n      name: '',\n      url: '',\n      username: '',\n      password: '',\n      insecure: '',\n    },\n    secrets: {\n      cadata: '',\n      token: '',\n    },\n  },\n};\n","export const resourceLimitsModal = (props) =>\n  import(\n    './ResourceLimitsModalLauncher' /* webpackChunkName: \"resource-limits-modal\" */\n  ).then((m) => m.resourceLimitsModal(props));\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { K8sResourceKind } from '../module/k8s';\nimport { TableData } from './factory';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\nimport {\n  Kebab,\n  KebabAction,\n  LabelList,\n  ResourceKebab,\n  ResourceLink,\n  resourcePath,\n  Selector,\n} from './utils';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  Kebab.columnClass,\n];\n\nexport const WorkloadTableRow: React.FC<WorkloadTableRowProps> = ({\n  obj,\n  kind,\n  menuActions,\n  customActionMenu,\n  customData,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`}\n          title=\"pods\"\n        >\n          {t('public~{{statusReplicas}} of {{specReplicas}} pods', {\n            statusReplicas: obj.status.replicas || 0,\n            specReplicas: obj.spec.replicas,\n          })}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={obj.spec.selector} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {customActionMenu || (\n          <ResourceKebab actions={menuActions} kind={kind} resource={obj} customData={customData} />\n        )}\n      </TableData>\n    </>\n  );\n};\nWorkloadTableRow.displayName = 'WorkloadTableRow';\ntype WorkloadTableRowProps = {\n  obj: K8sResourceKind;\n  kind: string;\n  menuActions?: KebabAction[];\n  customActionMenu?: React.ReactNode; // Renders a custom action menu.\n  customData?: { [key: string]: any };\n};\n\nexport const WorkloadTableHeader = () => {\n  return [\n    {\n      title: i18next.t('public~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: i18next.t('public~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      id: 'namespace',\n    },\n    {\n      title: i18next.t('public~Status'),\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: i18next.t('public~Labels'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: i18next.t('public~Pod selector'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nWorkloadTableHeader.displayName = 'WorkloadTableHeader';\n","import * as _ from 'lodash';\nimport { SecretModel } from '@console/internal/models';\nimport { k8sCreate, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getRandomChars } from '@console/shared/src/utils/utils';\nimport { PipelineResourceModel } from '../../../models';\nimport { convertMapToNameValueArray } from '../modals/common/utils';\n\nexport interface ParamData {\n  [key: string]: any;\n}\n\nexport const getDefinedObj = (objData: ParamData): ParamData => {\n  return _.omitBy(objData, (v) => _.isUndefined(v) || _.isNull(v) || v === '');\n};\n\nexport const createPipelineResource = (\n  params: ParamData,\n  type: string,\n  namespace: string,\n  secretResp?: K8sResourceKind,\n): Promise<K8sResourceKind> => {\n  const resourceName = `${type}-${getRandomChars(6)}`;\n  const pipelineResource: K8sResourceKind = {\n    apiVersion: 'tekton.dev/v1alpha1',\n    kind: PipelineResourceModel.kind,\n    metadata: {\n      name: resourceName,\n      namespace,\n    },\n    spec: {\n      type,\n      params: convertMapToNameValueArray(getDefinedObj(params)),\n      ...(secretResp && {\n        secrets: _.map(secretResp.data, (value, name) => {\n          return {\n            fieldName: name,\n            secretKey: name,\n            secretName: secretResp.metadata.name,\n          };\n        }),\n      }),\n    },\n  };\n\n  return k8sCreate(PipelineResourceModel, pipelineResource);\n};\n\nexport const createSecretResource = (\n  secret: ParamData,\n  type: string,\n  namespace: string,\n): Promise<K8sResourceKind> => {\n  const resourceName = `${type}-secret-${getRandomChars(6)}`;\n  const secretResource = {\n    apiVersion: 'v1',\n    kind: 'Secret',\n    metadata: {\n      name: resourceName,\n      namespace,\n    },\n    stringData: getDefinedObj(secret),\n  };\n  return k8sCreate(SecretModel, secretResource);\n};\n","import { KebabOption } from '@console/internal/components/utils';\nimport { K8sResourceKind, K8sKind } from '@console/internal/module/k8s';\nimport { resourceLimitsModal } from '../components/modals/resource-limits';\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const EditResourceLimits = (kind: K8sKind, obj: K8sResourceKind): KebabOption => ({\n  // t('console-app~Edit resource limits')\n  labelKey: 'console-app~Edit resource limits',\n  callback: () =>\n    resourceLimitsModal({\n      model: kind,\n      resource: obj,\n    }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: obj.metadata.name,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  },\n});\n","import { KebabAction } from '@console/internal/components/utils';\nimport { HorizontalPodAutoscalerModel } from '@console/internal/models';\nimport {\n  HorizontalPodAutoscalerKind,\n  K8sKind,\n  K8sResourceCommon,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { isOperatorBackedService, deleteHPAModal, isHelmResource } from '@console/shared';\n\ntype RelatedResources = {\n  hpas?: HorizontalPodAutoscalerKind[];\n};\n\nconst hasHPAs = (mapOfResources: RelatedResources) =>\n  Array.isArray(mapOfResources?.hpas) && mapOfResources.hpas.length > 0;\n\nconst hpaRoute = ({ metadata: { name, namespace } }: K8sResourceCommon, kind: K8sKind) =>\n  `/workload-hpa/ns/${namespace}/${referenceForModel(kind)}/${name}`;\n\nconst isOperatorBackedWorkload = (\n  obj: K8sResourceCommon,\n  customData?: { [key: string]: any },\n): boolean => customData?.isOperatorBacked || isOperatorBackedService(obj, customData?.csvs);\n\nconst shouldHideHPA = (obj: K8sResourceCommon, customData?: { [key: string]: any }) =>\n  isHelmResource(obj) || isOperatorBackedWorkload(obj, customData);\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const AddHorizontalPodAutoScaler: KebabAction = (\n  kind: K8sKind,\n  obj: K8sResourceCommon,\n  resources: RelatedResources,\n  customData?: { [key: string]: any },\n) => ({\n  // t('console-app~Add HorizontalPodAutoscaler')\n  labelKey: 'console-app~Add HorizontalPodAutoscaler',\n  href: hpaRoute(obj, kind),\n  hidden: hasHPAs(resources) || shouldHideHPA(obj, customData),\n  accessReview: {\n    group: HorizontalPodAutoscalerModel.apiGroup,\n    resource: HorizontalPodAutoscalerModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'create',\n  },\n});\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const EditHorizontalPodAutoScaler: KebabAction = (\n  kind: K8sKind,\n  obj: K8sResourceCommon,\n  resources: RelatedResources,\n  customData?: { [key: string]: any },\n) => ({\n  // t('console-app~Edit HorizontalPodAutoscaler')\n  labelKey: 'console-app~Edit HorizontalPodAutoscaler',\n  href: hpaRoute(obj, kind),\n  hidden: !hasHPAs(resources) || shouldHideHPA(obj, customData),\n  accessReview: {\n    group: HorizontalPodAutoscalerModel.apiGroup,\n    resource: HorizontalPodAutoscalerModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'update',\n  },\n});\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const DeleteHorizontalPodAutoScaler: KebabAction = (\n  kind: K8sKind,\n  obj: K8sResourceCommon,\n  resources: RelatedResources,\n  customData?: { [key: string]: any },\n) => ({\n  // t('console-app~Remove HorizontalPodAutoscaler')\n  labelKey: 'console-app~Remove HorizontalPodAutoscaler',\n  callback: () => {\n    deleteHPAModal({\n      workload: obj,\n      hpa: resources?.hpas?.[0],\n    });\n  },\n  hidden: !hasHPAs(resources) || shouldHideHPA(obj, customData),\n  accessReview: {\n    group: HorizontalPodAutoscalerModel.apiGroup,\n    resource: HorizontalPodAutoscalerModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'delete',\n  },\n});\n\nexport const hideActionForHPAs = (action: KebabAction): KebabAction => (\n  kind: K8sKind,\n  obj: K8sResourceCommon,\n  resources: RelatedResources,\n) => {\n  const actionOptions = action(kind, obj);\n  return {\n    ...actionOptions,\n    hidden: hasHPAs(resources) || actionOptions.hidden,\n  };\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CircleIcon } from '@patternfly/react-icons/dist/esm/icons/circle-icon';\nimport { SquareIcon } from '@patternfly/react-icons/dist/esm/icons/square-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { K8sResourceKindReference } from '../module/k8s';\nimport { ResourceLink } from './utils/resource-link';\nimport { Timestamp } from './utils/timestamp';\nimport { EmptyBox } from './utils/status-box';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getImageStreamTagName = (imageStreamName: string, tag: string): string =>\n  `${imageStreamName}:${tag}`;\n\nconst ImageStreamTimelineItem: React.FC<ImageStreamTimelineItemProps> = ({\n  tag,\n  imageStreamName,\n  imageStreamNamespace,\n  linkToTag,\n}) => {\n  const referenceAndSHA = _.split(tag.dockerImageReference, '@');\n  return (\n    <>\n      <li>\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__circle-icon\">\n            <CircleIcon />\n          </span>\n          <div className=\"co-images-stream-tag-timeline__timestamp\">\n            <Timestamp timestamp={tag.created} simple={true} />\n          </div>\n        </div>\n\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__line\" />\n          <div className=\"co-images-stream-tag-timeline__info\">\n            <ResourceLink\n              kind={ImageStreamTagsReference}\n              name={getImageStreamTagName(imageStreamName, tag.tag)}\n              namespace={imageStreamNamespace}\n              title={tag.tag}\n              linkTo={linkToTag}\n            />\n            <div className=\"co-break-all\">from {referenceAndSHA[0]}</div>\n            <div className=\"co-break-all\">{referenceAndSHA[1]}</div>\n          </div>\n        </div>\n      </li>\n    </>\n  );\n};\n\n// check is the compared tag version, is the latest version in a sorted array of all tag versions\nconst isTagVersionLatest = (\n  comparedTag: string,\n  comparedTagPosition: number,\n  orderedTagArray: TagMeta[],\n) => {\n  return (\n    comparedTagPosition ===\n    _.findIndex(orderedTagArray, (orderedTag: TagMeta) => orderedTag.tag === comparedTag)\n  );\n};\n\nexport const ImageStreamTimeline: React.FC<ImageStreamTimelineProps> = ({\n  imageStreamTags,\n  imageStreamName,\n  imageStreamNamespace,\n}) => {\n  const { t } = useTranslation();\n  if (!_.some(imageStreamTags, 'items')) {\n    return <EmptyBox label={t('public~Images')} />;\n  }\n  const tagsArray: TagMeta[] = _.flatten(\n    _.map(imageStreamTags, ({ tag, items }) => {\n      return _.map(items, ({ created, dockerImageReference }) => ({\n        tag,\n        created,\n        dockerImageReference,\n      }));\n    }),\n  );\n  const orderedTagArray = _.orderBy(tagsArray, ['created'], ['desc']);\n  const timeline = _.map(orderedTagArray, (tag: TagMeta, i: number) => {\n    return (\n      <ImageStreamTimelineItem\n        key={tag.dockerImageReference}\n        tag={tag}\n        imageStreamName={imageStreamName}\n        imageStreamNamespace={imageStreamNamespace}\n        linkToTag={isTagVersionLatest(tag.tag, i, orderedTagArray)}\n      />\n    );\n  });\n\n  return (\n    <>\n      <ul className=\"co-images-stream-tag-timeline\">\n        {timeline}\n        <div>\n          <span className=\"co-images-stream-tag-timeline__square-icon\">\n            <SquareIcon />\n          </span>\n        </div>\n      </ul>\n    </>\n  );\n};\n\ntype ImageStreamTimelineItemProps = {\n  tag: TagMeta;\n  imageStreamName: string;\n  imageStreamNamespace: string;\n  linkToTag: boolean;\n};\n\ntype TagMeta = {\n  created: string;\n  tag: string;\n  dockerImageReference: string;\n};\n\ntype ImageStreamTimelineProps = {\n  imageStreamTags: any[];\n  imageStreamName: string;\n  imageStreamNamespace: string;\n};\n","import { IBuild as IBuildV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/Build';\nimport { IBuildRun as IBuildRunV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/ClusterBuildStrategy';\nimport { IBuild as IBuildV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/Build';\nimport { IBuildRun as IBuildRunV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/ClusterBuildStrategy';\nimport { K8sResourceCondition } from '@console/internal/module/k8s';\n\n// Add missing latestBuild to Build\nexport type Build =\n  | (IBuildV1Alpha1 & { latestBuild?: BuildRun })\n  | (IBuildV1Beta1 & { latestBuild?: BuildRun });\n\nexport type BuildSpec = IBuildV1Alpha1['spec'] & IBuildV1Beta1['spec'];\n\nexport type BuildStatus = IBuildV1Alpha1['status'] & IBuildV1Beta1['status'];\n\nexport type ClusterBuildStrategyKind = IClusterBuildStrategyV1Alpha1 | IClusterBuildStrategyV1Beta1;\n\nexport type BuildStrategyKind = IBuildStrategyV1Alpha1 | IBuildStrategyV1Beta1;\n\n// Make status.conditions compatible with @console/internal/components/conditions props\nexport type BuildRun =\n  | (IBuildRunV1Alpha1 & {\n      status?: { conditions?: K8sResourceCondition[]; latestTaskRunRef?: string };\n    })\n  | (IBuildRunV1Beta1 & {\n      status?: { conditions?: K8sResourceCondition[]; taskRunName?: string };\n    });\n\n// The enum values need to match the dynamic-plugin `Status` `status` prop.\n// A translation (title) is added in the BuildRunStatus component.\nexport enum ComputedBuildRunStatus {\n  PENDING = 'Pending',\n  RUNNING = 'Running',\n  SUCCEEDED = 'Succeeded',\n  FAILED = 'Failed',\n  UNKNOWN = 'Unknown',\n}\n\n/** WARNING: The enum values corresponds to the `metadata.name` of the ClusterBuildStrategy CRs */\nexport enum ClusterBuildStrategy {\n  BUILDAH = 'buildah',\n  S2I = 'source-to-image',\n  UNKNOWN = 'unknown',\n}\n\nexport const ReadableClusterBuildStrategies: Record<ClusterBuildStrategy, string> = {\n  // t('shipwright-plugin~Buildah')\n  [ClusterBuildStrategy.BUILDAH]: `shipwright-plugin~Buildah`,\n  // t('shipwright-plugin~Source-to-Image')\n  [ClusterBuildStrategy.S2I]: `shipwright-plugin~Source-to-Image`,\n  [ClusterBuildStrategy.UNKNOWN]: `shipwright-plugin~Unknown`,\n};\n","import { TFunction } from 'i18next';\nimport { HealthChecksProbeType, RequestType, HealthCheckFormProbe } from './health-checks-types';\n\nexport const getHealthChecksProbeConfig = (probe: string, t: TFunction) => {\n  switch (probe) {\n    case HealthChecksProbeType.ReadinessProbe: {\n      return {\n        formTitle: t('devconsole~Readiness probe'),\n        formSubtitle: t(\n          \"devconsole~A readiness probe checks if the Container is ready to handle requests. A failed readiness probe means that a Container should not receive any traffic from a proxy, even if it's running.\",\n        ),\n      };\n    }\n    case HealthChecksProbeType.LivenessProbe: {\n      return {\n        formTitle: t('devconsole~Liveness probe'),\n        formSubtitle: t(\n          'devconsole~A liveness probe checks if the Container is still running. If the liveness probe fails the Container is killed.',\n        ),\n      };\n    }\n    case HealthChecksProbeType.StartupProbe: {\n      return {\n        formTitle: t('devconsole~Startup probe'),\n        formSubtitle: t(\n          'devconsole~A startup probe checks if the application within the Container is started. If the startup probe fails the Container is killed.',\n        ),\n      };\n    }\n    default:\n      return undefined;\n  }\n};\n\nexport const healthChecksDefaultValues: HealthCheckFormProbe = {\n  showForm: false,\n  enabled: false,\n  modified: false,\n  data: {\n    failureThreshold: '3',\n    requestType: RequestType.HTTPGET,\n    httpGet: {\n      scheme: undefined,\n      path: '/',\n      port: '8080',\n      httpHeaders: [],\n    },\n    tcpSocket: {\n      port: '8080',\n    },\n    exec: { command: [''] },\n    initialDelaySeconds: '0',\n    periodSeconds: '10',\n    timeoutSeconds: '1',\n    successThreshold: '1',\n  },\n};\n\nexport const healthChecksProbeInitialData = {\n  readinessProbe: healthChecksDefaultValues,\n  livenessProbe: healthChecksDefaultValues,\n  startupProbe: healthChecksDefaultValues,\n};\n","import { k8sCreate, K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRunModel } from '../../../../models';\nimport { PipelineKind, PipelineRunKind } from '../../../../types';\nimport { VolumeTypes } from '../../const';\nimport {\n  createPipelineResource,\n  createSecretResource,\n} from '../../pipeline-resource/pipelineResource-utils';\nimport { CREATE_PIPELINE_RESOURCE } from '../common/const';\nimport { PipelineModalFormResource } from '../common/types';\nimport { getPipelineRunFromForm } from '../common/utils';\nimport { StartPipelineFormValues } from './types';\n\nexport const resourceSubmit = async (\n  resourceValues: PipelineModalFormResource,\n  namespace: string,\n): Promise<K8sResourceCommon> => {\n  const {\n    data: { params, secrets, type },\n  } = resourceValues;\n\n  return secrets\n    ? createSecretResource(secrets, type, namespace).then((secretResp) => {\n        return createPipelineResource(params, type, namespace, secretResp);\n      })\n    : createPipelineResource(params, type, namespace);\n};\n\nconst processResources = async (\n  values: StartPipelineFormValues,\n): Promise<StartPipelineFormValues> => {\n  const { namespace, resources } = values;\n\n  const toCreateResources: { [index: string]: PipelineModalFormResource } = resources.reduce(\n    (acc, resource, index) => {\n      return resource.selection === CREATE_PIPELINE_RESOURCE ? { ...acc, [index]: resource } : acc;\n    },\n    {},\n  );\n  const createdResources = await Promise.all(\n    Object.values(toCreateResources).map((resource) => resourceSubmit(resource, namespace)),\n  );\n  if (!createdResources || createdResources.length === 0) return values;\n\n  const indexLookup = Object.keys(toCreateResources);\n  return {\n    ...values,\n    resources: resources.map(\n      (resource, index): PipelineModalFormResource => {\n        if (toCreateResources[index]) {\n          const creationIndex = indexLookup.indexOf(index.toString());\n          return {\n            ...resource,\n            selection: createdResources[creationIndex].metadata.name,\n          };\n        }\n        return resource;\n      },\n    ),\n  };\n};\n\nconst processWorkspaces = (values: StartPipelineFormValues): StartPipelineFormValues => {\n  const { workspaces } = values;\n\n  if (!workspaces || workspaces.length === 0) return values;\n\n  return {\n    ...values,\n    workspaces: workspaces.filter((workspace) => workspace.type !== VolumeTypes.NoWorkspace),\n  };\n};\n\nexport const submitStartPipeline = async (\n  values: StartPipelineFormValues,\n  pipeline: PipelineKind,\n  labels?: { [key: string]: string },\n  annotations?: { [key: string]: string },\n): Promise<PipelineRunKind> => {\n  let formValues = values;\n  formValues = await processResources(formValues);\n  formValues = processWorkspaces(formValues);\n\n  const pipelineRunResource: PipelineRunKind = await k8sCreate(\n    PipelineRunModel,\n    getPipelineRunFromForm(pipeline, formValues, labels, annotations),\n  );\n\n  return Promise.resolve(pipelineRunResource);\n};\n","import * as React from 'react';\nimport { ImageStreamContextProps } from '../import-types';\n\nexport const ImageStreamContext = React.createContext<ImageStreamContextProps>(undefined as any);\n","import * as _ from 'lodash';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport {\n  NameValueFromPair,\n  NameValuePair,\n} from '@console/shared/src/components/formik-fields/field-types';\nimport {\n  PIPELINE_RUNTIME_LABEL,\n  PIPELINE_RUNTIME_VERSION_LABEL,\n  PIPELINE_STRATEGY_LABEL,\n} from '../../../const';\nimport { PipelineModel } from '../../../models';\nimport { PipelineKind, PipelineRunKind, TektonParam, TektonWorkspace } from '../../../types';\nimport { VolumeTypes } from '../../pipelines/const';\nimport {\n  convertPipelineToModalData,\n  getDefaultVolumeClaimTemplate,\n  getServerlessFunctionDefaultPersistentVolumeClaim,\n} from '../../pipelines/modals/common/utils';\nimport { submitStartPipeline } from '../../pipelines/modals/start-pipeline/submit-utils';\nimport { StartPipelineFormValues } from '../../pipelines/modals/start-pipeline/types';\nimport { createPipelineResource } from '../../pipelines/pipeline-resource/pipelineResource-utils';\nimport { PipelineData } from '../import-types';\n\nconst getImageUrl = (name: string, namespace: string) => {\n  return `image-registry.openshift-image-registry.svc:5000/${namespace}/${name}`;\n};\n\nexport const createGitResource = (url: string, namespace: string, ref: string = 'master') => {\n  const params = { url, revision: ref };\n  return createPipelineResource(params, 'git', namespace);\n};\n\nexport const createImageResource = (name: string, namespace: string) => {\n  const params = {\n    url: getImageUrl(name, namespace),\n  };\n\n  return createPipelineResource(params, 'image', namespace);\n};\n\nexport const getPipelineParams = (\n  params: TektonParam[],\n  name: string,\n  namespace: string,\n  gitUrl: string,\n  gitRef: string,\n  gitDir: string,\n  dockerfilePath: string,\n  tag: string,\n  buildEnv: any,\n) => {\n  return (params || []).map((param) => {\n    switch (param.name) {\n      case 'APP_NAME':\n        return { ...param, default: name };\n      case 'GIT_REPO':\n        return { ...param, default: gitUrl };\n      case 'GIT_REVISION':\n        return { ...param, default: gitRef || '' };\n      case 'PATH_CONTEXT':\n        return { ...param, default: gitDir.replace(/^\\//, '') || param.default };\n      case 'IMAGE_NAME':\n        return { ...param, default: getImageUrl(name, namespace) };\n      case 'DOCKERFILE':\n        return { ...param, default: dockerfilePath };\n      case 'VERSION':\n        return { ...param, default: tag || param.default };\n      case 'BUILD_ENVS':\n        return { ...param, default: buildEnv || param.default };\n      default:\n        return param;\n    }\n  });\n};\n\nexport const pipelineRuntimeOrVersionChanged = (\n  template: PipelineKind,\n  pipeline: PipelineKind,\n): boolean =>\n  template.metadata?.labels[PIPELINE_RUNTIME_LABEL] !==\n    pipeline.metadata?.labels[PIPELINE_RUNTIME_LABEL] ||\n  template.metadata?.labels[PIPELINE_RUNTIME_VERSION_LABEL] !==\n    pipeline.metadata?.labels[PIPELINE_RUNTIME_VERSION_LABEL];\n\nexport const isDockerPipeline = (template: PipelineKind): boolean =>\n  template?.metadata?.labels?.[PIPELINE_STRATEGY_LABEL] === 'docker';\n\nexport const createPipelineForImportFlow = async (\n  name: string,\n  namespace: string,\n  gitUrl: string,\n  gitRef: string,\n  gitDir: string,\n  pipeline: PipelineData,\n  dockerfilePath: string,\n  tag: string,\n  buildEnv: (NameValuePair | NameValueFromPair)[],\n  labels: { [key: string]: string } = {},\n) => {\n  const template = _.cloneDeep(pipeline.template);\n\n  template.metadata = {\n    name: `${name}`,\n    namespace,\n    labels: {\n      ...template.metadata?.labels,\n      ...labels,\n      'app.kubernetes.io/instance': name,\n      'app.kubernetes.io/name': name,\n      ...(!isDockerPipeline(template) && {\n        [PIPELINE_RUNTIME_VERSION_LABEL]: tag,\n      }),\n    },\n  };\n\n  template.spec.params =\n    template.spec.params &&\n    getPipelineParams(\n      template.spec.params,\n      name,\n      namespace,\n      gitUrl,\n      gitRef,\n      gitDir,\n      dockerfilePath,\n      tag,\n      buildEnv,\n    );\n\n  return k8sCreate(PipelineModel, template, { ns: namespace });\n};\n\nexport const createPipelineRunForImportFlow = async (\n  pipeline: PipelineKind,\n): Promise<PipelineRunKind> => {\n  const isServerlessFunctionPipeline =\n    pipeline?.metadata?.labels?.['function.knative.dev'] === 'true';\n  const pipelineInitialValues: StartPipelineFormValues = {\n    ...convertPipelineToModalData(pipeline),\n    workspaces: (pipeline.spec.workspaces || []).map((workspace: TektonWorkspace) => ({\n      ...workspace,\n      type: VolumeTypes.VolumeClaimTemplate,\n      data: isServerlessFunctionPipeline\n        ? getServerlessFunctionDefaultPersistentVolumeClaim(pipeline?.metadata?.name)\n        : getDefaultVolumeClaimTemplate(pipeline?.metadata?.name),\n    })),\n    secretOpen: false,\n  };\n  return submitStartPipeline(pipelineInitialValues, pipeline);\n};\nexport const updatePipelineForImportFlow = async (\n  pipeline: PipelineKind,\n  template: PipelineKind,\n  name: string,\n  namespace: string,\n  gitUrl: string,\n  gitRef: string,\n  gitDir: string,\n  dockerfilePath: string,\n  tag: string,\n  buildEnv: (NameValuePair | NameValueFromPair)[],\n  labels: { [key: string]: string } = {},\n): Promise<PipelineKind> => {\n  let updatedPipeline = _.cloneDeep(pipeline);\n\n  if (!template) {\n    updatedPipeline.metadata.labels = _.omit(\n      { ...updatedPipeline.metadata.labels, ...labels },\n      'app.kubernetes.io/instance',\n    );\n  } else {\n    if (pipelineRuntimeOrVersionChanged(template, pipeline)) {\n      updatedPipeline = _.cloneDeep(template);\n      updatedPipeline.metadata = {\n        resourceVersion: pipeline.metadata.resourceVersion,\n        name: `${name}`,\n        namespace,\n        labels: {\n          ...template.metadata?.labels,\n          ...labels,\n          'app.kubernetes.io/instance': name,\n          'app.kubernetes.io/name': name,\n          ...(!isDockerPipeline(template) && { [PIPELINE_RUNTIME_VERSION_LABEL]: tag }),\n        },\n      };\n    }\n\n    updatedPipeline.spec.params = getPipelineParams(\n      template.spec.params,\n      name,\n      namespace,\n      gitUrl,\n      gitRef,\n      gitDir,\n      dockerfilePath,\n      tag,\n      buildEnv,\n    );\n  }\n  return k8sUpdate(PipelineModel, updatedPipeline, namespace, name);\n};\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { ImportStrategy } from '@console/git-service/src';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport { hasIcon } from '@console/internal/components/catalog/catalog-item-icon';\nimport { DeploymentConfigModel, DeploymentModel } from '@console/internal/models';\nimport {\n  K8sResourceKind,\n  referenceFor,\n  referenceForModel,\n  ImagePullPolicy,\n} from '@console/internal/module/k8s';\nimport {\n  KNATIVE_AUTOSCALEWINDOW_ANNOTATION,\n  KNATIVE_CONCURRENCYTARGET_ANNOTATION,\n  KNATIVE_CONCURRENCYUTILIZATION_ANNOTATION,\n  KNATIVE_MAXSCALE_ANNOTATION,\n  KNATIVE_MINSCALE_ANNOTATION,\n  PRIVATE_KNATIVE_SERVING_LABEL,\n  ServiceModel,\n} from '@console/knative-plugin';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { isDockerPipeline } from '@console/pipelines-plugin/src/components/import/pipeline/pipeline-template-utils';\nimport { defaultRepositoryFormValues } from '@console/pipelines-plugin/src/components/repository/consts';\nimport {\n  PIPELINE_RUNTIME_LABEL,\n  PIPELINE_RUNTIME_VERSION_LABEL,\n} from '@console/pipelines-plugin/src/const';\nimport { PipelineKind } from '@console/pipelines-plugin/src/types';\nimport { getLimitsDataFromResource } from '@console/shared/src';\nimport { ClusterBuildStrategy } from '@console/shipwright-plugin/src/types';\nimport { UNASSIGNED_KEY } from '@console/topology/src/const';\nimport { RegistryType } from '../../utils/imagestream-utils';\nimport { getHealthChecksData } from '../health-checks/create-health-checks-probe-utils';\nimport { deployValidationSchema } from '../import/deployImage-validation-utils';\nimport {\n  Resources,\n  DeploymentData,\n  GitReadableTypes,\n  ServerlessData,\n  BuildOptions,\n  BuildData,\n} from '../import/import-types';\nimport {\n  detectGitType,\n  validationSchema as importValidationSchema,\n} from '../import/import-validation-utils';\nimport { getAutoscaleWindow } from '../import/serverless/serverless-utils';\nimport { validationSchema as jarValidationSchema } from '../import/upload-jar-validation-utils';\nimport { AppResources } from './edit-application-types';\n\nexport enum ApplicationFlowType {\n  Git = 'Import from Git',\n  Dockerfile = 'Import from Dockerfile',\n  Container = 'Deploy Image',\n  JarUpload = 'Upload JAR file',\n}\n\nexport const getFlowTypePageTitle = (flowType: ApplicationFlowType): string => {\n  switch (flowType) {\n    case ApplicationFlowType.Git:\n      // t('devconsole~Import from Git')\n      return 'devconsole~Import from Git';\n    case ApplicationFlowType.Dockerfile:\n      // t('devconsole~Import from Dockerfile')\n      return 'devconsole~Import from Dockerfile';\n    case ApplicationFlowType.Container:\n      // t('devconsole~Deploy Image')\n      return 'devconsole~Deploy Image';\n    case ApplicationFlowType.JarUpload:\n      // t('devconsole~Upload JAR file')\n      return 'devconsole~Upload JAR file';\n    default:\n      return flowType;\n  }\n};\n\nexport enum BuildSourceType {\n  Git = 'Git',\n  Binary = 'Binary',\n}\n\nconst isFromJarUpload = (type: string): boolean => type === BuildSourceType.Binary;\n\nconst getBuildSourceType = (buildConfig: K8sResourceKind): string =>\n  buildConfig?.spec?.source?.type;\n\nexport const getResourcesType = (resource: K8sResourceKind): Resources => {\n  switch (resource.kind) {\n    case DeploymentConfigModel.kind:\n      return Resources.OpenShift;\n    case DeploymentModel.kind:\n      return Resources.Kubernetes;\n    case referenceFor(resource) === referenceForModel(ServiceModel) ? ServiceModel.kind : '':\n      return Resources.KnativeService;\n    default:\n      return null;\n  }\n};\n\nexport const getFlowType = (buildStrategy: string, buildType?: string): ApplicationFlowType => {\n  switch (buildStrategy) {\n    case BuildStrategyType.Source:\n      return buildType === BuildSourceType.Binary\n        ? ApplicationFlowType.JarUpload\n        : ApplicationFlowType.Git;\n    case BuildStrategyType.Docker:\n      return ApplicationFlowType.Dockerfile;\n    default:\n      return ApplicationFlowType.Container;\n  }\n};\n\nexport const getValidationSchema = (\n  buildStrategy: string,\n  buildType?: string,\n): ((t: TFunction) => any) => {\n  switch (buildStrategy) {\n    case BuildStrategyType.Source:\n      return buildType === BuildSourceType.Binary ? jarValidationSchema : importValidationSchema;\n    case BuildStrategyType.Docker:\n      return importValidationSchema;\n    default:\n      return deployValidationSchema;\n  }\n};\n\nexport const checkIfTriggerExists = (\n  triggers: { [key: string]: any }[],\n  type: string,\n  resourceKind?: string,\n) => {\n  return !!_.find(triggers, (trigger) => {\n    if (resourceKind === DeploymentConfigModel.kind && type === 'ImageChange') {\n      return trigger.type === type && trigger.imageChangeParams?.automatic;\n    }\n    return trigger.type === type;\n  });\n};\n\nexport const getGitDataFromBuildConfig = (buildConfig: K8sResourceKind) => {\n  const url = buildConfig?.spec?.source?.git?.uri ?? '';\n  const gitData = {\n    url,\n    type: detectGitType(url),\n    ref: _.get(buildConfig, 'spec.source.git.ref', ''),\n    dir: _.get(buildConfig, 'spec.source.contextDir', ''),\n    showGitType: false,\n    secret: _.get(buildConfig, 'spec.source.sourceSecret.name', ''),\n    isUrlValidating: false,\n  };\n  return gitData;\n};\n\nconst getGitDataFromPipeline = (pipeline: PipelineKind) => {\n  const params = pipeline?.spec?.params;\n  const url = (params?.find((param) => param?.name === 'GIT_REPO')?.default ?? '') as string;\n  const ref = params?.find((param) => param?.name === 'GIT_REVISION')?.default ?? '';\n  const dir = params?.find((param) => param?.name === 'PATH_CONTEXT')?.default ?? '/';\n  return {\n    url,\n    ref,\n    dir,\n    type: detectGitType(url),\n    showGitType: false,\n    secret: '',\n    isUrlValidating: false,\n  };\n};\n\nconst getGitDataFromShipwrightBuild = (shipwrightBuild: K8sResourceKind) => {\n  const url = shipwrightBuild?.spec?.source?.git?.url ?? '';\n  const gitData = {\n    url,\n    type: detectGitType(url),\n    ref: _.get(shipwrightBuild, 'spec.source.git.revision', ''),\n    dir: _.get(shipwrightBuild, 'spec.source.contextDir', ''),\n    showGitType: false,\n    secret: _.get(shipwrightBuild, 'spec.source.git.cloneSecret', ''),\n    isUrlValidating: false,\n  };\n  return gitData;\n};\n\nexport const getKsvcRouteData = (resource: K8sResourceKind) => {\n  const { metadata, spec } = resource;\n  const containers = spec?.template?.spec?.containers ?? [];\n  const port = containers?.[0]?.ports?.[0]?.containerPort ?? '';\n  const routeData = {\n    create: metadata?.labels?.[PRIVATE_KNATIVE_SERVING_LABEL] !== 'cluster-local',\n    unknownTargetPort: _.toString(port),\n    targetPort: _.toString(port),\n    defaultUnknownPort: 8080,\n  };\n  return routeData;\n};\n\nexport const getDefaultLabels = () => {\n  return [\n    'app',\n    'app.kubernetes.io/instance',\n    'app.openshift.io/runtime',\n    'app.kubernetes.io/part-of',\n    'app.openshift.io/runtime-version',\n    'app.openshift.io/runtime-namespace',\n    'networking.knative.dev/visibility',\n  ];\n};\n\nexport const getRouteLabels = (\n  route: K8sResourceKind,\n  resource: K8sResourceKind,\n): Record<string, string> => {\n  const allLabels = _.get(resource, 'metadata.labels', {});\n  const allRouteLabels = _.get(route, 'metadata.labels', {});\n  const filteredRouteLabels = _.omit(allRouteLabels, [\n    ...getDefaultLabels(),\n    ...Object.keys(allLabels),\n  ]);\n  return filteredRouteLabels;\n};\n\nexport const getRouteData = (route: K8sResourceKind, resource: K8sResourceKind) => {\n  let routeData = {\n    disable: !_.isEmpty(route),\n    create: !_.isEmpty(route),\n    targetPort: _.get(route, 'spec.port.targetPort', ''),\n    unknownTargetPort: _.toString(route?.spec?.port?.targetPort?.split('-')?.[0]) || '',\n    defaultUnknownPort: 8080,\n    path: _.get(route, 'spec.path', ''),\n    hostname: _.get(route, 'spec.host', ''),\n    secure: _.has(route, 'spec.tls.termination'),\n    tls: {\n      termination: _.get(route, 'spec.tls.termination', null),\n      insecureEdgeTerminationPolicy: _.get(route, 'spec.tls.insecureEdgeTerminationPolicy', null),\n      caCertificate: _.get(route, 'spec.tls.caCertificate', ''),\n      certificate: _.get(route, 'spec.tls.certificate', ''),\n      destinationCACertificate: _.get(route, 'spec.tls.destinationCACertificate', ''),\n      key: _.get(route, 'spec.tls.key', ''),\n    },\n    labels: getRouteLabels(route, resource),\n  };\n  if (getResourcesType(resource) === Resources.KnativeService) {\n    routeData = {\n      ...routeData,\n      ...getKsvcRouteData(resource),\n    };\n  }\n  return routeData;\n};\n\nconst getBuildOption = (\n  buildConfig: K8sResourceKind,\n  shipwrightBuild: K8sResourceKind,\n  pipeline: PipelineKind,\n) => {\n  if (buildConfig) {\n    return BuildOptions.BUILDS;\n  }\n  if (shipwrightBuild) {\n    return BuildOptions.SHIPWRIGHT_BUILD;\n  }\n  if (pipeline) {\n    return BuildOptions.PIPELINES;\n  }\n  return BuildOptions.DISABLED;\n};\n\nexport const getBuildData = (\n  buildConfig: K8sResourceKind,\n  shipwrightBuild: K8sResourceKind,\n  pipeline: PipelineKind,\n  gitType: string,\n) => {\n  const buildOption = getBuildOption(buildConfig, shipwrightBuild, pipeline);\n  let buildStrategyType: BuildStrategyType | string;\n  let shipwrightClusterBuildStrategyType: ClusterBuildStrategy;\n  let buildStrategyData;\n\n  if (buildOption === BuildOptions.BUILDS) {\n    buildStrategyType = _.get(buildConfig, 'spec.strategy.type', '');\n  } else if (buildOption === BuildOptions.SHIPWRIGHT_BUILD) {\n    shipwrightClusterBuildStrategyType = _.get(shipwrightBuild, 'spec.strategy.name', '');\n    switch (shipwrightClusterBuildStrategyType) {\n      case ClusterBuildStrategy.BUILDAH:\n        buildStrategyType = BuildStrategyType.Docker;\n        break;\n      case ClusterBuildStrategy.S2I:\n        buildStrategyType = BuildStrategyType.Source;\n        break;\n      default:\n        buildStrategyType = '';\n    }\n  }\n\n  if (buildOption === BuildOptions.BUILDS) {\n    switch (buildStrategyType) {\n      case BuildStrategyType.Source:\n        buildStrategyData = _.get(buildConfig, 'spec.strategy.sourceStrategy');\n        break;\n      case BuildStrategyType.Docker:\n        buildStrategyData = _.get(buildConfig, 'spec.strategy.dockerStrategy');\n        break;\n      default:\n        buildStrategyData = { env: [] };\n    }\n  } else if (buildOption === BuildOptions.SHIPWRIGHT_BUILD) {\n    buildStrategyData = _.get(shipwrightBuild, 'spec');\n  }\n\n  const triggers = _.get(buildConfig, 'spec.triggers');\n\n  const buildData: BuildData = {\n    env: buildStrategyData?.env || [],\n    triggers: {\n      webhook: checkIfTriggerExists(triggers, GitReadableTypes[gitType]),\n      image: checkIfTriggerExists(triggers, 'ImageChange'),\n      config: checkIfTriggerExists(triggers, 'ConfigChange'),\n    },\n    strategy:\n      buildStrategyType ||\n      (isDockerPipeline(pipeline) ? BuildStrategyType.Docker : BuildStrategyType.Source),\n    source: { type: getBuildSourceType(buildConfig) },\n    option: buildOption,\n    clusterBuildStrategy: shipwrightClusterBuildStrategyType,\n  };\n  return buildData;\n};\n\nexport const getServerlessData = (resource: K8sResourceKind): ServerlessData => {\n  let serverlessData: ServerlessData = {\n    scaling: {\n      minpods: '',\n      maxpods: '',\n      concurrencytarget: '',\n      concurrencylimit: '',\n      autoscale: {\n        autoscalewindow: '',\n        autoscalewindowUnit: 's',\n        defaultAutoscalewindowUnit: 's',\n      },\n      concurrencyutilization: '',\n    },\n    domainMapping: [],\n  };\n  if (getResourcesType(resource) === Resources.KnativeService) {\n    const {\n      spec: {\n        template: { metadata, spec },\n      },\n    } = resource;\n    const annotations = metadata?.annotations;\n    const autoscalewindowAnnotation = annotations?.[KNATIVE_AUTOSCALEWINDOW_ANNOTATION] || '';\n    const { autoscalewindow, autoscalewindowUnit, defaultAutoscalewindowUnit } = getAutoscaleWindow(\n      autoscalewindowAnnotation,\n    );\n    serverlessData = {\n      scaling: {\n        minpods: annotations?.[KNATIVE_MINSCALE_ANNOTATION] || '',\n        maxpods: annotations?.[KNATIVE_MAXSCALE_ANNOTATION] || '',\n        concurrencytarget: annotations?.[KNATIVE_CONCURRENCYTARGET_ANNOTATION] || '',\n        concurrencylimit: spec?.containerConcurrency || '',\n        autoscale: {\n          autoscalewindow,\n          autoscalewindowUnit,\n          defaultAutoscalewindowUnit,\n        },\n        concurrencyutilization: annotations?.[KNATIVE_CONCURRENCYUTILIZATION_ANNOTATION] || '',\n      },\n      domainMapping: [],\n    };\n  }\n  return serverlessData;\n};\n\nexport const getDeploymentData = (resource: K8sResourceKind) => {\n  const deploymentData: DeploymentData = {\n    env: [],\n    replicas: 1,\n    triggers: { image: true, config: true },\n  };\n  const container = resource.spec?.template?.spec?.containers?.find((c) =>\n    [resource.metadata.name, resource.metadata.labels?.['app.kubernetes.io/name']].includes(c.name),\n  );\n  const env = container?.env ?? [];\n  switch (getResourcesType(resource)) {\n    case Resources.KnativeService:\n      return {\n        ...deploymentData,\n        env,\n        triggers: {\n          image: container?.imagePullPolicy === ImagePullPolicy.Always,\n        },\n      };\n    case Resources.OpenShift: {\n      const triggers = resource.spec?.triggers;\n      return {\n        env,\n        triggers: {\n          image: checkIfTriggerExists(triggers, 'ImageChange', resource.kind),\n          config: checkIfTriggerExists(triggers, 'ConfigChange'),\n        },\n        replicas: resource.spec?.replicas ?? 1,\n      };\n    }\n    case Resources.Kubernetes: {\n      const imageTrigger = JSON.parse(\n        resource.metadata?.annotations?.['image.openshift.io/triggers'] ?? '[]',\n      )?.[0];\n      return {\n        env,\n        triggers: {\n          image: imageTrigger?.paused === 'false',\n        },\n        replicas: resource.spec?.replicas ?? 1,\n      };\n    }\n    default:\n      return deploymentData;\n  }\n};\n\nexport const getUserLabels = (resource: K8sResourceKind) => {\n  const allLabels = _.get(resource, 'metadata.labels', {});\n  const userLabels = _.omit(allLabels, getDefaultLabels());\n  return userLabels;\n};\n\nexport const getCommonInitialValues = (\n  editAppResource: K8sResourceKind,\n  route: K8sResourceKind,\n  pipelineData: PipelineKind,\n  name: string,\n  namespace: string,\n) => {\n  const appGroupName = _.get(editAppResource, 'metadata.labels[\"app.kubernetes.io/part-of\"]');\n  const commonInitialValues = {\n    formType: 'edit',\n    name,\n    application: {\n      name: appGroupName || '',\n      selectedKey: appGroupName || UNASSIGNED_KEY,\n    },\n    project: {\n      name: namespace,\n    },\n    route: getRouteData(route, editAppResource),\n    resources: getResourcesType(editAppResource),\n    serverless: getServerlessData(editAppResource),\n    pipeline: {\n      enabled: !_.isEmpty(pipelineData),\n      type: PipelineType.PIPELINE,\n    },\n    pac: {\n      pacHasError: false,\n      repository: {\n        ...defaultRepositoryFormValues,\n      },\n    },\n    deployment: getDeploymentData(editAppResource),\n    labels: getUserLabels(editAppResource),\n    limits: getLimitsDataFromResource(editAppResource),\n    healthChecks: getHealthChecksData(editAppResource),\n    import: {\n      showEditImportStrategy: true,\n      selectedStrategy: {\n        name: '',\n        type: ImportStrategy.S2I,\n        priority: 0,\n        detectedFiles: [],\n      },\n    },\n  };\n  return commonInitialValues;\n};\n\nexport const getIconInitialValues = (editAppResource: K8sResourceKind) => {\n  const runtimeLabel = editAppResource?.metadata?.labels?.['app.openshift.io/runtime'];\n  const runtimeIcon = runtimeLabel && hasIcon(runtimeLabel) ? runtimeLabel : null;\n  return {\n    runtimeIcon,\n  };\n};\n\nexport const getGitAndDockerfileInitialValues = (\n  buildConfig: K8sResourceKind,\n  shipwrightBuild: K8sResourceKind,\n  pipeline: PipelineKind,\n) => {\n  if (_.isEmpty(buildConfig) && _.isEmpty(shipwrightBuild) && _.isEmpty(pipeline)) {\n    return {};\n  }\n\n  const currentImage = _.split(buildConfig?.spec?.strategy?.sourceStrategy?.from?.name ?? '', ':');\n  const git = !_.isEmpty(buildConfig)\n    ? getGitDataFromBuildConfig(buildConfig)\n    : !_.isEmpty(shipwrightBuild)\n    ? getGitDataFromShipwrightBuild(shipwrightBuild)\n    : getGitDataFromPipeline(pipeline);\n  const initialValues = {\n    git,\n    docker: {\n      dockerfilePath:\n        buildConfig?.spec?.strategy?.dockerStrategy?.dockerfilePath ||\n        pipeline?.spec?.params?.find((param) => param?.name === 'DOCKERFILE')?.default ||\n        'Dockerfile',\n    },\n    image: {\n      selected: pipeline?.metadata?.labels?.[PIPELINE_RUNTIME_LABEL] || currentImage[0] || '',\n      recommended: '',\n      tag: pipeline?.metadata?.labels?.[PIPELINE_RUNTIME_VERSION_LABEL] || currentImage[1] || '',\n      tagObj: {},\n      ports: [],\n      isRecommending: false,\n      couldNotRecommend: false,\n    },\n    build: getBuildData(buildConfig, shipwrightBuild, pipeline, git.type),\n  };\n  return initialValues;\n};\n\nexport const deployImageInitialValues = {\n  searchTerm: '',\n  registry: 'external',\n  allowInsecureRegistry: false,\n  imageStream: {\n    image: '',\n    tag: '',\n    namespace: '',\n  },\n  isi: {\n    name: '',\n    image: {},\n    tag: '',\n    status: { metadata: {}, status: '' },\n    ports: [],\n  },\n  image: {\n    name: '',\n    image: {},\n    tag: '',\n    status: { metadata: {}, status: '' },\n    ports: [],\n  },\n  build: {\n    env: [],\n    triggers: {},\n    strategy: '',\n  },\n  isSearchingForImage: false,\n};\n\nexport const getExternalImageInitialValues = (appResources: AppResources) => {\n  const imageStreamList = appResources?.imageStream?.data;\n  if (_.isEmpty(imageStreamList)) {\n    return {};\n  }\n  const imageStream = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n  const imageStreamData = imageStream?.[0]?.spec?.tags?.[0];\n  const name = imageStreamData?.from?.name;\n  const isAllowInsecureRegistry = imageStreamData?.importPolicy?.insecure || false;\n  return {\n    ...deployImageInitialValues,\n    searchTerm: name,\n    registry: 'external',\n    allowInsecureRegistry: isAllowInsecureRegistry,\n    imageStream: {\n      ...deployImageInitialValues.imageStream,\n    },\n  };\n};\n\nexport const getInternalImageInitialValues = (editAppResource: K8sResourceKind) => {\n  const imageStreamNamespace = _.get(\n    editAppResource,\n    'metadata.labels[\"app.openshift.io/runtime-namespace\"]',\n    '',\n  );\n  const imageStreamName = _.get(editAppResource, 'metadata.labels[\"app.openshift.io/runtime\"]', '');\n  const imageStreamTag = _.get(\n    editAppResource,\n    'metadata.labels[\"app.openshift.io/runtime-version\"]',\n    '',\n  );\n  return {\n    ...deployImageInitialValues,\n    registry: RegistryType.Internal,\n    imageStream: {\n      image: imageStreamName,\n      tag: imageStreamTag,\n      namespace: imageStreamNamespace,\n    },\n  };\n};\n\nexport const getExternalImageValues = (appResource: K8sResourceKind) => {\n  const name = _.get(appResource, 'spec.template.spec.containers[0].image', null);\n  if (_.isEmpty(appResource) || !name) {\n    return deployImageInitialValues;\n  }\n  return {\n    ...deployImageInitialValues,\n    searchTerm: name,\n    registry: RegistryType.External,\n    imageStream: {\n      ...deployImageInitialValues.imageStream,\n    },\n  };\n};\n\nexport const getFileUploadValues = (resource: K8sResourceKind, buildConfig: K8sResourceKind) => {\n  const resourceName = resource.metadata.name;\n  const fileName = buildConfig.metadata?.annotations?.jarFileName ?? '';\n  const javaArgs: string =\n    resource.spec?.template?.spec?.containers\n      ?.find((container) => container.name === resourceName)\n      ?.env?.find((args) => args.name === 'JAVA_ARGS')?.value ?? '';\n  return {\n    fileUpload: {\n      name: fileName,\n      value: '',\n      javaArgs,\n    },\n    ...getIconInitialValues(resource),\n  };\n};\n\nexport const getInitialValues = (\n  appResources: AppResources,\n  appName: string,\n  namespace: string,\n) => {\n  const editAppResourceData = appResources.editAppResource?.data;\n  const routeData = appResources.route?.data;\n  const buildConfigData = appResources.buildConfig?.data;\n  const shipwrightBuildData = appResources.shipwrightBuild?.data;\n  const pipelineData = appResources.pipeline?.data;\n\n  const commonValues = getCommonInitialValues(\n    editAppResourceData,\n    routeData,\n    pipelineData,\n    appName,\n    namespace,\n  );\n  const gitDockerValues = getGitAndDockerfileInitialValues(\n    buildConfigData,\n    shipwrightBuildData,\n    pipelineData,\n  );\n  let fileUploadValues = {};\n  let iconValues = {};\n  let externalImageValues = {};\n  let internalImageValues = {};\n  if (_.isEmpty(gitDockerValues)) {\n    iconValues = getIconInitialValues(editAppResourceData);\n    externalImageValues = getExternalImageInitialValues(appResources);\n    internalImageValues = _.isEmpty(externalImageValues)\n      ? getInternalImageInitialValues(editAppResourceData)\n      : {};\n    if (\n      _.isEmpty(externalImageValues) &&\n      !_.get(internalImageValues, 'imageStream.tag') &&\n      !_.get(internalImageValues, 'imageStream.image')\n    ) {\n      if (editAppResourceData?.kind === ServiceModel.kind) {\n        internalImageValues = {};\n        externalImageValues = getExternalImageValues(editAppResourceData);\n      }\n    }\n  } else if (isFromJarUpload(getBuildSourceType(buildConfigData))) {\n    fileUploadValues = getFileUploadValues(editAppResourceData, buildConfigData);\n  }\n\n  return {\n    ...commonValues,\n    ...iconValues,\n    ...fileUploadValues,\n    ...gitDockerValues,\n    ...externalImageValues,\n    ...internalImageValues,\n  };\n};\n","import * as React from 'react';\nimport {\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory/modal';\nimport {\n  SecretFormWrapper,\n  SecretTypeAbstraction,\n} from '@console/internal/components/secrets/create-secret';\n\nexport interface CreateSecretModalProps {\n  save?: (name: string) => void;\n  namespace: string;\n  secretType: SecretTypeAbstraction;\n}\n\ntype Props = CreateSecretModalProps & ModalComponentProps;\n\nconst CreateSecretModal: React.FC<Props> = ({ close, namespace, save, secretType }) => {\n  const handleSave = (name: string) => {\n    close();\n    save(name);\n  };\n\n  return (\n    <SecretFormWrapper\n      onCancel={close}\n      onSave={handleSave}\n      fixed={{ metadata: { namespace } }}\n      secretTypeAbstraction={secretType}\n      isCreate\n      modal\n    />\n  );\n};\n\nexport const secretModalLauncher = createModalLauncher<Props>(CreateSecretModal);\n\nexport default CreateSecretModal;\n","import { saveAs } from 'file-saver';\nimport { safeLoad } from 'js-yaml';\n\nexport const downloadYaml = (data: BlobPart) => {\n  const blob = new Blob([data], { type: 'text/yaml;charset=utf-8' });\n  let filename = 'k8s-object.yaml';\n  try {\n    const obj = safeLoad(data);\n    if (obj.kind) {\n      filename = `${obj.kind.toLowerCase()}-${obj.metadata.name}.yaml`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not parse YAML file:', e);\n  }\n  saveAs(blob, filename);\n};\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { nameValidationSchema } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  buildValidationSchema,\n  resourcesValidationSchema,\n} from './validation-schema';\n\nexport const fileNameRegex = /\\.(jar)$/i;\n\nexport const fileUploadValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .matches(fileNameRegex, {\n        message: t('devconsole~Must be a JAR file.'),\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.'))\n      .required(t('devconsole~Required')),\n    javaArgs: yup.string(),\n  });\n\nexport const validationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: nameValidationSchema(t),\n    fileUpload: fileUploadValidationSchema(t),\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    image: imageValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    build: buildValidationSchema,\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n  });\n\nexport const getAppName = (name: string) => {\n  if (!fileNameRegex.test(name)) {\n    return undefined;\n  }\n  return _.kebabCase(name.split('.').shift());\n};\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\nimport { nameValidationSchema } from '@console/shared';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  isiValidationSchema,\n  resourcesValidationSchema,\n} from './validation-schema';\n\nexport const deployValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    name: nameValidationSchema(t),\n    isi: isiValidationSchema(t),\n    serverless: serverlessValidationSchema(t),\n    deployment: deploymentValidationSchema(t),\n    route: routeValidationSchema(t),\n    limits: limitsValidationSchema(t),\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema(t),\n  });\n","import * as React from 'react';\nimport {\n  Alert,\n  ClipboardCopy,\n  ClipboardCopyVariant,\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { RedExclamationCircleIcon } from '@console/dynamic-plugin-sdk';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  RegistryType,\n  BuilderImagesNamespace,\n  getImageStreamTags,\n} from '../../../utils/imagestream-utils';\nimport { ImageStreamState, ImageStreamAction, ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\nimport ImageStreamDropdown from './ImageStreamDropdown';\nimport ImageStreamNsDropdown from './ImageStreamNsDropdown';\nimport ImageStreamTagDropdown from './ImageStreamTagDropdown';\n\nimport './ImageStream.scss';\n\nexport const initialState: ImageStreamState = {\n  loading: false,\n  accessLoading: false,\n  selectedImageStream: {},\n};\n\nexport const ImageStreamReducer = (state: ImageStreamState, action: ImageStreamAction) => {\n  const { value } = action;\n  switch (action.type) {\n    case ImageStreamActions.setLoading:\n      return { ...state, loading: value };\n    case ImageStreamActions.setAccessLoading:\n      return { ...state, accessLoading: value };\n    case ImageStreamActions.setSelectedImageStream:\n      return { ...state, selectedImageStream: value };\n    default:\n      throw new Error('Invalid action was provided in imagestream reducer');\n  }\n};\n\nconst ImageStream: React.FC<{\n  disabled?: boolean;\n  label?: string;\n  required?: boolean;\n  formContextField?: string;\n  dataTest?: string;\n  reloadCount?: number;\n}> = ({ disabled = false, label, required = false, formContextField, dataTest, reloadCount }) => {\n  const { t } = useTranslation();\n  const { values } = useFormikContext<FormikValues>();\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const [state, dispatch] = React.useReducer(ImageStreamReducer, initialState);\n  const [hasImageStreams, setHasImageStreams] = React.useState(false);\n  const { loading, accessLoading, selectedImageStream } = state;\n  const { imageStream, project, registry, isi, fromImageStreamTag } =\n    _.get(values, formContextField) || values;\n\n  const imageStreamTagList = getImageStreamTags(selectedImageStream as K8sResourceKind);\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const isTagsAvailable =\n    imageStream.tag !== '' || (isStreamsAvailable && !_.isEmpty(imageStreamTagList));\n  const isImageStreamSelected = imageStream.image !== '';\n  const showCommandLineAlert =\n    project.name !== imageStream.namespace &&\n    imageStream.namespace !== BuilderImagesNamespace.Openshift &&\n    (registry === RegistryType.Internal || fromImageStreamTag) &&\n    isStreamsAvailable &&\n    isTagsAvailable;\n  const helperTextInvalid = validated === ValidatedOptions.error && isi.status?.message && (\n    <>\n      <ExclamationCircleIcon />\n      &nbsp;{isi.status?.message}\n    </>\n  );\n\n  return (\n    <>\n      <ImageStreamContext.Provider\n        value={{ state, dispatch, hasImageStreams, setHasImageStreams, setValidated }}\n      >\n        <FormGroup\n          fieldId=\"image-stream-dropdowns\"\n          label={label}\n          required={required}\n          data-test={dataTest}\n        >\n          <div className=\"row\">\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamNsDropdown disabled={disabled} formContextField={formContextField} />\n            </div>\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamDropdown\n                disabled={disabled}\n                formContextField={formContextField}\n                reloadCount={reloadCount}\n              />\n              <div className=\"odc-imagestream-separator\">/</div>\n            </div>\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamTagDropdown\n                disabled={disabled}\n                formContextField={formContextField}\n                reloadCount={reloadCount}\n              />\n              <div className=\"odc-imagestream-separator\">:</div>\n            </div>\n          </div>\n\n          {validated === ValidatedOptions.error && (\n            <FormHelperText>\n              <HelperText>\n                <HelperTextItem variant=\"error\" icon={<RedExclamationCircleIcon />}>\n                  {helperTextInvalid}\n                </HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n        {isNamespaceSelected && isImageStreamSelected && !isTagsAvailable && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert variant=\"warning\" title={t('devconsole~No Image streams tags found')} isInline>\n              {t('devconsole~No tags are available in Image Stream {{image}}', {\n                image: imageStream.image,\n              })}\n            </Alert>\n          </div>\n        )}\n        {isNamespaceSelected && !loading && !isStreamsAvailable && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert variant=\"warning\" title={t('devconsole~No Image streams found')} isInline>\n              {t('devconsole~No Image streams are available in Project {{namespace}}', {\n                namespace: imageStream.namespace,\n              })}\n            </Alert>\n          </div>\n        )}\n        {isNamespaceSelected && !accessLoading && showCommandLineAlert && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert\n              variant=\"warning\"\n              isInline\n              title={t(\n                'devconsole~Service account default will need pull authority to deploy Images from {{namespace}}',\n                { namespace: imageStream.namespace },\n              )}\n            >\n              {t('devconsole~You can grant authority with the command')}{' '}\n              <ClipboardCopy\n                className=\"odc-imagestream-clipboard\"\n                variant={ClipboardCopyVariant.expansion}\n                isReadOnly\n              >{`oc policy add-role-to-user system:image-puller system:serviceaccount:${project.name}:default --namespace=${imageStream.namespace}`}</ClipboardCopy>\n            </Alert>\n          </div>\n        )}\n      </ImageStreamContext.Provider>\n    </>\n  );\n};\n\nexport default React.memo(ImageStream);\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NumberSpinnerField } from '@console/shared';\nimport FormSection from '../section/FormSection';\n\nconst ScalingSection: React.FC<{ name: string }> = ({ name }) => {\n  const { t } = useTranslation();\n  return (\n    <FormSection\n      title={t('devconsole~Scaling')}\n      subTitle={t('devconsole~Replicas are scaled manually based on CPU usage.')}\n      dataTest=\"scaling\"\n    >\n      <NumberSpinnerField\n        name={name}\n        label={t('devconsole~Replicas')}\n        helpText={t('devconsole~The number of instances of your Image.')}\n        setOutputAsIntegerFlag\n      />\n    </FormSection>\n  );\n};\n\nexport default ScalingSection;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getImageStreamResource } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamDropdown: React.FC<{\n  disabled?: boolean;\n  formContextField?: string;\n  reloadCount?: number;\n}> = ({ disabled = false, formContextField, reloadCount }) => {\n  const { t } = useTranslation();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const imgCollection = {};\n\n  const { values, setFieldValue, initialValues } = useFormikContext<FormikValues>();\n  const { imageStream, formType } = _.get(values, formContextField) || values;\n  const { isi: initialIsi } = _.get(initialValues, formContextField) || initialValues;\n  const { state, dispatch, hasImageStreams, setHasImageStreams } = React.useContext(\n    ImageStreamContext,\n  );\n  const { accessLoading, loading } = state;\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const collectImageStreams = (namespace: string, resource: K8sResourceKind): void => {\n    if (!imgCollection[namespace]) {\n      imgCollection[namespace] = {};\n    }\n    imgCollection[namespace][resource.metadata.name] = resource;\n  };\n  const getTitle = () => {\n    return loading && !isStreamsAvailable\n      ? ''\n      : !isStreamsAvailable\n      ? t('devconsole~No Image Stream')\n      : t('devconsole~Select Image Stream');\n  };\n\n  const onDropdownChange = React.useCallback(\n    (img: string) => {\n      setFieldValue(\n        `${fieldPrefix}imageStream.tag`,\n        img === imageStream.image ? imageStream.tag : '',\n      );\n      formType !== 'edit' && setFieldValue(`${fieldPrefix}isi`, initialIsi);\n      const image = _.get(imgCollection, [imageStream.namespace, img], {});\n      dispatch({ type: ImageStreamActions.setSelectedImageStream, value: image });\n    },\n    [\n      setFieldValue,\n      fieldPrefix,\n      imageStream.image,\n      imageStream.tag,\n      imageStream.namespace,\n      formType,\n      initialIsi,\n      imgCollection,\n      dispatch,\n    ],\n  );\n  const onLoad = (imgstreams) => {\n    const imageStreamAvailable = !_.isEmpty(imgstreams);\n    setHasImageStreams(imageStreamAvailable);\n    loading &&\n      isNamespaceSelected &&\n      dispatch({ type: ImageStreamActions.setLoading, value: false });\n  };\n  const resourceFilter = (resource: K8sResourceKind) => {\n    const {\n      metadata: { namespace },\n    } = resource;\n    collectImageStreams(namespace, resource);\n    return namespace === imageStream.namespace;\n  };\n\n  React.useEffect(() => {\n    imageStream.image && onDropdownChange(imageStream.image);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageStream.image, isStreamsAvailable]);\n\n  React.useEffect(() => {\n    reloadCount && imageStream.image && onDropdownChange(imageStream.image);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reloadCount, isStreamsAvailable]);\n\n  return (\n    <ResourceDropdownField\n      name={`${fieldPrefix}imageStream.image`}\n      label={t('devconsole~Image Stream')}\n      resources={getImageStreamResource(imageStream.namespace)}\n      dataSelector={['metadata', 'name']}\n      key={imageStream.namespace}\n      fullWidth\n      required\n      title={imageStream.image || getTitle()}\n      disabled={!isStreamsAvailable || disabled}\n      onChange={onDropdownChange}\n      onLoad={onLoad}\n      resourceFilter={resourceFilter}\n    />\n  );\n};\n\nexport default ImageStreamDropdown;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getProjectResource, BuilderImagesNamespace } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions as Action } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamNsDropdown: React.FC<{ disabled?: boolean; formContextField?: string }> = ({\n  disabled = false,\n  formContextField,\n}) => {\n  const { t } = useTranslation();\n  const { values, setFieldValue, initialValues } = useFormikContext<FormikValues>();\n  const { imageStream } = _.get(values, formContextField) || values;\n  const { isi: initialIsi } = _.get(initialValues, formContextField) || initialValues;\n  const { dispatch } = React.useContext(ImageStreamContext);\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const onDropdownChange = React.useCallback(\n    (ns?: string) => {\n      if (ns) {\n        setFieldValue(`${fieldPrefix}imageStream.image`, '');\n        setFieldValue(`${fieldPrefix}imageStream.tag`, '');\n      }\n      setFieldValue(`${fieldPrefix}isi`, initialIsi);\n      dispatch({ type: Action.setLoading, value: true });\n    },\n    [dispatch, fieldPrefix, initialIsi, setFieldValue],\n  );\n\n  React.useEffect(() => {\n    imageStream.namespace && onDropdownChange();\n  }, [onDropdownChange, imageStream.namespace]);\n\n  return (\n    <ResourceDropdownField\n      name={`${fieldPrefix}imageStream.namespace`}\n      label={t('devconsole~Project')}\n      title={imageStream.namespace || t('devconsole~Select Project')}\n      fullWidth\n      required\n      resources={getProjectResource()}\n      dataSelector={['metadata', 'name']}\n      onChange={onDropdownChange}\n      appendItems={{ openshift: BuilderImagesNamespace.Openshift }}\n      disabled={disabled}\n    />\n  );\n};\nexport default ImageStreamNsDropdown;\n","import * as React from 'react';\nimport { ValidatedOptions } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues, getIn } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { ImageStreamTagModel } from '@console/internal/models';\nimport { k8sGet, K8sResourceKind, ContainerPort } from '@console/internal/module/k8s';\nimport { DropdownField } from '@console/shared';\nimport { UNASSIGNED_KEY } from '@console/topology/src/const';\nimport {\n  getImageStreamTags,\n  getPorts,\n  getSuggestedName,\n  makePortName,\n  imageStreamLabels,\n} from '../../../utils/imagestream-utils';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamTagDropdown: React.FC<{\n  disabled?: boolean;\n  formContextField?: string;\n  reloadCount?: number;\n}> = ({ disabled = false, formContextField, reloadCount }) => {\n  const { t } = useTranslation();\n  const unmounted = React.useRef(false);\n  let imageStreamTagList = {};\n  const { values, setFieldValue, initialValues, touched } = useFormikContext<FormikValues>();\n  const { name: resourceName, imageStream, application, formType, isi: isiValues } =\n    _.get(values, formContextField) || values;\n  const isiPorts = isiValues?.ports;\n  const { imageStream: initialImageStream, route: initialRoute } =\n    _.get(initialValues, formContextField) || initialValues;\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const { state, hasImageStreams, setValidated } = React.useContext(ImageStreamContext);\n  const { selectedImageStream, accessLoading, loading } = state;\n  imageStreamTagList = getImageStreamTags(selectedImageStream as K8sResourceKind);\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const isTagsAvailable = isStreamsAvailable && !_.isEmpty(imageStreamTagList);\n  const isImageStreamSelected = imageStream.image !== '';\n  const initialImageStreamImage = initialImageStream?.image;\n\n  const searchImageTag = React.useCallback(\n    (selectedTag: string) => {\n      setFieldValue(`${fieldPrefix}isSearchingForImage`, true);\n      k8sGet(ImageStreamTagModel, `${imageStream.image}:${selectedTag}`, imageStream.namespace)\n        .then((imageStreamImport) => {\n          if (unmounted.current) return;\n          const {\n            image,\n            tag,\n            status,\n            metadata: { labels },\n          } = imageStreamImport;\n          formContextField && setFieldValue(`${fieldPrefix}imageStreamTag`, imageStreamImport);\n          const imgStreamLabels = _.pick(labels, imageStreamLabels);\n          const name = imageStream.image;\n          const isi = { name, image, tag, status };\n          const ports = getPorts(isi);\n          setFieldValue(`${fieldPrefix}isSearchingForImage`, false);\n          setFieldValue(`${fieldPrefix}isi.name`, name);\n          setFieldValue(\n            `${fieldPrefix}isi.image`,\n            _.merge(image, { metadata: { labels: imgStreamLabels } }),\n          );\n          setFieldValue(`${fieldPrefix}isi.tag`, selectedTag);\n          setFieldValue(`${fieldPrefix}isi.ports`, ports);\n          setFieldValue(`${fieldPrefix}image.ports`, ports);\n          formType !== 'edit' &&\n            resourceName !== name &&\n            setFieldValue(`${fieldPrefix}name`, getSuggestedName(name));\n          application &&\n            application.selectedKey !== UNASSIGNED_KEY &&\n            !application.name &&\n            setFieldValue(`${fieldPrefix}application.name`, `${getSuggestedName(name)}-app`);\n          // set default port value\n          const targetPort =\n            initialRoute &&\n            (!initialRoute.targetPort ||\n              getIn(_.get(touched, `${fieldPrefix}imageStream`), 'image')) &&\n            !getIn(_.get(touched, `${fieldPrefix}route`), 'targetPort') &&\n            _.head(ports);\n          targetPort && setFieldValue(`${fieldPrefix}route.targetPort`, makePortName(targetPort));\n          setValidated(ValidatedOptions.success);\n        })\n        .catch((error) => {\n          if (unmounted.current) return;\n          setFieldValue(`${fieldPrefix}isi`, {});\n          setFieldValue(`${fieldPrefix}isi.status`, {\n            metadata: {},\n            status: '',\n            message: error.message,\n          });\n          setFieldValue(`${fieldPrefix}isSearchingForImage`, false);\n          setValidated(ValidatedOptions.error);\n        });\n    },\n    [\n      setFieldValue,\n      fieldPrefix,\n      imageStream.image,\n      imageStream.namespace,\n      formContextField,\n      resourceName,\n      formType,\n      application,\n      initialRoute,\n      touched,\n      setValidated,\n    ],\n  );\n\n  React.useEffect(() => {\n    imageStream.tag && searchImageTag(imageStream.tag);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageStream.tag]);\n\n  React.useEffect(() => {\n    reloadCount && imageStream.tag && searchImageTag(imageStream.tag);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reloadCount]);\n\n  React.useEffect(() => {\n    if (\n      initialRoute &&\n      getIn(_.get(touched, `${fieldPrefix}imageStream`), 'image') &&\n      !getIn(_.get(touched, `${fieldPrefix}route`), 'targetPort') &&\n      !_.isEqual(initialImageStreamImage, imageStream.image)\n    ) {\n      const targetPort: ContainerPort = _.head(isiPorts);\n      targetPort && setFieldValue(`${fieldPrefix}route.targetPort`, makePortName(targetPort));\n    }\n  }, [\n    touched.route,\n    touched.imageStream,\n    imageStream.image,\n    setFieldValue,\n    isiPorts,\n    initialRoute,\n    initialImageStreamImage,\n    fieldPrefix,\n    touched,\n  ]);\n\n  React.useEffect(() => {\n    return () => {\n      unmounted.current = true;\n    };\n  }, []);\n\n  return (\n    <DropdownField\n      name={`${fieldPrefix}imageStream.tag`}\n      label={t('devconsole~Tag')}\n      items={imageStreamTagList}\n      key={imageStream.image}\n      autocompleteFilter={fuzzy}\n      title={\n        imageStream.tag ||\n        (isNamespaceSelected && isImageStreamSelected && !isTagsAvailable\n          ? t('devconsole~No tag')\n          : t('devconsole~Select tag'))\n      }\n      disabled={!isImageStreamSelected || !isTagsAvailable || disabled}\n      fullWidth\n      required\n      onChange={(tag) => {\n        tag !== '' && searchImageTag(tag);\n      }}\n    />\n  );\n};\n\nexport default ImageStreamTagDropdown;\n","import * as _ from 'lodash';\nimport { getAPIVersionForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { DeploymentConfigModel, DeploymentModel } from '@console/internal/models';\nimport { ContainerSpec, EnvVar, K8sResourceKind } from '@console/internal/module/k8s';\nimport { TRIGGERS_ANNOTATION } from '@console/shared';\nimport { getTriggerAnnotation } from '../../../utils/resource-label-utils';\nimport {\n  checkIfTriggerExists,\n  getResourcesType,\n} from '../../edit-application/edit-application-utils';\nimport { ImageStreamImageData, Resources } from '../../import/import-types';\nimport {\n  DeploymentStrategyType,\n  FailurePolicyType,\n  LifecycleAction,\n} from '../deployment-strategy/utils/types';\nimport {\n  DeploymentStrategy,\n  DeploymentStrategyData,\n  EditDeploymentFormData,\n  LifecycleHookData,\n  LifecycleHookFormData,\n  LifecycleHookImagestreamData,\n  TriggersAndImageStreamFormData,\n} from './deployment-types';\n\nexport const getDefaultDeploymentConfig = (namespace: string): K8sResourceKind => {\n  const defaultDeploymentConfig: K8sResourceKind = {\n    apiVersion: getAPIVersionForModel(DeploymentConfigModel),\n    kind: DeploymentConfigModel.kind,\n    metadata: {\n      namespace,\n      name: '',\n    },\n    spec: {\n      selector: {},\n      replicas: 3,\n      template: {\n        metadata: {\n          labels: {},\n        },\n        spec: {\n          containers: [\n            {\n              name: 'container',\n              image: 'image-registry.openshift-image-registry.svc:5000/openshift/httpd:latest',\n              ports: [\n                {\n                  containerPort: 8080,\n                  protocol: 'TCP',\n                },\n              ],\n            },\n          ],\n        },\n      },\n      strategy: {\n        type: DeploymentStrategyType.rollingParams,\n        rollingParams: {\n          updatePeriodSeconds: 1,\n          intervalSeconds: 1,\n          timeoutSeconds: 600,\n          maxUnavailable: '25%',\n          maxSurge: '25%',\n        },\n      },\n      triggers: [\n        {\n          type: 'ConfigChange',\n        },\n      ],\n    },\n  };\n\n  return defaultDeploymentConfig;\n};\n\nexport const getDefaultDeployment = (namespace: string): K8sResourceKind => {\n  const defaultDeployment: K8sResourceKind = {\n    apiVersion: getAPIVersionForModel(DeploymentModel),\n    kind: DeploymentModel.kind,\n    metadata: {\n      namespace,\n      name: '',\n    },\n    spec: {\n      selector: { matchLabels: { app: 'name' } },\n      replicas: 3,\n      template: {\n        metadata: {\n          labels: { app: 'name' },\n        },\n        spec: {\n          containers: [\n            {\n              name: 'container',\n              image: 'image-registry.openshift-image-registry.svc:5000/openshift/httpd:latest',\n              ports: [\n                {\n                  containerPort: 8080,\n                  protocol: 'TCP',\n                },\n              ],\n            },\n          ],\n        },\n      },\n      strategy: {\n        type: DeploymentStrategyType.rollingUpdate,\n        rollingUpdate: {\n          maxSurge: '25%',\n          maxUnavailable: '25%',\n        },\n      },\n    },\n  };\n\n  return defaultDeployment;\n};\n\nexport const getContainerNames = (containers: ContainerSpec[]) => {\n  return (\n    containers?.reduce((acc, container) => {\n      return {\n        ...acc,\n        [container.name]: container.name,\n      };\n    }, {}) ?? []\n  );\n};\n\nexport const getLchImageStreamData = (\n  resName: string,\n  resNamespace: string,\n  tagImages?: { containerName: string; to: { [key: string]: string } }[],\n): LifecycleHookImagestreamData => {\n  const imageTagNs = tagImages?.[0]?.to?.namespace ?? '';\n  const image = tagImages?.[0]?.to?.name?.split(':') ?? [];\n  return {\n    name: resName,\n    project: { name: resNamespace },\n    fromImageStreamTag: true,\n    imageStreamTag: {},\n    containerName: tagImages?.[0]?.containerName ?? '',\n    to: tagImages?.[0]?.to ?? {},\n    isSearchingForImage: false,\n    imageStream: {\n      namespace: imageTagNs || resNamespace,\n      image: image[0] ?? '',\n      tag: image[1] ?? '',\n    },\n    isi: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n    image: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n  };\n};\n\nexport const getLifecycleHookData = (lch: any): LifecycleHookData => {\n  return {\n    failurePolicy: lch?.failurePolicy ?? FailurePolicyType.Abort,\n    execNewPod: {\n      command: lch?.execNewPod?.command ?? [''],\n      containerName: lch?.execNewPod?.containerName,\n      env: lch?.execNewPod?.env,\n      volumes: _.join(lch?.execNewPod?.volumes, ','),\n    },\n    tagImages: lch?.tagImages ?? [],\n  };\n};\n\nexport const getLifecycleHookFormData = (lch: any): LifecycleHookFormData => {\n  return {\n    lch: getLifecycleHookData(lch),\n    exists: !!lch,\n    isAddingLch: false,\n    action: lch\n      ? lch.hasOwnProperty(LifecycleAction.execNewPod)\n        ? LifecycleAction.execNewPod\n        : LifecycleAction.tagImages\n      : LifecycleAction.execNewPod,\n  };\n};\n\nexport const getStrategyData = (\n  type: DeploymentStrategyType,\n  strategy: any,\n  resName: string,\n  resNamespace: string,\n  resourceType: string,\n): DeploymentStrategyData => {\n  switch (type) {\n    case DeploymentStrategyType.recreateParams: {\n      if (resourceType === Resources.Kubernetes) return {};\n      const { mid: midHook, post: postHook, pre: preHook, timeoutSeconds } =\n        strategy.recreateParams ?? {};\n      return {\n        recreateParams: {\n          timeoutSeconds,\n          pre: getLifecycleHookFormData(preHook),\n          mid: getLifecycleHookFormData(midHook),\n          post: getLifecycleHookFormData(postHook),\n        },\n        imageStreamData: {\n          pre: getLchImageStreamData(resName, resNamespace, preHook?.tagImages),\n          mid: getLchImageStreamData(resName, resNamespace, midHook?.tagImages),\n          post: getLchImageStreamData(resName, resNamespace, postHook?.tagImages),\n        },\n      };\n    }\n    case DeploymentStrategyType.customParams: {\n      const { command = [''], environment, image } = strategy.customParams ?? {};\n      return {\n        customParams: {\n          command,\n          environment,\n          image,\n        },\n      };\n    }\n    case DeploymentStrategyType.rollingParams: {\n      const {\n        post: postHook,\n        pre: preHook,\n        timeoutSeconds,\n        updatePeriodSeconds,\n        intervalSeconds,\n        maxSurge,\n        maxUnavailable,\n      } = strategy.rollingParams ?? {};\n      return {\n        rollingParams: {\n          timeoutSeconds,\n          pre: getLifecycleHookFormData(preHook),\n          post: getLifecycleHookFormData(postHook),\n          updatePeriodSeconds,\n          intervalSeconds,\n          maxSurge,\n          maxUnavailable,\n        },\n        imageStreamData: {\n          pre: getLchImageStreamData(resName, resNamespace, preHook?.tagImages),\n          post: getLchImageStreamData(resName, resNamespace, postHook?.tagImages),\n        },\n      };\n    }\n    case DeploymentStrategyType.rollingUpdate: {\n      const { maxSurge, maxUnavailable } = strategy.rollingUpdate ?? {};\n      return { rollingUpdate: { maxSurge, maxUnavailable } };\n    }\n    default:\n      return {};\n  }\n};\n\nexport const getStrategy = (\n  deployment: K8sResourceKind,\n  resourceType: Resources,\n): DeploymentStrategy => {\n  const { strategy } = deployment.spec ?? {};\n  let type: DeploymentStrategyType;\n\n  if (resourceType === Resources.OpenShift) {\n    type = strategy?.type ?? DeploymentStrategyType.rollingParams;\n    return {\n      ..._.omit(strategy, ['rollingParams', 'recreateParams', 'customParams']),\n      type,\n      ...getStrategyData(\n        type,\n        strategy,\n        deployment.metadata.name,\n        deployment.metadata.namespace,\n        resourceType,\n      ),\n    };\n  }\n\n  type = strategy?.type ?? DeploymentStrategyType.rollingUpdate;\n  return {\n    type,\n    ...(type === DeploymentStrategyType.rollingUpdate\n      ? getStrategyData(\n          type,\n          strategy,\n          deployment.metadata.name,\n          deployment.metadata.namespace,\n          resourceType,\n        )\n      : {}),\n  };\n};\n\nexport const getTriggersAndImageStreamValues = (\n  deployment: K8sResourceKind,\n  resourceType: Resources,\n): TriggersAndImageStreamFormData => {\n  let imageName: string;\n  let imageTrigger;\n  const data = {\n    isSearchingForImage: false,\n    imageStream: {\n      image: '',\n      tag: '',\n      namespace: '',\n    },\n    isi: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n    image: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n  };\n\n  if (resourceType === Resources.OpenShift) {\n    const triggers = deployment?.spec?.triggers;\n    imageTrigger = _.find(triggers, (trigger) => trigger.type === 'ImageChange');\n    imageName = imageTrigger?.imageChangeParams.from.name.split(':') ?? [];\n    return {\n      ...data,\n      triggers: {\n        image: checkIfTriggerExists(triggers, 'ImageChange', deployment.kind),\n        config: checkIfTriggerExists(triggers, 'ConfigChange'),\n      },\n      fromImageStreamTag: !!imageTrigger,\n      imageStream: {\n        image: imageName[0] ?? '',\n        tag: imageName[1] ?? '',\n        namespace: imageTrigger?.imageChangeParams.from.namespace ?? deployment.metadata.namespace,\n      },\n      project: {\n        name: deployment.metadata.namespace,\n      },\n    };\n  }\n\n  imageTrigger = JSON.parse(\n    deployment?.metadata?.annotations?.['image.openshift.io/triggers'] ?? '[]',\n  )?.[0];\n  imageName = imageTrigger?.from?.name?.split(':') ?? [];\n  return {\n    ...data,\n    triggers: {\n      image: imageTrigger?.paused === 'false',\n    },\n    fromImageStreamTag: !!imageTrigger,\n    imageStream: {\n      image: imageName[0] ?? '',\n      tag: imageName[1] ?? '',\n      namespace: imageTrigger?.from?.namespace ?? deployment.metadata.namespace,\n    },\n    project: {\n      name: deployment.metadata.namespace,\n    },\n  };\n};\n\nexport const convertDeploymentToEditForm = (\n  deployment: K8sResourceKind,\n): EditDeploymentFormData => {\n  const resourceType = getResourcesType(deployment);\n  return {\n    formType: deployment.metadata.name ? 'edit' : 'create',\n    name: deployment.metadata.name ?? '',\n    resourceVersion: deployment.metadata.resourceVersion ?? '',\n    deploymentStrategy: getStrategy(deployment, resourceType),\n    containers: deployment.spec.template?.spec?.containers ?? [],\n    imageName: deployment.spec.template?.spec?.containers?.[0]?.image,\n    envs: deployment.spec.template?.spec?.containers?.[0]?.env ?? [],\n    imagePullSecret: deployment.spec.template?.spec?.imagePullSecrets?.[0]?.name ?? '',\n    paused: deployment.spec.paused ?? false,\n    replicas: deployment.spec.replicas,\n    ...getTriggersAndImageStreamValues(deployment, resourceType),\n  };\n};\n\nexport const getUpdatedContainers = (\n  containers: ContainerSpec[],\n  fromImageStreamTag: boolean,\n  isi: ImageStreamImageData,\n  imageName?: string,\n  envs?: EnvVar[],\n): ContainerSpec[] => {\n  const { image } = isi;\n  const newContainers: ContainerSpec[] = containers;\n  const imageRef = fromImageStreamTag && !_.isEmpty(image) ? image.dockerImageReference : imageName;\n  newContainers[0] = {\n    ...newContainers[0],\n    image: imageRef,\n    env: envs,\n  };\n  return newContainers;\n};\n\nexport const getUpdatedLchData = (\n  lch: LifecycleHookData,\n  lchName: string,\n  lcAction: string,\n  imageStreamData: LifecycleHookImagestreamData,\n) => {\n  const getUpdatedTagImages = () => {\n    const { containerName, to, imageStreamTag } = imageStreamData;\n    const { apiVersion, kind, metadata } = imageStreamTag;\n    lch.tagImages[0] = {\n      containerName,\n      to: !_.isEmpty(to)\n        ? to\n        : {\n            apiVersion,\n            kind,\n            name: metadata?.name,\n            namespace: metadata?.namespace,\n            resourceVersion: metadata?.resourceVersion,\n            uid: metadata?.uid,\n          },\n    };\n    return lch.tagImages;\n  };\n  return {\n    [lchName]: {\n      failurePolicy: lch.failurePolicy,\n      ...(lcAction === LifecycleAction.execNewPod && {\n        execNewPod: {\n          containerName: lch.execNewPod.containerName,\n          command: lch.execNewPod.command,\n          ...(!_.isEmpty(lch.execNewPod.env) ? { env: lch.execNewPod.env } : {}),\n          ...(lch.execNewPod.volumes ? { volumes: _.split(lch.execNewPod.volumes, ',') } : {}),\n        },\n      }),\n      ...(lcAction === LifecycleAction.tagImages && {\n        tagImages: getUpdatedTagImages(),\n      }),\n    },\n  };\n};\n\nexport const getUpdatedStrategy = (strategy: DeploymentStrategy, resourceType: string) => {\n  const { type, imageStreamData } = strategy;\n  const newStrategy = _.omit(strategy, [\n    'rollingParams',\n    'recreateParams',\n    'customParams',\n    'imageStreamData',\n    'rollingUpdate',\n  ]);\n  switch (type) {\n    case DeploymentStrategyType.recreateParams: {\n      const { mid: midHook, post: postHook, pre: preHook, timeoutSeconds } =\n        strategy.recreateParams ?? {};\n      return {\n        ...newStrategy,\n        ...(resourceType === Resources.OpenShift\n          ? {\n              recreateParams: {\n                ...(timeoutSeconds ? { timeoutSeconds } : {}),\n                ...(preHook.exists\n                  ? getUpdatedLchData(preHook.lch, 'pre', preHook.action, imageStreamData.pre)\n                  : {}),\n                ...(midHook.exists\n                  ? getUpdatedLchData(midHook.lch, 'mid', midHook.action, imageStreamData.mid)\n                  : {}),\n                ...(postHook.exists\n                  ? getUpdatedLchData(postHook.lch, 'post', postHook.action, imageStreamData.post)\n                  : {}),\n              },\n            }\n          : {}),\n      };\n    }\n    case DeploymentStrategyType.customParams: {\n      return {\n        ...newStrategy,\n        customParams: strategy.customParams,\n      };\n    }\n    case DeploymentStrategyType.rollingParams: {\n      const {\n        post: postHook,\n        pre: preHook,\n        maxSurge,\n        maxUnavailable,\n        timeoutSeconds,\n        updatePeriodSeconds,\n        intervalSeconds,\n      } = strategy.rollingParams;\n      return {\n        ...newStrategy,\n        rollingParams: {\n          ...(timeoutSeconds ? { timeoutSeconds } : {}),\n          ...(updatePeriodSeconds ? { updatePeriodSeconds } : {}),\n          ...(intervalSeconds ? { intervalSeconds } : {}),\n          ...(preHook.exists\n            ? getUpdatedLchData(preHook.lch, 'pre', preHook.action, imageStreamData.pre)\n            : {}),\n          ...(postHook.exists\n            ? getUpdatedLchData(postHook.lch, 'post', postHook.action, imageStreamData.pre)\n            : {}),\n          ...(maxSurge\n            ? { maxSurge: !_.endsWith(maxSurge, '%') ? parseInt(maxSurge, 10) : maxSurge }\n            : {}),\n          ...(maxUnavailable\n            ? {\n                maxUnavailable: !_.endsWith(maxUnavailable, '%')\n                  ? parseInt(maxUnavailable, 10)\n                  : maxUnavailable,\n              }\n            : {}),\n        },\n      };\n    }\n    case DeploymentStrategyType.rollingUpdate: {\n      const { maxSurge, maxUnavailable } = strategy.rollingUpdate;\n      return {\n        type,\n        rollingUpdate: {\n          ...(maxSurge\n            ? { maxSurge: !_.endsWith(maxSurge, '%') ? parseInt(maxSurge, 10) : maxSurge }\n            : {}),\n          ...(maxUnavailable\n            ? {\n                maxUnavailable: !_.endsWith(maxUnavailable, '%')\n                  ? parseInt(maxUnavailable, 10)\n                  : maxUnavailable,\n              }\n            : {}),\n        },\n      };\n    }\n    default:\n      return {};\n  }\n};\n\nexport const convertEditFormToDeployment = (\n  formValues: EditDeploymentFormData,\n  deployment: K8sResourceKind,\n): K8sResourceKind => {\n  const {\n    name,\n    deploymentStrategy,\n    containers,\n    imageName,\n    envs,\n    imagePullSecret,\n    paused,\n    replicas,\n    imageStream: { image, tag, namespace: imgNs },\n    isi,\n    triggers,\n    fromImageStreamTag,\n    resourceVersion,\n  } = formValues;\n  const resourceType = getResourcesType(deployment);\n\n  let newDeployment: K8sResourceKind = {\n    ...deployment,\n    metadata: {\n      ...deployment.metadata,\n      name,\n      ...(resourceVersion ? { resourceVersion } : {}),\n    },\n    spec: {\n      ...deployment.spec,\n      paused,\n      replicas,\n      strategy: getUpdatedStrategy(deploymentStrategy, resourceType),\n      template: {\n        ...deployment.spec.template,\n        metadata: {\n          ...deployment.spec.template.metadata,\n          labels: {\n            ...deployment.spec.template.metadata.labels,\n            ...(deployment.metadata.name ? {} : name ? { app: name } : {}),\n          },\n        },\n        spec: {\n          ...deployment.spec.template.spec,\n          containers: getUpdatedContainers(containers, fromImageStreamTag, isi, imageName, envs),\n          imagePullSecrets: [\n            ...(deployment.spec.template.spec.imagePullSecrets ?? []),\n            ...(imagePullSecret ? [{ name: imagePullSecret }] : []),\n          ],\n        },\n      },\n    },\n  };\n\n  if (resourceType === Resources.OpenShift) {\n    newDeployment = {\n      ...newDeployment,\n      spec: {\n        ...newDeployment.spec,\n        selector: {\n          ...newDeployment.spec.selector,\n          ...(deployment.metadata.name\n            ? {}\n            : newDeployment.metadata.name\n            ? { app: newDeployment.metadata.name }\n            : {}),\n        },\n        triggers: [\n          ...(fromImageStreamTag\n            ? [\n                {\n                  type: 'ImageChange',\n                  imageChangeParams: {\n                    automatic: triggers.image,\n                    containerNames: [containers[0].name],\n                    from: {\n                      kind: 'ImageStreamTag',\n                      name: `${image}:${tag}`,\n                      namespace: imgNs,\n                    },\n                  },\n                },\n              ]\n            : []),\n          ...(triggers.config ? [{ type: 'ConfigChange' }] : []),\n        ],\n      },\n    };\n  } else {\n    newDeployment?.metadata?.annotations?.[TRIGGERS_ANNOTATION] &&\n      delete newDeployment.metadata.annotations[TRIGGERS_ANNOTATION];\n    newDeployment = {\n      ...newDeployment,\n      metadata: {\n        ...newDeployment.metadata,\n        annotations: {\n          ...newDeployment.metadata.annotations,\n          ...(fromImageStreamTag\n            ? getTriggerAnnotation(containers[0].name, image, imgNs, triggers.image, tag)\n            : {}),\n        },\n      },\n      spec: {\n        ...newDeployment.spec,\n        selector: {\n          ...newDeployment.spec.selector,\n          matchLabels: {\n            ...newDeployment.spec.selector.matchLabels,\n            ...(deployment.metadata.name\n              ? {}\n              : newDeployment.metadata.name\n              ? { app: newDeployment.metadata.name }\n              : {}),\n          },\n        },\n      },\n    };\n  }\n\n  return newDeployment;\n};\n","import * as React from 'react';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst SwitchToYAMLAlert: React.FC<{ onClose?: () => void }> = ({ onClose }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      actionClose={onClose && <AlertActionCloseButton onClose={onClose} />}\n      isInline\n      title={t(\n        'console-shared~Note: Some fields may not be represented in this form view. Please select \"YAML view\" for full control.',\n      )}\n      variant=\"info\"\n      data-test=\"info-alert\"\n    />\n  );\n};\n\nexport default SwitchToYAMLAlert;\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { Resources } from '../../../import/import-types';\n\nexport enum DeploymentStrategyType {\n  recreateParams = 'Recreate',\n  rollingParams = 'Rolling',\n  customParams = 'Custom',\n  rollingUpdate = 'RollingUpdate',\n}\n\nexport type StrategyFieldProps = {\n  resourceType?: Resources;\n  resourceObj: K8sResourceKind;\n};\n\nexport enum LifecycleAction {\n  execNewPod = 'execNewPod',\n  tagImages = 'tagImages',\n}\n\nexport enum FailurePolicyType {\n  Abort = 'Abort',\n  Retry = 'Retry',\n  Ignore = 'Ignore',\n}\n\nexport const FailurePolicyOptions = {\n  [FailurePolicyType.Abort]: 'Abort',\n  [FailurePolicyType.Retry]: 'Retry',\n  [FailurePolicyType.Ignore]: 'Ignore',\n};\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { InputField } from '@console/shared';\nimport FormSection from '../../import/section/FormSection';\n\nexport type NameSectionFormData = {\n  formData: {\n    name?: string;\n  };\n};\n\nconst NameSection: React.FC<{}> = () => {\n  const { t } = useTranslation();\n\n  const [, meta] = useField<string>('formData.name');\n  const isNew = !meta.initialValue;\n\n  return (\n    <FormSection dataTest=\"section name\">\n      <InputField\n        label={t('devconsole~Name')}\n        name=\"formData.name\"\n        type={TextInputTypes.text}\n        isDisabled={!isNew}\n        required\n      />\n    </FormSection>\n  );\n};\n\nexport default NameSection;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { StatusBox } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { DeploymentConfigModel } from '@console/internal/models';\nimport { DeploymentKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport EditDeployment from './EditDeployment';\nimport { getDefaultDeploymentConfig } from './utils/deployment-utils';\n\nconst DeploymentConfigPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { ns: namespace, name } = useParams();\n\n  const isNew = !name;\n\n  const [watchedDeployment, loaded, loadError] = useK8sWatchResource<DeploymentKind>(\n    isNew\n      ? null\n      : {\n          kind: DeploymentConfigModel.kind,\n          name,\n          namespace,\n        },\n  );\n\n  const deploymentConfig: K8sResourceKind = isNew\n    ? getDefaultDeploymentConfig(namespace)\n    : watchedDeployment;\n\n  const title = isNew\n    ? t('devconsole~Create DeploymentConfig')\n    : t('devconsole~Edit DeploymentConfig');\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <StatusBox loaded={loaded} loadError={loadError} label={title} data={deploymentConfig}>\n        <EditDeployment\n          heading={title}\n          resource={deploymentConfig}\n          name={isNew ? null : name}\n          namespace={namespace}\n        />\n      </StatusBox>\n    </>\n  );\n};\n\nexport default DeploymentConfigPage;\n","import * as React from 'react';\nimport { FormikBag, Formik } from 'formik';\nimport { safeLoad } from 'js-yaml';\nimport { useTranslation } from 'react-i18next';\nimport { k8sCreateResource, k8sUpdateResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { history } from '@console/internal/components/utils';\nimport { DeploymentConfigModel, DeploymentModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { Resources } from '../import/import-types';\nimport EditDeploymentForm from './DeploymentForm';\nimport { EditDeploymentData, EditDeploymentFormikValues } from './utils/deployment-types';\nimport { convertDeploymentToEditForm, convertEditFormToDeployment } from './utils/deployment-utils';\nimport { validationSchema } from './utils/deployment-validation-utils';\n\nexport interface EditDeploymentProps {\n  heading: string;\n  resource: K8sResourceKind;\n  name: string;\n  namespace: string;\n}\n\nconst EditDeployment: React.FC<EditDeploymentProps> = ({ heading, resource, namespace, name }) => {\n  const { t } = useTranslation();\n  const isNew = !name;\n\n  const initialValues = React.useRef({\n    editorType: EditorType.Form,\n    yamlData: safeJSToYAML(resource, 'yamlData', {\n      skipInvalid: true,\n    }),\n    formData: convertDeploymentToEditForm(resource),\n    formReloadCount: 0,\n  });\n\n  const handleSubmit = (\n    values: EditDeploymentFormikValues,\n    actions: FormikBag<any, EditDeploymentData>,\n  ) => {\n    let deploymentRes: K8sResourceKind;\n    const resourceType = getResourcesType(resource);\n    if (values.editorType === EditorType.YAML) {\n      try {\n        deploymentRes = safeLoad(values.yamlData);\n        if (!deploymentRes?.metadata?.namespace) {\n          deploymentRes.metadata.namespace = namespace;\n        }\n      } catch (err) {\n        actions.setStatus({\n          submitSuccess: '',\n          submitError: t('devconsole~Invalid YAML - {{err}}', { err }),\n        });\n        return null;\n      }\n    } else {\n      deploymentRes = convertEditFormToDeployment(values.formData, resource);\n    }\n\n    const resourceCall = isNew\n      ? k8sCreateResource({\n          model: resourceType === Resources.OpenShift ? DeploymentConfigModel : DeploymentModel,\n          data: deploymentRes,\n        })\n      : k8sUpdateResource({\n          model: resourceType === Resources.OpenShift ? DeploymentConfigModel : DeploymentModel,\n          data: deploymentRes,\n          name,\n          ns: namespace,\n        });\n\n    return resourceCall\n      .then((res: K8sResourceKind) => {\n        const model =\n          resourceType === Resources.OpenShift ? DeploymentConfigModel : DeploymentModel;\n        if (isNew) {\n          actions.setStatus({\n            submitError: '',\n            submitSuccess: t('devconsole~{{resource}} has been created', { resource: res.kind }),\n          });\n        } else {\n          const resVersion = res.metadata.resourceVersion;\n          actions.setStatus({\n            submitError: '',\n            submitSuccess: t('devconsole~{{name}} has been updated to version {{resVersion}}', {\n              name,\n              resVersion,\n            }),\n          });\n        }\n        history.push(`/k8s/ns/${namespace}/${model.plural}/${res.metadata.name}`);\n      })\n      .catch((err) => {\n        actions.setStatus({ submitSuccess: '', submitError: err.message });\n      });\n  };\n\n  const handleCancel = () => history.goBack();\n\n  return (\n    <Formik\n      initialValues={initialValues.current}\n      onSubmit={handleSubmit}\n      validationSchema={validationSchema()}\n      enableReinitialize\n    >\n      {(formikProps) => {\n        return (\n          <EditDeploymentForm\n            {...formikProps}\n            heading={heading}\n            resource={resource}\n            handleCancel={handleCancel}\n          />\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditDeployment;\n","import * as React from 'react';\nimport { FormSection, TextInputTypes } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { InputField } from '@console/shared/src';\nimport { DeploymentStrategyType } from '../utils/types';\nimport LifecycleHookField from './LifecycleHookField';\n\nconst AdvancedStrategyOptions: React.FC<{\n  dataAttribute: string;\n  resourceObj: K8sResourceKind;\n}> = ({ dataAttribute, resourceObj }) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: {\n        deploymentStrategy: { type },\n      },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <ExpandCollapse\n      textExpanded={t('devconsole~Hide additional parameters and lifecycle hooks')}\n      textCollapsed={t('devconsole~Show additional parameters and lifecycle hooks')}\n    >\n      <FormSection>\n        {type === DeploymentStrategyType.rollingParams && (\n          <>\n            <InputField\n              name=\"formData.deploymentStrategy.rollingParams.updatePeriodSeconds\"\n              style={{ maxWidth: 'unset' }}\n              label={t('devconsole~Update Period')}\n              type={TextInputTypes.number}\n            />\n            <InputField\n              name=\"formData.deploymentStrategy.rollingParams.intervalSeconds\"\n              style={{ maxWidth: 'unset' }}\n              label={t('devconsole~Interval')}\n              type={TextInputTypes.number}\n            />\n          </>\n        )}\n        <LifecycleHookField\n          title={t('devconsole~Pre Lifecycle Hook')}\n          subTitle={t('devconsole~Pre hooks execute before the deployment begins.')}\n          dataAttribute={dataAttribute}\n          resourceObj={resourceObj}\n          lifecycleHookName=\"pre\"\n        />\n        {type === DeploymentStrategyType.recreateParams && (\n          <LifecycleHookField\n            title={t('devconsole~Mid Lifecycle Hook')}\n            subTitle={t(\n              'devconsole~Mid hooks execute after the previous deployment is scaled down to zero and before the first pod of the new deployment is created.',\n            )}\n            dataAttribute={dataAttribute}\n            resourceObj={resourceObj}\n            lifecycleHookName=\"mid\"\n          />\n        )}\n        <LifecycleHookField\n          title={t('devconsole~Post Lifecycle Hook')}\n          subTitle={t('devconsole~Post hooks execute after the deployment strategy completes.')}\n          dataAttribute={dataAttribute}\n          resourceObj={resourceObj}\n          lifecycleHookName=\"post\"\n        />\n      </FormSection>\n    </ExpandCollapse>\n  );\n};\n\nexport default AdvancedStrategyOptions;\n","import { TFunction } from 'i18next';\nimport { Resources } from '../../../import/import-types';\nimport { DeploymentStrategyType, LifecycleAction } from './types';\n\nexport const getDeploymentStrategyItems = (resourceType: Resources, t: TFunction) => {\n  switch (resourceType) {\n    case Resources.Kubernetes:\n      return {\n        [DeploymentStrategyType.recreateParams]: t('devconsole~Recreate'),\n        [DeploymentStrategyType.rollingUpdate]: t('devconsole~Rolling Update'),\n      };\n    case Resources.OpenShift:\n      return {\n        [DeploymentStrategyType.recreateParams]: t('devconsole~Recreate'),\n        [DeploymentStrategyType.rollingParams]: t('devconsole~Rolling'),\n        [DeploymentStrategyType.customParams]: t('devconsole~Custom'),\n      };\n    default:\n      return {};\n  }\n};\n\nexport const getDeploymentStrategyHelpText = (\n  resourceType: Resources,\n  deploymentStrategyType: DeploymentStrategyType,\n  t: TFunction,\n): string => {\n  switch (resourceType) {\n    case Resources.Kubernetes:\n      switch (deploymentStrategyType) {\n        case DeploymentStrategyType.recreateParams:\n          return t('devconsole~The recreate strategy has basic rollout behavior.');\n        case DeploymentStrategyType.rollingUpdate:\n          return t(\n            'devconsole~The rolling strategy will wait for pods to pass their readiness check, scale down old components and then scale up.',\n          );\n        default:\n          return null;\n      }\n    case Resources.OpenShift:\n      switch (deploymentStrategyType) {\n        case DeploymentStrategyType.recreateParams:\n          return t(\n            'devconsole~The recreate strategy has basic rollout behavior and supports lifecycle hooks for injecting code into the deployment process.',\n          );\n        case DeploymentStrategyType.rollingParams:\n          return t(\n            'devconsole~The rolling strategy will wait for pods to pass their readiness check, scale down old components and then scale up.',\n          );\n        case DeploymentStrategyType.customParams:\n          return t(\n            'devconsole~The custom strategy allows you to specify container image that will provide your own deployment behavior.',\n          );\n        default:\n          return null;\n      }\n    default:\n      return null;\n  }\n};\n\nexport const lifecycleActionType = (t: TFunction) => {\n  return {\n    execNewPod: {\n      value: LifecycleAction.execNewPod,\n      label: t(\n        'devconsole~Runs a command in a new pod using the container from the deployment template. You can add additional environment variables and volumes',\n      ),\n    },\n    tagImages: {\n      value: LifecycleAction.tagImages,\n      label: t(\n        'devconsole~Tags the current image as an image stream tag if the deployment succeeds',\n      ),\n    },\n  };\n};\n","import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { ContainerModel } from '@console/internal/models';\n\nconst ContainerField: React.FC = () => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { containers },\n    },\n  } = useFormikContext<FormikValues>();\n  const containerName = containers[0]?.name;\n  return (\n    <FormGroup fieldId=\"container-name\">\n      <span style={{ fontWeight: 'bold', position: 'relative' }}>\n        <Trans t={t} ns=\"devconsole\">\n          Container: <ResourceIcon kind={ContainerModel.kind} />\n          {{ containerName }}\n        </Trans>\n      </span>\n    </FormGroup>\n  );\n};\n\nexport default ContainerField;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { StatusBox } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { DeploymentModel } from '@console/internal/models';\nimport { DeploymentKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport EditDeployment from './EditDeployment';\nimport { getDefaultDeployment } from './utils/deployment-utils';\n\nconst DeploymentPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { ns: namespace, name } = useParams();\n\n  const isNew = !name;\n\n  const [watchedDeployment, loaded, loadError] = useK8sWatchResource<DeploymentKind>(\n    isNew\n      ? null\n      : {\n          kind: DeploymentModel.kind,\n          name,\n          namespace,\n        },\n  );\n\n  const deployment: K8sResourceKind = isNew ? getDefaultDeployment(namespace) : watchedDeployment;\n\n  const title = isNew ? t('devconsole~Create Deployment') : t('devconsole~Edit Deployment');\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <StatusBox loaded={loaded} loadError={loadError} label={title} data={deployment}>\n        <EditDeployment\n          heading={title}\n          resource={deployment}\n          name={isNew ? null : name}\n          namespace={namespace}\n        />\n      </StatusBox>\n    </>\n  );\n};\n\nexport default DeploymentPage;\n","import * as React from 'react';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DeploymentConfigDeprecationAlert } from '@console/internal/components/deployment-config';\nimport { DeploymentConfigModel, DeploymentModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  FlexForm,\n  FormBody,\n  FormFooter,\n  FormHeader,\n  SyncedEditorField,\n  CodeEditorField,\n} from '@console/shared/src';\nimport { downloadYaml } from '@console/shared/src/components/editor/yaml-download-utils';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { Resources } from '../import/import-types';\nimport DeploymentFormEditor from './DeploymentFormEditor';\nimport { convertDeploymentToEditForm, convertEditFormToDeployment } from './utils/deployment-utils';\n\nconst EditDeploymentForm: React.FC<\n  FormikProps<FormikValues> & {\n    heading: string;\n    resource: K8sResourceKind;\n    handleCancel: () => void;\n  }\n> = ({\n  heading,\n  resource,\n  status,\n  isSubmitting,\n  dirty,\n  handleSubmit,\n  handleCancel,\n  setFieldValue,\n  setStatus,\n  setErrors,\n  errors,\n  values: { editorType, formData, yamlData, formReloadCount },\n}) => {\n  const { t } = useTranslation();\n  const resourceType = getResourcesType(resource);\n  const isNew = !resource.metadata.name;\n\n  const isStale = !isNew && resource.metadata.resourceVersion !== formData.resourceVersion;\n\n  const LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY = 'devconsole.editDeploymentForm.editor.lastView';\n\n  const formEditor = <DeploymentFormEditor resourceType={resourceType} resourceObj={resource} />;\n\n  const yamlEditor = (\n    <>\n      {resource.kind === DeploymentConfigModel.kind && <DeploymentConfigDeprecationAlert />}\n      <CodeEditorField\n        name=\"yamlData\"\n        model={resourceType === Resources.OpenShift ? DeploymentConfigModel : DeploymentModel}\n        showSamples={isNew}\n        onSave={handleSubmit}\n      />\n    </>\n  );\n\n  const sanitizeToForm = (yamlDeployment: K8sResourceKind) => {\n    return convertDeploymentToEditForm(yamlDeployment);\n  };\n\n  const sanitizeToYaml = () =>\n    safeJSToYAML(convertEditFormToDeployment(formData, resource), 'yamlData', {\n      skipInvalid: true,\n    });\n\n  const onReload = React.useCallback(() => {\n    setStatus({ submitSuccess: '', submitError: '' });\n    setErrors({});\n    if (editorType === EditorType.Form) {\n      setFieldValue('formData', convertDeploymentToEditForm(resource));\n    }\n    setFieldValue('formData.resourceVersion', resource.metadata.resourceVersion);\n    setFieldValue('yamlData', safeJSToYAML(resource, 'yamlData', { skipInvalid: true }));\n    setFieldValue('formReloadCount', formReloadCount + 1);\n  }, [setStatus, setErrors, editorType, setFieldValue, resource, formReloadCount]);\n\n  return (\n    <FlexForm onSubmit={handleSubmit}>\n      <FormBody flexLayout>\n        <FormHeader title={heading} />\n        <SyncedEditorField\n          name=\"editorType\"\n          formContext={{\n            name: 'formData',\n            editor: formEditor,\n            sanitizeTo: sanitizeToForm,\n          }}\n          yamlContext={{\n            name: 'yamlData',\n            editor: yamlEditor,\n            sanitizeTo: sanitizeToYaml,\n          }}\n          lastViewUserSettingKey={LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY}\n          noMargin\n        />\n      </FormBody>\n      <FormFooter\n        handleReset={isNew ? null : onReload}\n        errorMessage={status?.submitError}\n        successMessage={status?.submitSuccess}\n        showAlert={isStale}\n        infoTitle={t('devconsole~This object has been updated.')}\n        infoMessage={t('devconsole~Click reload to see the new version.')}\n        isSubmitting={isSubmitting}\n        submitLabel={isNew ? t('devconsole~Create') : t('devconsole~Save')}\n        disableSubmit={\n          (editorType === EditorType.YAML ? !dirty : !dirty || !_.isEmpty(errors)) || isSubmitting\n        }\n        handleCancel={handleCancel}\n        handleDownload={editorType === EditorType.YAML && (() => downloadYaml(yamlData))}\n        sticky\n      />\n    </FlexForm>\n  );\n};\n\nexport default EditDeploymentForm;\n","import * as React from 'react';\nimport { DeploymentConfigDeprecationAlert } from '@console/internal/components/deployment-config';\nimport { DeploymentConfigModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport SwitchToYAMLAlert from '@console/shared/src/components/alerts/SwitchToYAMLAlert';\nimport NameSection from '../buildconfig/sections/NameSection';\nimport { Resources } from '../import/import-types';\nimport AdvancedSection from './AdvancedSection';\nimport DeploymentStrategySection from './deployment-strategy/DeploymentStrategySection';\nimport EnvironmentVariablesSection from './EnvironmentVariablesSection';\nimport ImagesSection from './images/ImagesSection';\n\nexport type EditDeploymentFormEditorProps = {\n  resourceType: Resources;\n  resourceObj: K8sResourceKind;\n};\n\nconst EditDeploymentFormEditor: React.FC<EditDeploymentFormEditorProps> = ({\n  resourceType,\n  resourceObj,\n}) => {\n  const [showYAMLAlert, setShowYAMLAlert] = React.useState<boolean>(true);\n  return (\n    <>\n      {resourceObj.kind === DeploymentConfigModel.kind && <DeploymentConfigDeprecationAlert />}\n      {showYAMLAlert && <SwitchToYAMLAlert onClose={() => setShowYAMLAlert(false)} />}\n      <NameSection />\n      <DeploymentStrategySection resourceType={resourceType} resourceObj={resourceObj} />\n      <ImagesSection resourceType={resourceType} />\n      <EnvironmentVariablesSection resourceObj={resourceObj} />\n      <AdvancedSection resourceType={resourceType} />\n    </>\n  );\n};\n\nexport default EditDeploymentFormEditor;\n","import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ProgressiveList, ProgressiveListItem } from '@console/shared/src';\nimport ScalingSection from '../import/advanced/ScalingSection';\nimport FormSection from '../import/section/FormSection';\nimport PauseRolloutsSection from './PauseRolloutsSection';\n\ntype AdvancedSectionProps = {\n  resourceType: string;\n};\n\nconst Footer = ({ children }) => {\n  const { t } = useTranslation();\n  return (\n    <Trans\n      t={t}\n      ns=\"devconsole\"\n      defaults=\"Click on the names to access advanced options for <0></0>.\"\n      components={[children]}\n    />\n  );\n};\n\nconst List: React.FC<AdvancedSectionProps> = ({ resourceType }) => {\n  const { t } = useTranslation();\n  const [visibleItems, setVisibleItems] = React.useState<string[]>([]);\n  const handleVisibleItemChange = (item: string) => {\n    setVisibleItems([...visibleItems, item]);\n  };\n\n  return (\n    <ProgressiveList\n      visibleItems={visibleItems}\n      onVisibleItemChange={handleVisibleItemChange}\n      Footer={Footer}\n    >\n      <ProgressiveListItem name={t('devconsole~Pause rollouts')}>\n        <PauseRolloutsSection name=\"formData.paused\" resourceType={resourceType} />\n      </ProgressiveListItem>\n      <ProgressiveListItem name={t('devconsole~Scaling')}>\n        <ScalingSection name=\"formData.replicas\" />\n      </ProgressiveListItem>\n    </ProgressiveList>\n  );\n};\n\nconst AdvancedSection: React.FC<AdvancedSectionProps> = ({ resourceType }) => {\n  const { t } = useTranslation();\n\n  return (\n    <FormSection\n      title={t('devconsole~Advanced options')}\n      dataTest=\"advanced-options-section\"\n      fullWidth\n    >\n      <div data-test=\"deployment-form-testid\">\n        <List resourceType={resourceType} />\n      </div>\n    </FormSection>\n  );\n};\n\nexport default AdvancedSection;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxField } from '@console/shared/src';\nimport { Resources } from '../import/import-types';\nimport FormSection from '../import/section/FormSection';\n\nconst PauseRolloutsSection: React.FC<{ name: string; resourceType: string }> = ({\n  name,\n  resourceType,\n}) => {\n  const { t } = useTranslation();\n  const resourceLabel = resourceType === Resources.OpenShift ? 'deployment config' : 'deployment';\n  return (\n    <FormSection title={t('devconsole~Pause rollouts')} dataTest=\"pause-rollouts\">\n      <CheckboxField\n        name={name}\n        label={t('devconsole~Pause rollouts for this {{resourceLabel}}', { resourceLabel })}\n        helpText={t(\n          'devconsole~Pausing lets you make changes without triggering a rollout. You can resume rollouts at any time.',\n        )}\n      />\n    </FormSection>\n  );\n};\n\nexport default PauseRolloutsSection;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { DropdownField } from '@console/shared/src';\nimport { Resources } from '../../import/import-types';\nimport FormSection from '../../import/section/FormSection';\nimport { getStrategyData } from '../utils/deployment-utils';\nimport CustomStrategy from './CustomStrategy';\nimport RecreateStrategy from './RecreateStrategy';\nimport RollingStrategy from './RollingStrategy';\nimport {\n  getDeploymentStrategyItems,\n  getDeploymentStrategyHelpText,\n} from './utils/deployment-strategy-utils';\nimport { DeploymentStrategyType } from './utils/types';\n\nexport type DeploymentStrategySectionProps = {\n  resourceType: Resources;\n  resourceObj: K8sResourceKind;\n};\n\nconst DeploymentStrategySection: React.FC<DeploymentStrategySectionProps> = ({\n  resourceType,\n  resourceObj,\n}) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: {\n        name: resName,\n        project: { name: resNamespace },\n        deploymentStrategy,\n      },\n    },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n\n  const deploymentStrategyFields = React.useMemo(() => {\n    switch (deploymentStrategy.type) {\n      case DeploymentStrategyType.recreateParams:\n        return <RecreateStrategy resourceType={resourceType} resourceObj={resourceObj} />;\n      case DeploymentStrategyType.rollingParams:\n      case DeploymentStrategyType.rollingUpdate:\n        return <RollingStrategy resourceType={resourceType} resourceObj={resourceObj} />;\n      case DeploymentStrategyType.customParams:\n        return <CustomStrategy resourceObj={resourceObj} />;\n      default:\n        return null;\n    }\n  }, [deploymentStrategy.type, resourceObj, resourceType]);\n\n  const onChange = React.useCallback(\n    (value: DeploymentStrategyType) => {\n      const strategyDefaultValues = getStrategyData(value, {}, resName, resNamespace, resourceType);\n      const strategyData = {\n        ..._.merge(strategyDefaultValues, deploymentStrategy),\n        type: value,\n      };\n      setFieldValue('formData.deploymentStrategy', strategyData);\n    },\n    [resName, resNamespace, resourceType, setFieldValue, deploymentStrategy],\n  );\n\n  return (\n    <FormSection title={t('devconsole~Deployment strategy')} dataTest=\"deployment-strategy-section\">\n      <DropdownField\n        name=\"formData.deploymentStrategy.type\"\n        label={t('devconsole~Strategy type')}\n        items={getDeploymentStrategyItems(resourceType, t)}\n        helpText={getDeploymentStrategyHelpText(resourceType, deploymentStrategy.type, t)}\n        onChange={onChange}\n        fullWidth\n      />\n      {deploymentStrategyFields}\n    </FormSection>\n  );\n};\n\nexport default DeploymentStrategySection;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { EnvironmentField, InputField, TextColumnField } from '@console/shared/src';\nimport { StrategyFieldProps } from './utils/types';\n\nconst CustomStrategy: React.FC<StrategyFieldProps> = ({ resourceObj }) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: {\n        deploymentStrategy: { customParams },\n      },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <div data-test=\"customParams\">\n      <InputField\n        name=\"formData.deploymentStrategy.customParams.image\"\n        label={t('devconsole~Image name')}\n        helpText={t('devconsole~An image that can carry out the deployment.')}\n      />\n      <TextColumnField\n        name=\"formData.deploymentStrategy.customParams.command\"\n        label={t('devconsole~Command')}\n        addLabel={t('devconsole~Add another argument')}\n        placeholder={t('devconsole~Add argument')}\n        helpText={t(\n          'devconsole~Enter the command to run inside the container. The command is considered successful if its exit code is 0. Drag and drop to reorder arguments.',\n        )}\n        dndEnabled\n      />\n      <EnvironmentField\n        name=\"formData.deploymentStrategy.customParams.environment\"\n        label={t('devconsole~Environment variables (runtime only)')}\n        envs={customParams.environment ?? []}\n        obj={resourceObj}\n      />\n    </div>\n  );\n};\n\nexport default CustomStrategy;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InputField } from '@console/shared/src';\nimport { Resources } from '../../import/import-types';\nimport AdvancedStrategyOptions from './advanced-options/AdvancedStrategyOptions';\nimport { StrategyFieldProps } from './utils/types';\n\nconst RecreateStrategy: React.FC<StrategyFieldProps> = ({ resourceType, resourceObj }) => {\n  const { t } = useTranslation();\n  return resourceType === Resources.OpenShift ? (\n    <div data-test=\"recreateParams\">\n      <InputField\n        name=\"formData.deploymentStrategy.recreateParams.timeoutSeconds\"\n        style={{ maxWidth: 'unset' }}\n        label={t('devconsole~Timeout')}\n        type={TextInputTypes.number}\n        helpText={t(\n          'devconsole~The number of seconds to wait for a pod to scale up before giving up',\n        )}\n      />\n      <AdvancedStrategyOptions dataAttribute=\"recreateParams\" resourceObj={resourceObj} />\n    </div>\n  ) : null;\n};\n\nexport default RecreateStrategy;\n","import * as React from 'react';\nimport { ButtonVariant, Button, Tooltip } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { FormikValues, useField, useFormikContext } from 'formik';\nimport { cloneDeep } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getResourcesType } from '../../../edit-application/edit-application-utils';\nimport { getStrategyData } from '../../utils/deployment-utils';\nimport LifecycleHookForm from './LifecycleHookForm';\nimport './LifecycleHookField.scss';\n\ninterface LifecycleHookFieldProps {\n  lifecycleHookName: string;\n  resourceObj: K8sResourceKind;\n  dataAttribute: string;\n  title?: string;\n  subTitle?: string;\n}\n\nconst LifecycleHookField: React.FC<LifecycleHookFieldProps> = ({\n  title,\n  subTitle,\n  dataAttribute,\n  lifecycleHookName,\n  resourceObj,\n}) => {\n  const { t } = useTranslation();\n  const {\n    setFieldValue,\n    values: {\n      formData: {\n        name: resName,\n        project: { name: resNamespace },\n        deploymentStrategy,\n      },\n    },\n    initialValues,\n  } = useFormikContext<FormikValues>();\n  const [{ value: lifecycleHookExist }] = useField<boolean>(\n    `formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}.exists`,\n  );\n  const [showForm, setShowForm] = React.useState(false);\n  const resourceType = getResourcesType(resourceObj);\n\n  const onSubmit = React.useCallback(() => {\n    setShowForm(false);\n    setFieldValue(`formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}.exists`, true);\n    setFieldValue(\n      `formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}.isAddingLch`,\n      false,\n    );\n    initialValues.formData.deploymentStrategy[dataAttribute][lifecycleHookName] =\n      deploymentStrategy[dataAttribute][lifecycleHookName];\n    initialValues.formData.deploymentStrategy.imageStreamData[lifecycleHookName] =\n      deploymentStrategy.imageStreamData[lifecycleHookName];\n  }, [\n    dataAttribute,\n    deploymentStrategy,\n    initialValues.formData.deploymentStrategy,\n    lifecycleHookName,\n    setFieldValue,\n  ]);\n\n  const onRemove = React.useCallback(() => {\n    const strategy = cloneDeep(deploymentStrategy);\n    strategy[dataAttribute][lifecycleHookName] = undefined;\n    const data = getStrategyData(\n      strategy.type,\n      { [dataAttribute]: strategy[dataAttribute] },\n      resName,\n      resNamespace,\n      resourceType,\n    );\n    initialValues.formData.deploymentStrategy[dataAttribute][lifecycleHookName] =\n      data[dataAttribute][lifecycleHookName];\n    initialValues.formData.deploymentStrategy.imageStreamData[lifecycleHookName] =\n      data.imageStreamData[lifecycleHookName];\n    setFieldValue(\n      `formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}`,\n      data[dataAttribute][lifecycleHookName],\n    );\n    setFieldValue(\n      `formData.deploymentStrategy.imageStreamData.${lifecycleHookName}`,\n      data.imageStreamData[lifecycleHookName],\n    );\n  }, [\n    dataAttribute,\n    deploymentStrategy,\n    initialValues.formData.deploymentStrategy,\n    lifecycleHookName,\n    resName,\n    resNamespace,\n    resourceType,\n    setFieldValue,\n  ]);\n\n  const onClose = React.useCallback(() => {\n    setShowForm(false);\n    setFieldValue(\n      `formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}`,\n      initialValues.formData.deploymentStrategy[dataAttribute][lifecycleHookName],\n    );\n    setFieldValue(\n      `formData.deploymentStrategy.imageStreamData.${lifecycleHookName}`,\n      initialValues.formData.deploymentStrategy.imageStreamData[lifecycleHookName],\n    );\n    setFieldValue(\n      `formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}.exists`,\n      lifecycleHookExist,\n    );\n    setFieldValue(\n      `formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}.isAddingLch`,\n      false,\n    );\n  }, [\n    dataAttribute,\n    initialValues.formData.deploymentStrategy,\n    lifecycleHookExist,\n    lifecycleHookName,\n    setFieldValue,\n  ]);\n\n  return (\n    <div>\n      <div className=\"co-section-heading-tertiary odc-lifecycle-hook-field__title\">{title}</div>\n      <div className=\"pf-v5-c-form__helper-text\">{subTitle}</div>\n      {!showForm && (\n        <Button\n          className=\"pf-m-link--align-left\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            setShowForm(true);\n            setFieldValue(\n              `formData.deploymentStrategy.${dataAttribute}.${lifecycleHookName}.isAddingLch`,\n              true,\n            );\n          }}\n          icon={!lifecycleHookExist && <PlusCircleIcon />}\n        >\n          {`${lifecycleHookExist ? t('devconsole~Edit') : t('devconsole~Add')} ${t(\n            'devconsole~{{lifecycleHookName}} lifecycle hook',\n            {\n              lifecycleHookName,\n            },\n          )}`}\n        </Button>\n      )}\n      {!showForm && lifecycleHookExist && (\n        <Tooltip content={t('devconsole~Remove')} position=\"right\">\n          <Button\n            className=\"pf-m-plain--align-left\"\n            variant={ButtonVariant.plain}\n            onClick={onRemove}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </Tooltip>\n      )}\n      {showForm && (\n        <LifecycleHookForm\n          dataAttribute={dataAttribute}\n          resourceObj={resourceObj}\n          lifecycleHook={lifecycleHookName}\n          onSubmit={onSubmit}\n          onClose={onClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LifecycleHookField;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ActionGroupWithIcons, DropdownField, RadioGroupField } from '@console/shared/src';\nimport FormSection from '../../../import/section/FormSection';\nimport { lifecycleActionType } from '../utils/deployment-strategy-utils';\nimport { FailurePolicyOptions } from '../utils/types';\nimport ExecNewPodForm from './ExecNewPodForm';\nimport TagImagesForm from './TagImagesForm';\nimport './LifecycleHookForm.scss';\n\ninterface LifecycleHookFormProps {\n  lifecycleHook: string;\n  resourceObj: K8sResourceKind;\n  dataAttribute: string;\n  onSubmit: () => void;\n  onClose: () => void;\n}\n\nconst LifecycleHookForm: React.FC<LifecycleHookFormProps> = ({\n  lifecycleHook,\n  resourceObj,\n  dataAttribute,\n  onSubmit,\n  onClose,\n}) => {\n  const { t } = useTranslation();\n  const { errors } = useFormikContext<FormikValues>();\n  return (\n    <div className=\"odc-deployment-lifecycle-hook-form\">\n      <FormSection>\n        <RadioGroupField\n          name={`formData.deploymentStrategy.${dataAttribute}.${lifecycleHook}.action`}\n          label={t('devconsole~Lifecycle Action')}\n          required\n          options={[\n            {\n              label: lifecycleActionType(t).execNewPod.label,\n              value: lifecycleActionType(t).execNewPod.value,\n              activeChildren: (\n                <ExecNewPodForm\n                  resourceObj={resourceObj}\n                  lifecycleHook={lifecycleHook}\n                  dataAttribute={dataAttribute}\n                />\n              ),\n            },\n            {\n              label: lifecycleActionType(t).tagImages.label,\n              value: lifecycleActionType(t).tagImages.value,\n              activeChildren: <TagImagesForm lifecycleHook={lifecycleHook} />,\n            },\n          ]}\n        />\n        <DropdownField\n          name={`formData.deploymentStrategy.${dataAttribute}.${lifecycleHook}.lch.failurePolicy`}\n          label={t('devconsole~Failure Policy')}\n          title={t('devconsole~Select a Failure Policy')}\n          items={FailurePolicyOptions}\n          helpText={t('devconsole~Fail the deployment if the hook fails.')}\n          fullWidth\n          required\n        />\n        <ActionGroupWithIcons\n          onSubmit={onSubmit}\n          onClose={onClose}\n          isDisabled={\n            !_.isEmpty(\n              _.get(errors?.formData, [\n                'deploymentStrategy',\n                `${dataAttribute}`,\n                `${lifecycleHook}`,\n              ]),\n            ) ||\n            !_.isEmpty(\n              _.get(errors?.formData, [\n                'deploymentStrategy',\n                'imageStreamData',\n                `${lifecycleHook}`,\n              ]),\n            )\n          }\n        />\n      </FormSection>\n    </div>\n  );\n};\n\nexport default LifecycleHookForm;\n","import * as React from 'react';\nimport { FormSection } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { DropdownField, EnvironmentField, InputField, TextColumnField } from '@console/shared/src';\nimport { getContainerNames } from '../../utils/deployment-utils';\n\ninterface ExecNewPodFormProps {\n  resourceObj: K8sResourceKind;\n  lifecycleHook: string;\n  dataAttribute: string;\n}\n\nconst ExecNewPodForm: React.FC<ExecNewPodFormProps> = ({\n  resourceObj,\n  lifecycleHook,\n  dataAttribute,\n}) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { containers, deploymentStrategy },\n    },\n  } = useFormikContext<FormikValues>();\n\n  return (\n    <FormSection>\n      <DropdownField\n        name={`formData.deploymentStrategy.${dataAttribute}.${lifecycleHook}.lch.execNewPod.containerName`}\n        label={t('devconsole~Container name')}\n        title={t('devconsole~Select container name')}\n        items={getContainerNames(containers)}\n        fullWidth\n        required\n      />\n      <TextColumnField\n        name={`formData.deploymentStrategy.${dataAttribute}.${lifecycleHook}.lch.execNewPod.command`}\n        label={t('devconsole~Command')}\n        addLabel={t('devconsole~Add another argument')}\n        placeholder={t('devconsole~Add argument')}\n        helpText={t(\n          'devconsole~Enter the command to run inside the container. The command is considered sucessful if its exit code is 0. Drag and drop to reorder arguments.',\n        )}\n        required\n        dndEnabled\n        disableDeleteRow={\n          deploymentStrategy[dataAttribute][lifecycleHook].lch.execNewPod.command?.length === 1\n        }\n      />\n      <EnvironmentField\n        name={`formData.deploymentStrategy.${dataAttribute}.${lifecycleHook}.lch.execNewPod.env`}\n        label={t('devconsole~Environment variables (runtime only)')}\n        envs={deploymentStrategy[dataAttribute][lifecycleHook].lch.execNewPod.env ?? []}\n        obj={resourceObj}\n      />\n      <InputField\n        name={`formData.deploymentStrategy.${dataAttribute}.${lifecycleHook}.lch.execNewPod.volumes`}\n        label={t('devconsole~Volumes')}\n        helpText={t(\n          'devconsole~List of comma (,) separated named volumes to copy to the hook pod.',\n        )}\n      />\n    </FormSection>\n  );\n};\n\nexport default ExecNewPodForm;\n","import * as React from 'react';\nimport { FormSection } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { DropdownField } from '@console/shared/src';\nimport ImageStream from '../../../import/image-search/ImageStream';\nimport { getContainerNames } from '../../utils/deployment-utils';\n\nconst TagImagesForm: React.FC<{ lifecycleHook: string }> = ({ lifecycleHook }) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { containers, deploymentStrategy },\n    },\n  } = useFormikContext<FormikValues>();\n  const dropdownItems = getContainerNames(containers);\n  return (\n    <FormSection>\n      <DropdownField\n        name={`formData.deploymentStrategy.imageStreamData.${lifecycleHook}.containerName`}\n        label={t('devconsole~Container name')}\n        items={dropdownItems}\n        selectedKey={deploymentStrategy.imageStreamData[lifecycleHook].containerName}\n        fullWidth\n        required\n      />\n      <ImageStream\n        label={t('devconsole~Tag as')}\n        formContextField={`formData.deploymentStrategy.imageStreamData.${lifecycleHook}`}\n        required\n      />\n    </FormSection>\n  );\n};\n\nexport default TagImagesForm;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InputField } from '@console/shared/src';\nimport { Resources } from '../../import/import-types';\nimport AdvancedStrategyOptions from './advanced-options/AdvancedStrategyOptions';\nimport { StrategyFieldProps } from './utils/types';\n\nconst RollingStrategy: React.FC<StrategyFieldProps> = ({ resourceType, resourceObj }) => {\n  const { t } = useTranslation();\n  const dataAttribute = resourceType === Resources.OpenShift ? 'rollingParams' : 'rollingUpdate';\n  return (\n    <div data-test={dataAttribute}>\n      {resourceType === Resources.OpenShift && (\n        <InputField\n          name=\"formData.deploymentStrategy.rollingParams.timeoutSeconds\"\n          style={{ maxWidth: 'unset' }}\n          label={t('devconsole~Timeout')}\n          type={TextInputTypes.number}\n          helpText={t(\n            'devconsole~The number of seconds to wait for a pod to scale up before giving up',\n          )}\n        />\n      )}\n      <InputField\n        name={`formData.deploymentStrategy.${dataAttribute}.maxUnavailable`}\n        label={t('devconsole~Maximum number of unavailable Pods')}\n        helpText={t(\n          'devconsole~The maximum number of pods that can be unavailable during the rolling deployment. This can be either a percentage (10%) or a whole number (1).',\n        )}\n      />\n      <InputField\n        name={`formData.deploymentStrategy.${dataAttribute}.maxSurge`}\n        label={t('devconsole~Maximum number of surge Pods')}\n        helpText={t(\n          'devconsole~The maximum number of pods that can be scheduled above the original number of pods while the rolling deployment is in progress. This can be either a percentage (10%) or a whole number (1).',\n        )}\n      />\n      {resourceType === Resources.OpenShift && (\n        <AdvancedStrategyOptions dataAttribute=\"rollingParams\" resourceObj={resourceObj} />\n      )}\n    </div>\n  );\n};\n\nexport default RollingStrategy;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { EnvironmentField } from '@console/shared/src';\nimport FormSection from '../import/section/FormSection';\nimport ContainerField from './ContainerField';\n\nconst EnvironmentVariablesSection: React.FC<{ resourceObj: K8sResourceKind }> = ({\n  resourceObj,\n}) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { envs },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <FormSection\n      title={t('devconsole~Environment Variables')}\n      dataTest=\"environment-variables-section\"\n    >\n      <ContainerField />\n      <EnvironmentField name=\"formData.envs\" envs={envs} obj={resourceObj} />\n    </FormSection>\n  );\n};\n\nexport default EnvironmentVariablesSection;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxField } from '@console/shared/src';\nimport { Resources } from '../../import/import-types';\nimport FormSection from '../../import/section/FormSection';\nimport ContainerField from '../ContainerField';\nimport AdvancedImageOptions from './AdvancedImageOptions';\nimport ContainerImageField from './ContainerImageField';\n\nconst ImagesSection: React.FC<{ resourceType: string }> = ({ resourceType }) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { fromImageStreamTag },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <FormSection title={t('devconsole~Images')} dataTest=\"images-section\">\n      <ContainerField />\n      <ContainerImageField />\n      {fromImageStreamTag && (\n        <CheckboxField\n          name=\"formData.triggers.image\"\n          label={t('devconsole~Auto deploy when new Image is available')}\n        />\n      )}\n      {resourceType === Resources.OpenShift && (\n        <CheckboxField\n          name=\"formData.triggers.config\"\n          label={t('devconsole~Auto deploy when deployment configuration changes')}\n        />\n      )}\n      <AdvancedImageOptions />\n    </FormSection>\n  );\n};\n\nexport default ImagesSection;\n","import * as React from 'react';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { SecretTypeAbstraction } from '@console/internal/components/secrets/create-secret';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { SecretModel } from '@console/internal/models';\nimport { ResourceDropdownField } from '@console/shared/src';\nimport { secretModalLauncher } from '../../import/CreateSecretModal';\n\nconst AdvancedImageOptions: React.FC = () => {\n  const { t } = useTranslation();\n  const {\n    setFieldValue,\n    values: {\n      formData: {\n        project: { name: namespace },\n      },\n    },\n  } = useFormikContext<FormikValues>();\n  const filterData = (item) => {\n    return (\n      item.type === 'kubernetes.io/dockercfg' || item.type === 'kubernetes.io/dockerconfigjson'\n    );\n  };\n  const handleSave = (name: string) => {\n    setFieldValue('formData.imagePullSecret', name);\n  };\n  return (\n    <ExpandCollapse\n      textExpanded={t('devconsole~Hide advanced image options')}\n      textCollapsed={t('devconsole~Show advanced image options')}\n    >\n      <ResourceDropdownField\n        name=\"formData.imagePullSecret\"\n        label={t('devconsole~Pull Secret')}\n        helpText={t(\n          'devconsole~Secret for authentication when pulling image from a secured registry.',\n        )}\n        placeholder={t('devconsole~Select Secret name')}\n        resources={[\n          {\n            isList: true,\n            namespace,\n            kind: SecretModel.kind,\n            prop: 'secrets',\n          },\n        ]}\n        resourceFilter={filterData}\n        dataSelector={['metadata', 'name']}\n        dataTest=\"secrets-dropdown\"\n        fullWidth\n      />\n      <Button\n        className=\"pf-m-link--align-left\"\n        variant={ButtonVariant.link}\n        onClick={() =>\n          secretModalLauncher({\n            namespace,\n            save: handleSave,\n            secretType: SecretTypeAbstraction.image,\n          })\n        }\n      >\n        {t('devconsole~Create new Secret')}\n      </Button>\n    </ExpandCollapse>\n  );\n};\n\nexport default AdvancedImageOptions;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxField, InputField } from '@console/shared/src';\nimport ImageStream from '../../import/image-search/ImageStream';\n\nconst ContainerImageField: React.FC = () => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { fromImageStreamTag },\n      formReloadCount,\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <>\n      <CheckboxField\n        name=\"formData.fromImageStreamTag\"\n        label={t('devconsole~Deploy image from an image stream tag')}\n      />\n      {fromImageStreamTag ? (\n        <ImageStream\n          label={t('devconsole~Image stream tag')}\n          formContextField=\"formData\"\n          reloadCount={formReloadCount}\n          dataTest=\"image-stream-tag\"\n          required\n        />\n      ) : (\n        <InputField\n          name=\"formData.imageName\"\n          label={t('devconsole~Image Name')}\n          helpText={t('devconsole~Container image name')}\n          data-test=\"image-name\"\n          required\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContainerImageField;\n","import * as yup from 'yup';\nimport i18n from '@console/internal/i18n';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { DeploymentStrategyType, LifecycleAction } from '../deployment-strategy/utils/types';\nimport {\n  DeploymentStrategy,\n  EditDeploymentData,\n  EditDeploymentFormData,\n  LifecycleHookFormData,\n} from './deployment-types';\n\nexport const lchValidationSchema = (lch: LifecycleHookFormData) =>\n  yup.object().shape({\n    action: yup.string().required(i18n.t('devconsole~Required')),\n    lch: yup.object().shape({\n      failurePolicy: yup.string().required(i18n.t('devconsole~Required')),\n      ...(lch.action === LifecycleAction.execNewPod\n        ? {\n            execNewPod: yup.object().shape({\n              containerName: yup.string().required(i18n.t('devconsole~Required')),\n              command: yup\n                .array()\n                .of(yup.string().required(i18n.t('devconsole~Required')))\n                .required(i18n.t('devconsole~Required')),\n              volumes: yup.string(),\n            }),\n          }\n        : {}),\n    }),\n  });\n\nexport const lchImageStreamDataSchema = (action: string) => {\n  return action === LifecycleAction.tagImages\n    ? yup.object().shape({\n        containerName: yup.string().required(i18n.t('devconsole~Required')),\n        imageStream: yup.object({\n          namespace: yup.string().required(i18n.t('devconsole~Required')),\n          image: yup.string().required(i18n.t('devconsole~Required')),\n          tag: yup.string().required(i18n.t('devconsole~Required')),\n        }),\n      })\n    : null;\n};\n\nexport const deploymentStrategySchema = (strategy: DeploymentStrategy) => {\n  switch (strategy.type) {\n    case DeploymentStrategyType.recreateParams: {\n      const { pre, mid, post } = strategy.recreateParams ?? {};\n      return yup.object().shape({\n        type: yup.string(),\n        recreateParams: yup.object().shape({\n          timeoutSeconds: yup.number(),\n          ...(pre?.isAddingLch ? { pre: lchValidationSchema(pre) } : {}),\n          ...(mid?.isAddingLch ? { mid: lchValidationSchema(mid) } : {}),\n          ...(post?.isAddingLch ? { post: lchValidationSchema(post) } : {}),\n        }),\n        imageStreamData: yup.object().shape({\n          ...(pre?.isAddingLch ? { pre: lchImageStreamDataSchema(pre.action) } : {}),\n          ...(mid?.isAddingLch ? { mid: lchImageStreamDataSchema(mid.action) } : {}),\n          ...(post?.isAddingLch ? { post: lchImageStreamDataSchema(post.action) } : {}),\n        }),\n      });\n    }\n    case DeploymentStrategyType.customParams: {\n      return yup.object().shape({\n        type: yup.string(),\n        customParans: yup.object().shape({\n          command: yup.array().of(yup.string()),\n          image: yup.string(),\n        }),\n      });\n    }\n    case DeploymentStrategyType.rollingParams: {\n      const { pre, post } = strategy.rollingParams;\n      return yup.object().shape({\n        type: yup.string(),\n        rollingParams: yup.object().shape({\n          timeoutSeconds: yup.number(),\n          ...(pre?.isAddingLch ? { pre: lchValidationSchema(pre) } : {}),\n          ...(post?.isAddingLch ? { post: lchValidationSchema(post) } : {}),\n          updatePeriodSeconds: yup.number(),\n          intervalSeconds: yup.number(),\n          maxSurge: yup.string(),\n          maxUnavailable: yup.string(),\n        }),\n        imageStreamData: yup.object().shape({\n          ...(pre?.isAddingLch ? { pre: lchImageStreamDataSchema(pre.action) } : {}),\n          ...(post?.isAddingLch ? { post: lchImageStreamDataSchema(post.action) } : {}),\n        }),\n      });\n    }\n    case DeploymentStrategyType.rollingUpdate: {\n      return yup.object().shape({\n        type: yup.string(),\n        rollingUpdate: yup.object().shape({\n          maxSurge: yup.string(),\n          maxUnavailable: yup.string(),\n        }),\n      });\n    }\n    default:\n      return null;\n  }\n};\n\nexport const editDeploymentFormSchema = (formValues: EditDeploymentFormData) =>\n  yup.object({\n    name: yup.string().required(i18n.t('devconsole~Required')),\n    deploymentStrategy: deploymentStrategySchema(formValues.deploymentStrategy),\n    fromImageStreamTag: yup.boolean(),\n    ...(!formValues.fromImageStreamTag\n      ? { imageName: yup.string().required(i18n.t('devconsole~Required')) }\n      : {}),\n    imageStream: yup.object().when('fromImageStreamTag', {\n      is: true,\n      then: yup.object({\n        namespace: yup.string().required(i18n.t('devconsole~Required')),\n        image: yup.string().required(i18n.t('devconsole~Required')),\n        tag: yup.string().required(i18n.t('devconsole~Required')),\n      }),\n    }),\n    isi: yup.object().when('fromImageStreamTag', {\n      is: true,\n      then: yup.object({\n        name: yup.string().required(i18n.t('devconsole~Required')),\n      }),\n    }),\n  });\n\nexport const validationSchema = () =>\n  yup.mixed().test({\n    test(formValues: EditDeploymentData) {\n      const formYamlDefinition = yup.object({\n        editorType: yup.string().oneOf(Object.values(EditorType)),\n        yamlData: yup.string(),\n        formData: yup.mixed().when('editorType', {\n          is: EditorType.Form,\n          then: editDeploymentFormSchema(formValues.formData),\n        }),\n      });\n\n      return formYamlDefinition.validate(formValues, { abortEarly: false });\n    },\n  });\n"],"sourceRoot":""}