{"version":3,"sources":["webpack:///./packages/console-app/src/components/console-operator/ConsoleOperatorConfig.tsx","webpack:///./packages/console-app/src/components/console-operator/ConsolePluginStatusDetail.tsx","webpack:///./packages/console-shared/src/utils/comparators.ts"],"names":["developmentMode","window","SERVER_FLAGS","k8sMode","consolePluginGVK","consolePluginConcatenatedGVK","consoleOperatorConfigReference","useConsoleOperatorConfigData","console","kind","isList","name","consoleOperatorConfig","consoleOperatorConfigLoaded","canPatchConsoleOperatorConfig","group","apiGroup","resource","plural","verb","ConsolePluginStatus","status","errorMessage","title","undefined","ConsolePluginEnabledStatus","pluginName","enabled","t","labels","type","isInline","onClick","trusted","variant","className","ConsolePluginCSPStatus","hasViolations","ConsolePluginsTable","obj","rows","loaded","sortBy","setSortBy","index","direction","asc","onSort","_event","columns","id","sortable","compare","a","b","desc","left","right","sortedRows","sort","spec","managementState","model","to","label","length","ouiaId","map","columnIndex","key","version","description","hasCSPViolations","dataLabel","groupVersionKind","hideIcon","ConsoleOperatorConfigPluginsPage","props","pluginInfo","pluginInfoLoaded","filter","plugin","metadata","customProperties","consolePlugins","consolePluginsLoaded","enabledPlugins","plugins","includes","loadedPluginInfo","find","i","notLoadedPluginInfo","errorCause","toString","ConsoleOperatorConfigDetailsPage","location","pages","details","editYaml","href","nameKey","component","menuActions","labelKey","labelKind","dataTest","accessReview","breadcrumbsFor","pathname","pluginStore","findDynamicPluginInfo","localeComparator","localeCompare","boolComparator"],"mappings":"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","file":"app/code-refs/consolePluginStatusDetail-chunk-4f3f33e28cea5f12f022.min.js","sourcesContent":["import * as React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport {\n  ISortBy,\n  OnSort,\n  SortByDirection,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { useAccessReview, WatchK8sResource } from '@console/dynamic-plugin-sdk';\nimport {\n  getGroupVersionKindForModel,\n  getReferenceForModel,\n} from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { breadcrumbsForGlobalConfig } from '@console/internal/components/cluster-settings/global-config';\nimport { DetailsForKind } from '@console/internal/components/default-resource';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport {\n  asAccessReview,\n  EmptyBox,\n  KebabAction,\n  LoadingBox,\n  navFactory,\n  RequireCreatePermission,\n  ResourceLink,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ConsoleOperatorConfigModel, ConsolePluginModel } from '@console/internal/models';\nimport {\n  ConsolePluginKind,\n  K8sResourceKind,\n  K8sResourceKindReference,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport {\n  isLoadedDynamicPluginInfo,\n  DynamicPluginInfo,\n  isNotLoadedDynamicPluginInfo,\n} from '@console/plugin-sdk/src';\nimport { useDynamicPluginInfo } from '@console/plugin-sdk/src/api/useDynamicPluginInfo';\nimport {\n  consolePluginModal,\n  CONSOLE_OPERATOR_CONFIG_NAME,\n  DASH,\n  Status,\n  GreenCheckCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport {\n  boolComparator,\n  localeComparator,\n  Comparator,\n} from '@console/shared/src/utils/comparators';\n\nexport const developmentMode = window.SERVER_FLAGS.k8sMode === 'off-cluster';\nconst consolePluginGVK = getGroupVersionKindForModel(ConsolePluginModel);\nconst consolePluginConcatenatedGVK = getReferenceForModel(ConsolePluginModel);\nconst consoleOperatorConfigReference: K8sResourceKindReference = referenceForModel(\n  ConsoleOperatorConfigModel,\n);\n\nexport const useConsoleOperatorConfigData = () => {\n  const console: WatchK8sResource = {\n    kind: referenceForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  };\n\n  const [consoleOperatorConfig, consoleOperatorConfigLoaded] = useK8sWatchResource<K8sResourceKind>(\n    console,\n  );\n\n  const canPatchConsoleOperatorConfig = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n\n  return React.useMemo(\n    () => ({ consoleOperatorConfig, consoleOperatorConfigLoaded, canPatchConsoleOperatorConfig }),\n    [consoleOperatorConfig, consoleOperatorConfigLoaded, canPatchConsoleOperatorConfig],\n  );\n};\n\nexport const ConsolePluginStatus: React.FC<ConsolePluginStatusProps> = ({\n  status,\n  errorMessage,\n}) => <Status status={status} title={status === 'Failed' ? errorMessage : undefined} />;\n\nexport const ConsolePluginEnabledStatus: React.FC<ConsolePluginEnabledStatusProps> = ({\n  pluginName,\n  enabled,\n}) => {\n  const { t } = useTranslation();\n\n  const {\n    consoleOperatorConfig,\n    consoleOperatorConfigLoaded,\n    canPatchConsoleOperatorConfig,\n  } = useConsoleOperatorConfigData();\n\n  const labels = enabled ? t('console-app~Enabled') : t('console-app~Disabled');\n\n  return (\n    <>\n      {consoleOperatorConfigLoaded && canPatchConsoleOperatorConfig && !developmentMode ? (\n        <Button\n          data-test=\"edit-console-plugin\"\n          type=\"button\"\n          isInline\n          onClick={() =>\n            consolePluginModal({\n              consoleOperatorConfig,\n              pluginName,\n              trusted: false,\n            })\n          }\n          variant=\"link\"\n        >\n          {labels}\n          <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n        </Button>\n      ) : (\n        <>{labels}</>\n      )}\n    </>\n  );\n};\n\nexport const ConsolePluginCSPStatus: React.FC<ConsolePluginCSPStatusProps> = ({\n  hasViolations,\n}) => {\n  const { t } = useTranslation();\n\n  return hasViolations ? (\n    <>\n      <YellowExclamationTriangleIcon\n        className=\"co-icon-space-r\"\n        title={t(\n          \"console-app~This plugin might have violated the Console Content Security Policy. Refer to the browser's console logs for details.\",\n        )}\n      />{' '}\n      {t('console-app~Yes')}\n    </>\n  ) : (\n    <>\n      <GreenCheckCircleIcon className=\"co-icon-space-r\" /> {t('console-app~No')}\n    </>\n  );\n};\n\nconst ConsolePluginsTable: React.FC<ConsolePluginsTableProps> = ({ obj, rows, loaded }) => {\n  const { t } = useTranslation();\n\n  const [sortBy, setSortBy] = React.useState<ISortBy>(() => ({\n    index: 0,\n    direction: SortByDirection.asc,\n  }));\n\n  const onSort = React.useCallback<OnSort>((_event, index, direction) => {\n    setSortBy({ index, direction });\n  }, []);\n\n  const columns = React.useMemo<TableColumn[]>(\n    () => [\n      {\n        id: 'name',\n        name: t('console-app~Name'),\n        sortable: true,\n      },\n      {\n        id: 'version',\n        name: t('console-app~Version'),\n      },\n      {\n        id: 'description',\n        name: t('console-app~Description'),\n      },\n      {\n        id: 'status',\n        name: t('console-app~Status'),\n        sortable: true,\n      },\n      {\n        id: 'enabled',\n        name: t('console-app~Enabled'),\n        sortable: true,\n      },\n      {\n        id: 'csp-violations',\n        name: t('console-app~CSP violations'),\n      },\n    ],\n    [t],\n  );\n\n  const compare = React.useCallback<Comparator<ConsolePluginTableRow>>(\n    (a, b) => {\n      const { index, direction } = sortBy;\n      const { id } = columns[index];\n      const desc = direction === SortByDirection.desc;\n      const left = (desc ? b : a)[id];\n      const right = (desc ? a : b)[id];\n      switch (id) {\n        case 'enabled':\n          return boolComparator(left, right);\n        default:\n          return localeComparator(left, right);\n      }\n    },\n    [columns, sortBy],\n  );\n\n  const sortedRows = React.useMemo(() => rows.sort(compare), [rows, compare]);\n\n  return !loaded ? (\n    <LoadingBox />\n  ) : (\n    <div className=\"co-m-pane__body\">\n      {obj.spec?.managementState === 'Unmanaged' && (\n        <Alert\n          className=\"co-alert\"\n          variant=\"info\"\n          isInline\n          title={t(\n            'console-app~Console operator spec.managementState is unmanaged. Changes to plugins will have no effect.',\n          )}\n        />\n      )}\n      <RequireCreatePermission model={ConsolePluginModel}>\n        <div className=\"co-m-pane__createLink--no-title\">\n          <Link\n            className=\"co-m-primary-action\"\n            to={`/k8s/cluster/${consolePluginConcatenatedGVK}/~new`}\n          >\n            <Button variant=\"primary\" id=\"yaml-create\" data-test=\"item-create\">\n              {t('public~Create {{label}}', { label: t(ConsolePluginModel.label) })}\n            </Button>\n          </Link>\n        </div>\n      </RequireCreatePermission>\n      {rows.length ? (\n        <Table aria-label=\"console plugins table\" ouiaId=\"ConsolePluginsTable\">\n          <Thead>\n            <Tr>\n              {columns.map(({ id, name, sortable }, columnIndex) => (\n                <Th key={id} sort={sortable ? { sortBy, onSort, columnIndex } : null}>\n                  {name}\n                </Th>\n              ))}\n            </Tr>\n          </Thead>\n          <Tbody>\n            {sortedRows.map(\n              ({ name, version, description, status, enabled, errorMessage, hasCSPViolations }) => (\n                <Tr key={name}>\n                  <Td dataLabel={columns[0].id}>\n                    {!developmentMode ? (\n                      <ResourceLink groupVersionKind={consolePluginGVK} name={name} hideIcon />\n                    ) : (\n                      name\n                    )}\n                  </Td>\n                  <Td dataLabel={columns[1].id}>{version || DASH}</Td>\n                  <Td dataLabel={columns[2].id}>{description || DASH}</Td>\n                  <Td dataLabel={columns[3].id}>\n                    <ConsolePluginStatus status={status} errorMessage={errorMessage} />\n                  </Td>\n                  <Td dataLabel={columns[4].id}>\n                    <ConsolePluginEnabledStatus pluginName={name} enabled={enabled} />\n                  </Td>\n                  <Td dataLabel={columns[5].id}>\n                    <ConsolePluginCSPStatus hasViolations={hasCSPViolations ?? false} />\n                  </Td>\n                </Tr>\n              ),\n            )}\n          </Tbody>\n        </Table>\n      ) : (\n        <EmptyBox label={t('console-app~Console plugins')} />\n      )}\n    </div>\n  );\n};\n\nconst DevPluginsPage: React.FCC<ConsoleOperatorConfigPageProps> = (props) => {\n  const [pluginInfo, pluginInfoLoaded] = useDynamicPluginInfo();\n  const rows = React.useMemo<ConsolePluginTableRow[]>(\n    () =>\n      !pluginInfoLoaded\n        ? []\n        : pluginInfo.filter(isLoadedDynamicPluginInfo).map((plugin) => ({\n            name: plugin.metadata.name,\n            version: plugin.metadata.version,\n            description: plugin.metadata?.customProperties?.console?.description,\n            enabled: plugin.enabled,\n            status: plugin.status,\n            hasCSPViolations: plugin.hasCSPViolations,\n          })),\n    [pluginInfo, pluginInfoLoaded],\n  );\n  return <ConsolePluginsTable {...props} rows={rows} loaded={pluginInfoLoaded} />;\n};\n\nconst PluginsPage: React.FC<ConsoleOperatorConfigPageProps> = (props) => {\n  const [pluginInfo, pluginInfoLoaded] = useDynamicPluginInfo();\n  const [consolePlugins, consolePluginsLoaded] = useK8sWatchResource<ConsolePluginKind[]>({\n    isList: true,\n    kind: referenceForModel(ConsolePluginModel),\n  });\n  const enabledPlugins = React.useMemo(() => props?.obj?.spec?.plugins ?? [], [\n    props?.obj?.spec?.plugins,\n  ]);\n  const rows = React.useMemo<ConsolePluginTableRow[]>(() => {\n    if (!pluginInfoLoaded || !consolePluginsLoaded) {\n      return [];\n    }\n    return consolePlugins.map((plugin) => {\n      const pluginName = plugin?.metadata?.name;\n      const enabled = enabledPlugins.includes(pluginName);\n      const loadedPluginInfo = pluginInfo\n        .filter(isLoadedDynamicPluginInfo)\n        .find((i) => i?.metadata?.name === pluginName);\n      const notLoadedPluginInfo = pluginInfo\n        .filter(isNotLoadedDynamicPluginInfo)\n        .find((i) => i?.pluginName === pluginName);\n      if (loadedPluginInfo) {\n        return {\n          name: plugin?.metadata?.name,\n          version: loadedPluginInfo?.metadata?.version,\n          description: loadedPluginInfo?.metadata?.customProperties?.console?.description,\n          enabled,\n          status: loadedPluginInfo?.status,\n          hasCSPViolations: loadedPluginInfo?.hasCSPViolations,\n        };\n      }\n      return {\n        name: plugin?.metadata?.name,\n        enabled,\n        status: notLoadedPluginInfo?.status,\n        errorMessage:\n          notLoadedPluginInfo?.status === 'Failed' ? notLoadedPluginInfo?.errorMessage : undefined,\n        errorCause:\n          notLoadedPluginInfo?.status === 'Failed'\n            ? notLoadedPluginInfo?.errorCause?.toString()\n            : undefined,\n      };\n    });\n  }, [pluginInfoLoaded, consolePluginsLoaded, consolePlugins, pluginInfo, enabledPlugins]);\n  return (\n    <ConsolePluginsTable {...props} rows={rows} loaded={pluginInfoLoaded && consolePluginsLoaded} />\n  );\n};\n\nconst ConsoleOperatorConfigPluginsPage: React.FC<ConsoleOperatorConfigPageProps> = developmentMode\n  ? DevPluginsPage\n  : PluginsPage;\n\nexport const ConsoleOperatorConfigDetailsPage: React.FC<React.ComponentProps<\n  typeof DetailsPage\n>> = (props) => {\n  const location = useLocation();\n\n  const pages = [\n    navFactory.details(DetailsForKind),\n    navFactory.editYaml(),\n    {\n      href: 'console-plugins',\n      // t('console-app~Console plugins')\n      nameKey: 'console-app~Console plugins',\n      component: ConsoleOperatorConfigPluginsPage,\n    },\n  ];\n\n  const menuActions: KebabAction[] = [\n    () => ({\n      // t('console-app~Customize')\n      labelKey: 'console-app~Customize',\n      labelKind: { kind: ConsoleOperatorConfigModel.kind },\n      dataTest: `Customize`,\n      href: '/cluster-configuration',\n      accessReview: asAccessReview(\n        ConsoleOperatorConfigModel,\n        { spec: { name: 'cluster' } },\n        'patch',\n      ),\n    }),\n  ];\n\n  return (\n    <DetailsPage\n      {...props}\n      kind={consoleOperatorConfigReference}\n      pages={pages}\n      menuActions={menuActions}\n      breadcrumbsFor={() =>\n        breadcrumbsForGlobalConfig(ConsoleOperatorConfigModel.label, location.pathname)\n      }\n    />\n  );\n};\n\nexport type ConsolePluginTableRow = {\n  name: string;\n  version?: string;\n  description?: string;\n  status: DynamicPluginInfo['status'];\n  enabled: boolean;\n  errorMessage?: string;\n  hasCSPViolations?: boolean;\n};\n\ntype TableColumn = {\n  id: string;\n  name: string;\n  sortable?: boolean;\n};\n\ntype ConsolePluginsTableProps = ConsoleOperatorConfigPageProps & {\n  rows: ConsolePluginTableRow[];\n  loaded: boolean;\n};\n\ntype ConsolePluginStatusProps = {\n  status: DynamicPluginInfo['status'];\n  errorMessage?: string;\n};\n\ntype ConsolePluginEnabledStatusProps = {\n  pluginName: string;\n  enabled: boolean;\n};\n\ntype ConsolePluginCSPStatusProps = {\n  hasViolations: boolean;\n};\n\ntype ConsoleOperatorConfigPageProps = {\n  obj: K8sResourceKind;\n};\n","import * as React from 'react';\nimport { DetailsItemComponentProps } from '@console/dynamic-plugin-sdk/src/extensions/details-item';\nimport { usePluginStore } from '@console/plugin-sdk/src/api/usePluginStore';\nimport { DASH } from '@console/shared/src/constants';\nimport { ConsolePluginStatus } from './ConsoleOperatorConfig';\n\nconst ConsolePluginStatusDetail: React.FC<DetailsItemComponentProps> = ({ obj }) => {\n  const pluginStore = usePluginStore();\n  const pluginName = React.useMemo(() => obj?.metadata?.name, [obj?.metadata?.name]);\n\n  const pluginInfo = React.useMemo(() => pluginStore.findDynamicPluginInfo(pluginName), [\n    pluginStore,\n    pluginName,\n  ]);\n\n  return pluginInfo ? (\n    <ConsolePluginStatus\n      status={pluginInfo.status}\n      errorMessage={pluginInfo.status === 'Failed' ? pluginInfo.errorMessage : undefined}\n    />\n  ) : (\n    <>{DASH}</>\n  );\n};\n\nexport default ConsolePluginStatusDetail;\n","import * as SemVer from 'semver';\n\n/**\n * A null safe wrapper for String.localeCompare. Sorts strings alphabetically in ascending order,\n * using the current JS runtime locale.\n */\nexport const localeComparator: Comparator<string> = (a, b) => (a || '').localeCompare(b || '');\n\n/**\n * Determines if two boolean values are equivalent. Sorts true before false.\n */\nexport const boolComparator: Comparator<boolean> = (a, b) => (a ? 0 : 1) - (b ? 0 : 1);\n\n/**\n * Wrapper for SemVer.compare function. Sorts semver strings in ascending order. Invalid semver\n * strings will be sorted last.\n */\nexport const semVerComparator: Comparator<string | SemVer.SemVer> = (a, b) => SemVer.compare(a, b);\n\n/**\n * Same as semVerCompare, but is more forgiving for not-quite-valid semver strings. Sorts strings in\n * ascending order based on the loosely interpreted semver value.\n */\nexport const looseSemVerComparator: Comparator<string | SemVer.SemVer> = (a, b) =>\n  SemVer.compare(a, b, true);\n\n/**\n * A null safe function that can be passed directly to Array.prototype.sort.\n */\nexport type Comparator<T extends any = any> = (a: T, b: T) => number;\n"],"sourceRoot":""}