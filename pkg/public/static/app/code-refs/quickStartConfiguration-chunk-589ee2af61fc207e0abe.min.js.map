{"version":3,"sources":["webpack:///./packages/console-app/src/components/quick-starts/QuickStartConfiguration.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/useConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/patchConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/FormLayout.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/LoadError.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/SaveStatus.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/index.ts"],"names":["Item","id","quickStart","style","display","alignItems","groupVersionKind","spec","displayName","metadata","name","readonly","t","fireTelemetryEvent","allQuickStarts","allQuickStartsLoaded","allQuickStartsError","consoleConfig","consoleConfigLoaded","consoleConfigError","disabled","setDisabled","customization","quickStarts","enabledOptions","filter","includes","sort","quickStartA","quickStartB","displayNameA","displayNameB","localeCompare","map","key","disabledOptions","quickStartsByName","reduce","acc","sortedIds","idA","idB","saveStatus","setSaveStatus","save","customize","status","patch","then","catch","error","title","availableOptionsTitle","chosenOptionsTitle","isSearchable","availableOptions","chosenOptions","onListChange","_event","newEnabledOptions","newDisabledOptions","node","props","filterOption","option","input","toLocaleLowerCase","isDisabled","isList","resource","url","headers","Accept","body","JSON","stringify","children","isHorizontal","isWidthLimited","className","form","modifiers","horizontal","limitWidth","variant","isInline","message","toString","SaveStatus"],"mappings":"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","file":"app/code-refs/quickStartConfiguration-chunk-589ee2af61fc207e0abe.min.js","sourcesContent":["import * as React from 'react';\nimport { QuickStart } from '@patternfly/quickstarts';\nimport { DualListSelector, FormSection } from '@patternfly/react-core';\nimport * as fuzzy from 'fuzzysearch';\nimport { useTranslation } from 'react-i18next';\nimport {\n  getGroupVersionKindForModel,\n  ResourceIcon,\n} from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { useTelemetry } from '@console/shared/src';\nimport {\n  useDebounceCallback,\n  useConsoleOperatorConfig,\n  patchConsoleOperatorConfig,\n  LoadError,\n  SaveStatus,\n  SaveStatusProps,\n} from '@console/shared/src/components/cluster-configuration';\nimport { QuickStartModel } from '../../models';\nimport { getQuickStartNameRef, useQuickStarts } from './utils/useQuickStarts';\n\ntype DisabledQuickStartsConsoleConfig = K8sResourceKind & {\n  spec: {\n    customization?: {\n      quickStarts?: {\n        disabled: string[];\n      };\n    };\n  };\n};\n\ntype ItemProps = { id: string; quickStart?: QuickStart };\n\nconst Item: React.FC<ItemProps> = ({ id, quickStart }) => (\n  <div style={{ display: 'flex', alignItems: 'center' }}>\n    {quickStart ? (\n      <>\n        <ResourceIcon groupVersionKind={getGroupVersionKindForModel(QuickStartModel)} />\n        <div>\n          <div>{quickStart.spec.displayName || quickStart.metadata.name}</div>\n          {quickStart.spec.displayName ? <div>{id}</div> : null}\n        </div>\n      </>\n    ) : (\n      id\n    )}\n  </div>\n);\n\nconst QuickStartConfiguration: React.FC<{ readonly: boolean }> = ({ readonly }) => {\n  const { t } = useTranslation();\n  const fireTelemetryEvent = useTelemetry();\n\n  // All available quick starts\n  const [allQuickStarts, allQuickStartsLoaded, allQuickStartsError] = useQuickStarts(false);\n\n  // Current configuration\n  const [consoleConfig, consoleConfigLoaded, consoleConfigError] = useConsoleOperatorConfig<\n    DisabledQuickStartsConsoleConfig\n  >();\n  const [disabled, setDisabled] = React.useState<string[]>();\n  React.useEffect(() => {\n    if (consoleConfig && consoleConfigLoaded && !disabled) {\n      setDisabled(consoleConfig?.spec?.customization?.quickStarts?.disabled || []);\n    }\n  }, [consoleConfig, consoleConfigLoaded, disabled]);\n\n  // Calculate options\n  const enabledOptions = React.useMemo<React.ReactElement<ItemProps>[]>(() => {\n    if (!consoleConfigLoaded || !allQuickStartsLoaded || allQuickStartsError || !disabled) {\n      return [];\n    }\n    return allQuickStarts\n      .filter((quickStart) => !disabled || !disabled.includes(getQuickStartNameRef(quickStart)))\n      .sort((quickStartA, quickStartB) => {\n        const displayNameA = quickStartA.spec.displayName || quickStartA.metadata.name;\n        const displayNameB = quickStartB.spec.displayName || quickStartB.metadata.name;\n        return displayNameA.localeCompare(displayNameB);\n      })\n      .map((quickStart) => (\n        <Item\n          key={quickStart.metadata.name}\n          id={getQuickStartNameRef(quickStart)}\n          quickStart={quickStart}\n        />\n      ));\n  }, [allQuickStarts, allQuickStartsError, allQuickStartsLoaded, consoleConfigLoaded, disabled]);\n  const disabledOptions = React.useMemo<React.ReactElement<ItemProps>[]>(() => {\n    if (!disabled) {\n      return [];\n    }\n    const quickStartsByName = allQuickStarts.reduce<Record<string, QuickStart>>(\n      (acc, quickStart) => {\n        acc[getQuickStartNameRef(quickStart)] = quickStart;\n        return acc;\n      },\n      {},\n    );\n    const sortedIds = [...disabled];\n    sortedIds.sort((idA, idB) => {\n      const quickStartA = quickStartsByName[idA];\n      const quickStartB = quickStartsByName[idB];\n      const displayNameA = quickStartA?.spec.displayName || quickStartA?.metadata.name || idA;\n      const displayNameB = quickStartB?.spec.displayName || quickStartB?.metadata.name || idB;\n      return displayNameA.localeCompare(displayNameB);\n    });\n    return sortedIds.map((id) => <Item key={id} id={id} quickStart={quickStartsByName[id]} />);\n  }, [allQuickStarts, disabled]);\n\n  // Save the latest value (disabled string array)\n  const [saveStatus, setSaveStatus] = React.useState<SaveStatusProps>();\n  const save = useDebounceCallback(() => {\n    fireTelemetryEvent('Console cluster configuration changed', {\n      customize: 'Quick Starts',\n      disabled,\n    });\n    setSaveStatus({ status: 'in-progress' });\n\n    const patch: DisabledQuickStartsConsoleConfig = {\n      spec: {\n        customization: {\n          quickStarts: {\n            disabled,\n          },\n        },\n      },\n    };\n    patchConsoleOperatorConfig(patch)\n      .then(() => setSaveStatus({ status: 'successful' }))\n      .catch((error) => setSaveStatus({ status: 'error', error }));\n  }, 2000);\n\n  // Extract disabled string array from Items\n  const onListChange = (\n    _event,\n    newEnabledOptions: React.ReactElement<ItemProps>[],\n    newDisabledOptions: React.ReactElement<ItemProps>[],\n  ) => {\n    setDisabled(newDisabledOptions.map((node) => node.props.id));\n    setSaveStatus({ status: 'pending' });\n    save();\n  };\n\n  const filterOption = (option: React.ReactElement<ItemProps>, input: string): boolean => {\n    const displayName =\n      option.props.quickStart?.spec.displayName ||\n      option.props.quickStart?.metadata.name ||\n      option.props.id;\n    return fuzzy(input.toLocaleLowerCase(), displayName.toLocaleLowerCase());\n  };\n\n  return (\n    <FormSection title={t('console-app~Quick starts')} data-test=\"quickstarts form-section\">\n      <DualListSelector\n        availableOptionsTitle={t('console-app~Enabled')}\n        chosenOptionsTitle={t('console-app~Disabled')}\n        isSearchable\n        availableOptions={enabledOptions}\n        chosenOptions={disabledOptions}\n        onListChange={onListChange}\n        filterOption={filterOption}\n        isDisabled={readonly || !allQuickStartsLoaded || !consoleConfigLoaded || consoleConfigError}\n      />\n\n      <LoadError error={consoleConfigError} />\n      <SaveStatus {...saveStatus} />\n    </FormSection>\n  );\n};\n\nexport default QuickStartConfiguration;\n","import { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sWatchResource';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\nconst useConsoleOperatorConfig = <R extends K8sResourceKind>() => {\n  return useK8sWatchResource<R>({\n    groupVersionKind: getGroupVersionKindForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n};\n\nexport default useConsoleOperatorConfig;\n","import { consoleFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch/console-fetch';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind, resourceURL } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\n/**\n * JSON Merge Patch instead of JSON patch to update also properties that doesn't exist yet.\n *\n * See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment\n */\nconst patchConsoleOperatorConfig = <R extends K8sResourceKind>(resource: R): Promise<R> => {\n  const url = resourceURL(ConsoleOperatorConfigModel, { name: CONSOLE_OPERATOR_CONFIG_NAME });\n  return consoleFetchJSON(url, 'PATCH', {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/merge-patch+json;charset=UTF-8',\n    },\n    body: JSON.stringify(resource),\n  });\n};\n\nexport default patchConsoleOperatorConfig;\n","import * as React from 'react';\nimport { FormProps } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\n\nexport type FormLayoutProps = Pick<FormProps, 'children' | 'isHorizontal' | 'isWidthLimited'>;\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  children,\n  isHorizontal = false,\n  isWidthLimited = true,\n}) => {\n  return (\n    <div\n      className={css(\n        formStyles.form,\n        isHorizontal && formStyles.modifiers.horizontal,\n        isWidthLimited && formStyles.modifiers.limitWidth,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default FormLayout;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadError: React.FC<{ error?: Error }> = ({ error }) => {\n  const { t } = useTranslation();\n  if (!error) {\n    return null;\n  }\n  return (\n    <Alert variant=\"warning\" isInline title={t('console-shared~Could not load configuration.')}>\n      {error.message?.toString?.() || error.toString?.()}\n    </Alert>\n  );\n};\n\nexport default LoadError;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type SaveStatusProps = {\n  status: 'pending' | 'in-progress' | 'successful' | 'error';\n  error?: Error;\n};\n\nexport const SaveStatus: React.FC<SaveStatusProps> = ({ status, error }) => {\n  const { t } = useTranslation();\n  if (status === 'successful') {\n    return (\n      <Alert\n        variant=\"success\"\n        data-test=\"success-alert\"\n        isInline\n        title={t('console-shared~Saved.')}\n      >\n        {t(\n          'console-shared~This config update requires a console rollout, this can take up to a minute and require a browser refresh.',\n        )}\n      </Alert>\n    );\n  }\n  if (status === 'error') {\n    return (\n      <Alert variant=\"danger\" isInline title={t('console-shared~Could not save configuration.')}>\n        {error?.message?.toString?.() || error?.toString?.()}\n      </Alert>\n    );\n  }\n  return null;\n};\n","export { useDebounceCallback } from '../../hooks/debounce';\n\nexport { default as useConsoleOperatorConfig } from './useConsoleOperatorConfig';\nexport { default as patchConsoleOperatorConfig } from './patchConsoleOperatorConfig';\nexport { default as FormLayout } from './FormLayout';\nexport { default as LoadError } from './LoadError';\nexport * from './SaveStatus';\nexport * from './path-utils';\n"],"sourceRoot":""}