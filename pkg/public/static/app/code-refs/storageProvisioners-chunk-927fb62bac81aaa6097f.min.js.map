{"version":3,"sources":["webpack:///./packages/console-app/src/components/storage/StorageClassProviders.ts"],"names":["formatToString","value","toString","isAWSIopsPerGBVisible","params","type","isAWSKmsKeyIdVisible","encrypted","isStorageOsAdminSecretNSRequired","adminSecretName","validateAWSIopsPerGB","iopsPerGB","match","validateGcePdZone","zone","zones","validateGcePdZones","validateGCEReplicationType","validateGlusterGidMin","gidMin","validateGlusterGidMax","gidMax","validatePortworxBlockSize","block_size","validatePorworxReplicas","repl","validatePortworxSnapshotInterval","validatePortworxAggregationLevel","aggregation_level"],"mappings":"2FAIA,uxBAAO,MAAMA,EAAkBC,GAAUA,aAAK,EAALA,EAAOC,WAEnCC,EAAyBC,IAAsB,MAAC,MAAwB,SAAZ,QAAZ,EAAAA,aAAM,EAANA,EAAQC,YAAI,eAAEJ,QAC9DK,EAAwBF,IAAsB,QAAC,OAAwB,QAAxB,EAAiB,QAAjB,EAAAA,aAAM,EAANA,EAAQG,iBAAS,eAAEN,aAAK,UAEvEO,EAAoCJ,I,QAC/C,MAAMK,EAAgD,QAA9B,EAAuB,QAAvB,EAAAL,aAAM,EAANA,EAAQK,uBAAe,eAAER,aAAK,QAAI,KAC1D,OAA2B,OAApBQ,GAAgD,KAApBA,GAGxBC,EAAwBN,GAC/BA,EAAOO,UAAUV,QAAUG,EAAOO,UAAUV,MAAMW,MAAM,SAEnD,4CAEF,KAGIC,EAAqBT,I,QAChC,MAA0B,KAAtBA,EAAOU,KAAKb,OAAiD,MAAZ,QAApB,EAAa,QAAb,EAAAG,aAAM,EAANA,EAAQW,aAAK,eAAEd,aAAK,QAAI,IAEhD,0EAEF,MAGIe,EAAsBZ,I,QACjC,MAA2B,KAAvBA,EAAOW,MAAMd,OAAgD,MAAZ,QAAnB,EAAY,QAAZ,EAAAG,aAAM,EAANA,EAAQU,YAAI,eAAEb,aAAK,QAAI,IAEhD,0EAEF,MAGIgB,EAA8Bb,I,QACzC,MAAyC,gBAArCA,EAAO,oBAAoBH,OAA2D,MAAZ,QAAnB,EAAY,QAAZ,EAAAG,aAAM,EAANA,EAAQU,YAAI,eAAEb,aAAK,QAAI,IAEzE,uGAEF,MAGIiB,EAAyBd,GACR,KAAxBA,EAAOe,OAAOlB,OAAiBG,EAAOe,OAAOlB,MAAMW,MAAM,cAItD,KAFE,qCAKEQ,EAAyBhB,GACR,KAAxBA,EAAOiB,OAAOpB,OAAiBG,EAAOiB,OAAOpB,MAAMW,MAAM,cAItD,KAFE,qCAKEU,EAA6BlB,GACR,KAA5BA,EAAOmB,WAAWtB,OAAiBG,EAAOmB,WAAWtB,MAAMW,MAAM,cAI9D,KAFE,iDAKEY,EAA2BpB,GACZ,KAAtBA,EAAOqB,KAAKxB,OAAiBG,EAAOqB,KAAKxB,MAAMW,MAAM,cAIlD,KAFE,kDAKEc,EAAoCtB,GACrB,KAAtBA,EAAOqB,KAAKxB,OAAiBG,EAAOqB,KAAKxB,MAAMW,MAAM,cAIlD,KAFE,iDAKEe,EAAoCvB,GAEV,KAAnCA,EAAOwB,kBAAkB3B,OACxBG,EAAOwB,kBAAkB3B,MAAMW,MAAM,cAKjC,KAFE","file":"app/code-refs/storageProvisioners-chunk-927fb62bac81aaa6097f.min.js","sourcesContent":["import { ProvisionerDetails } from 'packages/console-dynamic-plugin-sdk';\n\ntype Parameters = ProvisionerDetails['parameters'];\n\nexport const formatToString = (value) => value?.toString();\n\nexport const isAWSIopsPerGBVisible = (params: Parameters) => params?.type?.value === 'io1';\nexport const isAWSKmsKeyIdVisible = (params: Parameters) => params?.encrypted?.value ?? false;\n\nexport const isStorageOsAdminSecretNSRequired = (params: Parameters) => {\n  const adminSecretName = params?.adminSecretName?.value ?? null;\n  return adminSecretName !== null && adminSecretName !== '';\n};\n\nexport const validateAWSIopsPerGB = (params: Parameters) => {\n  if (params.iopsPerGB.value && !params.iopsPerGB.value.match(/^\\d+$/)) {\n    // t(''console-app~IOPS per GiB must be a number')\n    return 'console-app~IOPS per GiB must be a number';\n  }\n  return null;\n};\n\nexport const validateGcePdZone = (params: Parameters) => {\n  if (params.zone.value !== '' && (params?.zones?.value ?? '') !== '') {\n    // t('console-app~Zone and zones parameters must not be used at the same time')\n    return 'console-app~Zone and zones parameters must not be used at the same time';\n  }\n  return null;\n};\n\nexport const validateGcePdZones = (params: Parameters) => {\n  if (params.zones.value !== '' && (params?.zone?.value ?? '') !== '') {\n    // t('console-app~Zone and zones parameters must not be used at the same time')\n    return 'console-app~Zone and zones parameters must not be used at the same time';\n  }\n  return null;\n};\n\nexport const validateGCEReplicationType = (params: Parameters) => {\n  if (params['replication-type'].value === 'regional-pd' && (params?.zone?.value ?? '') !== '') {\n    // t('console-app~Zone cannot be specified when replication type regional-pd is chosen. Use zones instead.')\n    return 'console-app~Zone cannot be specified when replication type regional-pd is chosen. Use zones instead.';\n  }\n  return null;\n};\n\nexport const validateGlusterGidMin = (params: Parameters) => {\n  if (params.gidMin.value !== '' && !params.gidMin.value.match(/^[1-9]\\d*$/)) {\n    // t('console-app~GID min must be number')\n    return 'console-app~GID min must be number';\n  }\n  return null;\n};\n\nexport const validateGlusterGidMax = (params: Parameters) => {\n  if (params.gidMax.value !== '' && !params.gidMax.value.match(/^[1-9]\\d*$/)) {\n    // t('console-app~GID max must be number')\n    return 'console-app~GID max must be number';\n  }\n  return null;\n};\n\nexport const validatePortworxBlockSize = (params: Parameters) => {\n  if (params.block_size.value !== '' && !params.block_size.value.match(/^[1-9]\\d*$/)) {\n    // t('console-app~Snapshot interval must be a number')\n    return 'console-app~Snapshot interval must be a number';\n  }\n  return null;\n};\n\nexport const validatePorworxReplicas = (params: Parameters) => {\n  if (params.repl.value !== '' && !params.repl.value.match(/^[1-9]\\d*$/)) {\n    // t('console-app~Number of replicas must be a number')\n    return 'console-app~Number of replicas must be a number';\n  }\n  return null;\n};\n\nexport const validatePortworxSnapshotInterval = (params: Parameters) => {\n  if (params.repl.value !== '' && !params.repl.value.match(/^[1-9]\\d*$/)) {\n    // t('console-app~Snapshot interval must be a number')\n    return 'console-app~Snapshot interval must be a number';\n  }\n  return null;\n};\n\nexport const validatePortworxAggregationLevel = (params: Parameters) => {\n  if (\n    params.aggregation_level.value !== '' &&\n    !params.aggregation_level.value.match(/^[1-9]\\d*$/)\n  ) {\n    // t('console-app~Aggregation level must be a number')\n    return 'console-app~Aggregation level must be a number';\n  }\n  return null;\n};\n"],"sourceRoot":""}