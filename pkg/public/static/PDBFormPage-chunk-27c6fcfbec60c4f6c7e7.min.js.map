{"version":3,"sources":["webpack:///./packages/console-app/src/components/pdb/PDBForm.tsx","webpack:///./packages/console-app/src/components/pdb/AvailabilityRequirementPopover.tsx","webpack:///./public/components/create-yaml.tsx","webpack:///./packages/console-app/src/components/pdb/PDBFormPage.tsx","webpack:///./packages/console-shared/src/components/synced-editor/index.tsx","webpack:///./packages/console-app/src/components/pdb/pdb-models.ts"],"names":["checkAvailabilityRequirementValue","formValues","replicasCount","maxUnavailable","minAvailable","minAvailableToStr","String","includes","parseInt","slice","formData","onChange","existingResource","t","initialFormValues","setFormValues","error","setError","inProgress","setInProgress","requirement","setRequirement","isDisabled","setDisabled","labels","setLabels","matchingSelector","setMatchingSelector","isOpen","setOpen","items","selectedRequirement","getSelectedRequirement","onFormValuesChange","values","name","handleAvailabilityRequirementKeyChange","value","className","onSubmit","event","preventDefault","then","push","namespace","catch","err","message","hasGutter","label","isRequired","fieldId","type","id","placeholder","_event","autoFocus","labelIcon","headingLevel","l","labelValues","filterMatchLabels","filter","f","filterMatchExpressions","selector","matchLabels","objectify","matchExpressions","arrayToArrayOfObjects","handleSelectorChange","tags","arrayify","arrayObjectsToArrayStrings","labelClassName","variant","isFilled","onOpenChange","open","selected","onSelect","toggle","toggleRef","ref","isExpanded","isFullWidth","onClick","Object","keys","map","key","toString","validated","warning","default","title","isInline","errorMessage","goBack","href","text","CreateYAMLInner","props","params","kindsInFlight","kindObj","hideHeader","resourceObjPath","isCreate","templateExtensions","resolvedTemplates","e","properties","model","kind","yamlTemplates","ns","template","getIn","obj","metadata","namespaced","crd","apiVersion","spec","header","objLabel","labelKey","loader","c","DroppableEditYAML","initialResource","create","CreateYAML_","CreateYAML","EditYAMLPage","resources","isList","prop","wrapperProps","data","EditYAML","displayName","PDBFormPage","location","match","plural","appName","isExact","url","path","URLSearchParams","search","get","groupVersionKind","resourceRef","group","version","resource","loadedResource","pdbResources","loadedPDBResource","apiGroup","formHelpText","yamlHelpText","initialPDB","helpText","setHelpText","k8sObj","stillLoading","context","formContext","replicas","yamlContext","FormEditor","initialData","initialType","Form","onChangeEditorType","YAMLEditor","initialYAML","yamlData","skipInvalid","lastViewUserSettingKey","displayConversionError","YAML_KEY_ORDER","YAML_TO_JS_OPTIONS","sortKeys","a","b","SyncedEditor","prune","setFormData","yaml","setYAML","switchError","setSwitchError","yamlWarning","setYAMLWarning","editorType","setEditorType","loaded","handleFormDataChange","newFormData","changeEditorType","newType","YAML","undefined","newYAML","js","intOrString","val","test","pdbToK8sResource","from","existingRes","res","omitRequirementFromExistingRes","initialValuesFromK8sResource","patchPDB","patch","op","mergeInitialYAMLWithExistingResource"],"mappings":"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","file":"PDBFormPage-chunk-27c6fcfbec60c4f6c7e7.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  TextInput,\n  FormGroup,\n  Text,\n  Title,\n  ValidatedOptions,\n  Select,\n  SelectList,\n  SelectOption,\n  Stack,\n  StackItem,\n  Split,\n  SplitItem,\n  HelperTextItem,\n  HelperText,\n  FormHelperText,\n  FormAlert,\n  Alert,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { MatchLabels } from '@console/dynamic-plugin-sdk/src/api/common-types';\nimport {\n  ButtonBar,\n  history,\n  SelectorInput,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport { FieldLevelHelp } from '@console/internal/components/utils/field-level-help';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { PodDisruptionBudgetModel } from '../../models';\nimport AvailabilityRequirementPopover from './AvailabilityRequirementPopover';\nimport { pdbToK8sResource, initialValuesFromK8sResource, patchPDB, FormValues } from './pdb-models';\nimport { PodDisruptionBudgetKind } from './types';\n\nconst getSelectedRequirement = (requirement: string, items: RequirementItems): string => {\n  if (requirement === 'minAvailable') {\n    return items.minAvailable;\n  }\n  if (requirement === 'maxUnavailable') {\n    return items.maxUnavailable;\n  }\n  return i18next.t('console-app~Requirement');\n};\n\nfunction checkAvailabilityRequirementValue(formValues: FormValues, replicasCount: number) {\n  const { maxUnavailable, minAvailable } = formValues;\n  const minAvailableToStr = String(minAvailable);\n\n  if (minAvailableToStr.includes('%')) {\n    return parseInt(minAvailableToStr.slice(0, -1), 10) >= 100;\n  }\n\n  return (\n    parseInt(String(maxUnavailable), 10) === 0 || parseInt(minAvailableToStr, 10) >= replicasCount\n  );\n}\n\nconst PDBForm: React.FC<PodDisruptionBudgetFormProps> = ({\n  formData,\n  onChange,\n  existingResource,\n  replicasCount,\n}) => {\n  const { t } = useTranslation();\n  const initialFormValues = initialValuesFromK8sResource(formData);\n  const [formValues, setFormValues] = React.useState(initialFormValues);\n  const [error, setError] = React.useState('');\n  const [inProgress, setInProgress] = React.useState(false);\n  const [requirement, setRequirement] = React.useState('');\n  const [isDisabled, setDisabled] = React.useState(true);\n  const [labels, setLabels] = React.useState([]);\n  const [matchingSelector, setMatchingSelector] = React.useState<PodDisruptionBudgetKind>(null);\n  const [isOpen, setOpen] = React.useState(false);\n  const items: RequirementItems = React.useMemo(\n    () => ({\n      maxUnavailable: t('console-app~maxUnavailable'),\n      minAvailable: t('console-app~minAvailable'),\n    }),\n    [t],\n  );\n  const selectedRequirement = getSelectedRequirement(formValues.requirement, items);\n\n  const onFormValuesChange = React.useCallback(\n    (values) => {\n      setFormValues(values);\n      onChange(pdbToK8sResource(values, existingResource));\n    },\n    [onChange, existingResource],\n  );\n\n  React.useEffect(() => {\n    setRequirement(formValues.requirement);\n\n    if (formValues.requirement !== i18next.t('console-app~Requirement')) {\n      setDisabled(false);\n    }\n\n    if (!_.isEmpty(existingResource) && _.isEmpty(formValues.name)) {\n      onFormValuesChange(initialValuesFromK8sResource(existingResource));\n    }\n  }, [existingResource, formValues, onFormValuesChange, requirement, items]);\n\n  const handleNameChange = (_event, value: string) =>\n    onFormValuesChange({ ...formValues, name: value });\n\n  const handleSelectorChange = (labelValues: string[]) => {\n    const filterMatchLabels = labelValues.filter((f) => f.includes('='));\n    const filterMatchExpressions = labelValues.filter((f) => !f.includes('='));\n    onFormValuesChange({\n      ...formValues,\n      selector: {\n        matchLabels: SelectorInput.objectify(filterMatchLabels),\n        matchExpressions: SelectorInput.arrayToArrayOfObjects(filterMatchExpressions),\n      },\n    });\n    setLabels([...labels, ...labelValues]);\n    setMatchingSelector(existingResource);\n  };\n\n  const handleAvailabilityRequirementKeyChange = (value: string) => {\n    setRequirement(value);\n    setOpen(!isOpen);\n    setDisabled(false);\n    onFormValuesChange({\n      ...formValues,\n      requirement: value,\n      minAvailable: '',\n      maxUnavailable: '',\n    });\n  };\n  const handleAvailabilityRequirementValueChange = (_event, value: string | number) => {\n    onFormValuesChange({ ...formValues, [requirement]: value });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setInProgress(true);\n\n    const response = existingResource\n      ? patchPDB(formValues, existingResource)\n      : k8sCreate(PodDisruptionBudgetModel, pdbToK8sResource(formValues));\n    return response\n      .then(() => {\n        setInProgress(false);\n        history.push(\n          resourcePathFromModel(PodDisruptionBudgetModel, formValues.name, formValues.namespace),\n        );\n      })\n      .catch((err) => {\n        setError(err.message);\n        setInProgress(false);\n      });\n  };\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <Form onSubmit={handleSubmit}>\n        <Stack hasGutter>\n          <StackItem>\n            <FormGroup label={t('console-app~Name')} isRequired fieldId=\"pdb-name\">\n              <TextInput\n                isRequired\n                type=\"text\"\n                name=\"name\"\n                id=\"pdb-name\"\n                placeholder=\"example\"\n                value={formValues.name}\n                onChange={handleNameChange}\n                isDisabled={!!existingResource}\n                autoFocus\n              />\n            </FormGroup>\n          </StackItem>\n          <StackItem>\n            <FormGroup\n              label={t('console-app~Labels')}\n              fieldId=\"pdb-labels\"\n              labelIcon={\n                <FieldLevelHelp>\n                  <Title headingLevel=\"h3\">{t('console-app~Selector')}</Title>\n                  <Text className=\"pdb-form-popover__description\">\n                    {t(\n                      'console-app~Label query over pods whose evictions are managed by the disruption budget. Anull selector will match no pods, while an empty ({}) selector will select all pods within the namespace.',\n                    )}\n                  </Text>\n                </FieldLevelHelp>\n              }\n            >\n              <SelectorInput\n                onChange={(l) => handleSelectorChange(l)}\n                tags={[\n                  ...SelectorInput.arrayify(formValues.selector.matchLabels),\n                  ...SelectorInput.arrayObjectsToArrayStrings(formValues.selector.matchExpressions),\n                ]}\n                labelClassName=\"labelClassName\"\n              />\n              {matchingSelector && (\n                <StackItem>\n                  <FormHelperText>\n                    <HelperText>\n                      <HelperTextItem variant=\"warning\">\n                        {t(\n                          'console-app~Resource is already covered by another PodDisruptionBudget',\n                        )}\n                      </HelperTextItem>\n                    </HelperText>\n                  </FormHelperText>\n                </StackItem>\n              )}\n            </FormGroup>\n          </StackItem>\n          <StackItem>\n            <FormGroup\n              fieldId=\"pdb-requirement\"\n              label={t('console-app~Availability requirement')}\n              labelIcon={<AvailabilityRequirementPopover />}\n            />\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <Select\n                  isOpen={isOpen}\n                  onOpenChange={(open) => setOpen(open)}\n                  selected={selectedRequirement}\n                  onSelect={(value: string) => handleAvailabilityRequirementKeyChange(value)}\n                  toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n                    <MenuToggle\n                      ref={toggleRef}\n                      isExpanded={isOpen}\n                      isFullWidth\n                      onClick={(open) => setOpen(open)}\n                    >\n                      {selectedRequirement}\n                    </MenuToggle>\n                  )}\n                >\n                  <SelectList>\n                    {Object.keys(items).map((key) => (\n                      <SelectOption\n                        key={key}\n                        value={key}\n                        onClick={() => handleAvailabilityRequirementKeyChange(key)}\n                      >\n                        {items[key]}\n                      </SelectOption>\n                    ))}\n                  </SelectList>\n                </Select>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  type=\"text\"\n                  aria-label={t('console-app~Availability requirement value')}\n                  onChange={handleAvailabilityRequirementValueChange}\n                  value={\n                    formValues?.minAvailable?.toString() || formValues?.maxUnavailable?.toString()\n                  }\n                  placeholder={t('console-app~Value (% or number)')}\n                  name=\"availability requirement value\"\n                  isDisabled={isDisabled}\n                  validated={\n                    checkAvailabilityRequirementValue(formValues, replicasCount)\n                      ? ValidatedOptions.warning\n                      : ValidatedOptions.default\n                  }\n                />\n              </SplitItem>\n            </Split>\n          </StackItem>\n          {checkAvailabilityRequirementValue(formValues, replicasCount) && (\n            <StackItem>\n              <FormAlert>\n                <Alert\n                  variant=\"warning\"\n                  title={t('console-app~Availability requirement value warning')}\n                  aria-live=\"polite\"\n                  isInline\n                >\n                  {t(\n                    'console-app~A maxUnavailable of 0% or 0 or a minAvailable of 100% or greater than or equal to the number of replicas is permitted but can block nodes from being drained.',\n                  )}\n                </Alert>\n              </FormAlert>\n            </StackItem>\n          )}\n          <StackItem>\n            <ButtonBar errorMessage={error} inProgress={inProgress}>\n              <ActionGroup className=\"pf-v5-c-form\">\n                <Button\n                  type=\"submit\"\n                  id=\"save-changes\"\n                  variant=\"primary\"\n                  isDisabled={!formValues.name}\n                >\n                  {existingResource ? t('console-app~Save') : t('console-app~Create')}\n                </Button>\n                <Button onClick={history.goBack} id=\"cancel\" variant=\"secondary\">\n                  {t('console-app~Cancel')}\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </StackItem>\n        </Stack>\n      </Form>\n    </div>\n  );\n};\n\nexport default PDBForm;\n\ntype PodDisruptionBudgetFormProps = {\n  formData: PodDisruptionBudgetKind;\n  onChange: (newFormData: PodDisruptionBudgetKind) => void;\n  selector: MatchLabels;\n  existingResource: PodDisruptionBudgetKind;\n  replicasCount: number;\n};\n\ntype RequirementItems = {\n  maxUnavailable: string;\n  minAvailable: string;\n};\n","import * as React from 'react';\nimport { Text, Title, Stack, StackItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  DOC_URL_PODDISRUPTIONBUDGET_POLICY,\n  ExternalLink,\n} from '@console/internal/components/utils';\nimport { FieldLevelHelp } from '@console/internal/components/utils/field-level-help';\n\nconst AvailabilityRequirementPopover: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <FieldLevelHelp>\n      <Stack hasGutter>\n        <StackItem>\n          <Title headingLevel=\"h3\">{t('console-app~Availability requirement')}</Title>\n        </StackItem>\n        <StackItem>\n          <Title headingLevel=\"h4\">{t('console-app~maxUnavailable')}</Title>\n        </StackItem>\n        <StackItem>\n          <Text className=\"pdb-form-popover__description\">\n            {t(\n              'console-app~An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".',\n            )}\n          </Text>\n        </StackItem>\n        <StackItem>\n          <Title headingLevel=\"h4\">{t('console-app~minAvailable')}</Title>\n        </StackItem>\n        <StackItem>\n          <Text>\n            {t(\n              'console-app~An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod. So for example you can prevent all voluntary evictions by specifying \"100%\".',\n            )}\n          </Text>\n        </StackItem>\n        <StackItem>\n          <Title headingLevel=\"h5\">{t('console-app~More information:')}</Title>\n        </StackItem>\n        <StackItem>\n          <ExternalLink\n            // no downstream URL\n            href={DOC_URL_PODDISRUPTIONBUDGET_POLICY}\n            text={t('console-app~PodDisruptionBudget documentation')}\n          />\n        </StackItem>\n      </Stack>\n    </FieldLevelHelp>\n  );\n};\n\nexport default AvailabilityRequirementPopover;\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { useTranslation } from 'react-i18next';\nimport { useResolvedExtensions } from '@console/dynamic-plugin-sdk/src/api/useResolvedExtensions';\nimport {\n  YAMLTemplate,\n  isYAMLTemplate,\n} from '@console/dynamic-plugin-sdk/src/extensions/yaml-templates';\nimport { getYAMLTemplates } from '../models/yaml-templates';\nimport { connectToPlural } from '../kinds';\nimport { AsyncComponent } from './utils/async';\nimport { Firehose, LoadingBox } from './utils';\nimport {\n  K8sKind,\n  apiVersionForModel,\n  referenceForModel,\n  K8sResourceKindReference,\n  K8sResourceKind,\n} from '../module/k8s';\nimport { ErrorPage404 } from './error';\nimport { safeYAMLToJS } from '@console/shared/src/utils/yaml';\n\nexport const CreateYAMLInner = (props) => {\n  const {\n    params,\n    kindsInFlight,\n    kindObj,\n    hideHeader = false,\n    onChange = () => null,\n    resourceObjPath,\n    isCreate = true,\n  } = props;\n  const { t } = useTranslation();\n  const [templateExtensions, resolvedTemplates] = useResolvedExtensions<YAMLTemplate>(\n    React.useCallback(\n      (e): e is YAMLTemplate => isYAMLTemplate(e) && e.properties.model.kind === kindObj?.kind,\n      [kindObj],\n    ),\n  );\n  const yamlTemplates = React.useMemo(() => getYAMLTemplates(templateExtensions), [\n    templateExtensions,\n  ]);\n\n  if (!kindObj) {\n    if (kindsInFlight || !resolvedTemplates) {\n      return <LoadingBox />;\n    }\n    return <ErrorPage404 />;\n  }\n\n  const namespace = params.ns || 'default';\n  const template =\n    props.template ||\n    yamlTemplates.getIn([referenceForModel(kindObj), 'default']) ||\n    yamlTemplates.getIn(['DEFAULT', 'default']);\n\n  const obj = safeYAMLToJS(template);\n  obj.kind = kindObj.kind;\n  obj.metadata = obj.metadata || {};\n  if (kindObj.namespaced) {\n    obj.metadata.namespace = namespace;\n  }\n  if (kindObj.crd && template === yamlTemplates.getIn(['DEFAULT', 'default'])) {\n    obj.apiVersion = apiVersionForModel(kindObj);\n    obj.spec = obj.spec || {};\n  }\n  const header = t('public~Create {{objLabel}}', {\n    objLabel: kindObj.labelKey ? t(kindObj.labelKey) : kindObj.label,\n  });\n\n  // TODO: if someone edits namespace, we'll redirect to old namespace\n\n  return (\n    <AsyncComponent\n      loader={() => import('./droppable-edit-yaml').then((c) => c.DroppableEditYAML)}\n      initialResource={obj}\n      create={isCreate}\n      kind={kindObj.kind}\n      header={header}\n      hideHeader={hideHeader}\n      resourceObjPath={resourceObjPath}\n      onChange={onChange}\n    />\n  );\n};\n\nconst CreateYAML_ = connectToPlural(CreateYAMLInner);\n\nexport const CreateYAML = (props) => {\n  const params = useParams();\n  return <CreateYAML_ {...props} params={params} />;\n};\n\nexport const EditYAMLPage: React.SFC<EditYAMLPageProps> = (props) => {\n  const params = useParams();\n  const Wrapper = (wrapperProps) => (\n    <AsyncComponent\n      {...wrapperProps}\n      obj={wrapperProps.obj.data}\n      loader={() => import('./edit-yaml').then((c) => c.EditYAML)}\n      create={false}\n    />\n  );\n  return (\n    <Firehose\n      resources={[\n        {\n          kind: props.kind,\n          name: params.name,\n          namespace: params.ns,\n          isList: false,\n          prop: 'obj',\n        },\n      ]}\n    >\n      <Wrapper />\n    </Firehose>\n  );\n};\n\nexport type CreateYAMLProps = {\n  match?: any;\n  params?: any;\n  kindsInFlight: boolean;\n  kindObj: K8sKind;\n  template?: string;\n  download?: boolean;\n  header?: string;\n  hideHeader?: boolean;\n  isCreate?: boolean;\n  resourceObjPath?: (obj: K8sResourceKind, kind: K8sResourceKindReference) => string;\n  onChange?: (yaml: string) => any;\n};\n\nexport type EditYAMLPageProps = {\n  kind: string;\n};\n\nCreateYAML.displayName = 'CreateYAML';\nEditYAMLPage.displayName = 'EditYAMLPage';\n","import * as React from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { useParams, useLocation } from 'react-router-dom-v5-compat';\nimport { CreateYAML } from '@console/internal/components/create-yaml';\nimport { PageHeading, LoadingBox } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sPodControllerKind, getGroupVersionKind } from '@console/internal/module/k8s';\nimport { SyncedEditor } from '@console/shared/src/components/synced-editor';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { PodDisruptionBudgetModel } from '../../models';\nimport { pdbToK8sResource, mergeInitialYAMLWithExistingResource } from './pdb-models';\nimport PDBForm from './PDBForm';\nimport { PodDisruptionBudgetKind } from './types';\nimport { getPDBResource } from './utils/get-pdb-resources';\n\nconst LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY = 'console.pdbForm.editor.lastView';\n\nexport const PDBFormPage: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const location = useLocation();\n  const match = {\n    params: { ...params, plural: PodDisruptionBudgetModel.plural, appName: '' },\n    isExact: true,\n    url: '',\n    path: '',\n  };\n  const searchParams = new URLSearchParams(location.search);\n  const name = searchParams.get('name');\n  const groupVersionKind = getGroupVersionKind(params.resourceRef) || [];\n  const [group, version, kind] = groupVersionKind;\n\n  const [resource, loadedResource] = useK8sWatchResource<K8sPodControllerKind>({\n    groupVersionKind: {\n      group,\n      kind,\n      version,\n    },\n    name,\n    namespaced: true,\n    namespace: params.ns,\n  });\n\n  const [pdbResources, loadedPDBResource] = useK8sWatchResource<PodDisruptionBudgetKind[]>({\n    groupVersionKind: {\n      group: PodDisruptionBudgetModel.apiGroup,\n      kind: PodDisruptionBudgetModel.kind,\n      version: PodDisruptionBudgetModel.apiVersion,\n    },\n    isList: true,\n    namespaced: true,\n    namespace: params.ns,\n  });\n\n  const existingResource = getPDBResource(pdbResources, resource);\n\n  const formHelpText = t('console-app~Create by completing the form.');\n  const yamlHelpText = t(\n    'console-app~Create by manually entering YAML or JSON definitions, or by dragging and dropping a file into the editor.',\n  );\n  const initialPDB = {\n    name: '',\n    namespace: params.ns,\n    selector: { matchLabels: resource?.spec?.template?.metadata?.labels } || {},\n  };\n  const [helpText, setHelpText] = React.useState(formHelpText);\n  const k8sObj = pdbToK8sResource(initialPDB);\n\n  const YAMLEditor: React.FC<YAMLEditorProps> = ({ onChange, initialYAML = '' }) => {\n    const yamlData = mergeInitialYAMLWithExistingResource(initialYAML, existingResource);\n\n    return (\n      <CreateYAML\n        hideHeader\n        onChange={onChange}\n        match={match}\n        template={safeJSToYAML(yamlData, 'yamlData', {\n          skipInvalid: true,\n        })}\n        isCreate={!existingResource}\n      />\n    );\n  };\n\n  const title = !existingResource\n    ? t('console-app~Create {{label}}', { label: PodDisruptionBudgetModel.label })\n    : t('console-app~Edit {{label}}', { label: PodDisruptionBudgetModel.label });\n  const stillLoading = !loadedResource || !loadedPDBResource;\n\n  return (\n    <>\n      {stillLoading ? (\n        <LoadingBox />\n      ) : (\n        <>\n          <PageHeading\n            title={title}\n            helpText={\n              <Trans t={t} ns=\"console-app\">\n                {helpText}\n              </Trans>\n            }\n          />\n\n          <SyncedEditor\n            context={{\n              formContext: {\n                existingResource,\n                params: match.params,\n                replicasCount: resource?.spec?.replicas,\n              },\n              yamlContext: {},\n            }}\n            FormEditor={PDBForm}\n            initialData={existingResource || k8sObj}\n            initialType={EditorType.Form}\n            onChangeEditorType={(type) =>\n              setHelpText(type === EditorType.Form ? formHelpText : yamlHelpText)\n            }\n            YAMLEditor={YAMLEditor}\n            lastViewUserSettingKey={LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY}\n            displayConversionError\n          />\n        </>\n      )}\n    </>\n  );\n};\n\ntype YAMLEditorProps = {\n  initialYAML?: string;\n  onChange?: (yaml: string) => void;\n};\n","import * as React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { LoadingBox } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { safeJSToYAML, asyncYAMLToJS } from '../../utils/yaml';\nimport { EditorType, EditorToggle } from './editor-toggle';\nimport { useEditorType } from './useEditorType';\n\nconst YAML_KEY_ORDER = ['apiVerion', 'kind', 'metadata', 'spec', 'status'];\nexport const YAML_TO_JS_OPTIONS = {\n  skipInvalid: true,\n  sortKeys: (a, b) => _.indexOf(YAML_KEY_ORDER, a) - _.indexOf(YAML_KEY_ORDER, b),\n};\n\n// Provides toggling and syncing between a form and yaml editor. The formData state is the source\n// of truth. Both the form editor and the yaml editor update the formData state. Here's the basic logic of this component:\n// In the form view:\n//   - formData is both rendered and updated by the form component\n//   - on toggle to YAML editor, yaml is parsed from current formData state.\n// In the YAML view:\n//   - on each yaml change, attempt to parse yaml to js:\n//       - If it fails, nothing happens. formData remains unchanged.\n//       - If successful, formData is updated to resulting js\n//   - on toggle to form view, no action needs to be taken to sync because formData has remained up to date with each yaml change\n//\n//  This means that when switching from YAML to Form, you can lose changes if the YAML editor contains unparsable YAML\n//  TODO Add an extra step when switching from yaml to form to warn user if they are about to lose changes.\nexport const SyncedEditor: React.FC<SyncedEditorProps> = ({\n  context = {},\n  FormEditor,\n  initialType = EditorType.Form,\n  initialData = {},\n  onChangeEditorType = _.noop,\n  onChange = _.noop,\n  prune,\n  YAMLEditor,\n  lastViewUserSettingKey,\n  displayConversionError,\n}) => {\n  const { formContext, yamlContext } = context;\n  const { t } = useTranslation();\n  const [formData, setFormData] = React.useState<K8sResourceKind>(initialData);\n  const [yaml, setYAML] = React.useState(\n    safeJSToYAML(initialData, 'yamlData', {\n      skipInvalid: true,\n    }),\n  );\n  const [switchError, setSwitchError] = React.useState<string | undefined>();\n  const [yamlWarning, setYAMLWarning] = React.useState<boolean>(false);\n  const [editorType, setEditorType, loaded] = useEditorType(lastViewUserSettingKey, initialType);\n\n  const handleFormDataChange = (newFormData: K8sResourceKind = {}) => {\n    if (!_.isEqual(newFormData, formData)) {\n      setFormData(newFormData);\n      onChange(newFormData);\n    }\n  };\n\n  const handleYAMLChange = (newYAML: string = '') => {\n    asyncYAMLToJS(newYAML)\n      .then((js) => {\n        setSwitchError(undefined);\n        handleFormDataChange(js);\n        setYAML(safeJSToYAML(prune?.(formData) ?? formData, yaml, YAML_TO_JS_OPTIONS));\n      })\n      .catch((err) => setSwitchError(String(err)));\n  };\n\n  const changeEditorType = (newType: EditorType): void => {\n    setEditorType(newType);\n    onChangeEditorType(newType);\n  };\n\n  const handleToggleToForm = () => {\n    if (switchError === undefined) {\n      changeEditorType(EditorType.Form);\n    } else {\n      setYAMLWarning(true);\n    }\n  };\n\n  const handleToggleToYAML = () => {\n    setYAML(safeJSToYAML(prune?.(formData) ?? formData, yaml, YAML_TO_JS_OPTIONS));\n    changeEditorType(EditorType.YAML);\n  };\n\n  const onClickYAMLWarningConfirm = () => {\n    setSwitchError(undefined);\n    setYAMLWarning(false);\n    changeEditorType(EditorType.Form);\n  };\n\n  const onClickYAMLWarningCancel = () => {\n    setYAMLWarning(false);\n  };\n\n  const onChangeType = (newType) => {\n    switch (newType) {\n      case EditorType.YAML:\n        handleToggleToYAML();\n        break;\n      case EditorType.Form:\n        handleToggleToForm();\n        break;\n      default:\n        break;\n    }\n  };\n\n  return loaded ? (\n    <>\n      <EditorToggle value={editorType} onChange={onChangeType} />\n      {yamlWarning && (\n        <Alert\n          className=\"co-synced-editor__yaml-warning\"\n          variant=\"danger\"\n          isInline\n          title={t('console-shared~Invalid YAML cannot be persisted')}\n        >\n          {displayConversionError && <p>{switchError}</p>}\n          <p>{t('console-shared~Switching to form view will delete any invalid YAML.')}</p>\n          <Button variant=\"danger\" onClick={onClickYAMLWarningConfirm}>\n            {t('console-shared~Switch and delete')}\n          </Button>\n          &nbsp;\n          <Button variant=\"secondary\" onClick={onClickYAMLWarningCancel}>\n            {t('console-shared~Cancel')}\n          </Button>\n        </Alert>\n      )}\n      {editorType === EditorType.Form ? (\n        <FormEditor\n          formData={formData}\n          onChange={handleFormDataChange}\n          prune={prune}\n          {...formContext}\n        />\n      ) : (\n        <YAMLEditor initialYAML={yaml} onChange={handleYAMLChange} {...yamlContext} />\n      )}\n    </>\n  ) : (\n    <LoadingBox />\n  );\n};\n\ntype FormEditorProps = {\n  formData?: K8sResourceKind;\n  onChange?: (data: K8sResourceKind) => void;\n  prune?: (data: K8sResourceKind) => any;\n};\n\ntype YAMLEditorProps = {\n  initialYAML?: string;\n  onChange?: (yaml: string) => void;\n};\n\ntype SyncedEditorProps = {\n  context: {\n    formContext: { [key: string]: any };\n    yamlContext: { [key: string]: any };\n  };\n  FormEditor: React.ComponentType<FormEditorProps>;\n  initialType?: EditorType;\n  initialData?: K8sResourceKind;\n  onChangeEditorType?: (newType: EditorType) => void;\n  onChange?: (data: K8sResourceKind) => void;\n  prune?: (data: K8sResourceKind) => any;\n  YAMLEditor: React.ComponentType<YAMLEditorProps>;\n  lastViewUserSettingKey: string;\n  displayConversionError?: boolean;\n};\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { Selector, k8sPatch, Patch } from '@console/internal/module/k8s';\nimport { safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { PodDisruptionBudgetModel } from '../../models';\nimport { PodDisruptionBudgetKind } from './types';\n\nexport const intOrString = (val: string | number): string | number => {\n  if (val === '') {\n    return val;\n  }\n  if (typeof val === 'number') {\n    return val;\n  }\n  const isValidInt = /^[0-9]*$/.test(val);\n\n  return isValidInt ? parseInt(val, 10) : val;\n};\n\nexport const pdbToK8sResource = (\n  from: FormValues,\n  existingRes?: PodDisruptionBudgetKind,\n): PodDisruptionBudgetKind => {\n  const requirement = from.requirement === 'Requirement' ? null : from.requirement;\n\n  const res: PodDisruptionBudgetKind = {\n    kind: PodDisruptionBudgetModel.kind,\n    apiVersion: `${PodDisruptionBudgetModel.apiGroup}/${PodDisruptionBudgetModel.apiVersion}`,\n    metadata: {\n      name: from.name,\n      namespace: from.namespace,\n    },\n    spec: {\n      selector: {\n        matchLabels: from?.selector?.matchLabels,\n        matchExpressions: from?.selector?.matchExpressions,\n      },\n    },\n  };\n\n  // Remove requirement because only one of maxUnavailable and minAvailable in a single PodDisruptionBudget can be specify\n  const omitRequirementFromExistingRes = _.omit(existingRes, [\n    'spec.minAvailable',\n    'spec.maxUnavailable',\n  ]);\n\n  const pdbRes = requirement\n    ? _.merge({}, omitRequirementFromExistingRes, res, {\n        spec: {\n          [requirement]:\n            from.minAvailable !== ''\n              ? intOrString(from.minAvailable)\n              : intOrString(from.maxUnavailable),\n        },\n      })\n    : res;\n\n  return pdbRes;\n};\n\nexport const initialValuesFromK8sResource = (from: PodDisruptionBudgetKind): FormValues => {\n  return {\n    name: from?.metadata?.name || '',\n    namespace: from?.metadata?.namespace || '',\n    minAvailable: from?.spec?.minAvailable ?? '',\n    maxUnavailable: from?.spec?.maxUnavailable ?? '',\n    selector:\n      {\n        matchLabels: from?.spec?.selector.matchLabels,\n        matchExpressions: from?.spec?.selector.matchExpressions,\n      } || {},\n\n    requirement:\n      _.isNil(from?.spec?.minAvailable) && _.isNil(from?.spec?.maxUnavailable)\n        ? i18next.t('console-app~Requirement')\n        : !_.isNil(from?.spec?.minAvailable)\n        ? 'minAvailable'\n        : 'maxUnavailable',\n  };\n};\n\nexport const patchPDB = (\n  formValues: FormValues,\n  existingResource: PodDisruptionBudgetKind,\n): Promise<PodDisruptionBudgetKind> => {\n  const patch: Patch[] = [];\n  if (!_.isEmpty(formValues.selector.matchLabels)) {\n    patch.push({\n      op: 'add',\n      path: '/spec/selector/matchLabels',\n      value: formValues.selector.matchLabels,\n    });\n  }\n  if (!_.isEmpty(formValues.selector.matchExpressions)) {\n    patch.push({\n      op: 'add',\n      path: '/spec/selector/matchExpressions',\n      value: formValues.selector.matchExpressions,\n    });\n  }\n  if (formValues.minAvailable !== '') {\n    patch.push({\n      op: 'add',\n      path: '/spec/minAvailable',\n      value: intOrString(formValues.minAvailable),\n    });\n  }\n  if (formValues.maxUnavailable !== '') {\n    patch.push({\n      op: 'add',\n      path: '/spec/maxUnavailable',\n      value: intOrString(formValues.maxUnavailable),\n    });\n  }\n  if (!_.isNil(existingResource?.spec?.minAvailable) && formValues.maxUnavailable !== '') {\n    patch.push(\n      {\n        op: 'remove',\n        path: '/spec/minAvailable',\n      },\n      {\n        op: 'add',\n        path: '/spec/maxUnavailable',\n        value: intOrString(formValues.maxUnavailable),\n      },\n    );\n  }\n  if (!_.isNil(existingResource?.spec?.maxUnavailable) && formValues.minAvailable !== '') {\n    patch.push(\n      {\n        op: 'remove',\n        path: '/spec/maxUnavailable',\n      },\n      {\n        op: 'add',\n        path: '/spec/minAvailable',\n        value: intOrString(formValues.minAvailable),\n      },\n    );\n  }\n\n  return k8sPatch(PodDisruptionBudgetModel, existingResource, patch);\n};\n\nexport const mergeInitialYAMLWithExistingResource = (\n  initialYAML: string,\n  existingResource: PodDisruptionBudgetKind,\n): PodDisruptionBudgetKind =>\n  pdbToK8sResource(initialValuesFromK8sResource(safeYAMLToJS(initialYAML)), existingResource);\n\nexport type FormValues = {\n  name: string;\n  namespace: string;\n  requirement?: string;\n  minAvailable?: string | number;\n  maxUnavailable?: string | number;\n  selector?: Selector;\n};\n"],"sourceRoot":""}