{"version":3,"sources":["webpack:///./packages/console-shared/src/components/dashboard/inventory-card/utils.ts","webpack:///./packages/console-app/src/components/dashboards-page/ClusterUpdateActivity.tsx","webpack:///./packages/console-app/src/components/dashboards-page/ControlPlaneStatus.tsx","webpack:///./packages/console-app/src/components/dashboards-page/OperatorStatus.tsx"],"names":["POD_PHASE_GROUP_MAPPING","NOT_MAPPED","ERROR","PROGRESS","WARN","PVC_STATUS_GROUP_MAPPING","PV_STATUS_GROUP_MAPPING","NODE_STATUS_GROUP_MAPPING","VS_STATUS_GROUP_MAPPING","getStatusGroups","resources","mapping","mapper","filterType","groups","UNKNOWN","statusIDs","count","Object","keys","forEach","key","resource","status","group","find","includes","getPodStatusGroups","getNodeStatusGroups","getPVCStatusGroups","pvc","phase","getPVStatusGroups","pv","getVSStatusGroups","getVersion","cv","history","version","ClusterUpdateActivityText","t","ClusterUpdateActivity","prevProps","newProps","responses","titles","hasGutter","firstColumn","secondColumn","map","response","error","index","health","icon","state","LOADING","className","value","message","operatorStatus","title","kind","name","operators","metadata","hideIcon"],"mappings":"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","file":"console-app-chunk-8799b97d08c6fb111751.min.js","sourcesContent":["import { nodeStatus } from '@console/app/src/status/node';\nimport { volumeSnapshotStatus } from '@console/app/src/status/snapshot';\nimport { podPhaseFilterReducer } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from './InventoryItem';\nimport { InventoryStatusGroup } from './status-group';\n\nconst POD_PHASE_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Running', 'Succeeded'],\n  [InventoryStatusGroup.ERROR]: ['CrashLoopBackOff', 'Failed'],\n  [InventoryStatusGroup.PROGRESS]: ['Terminating', 'Pending'],\n  [InventoryStatusGroup.WARN]: ['Unknown'],\n};\n\nconst PVC_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.ERROR]: ['Lost'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n};\n\nconst PV_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Available', 'Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nconst NODE_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n};\n\nconst VS_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n  [InventoryStatusGroup.ERROR]: ['Error'],\n};\n\nexport const getStatusGroups = (resources, mapping, mapper, filterType) => {\n  const groups = {\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [],\n      count: 0,\n    },\n  };\n  Object.keys(mapping).forEach((key) => {\n    groups[key] = {\n      statusIDs: [...mapping[key]],\n      count: 0,\n      filterType,\n    };\n  });\n\n  resources.forEach((resource) => {\n    const status = mapper(resource);\n    const group =\n      Object.keys(mapping).find((key) => mapping[key].includes(status)) ||\n      InventoryStatusGroup.UNKNOWN;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n\nexport const getPodStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, POD_PHASE_GROUP_MAPPING, podPhaseFilterReducer, 'pod-status');\nexport const getNodeStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, NODE_STATUS_GROUP_MAPPING, nodeStatus, 'node-status');\nexport const getPVCStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PVC_STATUS_GROUP_MAPPING, (pvc) => pvc.status.phase, 'pvc-status');\nexport const getPVStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PV_STATUS_GROUP_MAPPING, (pv) => pv.status.phase, 'pv-status');\nexport const getVSStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, VS_STATUS_GROUP_MAPPING, volumeSnapshotStatus, 'snapshot-status');\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ClusterVersionKind } from '@console/internal/module/k8s';\nimport ActivityItem from '@console/shared/src/components/dashboard/activity-card/ActivityItem';\n\nconst getVersion = (cv: ClusterVersionKind) =>\n  cv && cv.status.history[0] ? cv.status.history[0].version : null;\n\nconst ClusterUpdateActivityText: React.FC<ClusterUpdateActivityProps> = ({ resource }) => {\n  const { t } = useTranslation();\n  return (\n    <ActivityItem>\n      {t('console-app~Updating cluster to {{version}}', { version: getVersion(resource) })}\n    </ActivityItem>\n  );\n};\n\nconst ClusterUpdateActivity: React.FC<ClusterUpdateActivityProps> = React.memo(\n  ({ resource }) => <ClusterUpdateActivityText resource={resource} />,\n  (prevProps, newProps) => getVersion(prevProps.resource) === getVersion(newProps.resource),\n);\n\nexport default ClusterUpdateActivity;\n\ntype ClusterUpdateActivityProps = {\n  resource: ClusterVersionKind;\n};\n","import * as React from 'react';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { PrometheusHealthPopupProps } from '@console/plugin-sdk';\nimport {\n  HealthState,\n  healthStateMapping,\n  healthStateMessage,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport Status, {\n  StatusPopupSection,\n} from '@console/shared/src/components/dashboard/status-card/StatusPopup';\nimport { getControlPlaneComponentHealth } from './status';\n\nconst ControlPlanePopup: React.FC<PrometheusHealthPopupProps> = ({ responses }) => {\n  const { t } = useTranslation();\n  const titles = [\n    t('console-app~API Servers'),\n    t('console-app~Controller Managers'),\n    t('console-app~Schedulers'),\n    t('console-app~API Request Success Rate'),\n  ];\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        {t(\n          'console-app~Components of the control plane are responsible for maintaining and reconciling the state of the cluster.',\n        )}\n      </StackItem>\n      <StackItem>\n        <StatusPopupSection\n          firstColumn={t('console-app~Components')}\n          secondColumn={t('console-app~Response rate')}\n        >\n          {responses.map(({ response, error }, index) => {\n            const health = getControlPlaneComponentHealth(response, error, t);\n            const icon =\n              health.state === HealthState.LOADING ? (\n                <div className=\"skeleton-health\" />\n              ) : (\n                healthStateMapping[health.state].icon\n              );\n            const value = health.message || healthStateMessage(health.state, t);\n            return (\n              <Status key={titles[index]} value={value} icon={icon}>\n                {titles[index]}\n              </Status>\n            );\n          })}\n        </StatusPopupSection>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default ControlPlanePopup;\n","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils/resource-link';\nimport { ClusterOperatorModel } from '@console/internal/models';\nimport { referenceForModel, ClusterOperator } from '@console/internal/module/k8s';\nimport { OperatorRowProps } from '@console/plugin-sdk';\nimport Status from '@console/shared/src/components/dashboard/status-card/StatusPopup';\n\nconst ClusterOperatorStatusRow: React.FC<OperatorRowProps<ClusterOperator>> = ({\n  operatorStatus,\n}) => (\n  <Status value={operatorStatus.status.title} icon={operatorStatus.status.icon}>\n    <ResourceLink\n      kind={referenceForModel(ClusterOperatorModel)}\n      name={operatorStatus.operators[0].metadata.name}\n      hideIcon\n      className=\"co-status-popup__title\"\n    />\n  </Status>\n);\n\nexport default ClusterOperatorStatusRow;\n"],"sourceRoot":""}