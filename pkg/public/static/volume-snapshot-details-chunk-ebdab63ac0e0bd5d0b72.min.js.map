{"version":3,"sources":["webpack:///./packages/console-app/src/components/volume-snapshot/volume-snapshot-details.tsx"],"names":["editYaml","events","common","RestorePVC","factory","menuActions","Details","obj","t","namespace","metadata","sourceModel","spec","source","persistentVolumeClaimName","sourceName","size","status","restoreSize","sizeBase","sizeMetrics","string","snapshotContent","boundVolumeSnapshotContentName","snapshotClass","volumeSnapshotClassName","canListVSC","CAN_LIST_VSC","className","text","resource","kind","name","props","pages","href","nameKey","component","getResourceStatus"],"mappings":"6FAAA,2FAuBA,MAAM,SAAEA,EAAQ,OAAEC,GAAW,MACvB,OAAEC,EAAM,WAAEC,GAAe,IAAMC,QAC/BC,EAAc,CAACF,KAAeD,GAE9BI,EAAkC,EAAGC,U,cACzC,MAAM,EAAEC,GAAM,4BACR,UAAEC,GAAcF,EAAIG,UAAY,GAChCC,GAA+B,QAAjB,EAAS,QAAT,EAAAJ,aAAG,EAAHA,EAAKK,YAAI,eAAEC,cAAM,eAAEC,2BACnC,6BACA,6BACEC,EAAa,aAAeR,GAC5BS,EAAiB,QAAV,EAAAT,EAAIU,cAAM,eAAEC,YACnBC,EAAW,aAAmBH,GAC9BI,EAAcJ,EAAO,aAAoBG,GAAUE,OAAS,IAC5DC,EAA6B,QAAX,EAAAf,aAAG,EAAHA,EAAKU,cAAM,eAAEM,+BAC/BC,EAAyB,QAAT,EAAAjB,aAAG,EAAHA,EAAKK,YAAI,eAAEa,wBAE3BC,EAAa,YAAQ,IAAMC,cAEjC,OACE,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAACC,KAAMrB,EAAE,wCACxB,uBAAKoB,UAAU,OACb,uBAAKA,UAAU,sBACb,gBAAC,KAAe,CAACE,SAAUvB,GACzB,0BAAKC,EAAE,uBACP,0BACE,gBAAC,KAAM,CAACS,OAAQ,YAAqBV,QAI3C,uBAAKqB,UAAU,YACb,sBAAIA,UAAU,sBACZ,0BAAKpB,EAAE,qBACP,0BAAKQ,EAAOI,EAAc,KAC1B,0BAAKZ,EAAE,uBACP,0BACE,gBAAC,KAAY,CACXuB,KAAM,aAAkBpB,GACxBqB,KAAMjB,EACNN,UAAWA,KAGdiB,GACC,gCACE,0BAAKlB,EAAE,sCACP,kCAAc,2BACXc,EACC,gBAAC,KAAY,CACXS,KAAM,aAAkB,8BACxBC,KAAMV,IAEN,MAMV,0BAAKd,EAAE,oCACP,kCAAc,0BACXgB,EACC,gBAAC,KAAY,CACXO,KAAM,aAAkB,4BACxBC,KAAMR,IAEN,UAoCH,UAzBgDS,IAC7D,MAAMC,EAAQ,CACZ,CACEC,KAAM,GAENC,QAAS,sBACTC,UAAW/B,GAEbN,IACAC,EAAO,wBAET,OACE,gBAAC,IAAW,iBACNgC,EAAK,CACTK,kBAAmB,IACnBjC,YAAaA,EACb6B,MAAOA","file":"volume-snapshot-details-chunk-ebdab63ac0e0bd5d0b72.min.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport {\n  SectionHeading,\n  ResourceSummary,\n  ResourceLink,\n  navFactory,\n  Kebab,\n  convertToBaseValue,\n  humanizeBinaryBytes,\n} from '@console/internal/components/utils';\nimport {\n  PersistentVolumeClaimModel,\n  VolumeSnapshotContentModel,\n  VolumeSnapshotClassModel,\n} from '@console/internal/models';\nimport { referenceForModel, VolumeSnapshotKind } from '@console/internal/module/k8s';\nimport { Status, snapshotSource, FLAGS } from '@console/shared';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { volumeSnapshotStatus } from '../../status';\n\nconst { editYaml, events } = navFactory;\nconst { common, RestorePVC } = Kebab.factory;\nconst menuActions = [RestorePVC, ...common];\n\nconst Details: React.FC<DetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const { namespace } = obj.metadata || {};\n  const sourceModel = obj?.spec?.source?.persistentVolumeClaimName\n    ? PersistentVolumeClaimModel\n    : VolumeSnapshotContentModel;\n  const sourceName = snapshotSource(obj);\n  const size = obj.status?.restoreSize;\n  const sizeBase = convertToBaseValue(size);\n  const sizeMetrics = size ? humanizeBinaryBytes(sizeBase).string : '-';\n  const snapshotContent = obj?.status?.boundVolumeSnapshotContentName;\n  const snapshotClass = obj?.spec?.volumeSnapshotClassName;\n\n  const canListVSC = useFlag(FLAGS.CAN_LIST_VSC);\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('console-app~VolumeSnapshot details')} />\n      <div className=\"row\">\n        <div className=\"col-md-6 col-xs-12\">\n          <ResourceSummary resource={obj}>\n            <dt>{t('console-app~Status')}</dt>\n            <dd>\n              <Status status={volumeSnapshotStatus(obj)} />\n            </dd>\n          </ResourceSummary>\n        </div>\n        <div className=\"col-md-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('console-app~Size')}</dt>\n            <dd>{size ? sizeMetrics : '-'}</dd>\n            <dt>{t('console-app~Source')}</dt>\n            <dd>\n              <ResourceLink\n                kind={referenceForModel(sourceModel)}\n                name={sourceName}\n                namespace={namespace}\n              />\n            </dd>\n            {canListVSC && (\n              <>\n                <dt>{t('console-app~VolumeSnapshotContent')}</dt>\n                <dd data-test=\"details-item-value__VSC\">\n                  {snapshotContent ? (\n                    <ResourceLink\n                      kind={referenceForModel(VolumeSnapshotContentModel)}\n                      name={snapshotContent}\n                    />\n                  ) : (\n                    '-'\n                  )}\n                </dd>\n              </>\n            )}\n            <dt>{t('console-app~VolumeSnapshotClass')}</dt>\n            <dd data-test=\"details-item-value__SC\">\n              {snapshotClass ? (\n                <ResourceLink\n                  kind={referenceForModel(VolumeSnapshotClassModel)}\n                  name={snapshotClass}\n                />\n              ) : (\n                '-'\n              )}\n            </dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst VolumeSnapshotDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const pages = [\n    {\n      href: '',\n      // t('console-app~Details')\n      nameKey: 'console-app~Details',\n      component: Details,\n    },\n    editYaml(),\n    events(ResourceEventStream),\n  ];\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={volumeSnapshotStatus}\n      menuActions={menuActions}\n      pages={pages}\n    />\n  );\n};\n\ntype DetailsProps = {\n  obj: VolumeSnapshotKind;\n};\n\nexport default VolumeSnapshotDetailsPage;\n"],"sourceRoot":""}