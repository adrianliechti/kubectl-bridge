{"version":3,"sources":["webpack:///./public/components/cluster-settings/ldap-idp-form.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/idp-cafile-input.tsx"],"names":["AddLDAPPage","navigate","inProgress","setInProgress","errorMessage","setErrorMessage","name","setName","url","setUrl","bindDN","setBindDN","bindPassword","setBindPassword","attributesID","setAttributesID","attributesPreferredUsername","setAttributesPreferredUsername","attributesName","setAttributesName","attributesEmail","setAttributesEmail","caFileContent","setCaFileContent","t","handlePromise","promise","then","res","thenPromise","error","err","message","Promise","reject","catchError","createCAConfigMap","resolve","ca","apiVersion","kind","metadata","generateName","namespace","data","createBindPasswordSecret","secret","stringData","addLDAPIDP","oauth","bindPasswordSecretName","caConfigMapName","dryRun","idp","mappingMethod","type","ldap","insecure","attributes","id","preferredUsername","email","title","className","helpText","onSubmit","e","preventDefault","mockSecret","mockCA","promises","all","bindPasswordSecret","caConfigMap","catch","value","onChange","currentTarget","htmlFor","required","label","initialValues","c","variant","onClick","getOAuthResource","addIDP","patch","spec","identityProviders","op","path","queryParams","redirectToOAuthPage","mockNames","IDPNameInput","DroppableFileInput","props","loader","IDPCAFileInput","isRequired","inputFileData","hideContents"],"mappings":"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","file":"ldap-idp-form-chunk-60d6457f89ec13a8deff.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { ConfigMapModel, SecretModel } from '../../models';\nimport { IdentityProvider, k8sCreate, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, ListInput, PageHeading } from '../utils';\nimport { addIDP, getOAuthResource as getOAuth, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport const AddLDAPPage = () => {\n  const navigate = useNavigate();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [name, setName] = React.useState('ldap');\n  const [url, setUrl] = React.useState('');\n  const [bindDN, setBindDN] = React.useState('');\n  const [bindPassword, setBindPassword] = React.useState('');\n  const [attributesID, setAttributesID] = React.useState(['dn']);\n  const [attributesPreferredUsername, setAttributesPreferredUsername] = React.useState(['uid']);\n  const [attributesName, setAttributesName] = React.useState(['cn']);\n  const [attributesEmail, setAttributesEmail] = React.useState([]);\n  const [caFileContent, setCaFileContent] = React.useState('');\n\n  const { t } = useTranslation();\n\n  const thenPromise = (res) => {\n    setInProgress(false);\n    setErrorMessage('');\n    return res;\n  };\n\n  const catchError = (error) => {\n    const err = error.message || t('public~An error occurred. Please try again.');\n    setInProgress(false);\n    setErrorMessage(err);\n    return Promise.reject(err);\n  };\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n\n    return promise.then(\n      (res) => thenPromise(res),\n      (error) => catchError(error),\n    );\n  };\n\n  const getOAuthResource = () => {\n    return handlePromise(getOAuth());\n  };\n\n  const createCAConfigMap = () => {\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'ldap-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return handlePromise(k8sCreate(ConfigMapModel, ca));\n  };\n\n  const createBindPasswordSecret = () => {\n    if (!bindPassword) {\n      return Promise.resolve(null);\n    }\n\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'ldap-bind-password-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        bindPassword,\n      },\n    };\n\n    return handlePromise(k8sCreate(SecretModel, secret));\n  };\n\n  const addLDAPIDP = (\n    oauth: OAuthKind,\n    bindPasswordSecretName: string,\n    caConfigMapName: string,\n    dryRun?: boolean,\n  ) => {\n    const idp: IdentityProvider = {\n      name,\n      mappingMethod: 'claim',\n      type: 'LDAP',\n      ldap: {\n        url,\n        insecure: false,\n        attributes: {\n          id: attributesID,\n          preferredUsername: attributesPreferredUsername,\n          name: attributesName,\n          email: attributesEmail,\n        },\n      },\n    };\n\n    if (bindDN) {\n      idp.ldap.bindDN = bindDN;\n    }\n\n    if (bindPasswordSecretName) {\n      idp.ldap.bindPassword = {\n        name: bindPasswordSecretName,\n      };\n    }\n\n    if (caConfigMapName) {\n      idp.ldap.ca = {\n        name: caConfigMapName,\n      };\n    }\n\n    return handlePromise(addIDP(oauth, idp, dryRun));\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    // Clear any previous errors.\n    setErrorMessage('');\n    getOAuthResource().then((oauth: OAuthKind) => {\n      const mockSecret = bindPassword ? mockNames.secret : '';\n      const mockCA = caFileContent ? mockNames.ca : '';\n      addLDAPIDP(oauth, mockSecret, mockCA, true)\n        .then(() => {\n          const promises = [createBindPasswordSecret(), createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([bindPasswordSecret, caConfigMap]) => {\n              const bindPasswordSecretName = _.get(bindPasswordSecret, 'metadata.name');\n              const caConfigMapName = _.get(caConfigMap, 'metadata.name');\n              return addLDAPIDP(oauth, bindPasswordSecretName, caConfigMapName);\n            })\n            .then(() => {\n              redirectToOAuthPage(navigate);\n            });\n        })\n        .catch((err) => {\n          setErrorMessage(err);\n        });\n    });\n  };\n\n  const title = t('public~Add Identity Provider: LDAP');\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading title={title} helpText={t('public~Integrate with an LDAP identity provider.')} />\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={submit} name=\"form\" className=\"co-m-pane__body-group\">\n          <IDPNameInput value={name} onChange={(e) => setName(e.currentTarget.value)} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"url\">\n              {t('public~URL')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"url\"\n              onChange={(e) => setUrl(e.currentTarget.value)}\n              value={url}\n              id=\"url\"\n              required\n              aria-describedby=\"url-help\"\n            />\n            <div className=\"help-block\" id=\"url-help\">\n              {t('public~An RFC 2255 URL which specifies the LDAP search parameters to use.')}\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"bind-dn\">\n              {t('public~Bind DN')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={(e) => setBindDN(e.currentTarget.value)}\n              value={bindDN}\n              id=\"bind-dn\"\n              aria-describedby=\"bind-dn-help\"\n            />\n            <div className=\"help-block\" id=\"bind-dn-help\">\n              {t('public~DN to bind with during the search phase.')}\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"bind-password\">\n              {t('public~Bind password')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"password\"\n              onChange={(e) => setBindPassword(e.currentTarget.value)}\n              value={bindPassword}\n              id=\"bind-password\"\n              aria-describedby=\"bind-password-help\"\n            />\n            <div className=\"help-block\" id=\"bind-password-help\">\n              {t('public~Password to bind with during the search phase.')}\n            </div>\n          </div>\n          <div className=\"co-form-section__separator\" />\n          <h3>{t('public~Attributes')}</h3>\n          <p className=\"co-help-text\">\n            {t('public~Attributes map LDAP attributes to identities.')}\n          </p>\n          <ListInput\n            label={t('public~ID')}\n            required\n            initialValues={attributesID}\n            onChange={(c: string[]) => setAttributesID(c)}\n            helpText={t(\n              'public~The list of attributes whose values should be used as the user ID.',\n            )}\n          />\n          <ListInput\n            label={t('public~Preferred username')}\n            initialValues={attributesPreferredUsername}\n            onChange={(c: string[]) => setAttributesPreferredUsername(c)}\n            helpText={t(\n              'public~The list of attributes whose values should be used as the preferred username.',\n            )}\n          />\n          <ListInput\n            label={t('public~Name')}\n            initialValues={attributesName}\n            onChange={(c: string[]) => setAttributesName(c)}\n            helpText={t(\n              'public~The list of attributes whose values should be used as the display name.',\n            )}\n          />\n          <ListInput\n            label={t('public~Email')}\n            onChange={(c: string[]) => setAttributesEmail(c)}\n            helpText={t(\n              'public~The list of attributes whose values should be used as the email address.',\n            )}\n          />\n          <div className=\"co-form-section__separator\" />\n          <h3>{t('public~More options')}</h3>\n          <IDPCAFileInput value={caFileContent} onChange={(c: string) => setCaFileContent(c)} />\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                {t('public~Add')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport type AddLDAPPageState = {\n  name: string;\n  url: string;\n  bindDN: string;\n  bindPassword: string;\n  attributesID: string[];\n  attributesPreferredUsername: string[];\n  attributesName: string[];\n  attributesEmail: string[];\n  caFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { resourcePathFromModel } from '../utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? { queryParams: { dryRun: 'All' } } : {});\n};\n\nexport const redirectToOAuthPage = (navigate) => {\n  const path = `${resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME)}?idpAdded=true`;\n  navigate(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n        {t('public~Name')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        onChange={onChange}\n        value={value}\n        aria-describedby=\"idp-name-help\"\n        id=\"idp-name\"\n        required\n      />\n      <p className=\"help-block\" id=\"idp-name-help\">\n        {t('public~Unique name of the new identity provider. This cannot be changed later.')}\n      </p>\n    </div>\n  );\n};\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <DroppableFileInput\n        onChange={onChange}\n        inputFileData={value}\n        id=\"idp-file-input\"\n        label={t('public~CA file')}\n        isRequired={isRequired}\n        hideContents\n      />\n    </div>\n  );\n};\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n"],"sourceRoot":""}