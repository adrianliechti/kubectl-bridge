{"version":3,"sources":["webpack:///./packages/console-shared/src/components/editor/CodeEditorSidebar.tsx","webpack:///./packages/console-shared/src/components/editor/yaml-download-utils.ts","webpack:///./public/components/sidebars/explore-type-sidebar.tsx","webpack:///./public/components/sidebars/resource-sidebar.tsx","webpack:///./public/components/sidebars/resource-sidebar-samples.tsx"],"names":["editorRef","model","samples","schema","snippets","sidebarLabel","sanitizeYamlContent","toggleSidebar","editor","current","insertYamlContent","id","yamlContent","kind","yaml","selection","getSelection","range","startLineNumber","startColumn","endLineNumber","endColumn","indentSize","Array","join","lines","split","lineCount","length","indentedLines","map","line","i","indentedText","newContentSelection","op","text","forceMoveMarkers","executeEdits","focus","replaceYamlContent","setValue","downloadYamlContent","e","kindObj","loadSampleYaml","insertSnippetYaml","downloadSampleYaml","downloadYaml","data","blob","Blob","type","filename","obj","toLowerCase","metadata","name","console","error","ExploreType","props","drilldownHistory","setDrilldownHistory","t","allDefinitions","setAllDefinitions","then","response","catch","err","currentSelection","currentPath","path","currentDefinition","currentProperties","properties","items","definitions","description","required","Set","kindLabel","labelKey","breadcrumbs","className","crumb","isLast","key","isActive","onClick","preventDefault","breadcrumbClicked","isInline","variant","label","definition","child","getDrilldownPath","definitionType","ref","getTypeForRef","$ref","re","test","replace","getRef","definitionTypeStr","isArray","value","has","desc","scrollTop","drilldown","sidebarScrollTop","document","getElementsByClassName","ResourceSidebarWrapper","children","additionalClassName","ariaLabel","ResourceSchema","ResourceSamples","ResourceSnippets","ResourceSidebar","showSamples","showSnippets","showSchema","tabs","push","component","tabProps","additionalClassNames","ResourceSidebarSample","sample","highlightText","title","img","targetResource","reference","src","PreviewYAML","maxPreviewLines","theme","style","paddingTop","height","Math","min","language","options","lineHeight","readOnly","folding","minimap","enabled","scrollBeyondLastLine","ResourceSidebarSnippet","snippet","lazyYaml","yamlPreview","setYamlPreview","yamlPreviewOpen","setYamlPreviewOpen","resolveYaml","callback","warn","resolvedYaml","open","ResourceSidebarSnippets","listStyle","paddingLeft","ResourceSidebarSamples"],"mappings":"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","file":"366-chunk-3a6f84ca2ebf2816a6d3.min.js","sourcesContent":["import * as React from 'react';\nimport { JSONSchema7 } from 'json-schema';\nimport { Range, Selection } from 'monaco-editor';\nimport MonacoEditor from 'react-monaco-editor';\nimport { ResourceSidebar } from '@console/internal/components/sidebars/resource-sidebar';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { Sample } from '../../utils';\nimport { downloadYaml } from './yaml-download-utils';\n\ntype CodeEditorSidebarProps = {\n  editorRef: React.MutableRefObject<MonacoEditor>;\n  model?: K8sKind;\n  samples?: Sample[];\n  schema?: JSONSchema7;\n  snippets?: Sample[];\n  sidebarLabel?: string;\n  sanitizeYamlContent?: (id: string, yaml: string, kind: string) => string;\n  toggleSidebar: () => void;\n};\n\nconst CodeEditorSidebar: React.FC<CodeEditorSidebarProps> = ({\n  editorRef,\n  model,\n  samples,\n  schema,\n  snippets,\n  sidebarLabel,\n  sanitizeYamlContent,\n  toggleSidebar,\n}) => {\n  const editor = editorRef.current?.editor;\n\n  const insertYamlContent = React.useCallback(\n    (id: string = 'default', yamlContent: string = '', kind) => {\n      const yaml = sanitizeYamlContent ? sanitizeYamlContent(id, yamlContent, kind) : yamlContent;\n\n      const selection = editor.getSelection();\n      const range = new Range(\n        selection.startLineNumber,\n        selection.startColumn,\n        selection.endLineNumber,\n        selection.endColumn,\n      );\n\n      // Grab the current position and indent every row to left-align the text at the same indentation\n      const indentSize = new Array(selection.startColumn).join(' ');\n      const lines = yaml.split('\\n');\n      const lineCount = lines.length;\n      const indentedLines = lines.map((line, i) => {\n        if (i === 0) {\n          // Already indented, leave it alone\n          return line;\n        }\n        return `${indentSize}${line}`;\n      });\n      const indentedText = indentedLines.join('\\n');\n\n      // Grab the selection size of what we are about to add\n      const newContentSelection = new Selection(\n        selection.startLineNumber,\n        selection.startColumn,\n        selection.startLineNumber + lineCount - 1,\n        selection.startColumn + indentedLines[indentedLines.length - 1].length,\n      );\n\n      const op = { range, text: indentedText, forceMoveMarkers: true };\n      editor.executeEdits(id, [op], [newContentSelection]);\n      editor.focus();\n    },\n    [editor, sanitizeYamlContent],\n  );\n\n  const replaceYamlContent = React.useCallback(\n    (id: string = 'default', yamlContent: string = '', kind: string) => {\n      const yaml = sanitizeYamlContent ? sanitizeYamlContent(id, yamlContent, kind) : yamlContent;\n      editor.setValue(yaml);\n    },\n    [editor, sanitizeYamlContent],\n  );\n\n  const downloadYamlContent = React.useCallback(\n    (id: string = 'default', yamlContent: string = '', kind: string) => {\n      try {\n        const yaml = sanitizeYamlContent ? sanitizeYamlContent(id, yamlContent, kind) : yamlContent;\n        downloadYaml(yaml);\n      } catch (e) {\n        downloadYaml(yamlContent);\n      }\n    },\n    [sanitizeYamlContent],\n  );\n\n  return (\n    <ResourceSidebar\n      kindObj={model}\n      samples={samples}\n      snippets={snippets}\n      schema={schema}\n      sidebarLabel={sidebarLabel}\n      loadSampleYaml={replaceYamlContent}\n      insertSnippetYaml={insertYamlContent}\n      downloadSampleYaml={downloadYamlContent}\n      toggleSidebar={toggleSidebar}\n    />\n  );\n};\n\nexport default CodeEditorSidebar;\n","import { saveAs } from 'file-saver';\nimport { safeLoad } from 'js-yaml';\n\nexport const downloadYaml = (data: BlobPart) => {\n  const blob = new Blob([data], { type: 'text/yaml;charset=utf-8' });\n  let filename = 'k8s-object.yaml';\n  try {\n    const obj = safeLoad(data);\n    if (obj.kind) {\n      filename = `${obj.kind.toLowerCase()}-${obj.metadata.name}.yaml`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not parse YAML file:', e);\n  }\n  saveAs(blob, filename);\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Breadcrumb, BreadcrumbItem, Button, TextContent } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { CamelCaseWrap } from '@console/dynamic-plugin-sdk';\nimport {\n  getDefinitionKey,\n  getSwaggerPath,\n  K8sKind,\n  SwaggerDefinition,\n  SwaggerDefinitions,\n  fetchSwagger,\n} from '../../module/k8s';\nimport { EmptyBox, LinkifyExternal } from '../utils';\n\nconst getRef = (definition: SwaggerDefinition): string => {\n  const ref = definition.$ref || _.get(definition, 'items.$ref');\n  const re = /^#\\/definitions\\//;\n  // Only follow JSON pointers, not external URI references.\n  return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n\nexport const ExploreType: React.FC<ExploreTypeProps> = (props) => {\n  // Track the previously selected items to build breadcrumbs. Each history\n  // entry contains the name, description, and path to the definition in the\n  // OpenAPI document.\n  const [drilldownHistory, setDrilldownHistory] = React.useState([]);\n  const { kindObj, schema } = props;\n  const { t } = useTranslation();\n  const [allDefinitions, setAllDefinitions] = React.useState<SwaggerDefinitions>(null);\n\n  React.useEffect(() => {\n    if (kindObj) {\n      fetchSwagger()\n        .then((response) => {\n          setAllDefinitions(response);\n        })\n        .catch((err) => {\n          // eslint-disable-next-line no-console\n          console.error('Could not fetch swagger definitions', err);\n        });\n    } else if (schema) {\n      setAllDefinitions({ 'custom-schema': schema });\n    }\n  }, [kindObj, schema]);\n\n  if (!kindObj && !schema) {\n    return null;\n  }\n\n  if (!allDefinitions) {\n    return null;\n  }\n  const currentSelection = _.last(drilldownHistory);\n  // Show the current selected property or the top-level definition for the kind.\n  const currentPath = currentSelection\n    ? currentSelection.path\n    : [kindObj ? getDefinitionKey(kindObj, allDefinitions) : 'custom-schema'];\n  const currentDefinition: SwaggerDefinition = _.get(allDefinitions, currentPath);\n  const currentProperties =\n    currentDefinition?.properties ||\n    currentDefinition?.items?.properties ||\n    currentDefinition?.definitions;\n\n  // Prefer the description saved in `currentSelection`. It won't always be defined in the definition itself.\n  const description = currentSelection\n    ? currentSelection?.description\n    : currentDefinition?.description;\n  const required = new Set(currentDefinition?.required || []);\n  const kindLabel = kindObj?.labelKey ? t(kindObj.labelKey) : kindObj?.kind;\n  const breadcrumbs = drilldownHistory.length\n    ? [kindObj ? kindLabel : t('public~Schema'), ..._.map(drilldownHistory, 'name')]\n    : [];\n\n  const drilldown = (\n    e: React.MouseEvent<HTMLButtonElement>,\n    name: string,\n    desc: string,\n    path: string[],\n  ) => {\n    e.preventDefault();\n    setDrilldownHistory([...drilldownHistory, { name, description: desc, path }]);\n    if (props.scrollTop) {\n      props.scrollTop();\n    }\n  };\n\n  const breadcrumbClicked = (e: React.MouseEvent<HTMLButtonElement>, i: number) => {\n    e.preventDefault();\n    setDrilldownHistory(_.take(drilldownHistory, i));\n  };\n\n  // Get the path in the swagger document to additional property details for drilldown.\n  // This can be\n  // - A reference to another top-level definition\n  // - Inline property declartions\n  // - Inline property declartions for array items\n  const getDrilldownPath = (name: string): string[] => {\n    const path = kindObj\n      ? currentDefinition.items\n        ? getSwaggerPath(allDefinitions, [...currentPath, 'items'], name, true)\n        : getSwaggerPath(allDefinitions, currentPath, name, true)\n      : [...currentPath, 'properties', name];\n\n    // Only allow drilldown if the reference has additional properties to explore.\n    const child = _.get(allDefinitions, path) as SwaggerDefinition;\n    return _.has(child, 'properties') || _.has(child, 'items.properties') ? path : null;\n  };\n\n  // Get the type to display for a property reference.\n  const getTypeForRef = (ref: string): string =>\n    _.get(allDefinitions, [ref, 'format']) || _.get(allDefinitions, [ref, 'type']);\n\n  return (\n    <>\n      {!_.isEmpty(breadcrumbs) && (\n        <Breadcrumb className=\"co-breadcrumb co-break-word\">\n          {breadcrumbs.map((crumb, i) => {\n            const isLast = i === breadcrumbs.length - 1;\n            return (\n              <BreadcrumbItem key={i} isActive={isLast}>\n                {isLast ? (\n                  crumb\n                ) : (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => breadcrumbClicked(e, i)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    {crumb}\n                  </Button>\n                )}\n              </BreadcrumbItem>\n            );\n          })}\n        </Breadcrumb>\n      )}\n      <TextContent>\n        {description && (\n          <p className=\"co-break-word co-pre-wrap\">\n            <LinkifyExternal>{description}</LinkifyExternal>\n          </p>\n        )}\n        {_.isEmpty(currentProperties) ? (\n          <EmptyBox label={t('public~Properties')} />\n        ) : (\n          <ul className=\"co-resource-sidebar-list pf-v5-c-list\">\n            {_.map(currentProperties, (definition: SwaggerDefinition, name: string) => {\n              const path = getDrilldownPath(name);\n              const definitionType = definition.type || getTypeForRef(getRef(definition));\n              const definitionTypeStr = Array.isArray(definitionType)\n                ? definitionType.join(' ')\n                : definitionType;\n\n              return (\n                <li key={name} className=\"co-resource-sidebar-item\">\n                  <h5 className=\"co-resource-sidebar-item__header co-break-word\">\n                    <CamelCaseWrap value={name} />\n                    &nbsp;\n                    <small>\n                      <span className=\"co-break-word\">{definitionTypeStr}</span>\n                      {required.has(name) && <> &ndash; required</>}\n                    </small>\n                  </h5>\n                  {definition.description && (\n                    <p className=\"co-break-word co-pre-wrap\">\n                      <LinkifyExternal>{definition.description}</LinkifyExternal>\n                    </p>\n                  )}\n                  {path && (\n                    <Button\n                      type=\"button\"\n                      onClick={(e) => drilldown(e, name, definition.description, path)}\n                      isInline\n                      variant=\"link\"\n                    >\n                      {t('public~View details')}\n                    </Button>\n                  )}\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </TextContent>\n    </>\n  );\n};\n\ntype ExploreTypeProps = {\n  kindObj: K8sKind;\n  schema?: any;\n  scrollTop?: () => void;\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport CloseButton from '@console/shared/src/components/close-button';\n\nimport { definitionFor, K8sKind } from '../../module/k8s';\nimport {\n  ResourceSidebarSnippets,\n  ResourceSidebarSamples,\n  LoadSampleYaml,\n  DownloadSampleYaml,\n} from './resource-sidebar-samples';\nimport { ExploreType } from './explore-type-sidebar';\nimport { SimpleTabNav, Tab } from '../utils';\nimport { Sample } from '@console/shared';\n\nconst sidebarScrollTop = () => {\n  document.getElementsByClassName('co-p-has-sidebar__sidebar')[0].scrollTop = 0;\n};\n\nconst ResourceSidebarWrapper: React.FC<{\n  label: string;\n  toggleSidebar: () => void;\n}> = (props) => {\n  const { t } = useTranslation();\n  const { label, children, toggleSidebar } = props;\n\n  return (\n    <div\n      className=\"co-p-has-sidebar__sidebar co-p-has-sidebar__sidebar--bordered hidden-sm hidden-xs\"\n      data-test=\"resource-sidebar\"\n    >\n      <div className=\"co-m-pane__body co-p-has-sidebar__sidebar-body\">\n        <CloseButton\n          additionalClassName=\"co-p-has-sidebar__close-button\"\n          ariaLabel={t('public~Close')}\n          onClick={toggleSidebar}\n        />\n        <h2 className=\"co-p-has-sidebar__sidebar-heading text-capitalize\">{label}</h2>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nconst ResourceSchema: React.FC<{ kindObj: K8sKind; schema: any }> = ({ kindObj, schema }) => (\n  <ExploreType kindObj={kindObj} schema={schema} scrollTop={sidebarScrollTop} />\n);\n\nconst ResourceSamples: React.FC<{\n  samples: Sample[];\n  loadSampleYaml: LoadSampleYaml;\n  downloadSampleYaml: DownloadSampleYaml;\n  kindObj: K8sKind;\n}> = ({ samples, kindObj, downloadSampleYaml, loadSampleYaml }) => (\n  <ResourceSidebarSamples\n    samples={samples}\n    kindObj={kindObj}\n    downloadSampleYaml={downloadSampleYaml}\n    loadSampleYaml={loadSampleYaml}\n  />\n);\n\nconst ResourceSnippets: React.FC<{\n  snippets: Sample[];\n  insertSnippetYaml(id: string, yaml: string, reference: string);\n}> = ({ snippets, insertSnippetYaml }) => (\n  <ResourceSidebarSnippets snippets={snippets} insertSnippetYaml={insertSnippetYaml} />\n);\n\nexport const ResourceSidebar: React.FC<{\n  kindObj: K8sKind;\n  downloadSampleYaml: DownloadSampleYaml;\n  schema: any;\n  sidebarLabel: string;\n  loadSampleYaml: LoadSampleYaml;\n  insertSnippetYaml: (id: string, yaml: string, reference: string) => void;\n  toggleSidebar: () => void;\n  samples: Sample[];\n  snippets: Sample[];\n}> = (props) => {\n  const { t } = useTranslation();\n  const {\n    downloadSampleYaml,\n    kindObj,\n    schema,\n    sidebarLabel,\n    loadSampleYaml,\n    insertSnippetYaml,\n    toggleSidebar,\n    samples,\n    snippets,\n  } = props;\n  if (!kindObj && !schema) {\n    return null;\n  }\n\n  const kindLabel = kindObj?.labelKey ? t(kindObj.labelKey) : kindObj?.label;\n  const label = sidebarLabel ? sidebarLabel : kindLabel;\n\n  const showSamples = !_.isEmpty(samples);\n  const showSnippets = !_.isEmpty(snippets);\n\n  const definition = kindObj ? definitionFor(kindObj) : { properties: [] };\n  const showSchema = schema || (definition && !_.isEmpty(definition.properties));\n\n  let tabs: Tab[] = [];\n  if (showSamples) {\n    tabs.push({\n      name: t('public~Samples'),\n      component: ResourceSamples,\n    });\n  }\n  if (showSnippets) {\n    tabs.push({\n      name: t('public~Snippets'),\n      component: ResourceSnippets,\n    });\n  }\n  if (showSchema) {\n    tabs = [\n      {\n        name: t('public~Schema'),\n        component: ResourceSchema,\n      },\n      ...tabs,\n    ];\n  }\n\n  return (\n    <ResourceSidebarWrapper label={label} toggleSidebar={toggleSidebar}>\n      {tabs.length > 0 ? (\n        <SimpleTabNav\n          tabs={tabs}\n          tabProps={{\n            downloadSampleYaml,\n            kindObj,\n            schema,\n            loadSampleYaml,\n            insertSnippetYaml,\n            samples,\n            snippets,\n          }}\n          additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar\"\n        />\n      ) : (\n        <ResourceSchema schema={schema} kindObj={kindObj} />\n      )}\n    </ResourceSidebarWrapper>\n  );\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Button, Level, LevelItem } from '@patternfly/react-core';\nimport MonacoEditor from 'react-monaco-editor';\nimport { ThemeContext } from '@console/internal/components/ThemeProvider';\nimport { ChevronDownIcon } from '@patternfly/react-icons/dist/esm/icons/chevron-down-icon';\nimport { ChevronRightIcon } from '@patternfly/react-icons/dist/esm/icons/chevron-right-icon';\nimport { DownloadIcon } from '@patternfly/react-icons/dist/esm/icons/download-icon';\nimport { PasteIcon } from '@patternfly/react-icons/dist/esm/icons/paste-icon';\nimport { Sample } from '@console/shared';\nimport { useTranslation } from 'react-i18next';\n\nimport { K8sKind, referenceFor } from '../../module/k8s';\nimport { FirehoseResult } from '../utils';\n\nconst ResourceSidebarSample: React.FC<ResourceSidebarSampleProps> = ({\n  sample,\n  loadSampleYaml,\n  downloadSampleYaml,\n}) => {\n  const { highlightText, title, img, description, id, yaml, targetResource } = sample;\n  const reference = referenceFor(targetResource);\n  const { t } = useTranslation();\n  return (\n    <li className=\"co-resource-sidebar-item\">\n      <h3 className=\"h4\">\n        <span className=\"text-uppercase\">{highlightText}</span> {title}\n      </h3>\n      {img && <img src={img} className=\"co-resource-sidebar-item__img img-responsive\" />}\n      <p>{description}</p>\n      <Level>\n        <LevelItem>\n          <Button\n            type=\"button\"\n            variant=\"link\"\n            data-test=\"load-sample\"\n            isInline\n            onClick={() => loadSampleYaml(id, yaml, reference)}\n          >\n            <PasteIcon className=\"co-icon-space-r\" />\n            {t('public~Try it')}\n          </Button>\n        </LevelItem>\n        <LevelItem>\n          <Button\n            type=\"button\"\n            variant=\"link\"\n            data-test=\"download-sample\"\n            isInline\n            onClick={() => downloadSampleYaml(id, yaml, reference)}\n          >\n            <DownloadIcon className=\"co-icon-space-r\" />\n            {t('public~Download YAML')}\n          </Button>\n        </LevelItem>\n      </Level>\n    </li>\n  );\n};\n\nconst lineHeight = 18;\nconst PreviewYAML = ({ maxPreviewLines = 20, yaml }) => {\n  const theme = React.useContext(ThemeContext);\n\n  return (\n    <div style={{ paddingTop: 10 }}>\n      <MonacoEditor\n        height={Math.min(yaml.split('\\n').length, maxPreviewLines) * lineHeight}\n        language=\"yaml\"\n        value={yaml}\n        theme={theme === 'light' ? 'console-light' : 'console-dark'}\n        options={{\n          lineHeight,\n          readOnly: true,\n          folding: false,\n          minimap: { enabled: false },\n          scrollBeyondLastLine: false,\n        }}\n      />\n    </div>\n  );\n};\n\ninterface ResourceSidebarSnippetProps {\n  snippet: Sample;\n  insertSnippetYaml: (id: string, yaml: string, reference: string) => void;\n}\n\nconst ResourceSidebarSnippet: React.FC<ResourceSidebarSnippetProps> = ({\n  snippet,\n  insertSnippetYaml,\n}) => {\n  const { highlightText, title, id, yaml, lazyYaml, targetResource, description } = snippet;\n\n  const [yamlPreview, setYamlPreview] = React.useState<string>(yaml);\n  const [yamlPreviewOpen, setYamlPreviewOpen] = React.useState(false);\n\n  const resolveYaml = async (callback: (resolvedYaml: string) => void) => {\n    if (yaml) {\n      callback(yaml);\n    } else if (lazyYaml) {\n      try {\n        callback(await lazyYaml());\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(`Error while running lazy yaml snippet ${id} (${title})`, error);\n      }\n    }\n  };\n\n  const insertSnippet = () => {\n    const reference = referenceFor(targetResource);\n    resolveYaml((resolvedYaml) => insertSnippetYaml(id, resolvedYaml, reference));\n  };\n\n  const toggleYamlPreview = () => {\n    setYamlPreviewOpen((open) => !open);\n    if (!yamlPreview && !yamlPreviewOpen) {\n      resolveYaml((resolvedYaml) => setYamlPreview(resolvedYaml));\n    }\n  };\n\n  const { t } = useTranslation();\n\n  return (\n    <li className=\"co-resource-sidebar-item\">\n      <h3 className=\"h4\">\n        <span className=\"text-uppercase\">{highlightText}</span> {title}\n      </h3>\n      <p>{description}</p>\n      <Level>\n        <LevelItem>\n          <Button type=\"button\" variant=\"link\" isInline onClick={insertSnippet}>\n            <PasteIcon className=\"co-icon-space-r\" />\n            {t('public~Insert snippet')}\n          </Button>\n        </LevelItem>\n        <LevelItem>\n          <Button type=\"button\" variant=\"link\" isInline onClick={toggleYamlPreview}>\n            {yamlPreviewOpen ? (\n              <>\n                {t('public~Hide YAML')}\n                <ChevronDownIcon className=\"co-icon-space-l\" />\n              </>\n            ) : (\n              <>\n                {t('public~Show YAML')}\n                <ChevronRightIcon className=\"co-icon-space-l\" />\n              </>\n            )}\n          </Button>\n        </LevelItem>\n      </Level>\n      {yamlPreviewOpen && yamlPreview && <PreviewYAML yaml={yamlPreview} />}\n    </li>\n  );\n};\n\ninterface ResourceSidebarSnippetsProps {\n  snippets: Sample[];\n  insertSnippetYaml(id: string, yaml: string, reference: string);\n}\n\nexport const ResourceSidebarSnippets: React.FC<ResourceSidebarSnippetsProps> = ({\n  snippets,\n  insertSnippetYaml,\n}) => {\n  return (\n    <ul className=\"co-resource-sidebar-list\" style={{ listStyle: 'none', paddingLeft: 0 }}>\n      {_.map(_.sortBy(snippets, 'title'), (snippet) => (\n        <ResourceSidebarSnippet\n          key={snippet.id}\n          snippet={snippet}\n          insertSnippetYaml={insertSnippetYaml}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport const ResourceSidebarSamples: React.FC<ResourceSidebarSamplesProps> = ({\n  samples,\n  loadSampleYaml,\n  downloadSampleYaml,\n}) => {\n  return (\n    <ol className=\"co-resource-sidebar-list\" data-test=\"resource-samples-list\">\n      {_.map(_.sortBy(samples, 'title'), (sample) => (\n        <ResourceSidebarSample\n          key={sample.id}\n          sample={sample}\n          loadSampleYaml={loadSampleYaml}\n          downloadSampleYaml={downloadSampleYaml}\n        />\n      ))}\n    </ol>\n  );\n};\n\nexport type LoadSampleYaml = (id: string, yaml: string, kind: string) => void;\n\nexport type DownloadSampleYaml = (id: string, yaml: string, kind: string) => void;\n\ntype ResourceSidebarSampleProps = {\n  sample: Sample;\n  loadSampleYaml: LoadSampleYaml;\n  downloadSampleYaml: DownloadSampleYaml;\n};\n\ntype ResourceSidebarSamplesProps = {\n  samples: Sample[];\n  loadSampleYaml: LoadSampleYaml;\n  downloadSampleYaml: DownloadSampleYaml;\n  yamlSamplesList?: FirehoseResult;\n  kindObj: K8sKind;\n};\n"],"sourceRoot":""}