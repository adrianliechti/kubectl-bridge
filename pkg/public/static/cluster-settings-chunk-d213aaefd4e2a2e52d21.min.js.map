{"version":3,"sources":["webpack:///./public/components/cluster-settings/cluster-operator.tsx","webpack:///./public/components/cluster-settings/cluster-settings.tsx","webpack:///./public/components/cluster-settings/cluster-status.tsx","webpack:///./public/components/cluster-settings/related-objects.tsx"],"names":["clusterOperatorReference","OperatorStatusIconAndLabel","status","icon","Available","Progressing","Degraded","CannotUpdate","Unavailable","Unknown","getIcon","tableColumnClasses","columnClass","ClusterOperatorTableRow","obj","message","operatorVersion","className","kind","name","metadata","namespace","ClusterOperatorList","props","t","labelPlural","Header","title","sortField","transforms","sortFunc","Row","virtualize","UpdateInProgressAlert","cv","updateCondition","True","isInline","variant","ClusterOperatorPage","filters","filterGroupName","type","reducer","items","id","ListComponent","canCreate","rowFilters","OperandVersions","versions","label","version","i","key","ClusterOperatorDetails","conditions","length","text","resource","ClusterOperatorDetailsPage","location","pages","details","editYaml","href","nameKey","component","breadcrumbsFor","labelPluralKey","path","pathname","clusterAutoscalerReference","getMCPByName","machineConfigPools","find","mcp","calculatePercentage","numerator","denominator","Math","round","CurrentChannel","canUpgrade","spec","channel","onClick","CurrentVersion","desiredVersion","lastVersion","UpdateLink","workerMachineConfigPoolIsEditable","group","apiGroup","plural","verb","worker","hasNotRecommended","ErrorRetrieving","Failing","UpdatesAvailable","Updating","UpToDate","CurrentVersionHeader","ChannelDocLink","upgradeURL","understandingUpgradeChannels","ChannelHeader","p","Channel","children","endOfLife","ChannelLine","start","ChannelName","current","ChannelPath","ChannelVersion","updateBlocked","test","UpdateBlockedLabel","color","ChannelVersionDot","releaseNotesLink","headerContent","bodyContent","UpdatesBar","UpdatesGroup","divided","UpdatesProgress","UpdatesType","NodesUpdatesGroup","hideIfComplete","machineConfigPool","updateStartedTime","machineConfigOperator","machineConfigOperatorLoaded","renderedConfig","renderedConfigLoaded","configuration","mcpName","machineConfigPoolIsEditable","isMaster","isPaused","renderedConfigIsUpdated","annotations","getReleaseImageVersion","MCOIsUpdated","MCPisUpdated","some","c","updatedMachineCountReady","MCPUpdatingTime","updatingCondition","condition","lastTransitionTime","getUpdatingTimeForMCP","totalMCPNodes","machineCount","updatedMCPNodes","updatedMachineCount","percentMCPNodes","isUpdated","nodeRoleFilterValue","to","master","Master","resource2","value","size","sm","success","catch","err","error","OtherNodes","otherNodes","filter","sort","map","uid","UpdatesGraph","availableUpdates","newestVersion","minorVersionIsNewer","secondNewestVersion","currentChannel","currentPrefix","prefix","similarChannels","newerChannel","newestVersionIsBlocked","ClusterOperatorsResource","isList","MachineConfigPoolsResource","ClusterOperatorsLink","onCancel","queryString","UpdateInProgress","workerMachineConfigPool","clusterOperators","totalOperatorsCount","updatedOperatorsCount","operator","getUpdatedOperatorsCount","percentOperators","masterMachinePoolConfig","Worker","ClusterServiceVersionResource","ClusterNotUpgradeableAlert","clusterServiceVersions","notUpgradeableClusterOperatorsPresent","notUpgradeableCSVsPresent","clusterUpgradeableFalseCondition","currentVersion","currentVersionParsed","currentMajorMinorVersion","major","minor","newerUpdate","newerUpdateParsed","nextMajorMinorVersion","actionLinks","content","inline","options","simplifiedAutoLink","MachineConfigPoolsArePausedAlert","clusterVersion","pausedMCPs","customIcon","Promise","all","ClusterSettingsAlerts","ClusterVersionDetailsTable","autoscalers","history","clusterID","desiredImage","imageParts","split","releaseNotes","serviceLevelTitle","desiredHistory","update","startedTime","getStartedTimeForCVDesiredVersion","URLSearchParams","window","search","has","then","isPlain","UpdatingAndFailing","SERVER_FLAGS","branding","loading","autoscaler","state","timestamp","completionTime","ClusterOperatorTabPage","autoFocus","showTitle","ClusterSettingsPage","hasClusterAutoscaler","CLUSTER_AUTOSCALER","resources","prop","push","optional","resourceKeys","titleProviderValues","telemetryPrefix","titlePrefix","Provider","ClusterVersionConditionsLink","smooth","StatusMessagePopover","InvalidMessage","op","cancelUpdate","ReleaseNotAcceptedMessage","releaseNotAcceptedCondition","ReleaseAccepted","False","UpdatesAvailableMessage","FailingMessageText","failingCondition","UpdatingMessageText","UpdatingMessage","isFailing","ErrorRetrievingMessage","retrievedUpdatesCondition","RetrievedUpdates","reason","FailingMessage","UpToDateMessage","UpdateStatus","Invalid","ReleaseNotAccepted","ResourceObjectName","gsv","customData","findModel","model","EmptyMessage","RelatedObjects","NoDataEmptyMsg","relatedObject","relatedObjects","data"],"mappings":"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","file":"cluster-settings-chunk-d213aaefd4e2a2e52d21.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { SyncAltIcon } from '@patternfly/react-icons/dist/esm/icons/sync-alt-icon';\nimport { UnknownIcon } from '@patternfly/react-icons/dist/esm/icons/unknown-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { ClusterOperatorModel } from '../../models';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from '../factory';\nimport { Conditions } from '../conditions';\nimport {\n  getClusterOperatorStatus,\n  getClusterOperatorVersion,\n  getClusterVersionCondition,\n  getStatusAndMessage,\n  ClusterOperator,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  K8sResourceConditionStatus,\n  K8sResourceKindReference,\n  OperandVersion,\n  OperatorStatus,\n  referenceForModel,\n} from '../../module/k8s';\nimport {\n  navFactory,\n  EmptyBox,\n  Kebab,\n  LinkifyExternal,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from '../utils';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport RelatedObjectsPage from './related-objects';\nimport { ClusterVersionConditionsLink, UpdatingMessageText } from './cluster-status';\n\nexport const clusterOperatorReference: K8sResourceKindReference = referenceForModel(\n  ClusterOperatorModel,\n);\n\nconst getIcon = (status: OperatorStatus) => {\n  return {\n    [OperatorStatus.Available]: <GreenCheckCircleIcon />,\n    [OperatorStatus.Progressing]: <SyncAltIcon />,\n    [OperatorStatus.Degraded]: <YellowExclamationTriangleIcon />,\n    [OperatorStatus.CannotUpdate]: <YellowExclamationTriangleIcon />,\n    [OperatorStatus.Unavailable]: <RedExclamationCircleIcon />,\n    [OperatorStatus.Unknown]: <UnknownIcon />,\n  }[status];\n};\n\nconst OperatorStatusIconAndLabel: React.FC<OperatorStatusIconAndLabelProps> = ({ status }) => {\n  const icon = getIcon(status);\n  return (\n    <>\n      {icon} {status}\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  '',\n  'pf-v5-u-w-16-on-xl',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-33-on-2xl',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-33-on-2xl',\n  Kebab.columnClass,\n];\n\nconst ClusterOperatorTableRow: React.FC<RowFunctionArgs<ClusterOperator>> = ({ obj }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const operatorVersion = getClusterOperatorVersion(obj);\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={clusterOperatorReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <OperatorStatusIconAndLabel status={status} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{operatorVersion || '-'}</TableData>\n      <TableData\n        className={classNames(\n          tableColumnClasses[3],\n          'co-break-word',\n          'co-line-clamp',\n          'co-pre-line',\n        )}\n      >\n        <LinkifyExternal>{message || '-'}</LinkifyExternal>\n      </TableData>\n    </>\n  );\n};\n\nexport const ClusterOperatorList: React.FC = (props) => {\n  const { t } = useTranslation();\n  const ClusterOperatorTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Status'),\n        sortFunc: 'getClusterOperatorStatus',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Version'),\n        sortFunc: 'getClusterOperatorVersion',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Message'),\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={ClusterOperatorModel.labelPlural}\n      Header={ClusterOperatorTableHeader}\n      Row={ClusterOperatorTableRow}\n      virtualize\n    />\n  );\n};\n\nconst UpdateInProgressAlert: React.FC<UpdateInProgressAlertProps> = ({ cv }) => {\n  const updateCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Progressing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      {updateCondition && (\n        <div className=\"co-m-pane__body co-m-pane__body--section-heading\">\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"info\"\n            title={<UpdatingMessageText cv={cv} />}\n          >\n            <ClusterVersionConditionsLink cv={cv} />\n          </Alert>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const ClusterOperatorPage: React.FC<ClusterOperatorPageProps> = (props) => {\n  const { t } = useTranslation();\n  const filters = [\n    {\n      filterGroupName: t('public~Status'),\n      type: 'cluster-operator-status',\n      reducer: getClusterOperatorStatus,\n      items: [\n        { id: 'Available', title: t('public~Available') },\n        { id: 'Progressing', title: t('public~Progressing') },\n        { id: 'Degraded', title: t('public~Degraded') },\n        { id: 'Cannot update', title: t('public~Cannot update') },\n        { id: 'Unavailable', title: t('public~Unavailable') },\n        { id: 'Unknown', title: t('public~Unknown') },\n      ],\n    },\n  ];\n  return (\n    <>\n      <UpdateInProgressAlert cv={props.cv} />\n      <ListPage\n        {...props}\n        title={ClusterOperatorModel.labelPlural}\n        kind={clusterOperatorReference}\n        ListComponent={ClusterOperatorList}\n        canCreate={false}\n        rowFilters={filters}\n      />\n    </>\n  );\n};\n\nconst OperandVersions: React.FC<OperandVersionsProps> = ({ versions }) => {\n  const { t } = useTranslation();\n  return _.isEmpty(versions) ? (\n    <EmptyBox label={t('public~versions')} />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n        <thead className=\"pf-v5-c-table__thead\">\n          <tr className=\"pf-v5-c-table__tr\">\n            <th className=\"pf-v5-c-table__th\">{t('public~Name')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('public~Version')}</th>\n          </tr>\n        </thead>\n        <tbody className=\"pf-v5-c-table__tbody\">\n          {_.map(versions, ({ name, version }, i) => (\n            <tr className=\"pf-v5-c-table__tr\" key={i}>\n              <td className=\"pf-v5-c-table__td\">{name}</td>\n              <td className=\"pf-v5-c-table__td\">{version}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst ClusterOperatorDetails: React.FC<ClusterOperatorDetailsProps> = ({ obj }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const versions: OperandVersion[] = _.get(obj, 'status.versions', []);\n  const conditions = _.get(obj, 'status.conditions', []);\n  // Show the operator version in the details if it's the only version.\n  const operatorVersion =\n    versions.length === 1 && versions[0].name === 'operator' ? versions[0].version : null;\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~ClusterOperator details')} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              {operatorVersion && (\n                <>\n                  <dt>{t('public~Version')}</dt>\n                  <dd>{operatorVersion}</dd>\n                </>\n              )}\n              <dt>{t('public~Status')}</dt>\n              <dd>\n                <OperatorStatusIconAndLabel status={status} />\n              </dd>\n              <dt>{t('public~Message')}</dt>\n              <dd className=\"co-pre-line\">\n                <LinkifyExternal>{message || '-'}</LinkifyExternal>\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={conditions} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Operand versions')} />\n        <OperandVersions versions={versions} />\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorDetailsPage: React.FC = (props) => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  return (\n    <DetailsPage\n      {...props}\n      kind={clusterOperatorReference}\n      pages={[\n        navFactory.details(ClusterOperatorDetails),\n        navFactory.editYaml(),\n        {\n          href: 'related-objects',\n          // t('public~Related objects')\n          nameKey: 'public~Related objects',\n          component: RelatedObjectsPage,\n        },\n      ]}\n      breadcrumbsFor={() => [\n        {\n          name: t(ClusterOperatorModel.labelPluralKey),\n          path: '/settings/cluster/clusteroperators',\n        },\n        {\n          name: t('public~ClusterOperator details'),\n          path: location.pathname,\n        },\n      ]}\n    />\n  );\n};\n\ntype OperatorStatusIconAndLabelProps = {\n  status: OperatorStatus;\n};\n\ntype ClusterOperatorPageProps = {\n  cv: ClusterVersionKind;\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype OperandVersionsProps = {\n  versions: OperandVersion[];\n};\n\ntype ClusterOperatorDetailsProps = {\n  obj: ClusterOperator;\n};\n\ntype UpdateInProgressAlertProps = {\n  cv: ClusterVersionKind;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport * as semver from 'semver';\nimport {\n  Alert,\n  AlertActionLink,\n  Button,\n  Flex,\n  FlexItem,\n  Label,\n  Popover,\n  Progress,\n  ProgressSize,\n  ProgressVariant,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useTranslation } from 'react-i18next';\n\nimport { AddCircleOIcon } from '@patternfly/react-icons/dist/esm/icons/add-circle-o-icon';\nimport { PauseCircleIcon } from '@patternfly/react-icons/dist/esm/icons/pause-circle-icon';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\n\nimport { removeQueryArgument } from '@console/internal/components/utils/router';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport {\n  ClusterServiceVersionKind,\n  ClusterServiceVersionModel,\n} from '@console/operator-lifecycle-manager';\nimport { WatchK8sResource } from '@console/dynamic-plugin-sdk';\n\nimport { ClusterOperatorPage } from './cluster-operator';\nimport {\n  clusterChannelModal,\n  clusterMoreUpdatesModal,\n  clusterUpdateModal,\n  errorModal,\n} from '../modals';\nimport { GlobalConfigPage } from './global-config';\nimport {\n  ClusterAutoscalerModel,\n  ClusterOperatorModel,\n  ClusterVersionModel,\n  MachineConfigPoolModel,\n  MachineConfigModel,\n  NodeModel,\n} from '../../models';\nimport {\n  clusterIsUpToDateOrUpdateAvailable,\n  ClusterOperator,\n  ClusterUpdateStatus,\n  ClusterVersionKind,\n  clusterVersionReference,\n  getClusterID,\n  getClusterOperatorVersion,\n  getClusterUpdateStatus,\n  getConditionUpgradeableFalse,\n  getCurrentVersion,\n  getDesiredClusterVersion,\n  getLastCompletedUpdate,\n  getMCPsToPausePromises,\n  getNewerClusterVersionChannel,\n  getNewerMinorVersionUpdate,\n  getNotUpgradeableResources,\n  getOCMLink,\n  getReleaseNotesLink,\n  getSimilarClusterVersionChannels,\n  getSortedAvailableUpdates,\n  isMCPMaster,\n  isMCPPaused,\n  isMCPWorker,\n  isMinorVersionNewer,\n  K8sResourceConditionStatus,\n  K8sResourceKind,\n  MachineConfigPoolConditionType,\n  MachineConfigPoolKind,\n  NodeTypeNames,\n  NodeTypes,\n  referenceForModel,\n  showReleaseNotes,\n  sortMCPsByCreationTimestamp,\n  splitClusterVersionChannel,\n  UpdateHistory,\n} from '../../module/k8s';\nimport {\n  documentationURLs,\n  EmptyBox,\n  ExternalLink,\n  FieldLevelHelp,\n  Firehose,\n  FirehoseResource,\n  getDocumentationURL,\n  HorizontalNav,\n  isManaged,\n  PageHeading,\n  ReleaseNotesLink,\n  ResourceLink,\n  resourcePathFromModel,\n  SectionHeading,\n  Timestamp,\n  togglePaused,\n  UpstreamConfigDetailsItem,\n  useAccessReview,\n} from '../utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport {\n  isClusterExternallyManaged,\n  useCanClusterUpgrade,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport { PageTitleContext } from '@console/shared/src/components/pagetitle/PageTitleContext';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { FLAGS } from '@console/shared/src/constants';\n\nimport {\n  ServiceLevel,\n  useServiceLevelTitle,\n  ServiceLevelText,\n  ServiceLevelLoading,\n} from '../utils/service-level';\nimport { hasAvailableUpdates, hasNotRecommendedUpdates } from '../../module/k8s/cluster-settings';\nimport { UpdateStatus } from './cluster-status';\n\nexport const clusterAutoscalerReference = referenceForModel(ClusterAutoscalerModel);\n\nconst getMCPByName = (\n  machineConfigPools: MachineConfigPoolKind[],\n  name: string,\n): MachineConfigPoolKind => {\n  return machineConfigPools?.find((mcp) => mcp.metadata.name === name);\n};\n\nconst getStartedTimeForCVDesiredVersion = (\n  cv: ClusterVersionKind,\n  desiredVersion: string,\n): string => {\n  const desiredHistory: UpdateHistory = cv?.status?.history?.find(\n    (update) => update.version === desiredVersion,\n  );\n  return desiredHistory?.startedTime;\n};\n\nconst getUpdatingTimeForMCP = (machineConfigPool: MachineConfigPoolKind): string => {\n  const updatingCondition = machineConfigPool?.status?.conditions.find(\n    (condition) => condition.type === MachineConfigPoolConditionType.Updating,\n  );\n  return updatingCondition?.lastTransitionTime;\n};\n\nconst getUpdatedOperatorsCount = (\n  clusterOperators: ClusterOperator[],\n  desiredVersion: string,\n): number => {\n  return (\n    clusterOperators?.filter((operator) => {\n      return getClusterOperatorVersion(operator) === desiredVersion;\n    })?.length ?? 0\n  );\n};\n\nconst getReleaseImageVersion = (obj: K8sResourceKind): string => {\n  return obj?.metadata?.annotations?.['machineconfiguration.openshift.io/release-image-version'];\n};\n\nconst calculatePercentage = (numerator: number, denominator: number): number =>\n  Math.round((numerator / denominator) * 100);\n\nexport const CurrentChannel: React.FC<CurrentChannelProps> = ({ cv, canUpgrade }) => {\n  const { t } = useTranslation();\n  const label = cv.spec.channel || t('public~Not configured');\n  return canUpgrade ? (\n    <Button\n      type=\"button\"\n      isInline\n      data-test-id=\"current-channel-update-link\"\n      onClick={() => clusterChannelModal({ cv })}\n      variant=\"link\"\n    >\n      {label}\n      <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n    </Button>\n  ) : (\n    <>{label}</>\n  );\n};\n\nexport const CurrentVersion: React.FC<CurrentVersionProps> = ({ cv }) => {\n  const desiredVersion = getDesiredClusterVersion(cv);\n  const lastVersion = getLastCompletedUpdate(cv);\n  const status = getClusterUpdateStatus(cv);\n  const { t } = useTranslation();\n\n  if (clusterIsUpToDateOrUpdateAvailable(status)) {\n    return desiredVersion ? (\n      <>\n        <div>\n          <span className=\"co-select-to-copy\" data-test-id=\"cluster-version\">\n            {desiredVersion}\n          </span>\n        </div>\n        <ReleaseNotesLink version={getCurrentVersion(cv)} />\n      </>\n    ) : (\n      <>\n        <YellowExclamationTriangleIcon />\n        &nbsp;{t('public~Unknown')}\n      </>\n    );\n  }\n\n  return lastVersion ? (\n    <>\n      <div>\n        <span className=\"co-select-to-copy\" data-test-id=\"cluster-version\">\n          {lastVersion}\n        </span>\n      </div>\n      <ReleaseNotesLink version={getLastCompletedUpdate(cv)} />\n    </>\n  ) : (\n    <>{t('public~None')}</>\n  );\n};\n\nexport const UpdateLink: React.FC<CurrentVersionProps> = ({ cv, canUpgrade }) => {\n  // assume if 'worker' is editable, others are too\n  const workerMachineConfigPoolIsEditable = useAccessReview({\n    group: MachineConfigPoolModel.apiGroup,\n    resource: MachineConfigPoolModel.plural,\n    verb: 'patch',\n    name: NodeTypes.worker,\n  });\n  const status = getClusterUpdateStatus(cv);\n  const { t } = useTranslation();\n  const hasNotRecommended = hasNotRecommendedUpdates(cv);\n  return canUpgrade &&\n    (hasAvailableUpdates(cv) || hasNotRecommended) &&\n    (status === ClusterUpdateStatus.ErrorRetrieving ||\n      status === ClusterUpdateStatus.Failing ||\n      status === ClusterUpdateStatus.UpdatesAvailable ||\n      status === ClusterUpdateStatus.Updating ||\n      (status === ClusterUpdateStatus.UpToDate && hasNotRecommended)) &&\n    workerMachineConfigPoolIsEditable ? (\n    <div className=\"co-cluster-settings__details\">\n      <Button\n        variant=\"primary\"\n        type=\"button\"\n        onClick={() => clusterUpdateModal({ cv })}\n        data-test-id=\"cv-update-button\"\n      >\n        {t('public~Select a version')}\n      </Button>\n    </div>\n  ) : null;\n};\n\nexport const CurrentVersionHeader: React.FC<CurrentVersionProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  const { t } = useTranslation();\n  return (\n    <>\n      {clusterIsUpToDateOrUpdateAvailable(status)\n        ? t('public~Current version')\n        : t('public~Last completed version')}\n    </>\n  );\n};\n\nexport const ChannelDocLink: React.FC<{}> = () => {\n  const upgradeURL = getDocumentationURL(documentationURLs.understandingUpgradeChannels);\n  const { t } = useTranslation();\n  return (\n    <ExternalLink href={upgradeURL} text={t('public~Learn more about OpenShift update channels')} />\n  );\n};\n\nconst ChannelHeader: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {t('public~Channel')}\n      <FieldLevelHelp>\n        <TextContent>\n          <Text component={TextVariants.p}>\n            {t(\n              'public~Channels help to control the pace of updates and recommend the appropriate release versions. Update channels are tied to a minor version of OpenShift Container Platform, for example 4.5.',\n            )}\n          </Text>\n          {!isManaged() && (\n            <Text component={TextVariants.p}>\n              <ChannelDocLink />\n            </Text>\n          )}\n        </TextContent>\n      </FieldLevelHelp>\n    </>\n  );\n};\n\nconst Channel: React.FC<ChannelProps> = ({ children, endOfLife }) => {\n  return (\n    <div\n      className={classNames('co-channel', {\n        'co-channel--end-of-life': endOfLife,\n      })}\n      data-test=\"cv-channel\"\n    >\n      {children}\n    </div>\n  );\n};\n\nconst ChannelLine: React.FC<ChannelLineProps> = ({ children, start }) => {\n  return (\n    <li className={classNames('co-channel-line', { 'co-channel-start': start })}>{children}</li>\n  );\n};\n\nexport const ChannelName: React.FC<ChannelNameProps> = ({ children, current }) => {\n  return (\n    <span\n      className={classNames('co-channel-name', {\n        'co-channel-name--current': current,\n      })}\n      data-test=\"cv-channel-name\"\n    >\n      {children}\n    </span>\n  );\n};\n\nconst ChannelPath: React.FC<ChannelPathProps> = ({ children, current }) => {\n  return (\n    <ul\n      className={classNames('co-channel-path', {\n        'co-channel-path--current': current,\n      })}\n    >\n      {children}\n    </ul>\n  );\n};\n\nexport const ChannelVersion: React.FC<ChannelVersionProps> = ({\n  children,\n  current,\n  updateBlocked,\n}) => {\n  const test = 'cv-channel-version';\n  return (\n    <span\n      className={classNames('co-channel-version', {\n        'co-channel-version--current': current,\n        'co-channel-version--update-blocked': updateBlocked,\n      })}\n      data-test={updateBlocked ? `${test}-blocked` : test}\n    >\n      {updateBlocked && (\n        <YellowExclamationTriangleIcon className=\"co-channel-version__warning-icon co-icon-space-r\" />\n      )}\n      {children}\n    </span>\n  );\n};\n\nexport const UpdateBlockedLabel = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Label\n      color=\"orange\"\n      icon={<YellowExclamationTriangleIcon />}\n      className=\"pf-v5-u-ml-sm\"\n      data-test=\"cv-update-blocked\"\n    >\n      {t('public~Update blocked')}\n    </Label>\n  );\n};\n\nconst ChannelVersionDot: React.FC<ChannelVersionDotProps> = ({\n  current,\n  updateBlocked,\n  version,\n}) => {\n  const releaseNotesLink = getReleaseNotesLink(version);\n  const { t } = useTranslation();\n  const test = 'cv-channel-version-dot';\n\n  return releaseNotesLink || updateBlocked ? (\n    <Popover\n      headerContent={\n        <>\n          {t('public~Version')} {version}\n          {updateBlocked && <UpdateBlockedLabel />}\n        </>\n      }\n      bodyContent={\n        <>\n          {updateBlocked && (\n            <p data-test=\"cv-channel-version-dot-blocked-info\">\n              {t(\n                'public~See the alert above the visualization for instructions on how to unblock this version.',\n              )}\n            </p>\n          )}\n          {releaseNotesLink && <ReleaseNotesLink version={version} />}\n        </>\n      }\n    >\n      <Button\n        variant=\"secondary\"\n        className={classNames('co-channel-version-dot', {\n          'co-channel-version-dot--current': current,\n          'co-channel-version-dot--update-blocked': updateBlocked,\n        })}\n        data-test={updateBlocked ? `${test}-blocked` : test}\n      />\n    </Popover>\n  ) : (\n    <div\n      className={classNames('co-channel-version-dot', {\n        'co-channel-version-dot--current': current,\n        'co-channel-version-dot--update-blocked': updateBlocked,\n      })}\n      data-test={test}\n    ></div>\n  );\n};\n\nconst UpdatesBar: React.FC<UpdatesBarProps> = ({ children }) => {\n  return <div className=\"co-cluster-settings__updates-bar\">{children}</div>;\n};\n\nexport const UpdatesGroup: React.FC<UpdatesGroupProps> = ({ children, divided }) => {\n  return (\n    <div\n      className={classNames('co-cluster-settings__updates-group', {\n        'co-cluster-settings__updates-group--divided': divided,\n      })}\n      data-test=\"cv-updates-group\"\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const UpdatesProgress: React.FC<UpdatesProgressProps> = ({ children }) => {\n  return (\n    <div className=\"co-cluster-settings__updates-progress\" data-test=\"cv-updates-progress\">\n      {children}\n    </div>\n  );\n};\n\nconst UpdatesType: React.FC<UpdatesTypeProps> = ({ children }) => {\n  return <div className=\"co-cluster-settings__updates-type\">{children}</div>;\n};\n\nexport const NodesUpdatesGroup: React.FC<NodesUpdatesGroupProps> = ({\n  divided,\n  desiredVersion,\n  hideIfComplete,\n  machineConfigPool,\n  name,\n  updateStartedTime,\n}) => {\n  const [machineConfigOperator, machineConfigOperatorLoaded] = useK8sWatchResource<ClusterOperator>(\n    {\n      kind: referenceForModel(ClusterOperatorModel),\n      name: 'machine-config',\n    },\n  );\n  const [renderedConfig, renderedConfigLoaded] = useK8sWatchResource<K8sResourceKind>({\n    kind: referenceForModel(MachineConfigModel),\n    name: machineConfigPool?.spec?.configuration?.name,\n  });\n  const mcpName = machineConfigPool?.metadata?.name;\n  const machineConfigPoolIsEditable = useAccessReview({\n    group: MachineConfigPoolModel.apiGroup,\n    resource: MachineConfigPoolModel.plural,\n    verb: 'patch',\n    name: mcpName,\n  });\n  const isMaster = isMCPMaster(machineConfigPool);\n  const isPaused = isMCPPaused(machineConfigPool);\n  const renderedConfigIsUpdated = getReleaseImageVersion(renderedConfig) === desiredVersion;\n  const MCOIsUpdated = getClusterOperatorVersion(machineConfigOperator) === desiredVersion;\n  const MCPisUpdated = machineConfigPool?.status?.conditions?.some(\n    (c) => c.type === 'Updated' && c.status === K8sResourceConditionStatus.True,\n  );\n  const updatedMachineCountReady = MCOIsUpdated && MCPisUpdated;\n  const MCPUpdatingTime = getUpdatingTimeForMCP(machineConfigPool);\n  const totalMCPNodes = machineConfigPool?.status?.machineCount || 0;\n  const updatedMCPNodes =\n    updatedMachineCountReady || (MCPUpdatingTime > updateStartedTime && renderedConfigIsUpdated)\n      ? machineConfigPool?.status?.updatedMachineCount\n      : 0;\n  const percentMCPNodes = calculatePercentage(updatedMCPNodes, totalMCPNodes);\n  const isUpdated = percentMCPNodes === 100;\n  const nodeRoleFilterValue = isMaster ? 'control-plane' : mcpName;\n  const { t } = useTranslation();\n  return totalMCPNodes === 0 || (hideIfComplete && isUpdated)\n    ? null\n    : machineConfigOperatorLoaded && renderedConfigLoaded && (\n        <UpdatesGroup divided={divided}>\n          <UpdatesType>\n            <Link to={`/k8s/cluster/nodes?rowFilter-node-role=${nodeRoleFilterValue}`}>\n              {`${name} ${NodeModel.labelPlural}`}\n            </Link>\n            {!isMaster && (\n              <FieldLevelHelp>\n                {t(\n                  'public~{{name}} {{resource}} may continue to update after the update of {{master}} {{resource}} and {{resource2}} are complete.',\n                  {\n                    name,\n                    resource: NodeModel.labelPlural,\n                    master: NodeTypeNames.Master,\n                    resource2: ClusterOperatorModel.labelPlural,\n                  },\n                )}\n              </FieldLevelHelp>\n            )}\n          </UpdatesType>\n          <UpdatesBar>\n            <Progress\n              title={t('public~{{updatedMCPNodes}} of {{totalMCPNodes}}', {\n                updatedMCPNodes,\n                totalMCPNodes,\n              })}\n              value={!_.isNaN(percentMCPNodes) ? percentMCPNodes : null}\n              size={ProgressSize.sm}\n              variant={percentMCPNodes === 100 ? ProgressVariant.success : null}\n            />\n          </UpdatesBar>\n          {!isMaster && !isUpdated && machineConfigPoolIsEditable && (\n            <Button\n              variant=\"secondary\"\n              className=\"pf-v5-u-mt-md\"\n              onClick={() =>\n                togglePaused(MachineConfigPoolModel, machineConfigPool).catch((err) =>\n                  errorModal({ error: err.message }),\n                )\n              }\n              data-test=\"mcp-paused-button\"\n            >\n              {isPaused ? t('public~Resume update') : t('public~Pause update')}\n            </Button>\n          )}\n        </UpdatesGroup>\n      );\n};\n\nconst OtherNodes: React.FC<OtherNodesProps> = ({\n  desiredVersion,\n  hideIfComplete,\n  machineConfigPools,\n  updateStartedTime,\n}) => {\n  const otherNodes = machineConfigPools\n    .filter((mcp) => !isMCPMaster(mcp) && !isMCPWorker(mcp))\n    .sort(sortMCPsByCreationTimestamp);\n  return (\n    <>\n      {otherNodes.map((mcp) => {\n        return (\n          <NodesUpdatesGroup\n            desiredVersion={desiredVersion}\n            divided\n            hideIfComplete={hideIfComplete}\n            key={mcp.metadata.uid}\n            name={mcp.metadata.name}\n            machineConfigPool={mcp}\n            updateStartedTime={updateStartedTime}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport const UpdatesGraph: React.FC<UpdatesGraphProps> = ({ cv }) => {\n  const availableUpdates = getSortedAvailableUpdates(cv);\n  const lastVersion = getLastCompletedUpdate(cv);\n  const newestVersion = availableUpdates[0]?.version;\n  const minorVersionIsNewer = newestVersion\n    ? isMinorVersionNewer(lastVersion, newestVersion)\n    : false;\n  const secondNewestVersion = availableUpdates[1]?.version;\n  const currentChannel = cv.spec.channel;\n  const currentPrefix = splitClusterVersionChannel(currentChannel)?.prefix;\n  const similarChannels = getSimilarClusterVersionChannels(cv, currentPrefix);\n  const newerChannel = getNewerClusterVersionChannel(similarChannels, currentChannel);\n  const clusterUpgradeableFalse = !!getConditionUpgradeableFalse(cv);\n  const newestVersionIsBlocked =\n    clusterUpgradeableFalse && minorVersionIsNewer && !isClusterExternallyManaged();\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"co-cluster-settings__updates-graph\" data-test=\"cv-updates-graph\">\n      <Channel>\n        <ChannelPath current>\n          <ChannelLine>\n            <ChannelVersion current>{lastVersion}</ChannelVersion>\n            <ChannelVersionDot current channel={currentChannel} version={lastVersion} />\n          </ChannelLine>\n          <ChannelLine>\n            {availableUpdates.length === 2 && (\n              <>\n                <ChannelVersion>{secondNewestVersion}</ChannelVersion>\n                <ChannelVersionDot channel={currentChannel} version={secondNewestVersion} />\n              </>\n            )}\n            {availableUpdates.length > 2 && (\n              <Button\n                variant=\"secondary\"\n                className=\"co-channel-more-versions\"\n                onClick={() => clusterMoreUpdatesModal({ cv })}\n                data-test=\"cv-more-updates-button\"\n              >\n                {t('public~+ More')}\n              </Button>\n            )}\n          </ChannelLine>\n          <ChannelLine>\n            {newestVersion && (\n              <>\n                <ChannelVersion updateBlocked={newestVersionIsBlocked}>\n                  {newestVersion}\n                </ChannelVersion>\n                <ChannelVersionDot\n                  channel={currentChannel}\n                  updateBlocked={newestVersionIsBlocked}\n                  version={newestVersion}\n                />\n              </>\n            )}\n          </ChannelLine>\n        </ChannelPath>\n        <ChannelName current>\n          {t('public~{{currentChannel}} channel', { currentChannel })}\n        </ChannelName>\n      </Channel>\n      {newerChannel && (\n        <Channel>\n          <ChannelPath>\n            <ChannelLine start>\n              <div className=\"co-channel-switch\"></div>\n            </ChannelLine>\n            <ChannelLine />\n            <ChannelLine />\n          </ChannelPath>\n          <ChannelName>{t('public~{{newerChannel}} channel', { newerChannel })}</ChannelName>\n        </Channel>\n      )}\n    </div>\n  );\n};\n\nconst ClusterOperatorsResource: WatchK8sResource = {\n  isList: true,\n  kind: referenceForModel(ClusterOperatorModel),\n};\n\nconst MachineConfigPoolsResource: WatchK8sResource = {\n  isList: true,\n  kind: referenceForModel(MachineConfigPoolModel),\n};\n\nexport const ClusterOperatorsLink: React.FC<ClusterOperatorsLinkProps> = ({\n  onCancel,\n  children,\n  queryString,\n}) => (\n  <Link\n    onClick={onCancel}\n    to={\n      queryString\n        ? `/settings/cluster/clusteroperators${queryString}`\n        : '/settings/cluster/clusteroperators'\n    }\n  >\n    {children}\n  </Link>\n);\n\nexport const UpdateInProgress: React.FC<UpdateInProgressProps> = ({\n  desiredVersion,\n  machineConfigPools,\n  workerMachineConfigPool,\n  updateStartedTime,\n}) => {\n  const [clusterOperators] = useK8sWatchResource<ClusterOperator[]>(ClusterOperatorsResource);\n  const totalOperatorsCount = clusterOperators?.length || 0;\n  const updatedOperatorsCount = getUpdatedOperatorsCount(clusterOperators, desiredVersion);\n  const percentOperators = calculatePercentage(updatedOperatorsCount, totalOperatorsCount);\n  const masterMachinePoolConfig = getMCPByName(machineConfigPools, NodeTypes.master);\n  const { t } = useTranslation();\n\n  return (\n    <UpdatesProgress>\n      <UpdatesGroup>\n        <UpdatesType>\n          <ClusterOperatorsLink>{t(ClusterOperatorModel.labelPluralKey)}</ClusterOperatorsLink>\n        </UpdatesType>\n        <UpdatesBar>\n          <Progress\n            title={t('public~{{updatedOperatorsCount}} of {{totalOperatorsCount}}', {\n              updatedOperatorsCount,\n              totalOperatorsCount,\n            })}\n            value={!_.isNaN(percentOperators) ? percentOperators : null}\n            size={ProgressSize.sm}\n            variant={percentOperators === 100 ? ProgressVariant.success : null}\n          />\n        </UpdatesBar>\n      </UpdatesGroup>\n      {masterMachinePoolConfig && (\n        <NodesUpdatesGroup\n          desiredVersion={desiredVersion}\n          machineConfigPool={masterMachinePoolConfig}\n          name={NodeTypeNames.Master}\n          updateStartedTime={updateStartedTime}\n        />\n      )}\n      {workerMachineConfigPool && (\n        <NodesUpdatesGroup\n          desiredVersion={desiredVersion}\n          divided\n          machineConfigPool={workerMachineConfigPool}\n          name={NodeTypeNames.Worker}\n          updateStartedTime={updateStartedTime}\n        />\n      )}\n      {machineConfigPools.length > 2 && (\n        <OtherNodes\n          desiredVersion={desiredVersion}\n          machineConfigPools={machineConfigPools}\n          updateStartedTime={updateStartedTime}\n        />\n      )}\n    </UpdatesProgress>\n  );\n};\n\nconst ClusterServiceVersionResource: WatchK8sResource = {\n  isList: true,\n  kind: referenceForModel(ClusterServiceVersionModel),\n};\n\nexport const ClusterNotUpgradeableAlert: React.FC<ClusterNotUpgradeableAlertProps> = ({\n  cv,\n  onCancel,\n}) => {\n  const [clusterOperators] = useK8sWatchResource<ClusterOperator[]>(ClusterOperatorsResource);\n  const [clusterServiceVersions] = useK8sWatchResource<ClusterServiceVersionKind[]>(\n    ClusterServiceVersionResource,\n  );\n  const { t } = useTranslation();\n  const notUpgradeableClusterOperators = getNotUpgradeableResources(clusterOperators);\n  const notUpgradeableClusterOperatorsPresent = notUpgradeableClusterOperators.length > 0;\n  const notUpgradeableClusterServiceVersions = getNotUpgradeableResources(clusterServiceVersions);\n  const notUpgradeableCSVsPresent = notUpgradeableClusterServiceVersions.length > 0;\n  const clusterUpgradeableFalseCondition = getConditionUpgradeableFalse(cv);\n  const currentVersion = getLastCompletedUpdate(cv);\n  const currentVersionParsed = semver.parse(currentVersion);\n  const currentMajorMinorVersion = `${currentVersionParsed?.major}.${currentVersionParsed?.minor}`;\n  const availableUpdates = getSortedAvailableUpdates(cv);\n  const newerUpdate = getNewerMinorVersionUpdate(currentVersion, availableUpdates);\n  const newerUpdateParsed = semver.parse(newerUpdate?.version);\n  const nextMajorMinorVersion = `${newerUpdateParsed?.major}.${newerUpdateParsed?.minor}`;\n\n  return (\n    <Alert\n      variant=\"warning\"\n      isInline\n      title={\n        currentVersionParsed && newerUpdateParsed\n          ? t(\n              'public~This cluster should not be updated to {{nextMajorMinorVersion}}. You can continue to update to patch releases in {{currentMajorMinorVersion}}.',\n              { nextMajorMinorVersion, currentMajorMinorVersion },\n            )\n          : t('public~This cluster should not be updated to the next minor version.')\n      }\n      className=\"co-alert\"\n      actionLinks={\n        (notUpgradeableClusterOperatorsPresent || notUpgradeableCSVsPresent) && (\n          <Flex>\n            {notUpgradeableClusterOperatorsPresent && (\n              <FlexItem>\n                <ClusterOperatorsLink\n                  onCancel={onCancel}\n                  queryString=\"?rowFilter-cluster-operator-status=Cannot+update\"\n                >\n                  {t('public~View ClusterOperators')}\n                </ClusterOperatorsLink>\n              </FlexItem>\n            )}\n            {notUpgradeableCSVsPresent && (\n              // TODO:  update link to include filter once installed Operators filters are updated\n              <FlexItem>\n                <Link\n                  onClick={onCancel}\n                  to={`/k8s/ns/all-namespaces/${ClusterServiceVersionModel.plural}`}\n                >\n                  {t('public~View installed Operators')}\n                </Link>\n              </FlexItem>\n            )}\n          </Flex>\n        )\n      }\n      data-test=\"cluster-settings-alerts-not-upgradeable\"\n    >\n      <SyncMarkdownView\n        content={clusterUpgradeableFalseCondition.message}\n        inline\n        options={{ simplifiedAutoLink: true }}\n      />\n    </Alert>\n  );\n};\n\nexport const MachineConfigPoolsArePausedAlert: React.FC<MachineConfigPoolsArePausedAlertProps> = ({\n  machineConfigPools,\n}) => {\n  const { t } = useTranslation();\n  const [clusterVersion] = useK8sWatchResource<ClusterVersionKind>({\n    kind: clusterVersionReference,\n    name: 'version',\n  });\n  // assume if 'worker' is editable, others are too\n  const workerMachineConfigPoolIsEditable = useAccessReview({\n    group: MachineConfigPoolModel.apiGroup,\n    resource: MachineConfigPoolModel.plural,\n    verb: 'patch',\n    name: NodeTypes.worker,\n  });\n  const pausedMCPs = machineConfigPools\n    .filter((mcp) => !isMCPMaster(mcp))\n    .filter((mcp) => isMCPPaused(mcp));\n  return clusterIsUpToDateOrUpdateAvailable(getClusterUpdateStatus(clusterVersion)) &&\n    pausedMCPs.length > 0 ? (\n    <Alert\n      isInline\n      title={t('public~{{resource}} updates are paused.', {\n        resource: NodeModel.label,\n      })}\n      customIcon={<PauseCircleIcon />}\n      actionLinks={\n        workerMachineConfigPoolIsEditable && (\n          <AlertActionLink\n            onClick={() => Promise.all(getMCPsToPausePromises(pausedMCPs, false))}\n            data-test=\"cluster-settings-alerts-paused-nodes-resume-link\"\n          >\n            {t('public~Resume all updates')}\n          </AlertActionLink>\n        )\n      }\n      className=\"co-alert\"\n      data-test=\"cluster-settings-alerts-paused-nodes\"\n    />\n  ) : null;\n};\n\nexport const ClusterSettingsAlerts: React.FC<ClusterSettingsAlertsProps> = ({\n  cv,\n  machineConfigPools,\n}) => {\n  const { t } = useTranslation();\n\n  if (isClusterExternallyManaged()) {\n    return (\n      <Alert\n        variant=\"info\"\n        isInline\n        title={t('public~Control plane is hosted.')}\n        className=\"co-alert\"\n        data-test=\"cluster-settings-alerts-hosted\"\n      />\n    );\n  }\n  return (\n    <>\n      {!!getConditionUpgradeableFalse(cv) && <ClusterNotUpgradeableAlert cv={cv} />}\n      <MachineConfigPoolsArePausedAlert machineConfigPools={machineConfigPools} />\n    </>\n  );\n};\n\nexport const ClusterVersionDetailsTable: React.FC<ClusterVersionDetailsTableProps> = ({\n  obj: cv,\n  autoscalers,\n}) => {\n  const { history = [] } = cv.status;\n  const clusterID = getClusterID(cv);\n  const desiredImage: string = _.get(cv, 'status.desired.image') || '';\n  // Split image on `@` to emphasize the digest.\n  const imageParts = desiredImage.split('@');\n  const releaseNotes = showReleaseNotes();\n  const status = getClusterUpdateStatus(cv);\n\n  const { t } = useTranslation();\n  const canUpgrade = useCanClusterUpgrade();\n  const [machineConfigPools] = useK8sWatchResource<MachineConfigPoolKind[]>(\n    MachineConfigPoolsResource,\n  );\n  const serviceLevelTitle = useServiceLevelTitle();\n\n  const desiredVersion = getDesiredClusterVersion(cv);\n  const updateStartedTime = getStartedTimeForCVDesiredVersion(cv, desiredVersion);\n  const workerMachineConfigPool = getMCPByName(machineConfigPools, NodeTypes.worker);\n  if (new URLSearchParams(window.location.search).has('showVersions')) {\n    clusterUpdateModal({ cv })\n      .then(() => removeQueryArgument('showVersions'))\n      .catch(_.noop);\n  } else if (new URLSearchParams(window.location.search).has('showChannels')) {\n    clusterChannelModal({ cv })\n      .then(() => removeQueryArgument('showChannels'))\n      .catch(_.noop);\n  }\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <div className=\"co-m-pane__body-group\">\n          <ClusterSettingsAlerts cv={cv} machineConfigPools={machineConfigPools} />\n          <div className=\"co-cluster-settings\">\n            <div className=\"co-cluster-settings__row\">\n              <div className=\"co-cluster-settings__section co-cluster-settings__section--current\">\n                <dl className=\"co-m-pane__details co-cluster-settings__details\">\n                  <dt data-test=\"cv-current-version-header\">\n                    <CurrentVersionHeader cv={cv} />\n                  </dt>\n                  <dd data-test=\"cv-current-version\">\n                    <CurrentVersion cv={cv} />\n                  </dd>\n                </dl>\n              </div>\n              <div className=\"co-cluster-settings__section\">\n                <div className=\"co-cluster-settings__row\">\n                  <dl className=\"co-m-pane__details co-cluster-settings__details co-cluster-settings__details--status\">\n                    <dt>{t('public~Update status')}</dt>\n                    <dd>\n                      <UpdateStatus cv={cv} />\n                    </dd>\n                  </dl>\n                  <div className=\"co-cluster-settings__row\">\n                    <dl className=\"co-m-pane__details co-cluster-settings__details\">\n                      <dt>\n                        <ChannelHeader />\n                      </dt>\n                      <dd>\n                        <CurrentChannel cv={cv} canUpgrade={canUpgrade} />\n                      </dd>\n                    </dl>\n                    <UpdateLink cv={cv} canUpgrade={canUpgrade} />\n                  </div>\n                </div>\n                {clusterIsUpToDateOrUpdateAvailable(status) && (\n                  <>\n                    {!hasAvailableUpdates(cv) && hasNotRecommendedUpdates(cv) && (\n                      <Alert\n                        className=\"pf-v5-u-my-sm\"\n                        isInline\n                        isPlain\n                        title={t(\n                          'public~Click \"Select a version\" to view versions with known issues.',\n                        )}\n                        variant=\"info\"\n                        data-test=\"cv-not-recommended-alert\"\n                      />\n                    )}\n                    <UpdatesGraph cv={cv} />\n                    {workerMachineConfigPool && (\n                      <UpdatesProgress>\n                        <NodesUpdatesGroup\n                          desiredVersion={desiredVersion}\n                          divided\n                          hideIfComplete\n                          machineConfigPool={workerMachineConfigPool}\n                          name={NodeTypeNames.Worker}\n                          updateStartedTime={updateStartedTime}\n                        />\n                        {machineConfigPools.length > 2 && (\n                          <OtherNodes\n                            desiredVersion={desiredVersion}\n                            hideIfComplete\n                            machineConfigPools={machineConfigPools}\n                            updateStartedTime={updateStartedTime}\n                          />\n                        )}\n                      </UpdatesProgress>\n                    )}\n                  </>\n                )}\n                {(status === ClusterUpdateStatus.UpdatingAndFailing ||\n                  status === ClusterUpdateStatus.Updating) && (\n                  <UpdateInProgress\n                    desiredVersion={desiredVersion}\n                    machineConfigPools={machineConfigPools}\n                    updateStartedTime={updateStartedTime}\n                    workerMachineConfigPool={workerMachineConfigPool}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body-group\">\n          <dl className=\"co-m-pane__details\">\n            {window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure' && (\n              <>\n                <dt>{t('public~Subscription')}</dt>\n                <dd>\n                  <ExternalLink\n                    text={t('public~OpenShift Cluster Manager')}\n                    href={getOCMLink(clusterID)}\n                  />\n                  .\n                </dd>\n              </>\n            )}\n            <ServiceLevel\n              clusterID={clusterID}\n              loading={\n                <>\n                  <dt>{serviceLevelTitle}</dt>\n                  <dd>\n                    <ServiceLevelLoading />\n                  </dd>\n                </>\n              }\n            >\n              <>\n                <dt>{serviceLevelTitle}</dt>\n                <dd>\n                  <ServiceLevelText clusterID={clusterID} />\n                </dd>\n              </>\n            </ServiceLevel>\n            <dt>{t('public~Cluster ID')}</dt>\n            <dd className=\"co-break-all co-select-to-copy\" data-test-id=\"cv-details-table-cid\">\n              {clusterID}\n            </dd>\n            <dt>{t('public~Desired release image')}</dt>\n            <dd className=\"co-break-all co-select-to-copy\" data-test-id=\"cv-details-table-image\">\n              {imageParts.length === 2 ? (\n                <>\n                  <span className=\"text-muted\">{imageParts[0]}@</span>\n                  {imageParts[1]}\n                </>\n              ) : (\n                desiredImage || '-'\n              )}\n            </dd>\n            <dt>{t('public~Cluster version configuration')}</dt>\n            <dd>\n              <ResourceLink kind={referenceForModel(ClusterVersionModel)} name={cv.metadata.name} />\n            </dd>\n            <UpstreamConfigDetailsItem resource={cv} />\n            {autoscalers && canUpgrade && (\n              <>\n                <dt data-test=\"cv-autoscaler\">{t('public~Cluster autoscaler')}</dt>\n                <dd>\n                  {_.isEmpty(autoscalers) ? (\n                    <Link to={`${resourcePathFromModel(ClusterAutoscalerModel)}/~new`}>\n                      <AddCircleOIcon className=\"co-icon-space-r\" />\n                      {t('public~Create autoscaler')}\n                    </Link>\n                  ) : (\n                    autoscalers.map((autoscaler) => (\n                      <div key={autoscaler.metadata.uid}>\n                        <ResourceLink\n                          kind={clusterAutoscalerReference}\n                          name={autoscaler.metadata.name}\n                        />\n                      </div>\n                    ))\n                  )}\n                </dd>\n              </>\n            )}\n          </dl>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Update history')} />\n        {_.isEmpty(history) ? (\n          <EmptyBox label={t('public~History')} />\n        ) : (\n          <>\n            <TextContent>\n              <Text component={TextVariants.p} className=\"help-block pf-v5-u-mb-lg\">\n                {t(\n                  'public~There is a threshold for rendering update data which may cause gaps in the information below.',\n                )}\n              </Text>\n            </TextContent>\n            <div className=\"co-table-container\">\n              <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n                <thead className=\"pf-v5-c-table__thead\">\n                  <tr className=\"pf-v5-c-table__tr\">\n                    <th className=\"pf-v5-c-table__th\">{t('public~Version')}</th>\n                    <th className=\"pf-v5-c-table__th\">{t('public~State')}</th>\n                    <th className=\"pf-v5-c-table__th\">{t('public~Started')}</th>\n                    <th className=\"pf-v5-c-table__th\">{t('public~Completed')}</th>\n                    {releaseNotes && (\n                      <th className=\"pf-v5-c-table__th pf-m-hidden pf-m-visible-on-md\">\n                        {t('public~Release notes')}\n                      </th>\n                    )}\n                  </tr>\n                </thead>\n                <tbody className=\"pf-v5-c-table__tbody\">\n                  {_.map(history, (update, i) => (\n                    <tr className=\"pf-v5-c-table__tr\" key={i}>\n                      <td\n                        className=\"pf-v5-c-table__td pf-m-break-word co-select-to-copy\"\n                        data-test-id=\"cv-details-table-version\"\n                      >\n                        {update.version || '-'}\n                      </td>\n                      <td className=\"pf-v5-c-table__td\" data-test-id=\"cv-details-table-state\">\n                        {update.state || '-'}\n                      </td>\n                      <td className=\"pf-v5-c-table__td\">\n                        <Timestamp timestamp={update.startedTime} />\n                      </td>\n                      <td className=\"pf-v5-c-table__td\">\n                        {update.completionTime ? (\n                          <Timestamp timestamp={update.completionTime} />\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      {releaseNotes && (\n                        <td className=\"pf-v5-c-table__td pf-m-hidden pf-m-visible-on-md\">\n                          {getReleaseNotesLink(update.version) ? (\n                            <ReleaseNotesLink version={update.version} />\n                          ) : (\n                            '-'\n                          )}\n                        </td>\n                      )}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorTabPage: React.FC<ClusterOperatorTabPageProps> = ({ obj: cv }) => (\n  <ClusterOperatorPage cv={cv} autoFocus={false} showTitle={false} />\n);\n\nexport const ClusterSettingsPage: React.FC = () => {\n  const { t } = useTranslation();\n  const hasClusterAutoscaler = useFlag(FLAGS.CLUSTER_AUTOSCALER);\n  const title = t('public~Cluster Settings');\n  const resources: FirehoseResource[] = [\n    {\n      kind: clusterVersionReference,\n      name: 'version',\n      isList: false,\n      prop: 'obj',\n    },\n  ];\n  if (hasClusterAutoscaler) {\n    resources.push({\n      kind: clusterAutoscalerReference,\n      isList: true,\n      prop: 'autoscalers',\n      optional: true,\n    });\n  }\n  const resourceKeys = _.map(resources, 'prop');\n  const pages = [\n    {\n      href: '',\n      // t('public~Details')\n      nameKey: 'public~Details',\n      component: ClusterVersionDetailsTable,\n    },\n    {\n      href: 'clusteroperators',\n      // t(ClusterOperatorModel.labelPluralKey)\n      nameKey: ClusterOperatorModel.labelPluralKey,\n      component: ClusterOperatorTabPage,\n    },\n    {\n      href: 'globalconfig',\n      // t('public~Configuration')\n      nameKey: 'public~Configuration',\n      component: GlobalConfigPage,\n    },\n  ];\n  const titleProviderValues = {\n    telemetryPrefix: 'Cluster Settings',\n    titlePrefix: title,\n  };\n  return (\n    <PageTitleContext.Provider value={titleProviderValues}>\n      <PageHeading title={<div data-test-id=\"cluster-settings-page-heading\">{title}</div>} />\n      <Firehose resources={resources}>\n        <HorizontalNav pages={pages} resourceKeys={resourceKeys} />\n      </Firehose>\n    </PageTitleContext.Provider>\n  );\n};\n\ntype CurrentChannelProps = {\n  cv: K8sResourceKind;\n  canUpgrade: boolean;\n};\n\ntype CurrentVersionProps = {\n  cv: ClusterVersionKind;\n  canUpgrade?: boolean;\n};\n\ntype ChannelProps = {\n  children: React.ReactNode;\n  endOfLife?: boolean;\n};\n\ntype ChannelLineProps = {\n  children?: React.ReactNode;\n  start?: boolean;\n};\n\ntype ChannelNameProps = {\n  children: React.ReactNode;\n  current?: boolean;\n};\n\ntype ChannelPathProps = {\n  children: React.ReactNode;\n  current?: boolean;\n};\n\ntype ChannelVersionProps = {\n  children: React.ReactNode;\n  current?: boolean;\n  updateBlocked?: boolean;\n};\n\ntype ChannelVersionDotProps = {\n  channel: string;\n  current?: boolean;\n  updateBlocked?: boolean;\n  version: string;\n};\n\ntype UpdatesBarProps = {\n  children: React.ReactNode;\n};\n\ntype UpdatesGraphProps = {\n  cv: ClusterVersionKind;\n};\n\ntype UpdatesGroupProps = {\n  children: React.ReactNode;\n  divided?: boolean;\n};\n\ntype UpdatesProgressProps = {\n  children: React.ReactNode;\n};\n\ntype UpdatesTypeProps = {\n  children: React.ReactNode;\n};\n\ntype NodesUpdatesGroupProps = {\n  desiredVersion: string;\n  divided?: boolean;\n  hideIfComplete?: boolean;\n  name: string;\n  machineConfigPool: MachineConfigPoolKind;\n  updateStartedTime: string;\n};\n\ntype OtherNodesProps = {\n  desiredVersion: string;\n  hideIfComplete?: boolean;\n  machineConfigPools: MachineConfigPoolKind[];\n  updateStartedTime: string;\n};\n\ntype ClusterOperatorsLinkProps = {\n  children: React.ReactNode;\n  onCancel?: () => void;\n  queryString?: string;\n};\n\ntype UpdateInProgressProps = {\n  desiredVersion: string;\n  machineConfigPools: MachineConfigPoolKind[];\n  workerMachineConfigPool: MachineConfigPoolKind;\n  updateStartedTime: string;\n};\n\ntype ClusterNotUpgradeableAlertProps = {\n  cv: ClusterVersionKind;\n  onCancel?: () => void;\n};\n\ntype MachineConfigPoolsArePausedAlertProps = {\n  machineConfigPools: MachineConfigPoolKind[];\n};\n\ntype ClusterSettingsAlertsProps = {\n  cv: ClusterVersionKind;\n  machineConfigPools: MachineConfigPoolKind[];\n};\n\ntype ClusterVersionDetailsTableProps = {\n  obj: ClusterVersionKind;\n  autoscalers?: K8sResourceKind[];\n};\n\ntype ClusterOperatorTabPageProps = {\n  obj: ClusterVersionKind;\n};\n","import { Button, Popover } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { HashLink } from 'react-router-hash-link';\n\nimport { SyncAltIcon } from '@patternfly/react-icons/dist/esm/icons/sync-alt-icon';\n\nimport {\n  BlueArrowCircleUpIcon,\n  BlueInfoCircleIcon,\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n} from '@console/shared';\nimport { ClusterVersionModel } from '../../models';\nimport {\n  ClusterUpdateStatus,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  getClusterUpdateStatus,\n  getClusterVersionCondition,\n  getDesiredClusterVersion,\n  k8sPatch,\n  K8sResourceConditionStatus,\n} from '../../module/k8s';\nimport { errorModal } from '../modals';\nimport { resourcePathFromModel, truncateMiddle } from '../utils';\n\nexport const ClusterVersionConditionsLink: React.FC<ClusterVersionConditionsLinkProps> = ({\n  cv,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <HashLink\n      smooth\n      to={`${resourcePathFromModel(ClusterVersionModel, cv.metadata.name)}#conditions`}\n    >\n      {t('public~View conditions')}\n    </HashLink>\n  );\n};\n\nconst cancelUpdate = (cv: ClusterVersionKind) => {\n  k8sPatch(ClusterVersionModel, cv, [{ path: '/spec/desiredUpdate', op: 'remove' }]).catch(\n    (err) => {\n      const error = err.message;\n      errorModal({ error });\n    },\n  );\n};\n\nconst StatusMessagePopover: React.FC<CVStatusMessagePopoverProps> = ({ bodyContent, children }) => {\n  return (\n    <Popover bodyContent={truncateMiddle(bodyContent, { length: 256 })}>\n      <Button variant=\"link\" isInline>\n        <span>{children}</span>\n      </Button>\n    </Popover>\n  );\n};\n\nconst InvalidMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const { t } = useTranslation();\n  return (\n    <div data-test=\"cv-update-status-invalid\">\n      <div>\n        <RedExclamationCircleIcon /> {t('public~Invalid cluster version')}\n      </div>\n      <Button onClick={() => cancelUpdate(cv)} variant=\"primary\" className=\"pf-v5-u-mt-xs\">\n        {t('public~Cancel update')}\n      </Button>\n    </div>\n  );\n};\n\nconst ReleaseNotAcceptedMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const releaseNotAcceptedCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.ReleaseAccepted,\n    K8sResourceConditionStatus.False,\n  );\n  const { t } = useTranslation();\n  return (\n    <>\n      <div data-test=\"cv-update-status-release-accepted-false\">\n        <StatusMessagePopover bodyContent={releaseNotAcceptedCondition.message}>\n          <RedExclamationCircleIcon /> {t('public~Release not accepted')}\n        </StatusMessagePopover>\n      </div>\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nconst UpdatesAvailableMessage: React.FC<CVStatusMessageProps> = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-update-status\" data-test=\"cv-update-status-available-updates\">\n      <BlueArrowCircleUpIcon /> {t('public~Available updates')}\n    </div>\n  );\n};\n\nconst FailingMessageText: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const failingCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Failing,\n    K8sResourceConditionStatus.True,\n  );\n  const { t } = useTranslation();\n  return (\n    <div data-test=\"cv-update-status-failing\">\n      <StatusMessagePopover bodyContent={failingCondition.message}>\n        <RedExclamationCircleIcon /> {t('public~Failing')}\n      </StatusMessagePopover>\n    </div>\n  );\n};\n\nexport const UpdatingMessageText: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const version = getDesiredClusterVersion(cv);\n  const { t } = useTranslation();\n  return <>{t('public~Update to {{version}} in progress', { version })}</>;\n};\n\nconst UpdatingMessage: React.FC<CVStatusMessageProps> = ({ cv, isFailing }) => {\n  return (\n    <>\n      <div data-test=\"cv-update-status-updating\">\n        <SyncAltIcon className=\"fa-spin co-icon-space-r\" />\n        <UpdatingMessageText cv={cv} />\n      </div>\n      {isFailing && <FailingMessageText cv={cv} />}\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nconst ErrorRetrievingMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const retrievedUpdatesCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.RetrievedUpdates,\n    K8sResourceConditionStatus.False,\n  );\n  const { t } = useTranslation();\n  return retrievedUpdatesCondition.reason === 'NoChannel' ? (\n    <div data-test=\"cv-update-status-no-channel\">\n      <BlueInfoCircleIcon /> {retrievedUpdatesCondition.message}\n    </div>\n  ) : (\n    <>\n      <div data-test=\"cv-update-status-no-updates\">\n        <StatusMessagePopover bodyContent={retrievedUpdatesCondition.message}>\n          <RedExclamationCircleIcon /> {t('public~Not retrieving updates')}\n        </StatusMessagePopover>\n      </div>\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nconst FailingMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  return (\n    <>\n      <FailingMessageText cv={cv} />\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nexport const UpToDateMessage: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  return (\n    <span data-test=\"cv-update-status-up-to-date\">\n      <GreenCheckCircleIcon /> {t('public~Up to date')}\n    </span>\n  );\n};\n\nexport const UpdateStatus: React.FC<UpdateStatusProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  switch (status) {\n    case ClusterUpdateStatus.Invalid:\n      return <InvalidMessage cv={cv} />;\n    case ClusterUpdateStatus.ReleaseNotAccepted:\n      return <ReleaseNotAcceptedMessage cv={cv} />;\n    case ClusterUpdateStatus.UpdatesAvailable:\n      return <UpdatesAvailableMessage cv={cv} />;\n    case ClusterUpdateStatus.Updating:\n      return <UpdatingMessage cv={cv} />;\n    case ClusterUpdateStatus.UpdatingAndFailing:\n      return <UpdatingMessage cv={cv} isFailing />;\n    case ClusterUpdateStatus.ErrorRetrieving:\n      return <ErrorRetrievingMessage cv={cv} />;\n    case ClusterUpdateStatus.Failing:\n      return <FailingMessage cv={cv} />;\n    default:\n      return <UpToDateMessage />;\n  }\n};\n\ntype UpdateStatusProps = {\n  cv: ClusterVersionKind;\n};\n\ntype CVStatusMessagePopoverProps = {\n  bodyContent: string;\n  children: React.ReactNode;\n};\n\ntype CVStatusMessageProps = {\n  cv: ClusterVersionKind;\n  isFailing?: boolean;\n};\n\ntype ClusterVersionConditionsLinkProps = {\n  cv: ClusterVersionKind;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableData, RowFunctionArgs } from '../factory';\nimport {\n  referenceForModel,\n  ClusterOperator,\n  ClusterOperatorObjectReference,\n  useModelFinder,\n} from '../../module/k8s';\nimport { ResourceLink, EmptyBox } from '../utils';\n\nconst tableColumnClasses = [\n  '', // Name\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'), // Resource\n  classNames('pf-m-hidden', 'pf-m-visible-on-md'), // Group\n  '', // NS\n];\n\nconst ResourceObjectName: React.FC<ResourceObjectNameProps> = ({ gsv, name, namespace }) => {\n  if (!name) {\n    return <>-</>;\n  }\n  if (gsv) {\n    return <ResourceLink kind={gsv} name={name} namespace={namespace} />;\n  }\n  return <>{name}</>;\n};\n\nconst Row: React.FC<RowFunctionArgs> = ({ obj, customData: { findModel } }) => {\n  const { name, resource, namespace, group } = obj;\n  const model = findModel(group, resource);\n\n  const gsv = model ? referenceForModel(model) : null;\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceObjectName gsv={gsv} name={name} namespace={namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        {resource}\n        {group && <div className=\"pf-v5-u-display-none-on-md text-muted\">{group}</div>}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{group || '-'}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {namespace ? <ResourceLink kind=\"Namespace\" name={namespace} /> : '-'}\n      </TableData>\n    </>\n  );\n};\n\nconst EmptyMessage = () => {\n  const { t } = useTranslation();\n  return <EmptyBox label={t('public~Related objects')} />;\n};\n\nconst RelatedObjects: React.FC<RelatedObjectsProps> = (props) => {\n  const { findModel } = useModelFinder();\n  const { t } = useTranslation();\n  const Header = () => [\n    {\n      title: t('public~Name'),\n      sortField: 'name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('public~Resource'),\n      sortField: 'resource',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('public~Group'),\n      sortField: 'group',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('public~Namespace'),\n      sortField: 'namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n  const customData = React.useMemo(\n    () => ({\n      findModel,\n    }),\n    [findModel],\n  );\n  return (\n    <div className=\"co-m-pane__body\">\n      <Table\n        {...props}\n        Header={Header}\n        Row={Row}\n        customData={customData}\n        aria-label={t('public~Related objects')}\n        NoDataEmptyMsg={EmptyMessage}\n      />\n    </div>\n  );\n};\n\nconst RelatedObjectsPage: React.FC<RelatedObjectsPageProps> = (props) => {\n  const relatedObject: ClusterOperatorObjectReference[] = props.obj?.status?.relatedObjects;\n  const data = relatedObject?.filter(({ resource }) => resource);\n  return <RelatedObjects {...props} data={data} />;\n};\n\nexport default RelatedObjectsPage;\n\ntype ResourceObjectNameProps = {\n  gsv: string;\n  name: string;\n  namespace: string;\n};\n\ntype RelatedObjectsPageProps = {\n  obj: ClusterOperator;\n};\n\ntype RelatedObjectsProps = {\n  data: ClusterOperatorObjectReference[];\n};\n"],"sourceRoot":""}