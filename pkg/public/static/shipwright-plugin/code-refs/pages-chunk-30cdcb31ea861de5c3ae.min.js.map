{"version":3,"sources":["webpack:///./packages/shipwright-plugin/src/components/build-list/BuildTable.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-list/BuildRunTable.tsx","webpack:///./packages/shipwright-plugin/src/components/build-details/BuildDetailsTab.tsx","webpack:///./packages/shipwright-plugin/src/components/build-details/BuildStatusSection.tsx","webpack:///./packages/shipwright-plugin/src/components/build-details/BuildEventsTab.tsx","webpack:///./packages/shipwright-plugin/src/components/build-details/BuildRunsTab.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-details/BuildRunDetailsTab.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-details/BuildRunSection.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-details/BuildRunEventsTab.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-details/BuildRunLogsTab.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/EditBuild.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/BuildForm.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/BuildFormEditor.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/BuildStrategySelector.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/ImageSection.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/PushSecretSelector.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/PushSecretDropdown.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/ParameterSection.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/VolumeSection.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/ConfigMapDropdown.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/PVCDropdown.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/SecretDropdown.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/types.ts","webpack:///./packages/shipwright-plugin/src/components/build-form/initial-data.ts","webpack:///./packages/shipwright-plugin/src/components/build-form/validation.ts","webpack:///./public/components/image-stream.tsx","webpack:///./packages/shipwright-plugin/src/pages.ts","webpack:///./packages/pipelines-plugin/src/types/index.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-filter-reducer.ts","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/pipelines-plugin/src/utils/pipeline-utils.ts","webpack:///./packages/pipelines-plugin/src/types/coreTekton.ts","webpack:///./packages/pipelines-plugin/src/types/pipelineRun.ts","webpack:///./packages/pipelines-plugin/src/types/taskRun.ts","webpack:///./packages/pipelines-plugin/src/types/computedStatus.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-augment.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-metrics/pipeline-metrics-utils.ts","webpack:///./packages/pipelines-plugin/src/const.ts","webpack:///./packages/dev-console/src/utils/imagestream-utils.ts","webpack:///./packages/shipwright-plugin/src/models.ts","webpack:///./packages/shipwright-plugin/src/const.ts","webpack:///./packages/dev-console/src/components/import/GiteaIcon.tsx","webpack:///./public/components/image-stream-timeline.tsx","webpack:///./packages/shipwright-plugin/src/types.ts","webpack:///./packages/shipwright-plugin/src/utils.ts","webpack:///./packages/dev-console/src/types/samples.ts","webpack:///./packages/dev-console/src/utils/samples.ts","webpack:///./packages/dev-console/src/components/import/CreateSecretModal.tsx","webpack:///./packages/console-shared/src/components/editor/yaml-download-utils.ts","webpack:///./packages/shipwright-plugin/src/components/buildrun-status/BuildRunStatus.tsx","webpack:///./packages/dev-console/src/models/samples.ts","webpack:///./packages/dev-console/src/components/import/git/GitSection.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelineruns/utils/tekton-results.ts","webpack:///./packages/dev-console/src/components/import/git/AdvancedGitOptions.tsx","webpack:///./packages/dev-console/src/components/import/git/SourceSecretSelector.tsx","webpack:///./packages/dev-console/src/components/dropdown/SourceSecretDropdown.tsx","webpack:///./packages/dev-console/src/components/import/git/GitTypeSelector.tsx","webpack:///./packages/dev-console/src/components/import/git/SampleRepo.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelineruns/hooks/useTektonResults.ts","webpack:///./packages/console-shared/src/components/alerts/SwitchToYAMLAlert.tsx","webpack:///./packages/dev-console/src/components/buildconfig/types.ts","webpack:///./packages/pipelines-plugin/src/components/pipelineruns/logs/logs-utils.ts","webpack:///./packages/dev-console/src/components/buildconfig/sections/NameSection.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelineruns/logs/LogsWrapperComponent.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelineruns/logs/MultiStreamLogs.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelineruns/logs/Logs.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelineruns/logs/TektonTaskRunLog.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-list/BuildRunListPage.tsx","webpack:///./packages/dev-console/src/components/buildconfig/sections/EnvironmentVariablesSection.tsx","webpack:///./packages/pipelines-plugin/src/components/taskruns/TaskRunLog.tsx","webpack:///./packages/shipwright-plugin/src/components/build-list/BuildListPage.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-duration/BuildRunDuration.tsx","webpack:///./packages/shipwright-plugin/src/components/build-list/BuildOutput.tsx","webpack:///./packages/shipwright-plugin/src/components/build-details/BuildDetailsPage.tsx","webpack:///./packages/shipwright-plugin/src/components/build-details/BuildSpecSection.tsx","webpack:///./packages/shipwright-plugin/src/components/buildrun-details/BuildRunDetailsPage.tsx","webpack:///./packages/shipwright-plugin/src/components/buildstrategy-details/BuildStrategyDetailsPage.tsx","webpack:///./packages/shipwright-plugin/src/components/clusterbuildstrategy-details/ClusterBuildStrategyDetailsPage.tsx","webpack:///./packages/shipwright-plugin/src/components/shipwright-tablistpage/ShipwrightTabListPage.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/BuildFormPage.tsx","webpack:///./packages/shipwright-plugin/src/components/build-form/form-utils.ts"],"names":["columnClassNames","columnClass","BuildHeader","t","bind","title","sortField","transforms","props","className","id","sortFunc","BuildRow","obj","build","kindReference","context","buildRunKindReference","kind","name","metadata","namespace","columnID","buildSpec","spec","latestBuild","buildRun","timestamp","creationTimestamp","BuildTable","buildRunModel","buildRuns","buildRunsLoaded","buildRunsLoadError","isList","data","latestByBuildName","reduce","acc","labels","loaded","error","buildResource","map","sBuild","Header","Row","defaultSortField","defaultSortOrder","asc","customSorts","latestBuildStatus","latestRunDuration","virtualize","BuildRunHeader","BuildRunRow","BuildRunTable","status","duration","desc","text","resource","path","buildStatus","registered","label","reason","message","getFilters","namePrefix","involvedObject","startsWith","endsWith","ns","filters","showTitle","canCreate","selector","matchLabels","direction","default","component","h3","conditions","length","buildModel","groupVersionKind","startTime","completionTime","taskRunRef","latestTaskRunRef","taskRunName","taskRun","taskRunLoaded","taskRunLoadError","loadError","Error","heading","watchedBuild","initialValues","values","yamlData","skipInvalid","resourceVersion","formReloadCount","handleCancel","goBack","validationSchema","onSubmit","helpers","parsedBuild","err","setStatus","submitSuccess","submitError","changedBuild","editorType","Form","updatedBuildConfig","push","enableReinitialize","formikProps","handleSubmit","setFieldValue","setErrors","dirty","isSubmitting","errors","isNew","isStale","formEditor","yamlEditor","model","showSamples","onSave","onReload","formData","flexLayout","formContext","editor","sanitizeTo","yamlbuild","yamlContext","lastViewUserSettingKey","noMargin","handleReset","errorMessage","successMessage","showAlert","infoTitle","infoMessage","submitLabel","disableSubmit","YAML","handleDownload","sticky","showYAMLAlert","setShowYAMLAlert","onClose","formContextField","autoFocus","formType","setError","watchedResources","bs","optional","cbs","watchedBuildStrategies","buildStrategies","errorKey","Object","keys","find","key","clusterBuildStrategyOptions","currentValue","value","description","apiVersion","onChange","selection","selectedBuildStrategy","volumes","filter","volume","overridable","volumeKey","resourceType","params","parameters","param","type","defaults","isDisabled","ariaLabel","placeholderText","helpText","options","toggleOnSelection","required","variant","truncateTitle","autoComplete","fieldPrefix","secret","handleSave","fieldId","dropDownClassName","menuClassName","actionItems","actionTitle","actionKey","selectedKey","save","secretType","image","resources","prop","dataSelector","placeholder","autocompleteFilter","strText","item","resourceFilter","showBadge","render","fullWidth","parameter","index","isRequired","addLabel","arrayName","additionalProps","ref","VolumeForm","onDelete","volumeTypeOptions","EmptyDirectory","ConfigMap","Secret","PVC","hasGutter","span","items","volumeType","configMap","handleConfigMapChange","GetVolumeTypeFields","plain","button","onClick","overridableVolumes","headers","emptyValues","resourceName","hideAddRow","rowRenderer","fieldName","configmap","VolumeTypes","getInitialBuildFormikValues","git","url","INVALID","dir","showGitType","isUrlValidating","source","selected","recommended","tagObj","couldNotRecommend","application","isInContext","strategy","Source","project","undefined","outputImage","environmentVariables","test","oneOf","when","is","then","validate","abortEarly","getAnnotationTags","specTag","split","getBuilderTags","imageStream","statusTags","getStatusTags","tags","tag","annotationTags","isBuilderTag","getBuilderTagsSortedByVersion","sort","a","b","v1","v2","localeCompare","getMostRecentBuilderTag","isBuilder","common","factory","menuActions","getExtensionsActionsForKind","ImageStreamTagsRow","statusTag","imageStreamStatus","latest","from","referencesTag","created","dockerRepositoryCheck","linkTo","ExampleDockerCommandPopover","publicImageRepository","pushCommand","pullCommand","headerContent","minWidth","bodyContent","href","ImageStreamsDetails","imageRepository","imageCount","specTagByName","importErrors","importErrorCondition","condition","warning","alerts","i","ImageStreamHistory","imageStreamStatusTags","imageStreamTags","imageStreamName","imageStreamNamespace","displayName","pages","details","editYaml","history","ImageStreamsDetailsPage","tableColumnClasses","ImageStreamsTableRow","actions","ImageStreamsList","ImageStreamsTableHeader","buildPhase","phase","ImageStreamsPage","ListComponent","SucceedConditionReason","pipelineRunStatus","pipelineRun","succeedCondition","c","cancelledCondition","PipelineRunStopped","PipelineRunCancelled","includes","Cancelling","Succeeded","Failed","Running","TaskRunCancelled","Cancelled","PipelineRunStopping","TaskRunStopping","CreateContainerConfigError","ExceededNodeResources","ExceededResourceQuota","PipelineRunPending","Pending","ConditionCheckFailed","Skipped","pipelineRunStatusTitle","pipelineFilterReducer","pipeline","latestRun","Other","pipelineTitleFilterReducer","pipelineRunTitleFilterReducer","pipelineRunFilterReducer","pipelineStatusFilter","all","pipelineRunStatusFilter","phases","taskRunFilterReducer","taskRunFilterTitleReducer","flexStyle","display","flex","flexDirection","margin","subTitle","children","extraMargin","dataTest","style","task","inputs","runAfter","ListFilterId","ListFilterLabels","PipelineResourceListFilterId","Git","PullRequest","Image","Cluster","Storage","CloudEvent","appendPipelineRunStatus","taskRuns","isFinallyTasks","finally","tasks","Idle","tr","pipelineTask","taskStatus","mTask","pipelineTaskName","date","Date","getTime","getPipelineTasks","out","taskList","forEach","flag","taskRef","nextToFlag","splice","getFinallyTasksWithStatus","containerToLogSourceStatus","container","state","lastState","waiting","terminated","getLatestPipelineRunStatus","pipelineRuns","latestPipelineRun","PipelineNotStarted","getPipelineRunParams","pipelineParams","getPipelineRunWorkspaces","pipelineWorkspaces","workspace","calculateDuration","endTime","long","start","durationInSeconds","pipelineRunDuration","run","updateServiceAccount","secretName","originalServiceAccount","updateImagePullSecrets","updatedServiceAccount","secrets","imagePullSecrets","associateServiceAccountToSecret","isImageSecret","serviceAccount","s","catch","getAnnotationKey","suffix","getSecretAnnotations","annotation","existingAnnotations","count","annotationKey","pipelinesTab","kindObj","getMatchedPVCs","pvcResources","ownerResourceName","ownerResourceKind","pvc","ownerReferences","some","reference","getPipeline","pipelines","p","getTriggerTemplates","triggerTemplates","tt","resourcetemplates","rt","pipelineRef","getEventListeners","eventListeners","et","triggers","template","returnValidPipelineModel","returnValidPipelineRunModel","returnValidTaskModel","TaskRunResultsAnnotations","TaskRunResultsAnnotationValue","TaskRunResults","getSbomTaskRun","taskruns","annotations","KEY","SBOM","hasExternalLink","sbomTaskRun","TYPE","EXTERNAL_LINK","getSbomLink","results","taskResults","r","getImageUrl","PipelineRun","pipelineResults","IMAGE_REPOSITORY","taskRunStatus","getPipelineRunStatus","conditionsMessage","matches","match","result","trim","Number","totalSucceeded","Completed","Incomplete","MetricsLevel","LevelTypes","DurationTypes","PipelineRunGroupVersionKind","group","version","TaskRunGroupVersionKind","ComputedStatus","CustomRunStatus","getLatestRun","runs","field","pipelineSpec","succeededCondition","augmentRunsToData","pipelineruns","prsForPipeline","pr","getRunStatusColor","pftoken","FailedToStart","getPipelineFromPipelineRun","pipelineName","getTaskStatus","pipelinerun","totalTasks","executedPipeline","totalPipelineRunTasks","totalPipelineRunCustomTasks","plrTasks","tRun","plrTaskLength","skippedTaskLength","skippedTasks","pipelineRunHasFailure","pipelineRunIsCancelled","unhandledTasks","getResourceModelFromTaskKind","getSafeTaskResourceKind","getResourceModelFromBindingKind","getSafeBindingResourceKind","getModelReferenceFromTaskKind","countRunningTasks","taskStatuses","shouldHidePipelineRunStop","shouldHidePipelineRunStopForTaskRunStatus","taskRunStatusObj","shouldHidePipelineRunCancel","shouldHidePipelineRunCancelForTaskRunStatus","PipelineQuery","MetricsQueryPrefix","metricsQueries","prefix","TEKTON_PIPELINES_CONTROLLER","PIPELINE_TASK_LEVEL","PIPELINE_SUCCESS_RATIO","NUMBER_OF_PIPELINE_RUNS","PIPELINERUN_TASKRUN_LEVEL","PIPELINE_RUN_TASK_RUN_DURATION","PIPELINE_RUN_DURATION","UNSIMPLIFIED_METRICS_LEVEL","formatValue","v","string","toExponential","formatPositiveValue","Math","abs","formatDate","format","formatTimeSeriesValues","samples","metric","newValues","y","x","setHours","isNaN","end","step","getRangeVectorData","response","xMutator","yMutator","parseFloat","time","getXaxisValues","timespan","xValues","oneDayDuration","numDays","round","d","now","setDate","getDate","slice","getDuration","seconds","sec","min","hr","floor","PipelineMetricsTimeRangeOptions","getTransformedDataPoints","previousValue","val","FLAG_OPENSHIFT_PIPELINE","FLAG_OPENSHIFT_PIPELINE_AS_CODE","FLAG_OPENSHIFT_PIPELINE_CONDITION","CLUSTER_PIPELINE_NS","PIPELINE_RUNTIME_LABEL","PIPELINE_RUNTIME_VERSION_LABEL","PIPELINE_STRATEGY_LABEL","PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY","FUNC_PIPELINE_RUNTIME_LABEL","ARTIFACTHUB_API_BASE_URL","DELETED_RESOURCE_IN_K8S_ANNOTATION","RESOURCE_LOADED_FROM_RESULTS_ANNOTATION","imageStreamLabels","getSampleRepo","sampleRepo","getSampleRef","sampleRef","getSampleContextDir","sampleContextDir","getPorts","imageStreamImage","portSpec","parts","containerPort","parseInt","protocol","toUpperCase","console","warn","portsFromSpec","dockerImageMetadata","Config","ExposedPorts","ContainerConfig","makePortName","port","toLowerCase","prettifyName","replace","first","prep","letter","normalizeBuilderImages","imageStreams","Array","isArray","builderImages","recentTag","iconClass","iconUrl","getTagDataWithDisplayName","imageTags","selectedTag","defaultName","imageTag","getSuggestedName","imageName","RegistryType","BuilderImagesNamespace","imageRegistryType","External","Internal","getImageStreamTags","getSortedTags","getProjectResource","getImageStreamResource","ClusterBuildStrategyModelV1Alpha1","plural","apiGroup","namespaced","crd","labelKey","labelPlural","labelPluralKey","abbr","BuildStrategyModelV1Alpha1","BuildModelV1Alpha1","BuildRunModelV1Alpha1","ClusterBuildStrategyModel","BuildStrategyModel","BuildModel","BuildRunModel","API_GROUP","API_VERSION_LATEST","BUILDRUN_TO_BUILD_REFERENCE_LABEL","BUILDRUN_TO_RESOURCE_MAP_LABEL","BUILD_OUTPUT_IMAGESTREAM_URL","BUILD_OUTPUT_QUAY_URL","topology","xmlns","viewBox","fill","role","width","height","getImageStreamTagName","ImageStreamTimelineItem","linkToTag","referenceAndSHA","dockerImageReference","simple","isTagVersionLatest","comparedTag","comparedTagPosition","orderedTagArray","orderedTag","ImageStreamTimeline","tagsArray","timeline","ComputedBuildRunStatus","ClusterBuildStrategy","ReadableClusterBuildStrategies","BUILDAH","S2I","UNKNOWN","getLatestBuildRunStatusforDeployment","buildRunsforDeployment","latestBuildRun","isBuildRunNewerThen","newBuildRun","prevBuildRun","prevCreationTime","byCreationTime","left","right","leftCreationTime","isV1Alpha1Resource","getBuildNameFromBuildRun","buildRef","useDetermineModelVersion","modelOne","modelTwo","modelFlagOne","modelFlagTwo","flagTwo","flagOne","useBuildModel","useBuildRunModel","useBuildStrategyModel","useClusterBuildStrategyModel","kindToTabMap","useShipwrightBreadcrumbsFor","isAdminPerspective","location","resourceToModel","isGitImportSource","gitImport","repository","isContainerImportSource","containerImport","createSampleLink","sample","activeNamespace","searchParams","URLSearchParams","set","revision","contextDir","getGitImportSample","window","search","sampleName","get","getContainerImportSample","hasSampleQueryParameter","groupConsoleSamplesByName","grouped","consoleSample","getBestMatch","language","preferredLanguage","preferredCountry","sameLanguageWithoutCountry","sameLanguageWithAnyCountry","fallbackLanguageSameCountry","fallbackLanguageNoCountry","fallbackLanguageAnyCountry","sampleLanguage","sampleCountry","useSamples","getSample","CreateSecretModal","close","onCancel","fixed","secretTypeAbstraction","isCreate","modal","secretModalLauncher","downloadYaml","blob","Blob","filename","e","getSucceededCondition","getBuildRunStatus","PENDING","RUNNING","SUCCEEDED","FAILED","failedCondition","getBuildRunStatusProps","ConsoleSampleModel","propagationPolicy","defaultSample","showSample","importType","inputRef","formikValues","touched","formikTouched","formikErrors","formikSetFieldValue","setFieldTouched","formikSetFieldTouched","isKnativeServingAvailable","canCreateKnativeService","canCreateKnativeServiceLoading","verb","shouldValidate","defaultSampleURL","defaultSampleDir","defaultSampleRef","defaultSampleTagObj","imageStreamTag","imageStreamTagSampleRepo","nameTouched","applicationNameTouched","imageSelectorTouched","gitDirTouched","gitTypeTouched","gitUrlError","validated","setValidated","repoStatus","setRepoStatus","handleBuilderImageRecommendation","detectedBuildTypes","recommendedBuildType","hasOwnProperty","handleDevfileStrategyDetection","devfilePath","gitType","devfile","devfileSourceUrl","gitService","secretResource","devfileContents","getDevfileContent","handleGitUrlChange","detectedGitType","isUnsureDetectedGitType","UNSURE","gitRepoName","detectedType","docker","dockerfilePath","importStrategyData","repositoryStatus","strategies","importStrategies","Reachable","selectedStrategy","priority","detectedFiles","recommendedStrategy","showEditImportStrategy","success","Devfile","devfileContent","detectedCustomData","DEVFILE","DOCKERFILE","Docker","SERVERLESS_FUNCTION","ServerlessFunction","debouncedHandleGitUrlChange","fillImageStreamTagSample","RateLimitExceeded","GitTypeNotDetected","PrivateRepo","ResourceNotFound","InvalidGitTypeSelected","GiteaRepoUnreachable","resetFields","current","focus","sampleRepository","service","targetPort","toString","helpTextInvalid","onBlur","trimmedURL","target","isInline","decodeValueJson","decodedValue","JSON","parse","atob","decodeValue","resourceDeletedInK8sAnnotation","deletionTimestamp","AND","expressions","join","EXP","operator","EQ","NEQ","DataType","labelsToFilter","selectorToFilter","matchExpressions","filterByName","expression","CACHE","InFlightStore","getTRURLHost","tektonResult","targetNamespace","serverPort","server_port","tlsHostname","tls_hostname_override","tektonResultsAPI","getFilteredRecord","dataType","nextPageToken","cacheKey","records","page_size","max","limit","pageSize","page_token","createTektonResultsUrl","list","method","allowInsecure","code","getPipelineRuns","IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER","PipelineRunV1","PipelineRunV1Beta1","getFilteredPipelineRuns","getTaskRuns","TaskRunV1","TaskRunV1Beta1","getFilteredTaskRuns","consoleProxyFetchLog","proxyRequest","str","isJSONString","body","getTaskRunLog","taskRunPath","throw404","handleGitRefChange","handleGitDirChange","textExpanded","textCollapsed","handleGitTypeChange","typeValue","spaceItems","GITHUB","icon","isSelected","GITLAB","BITBUCKET","GITEA","link","useTRRuns","getRuns","setNextPageToken","localCacheKey","setLocalCacheKey","setResult","disposed","tkPipelineRuns","token","callInflight","cur","executed","useTRPipelineRuns","useTRTaskRuns","useGetPipelineRuns","REPOSITORY","resultPlrs","resultPlrsLoaded","resultPlrsLoadError","getNextPage","k8sPlrs","k8sPlrsLoaded","k8sPlrsLoadError","uid","useTRTaskRunLog","log","actionClose","BuildConfigRunPolicy","getSortedContainerStatus","containers","containerStatuses","containerNames","sortedContainerStatus","cs","containerIndex","indexOf","getRenderContainers","pod","firstRunningCont","findIndex","stillFetching","getDownloadAllLogsCallback","sortedTaskRunNames","pipelineRunName","getWatchUrls","stepsList","Promise","currTask","podName","allStepUrls","stepUrls","currentStep","currentStatus","urlOpts","queryParams","follow","steps","tasksPromise","allLogs","getContentPromise","logs","race","resolve","setTimeout","buffer","ingest","getBlob","meta","initialValue","taskName","onDownloadAll","downloadAllLabel","resourceRef","isFullscreen","fullscreenRef","fullscreenToggle","downloadAllStatus","setDownloadAllStatus","currentLogGetterRef","setLogGetter","getter","align","logString","setCurrentLogsGetter","MultiStreamLogs","scrollPane","completedRef","renderToCount","setRenderToCount","scrollDirection","handleScrollCallback","dataRef","innerText","handleComplete","containerName","newRenderTo","autoScroll","scrolledToBottom","containerStatus","onScroll","idx","statusIndex","resourceStatus","onComplete","resName","resNamespace","scrollToRef","contentRef","resourceStatusRef","onCompleteRef","blockContentRef","addContentAndScroll","scrollIntoView","behavior","block","appendMessage","blockContent","ws","watchURL","res","wsOpts","host","subprotocols","onmessage","msg","decode","onclose","onerror","destroy","TektonTaskRunLog","trResults","trLoaded","trError","scrollTop","scrollHeight","filterGroupName","reducer","filterValue","rowFilters","envs","podResources","getBuildStatus","createProps","to","getBuildRunDurationInSeconds","getBuildRunDuration","output","pop","outputImageName","nameKey","events","customActionMenu","_","DROPDOWN","breadcrumbsFor","credentials","cloneSecret","outputCredentials","pushSecret","dockerFile","dockerfile","paramValues","builderImage","builder","inlineCompact","sources","getResourceStatus","commonPageProps","hideBadge","currentTab","navigate","buildStrategyModel","clusterBuildStrategyModel","pageData","onSelection","_key","_action","buildRunListTab","buildStrategyTab","buildStrategy","clusterBuildStrategyTab","clusterBuildStrategy","telemetryPrefix","convertBuildToFormData","originValues","safeBuild","convertBuildNameToFormData","convertBuildSourceToFormData","convertBuildStrategyToFormData","paramValue","convertBuildParamsToFormData","convertBuildOutputToFormData","convertBuildVolumesToFormData","env","convertBuildEnvsToFormData","convertFormDataToBuild","originalBuild","convertFormDataNameToBuild","convertFormDataSourceToBuild","convertFormDataStrategyToBuild","convertFormDataOutputToBuild","buildVolumes","convertFromDataVolumesToBuild","convertFormDataParamsToBuild","convertFormDataEnvsToBuild","convertBuildFormDataToYAML","updatedBuild"],"mappings":"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","file":"shipwright-plugin/code-refs/pages-chunk-30cdcb31ea861de5c3ae.min.js","sourcesContent":["import * as React from 'react';\nimport { sortable, SortByDirection } from '@patternfly/react-table';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { useFlag } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sWatchResource';\nimport {\n  Table,\n  TableProps,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport { Kebab, ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport LazyActionMenu from '@console/shared/src/components/actions/LazyActionMenu';\nimport { BUILDRUN_TO_BUILD_REFERENCE_LABEL } from '../../const';\nimport { BuildRunModel, BuildRunModelV1Alpha1 } from '../../models';\nimport { Build, BuildRun } from '../../types';\nimport { isBuildRunNewerThen, isV1Alpha1Resource } from '../../utils';\nimport BuildRunDuration, { getBuildRunDuration } from '../buildrun-duration/BuildRunDuration';\nimport BuildRunStatus, { getBuildRunStatus } from '../buildrun-status/BuildRunStatus';\nimport BuildOutput from './BuildOutput';\n\nconst columnClassNames = [\n  '', // name\n  '', // namespace\n  '', // output\n  'pf-m-hidden pf-m-visible-on-lg', // last run\n  'pf-m-hidden pf-m-visible-on-lg', // last run status\n  'pf-m-hidden pf-m-visible-on-lg', // last run time\n  'pf-m-hidden pf-m-visible-on-lg', // last run duration\n  Kebab.columnClass,\n];\n\nexport const BuildHeader = () => {\n  // This function is NOT called as component, so we can not use useTranslation here.\n  const t = i18next.t.bind(i18next);\n\n  return [\n    {\n      title: i18next.t('shipwright-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: columnClassNames[0] },\n    },\n    {\n      id: 'namespace',\n      title: t('shipwright-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: columnClassNames[1] },\n    },\n    {\n      title: t('shipwright-plugin~Output'),\n      props: { className: columnClassNames[2] },\n    },\n    {\n      title: t('shipwright-plugin~Last run'),\n      transforms: [sortable],\n      sortField: 'latestBuild.metadata.name',\n      props: { className: columnClassNames[3] },\n    },\n    {\n      title: t('shipwright-plugin~Last run status'),\n      transforms: [sortable],\n      sortFunc: 'latestBuildStatus',\n      props: { className: columnClassNames[4] },\n    },\n    {\n      title: t('shipwright-plugin~Last run time'),\n      transforms: [sortable],\n      sortField: 'latestBuild.status.completionTime',\n      props: { className: columnClassNames[5] },\n    },\n    {\n      title: t('shipwright-plugin~Last run duration'),\n      transforms: [sortable],\n      sortFunc: 'latestRunDuration',\n      props: { className: columnClassNames[6] },\n    },\n    {\n      title: '',\n      props: { className: columnClassNames[7] },\n    },\n  ];\n};\n\nexport const BuildRow: React.FC<RowFunctionArgs<Build>> = ({ obj: build }) => {\n  const kindReference = referenceFor(build);\n  const context = { [kindReference]: build };\n  const buildRunKindReference = isV1Alpha1Resource(build)\n    ? referenceForModel(BuildRunModelV1Alpha1)\n    : referenceForModel(BuildRunModel);\n\n  return (\n    <>\n      <TableData className={columnClassNames[0]}>\n        <ResourceLink\n          kind={kindReference}\n          name={build.metadata.name}\n          namespace={build.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={columnClassNames[1]} columnID=\"namespace\">\n        <ResourceLink kind=\"Namespace\" name={build.metadata.namespace} />\n      </TableData>\n      <TableData className={columnClassNames[2]}>\n        <BuildOutput buildSpec={build.spec} />\n      </TableData>\n      <TableData className={columnClassNames[3]}>\n        {build.latestBuild ? (\n          <ResourceLink\n            kind={buildRunKindReference}\n            name={build.latestBuild.metadata?.name}\n            namespace={build.latestBuild.metadata?.namespace}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={columnClassNames[4]}>\n        {build.latestBuild ? <BuildRunStatus buildRun={build.latestBuild} /> : '-'}\n      </TableData>\n      <TableData className={columnClassNames[5]}>\n        {build.latestBuild ? (\n          <Timestamp timestamp={build?.latestBuild.metadata?.creationTimestamp} />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={columnClassNames[6]}>\n        {build?.latestBuild ? <BuildRunDuration buildRun={build.latestBuild} /> : '-'}\n      </TableData>\n      <TableData className={columnClassNames[7]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\ntype CustomData = {\n  buildRuns: {\n    latestByBuildName: Record<string, BuildRun>;\n    loaded: boolean;\n    error: Error | undefined;\n  };\n};\n\ntype BuildTableProps = TableProps & {\n  namespace: string;\n};\n\nexport const BuildTable: React.FC<BuildTableProps> = (props) => {\n  const { t } = useTranslation();\n  const buildRunModel = useFlag('SHIPWRIGHT_BUILDRUN')\n    ? referenceForModel(BuildRunModel)\n    : referenceForModel(BuildRunModelV1Alpha1);\n\n  const [buildRuns, buildRunsLoaded, buildRunsLoadError] = useK8sWatchResource<BuildRun[]>({\n    kind: buildRunModel,\n    namespace: props.namespace,\n    isList: true,\n  });\n\n  const data = React.useMemo<CustomData>(\n    () => ({\n      buildRuns: {\n        latestByBuildName: buildRuns.reduce<Record<string, BuildRun>>((acc, buildRun) => {\n          const name = buildRun.metadata.labels?.[BUILDRUN_TO_BUILD_REFERENCE_LABEL];\n          if (\n            !acc[`${name}-${buildRun.metadata.namespace}`] ||\n            isBuildRunNewerThen(buildRun, acc[`${name}-${buildRun.metadata.namespace}`])\n          ) {\n            acc[`${name}-${buildRun.metadata.namespace}`] = buildRun;\n          }\n          return acc;\n        }, {}),\n        loaded: buildRunsLoaded,\n        error: buildRunsLoadError,\n      },\n    }),\n    [buildRuns, buildRunsLoaded, buildRunsLoadError],\n  );\n  const buildResource = props.data?.map((sBuild) => {\n    sBuild.latestBuild =\n      data.buildRuns.latestByBuildName[`${sBuild.metadata.name}-${sBuild.metadata.namespace}`];\n    return sBuild;\n  });\n\n  return (\n    <Table\n      {...props}\n      data={buildResource}\n      aria-label={t('shipwright-plugin~Builds')}\n      Header={BuildHeader}\n      Row={BuildRow}\n      defaultSortField=\"metadata.name\"\n      defaultSortOrder={SortByDirection.asc}\n      customSorts={{\n        latestBuildStatus: (obj) => getBuildRunStatus(obj.latestBuild),\n        latestRunDuration: (obj) => getBuildRunDuration(obj.latestBuild),\n      }}\n      virtualize\n    />\n  );\n};\n\nexport default BuildTable;\n","import * as React from 'react';\nimport { sortable, SortByDirection } from '@patternfly/react-table';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Table,\n  TableProps,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport { Kebab, ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport LazyActionMenu from '@console/shared/src/components/actions/LazyActionMenu';\nimport { BuildRun } from '../../types';\nimport BuildRunDuration, {\n  getBuildRunDurationInSeconds,\n} from '../buildrun-duration/BuildRunDuration';\nimport BuildRunStatus, { getBuildRunStatus } from '../buildrun-status/BuildRunStatus';\n\nconst columnClassNames = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-md', // status\n  'pf-m-hidden pf-m-visible-on-lg', // age\n  'pf-m-hidden pf-m-visible-on-xl', // duration\n  Kebab.columnClass,\n];\n\nexport const BuildRunHeader = () => {\n  // This function is NOT called as component, so we can not use useTranslation here.\n  const t = i18next.t.bind(i18next);\n\n  return [\n    {\n      title: t('shipwright-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: columnClassNames[0] },\n    },\n    {\n      id: 'namespace',\n      title: t('shipwright-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: columnClassNames[1] },\n    },\n    {\n      title: t('shipwright-plugin~Status'),\n      sortFunc: 'status',\n      transforms: [sortable],\n      props: { className: columnClassNames[2] },\n    },\n    {\n      title: t('shipwright-plugin~Started'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: columnClassNames[3] },\n    },\n    {\n      title: t('shipwright-plugin~Duration'),\n      sortFunc: 'duration',\n      transforms: [sortable],\n      props: { className: columnClassNames[4] },\n    },\n    {\n      title: '',\n      props: { className: columnClassNames[5] },\n    },\n  ];\n};\n\nexport const BuildRunRow: React.FC<RowFunctionArgs<BuildRun>> = ({ obj: buildRun }) => {\n  const kindReference = referenceFor(buildRun);\n  const context = { [kindReference]: buildRun };\n\n  return (\n    <>\n      <TableData className={columnClassNames[0]}>\n        <ResourceLink\n          kind={kindReference}\n          name={buildRun.metadata.name}\n          namespace={buildRun.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={columnClassNames[1]} columnID=\"namespace\">\n        <ResourceLink kind=\"Namespace\" name={buildRun.metadata.namespace} />\n      </TableData>\n      <TableData className={columnClassNames[2]}>\n        <BuildRunStatus buildRun={buildRun} />\n      </TableData>\n      <TableData className={columnClassNames[3]}>\n        <Timestamp timestamp={buildRun.metadata?.creationTimestamp} />\n      </TableData>\n      <TableData className={columnClassNames[4]}>\n        <BuildRunDuration buildRun={buildRun} />\n      </TableData>\n      <TableData className={columnClassNames[5]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nexport const BuildRunTable: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('shipwright-plugin~BuildRuns')}\n      Header={BuildRunHeader}\n      Row={BuildRunRow}\n      customSorts={{\n        status: getBuildRunStatus,\n        duration: getBuildRunDurationInSeconds,\n      }}\n      defaultSortField=\"metadata.creationTimestamp\"\n      defaultSortOrder={SortByDirection.desc}\n      virtualize\n    />\n  );\n};\n\nexport default BuildRunTable;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SectionHeading, ResourceSummary } from '@console/internal/components/utils';\nimport { Build } from '../../types';\nimport BuildSpecSection from './BuildSpecSection';\nimport BuildStatusSection from './BuildStatusSection';\n\ntype BuildDetailsTabProps = {\n  obj: Build;\n};\n\nconst BuildDetailsTab: React.FC<BuildDetailsTabProps> = ({ obj: build }) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('shipwright-plugin~Build details')} />\n\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={build} />\n          </div>\n          <div className=\"col-sm-6\">\n            <BuildSpecSection obj={build} buildSpec={build.spec} path=\"spec\" />\n          </div>\n        </div>\n      </div>\n\n      {build.status ? (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('shipwright-plugin~Status')} />\n          <BuildStatusSection obj={build} buildStatus={build.status} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default BuildDetailsTab;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DetailsItem } from '@console/internal/components/utils';\nimport { Build, BuildStatus } from '../../types';\n\ntype BuildStatusSectionProps = {\n  obj: Build;\n  buildStatus: BuildStatus;\n};\n\nconst BuildStatusSection: React.FC<BuildStatusSectionProps> = ({ obj, buildStatus }) => {\n  const { t } = useTranslation();\n\n  if (!buildStatus) {\n    return null;\n  }\n\n  return (\n    <dl>\n      {buildStatus.registered ? (\n        <DetailsItem label={t('shipwright-plugin~Registered')} obj={obj} path=\"status.registered\">\n          {buildStatus.registered}\n        </DetailsItem>\n      ) : null}\n      {buildStatus.reason ? (\n        <DetailsItem label={t('shipwright-plugin~Reason')} obj={obj} path=\"status.reason\">\n          {buildStatus.reason}\n        </DetailsItem>\n      ) : null}\n      {buildStatus.message ? (\n        <DetailsItem label={t('shipwright-plugin~Message')} obj={obj} path=\"status.message\">\n          {buildStatus.message}\n        </DetailsItem>\n      ) : null}\n    </dl>\n  );\n};\n\nexport default BuildStatusSection;\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { ResourcesEventStream } from '@console/internal/components/events';\nimport { EventInvolvedObject } from '@console/internal/module/k8s';\nimport { Build } from '../../types';\n\ntype BuildEventsTabProps = {\n  obj: Build;\n};\n\nconst getFilters = (build: Build) => {\n  const name = build.metadata?.name;\n  if (!name) return []; // An empty filter array will show NO events.\n  const namePrefix = `${name}-`;\n  return [\n    (involvedObject: EventInvolvedObject) =>\n      involvedObject.kind === 'Build' && involvedObject.name === name,\n    (involvedObject: EventInvolvedObject) =>\n      involvedObject.kind === 'BuildRun' && involvedObject.name.startsWith(namePrefix),\n    (involvedObject: EventInvolvedObject) =>\n      involvedObject.kind === 'TaskRun' && involvedObject.name.startsWith(namePrefix),\n    (involvedObject: EventInvolvedObject) =>\n      involvedObject.kind === 'Pod' &&\n      involvedObject.name.startsWith(namePrefix) &&\n      involvedObject.name.endsWith('-pod'),\n  ];\n};\n\nconst BuildEventsTab: React.FC<BuildEventsTabProps> = ({ obj: build }) => {\n  const { ns: namespace } = useParams();\n  return <ResourcesEventStream filters={getFilters(build)} namespace={namespace} />;\n};\n\nexport default BuildEventsTab;\n","import * as React from 'react';\nimport { BUILDRUN_TO_BUILD_REFERENCE_LABEL } from '../../const';\nimport { Build } from '../../types';\nimport BuildRunListPage from '../buildrun-list/BuildRunListPage';\n\nconst BuildRuns: React.FC<{ obj: Build }> = ({ obj: build }) => {\n  return (\n    <BuildRunListPage\n      showTitle={false}\n      canCreate={false}\n      namespace={build.metadata.namespace}\n      selector={{\n        matchLabels: { [BUILDRUN_TO_BUILD_REFERENCE_LABEL]: build.metadata?.name },\n      }}\n    />\n  );\n};\n\nexport default BuildRuns;\n","import * as React from 'react';\nimport { Flex, FlexItem, Text, TextVariants } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Conditions } from '@console/internal/components/conditions';\nimport { SectionHeading, ResourceSummary } from '@console/internal/components/utils';\nimport { BuildRun } from '../../types';\nimport { isV1Alpha1Resource } from '../../utils';\nimport BuildSpecSection from '../build-details/BuildSpecSection';\nimport BuildRunSection from './BuildRunSection';\n\ntype BuildRunDetailsTabProps = {\n  obj: BuildRun;\n};\n\nconst BuildRunDetailsTab: React.FC<BuildRunDetailsTabProps> = ({ obj: buildRun }) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('shipwright-plugin~BuildRun details')} />\n\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={buildRun} />\n          </div>\n          <div className=\"col-sm-6\">\n            <Flex direction={{ default: 'column' }}>\n              <FlexItem>\n                <BuildRunSection buildRun={buildRun} />\n              </FlexItem>\n              <FlexItem>\n                <Text component={TextVariants.h3}>{t('shipwright-plugin~BuildSpec details')}</Text>\n                <BuildSpecSection\n                  obj={buildRun}\n                  buildSpec={\n                    buildRun.status?.buildSpec ||\n                    (isV1Alpha1Resource(buildRun)\n                      ? buildRun.spec?.buildSpec\n                      : buildRun.spec?.build?.spec)\n                  }\n                  path={\n                    buildRun.status?.buildSpec\n                      ? 'status.buildSpec'\n                      : isV1Alpha1Resource(buildRun)\n                      ? 'spec.buildSpec'\n                      : 'spec.build.spec'\n                  }\n                />\n              </FlexItem>\n            </Flex>\n          </div>\n        </div>\n      </div>\n\n      {buildRun.status?.conditions?.length ? (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('shipwright-plugin~Conditions')} />\n          <Conditions conditions={buildRun.status.conditions} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default BuildRunDetailsTab;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/utils/k8s/k8s-ref';\nimport { ResourceLink, DetailsItem, Timestamp } from '@console/internal/components/utils';\nimport { BuildModel, BuildModelV1Alpha1 } from '../../models';\nimport { BuildRun } from '../../types';\nimport { getBuildNameFromBuildRun, isV1Alpha1Resource } from '../../utils';\nimport BuildRunDuration from '../buildrun-duration/BuildRunDuration';\nimport BuildRunStatus from '../buildrun-status/BuildRunStatus';\n\ntype BuildRunSectionProps = {\n  buildRun: BuildRun;\n};\n\nconst BuildRunSection: React.FC<BuildRunSectionProps> = ({ buildRun }) => {\n  const { t } = useTranslation();\n  const buildModel = isV1Alpha1Resource(buildRun) ? BuildModelV1Alpha1 : BuildModel;\n\n  return (\n    <dl>\n      <dt>{t('shipwright-plugin~Status')}</dt>\n      <dd>\n        <BuildRunStatus buildRun={buildRun} />\n      </dd>\n\n      <DetailsItem\n        label={t('shipwright-plugin~Build')}\n        obj={buildRun}\n        path={isV1Alpha1Resource(buildRun) ? 'spec.buildRef' : 'spec.build'}\n      >\n        {getBuildNameFromBuildRun(buildRun) ? (\n          <ResourceLink\n            groupVersionKind={getGroupVersionKindForModel(buildModel)}\n            namespace={buildRun.metadata.namespace}\n            name={getBuildNameFromBuildRun(buildRun)}\n          />\n        ) : (\n          '-'\n        )}\n      </DetailsItem>\n\n      <DetailsItem label={t('shipwright-plugin~Start time')} obj={buildRun} path=\"status.startTime\">\n        <Timestamp timestamp={buildRun.status?.startTime} />\n      </DetailsItem>\n\n      <DetailsItem\n        label={t('shipwright-plugin~Completion time')}\n        obj={buildRun}\n        path=\"status.completionTime\"\n      >\n        <Timestamp timestamp={buildRun.status?.completionTime} />\n      </DetailsItem>\n\n      <>\n        <dt>{t('shipwright-plugin~Duration')}</dt>\n        <dd>{buildRun.status?.startTime ? <BuildRunDuration buildRun={buildRun} /> : '-'}</dd>\n      </>\n    </dl>\n  );\n};\n\nexport default BuildRunSection;\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { ResourcesEventStream } from '@console/internal/components/events';\nimport { EventInvolvedObject } from '@console/internal/module/k8s';\nimport { BuildRun } from '../../types';\n\ntype BuildRunEventsTabProps = {\n  obj: BuildRun;\n};\n\nconst getFilters = (buildRun: BuildRun) => {\n  const name = buildRun.metadata?.name;\n  if (!name) return []; // An empty filter array will show NO events.\n  const namePrefix = `${name}-`;\n  return [\n    (involvedObject: EventInvolvedObject) =>\n      involvedObject.kind === 'BuildRun' && involvedObject.name === name,\n    (involvedObject: EventInvolvedObject) =>\n      involvedObject.kind === 'TaskRun' && involvedObject.name.startsWith(namePrefix),\n    (involvedObject: EventInvolvedObject) =>\n      involvedObject.kind === 'Pod' &&\n      involvedObject.name.startsWith(namePrefix) &&\n      involvedObject.name.endsWith('-pod'),\n  ];\n};\n\nconst BuildRunEventsTab: React.FC<BuildRunEventsTabProps> = ({ obj: buildRun }) => {\n  const { ns: namespace } = useParams();\n  return <ResourcesEventStream filters={getFilters(buildRun)} namespace={namespace} />;\n};\n\nexport default BuildRunEventsTab;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sWatchResource';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/utils/k8s/k8s-ref';\nimport { LoadingBox } from '@console/internal/components/utils';\nimport { StatusBox } from '@console/internal/components/utils/status-box';\nimport TaskRunLog from '@console/pipelines-plugin/src/components/taskruns/TaskRunLog';\nimport { TaskRunModel } from '@console/pipelines-plugin/src/models/pipelines';\nimport { TaskRunKind } from '@console/pipelines-plugin/src/types';\nimport { BuildRun } from '../../types';\nimport { isV1Alpha1Resource } from '../../utils';\n\ntype BuildRunLogsTabProps = {\n  obj: BuildRun;\n};\n\nconst BuildRunLogsTab: React.FC<BuildRunLogsTabProps> = ({ obj: buildRun }) => {\n  const { t } = useTranslation();\n  const { ns: namespace } = useParams();\n\n  const taskRunRef = isV1Alpha1Resource(buildRun)\n    ? buildRun.status?.latestTaskRunRef\n    : buildRun.status?.taskRunName;\n  const [taskRun, taskRunLoaded, taskRunLoadError] = useK8sWatchResource<TaskRunKind>(\n    taskRunRef\n      ? {\n          groupVersionKind: getGroupVersionKindForModel(TaskRunModel),\n          namespace,\n          name: taskRunRef,\n          isList: false,\n        }\n      : null,\n  );\n\n  if (!taskRunRef) {\n    return (\n      <StatusBox\n        label={t('shipwright-plugin~Logs')}\n        loadError={\n          new Error(t(\"shipwright-plugin~BuildRun status doesn't contain a TaskRun reference yet.\"))\n        }\n      />\n    );\n  }\n  if (!taskRun && taskRunLoadError) {\n    return <StatusBox label={t('shipwright-plugin~Logs')} loadError={taskRunLoadError} />;\n  }\n  if (!taskRun && !taskRunLoaded) {\n    return <LoadingBox />;\n  }\n\n  return <TaskRunLog obj={taskRun} />;\n};\n\nexport default BuildRunLogsTab;\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { history, resourcePathFromModel } from '@console/internal/components/utils';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML, safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { BuildModel } from '../../models';\nimport { Build } from '../../types';\nimport BuildForm from './BuildForm';\nimport { convertBuildToFormData, convertFormDataToBuild } from './form-utils';\nimport { BuildFormikValues } from './types';\nimport { validationSchema } from './validation';\n\ntype EditBuildProps = {\n  name: string;\n  heading: string;\n  namespace: string;\n  build: Build;\n};\n\nconst EditBuild: React.FC<EditBuildProps> = ({ heading, build: watchedBuild, namespace, name }) => {\n  const { t } = useTranslation();\n  const [initialValues] = React.useState<BuildFormikValues>(() => {\n    const values = convertBuildToFormData(watchedBuild);\n    values.yamlData = safeJSToYAML(watchedBuild, '', { skipInvalid: true });\n    values.resourceVersion = watchedBuild?.metadata?.resourceVersion;\n    values.formReloadCount = 0;\n    return values;\n  });\n\n  const handleSubmit = async (\n    values: BuildFormikValues,\n    helpers: FormikHelpers<BuildFormikValues>,\n  ): Promise<void> => {\n    let parsedBuild: Build;\n    try {\n      // Use YAML also as base when submitting the form\n      parsedBuild = safeYAMLToJS(values.yamlData);\n      if (!parsedBuild?.metadata?.namespace) {\n        parsedBuild.metadata.namespace = namespace;\n      }\n    } catch (err) {\n      helpers.setStatus({\n        submitSuccess: '',\n        submitError: t('shipwright-plugin~Invalid YAML - {{err}}', { err }),\n      });\n      return;\n    }\n\n    const changedBuild =\n      values.editorType === EditorType.Form\n        ? convertFormDataToBuild(parsedBuild, values)\n        : parsedBuild;\n\n    try {\n      const isNew = !name;\n      const updatedBuildConfig: Build = isNew\n        ? await k8sCreate<Build>(BuildModel, changedBuild)\n        : await k8sUpdate<Build>(BuildModel, changedBuild, namespace, name);\n\n      history.push(\n        resourcePathFromModel(\n          BuildModel,\n          updatedBuildConfig.metadata.name,\n          updatedBuildConfig.metadata.namespace,\n        ),\n      );\n    } catch (err) {\n      helpers.setStatus({ submitSuccess: '', submitError: err.message });\n    }\n  };\n\n  const handleCancel = () => history.goBack();\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema()}\n      onSubmit={handleSubmit}\n      enableReinitialize\n    >\n      {(formikProps) => {\n        return (\n          <BuildForm\n            {...formikProps}\n            heading={heading}\n            build={watchedBuild}\n            handleCancel={handleCancel}\n          />\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditBuild;\n","import * as React from 'react';\nimport { FormikProps } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport {\n  CodeEditorField,\n  FlexForm,\n  FormBody,\n  FormFooter,\n  FormHeader,\n  SyncedEditorField,\n} from '@console/shared/src';\nimport { downloadYaml } from '@console/shared/src/components/editor/yaml-download-utils';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { BuildModel } from '../../models';\nimport { Build } from '../../types';\nimport BuildFormEditor from './BuildFormEditor';\nimport { convertBuildFormDataToYAML, convertBuildToFormData } from './form-utils';\nimport { BuildFormikValues } from './types';\n\ntype BuildFormProp = {\n  heading: string;\n  build: Build;\n  handleCancel: () => void;\n} & FormikProps<BuildFormikValues>;\n\nconst LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY = 'shipwright.buildForm.editor.lastView';\n\nconst BuildForm: React.FC<BuildFormProp> = ({\n  handleSubmit,\n  heading,\n  build: watchedBuild,\n  values,\n  handleCancel,\n  setFieldValue,\n  setStatus,\n  setErrors,\n  status,\n  dirty,\n  isSubmitting,\n  errors,\n}) => {\n  const { t } = useTranslation();\n  const { ns } = useParams();\n  const isNew = !watchedBuild?.metadata?.name;\n  const isStale = !isNew && watchedBuild?.metadata?.resourceVersion !== values.resourceVersion;\n\n  const namespace = watchedBuild?.metadata?.namespace || ns;\n\n  const formEditor = <BuildFormEditor namespace={namespace} />;\n  const yamlEditor = (\n    <CodeEditorField name=\"yamlData\" model={BuildModel} showSamples={isNew} onSave={handleSubmit} />\n  );\n  const onReload = React.useCallback(() => {\n    setStatus({ submitSuccess: '', submitError: '' });\n    setErrors({});\n    if (values.editorType === EditorType.Form) {\n      setFieldValue('formData', convertBuildToFormData(watchedBuild, values).formData, false);\n    }\n    setFieldValue('yamlData', safeJSToYAML(watchedBuild, '', { skipInvalid: true }), false);\n    setFieldValue('resourceVersion', watchedBuild?.metadata?.resourceVersion, true);\n    setFieldValue('formReloadCount', values.formReloadCount + 1);\n  }, [setFieldValue, setStatus, setErrors, watchedBuild, values]);\n\n  const sanitizeToForm = (yamlbuild: Build) => convertBuildToFormData(yamlbuild, values).formData;\n\n  const sanitizeToYaml = () => convertBuildFormDataToYAML(values);\n\n  return (\n    <FlexForm onSubmit={handleSubmit}>\n      <FormBody flexLayout>\n        <FormHeader title={heading} />\n        <SyncedEditorField\n          name=\"editorType\"\n          formContext={{\n            name: 'formData',\n            editor: formEditor,\n            sanitizeTo: sanitizeToForm,\n          }}\n          yamlContext={{\n            name: 'yamlData',\n            editor: yamlEditor,\n            sanitizeTo: sanitizeToYaml,\n          }}\n          lastViewUserSettingKey={LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY}\n          noMargin\n        />\n      </FormBody>\n      <FormFooter\n        handleReset={isNew ? null : onReload}\n        errorMessage={status?.submitError}\n        successMessage={status?.submitSuccess}\n        showAlert={isStale}\n        infoTitle={t('shipwright-plugin~This object has been updated.')}\n        infoMessage={t('shipwright-plugin~Click reload to see the new version.')}\n        isSubmitting={isSubmitting}\n        submitLabel={isNew ? t('shipwright-plugin~Create') : t('shipwright-plugin~Save')}\n        disableSubmit={\n          (values.editorType === EditorType.YAML ? !dirty : !dirty || !_.isEmpty(errors)) ||\n          isSubmitting\n        }\n        handleCancel={handleCancel}\n        handleDownload={\n          values.editorType === EditorType.YAML && (() => downloadYaml(values.yamlData))\n        }\n        sticky\n      />\n    </FlexForm>\n  );\n};\n\nexport default BuildForm;\n","import * as React from 'react';\nimport EnvironmentVariablesSection from '@console/dev-console/src/components/buildconfig/sections/EnvironmentVariablesSection';\nimport NameSection from '@console/dev-console/src/components/buildconfig/sections/NameSection';\nimport GitSection from '@console/dev-console/src/components/import/git/GitSection';\nimport SwitchToYAMLAlert from '@console/shared/src/components/alerts/SwitchToYAMLAlert';\nimport BuildStrategySelector from './BuildStrategySelector';\nimport ImageSection from './ImageSection';\nimport ParameterSection from './ParameterSection';\nimport VolumeSection from './VolumeSection';\n\ntype BuildFormEditorProps = {\n  namespace: string;\n};\n\nconst BuildFormEditor: React.FC<BuildFormEditorProps> = ({ namespace }) => {\n  const [showYAMLAlert, setShowYAMLAlert] = React.useState<boolean>(true);\n  return (\n    <>\n      {showYAMLAlert && <SwitchToYAMLAlert onClose={() => setShowYAMLAlert(false)} />}\n      <NameSection />\n      <GitSection title=\"Source\" formContextField=\"formData.source.git\" autoFocus={false} />\n      <BuildStrategySelector namespace={namespace} />\n      <ParameterSection />\n      <VolumeSection namespace={namespace} />\n      <ImageSection namespace={namespace} />\n      <EnvironmentVariablesSection namespace={namespace} />\n    </>\n  );\n};\n\nexport default BuildFormEditor;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { SingleDropdownField, SelectInputOption } from '@console/shared/src';\nimport { BuildStrategyModel, ClusterBuildStrategyModel } from '../../models';\nimport { BuildStrategyKind, ClusterBuildStrategyKind } from '../../types';\n\ntype BuildStrategySelectorProps = {\n  namespace: string;\n  formType?: string;\n};\n\nconst BuildStrategySelector: React.FC<BuildStrategySelectorProps> = ({ namespace, formType }) => {\n  const { t } = useTranslation();\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const [error, setError] = React.useState('');\n  const watchedResources = {\n    bs: {\n      isList: true,\n      groupVersionKind: getGroupVersionKindForModel(BuildStrategyModel),\n      namespace,\n      optional: true,\n    },\n    cbs: {\n      isList: true,\n      groupVersionKind: getGroupVersionKindForModel(ClusterBuildStrategyModel),\n      optional: true,\n    },\n  };\n  const watchedBuildStrategies = useK8sWatchResources<{\n    cbs: ClusterBuildStrategyKind[];\n    bs: BuildStrategyKind[];\n  }>(watchedResources);\n  const buildStrategies = React.useMemo(\n    () => [...watchedBuildStrategies.bs.data, ...watchedBuildStrategies.cbs.data],\n    [watchedBuildStrategies.bs.data, watchedBuildStrategies.cbs.data],\n  );\n\n  React.useEffect(() => {\n    const errorKey = Object.keys(watchedBuildStrategies).find(\n      (key) => watchedBuildStrategies[key].loadError,\n    );\n    if (\n      buildStrategies.length === 0 &&\n      !watchedBuildStrategies[errorKey]?.loaded &&\n      watchedBuildStrategies[errorKey]?.loadError\n    ) {\n      setError(`${watchedBuildStrategies[errorKey]?.loadError?.message}`);\n    } else {\n      setError('');\n    }\n  }, [buildStrategies, watchedBuildStrategies]);\n\n  const clusterBuildStrategyOptions = React.useMemo(() => {\n    const options: SelectInputOption[] = buildStrategies.reduce((acc, currentValue) => {\n      acc.push({\n        label: currentValue.metadata.name,\n        value: currentValue.metadata.name,\n        description: `${currentValue.apiVersion}~${currentValue.kind}`,\n      });\n      return acc;\n    }, []);\n    return options;\n  }, [buildStrategies]);\n  const onChange = (selection) => {\n    setFieldValue('formData.build.strategy', selection);\n    const selectedBuildStrategy = buildStrategies?.find((bs) => bs.metadata.name === selection);\n    setFieldValue('formData.build.selectedBuildStrategy', selectedBuildStrategy);\n    setFieldValue('formData.build.kind', selectedBuildStrategy.kind);\n    const overridableVolumes = selectedBuildStrategy?.spec?.volumes?.filter(\n      (volume) => volume.overridable === true,\n    );\n    const volumes = (overridableVolumes || []).map((volume) => {\n      const keys = Object.keys(volume);\n      const volumeKey = _.without(keys, 'name', 'overridable', 'description');\n      return {\n        name: volume.name,\n        resourceType: volumeKey[0],\n        resource: volumeKey[0] === 'emptyDir' ? volume[volumeKey[0]] : volume[volumeKey[0]].name,\n        overridable: volume.overridable,\n        description: volume.description,\n      };\n    });\n    setFieldValue('formData.volumes', volumes || []);\n\n    if (selectedBuildStrategy?.spec) {\n      const params = (selectedBuildStrategy?.spec?.parameters || []).map((param) => {\n        return {\n          ...param,\n          ...(param.type ? { type: param.type } : { type: param.defaults ? 'array' : 'string' }),\n          value: param.default || param.defaults, // setup the default if it exists\n        };\n      });\n      setFieldValue('formData.parameters', params);\n    }\n  };\n\n  return (\n    <FormSection>\n      <SingleDropdownField\n        data-test-id=\"build-strategy-field\"\n        name=\"formData.build.strategy\"\n        label={t('shipwright-plugin~Build Strategy')}\n        onChange={onChange}\n        isDisabled={formType === 'edit'}\n        ariaLabel={t('shipwright-plugin~Cluster Build Strategy')}\n        placeholderText={t('shipwright-plugin~Select Build Strategy')}\n        helpText={t(\n          'shipwright-plugin~Cluster Build Strategies define a shared group of steps, needed to fullfil the application build process.',\n        )}\n        options={clusterBuildStrategyOptions}\n        toggleOnSelection\n        required\n      />\n      {error && buildStrategies.length === 0 && (\n        <Alert variant=\"danger\" truncateTitle={3} title={error} />\n      )}\n    </FormSection>\n  );\n};\n\nexport default BuildStrategySelector;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { InputField } from '@console/shared/src';\nimport PushSecretSelector from './PushSecretSelector';\n\nconst ImageSection: React.FC<{ namespace: string }> = ({ namespace }) => {\n  const { t } = useTranslation();\n  return (\n    <FormSection title={t('shipwright-plugin~Image')}>\n      <InputField\n        name=\"formData.outputImage.image\"\n        type={TextInputTypes.text}\n        label={t('shipwright-plugin~Output image')}\n        required\n        autoComplete=\"off\"\n        helpText={t(\n          'shipwright-plugin~Example for OpenShift internal registry: image-registry.openshift-image-registry.svc:5000/<image-namespace>/<image-name>:latest',\n        )}\n      />\n      <PushSecretSelector formContextField=\"formData.outputImage.secret\" namespace={namespace} />\n    </FormSection>\n  );\n};\n\nexport default ImageSection;\n","import * as React from 'react';\nimport { FormGroup, FormHelperText, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { secretModalLauncher } from '@console/dev-console/src/components/import/CreateSecretModal';\nimport { SecretTypeAbstraction } from '@console/internal/components/secrets/create-secret';\nimport { getFieldId } from '@console/shared';\nimport PushSecretDropdown from './PushSecretDropdown';\n\nconst CREATE_PULL_SECRET = 'create-pull-secret';\nconst CLEAR_PULL_SECRET = 'clear-pull-secret';\n\nconst PushSecretSelector: React.FC<{\n  formContextField?: string;\n  namespace: string;\n}> = ({ formContextField, namespace }) => {\n  const fieldPrefix = formContextField ? `${formContextField}` : '';\n\n  const { t } = useTranslation();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const secret: string = _.get(values, `${fieldPrefix}`);\n\n  const handleSave = (name: string) => {\n    setFieldValue(`${fieldPrefix}`, name);\n  };\n\n  const handleDropdownChange = (key: string) => {\n    if (key === CREATE_PULL_SECRET) {\n      setFieldValue(`${fieldPrefix}`, secret);\n      secretModalLauncher({\n        namespace,\n        save: handleSave,\n        secretType: SecretTypeAbstraction.image,\n      });\n    } else if (key === CLEAR_PULL_SECRET) {\n      setFieldValue(`${fieldPrefix}`, '');\n    } else {\n      setFieldValue(`${fieldPrefix}`, key);\n    }\n  };\n\n  return (\n    <>\n      <FormGroup\n        fieldId={getFieldId('source-secret', 'dropdown')}\n        label={t('shipwright-plugin~Push Secret')}\n      >\n        <PushSecretDropdown\n          name={`${fieldPrefix}`}\n          dropDownClassName=\"dropdown--full-width\"\n          menuClassName=\"dropdown-menu--text-wrap\"\n          namespace={namespace}\n          actionItems={[\n            {\n              actionTitle: t('shipwright-plugin~Create new Secret'),\n              actionKey: CREATE_PULL_SECRET,\n            },\n            {\n              actionTitle: t('shipwright-plugin~No Secret'),\n              actionKey: CLEAR_PULL_SECRET,\n            },\n          ]}\n          selectedKey={secret}\n          title={secret}\n          onChange={handleDropdownChange}\n        />\n\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              {t('shipwright-plugin~Secret with credentials for pushing build')}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default PushSecretSelector;\n","import * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { useTranslation } from 'react-i18next';\nimport { Firehose } from '@console/internal/components/utils';\nimport { SecretModel } from '@console/internal/models';\nimport { ResourceDropdown } from '@console/shared/src';\n\ninterface PushSecretDropdownProps {\n  dropDownClassName?: string;\n  menuClassName?: string;\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  onChange?: (key: string) => void;\n  title?: React.ReactNode;\n  name: string;\n}\n\nconst PushSecretDropdown: React.FC<PushSecretDropdownProps> = (props) => {\n  const { t } = useTranslation();\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const filterData = (item) => {\n    return (\n      item.type === 'kubernetes.io/dockercfg' || item.type === 'kubernetes.io/dockerconfigjson'\n    );\n  };\n  const resources = [\n    {\n      isList: true,\n      kind: SecretModel.kind,\n      namespace: props.namespace,\n      prop: SecretModel.id,\n      optional: true,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        dataSelector={['metadata', 'name']}\n        placeholder={t('shipwright-plugin~Select a Secret')}\n        autocompleteFilter={autocompleteFilter}\n        resourceFilter={filterData}\n        showBadge\n      />\n    </Firehose>\n  );\n};\n\nexport default PushSecretDropdown;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { FieldArray, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { InputField, TextColumnField } from '@console/shared';\nimport { BuildFormikValues, BuildParam, ModalParameter } from './types';\n\nexport const paramIsRequired = (param: BuildParam): boolean => {\n  return param.type === 'array' ? !param.defaults : !param.default;\n};\n\ntype ParametersSectionProps = {\n  autoCompleteValues?: string[];\n};\n\nconst ParameterSection: React.FC<ParametersSectionProps> = () => {\n  const { t } = useTranslation();\n  const {\n    values: { formData },\n  } = useFormikContext<BuildFormikValues>();\n\n  return (\n    <FormSection>\n      <FieldArray\n        name=\"parameters\"\n        key=\"parameters-row\"\n        render={() =>\n          formData?.parameters.length > 0 && (\n            <FormSection title={t('shipwright-plugin~Parameters')} fullWidth>\n              {formData?.parameters.map((parameter: ModalParameter, index) => {\n                const name = `formData.parameters.${index}.value`;\n                const isRequired = paramIsRequired(parameter);\n                const input = (ref?) => (\n                  <InputField\n                    ref={ref}\n                    name={name}\n                    type={TextInputTypes.text}\n                    label={parameter.name}\n                    helpText={parameter.description}\n                    autoComplete=\"off\"\n                    required={isRequired}\n                  />\n                );\n                return parameter.type === 'array' ? (\n                  <TextColumnField\n                    name={name}\n                    label={parameter.name}\n                    helpText={parameter.description}\n                    addLabel={`Add ${parameter.name}`}\n                    data-test={`${parameter.name}-text-column-field`}\n                    key={parameter.name}\n                    required={isRequired}\n                  >\n                    {({ name: arrayName, ...additionalProps }) => (\n                      <InputField\n                        name={arrayName}\n                        {...additionalProps}\n                        autoComplete=\"off\"\n                        required={isRequired}\n                      />\n                    )}\n                  </TextColumnField>\n                ) : (\n                  <React.Fragment key={parameter.name}>{input()}</React.Fragment>\n                );\n              })}\n            </FormSection>\n          )\n        }\n      />\n    </FormSection>\n  );\n};\n\nexport default ParameterSection;\n","import * as React from 'react';\nimport {\n  Bullseye,\n  Button,\n  ButtonType,\n  ButtonVariant,\n  Grid,\n  GridItem,\n  TextInputTypes,\n} from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { DropdownField, InputField, MultiColumnField } from '@console/shared/src';\nimport { RowRendererProps } from '@console/shared/src/components/formik-fields/multi-column-field/MultiColumnFieldRow';\nimport ConfigMapDropdown from './ConfigMapDropdown';\nimport PVCDropdown from './PVCDropdown';\nimport SecretDropdown from './SecretDropdown';\nimport { VolumeTypes } from './types';\n\ntype VolumeSectionProps = {\n  namespace: string;\n};\n\ntype VolumeFormProps = {\n  namePrefix: string;\n  onDelete: () => void;\n  namespace: string;\n};\n\nexport const GetVolumeTypeFields = (volumeType, namePrefix: string, namespace: string) => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const configMap: string = _.get(values, `${namePrefix}.resource`);\n  const handleConfigMapChange = React.useCallback(\n    (key) => {\n      setFieldValue(`${namePrefix}.resource`, key);\n    },\n    [namePrefix, setFieldValue],\n  );\n  switch (volumeType) {\n    case VolumeTypes.Secret: {\n      return <SecretDropdown name={`${namePrefix}.resource`} namespace={namespace} />;\n    }\n    case VolumeTypes.ConfigMap: {\n      return (\n        <ConfigMapDropdown\n          name={`${namePrefix}.resource`}\n          namespace={namespace}\n          dropDownClassName=\"dropdown--full-width\"\n          onChange={handleConfigMapChange}\n          selectedKey={configMap}\n        />\n      );\n    }\n    case VolumeTypes.EmptyDirectory: {\n      return null;\n    }\n    case VolumeTypes.PVC: {\n      return <PVCDropdown name={`${namePrefix}.resource`} namespace={namespace} />;\n    }\n    default:\n      return null;\n  }\n};\n\nconst VolumeForm: React.FC<VolumeFormProps> = ({ namePrefix, onDelete, namespace }) => {\n  const { t } = useTranslation();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const resourceType: string = _.get(values, `${namePrefix}.resourceType`);\n  const volumeTypeOptions: { [type in VolumeTypes]: string } = {\n    [VolumeTypes.EmptyDirectory]: t('shipwright-plugin~EmptyDir'),\n    [VolumeTypes.ConfigMap]: t('shipwright-plugin~Config Map'),\n    [VolumeTypes.Secret]: t('shipwright-plugin~Secret'),\n    [VolumeTypes.PVC]: t('shipwright-plugin~PersistentVolumeClaim'),\n  };\n  return (\n    <Grid hasGutter>\n      <GridItem span={5}>\n        <InputField\n          data-test=\"build-volumeName\"\n          label=\"Name\"\n          name={`${namePrefix}.name`}\n          type={TextInputTypes.text}\n          placeholder={t('shipwright-plugin~Enter volume name')}\n          aria-label=\"name\"\n          isDisabled\n        />\n      </GridItem>\n      <GridItem span={6}>\n        <div className=\"form-group\">\n          <DropdownField\n            name={`${namePrefix}.resourceType`}\n            label=\"Volume\"\n            items={volumeTypeOptions}\n            onChange={(type) => {\n              setFieldValue(`${namePrefix}.resourceType`, type);\n            }}\n            fullWidth\n          />\n          {GetVolumeTypeFields(resourceType, namePrefix, namespace)}\n        </div>\n      </GridItem>\n      <GridItem span={1}>\n        <Bullseye>\n          <Button variant={ButtonVariant.plain} type={ButtonType.button} onClick={onDelete}>\n            <MinusCircleIcon />\n          </Button>\n        </Bullseye>\n      </GridItem>\n    </Grid>\n  );\n};\n\nconst VolumeSection: React.FC<VolumeSectionProps> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const { values } = useFormikContext<FormikValues>();\n  const { volumes } = values.formData;\n  const overridableVolumes = volumes?.filter((volume) => volume.overridable);\n  return (\n    overridableVolumes?.length > 0 && (\n      <MultiColumnField\n        data-test=\"build-volumes\"\n        name=\"formData.volumes\"\n        headers={[]}\n        emptyValues={{ name: '', resourceType: '', resourceName: '' }}\n        hideAddRow\n        rowRenderer={({ onDelete, fieldName }: RowRendererProps) => {\n          const volumeOverridable = _.get(values, `${fieldName}.overridable`);\n          return (\n            volumeOverridable && (\n              <FormSection title={t('shipwright-plugin~Volumes')}>\n                <VolumeForm namePrefix={fieldName} onDelete={onDelete} namespace={namespace} />\n              </FormSection>\n            )\n          );\n        }}\n      />\n    )\n  );\n};\n\nexport default VolumeSection;\n","import * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { useTranslation } from 'react-i18next';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ConfigMapModel } from '@console/internal/models';\nimport { ConfigMapKind } from '@console/internal/module/k8s';\nimport { ResourceDropdown } from '@console/shared';\n\ntype ConfigMapDropdownProps = {\n  dropDownClassName?: string;\n  menuClassName?: string;\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  onChange?: (key: string) => void;\n  title?: React.ReactNode;\n  name: string;\n};\n\nconst ConfigMapDropdown: React.FC<ConfigMapDropdownProps> = (props) => {\n  const { t } = useTranslation();\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const resources = {\n    configmap: {\n      isList: true,\n      namespace: props.namespace,\n      groupVersionKind: getGroupVersionKindForModel(ConfigMapModel),\n    },\n  };\n  const watchedResources = useK8sWatchResources<{ configmap: ConfigMapKind[] }>(resources);\n\n  return (\n    <ResourceDropdown\n      {...props}\n      dataSelector={['metadata', 'name']}\n      placeholder={t('shipwright-plugin~Select a ConfigMap')}\n      autocompleteFilter={autocompleteFilter}\n      showBadge\n      resources={[\n        {\n          data: watchedResources.configmap.data,\n          loaded: watchedResources.configmap.loaded,\n          loadError: watchedResources.configmap.loadError,\n          kind: ConfigMapModel.kind,\n        },\n      ]}\n      loadError={watchedResources.configmap.loadError}\n      loaded={watchedResources.configmap.loaded}\n    />\n  );\n};\n\nexport default ConfigMapDropdown;\n","import * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { useTranslation } from 'react-i18next';\nimport { PersistentVolumeClaimModel } from '@console/internal/models';\nimport { ResourceDropdownField } from '@console/shared';\n\ninterface PVCDropdownProps {\n  name: string;\n  namespace: string;\n}\n\nconst PVCDropdown: React.FC<PVCDropdownProps> = ({ name, namespace }) => {\n  const { t } = useTranslation();\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const resources = [\n    {\n      isList: true,\n      kind: PersistentVolumeClaimModel.kind,\n      namespace,\n      prop: PersistentVolumeClaimModel.id,\n      optional: true,\n    },\n  ];\n  return (\n    <ResourceDropdownField\n      name={name}\n      resources={resources}\n      dataSelector={['metadata', 'name']}\n      placeholder={t('shipwright-plugin~Select a PVC')}\n      autocompleteFilter={autocompleteFilter}\n      fullWidth\n      showBadge\n    />\n  );\n};\n\nexport default PVCDropdown;\n","import * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { useTranslation } from 'react-i18next';\nimport { SecretModel } from '@console/internal/models';\nimport { ResourceDropdownField } from '@console/shared';\n\ninterface SecretDropdownProps {\n  name: string;\n  namespace: string;\n}\n\nconst SecretDropdown: React.FC<SecretDropdownProps> = ({ name, namespace }) => {\n  const { t } = useTranslation();\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const resources = [\n    {\n      isList: true,\n      kind: SecretModel.kind,\n      namespace,\n      prop: SecretModel.id,\n      optional: true,\n    },\n  ];\n  return (\n    <ResourceDropdownField\n      name={name}\n      resources={resources}\n      dataSelector={['metadata', 'name']}\n      placeholder={t('shipwright-plugin~Select a Secret')}\n      autocompleteFilter={autocompleteFilter}\n      fullWidth\n      showBadge\n    />\n  );\n};\n\nexport default SecretDropdown;\n","import { GitSectionFormData } from '@console/dev-console/src/components/import/git/GitSection';\nimport { GitData } from '@console/dev-console/src/components/import/import-types';\nimport { NameValueFromPair, NameValuePair } from '@console/shared/src';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { BuildStrategyKind, ClusterBuildStrategyKind } from '../../types';\n\nexport type BuildFormikValues = {\n  editorType: EditorType;\n  yamlData: string;\n  resourceVersion: string | undefined;\n  formReloadCount?: number;\n  git?: GitData;\n  formData: {\n    name: string;\n    source?: {\n      type: 'Git';\n      git: GitSectionFormData;\n    };\n    environmentVariables?: (NameValuePair | NameValueFromPair)[];\n    outputImage: {\n      image: string;\n      secret: string;\n    };\n    parameters?: [];\n    volumes?: {\n      name: string;\n      overridable: boolean;\n      resourceType: string;\n      resource: string;\n    }[];\n    build: {\n      strategy: string;\n      selectedBuildStrategy: ClusterBuildStrategyKind | BuildStrategyKind;\n      kind: string;\n    };\n  };\n};\n\nexport type BuildParam = {\n  default?: string;\n  defaults?: string[];\n  description?: string;\n  name: string;\n  type?: 'string' | 'array';\n};\n\nexport type ModalParameter = BuildParam & {\n  value?: string | string[];\n};\n\nexport enum VolumeTypes {\n  EmptyDirectory = 'emptyDir',\n  ConfigMap = 'configMap',\n  Secret = 'secret',\n  PVC = 'pvc',\n}\n","import { BuildStrategyType } from '@console/dev-console/src/components/buildconfig/types';\nimport { GitProvider } from '@console/git-service/src';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { BuildFormikValues } from './types';\n\nexport const getInitialBuildFormikValues = (namespace?: string): BuildFormikValues => {\n  return {\n    editorType: EditorType.Form,\n    git: {\n      url: '',\n      type: GitProvider.INVALID,\n      ref: '',\n      dir: '/',\n      showGitType: false,\n      secret: '',\n      isUrlValidating: false,\n    },\n    formData: {\n      name: '',\n      source: {\n        type: 'Git',\n        git: {\n          formType: 'edit',\n          name: '',\n          git: {\n            url: '',\n            type: GitProvider.INVALID,\n            ref: '',\n            dir: '/',\n            showGitType: false,\n            secret: '',\n            isUrlValidating: false,\n          },\n          image: {\n            selectedKey: '',\n            selected: '',\n            recommended: '',\n            tagObj: '',\n            couldNotRecommend: false,\n          },\n          application: {\n            selected: '',\n            selectedKey: '',\n            name: '',\n            isInContext: null,\n          },\n          build: {\n            strategy: BuildStrategyType.Source,\n          },\n          project: {\n            name: namespace,\n          },\n        },\n      },\n      build: {\n        strategy: '',\n        selectedBuildStrategy: undefined,\n        kind: '',\n      },\n      parameters: [],\n      volumes: [],\n      outputImage: {\n        image: '',\n        secret: '',\n      },\n\n      environmentVariables: [],\n    },\n\n    yamlData: '',\n\n    resourceVersion: undefined,\n  };\n};\n","import * as yup from 'yup';\nimport i18n from '@console/internal/i18n';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { BuildFormikValues } from './types';\n\nconst nameSchema = () => yup.string().required(i18n.t('shipwright-plugin~Required'));\n\nconst outputImageSchema = () =>\n  yup.object({\n    image: yup.string().required(i18n.t('shipwright-plugin~Required')),\n    secret: yup.string(),\n  });\n\nconst sourceSchema = () =>\n  yup\n    .object({\n      type: yup.string(),\n      git: yup.object({\n        git: yup.object({\n          url: yup.string().required(i18n.t('shipwright-plugin~Required')),\n          ref: yup.string(),\n          dir: yup.string(),\n        }),\n      }),\n    })\n    .required(i18n.t('shipwright-plugin~Required'));\n\nconst buildSchema = () =>\n  yup.object({\n    strategy: yup.string().required(i18n.t('shipwright-plugin~Required')),\n  });\n\nconst environmentVariablesSchema = () => yup.array();\n\nexport const formDataSchema = () =>\n  yup.object({\n    name: nameSchema(),\n    outputImage: outputImageSchema(),\n    source: sourceSchema(),\n    build: buildSchema(),\n    environmentVariables: environmentVariablesSchema(),\n  });\n\nexport const validationSchema = () =>\n  yup.mixed().test({\n    test(values: BuildFormikValues) {\n      const formYamlDefinition = yup.object({\n        editorType: yup\n          .string()\n          .oneOf(Object.values(EditorType))\n          .required(i18n.t('shipwright-plugin~Required')),\n        formData: yup.mixed().when('editorType', {\n          is: EditorType.Form,\n          then: formDataSchema(),\n        }),\n        yamlData: yup.mixed().when('editorType', {\n          is: EditorType.YAML,\n          then: yup.string().required(i18n.t('shipwright-plugin~Required')),\n        }),\n      });\n\n      return formYamlDefinition.validate(values, { abortEarly: false });\n    },\n  });\n","import * as React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport * as _ from 'lodash-es';\nimport * as semver from 'semver';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { AlertVariant, Button, Popover } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamModel } from '../models';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport { DOC_URL_PODMAN } from './utils';\nimport { CopyToClipboard } from './utils/copy-to-clipboard';\nimport { ExpandableAlert } from './utils/alerts';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { SectionHeading } from './utils/headings';\nimport { LabelList } from './utils/label-list';\nimport { navFactory } from './utils/horizontal-nav';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { Timestamp } from './utils/timestamp';\nimport { ImageStreamTimeline, getImageStreamTagName } from './image-stream-timeline';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\n\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getAnnotationTags = (specTag: any) =>\n  _.get(specTag, 'annotations.tags', '').split(/\\s*,\\s*/);\n\nconst isBuilderTag = (specTag: any) => {\n  // A spec tag has annotations tags, which is a comma-delimited string (e.g., 'builder,httpd').\n  const annotationTags = getAnnotationTags(specTag);\n  return _.includes(annotationTags, 'builder') && !_.includes(annotationTags, 'hidden');\n};\n\nconst getStatusTags = (imageStream: K8sResourceKind): any => {\n  const statusTags = _.get(imageStream, 'status.tags');\n  return _.keyBy(statusTags, 'tag');\n};\n\nexport const getBuilderTags = (imageStream: K8sResourceKind): any[] => {\n  const statusTags = getStatusTags(imageStream);\n  return _.filter(imageStream.spec.tags, (tag) => isBuilderTag(tag) && statusTags[tag.name]);\n};\n\n// Sort tags in reverse order by semver, falling back to a string comparison if not a valid version.\nexport const getBuilderTagsSortedByVersion = (imageStream: K8sResourceKind): any[] => {\n  return getBuilderTags(imageStream).sort(({ name: a }, { name: b }) => {\n    const v1 = semver.coerce(a);\n    const v2 = semver.coerce(b);\n    if (!v1 && !v2) {\n      return a.localeCompare(b);\n    }\n    if (!v1) {\n      return 1;\n    }\n    if (!v2) {\n      return -1;\n    }\n    return semver.rcompare(v1, v2);\n  });\n};\n\nexport const getMostRecentBuilderTag = (imageStream: K8sResourceKind) => {\n  const tags = getBuilderTagsSortedByVersion(imageStream);\n  return _.head(tags);\n};\n\n// An image stream is a builder image if\n// - It has a spec tag annotated with `builder` and not `hidden`\n// - It has a corresponding status tag\nexport const isBuilder = (imageStream: K8sResourceKind) => !_.isEmpty(getBuilderTags(imageStream));\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamModel), ...common];\n\nconst ImageStreamTagsRow: React.SFC<ImageStreamTagsRowProps> = ({\n  imageStream,\n  specTag,\n  statusTag,\n}) => {\n  const imageStreamStatus = _.get(imageStream, 'status');\n  const latest = _.get(statusTag, ['items', 0]);\n  const from = _.get(specTag, 'from');\n  const referencesTag = _.get(specTag, 'from.kind') === 'ImageStreamTag';\n  const image = _.get(latest, 'image');\n  const created = _.get(latest, 'created');\n  const dockerRepositoryCheck = _.has(imageStream, [\n    'metadata',\n    'annotations',\n    'openshift.io/image.dockerRepositoryCheck',\n  ]);\n  const { t } = useTranslation();\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-2 col-sm-4 col-xs-4 co-break-word\">\n        <ResourceLink\n          kind={ImageStreamTagsReference}\n          name={getImageStreamTagName(imageStream.metadata.name, statusTag.tag)}\n          namespace={imageStream.metadata.namespace}\n          title={statusTag.tag}\n          linkTo={!!image}\n        />\n      </div>\n      <span className=\"col-md-3 col-sm-4 col-xs-8 co-break-all\">\n        {from && referencesTag && (\n          <ResourceLink\n            kind={ImageStreamTagsReference}\n            name={from.name}\n            namespace={imageStream.metadata.namespace}\n            title={from.name}\n          />\n        )}\n        {from && !referencesTag && <>{from.name}</>}\n        {!from && <span className=\"text-muted\">{t('public~pushed image')}</span>}\n      </span>\n      <span className=\"col-md-4 col-sm-4 hidden-xs co-break-all\">\n        {!imageStreamStatus && dockerRepositoryCheck && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~Unable to resolve')}\n          </>\n        )}\n        {!imageStreamStatus && !dockerRepositoryCheck && !from && <>{t('public~Not synced yet')}</>}\n        {/* We have no idea why in this case  */}\n        {!imageStreamStatus && !dockerRepositoryCheck && from && <>{t('public~Unresolved')}</>}\n        {imageStreamStatus && image && <>{image}</>}\n        {imageStreamStatus && !image && (\n          <>\n            <YellowExclamationTriangleIcon />\n            &nbsp;{t('public~There is no image associated with this tag')}\n          </>\n        )}\n      </span>\n      <div className=\"col-md-3 hidden-sm hidden-xs\">\n        {created && <Timestamp timestamp={created} />}\n        {!created && '-'}\n      </div>\n    </div>\n  );\n};\n\nexport const ExampleDockerCommandPopover: React.FC<ImageStreamManipulationHelpProps> = ({\n  imageStream,\n  tag,\n}) => {\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const { t } = useTranslation();\n  if (!publicImageRepository) {\n    return null;\n  }\n  const loginCommand = 'oc registry login';\n  const pushCommand = `docker push ${publicImageRepository}:${tag || '<tag>'}`;\n  const pullCommand = `docker pull ${publicImageRepository}:${tag || '<tag>'}`;\n\n  return (\n    <Popover\n      headerContent={<>{t('public~Image registry commands')}</>}\n      className=\"co-example-docker-command__popover\"\n      minWidth=\"600px\"\n      bodyContent={\n        <div>\n          <p>\n            {t(\n              'public~Create a new ImageStreamTag by pushing an image to this ImageStream with the desired tag.',\n            )}\n          </p>\n          <br />\n          <p>{t('public~Authenticate to the internal registry')}</p>\n          <CopyToClipboard value={loginCommand} />\n          <br />\n          <p>{t('public~Push an image to this ImageStream')}</p>\n          <CopyToClipboard value={pushCommand} />\n          <br />\n          <p>{t('public~Pull an image from this ImageStream')}</p>\n          <CopyToClipboard value={pullCommand} />\n          <br />\n          <p>\n            <Trans t={t} ns=\"public\">\n              Red Hat Enterprise Linux users may use the equivalent <strong>podman</strong>{' '}\n              commands.{' '}\n            </Trans>\n            <ExternalLink href={DOC_URL_PODMAN} text={t('public~Learn more.')} />\n          </p>\n        </div>\n      }\n    >\n      <Button className=\"hidden-sm hidden-xs\" type=\"button\" variant=\"link\">\n        <QuestionCircleIcon className=\"co-icon-space-r\" />\n        {t('public~Do you need to work with this ImageStream outside of the web console?')}\n      </Button>\n    </Popover>\n  );\n};\n\nexport const ImageStreamsDetails: React.SFC<ImageStreamsDetailsProps> = ({ obj: imageStream }) => {\n  const { t } = useTranslation();\n\n  const getImportErrors = (): string[] => {\n    return _.transform(imageStream.status.tags, (acc, tag: any) => {\n      const importErrorCondition = _.find(\n        tag.conditions,\n        (condition) => condition.type === 'ImportSuccess' && condition.status === 'False',\n      );\n      importErrorCondition &&\n        acc.push(\n          t('public~Unable to sync image for tag {{tag}}. {{message}}', {\n            tag: `${imageStream.metadata.name}:${tag.tag}`,\n            message: importErrorCondition.message,\n          }),\n        );\n    });\n  };\n\n  const imageRepository = _.get(imageStream, 'status.dockerImageRepository');\n  const publicImageRepository = _.get(imageStream, 'status.publicDockerImageRepository');\n  const imageCount = _.get(imageStream, 'status.tags.length');\n  const specTagByName = _.keyBy(imageStream.spec.tags, 'name');\n  const importErrors = getImportErrors();\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        {!_.isEmpty(importErrors) && (\n          <ExpandableAlert\n            variant={AlertVariant.warning}\n            alerts={_.map(importErrors, (error, i) => (\n              <React.Fragment key={i}>{error}</React.Fragment>\n            ))}\n          />\n        )}\n        <SectionHeading text={t('public~ImageStream details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={imageStream}>\n              {imageRepository && <dt>{t('public~Image repository')}</dt>}\n              {imageRepository && <dd>{imageRepository}</dd>}\n              {publicImageRepository && <dt>{t('public~Public image repository')}</dt>}\n              {publicImageRepository && <dd>{publicImageRepository}</dd>}\n              <dt>{t('public~Image count')}</dt>\n              <dd>{imageCount ? imageCount : 0}</dd>\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Tags')} />\n        {_.isEmpty(imageStream.status.tags) ? (\n          <span className=\"text-muted\">{t('public~No tags')}</span>\n        ) : (\n          <div className=\"row\">\n            <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n              <div className=\"row co-m-table-grid__head\">\n                <div className=\"col-md-2 col-sm-4 col-xs-4\">{t('public~Name')}</div>\n                <div className=\"col-md-3 col-sm-4 col-xs-8\">{t('public~From')}</div>\n                <div className=\"col-md-4 col-sm-4 hidden-xs\">{t('public~Identifier')}</div>\n                <div className=\"col-md-3 hidden-sm hidden-xs\">{t('public~Last updated')}</div>\n              </div>\n              <div className=\"co-m-table-grid__body\">\n                {_.map(imageStream.status.tags, (statusTag) => (\n                  <ImageStreamTagsRow\n                    key={statusTag.tag}\n                    imageStream={imageStream}\n                    specTag={specTagByName[statusTag.tag]}\n                    statusTag={statusTag}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ImageStreamHistory: React.FC<ImageStreamHistoryProps> = ({ obj: imageStream }) => {\n  const imageStreamStatusTags = _.get(imageStream, 'status.tags');\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamHistory.displayName = 'ImageStreamHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamHistory),\n];\nexport const ImageStreamsDetailsPage: React.SFC = (props) => (\n  <DetailsPage {...props} kind={ImageStreamsReference} menuActions={menuActions} pages={pages} />\n);\nImageStreamsDetailsPage.displayName = 'ImageStreamsDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  Kebab.columnClass,\n];\n\nconst ImageStreamsTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={ImageStreamsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={ImageStreamsReference} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={ImageStreamsReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const ImageStreamsList: React.SFC = (props) => {\n  const { t } = useTranslation();\n  const ImageStreamsTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Labels'),\n        sortField: 'metadata.labels',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Created'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[4] },\n      },\n    ];\n  };\n  ImageStreamsTableHeader.displayName = 'ImageStreamsTableHeader';\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ImageStreams')}\n      Header={ImageStreamsTableHeader}\n      Row={ImageStreamsTableRow}\n      virtualize\n    />\n  );\n};\n\nImageStreamsList.displayName = 'ImageStreamsList';\n\nexport const buildPhase = (build) => build.status.phase;\n\nexport const ImageStreamsPage: React.SFC<ImageStreamsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      title={t('public~ImageStreams')}\n      kind={ImageStreamsReference}\n      ListComponent={ImageStreamsList}\n      canCreate={true}\n    />\n  );\n};\n\nImageStreamsPage.displayName = 'ImageStreamsListPage';\n\ntype ImageStreamTagsRowProps = {\n  imageStream: K8sResourceKind;\n  specTag: any;\n  statusTag: any;\n};\n\ntype ImageStreamHistoryProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamManipulationHelpProps = {\n  imageStream: K8sResourceKind;\n  tag?: string;\n};\n\nexport type ImageStreamsDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamsPageProps = {\n  filterLabel: string;\n};\n","export { default as BuildListPage } from './components/build-list/BuildListPage';\nexport { default as BuildRunListPage } from './components/buildrun-list/BuildRunListPage';\nexport { default as BuildDetailsPage } from './components/build-details/BuildDetailsPage';\nexport { default as BuildRunDetailsPage } from './components/buildrun-details/BuildRunDetailsPage';\nexport { default as BuildStrategyDetailsPage } from './components/buildstrategy-details/BuildStrategyDetailsPage';\nexport { default as ClusterBuildStrategyDetailsPage } from './components/clusterbuildstrategy-details/ClusterBuildStrategyDetailsPage';\nexport { default as ShipwrightTabListPage } from './components/shipwright-tablistpage/ShipwrightTabListPage';\nexport { default as BuildFormPage } from './components/build-form/BuildFormPage';\n","export * from './coreTekton';\nexport * from './pipeline';\nexport * from './pipelineRun';\nexport * from './pipelineResource';\nexport * from './task';\nexport * from './taskRun';\nexport * from './computedStatus';\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { ComputedStatus } from '../types';\n\nexport enum SucceedConditionReason {\n  PipelineRunCancelled = 'StoppedRunFinally',\n  PipelineRunStopped = 'CancelledRunFinally',\n  TaskRunCancelled = 'TaskRunCancelled',\n  Cancelled = 'Cancelled',\n  PipelineRunStopping = 'PipelineRunStopping',\n  PipelineRunPending = 'PipelineRunPending',\n  TaskRunStopping = 'TaskRunStopping',\n  CreateContainerConfigError = 'CreateContainerConfigError',\n  ExceededNodeResources = 'ExceededNodeResources',\n  ExceededResourceQuota = 'ExceededResourceQuota',\n  ConditionCheckFailed = 'ConditionCheckFailed',\n}\n\nexport const pipelineRunStatus = (pipelineRun): ComputedStatus => {\n  const conditions = _.get(pipelineRun, ['status', 'conditions'], []);\n  if (conditions.length === 0) return null;\n\n  const succeedCondition = conditions.find((c) => c.type === 'Succeeded');\n  const cancelledCondition = conditions.find((c) => c.reason === 'Cancelled');\n\n  if (\n    [\n      SucceedConditionReason.PipelineRunStopped,\n      SucceedConditionReason.PipelineRunCancelled,\n    ].includes(pipelineRun.spec?.status) &&\n    !cancelledCondition\n  ) {\n    return ComputedStatus.Cancelling;\n  }\n\n  if (!succeedCondition || !succeedCondition.status) {\n    return null;\n  }\n\n  const status =\n    succeedCondition.status === 'True'\n      ? ComputedStatus.Succeeded\n      : succeedCondition.status === 'False'\n      ? ComputedStatus.Failed\n      : ComputedStatus.Running;\n\n  if (succeedCondition.reason && succeedCondition.reason !== status) {\n    switch (succeedCondition.reason) {\n      case SucceedConditionReason.PipelineRunCancelled:\n      case SucceedConditionReason.TaskRunCancelled:\n      case SucceedConditionReason.Cancelled:\n      case SucceedConditionReason.PipelineRunStopped:\n        return ComputedStatus.Cancelled;\n      case SucceedConditionReason.PipelineRunStopping:\n      case SucceedConditionReason.TaskRunStopping:\n        return ComputedStatus.Failed;\n      case SucceedConditionReason.CreateContainerConfigError:\n      case SucceedConditionReason.ExceededNodeResources:\n      case SucceedConditionReason.ExceededResourceQuota:\n      case SucceedConditionReason.PipelineRunPending:\n        return ComputedStatus.Pending;\n      case SucceedConditionReason.ConditionCheckFailed:\n        return ComputedStatus.Skipped;\n      default:\n        return status;\n    }\n  }\n  return status;\n};\n\n// Converts the PipelineRun (and TaskRun) condition status into a human readable string.\n// See also tkn cli implementation at https://github.com/tektoncd/cli/blob/release-v0.15.0/pkg/formatted/k8s.go#L54-L83\nexport const pipelineRunStatusTitle = (pipelineRun): string => {\n  const status = pipelineRunStatus(pipelineRun);\n  if (!status) return '-';\n  switch (status) {\n    case ComputedStatus.Cancelled:\n      return i18next.t('pipelines-plugin~Cancelled');\n    case ComputedStatus.Failed:\n      return i18next.t('pipelines-plugin~Failed');\n    case ComputedStatus.Succeeded:\n      return i18next.t('pipelines-plugin~Succeeded');\n    case ComputedStatus.Pending:\n      return i18next.t('pipelines-plugin~Pending');\n    case ComputedStatus.Running:\n      return i18next.t('pipelines-plugin~Running');\n    case ComputedStatus.Skipped:\n      return i18next.t('pipelines-plugin~Skipped');\n    case ComputedStatus.Cancelling:\n      return i18next.t('pipelines-plugin~Cancelling');\n    default:\n      return status;\n  }\n};\n\nexport const pipelineFilterReducer = (pipeline): ComputedStatus => {\n  if (!pipeline.latestRun) return ComputedStatus.Other;\n  return pipelineRunStatus(pipeline.latestRun) || ComputedStatus.Other;\n};\n\nexport const pipelineTitleFilterReducer = (pipeline): string => {\n  if (!pipeline.latestRun) return '-';\n  return pipelineRunStatusTitle(pipeline.latestRun) || '-';\n};\n\nexport const pipelineRunTitleFilterReducer = (pipelineRun): string => {\n  const status = pipelineRunStatusTitle(pipelineRun);\n  return status || '-';\n};\nexport const pipelineRunFilterReducer = (pipelineRun): ComputedStatus => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const pipelineStatusFilter = (filters, pipeline) => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const status = pipelineFilterReducer(pipeline);\n  return filters.selected?.includes(status) || !_.includes(filters.all, status);\n};\n\nexport const pipelineRunStatusFilter = (phases, pipeline) => {\n  if (!phases || !phases.selected || !phases.selected.length) {\n    return true;\n  }\n\n  const status = pipelineRunFilterReducer(pipeline);\n  return phases.selected?.includes(status) || !_.includes(phases.all, status);\n};\n\nexport const pipelineResourceFilterReducer = (pipelineResource): string => {\n  return pipelineResource.spec.type;\n};\n\nexport const pipelineResourceTypeFilter = (filters, pipelineResource): boolean => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const type = pipelineResourceFilterReducer(pipelineResource);\n  return filters.selected?.includes(type) || !_.includes(filters.all, type);\n};\n\nexport const taskRunFilterReducer = (taskRun): ComputedStatus => {\n  const status = pipelineRunStatus(taskRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const taskRunFilterTitleReducer = (taskRun): string => {\n  const status = pipelineRunStatusTitle(taskRun);\n  return status || '-';\n};\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { formatPrometheusDuration } from '@openshift-console/plugin-shared/src/datetime/prometheus';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport {\n  LOG_SOURCE_RESTARTING,\n  LOG_SOURCE_WAITING,\n  LOG_SOURCE_RUNNING,\n  LOG_SOURCE_TERMINATED,\n} from '@console/internal/components/utils';\nimport { ServiceAccountModel } from '@console/internal/models';\nimport {\n  ContainerStatus,\n  k8sUpdate,\n  k8sGet,\n  SecretKind,\n  K8sResourceCommon,\n  K8sKind,\n  K8sResourceKind,\n  PersistentVolumeClaimKind,\n  K8sModel,\n} from '@console/internal/module/k8s';\nimport {\n  PIPELINE_SERVICE_ACCOUNT,\n  SecretAnnotationId,\n  TektonResourceLabel,\n} from '../components/pipelines/const';\nimport { PipelineModalFormWorkspace } from '../components/pipelines/modals/common/types';\nimport { getDuration } from '../components/pipelines/pipeline-metrics/pipeline-metrics-utils';\nimport { EventListenerKind, TriggerTemplateKind } from '../components/pipelines/resource-types';\nimport {\n  PipelineRunModel,\n  TaskRunModel,\n  PipelineResourceModel,\n  ConditionModel,\n  ClusterTaskModel,\n  TriggerTemplateModel,\n  TriggerBindingModel,\n  ClusterTriggerBindingModel,\n  PipelineModel,\n  TaskModel,\n  EventListenerModel,\n  RepositoryModel,\n  PipelineModelV1Beta1,\n  PipelineRunModelV1Beta1,\n  TaskModelV1Beta1,\n} from '../models';\nimport {\n  ComputedStatus,\n  PipelineRunKind,\n  PipelineRunParam,\n  PipelineRunWorkspace,\n  PipelineTask,\n  PipelineKind,\n  TaskRunKind,\n  TektonParam,\n  TaskRunStatus,\n  TaskKind,\n  PLRTaskRunData,\n  PipelineRunStatusType,\n} from '../types';\nimport { TaskStatus, getLatestRun } from './pipeline-augment';\nimport {\n  pipelineRunFilterReducer,\n  pipelineRunStatus,\n  SucceedConditionReason,\n} from './pipeline-filter-reducer';\n\ninterface ServiceAccountSecretNames {\n  [name: string]: string;\n}\n\nexport type ServiceAccountType = {\n  secrets: ServiceAccountSecretNames[];\n  imagePullSecrets: ServiceAccountSecretNames[];\n} & K8sResourceCommon;\n\nexport const TaskStatusClassNameMap = {\n  'In Progress': 'is-running',\n  Succeeded: 'is-done',\n  Failed: 'is-error',\n  Idle: 'is-idle',\n};\n\nexport const conditions = {\n  hasFromDependency: (task: PipelineTask): boolean =>\n    task.resources &&\n    task.resources.inputs &&\n    task.resources.inputs.length > 0 &&\n    !!task.resources.inputs[0].from,\n  hasRunAfterDependency: (task: PipelineTask): boolean => task.runAfter && task.runAfter.length > 0,\n};\n\nexport enum ListFilterId {\n  Running = 'Running',\n  Failed = 'Failed',\n  Succeeded = 'Succeeded',\n  Cancelled = 'Cancelled',\n  Other = '-',\n}\n\nexport const ListFilterLabels = {\n  [ListFilterId.Running]: i18next.t('pipelines-plugin~Running'),\n  [ListFilterId.Failed]: i18next.t('pipelines-plugin~Failed'),\n  [ListFilterId.Succeeded]: i18next.t('pipelines-plugin~Succeeded'),\n  [ListFilterId.Cancelled]: i18next.t('pipelines-plugin~Cancelled'),\n  [ListFilterId.Other]: i18next.t('pipelines-plugin~Other'),\n};\n\nexport enum PipelineResourceListFilterId {\n  Git = 'git',\n  PullRequest = 'pullRequest',\n  Image = 'image',\n  Cluster = 'cluster',\n  Storage = 'storage',\n  CloudEvent = 'cloudEvent',\n}\n\nexport const PipelineResourceListFilterLabels = {\n  [PipelineResourceListFilterId.Git]: 'Git',\n  [PipelineResourceListFilterId.PullRequest]: 'Pull Request',\n  [PipelineResourceListFilterId.Image]: 'Image',\n  [PipelineResourceListFilterId.Cluster]: 'Cluster',\n  [PipelineResourceListFilterId.Storage]: 'Storage',\n  [PipelineResourceListFilterId.CloudEvent]: 'Cloud Event',\n};\n\n/**\n * Appends the pipeline run status to each tasks in the pipeline.\n * @param pipeline\n * @param pipelineRun\n * @param isFinallyTasks\n */\nexport const appendPipelineRunStatus = (\n  pipeline,\n  pipelineRun,\n  taskRuns: TaskRunKind[],\n  isFinallyTasks = false,\n) => {\n  const tasks = (isFinallyTasks ? pipeline.spec.finally : pipeline.spec.tasks) || [];\n\n  return tasks.map((task) => {\n    if (!pipelineRun.status) {\n      return task;\n    }\n    if (!taskRuns || taskRuns.length === 0) {\n      if (pipelineRun.spec.status === SucceedConditionReason.PipelineRunCancelled) {\n        return _.merge(task, { status: { reason: ComputedStatus.Cancelled } });\n      }\n      if (pipelineRun.spec.status === SucceedConditionReason.PipelineRunPending) {\n        return _.merge(task, { status: { reason: ComputedStatus.Idle } });\n      }\n      return _.merge(task, { status: { reason: ComputedStatus.Failed } });\n    }\n\n    const taskRun = _.find(\n      taskRuns,\n      (tr) => tr.metadata.labels[TektonResourceLabel.pipelineTask] === task.name,\n    );\n    const taskStatus: TaskRunStatus = taskRun?.status;\n\n    const mTask = _.merge(task, {\n      status: pipelineRun?.status?.taskRuns\n        ? _.get(_.find(pipelineRun.status.taskRuns, { pipelineTaskName: task.name }), 'status')\n        : taskStatus,\n    });\n    // append task duration\n    if (mTask.status && mTask.status.completionTime && mTask.status.startTime) {\n      const date =\n        new Date(mTask.status.completionTime).getTime() -\n        new Date(mTask.status.startTime).getTime();\n      mTask.status.duration = formatPrometheusDuration(date);\n    }\n    // append task status\n    if (!mTask.status) {\n      mTask.status = { reason: ComputedStatus.Pending };\n    } else if (mTask.status && mTask.status.conditions) {\n      mTask.status.reason = pipelineRunStatus(mTask) || ComputedStatus.Pending;\n    } else if (mTask.status && !mTask.status.reason) {\n      mTask.status.reason = ComputedStatus.Pending;\n    }\n    return mTask;\n  });\n};\n\nexport const getPipelineTasks = (\n  pipeline: PipelineKind,\n  pipelineRun: PipelineRunKind = {\n    apiVersion: '',\n    metadata: {},\n    kind: 'PipelineRun',\n    spec: {},\n  },\n  taskRuns: TaskRunKind[],\n): PipelineTask[][] => {\n  // Each unit in 'out' array is termed as stage | out = [stage1 = [task1], stage2 = [task2,task3], stage3 = [task4]]\n  const out = [];\n  if (!pipeline.spec?.tasks || _.isEmpty(pipeline.spec.tasks)) {\n    return out;\n  }\n  const taskList = appendPipelineRunStatus(pipeline, pipelineRun, taskRuns);\n\n  // Step 1: Push all nodes without any dependencies in different stages\n  taskList.forEach((task) => {\n    if (!conditions.hasFromDependency(task) && !conditions.hasRunAfterDependency(task)) {\n      if (out.length === 0) {\n        out.push([]);\n      }\n      out[0].push(task);\n    }\n  });\n\n  // Step 2: Push nodes with 'from' dependency and stack similar tasks in a stage\n  taskList.forEach((task) => {\n    if (!conditions.hasRunAfterDependency(task) && conditions.hasFromDependency(task)) {\n      let flag = out.length - 1;\n      for (let i = 0; i < out.length; i++) {\n        for (const t of out[i]) {\n          if (\n            t.taskRef?.name === task.resources.inputs[0].from[0] ||\n            t.name === task.resources.inputs[0].from[0]\n          ) {\n            flag = i;\n          }\n        }\n      }\n      const nextToFlag = out[flag + 1] ? out[flag + 1] : null;\n      if (\n        nextToFlag &&\n        nextToFlag[0] &&\n        nextToFlag[0].resources &&\n        nextToFlag[0].resources.inputs &&\n        nextToFlag[0].resources.inputs[0] &&\n        nextToFlag[0].resources.inputs[0].from &&\n        nextToFlag[0].resources.inputs[0].from[0] &&\n        nextToFlag[0].resources.inputs[0].from[0] === task.resources.inputs[0].from[0]\n      ) {\n        nextToFlag.push(task);\n      } else {\n        out.splice(flag + 1, 0, [task]);\n      }\n    }\n  });\n\n  // Step 3: Push nodes with 'runAfter' dependencies and stack similar tasks in a stage\n  taskList.forEach((task) => {\n    if (conditions.hasRunAfterDependency(task)) {\n      let flag = out.length - 1;\n      for (let i = 0; i < out.length; i++) {\n        for (const t of out[i]) {\n          if (t.taskRef?.name === task.runAfter[0] || t.name === task.runAfter[0]) {\n            flag = i;\n          }\n        }\n      }\n      const nextToFlag = out[flag + 1] ? out[flag + 1] : null;\n      if (\n        nextToFlag &&\n        nextToFlag[0].runAfter &&\n        nextToFlag[0].runAfter[0] &&\n        nextToFlag[0].runAfter[0] === task.runAfter[0]\n      ) {\n        nextToFlag.push(task);\n      } else {\n        out.splice(flag + 1, 0, [task]);\n      }\n    }\n  });\n  return out;\n};\n\nexport const getFinallyTasksWithStatus = (\n  pipeline: PipelineKind,\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n) => appendPipelineRunStatus(pipeline, pipelineRun, taskRuns, true);\n\nexport const containerToLogSourceStatus = (container: ContainerStatus): string => {\n  if (!container) {\n    return LOG_SOURCE_WAITING;\n  }\n  const { state, lastState } = container;\n  if (state.waiting && !_.isEmpty(lastState)) {\n    return LOG_SOURCE_RESTARTING;\n  }\n  if (state.waiting) {\n    return LOG_SOURCE_WAITING;\n  }\n  if (state.terminated) {\n    return LOG_SOURCE_TERMINATED;\n  }\n  return LOG_SOURCE_RUNNING;\n};\n\nexport type LatestPipelineRunStatus = {\n  latestPipelineRun: PipelineRunKind;\n  status: string;\n};\n\n/**\n * Takes pipeline runs and produces a latest pipeline run state.\n */\nexport const getLatestPipelineRunStatus = (\n  pipelineRuns: PipelineRunKind[],\n): LatestPipelineRunStatus => {\n  if (!pipelineRuns || pipelineRuns.length === 0) {\n    // Not enough data to build the current state\n    return { latestPipelineRun: null, status: ComputedStatus.PipelineNotStarted };\n  }\n\n  const latestPipelineRun = getLatestRun(pipelineRuns, 'creationTimestamp');\n\n  if (!latestPipelineRun) {\n    // Without the latestRun we will not have progress to show\n    return { latestPipelineRun: null, status: ComputedStatus.PipelineNotStarted };\n  }\n\n  let status: string = pipelineRunFilterReducer(latestPipelineRun);\n  if (status === '-') {\n    status = ComputedStatus.Pending;\n  }\n\n  return {\n    latestPipelineRun,\n    status,\n  };\n};\n\nexport const getPipelineRunParams = (pipelineParams: TektonParam[]): PipelineRunParam[] => {\n  return (\n    pipelineParams &&\n    pipelineParams.map((param) => ({\n      name: param.name,\n      value: param.default,\n    }))\n  );\n};\n\nexport const getPipelineRunWorkspaces = (\n  pipelineWorkspaces: PipelineModalFormWorkspace[],\n): PipelineRunWorkspace[] => {\n  return (\n    pipelineWorkspaces &&\n    pipelineWorkspaces.map((workspace) => ({\n      name: workspace.name,\n      ...workspace.data,\n    }))\n  );\n};\n\nexport const calculateDuration = (startTime: string, endTime?: string, long?: boolean) => {\n  const start = new Date(startTime).getTime();\n  const end = endTime ? new Date(endTime).getTime() : new Date().getTime();\n  const durationInSeconds = (end - start) / 1000;\n  return getDuration(durationInSeconds, long);\n};\n\nexport const pipelineRunDuration = (run: PipelineRunKind | TaskRunKind): string => {\n  const startTime = run?.status?.startTime ?? null;\n  const completionTime = run?.status?.completionTime ?? null;\n\n  // Duration cannot be computed if start time is missing or a completed/failed pipeline/task has no end time\n  if (!startTime || (!completionTime && pipelineRunStatus(run) !== 'Running')) {\n    return '-';\n  }\n  return calculateDuration(startTime, completionTime, true);\n};\n\nexport const updateServiceAccount = (\n  secretName: string,\n  originalServiceAccount: ServiceAccountType,\n  updateImagePullSecrets: boolean,\n): Promise<ServiceAccountType> => {\n  const updatedServiceAccount = _.cloneDeep(originalServiceAccount);\n  updatedServiceAccount.secrets = [...updatedServiceAccount.secrets, { name: secretName }];\n  if (updateImagePullSecrets) {\n    updatedServiceAccount.imagePullSecrets = [\n      ...updatedServiceAccount.imagePullSecrets,\n      { name: secretName },\n    ];\n  }\n  return k8sUpdate(ServiceAccountModel, updatedServiceAccount);\n};\n\nexport const associateServiceAccountToSecret = (\n  secret: SecretKind,\n  namespace: string,\n  isImageSecret: boolean,\n) => {\n  k8sGet(ServiceAccountModel, PIPELINE_SERVICE_ACCOUNT, namespace)\n    .then((serviceAccount) => {\n      if (_.find(serviceAccount.secrets, (s) => s.name === secret.metadata.name) === undefined) {\n        updateServiceAccount(secret.metadata.name, serviceAccount, isImageSecret);\n      }\n    })\n    .catch((err) => {\n      errorModal({ error: err.message });\n    });\n};\n\ntype KeyValuePair = {\n  key: string;\n  value: string;\n};\n\nconst getAnnotationKey = (secretType: string, suffix: number) => {\n  const annotationPrefix = 'tekton.dev';\n  if (secretType === SecretAnnotationId.Git) {\n    return `${annotationPrefix}/${SecretAnnotationId.Git}-${suffix}`;\n  }\n  if (secretType === SecretAnnotationId.Image) {\n    return `${annotationPrefix}/${SecretAnnotationId.Image}-${suffix}`;\n  }\n  return null;\n};\n\nexport const getSecretAnnotations = (\n  annotation: KeyValuePair,\n  existingAnnotations: { [key: string]: string } = {},\n) => {\n  let count = 0;\n  let annotationKey = getAnnotationKey(annotation?.key, count);\n  if (!annotationKey) {\n    return existingAnnotations;\n  }\n  while (\n    existingAnnotations[annotationKey] &&\n    existingAnnotations[annotationKey] !== annotation?.value\n  ) {\n    annotationKey = getAnnotationKey(annotation?.key, ++count);\n  }\n\n  return { ...existingAnnotations, [annotationKey]: annotation?.value };\n};\n\nexport const pipelinesTab = (kindObj: K8sKind) => {\n  switch (kindObj.kind) {\n    case PipelineModel.kind:\n    case TaskModel.kind:\n    case EventListenerModel.kind:\n      return '';\n    case PipelineRunModel.kind:\n      return 'pipeline-runs';\n    case PipelineResourceModel.kind:\n      return 'pipeline-resources';\n    case ConditionModel.kind:\n      return 'conditions';\n    case TaskRunModel.kind:\n      return 'task-runs';\n    case ClusterTaskModel.kind:\n      return 'cluster-tasks';\n    case TriggerTemplateModel.kind:\n      return 'trigger-templates';\n    case TriggerBindingModel.kind:\n      return 'trigger-bindings';\n    case ClusterTriggerBindingModel.kind:\n      return 'cluster-trigger-bindings';\n    case RepositoryModel.kind:\n      return 'repositories';\n    default:\n      return null;\n  }\n};\n\nexport const getMatchedPVCs = (\n  pvcResources: PersistentVolumeClaimKind[],\n  ownerResourceName: string,\n  ownerResourceKind: string,\n): PersistentVolumeClaimKind[] => {\n  return pvcResources.filter((pvc) => {\n    const { ownerReferences = [] } = pvc.metadata;\n\n    return ownerReferences.some(\n      (reference) => reference.name === ownerResourceName && reference.kind === ownerResourceKind,\n    );\n  });\n};\n\nexport const getPipeline = (resource: K8sResourceKind, pipelines: PipelineKind[]): PipelineKind => {\n  const pipeline = pipelines.find((p: PipelineKind) => p.metadata.name === resource.metadata.name);\n  return pipeline;\n};\n\nexport const getTriggerTemplates = (\n  pipeline: PipelineKind,\n  triggerTemplates: TriggerTemplateKind[],\n): TriggerTemplateKind[] => {\n  const triggerTemplate = triggerTemplates.filter(\n    (tt: TriggerTemplateKind) =>\n      !!tt.spec.resourcetemplates.find(\n        (rt) => rt.spec.pipelineRef?.name === pipeline.metadata.name,\n      ),\n  );\n  return triggerTemplate;\n};\n\nexport const getEventListeners = (\n  triggerTemplates: TriggerTemplateKind[],\n  eventListeners: EventListenerKind[],\n): EventListenerKind[] => {\n  const resourceEventListeners = eventListeners.reduce((acc, et: EventListenerKind) => {\n    const triggers = et.spec.triggers.filter((t) =>\n      triggerTemplates.find((tt) => tt?.metadata.name === t?.template?.ref),\n    );\n    if (triggers.length > 0) {\n      acc.push(et);\n    }\n    return acc;\n  }, []);\n  return resourceEventListeners;\n};\n\nexport const returnValidPipelineModel = (pipeline: PipelineKind): K8sModel => {\n  if (pipeline.apiVersion === 'tekton.dev/v1beta1') {\n    return PipelineModelV1Beta1;\n  }\n  return PipelineModel;\n};\n\nexport const returnValidPipelineRunModel = (pipelineRun: PipelineRunKind): K8sModel => {\n  if (pipelineRun.apiVersion === 'tekton.dev/v1beta1') {\n    return PipelineRunModelV1Beta1;\n  }\n  return PipelineRunModel;\n};\n\nexport const returnValidTaskModel = (task: TaskKind): K8sModel => {\n  if (task.apiVersion === 'tekton.dev/v1beta1') {\n    return TaskModelV1Beta1;\n  }\n  return TaskModel;\n};\n\nexport enum TaskRunResultsAnnotations {\n  KEY = 'task.results.key',\n  TYPE = 'task.results.type',\n}\n\nexport enum TaskRunResultsAnnotationValue {\n  EXTERNAL_LINK = 'external-link',\n}\n\nexport enum TaskRunResults {\n  IMAGE_REPOSITORY = 'IMAGE_URL',\n  SBOM = 'LINK_TO_SBOM',\n  SCAN_OUTPUT = 'SCAN_OUTPUT',\n  TEST_OUTPUT = 'TEST_OUTPUT',\n}\n\nexport const getSbomTaskRun = (taskruns: TaskRunKind[]): TaskRunKind =>\n  taskruns?.find(\n    (tr) => tr?.metadata?.annotations?.[TaskRunResultsAnnotations.KEY] === TaskRunResults.SBOM,\n  );\n\nexport const hasExternalLink = (sbomTaskRun: TaskRunKind): boolean =>\n  sbomTaskRun?.metadata?.annotations?.[TaskRunResultsAnnotations.TYPE] ===\n  TaskRunResultsAnnotationValue.EXTERNAL_LINK;\n\nexport const getSbomLink = (sbomTaskRun: TaskRunKind): string | undefined =>\n  (sbomTaskRun?.status?.results || sbomTaskRun?.status?.taskResults)?.find(\n    (r) => r.name === TaskRunResults.SBOM,\n  )?.value;\n\nexport const getImageUrl = (PipelineRun: PipelineRunKind): string | undefined =>\n  (PipelineRun?.status?.results || PipelineRun?.status?.pipelineResults)?.find(\n    (r) => r.name === TaskRunResults.IMAGE_REPOSITORY,\n  )?.value;\n\nexport const taskRunStatus = (taskRun: TaskRunKind | PLRTaskRunData): ComputedStatus => {\n  if (!taskRun?.status?.conditions?.length) {\n    return ComputedStatus.Pending;\n  }\n  const status: ComputedStatus = pipelineRunStatus(taskRun);\n  return status;\n};\n\nexport const getPipelineRunStatus = (pipelineRun: PipelineRunKind): TaskStatus => {\n  const conditionsMessage = pipelineRun?.status?.conditions?.find(\n    (condition) => condition?.type === 'Succeeded',\n  )?.message;\n\n  // Extracting key-value pairs using updated regular expression\n  const matches = conditionsMessage?.match(/(\\w+)(?::\\s*|\\s+)(\\d+)/g);\n  // Creating the object dynamically\n  const result: PipelineRunStatusType = {};\n  matches?.forEach((match) => {\n    const [key, value] = match.split(/(?::\\s*|\\s+)/);\n    result[key.trim()] = Number(value.trim());\n  });\n\n  const totalSucceeded =\n    (result?.Completed || 0) - (result?.Failed || 0) - (result?.Cancelled || 0);\n\n  const taskRunStatusObj: TaskStatus = {\n    Running: result?.Incomplete || 0,\n    Succeeded: totalSucceeded || 0,\n    Cancelled: result?.Cancelled || 0,\n    Failed: result?.Failed || 0,\n    Skipped: result?.Skipped || 0,\n    Completed: result?.Completed || 0,\n    Cancelling: result?.Cancelled || 0,\n    PipelineNotStarted: 0,\n    Pending: 0,\n  };\n\n  return taskRunStatusObj;\n};\n","import { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\n\nexport type ResourceTarget = 'inputs' | 'outputs';\n\nexport type TektonParam = {\n  default?: string | string[];\n  description?: string;\n  name: string;\n  type?: 'string' | 'array';\n};\n\nexport type TektonTaskSteps = {\n  // TODO: Figure out required fields\n  name: string;\n  args?: string[];\n  command?: string[];\n  image?: string;\n  resources?: {}[] | {};\n  env?: { name: string; value: string }[];\n  script?: string[];\n};\n\nexport type TaskResult = {\n  name: string;\n  description?: string;\n};\n\nexport type TektonTaskSpec = {\n  metadata?: {};\n  description?: string;\n  steps: TektonTaskSteps[];\n  params?: TektonParam[];\n  resources?: TektonResourceGroup<TektonResource>;\n  results?: TaskResult[];\n  workspaces?: TektonWorkspace[];\n};\n\nexport type TektonResourceGroup<ResourceType> = {\n  inputs?: ResourceType[];\n  outputs?: ResourceType[];\n};\n\n/** Deprecated upstream - Workspaces are replacing Resources */\nexport type TektonResource = {\n  name: string;\n  optional?: boolean;\n  type: string; // TODO: limit to known strings\n};\n\nexport type TektonWorkspace = {\n  name: string;\n  description?: string;\n  mountPath?: string;\n  readOnly?: boolean;\n  optional?: boolean;\n};\n\nexport type TektonResultsRun = {\n  name: string;\n  value: string;\n};\n\nexport interface Addon {\n  enablePipelinesAsCode: boolean;\n  params: Param[];\n}\n\nexport interface Param {\n  name: string;\n  value: string;\n}\n\nexport interface Dashboard {\n  readonly: boolean;\n}\n\nexport enum MetricsLevel {\n  METRICS_PIPELINERUN_DURATION_TYPE = 'metrics.pipelinerun.duration-type',\n  METRICS_PIPELINERUN_LEVEL = 'metrics.pipelinerun.level',\n  METRICS_TASKRUN_DURATION_TYPE = 'metrics.taskrun.duration-type',\n  METRICS_TASKRUN_LEVEL = 'metrics.taskrun.level',\n}\n\nexport enum LevelTypes {\n  PIPELINE = 'pipeline',\n  PIPELINERUN = 'pipelinerun',\n  TASK = 'task',\n  TASKRUN = 'taskrun',\n}\n\nexport enum DurationTypes {\n  HISTOGRAM = 'histogram',\n  LASTVALUE = 'lastvalue',\n  NAMESPACE = 'namespace',\n}\n\nexport interface Pipeline {\n  'default-service-account': string;\n  'disable-affinity-assistant': boolean;\n  'disable-creds-init': boolean;\n  'enable-api-fields': string;\n  'enable-custom-tasks': boolean;\n  'enable-tekton-oci-bundles': boolean;\n  [MetricsLevel.METRICS_PIPELINERUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_PIPELINERUN_LEVEL]: LevelTypes;\n  [MetricsLevel.METRICS_TASKRUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_TASKRUN_LEVEL]: LevelTypes;\n  params: Param[];\n  'require-git-ssh-secret-known-hosts': boolean;\n  'running-in-environment-with-injected-sidecars': boolean;\n  'scope-when-expressions-to-task': boolean;\n}\n\nexport interface Pruner {\n  keep: number;\n  resources: string[];\n  schedule: string;\n}\n\nexport interface Trigger {\n  'default-service-account': string;\n  'enable-api-fields': string;\n}\n\nexport interface Spec {\n  addon: Addon;\n  config: {};\n  dashboard: Dashboard;\n  hub: {};\n  params: Param[];\n  pipeline: Pipeline;\n  profile: string;\n  pruner: Pruner;\n  targetNamespace: string;\n  trigger: Trigger;\n}\n\nexport interface Status {\n  conditions: TektonConfigCondition[];\n}\n\nexport interface TektonConfigCondition {\n  lastTransitionTime: string;\n  status: string;\n  type: string;\n}\n\nexport type TektonConfig = K8sResourceCommon & {\n  spec: Spec;\n  status: Status;\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  ObjectMetadata,\n} from '@console/internal/module/k8s';\nimport { TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineKind, PipelineSpec } from './pipeline';\n\nexport type PLRTaskRunStep = {\n  container: string;\n  imageID?: string;\n  name: string;\n  waiting?: {\n    reason: string;\n  };\n  running?: {\n    startedAt: string;\n  };\n  terminated?: {\n    containerID: string;\n    exitCode: number;\n    finishedAt: string;\n    reason: string;\n    startedAt: string;\n    message?: string;\n  };\n};\n\nexport type PLRTaskRunData = {\n  pipelineTaskName: string;\n  status: {\n    completionTime?: string;\n    conditions: Condition[];\n    /** Can be empty */\n    podName: string;\n    startTime: string;\n    steps?: PLRTaskRunStep[];\n    taskSpec?: TektonTaskSpec;\n    taskResults?: { name: string; value: string }[]; // in tekton v1 taskResults is renamed to results\n    results?: { name: string; value: string }[];\n  };\n};\n\nexport type PLRTaskRuns = {\n  [taskRunName: string]: PLRTaskRunData;\n};\n\nexport type VolumeTypeSecret = {\n  secretName: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypeConfigMaps = {\n  name: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypePVC = {\n  claimName: string;\n};\n\nexport type PersistentVolumeClaimType = {\n  persistentVolumeClaim: VolumeTypePVC;\n};\n\nexport type VolumeClaimTemplateType = {\n  volumeClaimTemplate: VolumeTypeClaim;\n};\nexport type VolumeTypeClaim = {\n  metadata?: ObjectMetadata;\n  spec: {\n    accessModes: string[];\n    resources: {\n      requests: {\n        storage: string;\n      };\n    };\n    storageClassName?: string;\n    volumeMode?: string;\n  };\n};\n\nexport type Condition = {\n  type: string;\n  status: string;\n  reason?: string;\n  message?: string;\n  lastTransitionTime?: string;\n};\n\nexport type ChildReferences = {\n  apiVersion: string;\n  kind: string;\n  name: string;\n  pipelineTaskName: string;\n};\n\nexport type PipelineRunEmbeddedResourceParam = { name: string; value: string };\nexport type PipelineRunEmbeddedResource = {\n  name: string;\n  resourceSpec: {\n    params: PipelineRunEmbeddedResourceParam[];\n    type: string;\n  };\n};\nexport type PipelineRunReferenceResource = {\n  name: string;\n  resourceRef: {\n    name: string;\n  };\n};\nexport type PipelineRunResource = PipelineRunReferenceResource | PipelineRunEmbeddedResource;\n\nexport type PipelineRunWorkspace = {\n  name: string;\n  [volumeType: string]:\n    | VolumeTypeSecret\n    | VolumeTypeConfigMaps\n    | VolumeTypePVC\n    | VolumeTypeClaim\n    | {};\n};\n\nexport type PipelineRunParam = {\n  name: string;\n  value: string | string[];\n\n  // TODO: To be validated\n  input?: string;\n  output?: string;\n  resource?: object;\n};\n\nexport type PipelineRunStatus = {\n  succeededCondition?: string;\n  creationTimestamp?: string;\n  conditions?: Condition[];\n  startTime?: string;\n  completionTime?: string;\n  taskRuns?: PLRTaskRuns;\n  pipelineSpec: PipelineSpec;\n  skippedTasks?: {\n    name: string;\n  }[];\n  pipelineResults?: TektonResultsRun[]; // in tekton v1 pipelineResults is renamed to results\n  results?: TektonResultsRun[];\n  childReferences?: ChildReferences[];\n};\n\nexport type PipelineRunKind = K8sResourceCommon & {\n  spec: {\n    pipelineRef?: { name: string };\n    pipelineSpec?: PipelineSpec;\n    params?: PipelineRunParam[];\n    workspaces?: PipelineRunWorkspace[];\n    resources?: PipelineRunResource[];\n    serviceAccountName?: string;\n    timeout?: string;\n    // Only used in a single case - cancelling a pipeline; should not be copied between PLRs\n    status?: 'StoppedRunFinally' | 'PipelineRunPending' | 'CancelledRunFinally';\n    // In tekton v1 ServiceAccountName is moved\n    // to TaskRunTemplate as TaskRunTemplate.ServiceAccountName\n    taskRunTemplate?: {\n      serviceAccountName?: string;\n    };\n  };\n  status?: PipelineRunStatus;\n};\n\nexport type PipelineWithLatest = PipelineKind & {\n  latestRun?: PipelineRunKind;\n};\n\nexport const PipelineRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'PipelineRun',\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  PersistentVolumeClaimKind,\n} from '@console/internal/module/k8s';\nimport { TektonResource, TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineTaskParam, PipelineTaskRef } from './pipeline';\nimport {\n  Condition,\n  PLRTaskRunStep,\n  VolumeTypeConfigMaps,\n  VolumeTypePVC,\n  VolumeTypeSecret,\n} from './pipelineRun';\n\nexport type TaskRunWorkspace = {\n  name: string;\n  volumeClaimTemplate?: PersistentVolumeClaimKind;\n  persistentVolumeClaim?: VolumeTypePVC;\n  configMap?: VolumeTypeConfigMaps;\n  emptyDir?: {};\n  secret?: VolumeTypeSecret;\n  subPath?: string;\n};\n\nexport type TaskRunStatus = {\n  completionTime?: string;\n  conditions?: Condition[];\n  podName?: string;\n  startTime?: string;\n  steps?: PLRTaskRunStep[];\n  taskResults?: TektonResultsRun[]; // in tekton v1 taskResults is renamed to results\n  results?: TektonResultsRun[];\n};\n\nexport type TaskRunKind = K8sResourceCommon & {\n  spec: {\n    taskRef?: PipelineTaskRef;\n    taskSpec?: TektonTaskSpec;\n    serviceAccountName?: string;\n    params?: PipelineTaskParam[];\n    resources?: TektonResource[];\n    timeout?: string;\n    workspaces?: TaskRunWorkspace[];\n  };\n  status?: TaskRunStatus;\n};\n\nexport const TaskRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'TaskRun',\n};\n\nexport type PipelineRunStatusType = {\n  Completed?: number;\n  Failed?: number;\n  Skipped?: number;\n  Cancelled?: number;\n  Incomplete?: number;\n  PipelineNotStarted?: number;\n  Pending?: number;\n  Running?: number;\n  Succeeded?: number;\n};\n","export enum ComputedStatus {\n  Cancelling = 'Cancelling',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Running = 'Running',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'In Progress' = 'In Progress',\n  FailedToStart = 'FailedToStart',\n  PipelineNotStarted = 'PipelineNotStarted',\n  Skipped = 'Skipped',\n  Cancelled = 'Cancelled',\n  Pending = 'Pending',\n  Idle = 'Idle',\n  Other = '-',\n}\n\nexport enum CustomRunStatus {\n  RunCancelled = 'RunCancelled',\n}\n","import { chart_color_black_400 as skippedColor } from '@patternfly/react-tokens/dist/js/chart_color_black_400';\nimport { chart_color_black_500 as cancelledColor } from '@patternfly/react-tokens/dist/js/chart_color_black_500';\nimport { chart_color_blue_100 as pendingColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_100';\nimport { chart_color_blue_300 as runningColor } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_green_400 as successColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { global_danger_color_100 as failureColor } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport i18next from 'i18next';\nimport {\n  K8sKind,\n  referenceForModel,\n  GroupVersionKind,\n  apiVersionForModel,\n} from '@console/internal/module/k8s';\nimport { TektonResourceLabel } from '../components/pipelines/const';\nimport {\n  ClusterTaskModel,\n  ClusterTriggerBindingModel,\n  TaskModel,\n  TriggerBindingModel,\n  PipelineModel,\n} from '../models';\nimport { ComputedStatus, PipelineKind, PipelineRunKind, PipelineTask, TaskRunKind } from '../types';\nimport { pipelineRunFilterReducer, SucceedConditionReason } from './pipeline-filter-reducer';\n\ninterface Metadata {\n  name: string;\n  namespace?: string;\n}\n\nexport interface PropPipelineData {\n  metadata: Metadata;\n  latestRun?: PipelineRunKind;\n}\n\nexport interface StatusMessage {\n  message: string;\n  pftoken: { name: string; value: string; var: string };\n}\n\nexport interface TaskStatus {\n  PipelineNotStarted: number;\n  Pending: number;\n  Running: number;\n  Succeeded: number;\n  Cancelled: number;\n  Failed: number;\n  Skipped: number;\n  Completed?: number;\n  Cancelling?: number;\n}\n\nexport const getLatestRun = (runs: PipelineRunKind[], field: string): PipelineRunKind => {\n  if (!runs || !(runs.length > 0) || !field) {\n    return null;\n  }\n  let latestRun = runs[0];\n  if (field === 'creationTimestamp') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].metadata &&\n        runs[i].metadata[field] &&\n        new Date(runs[i].metadata[field]) > new Date(latestRun.metadata[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else if (field === 'startTime' || field === 'completionTime') {\n    for (let i = 1; i < runs.length; i++) {\n      latestRun =\n        runs[i] &&\n        runs[i].status &&\n        runs[i].status[field] &&\n        new Date(runs[i].status[field]) > new Date(latestRun.status[field])\n          ? runs[i]\n          : latestRun;\n    }\n  } else {\n    latestRun = runs[runs.length - 1];\n  }\n  if (!latestRun.status) {\n    latestRun = { ...latestRun, status: { pipelineSpec: { tasks: [] } } };\n  }\n  if (!latestRun.status.succeededCondition) {\n    latestRun.status = { ...latestRun.status, succeededCondition: '' };\n  }\n  latestRun.status.succeededCondition = pipelineRunFilterReducer(latestRun);\n  return latestRun;\n};\n\nexport const augmentRunsToData = (\n  pipelines: PropPipelineData[],\n  pipelineruns: PipelineRunKind[],\n): PropPipelineData[] => {\n  return pipelines.map((pipeline) => {\n    const prsForPipeline = pipelineruns.filter(\n      (pr) => pr.metadata.labels?.['tekton.dev/pipeline'] === pipeline.metadata.name,\n    );\n    pipeline.latestRun = getLatestRun(prsForPipeline, 'creationTimestamp');\n    return pipeline;\n  });\n};\n\nexport const getRunStatusColor = (status: string): StatusMessage => {\n  switch (status) {\n    case ComputedStatus.Succeeded:\n      return { message: i18next.t('pipelines-plugin~Succeeded'), pftoken: successColor };\n    case ComputedStatus.Failed:\n      return { message: i18next.t('pipelines-plugin~Failed'), pftoken: failureColor };\n    case ComputedStatus.FailedToStart:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun failed to start'),\n        pftoken: failureColor,\n      };\n    case ComputedStatus.Running:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n    case ComputedStatus['In Progress']:\n      return { message: i18next.t('pipelines-plugin~Running'), pftoken: runningColor };\n\n    case ComputedStatus.Skipped:\n      return { message: i18next.t('pipelines-plugin~Skipped'), pftoken: skippedColor };\n    case ComputedStatus.Cancelled:\n      return { message: i18next.t('pipelines-plugin~Cancelled'), pftoken: cancelledColor };\n    case ComputedStatus.Cancelling:\n      return { message: i18next.t('pipelines-plugin~Cancelling'), pftoken: cancelledColor };\n    case ComputedStatus.Idle:\n    case ComputedStatus.Pending:\n      return { message: i18next.t('pipelines-plugin~Pending'), pftoken: pendingColor };\n    default:\n      return {\n        message: i18next.t('pipelines-plugin~PipelineRun not started yet'),\n        pftoken: pendingColor,\n      };\n  }\n};\n\nexport const truncateName = (name: string, length: number): string =>\n  name.length < length ? name : `${name.slice(0, length - 1)}...`;\n\nexport const getPipelineFromPipelineRun = (pipelineRun: PipelineRunKind): PipelineKind => {\n  const pipelineName =\n    pipelineRun?.metadata?.labels?.[TektonResourceLabel.pipeline] || pipelineRun?.metadata?.name;\n  const pipelineSpec = pipelineRun?.status?.pipelineSpec || pipelineRun?.spec?.pipelineSpec;\n  if (!pipelineName || !pipelineSpec) {\n    return null;\n  }\n  return {\n    apiVersion: apiVersionForModel(PipelineModel),\n    kind: PipelineModel.kind,\n    metadata: {\n      name: pipelineName,\n      namespace: pipelineRun.metadata.namespace,\n    },\n    spec: pipelineSpec,\n  };\n};\n\nexport const totalPipelineRunTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalTasks = (executedPipeline.spec?.tasks || []).length ?? 0;\n  const finallyTasks = (executedPipeline.spec?.finally || []).length ?? 0;\n  return totalTasks + finallyTasks;\n};\n\nexport const totalPipelineRunCustomTasks = (executedPipeline: PipelineKind): number => {\n  if (!executedPipeline) {\n    return 0;\n  }\n  const totalCustomTasks =\n    (executedPipeline.spec?.tasks || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  const finallyCustomTasks =\n    (executedPipeline.spec?.finally || []).filter(\n      (task) => task.taskRef?.kind !== 'Task' && task.taskRef?.kind !== 'ClusterTask',\n    ).length ?? 0;\n  return totalCustomTasks + finallyCustomTasks;\n};\n\nexport const getTaskStatus = (\n  pipelinerun: PipelineRunKind,\n  pipeline: PipelineKind,\n  taskRuns: TaskRunKind[],\n): TaskStatus => {\n  const totalTasks = totalPipelineRunTasks(pipeline) - totalPipelineRunCustomTasks(pipeline);\n  const plrTasks = (): string[] => {\n    if (pipelinerun?.status?.taskRuns) {\n      return Object.keys(pipelinerun.status.taskRuns);\n    }\n    if (taskRuns) {\n      return taskRuns?.map((tRun) => tRun.metadata.name);\n    }\n    return [];\n  };\n  const plrTaskLength = plrTasks().length;\n  const skippedTaskLength = (pipelinerun?.status?.skippedTasks || []).length;\n  const taskStatus: TaskStatus = {\n    PipelineNotStarted: 0,\n    Pending: 0,\n    Running: 0,\n    Succeeded: 0,\n    Failed: 0,\n    Cancelled: 0,\n    Skipped: skippedTaskLength,\n  };\n\n  if (pipelinerun?.status?.taskRuns || taskRuns) {\n    plrTasks().forEach((taskRun) => {\n      const status = pipelineRunFilterReducer(\n        taskRuns?.find((tRun) => tRun.metadata.name === taskRun) ||\n          pipelinerun.status.taskRuns[taskRun],\n      );\n      if (status === 'Succeeded') {\n        taskStatus[ComputedStatus.Succeeded]++;\n      } else if (status === 'Running') {\n        taskStatus[ComputedStatus.Running]++;\n      } else if (status === 'Failed') {\n        taskStatus[ComputedStatus.Failed]++;\n      } else if (status === 'Cancelled') {\n        taskStatus[ComputedStatus.Cancelled]++;\n      } else {\n        taskStatus[ComputedStatus.Pending]++;\n      }\n    });\n\n    const pipelineRunHasFailure = taskStatus[ComputedStatus.Failed] > 0;\n    const pipelineRunIsCancelled =\n      pipelineRunFilterReducer(pipelinerun) === ComputedStatus.Cancelled;\n    const unhandledTasks =\n      totalTasks >= plrTaskLength ? totalTasks - plrTaskLength - skippedTaskLength : totalTasks;\n\n    if (pipelineRunHasFailure || pipelineRunIsCancelled) {\n      taskStatus[ComputedStatus.Cancelled] += unhandledTasks;\n    } else {\n      taskStatus[ComputedStatus.Pending] += unhandledTasks;\n    }\n  } else if (\n    pipelinerun?.status?.conditions?.[0]?.status === 'False' ||\n    pipelinerun?.spec.status === SucceedConditionReason.PipelineRunCancelled\n  ) {\n    taskStatus[ComputedStatus.Cancelled] = totalTasks;\n  } else if (pipelinerun?.spec.status === SucceedConditionReason.PipelineRunPending) {\n    taskStatus[ComputedStatus.Pending] += totalTasks;\n  } else {\n    taskStatus[ComputedStatus.PipelineNotStarted]++;\n  }\n  return taskStatus;\n};\n\nexport const getResourceModelFromTaskKind = (kind: string): K8sKind => {\n  if (kind === ClusterTaskModel.kind) {\n    return ClusterTaskModel;\n  }\n  if (kind === TaskModel.kind || kind === undefined) {\n    return TaskModel;\n  }\n  return null;\n};\n\nexport const getSafeTaskResourceKind = (kind: string): string =>\n  (getResourceModelFromTaskKind(kind) || TaskModel).kind;\n\nexport const getResourceModelFromBindingKind = (kind: string): K8sKind => {\n  if (kind === ClusterTriggerBindingModel.kind) {\n    return ClusterTriggerBindingModel;\n  }\n  if (kind === TriggerBindingModel.kind || kind === undefined) {\n    return TriggerBindingModel;\n  }\n  return null;\n};\n\nexport const getSafeBindingResourceKind = (kind: string): string =>\n  (getResourceModelFromBindingKind(kind) || TriggerBindingModel).kind;\n\nexport const getResourceModelFromTask = (task: PipelineTask): K8sKind => {\n  const {\n    taskRef: { kind },\n  } = task;\n\n  return getResourceModelFromTaskKind(kind);\n};\n\nexport const pipelineRefExists = (pipelineRun: PipelineRunKind): boolean =>\n  !!pipelineRun.spec.pipelineRef?.name;\n\nexport const getModelReferenceFromTaskKind = (kind: string): GroupVersionKind => {\n  const model = getResourceModelFromTaskKind(kind);\n  return referenceForModel(model);\n};\n\nexport const countRunningTasks = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): number => {\n  const taskStatuses = taskRuns && getTaskStatus(pipelineRun, undefined, taskRuns);\n  return taskStatuses?.Running;\n};\n\nexport const shouldHidePipelineRunStop = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    (countRunningTasks(pipelineRun, taskRuns) > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunStopForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    (taskRunStatusObj?.Running > 0 ||\n      pipelineRunFilterReducer(pipelineRun) === ComputedStatus.Running)\n  );\n\nexport const shouldHidePipelineRunCancel = (\n  pipelineRun: PipelineRunKind,\n  taskRuns: TaskRunKind[],\n): boolean =>\n  !(\n    pipelineRun &&\n    countRunningTasks(pipelineRun, taskRuns) > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n\nexport const shouldHidePipelineRunCancelForTaskRunStatus = (\n  pipelineRun: PipelineRunKind,\n  taskRunStatusObj: TaskStatus,\n): boolean =>\n  !(\n    pipelineRun &&\n    taskRunStatusObj?.Running > 0 &&\n    pipelineRunFilterReducer(pipelineRun) !== ComputedStatus.Cancelled\n  );\n","import { parsePrometheusDuration } from '@openshift-console/plugin-shared/src/datetime/prometheus';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport {\n  DataPoint,\n  PrometheusResponse,\n  PrometheusResult,\n} from '@console/internal/components/graphs';\nimport { humanizeNumberSI } from '@console/internal/components/utils';\nimport { dateFormatterNoYear } from '@console/internal/components/utils/datetime';\nimport { PipelineKind } from '../../../types';\nimport { PipelineMetricsLevel } from '../const';\n\nexport interface GraphData {\n  chartName: string;\n  hasData: boolean;\n}\nexport interface PipelineMetricsGraphProps {\n  pipeline: PipelineKind;\n  timespan: number;\n  queryPrefix: string;\n  metricsLevel: string;\n  interval: number;\n  width?: number;\n\n  loaded?: boolean;\n  onLoad?: (g: GraphData) => void;\n}\nexport enum PipelineQuery {\n  NUMBER_OF_PIPELINE_RUNS = 'NUMBER_OF_PIPELINE_RUNS',\n  PIPELINE_RUN_DURATION = 'PIPELINE_RUN_DURATION',\n  PIPELINE_RUN_TASK_RUN_DURATION = 'PIPELINE_RUN_TASK_RUN_DURATION',\n  PIPELINE_SUCCESS_RATIO = 'PIPELINE_SUCCESS_RATIO',\n}\n\nexport enum MetricsQueryPrefix {\n  TEKTON = 'tekton',\n  TEKTON_PIPELINES_CONTROLLER = 'tekton_pipelines_controller',\n}\n\nexport const metricsQueries = (\n  prefix: string = MetricsQueryPrefix.TEKTON_PIPELINES_CONTROLLER,\n) => ({\n  [PipelineMetricsLevel.PIPELINE_TASK_LEVEL]: {\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"}`,\n    ),\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})`,\n    ),\n  },\n  [PipelineMetricsLevel.PIPELINERUN_TASKRUN_LEVEL]: {\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(count by (pipelinerun) (${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"}))`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_TASK_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_taskrun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})  by (pipelinerun, task)`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})  by (pipelinerun)`,\n    ),\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `count(sort_desc(${prefix}_pipelinerun_duration_seconds{pipeline=\"<%= name %>\",namespace=\"<%= namespace %>\"})) by(status)`,\n    ),\n  },\n  [PipelineMetricsLevel.UNSIMPLIFIED_METRICS_LEVEL]: {\n    [PipelineQuery.NUMBER_OF_PIPELINE_RUNS]: _.template(\n      `sum(count by (pipelinerun) (${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"}))`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_TASK_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_taskrun_duration_seconds_sum{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})  by (pipelinerun, task)`,\n    ),\n    [PipelineQuery.PIPELINE_RUN_DURATION]: _.template(\n      `sum(${prefix}_pipelinerun_duration_seconds_sum{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})  by (pipelinerun)`,\n    ),\n    [PipelineQuery.PIPELINE_SUCCESS_RATIO]: _.template(\n      `count(sort_desc(${prefix}_pipelinerun_duration_seconds_count{pipeline=\"<%= name %>\",exported_namespace=\"<%= namespace %>\"})) by(status)`,\n    ),\n  },\n});\n\nconst formatPositiveValue = (v: number): string =>\n  v === 0 || (v >= 0.001 && v < 1e23) ? humanizeNumberSI(v).string : v.toExponential(1);\nexport const formatValue = (v: number): string =>\n  (v < 0 ? '-' : '') + formatPositiveValue(Math.abs(v));\nexport const formatDate = (date: Date) => {\n  return dateFormatterNoYear.format(date);\n};\nexport const formatTimeSeriesValues = (result: PrometheusResult, samples: number, span: number) => {\n  const { metric, values } = result;\n  const newValues = _.map(values, (v) => {\n    const y = Number(v[1]);\n    return {\n      x: new Date(new Date(v[0] * 1000).setHours(0, 0, 0, 0)),\n      y: Number.isNaN(y) ? null : y,\n      metric,\n    };\n  });\n\n  // The data may have missing values, so we fill those gaps with nulls so that the graph correctly\n  // shows the missing values as gaps in the line\n  const start = Number(_.get(newValues, '[0].x'));\n  const end = Number(_.get(_.last(newValues), 'x'));\n  const step = span / samples;\n  _.range(start, end, step).forEach((t, i) => {\n    const x = new Date(t);\n    if (_.get(newValues, [i, 'x']) > x) {\n      newValues.splice(i, 0, { x, y: null, metric });\n    }\n  });\n\n  return newValues;\n};\n\ntype XMutator = (x: any) => Date | string;\ntype YMutator = (y: any) => number;\nexport const getRangeVectorData = (\n  response: PrometheusResponse,\n  xMutator: XMutator,\n  yMutator?: YMutator,\n) => {\n  const results = response?.data?.result || [];\n  return results?.map((r) => {\n    return r?.values?.map(([x, y]) => {\n      return {\n        x: xMutator?.(r) ?? new Date(x * 1000),\n        y: yMutator?.(y) ?? parseFloat(y),\n        metric: r?.metric,\n        time: x,\n      };\n    });\n  });\n};\n\nexport const getXaxisValues = (timespan: number): number[] => {\n  const xValues = [];\n  if (!timespan) return xValues;\n  const oneDayDuration = parsePrometheusDuration('1d');\n  const numDays = Math.round(timespan / oneDayDuration);\n  const d = new Date(Date.now());\n  d.setHours(0, 0, 0, 0);\n  while (xValues.length - 1 < numDays) {\n    xValues.push(d.getTime());\n    d.setDate(d.getDate() - 1);\n  }\n  return xValues.slice(0, numDays);\n};\n\nexport const getDuration = (seconds: number, long?: boolean): string => {\n  if (seconds === 0) {\n    return i18next.t('pipelines-plugin~less than a sec');\n  }\n  let sec = Math.round(seconds);\n  let min = 0;\n  let hr = 0;\n  let duration = '';\n  if (sec >= 60) {\n    min = Math.floor(sec / 60);\n    sec %= 60;\n  }\n  if (min >= 60) {\n    hr = Math.floor(min / 60);\n    min %= 60;\n  }\n  if (hr > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} hour', { count: hr })\n      : i18next.t('pipelines-plugin~{{hr}}h', { hr });\n    duration += ' ';\n  }\n  if (min > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} minute', { count: min })\n      : i18next.t('pipelines-plugin~{{min}}m', { min });\n    duration += ' ';\n  }\n  if (sec > 0) {\n    duration += long\n      ? i18next.t('pipelines-plugin~{{count}} second', { count: sec })\n      : i18next.t('pipelines-plugin~{{sec}}s', { sec });\n  }\n\n  return duration.trim();\n};\n\nexport const PipelineMetricsTimeRangeOptions = () => ({\n  '1d': i18next.t('pipelines-plugin~1 day'),\n  '3d': i18next.t('pipelines-plugin~3 days'),\n  '1w': i18next.t('pipelines-plugin~1 week'),\n  '2w': i18next.t('pipelines-plugin~2 weeks'),\n  '3w': i18next.t('pipelines-plugin~3 weeks'),\n  '4w': i18next.t('pipelines-plugin~4 weeks'),\n});\n\nexport const getTransformedDataPoints = (data: DataPoint[]): DataPoint[] => {\n  let previousValue = 0;\n  return _.sortBy(data, 'x').map((val) => {\n    const currentValue = val.y - previousValue;\n    previousValue += val.y;\n    return { ...val, y: currentValue };\n  });\n};\n","export const FLAG_OPENSHIFT_PIPELINE = 'OPENSHIFT_PIPELINE';\nexport const FLAG_OPENSHIFT_PIPELINE_AS_CODE = 'OPENSHIFT_PIPELINE_AS_CODE';\nexport const FLAG_OPENSHIFT_PIPELINE_CONDITION = 'OPENSHIFT_PIPELINE_CONDITION';\nexport const CLUSTER_PIPELINE_NS = 'openshift';\nexport const PIPELINE_RUNTIME_LABEL = 'pipeline.openshift.io/runtime';\nexport const PIPELINE_RUNTIME_VERSION_LABEL = 'pipeline.openshift.io/runtime-version';\nexport const PIPELINE_STRATEGY_LABEL = 'pipeline.openshift.io/strategy';\nexport const PREFERRED_DEV_PIPELINE_PAGE_TAB_USER_SETTING_KEY = 'pipeline.preferredPipelinePageTab';\nexport const FUNC_PIPELINE_RUNTIME_LABEL = 'function.knative.dev/runtime';\nexport const ARTIFACTHUB_API_BASE_URL = 'https://artifacthub.io/api/v1';\nexport const DELETED_RESOURCE_IN_K8S_ANNOTATION = 'resource.deleted.in.k8s';\nexport const RESOURCE_LOADED_FROM_RESULTS_ANNOTATION = 'resource.loaded.from.tektonResults';\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as semver from 'semver';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { ContainerPort, K8sResourceKind, K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  description: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getSampleRepo = (tag) => tag?.annotations?.sampleRepo ?? '';\nexport const getSampleRef = (tag) => tag?.annotations?.sampleRef ?? '';\nexport const getSampleContextDir = (tag) => tag?.annotations?.sampleContextDir ?? '';\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage): ContainerPort[] => {\n  const portSpec =\n    imageStreamImage?.image?.dockerImageMetadata?.Config?.ExposedPorts ||\n    imageStreamImage?.image?.dockerImageMetadata?.ContainerConfig?.ExposedPorts;\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceCommon | K8sResourceCommon[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = imageStream?.metadata?.annotations?.['openshift.io/display-name'];\n    const description = recentTag?.annotations?.description;\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      description,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = imageTag?.annotations?.['openshift.io/display-name'] ?? defaultName;\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = (t: TFunction) => {\n  return {\n    External: {\n      value: RegistryType.External,\n      label: t('devconsole~Image name from external registry'),\n    },\n    Internal: {\n      value: RegistryType.Internal,\n      label: t('devconsole~Image stream tag from internal registry'),\n    },\n  };\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n","import { K8sModel } from '@console/dynamic-plugin-sdk/src/api/common-types';\nimport { API_GROUP, API_VERSION_LATEST } from './const';\n\nexport const ClusterBuildStrategyModelV1Alpha1: K8sModel = {\n  id: 'clusterbuildstrategy',\n  plural: 'clusterbuildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'ClusterBuildStrategy',\n  namespaced: false,\n  crd: true,\n\n  label: 'ClusterBuildStrategy',\n  // t('shipwright-plugin~ClusterBuildStrategy')\n  labelKey: 'shipwright-plugin~ClusterBuildStrategy',\n  labelPlural: 'ClusterBuildStrategies',\n  // t('shipwright-plugin~ClusterBuildStrategies')\n  labelPluralKey: 'shipwright-plugin~ClusterBuildStrategies',\n  abbr: 'CBS',\n};\n\nexport const BuildStrategyModelV1Alpha1: K8sModel = {\n  id: 'buildstrategy',\n  plural: 'buildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'BuildStrategy',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildStrategy',\n  // t('shipwright-plugin~BuildStrategy')\n  labelKey: 'shipwright-plugin~BuildStrategy',\n  labelPlural: 'BuildStrategies',\n  // t('shipwright-plugin~BuildStrategies')\n  labelPluralKey: 'shipwright-plugin~BuildStrategies',\n  abbr: 'BS',\n};\n\nexport const BuildModelV1Alpha1: K8sModel = {\n  id: 'build',\n  plural: 'builds',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'Build',\n  namespaced: true,\n  crd: true,\n\n  label: 'Build',\n  // t('shipwright-plugin~Build')\n  labelKey: 'shipwright-plugin~Build',\n  labelPlural: 'Builds',\n  // t('shipwright-plugin~Builds')\n  labelPluralKey: 'shipwright-plugin~Builds',\n  abbr: 'B',\n};\n\nexport const BuildRunModelV1Alpha1: K8sModel = {\n  id: 'buildrun',\n  plural: 'buildruns',\n  apiGroup: API_GROUP,\n  apiVersion: 'v1alpha1',\n  kind: 'BuildRun',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildRun',\n  // t('shipwright-plugin~BuildRun')\n  labelKey: 'shipwright-plugin~BuildRun',\n  labelPlural: 'BuildRuns',\n  // t('shipwright-plugin~BuildRuns')\n  labelPluralKey: 'shipwright-plugin~BuildRuns',\n  abbr: 'BR',\n};\n\nexport const ClusterBuildStrategyModel: K8sModel = {\n  id: 'clusterbuildstrategy',\n  plural: 'clusterbuildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'ClusterBuildStrategy',\n  namespaced: false,\n  crd: true,\n\n  label: 'ClusterBuildStrategy',\n  // t('shipwright-plugin~ClusterBuildStrategy')\n  labelKey: 'shipwright-plugin~ClusterBuildStrategy',\n  labelPlural: 'ClusterBuildStrategies',\n  // t('shipwright-plugin~ClusterBuildStrategies')\n  labelPluralKey: 'shipwright-plugin~ClusterBuildStrategies',\n  abbr: 'CBS',\n};\n\nexport const BuildStrategyModel: K8sModel = {\n  id: 'buildstrategy',\n  plural: 'buildstrategies',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'BuildStrategy',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildStrategy',\n  // t('shipwright-plugin~BuildStrategy')\n  labelKey: 'shipwright-plugin~BuildStrategy',\n  labelPlural: 'BuildStrategies',\n  // t('shipwright-plugin~BuildStrategies')\n  labelPluralKey: 'shipwright-plugin~BuildStrategies',\n  abbr: 'BS',\n};\n\nexport const BuildModel: K8sModel = {\n  id: 'build',\n  plural: 'builds',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'Build',\n  namespaced: true,\n  crd: true,\n\n  label: 'Build',\n  // t('shipwright-plugin~Build')\n  labelKey: 'shipwright-plugin~Build',\n  labelPlural: 'Builds',\n  // t('shipwright-plugin~Builds')\n  labelPluralKey: 'shipwright-plugin~Builds',\n  abbr: 'B',\n};\n\nexport const BuildRunModel: K8sModel = {\n  id: 'buildrun',\n  plural: 'buildruns',\n  apiGroup: API_GROUP,\n  apiVersion: API_VERSION_LATEST,\n  kind: 'BuildRun',\n  namespaced: true,\n  crd: true,\n\n  label: 'BuildRun',\n  // t('shipwright-plugin~BuildRun')\n  labelKey: 'shipwright-plugin~BuildRun',\n  labelPlural: 'BuildRuns',\n  // t('shipwright-plugin~BuildRuns')\n  labelPluralKey: 'shipwright-plugin~BuildRuns',\n  abbr: 'BR',\n};\n","export const API_GROUP = 'shipwright.io';\nexport const API_VERSION_LATEST = 'v1beta1';\n\nexport const BUILDRUN_TO_BUILD_REFERENCE_LABEL = 'build.shipwright.io/name';\nexport const BUILDRUN_TO_RESOURCE_MAP_LABEL = 'app.kubernetes.io/instance';\n\nexport const BUILD_OUTPUT_IMAGESTREAM_URL = 'image-registry.openshift-image-registry.svc:5000';\nexport const BUILD_OUTPUT_QUAY_URL = 'quay.io';\n","import * as React from 'react';\n\ntype GiteaIconProps = {\n  style?: React.CSSProperties;\n  topology?: boolean;\n};\n\nconst GiteaIcon: React.FC<GiteaIconProps> = ({ style, topology }): React.ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={topology ? '0 20 650 587' : '0 20 650 450'}\n      fill=\"currentColor\"\n      aria-hidden=\"true\"\n      role=\"img\"\n      width=\"1em\"\n      height=\"1em\"\n      style={style}\n    >\n      <path\n        d=\"m395.9 484.2-126.9-61c-12.5-6-17.9-21.2-11.8-33.8l61-126.9c6-12.5 21.2-17.9 33.8-11.8 17.2 8.3 27.1 13 27.1 13l-.1-109.2 16.7-.1.1 117.1s57.4 24.2 83.1 40.1c3.7 2.3 10.2 6.8 12.9 14.4 2.1 6.1 2 13.1-1 19.3l-61 126.9c-6.2 12.7-21.4 18.1-33.9 12z\"\n        style={{\n          fill: '#fff',\n        }}\n      />\n      <path\n        d=\"M622.7 149.8c-4.1-4.1-9.6-4-9.6-4s-117.2 6.6-177.9 8c-13.3.3-26.5.6-39.6.7v117.2c-5.5-2.6-11.1-5.3-16.6-7.9 0-36.4-.1-109.2-.1-109.2-29 .4-89.2-2.2-89.2-2.2s-141.4-7.1-156.8-8.5c-9.8-.6-22.5-2.1-39 1.5-8.7 1.8-33.5 7.4-53.8 26.9C-4.9 212.4 6.6 276.2 8 285.8c1.7 11.7 6.9 44.2 31.7 72.5 45.8 56.1 144.4 54.8 144.4 54.8s12.1 28.9 30.6 55.5c25 33.1 50.7 58.9 75.7 62 63 0 188.9-.1 188.9-.1s12 .1 28.3-10.3c14-8.5 26.5-23.4 26.5-23.4S547 483 565 451.5c5.5-9.7 10.1-19.1 14.1-28 0 0 55.2-117.1 55.2-231.1-1.1-34.5-9.6-40.6-11.6-42.6zM125.6 353.9c-25.9-8.5-36.9-18.7-36.9-18.7S69.6 321.8 60 295.4c-16.5-44.2-1.4-71.2-1.4-71.2s8.4-22.5 38.5-30c13.8-3.7 31-3.1 31-3.1s7.1 59.4 15.7 94.2c7.2 29.2 24.8 77.7 24.8 77.7s-26.1-3.1-43-9.1zm300.3 107.6s-6.1 14.5-19.6 15.4c-5.8.4-10.3-1.2-10.3-1.2s-.3-.1-5.3-2.1l-112.9-55s-10.9-5.7-12.8-15.6c-2.2-8.1 2.7-18.1 2.7-18.1L322 273s4.8-9.7 12.2-13c.6-.3 2.3-1 4.5-1.5 8.1-2.1 18 2.8 18 2.8L467.4 315s12.6 5.7 15.3 16.2c1.9 7.4-.5 14-1.8 17.2-6.3 15.4-55 113.1-55 113.1z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n      <path\n        d=\"M326.8 380.1c-8.2.1-15.4 5.8-17.3 13.8-1.9 8 2 16.3 9.1 20 7.7 4 17.5 1.8 22.7-5.4 5.1-7.1 4.3-16.9-1.8-23.1l24-49.1c1.5.1 3.7.2 6.2-.5 4.1-.9 7.1-3.6 7.1-3.6 4.2 1.8 8.6 3.8 13.2 6.1 4.8 2.4 9.3 4.9 13.4 7.3.9.5 1.8 1.1 2.8 1.9 1.6 1.3 3.4 3.1 4.7 5.5 1.9 5.5-1.9 14.9-1.9 14.9-2.3 7.6-18.4 40.6-18.4 40.6-8.1-.2-15.3 5-17.7 12.5-2.6 8.1 1.1 17.3 8.9 21.3 7.8 4 17.4 1.7 22.5-5.3 5-6.8 4.6-16.3-1.1-22.6 1.9-3.7 3.7-7.4 5.6-11.3 5-10.4 13.5-30.4 13.5-30.4.9-1.7 5.7-10.3 2.7-21.3-2.5-11.4-12.6-16.7-12.6-16.7-12.2-7.9-29.2-15.2-29.2-15.2s0-4.1-1.1-7.1c-1.1-3.1-2.8-5.1-3.9-6.3 4.7-9.7 9.4-19.3 14.1-29-4.1-2-8.1-4-12.2-6.1-4.8 9.8-9.7 19.7-14.5 29.5-6.7-.1-12.9 3.5-16.1 9.4-3.4 6.3-2.7 14.1 1.9 19.8l-24.6 50.4z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n    </svg>\n  );\n};\n\nexport default GiteaIcon;\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CircleIcon } from '@patternfly/react-icons/dist/esm/icons/circle-icon';\nimport { SquareIcon } from '@patternfly/react-icons/dist/esm/icons/square-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { K8sResourceKindReference } from '../module/k8s';\nimport { ResourceLink } from './utils/resource-link';\nimport { Timestamp } from './utils/timestamp';\nimport { EmptyBox } from './utils/status-box';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nexport const getImageStreamTagName = (imageStreamName: string, tag: string): string =>\n  `${imageStreamName}:${tag}`;\n\nconst ImageStreamTimelineItem: React.FC<ImageStreamTimelineItemProps> = ({\n  tag,\n  imageStreamName,\n  imageStreamNamespace,\n  linkToTag,\n}) => {\n  const referenceAndSHA = _.split(tag.dockerImageReference, '@');\n  return (\n    <>\n      <li>\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__circle-icon\">\n            <CircleIcon />\n          </span>\n          <div className=\"co-images-stream-tag-timeline__timestamp\">\n            <Timestamp timestamp={tag.created} simple={true} />\n          </div>\n        </div>\n\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__line\" />\n          <div className=\"co-images-stream-tag-timeline__info\">\n            <ResourceLink\n              kind={ImageStreamTagsReference}\n              name={getImageStreamTagName(imageStreamName, tag.tag)}\n              namespace={imageStreamNamespace}\n              title={tag.tag}\n              linkTo={linkToTag}\n            />\n            <div className=\"co-break-all\">from {referenceAndSHA[0]}</div>\n            <div className=\"co-break-all\">{referenceAndSHA[1]}</div>\n          </div>\n        </div>\n      </li>\n    </>\n  );\n};\n\n// check is the compared tag version, is the latest version in a sorted array of all tag versions\nconst isTagVersionLatest = (\n  comparedTag: string,\n  comparedTagPosition: number,\n  orderedTagArray: TagMeta[],\n) => {\n  return (\n    comparedTagPosition ===\n    _.findIndex(orderedTagArray, (orderedTag: TagMeta) => orderedTag.tag === comparedTag)\n  );\n};\n\nexport const ImageStreamTimeline: React.FC<ImageStreamTimelineProps> = ({\n  imageStreamTags,\n  imageStreamName,\n  imageStreamNamespace,\n}) => {\n  const { t } = useTranslation();\n  if (!_.some(imageStreamTags, 'items')) {\n    return <EmptyBox label={t('public~Images')} />;\n  }\n  const tagsArray: TagMeta[] = _.flatten(\n    _.map(imageStreamTags, ({ tag, items }) => {\n      return _.map(items, ({ created, dockerImageReference }) => ({\n        tag,\n        created,\n        dockerImageReference,\n      }));\n    }),\n  );\n  const orderedTagArray = _.orderBy(tagsArray, ['created'], ['desc']);\n  const timeline = _.map(orderedTagArray, (tag: TagMeta, i: number) => {\n    return (\n      <ImageStreamTimelineItem\n        key={tag.dockerImageReference}\n        tag={tag}\n        imageStreamName={imageStreamName}\n        imageStreamNamespace={imageStreamNamespace}\n        linkToTag={isTagVersionLatest(tag.tag, i, orderedTagArray)}\n      />\n    );\n  });\n\n  return (\n    <>\n      <ul className=\"co-images-stream-tag-timeline\">\n        {timeline}\n        <div>\n          <span className=\"co-images-stream-tag-timeline__square-icon\">\n            <SquareIcon />\n          </span>\n        </div>\n      </ul>\n    </>\n  );\n};\n\ntype ImageStreamTimelineItemProps = {\n  tag: TagMeta;\n  imageStreamName: string;\n  imageStreamNamespace: string;\n  linkToTag: boolean;\n};\n\ntype TagMeta = {\n  created: string;\n  tag: string;\n  dockerImageReference: string;\n};\n\ntype ImageStreamTimelineProps = {\n  imageStreamTags: any[];\n  imageStreamName: string;\n  imageStreamNamespace: string;\n};\n","import { IBuild as IBuildV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/Build';\nimport { IBuildRun as IBuildRunV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/ClusterBuildStrategy';\nimport { IBuild as IBuildV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/Build';\nimport { IBuildRun as IBuildRunV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildRun';\nimport { IBuildStrategy as IBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/BuildStrategy';\nimport { IClusterBuildStrategy as IClusterBuildStrategyV1Beta1 } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/ClusterBuildStrategy';\nimport { K8sResourceCondition } from '@console/internal/module/k8s';\n\n// Add missing latestBuild to Build\nexport type Build =\n  | (IBuildV1Alpha1 & { latestBuild?: BuildRun })\n  | (IBuildV1Beta1 & { latestBuild?: BuildRun });\n\nexport type BuildSpec = IBuildV1Alpha1['spec'] & IBuildV1Beta1['spec'];\n\nexport type BuildStatus = IBuildV1Alpha1['status'] & IBuildV1Beta1['status'];\n\nexport type ClusterBuildStrategyKind = IClusterBuildStrategyV1Alpha1 | IClusterBuildStrategyV1Beta1;\n\nexport type BuildStrategyKind = IBuildStrategyV1Alpha1 | IBuildStrategyV1Beta1;\n\n// Make status.conditions compatible with @console/internal/components/conditions props\nexport type BuildRun =\n  | (IBuildRunV1Alpha1 & {\n      status?: { conditions?: K8sResourceCondition[]; latestTaskRunRef?: string };\n    })\n  | (IBuildRunV1Beta1 & {\n      status?: { conditions?: K8sResourceCondition[]; taskRunName?: string };\n    });\n\n// The enum values need to match the dynamic-plugin `Status` `status` prop.\n// A translation (title) is added in the BuildRunStatus component.\nexport enum ComputedBuildRunStatus {\n  PENDING = 'Pending',\n  RUNNING = 'Running',\n  SUCCEEDED = 'Succeeded',\n  FAILED = 'Failed',\n  UNKNOWN = 'Unknown',\n}\n\n/** WARNING: The enum values corresponds to the `metadata.name` of the ClusterBuildStrategy CRs */\nexport enum ClusterBuildStrategy {\n  BUILDAH = 'buildah',\n  S2I = 'source-to-image',\n  UNKNOWN = 'unknown',\n}\n\nexport const ReadableClusterBuildStrategies: Record<ClusterBuildStrategy, string> = {\n  // t('shipwright-plugin~Buildah')\n  [ClusterBuildStrategy.BUILDAH]: `shipwright-plugin~Buildah`,\n  // t('shipwright-plugin~Source-to-Image')\n  [ClusterBuildStrategy.S2I]: `shipwright-plugin~Source-to-Image`,\n  [ClusterBuildStrategy.UNKNOWN]: `shipwright-plugin~Unknown`,\n};\n","import { IBuild as IBuildV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/Build';\nimport { IBuildRun as IBuildRunV1Alpha1 } from '@kubernetes-models/shipwright/shipwright.io/v1alpha1/BuildRun';\nimport { useLocation, useParams } from 'react-router-dom-v5-compat';\nimport { useActivePerspective } from '@console/dynamic-plugin-sdk';\nimport { K8sModel } from '@console/dynamic-plugin-sdk/src/api/common-types';\nimport { useFlag } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { K8sResourceCondition, K8sResourceKind } from '@console/internal/module/k8s';\nimport { useTabbedTableBreadcrumbsFor } from '@console/shared';\nimport { getBuildRunStatus } from './components/buildrun-status/BuildRunStatus';\nimport { BUILDRUN_TO_RESOURCE_MAP_LABEL } from './const';\nimport {\n  BuildModel,\n  BuildModelV1Alpha1,\n  BuildRunModel,\n  BuildRunModelV1Alpha1,\n  BuildStrategyModel,\n  BuildStrategyModelV1Alpha1,\n  ClusterBuildStrategyModel,\n  ClusterBuildStrategyModelV1Alpha1,\n} from './models';\nimport { Build, BuildRun, ComputedBuildRunStatus } from './types';\n\nexport type LatestBuildRunStatus = {\n  latestBuildRun: BuildRun;\n  status: ComputedBuildRunStatus;\n};\n\nexport interface Runs {\n  data?: BuildRun[];\n}\n\nexport const getLatestRun = (runs: Runs, field: string): BuildRun => {\n  if (!runs || !runs.data || !(runs.data.length > 0) || !field) {\n    return null;\n  }\n\n  let latestRun = runs.data[0];\n  if (field === 'creationTimestamp') {\n    for (let i = 1; i < runs.data.length; i++) {\n      latestRun =\n        runs.data[i]?.metadata?.[field] &&\n        new Date(runs.data[i].metadata[field]) > new Date(latestRun.metadata[field])\n          ? runs.data[i]\n          : latestRun;\n    }\n  } else if (field === 'startTime' || field === 'completionTime') {\n    for (let i = 1; i < runs.data.length; i++) {\n      latestRun =\n        runs.data[i]?.status?.[field] &&\n        new Date(runs.data[i].status[field]) > new Date(latestRun.status[field])\n          ? runs.data[i]\n          : latestRun;\n    }\n  } else {\n    latestRun = runs.data[runs.data.length - 1];\n  }\n  return latestRun;\n};\n\nexport const getLatestBuildRunStatusforDeployment = (\n  buildRuns: BuildRun[],\n  resource: K8sResourceKind,\n): LatestBuildRunStatus => {\n  const buildRunsforDeployment = buildRuns.filter(\n    (run) =>\n      run.metadata?.labels?.[BUILDRUN_TO_RESOURCE_MAP_LABEL] ===\n      resource.metadata?.labels?.[BUILDRUN_TO_RESOURCE_MAP_LABEL],\n  );\n\n  if (!buildRunsforDeployment || buildRunsforDeployment.length === 0) {\n    return { latestBuildRun: null, status: ComputedBuildRunStatus.UNKNOWN };\n  }\n\n  const latestBuildRun = getLatestRun({ data: buildRunsforDeployment }, 'creationTimestamp');\n\n  if (!latestBuildRun) {\n    return { latestBuildRun: null, status: ComputedBuildRunStatus.UNKNOWN };\n  }\n\n  const status = getBuildRunStatus(latestBuildRun);\n\n  return {\n    latestBuildRun,\n    status,\n  };\n};\n\nexport const isBuildRunNewerThen = (newBuildRun: BuildRun, prevBuildRun: BuildRun | undefined) => {\n  const prevCreationTime = new Date(prevBuildRun?.metadata?.creationTimestamp);\n  const newCreationTime = new Date(newBuildRun?.metadata?.creationTimestamp);\n  const timeDifference = newCreationTime.getTime() - prevCreationTime.getTime();\n  return timeDifference > 0;\n};\n\nexport const byCreationTime = (left: K8sResourceKind, right: K8sResourceKind): number => {\n  const leftCreationTime = new Date(left?.metadata?.creationTimestamp || Date.now());\n  const rightCreationTime = new Date(right?.metadata?.creationTimestamp || Date.now());\n  return rightCreationTime.getTime() - leftCreationTime.getTime();\n};\n\nexport const isV1Alpha1Resource = (\n  resource: Build | BuildRun,\n): resource is\n  | IBuildV1Alpha1\n  | (IBuildRunV1Alpha1 & { status?: { conditions?: K8sResourceCondition[] } }) => {\n  return resource.apiVersion === 'shipwright.io/v1alpha1';\n};\n\nexport const getBuildNameFromBuildRun = (buildRun: BuildRun) => {\n  if (isV1Alpha1Resource(buildRun)) {\n    return buildRun.spec?.buildRef?.name;\n  }\n  return buildRun.spec?.build?.name;\n};\n\n/**\n * Given two flags that determine the presence of two versions of a CRD,\n * determine which version is enabled.\n *\n * If both flags are enabled, the first model gets priority.\n *\n * @return the K8s model of the CRD that is enabled, or null if neither are enabled\n */\nconst useDetermineModelVersion = (\n  modelOne: K8sModel,\n  modelTwo: K8sModel,\n  modelFlagOne: string,\n  modelFlagTwo: string,\n) => {\n  const flagTwo = useFlag(modelFlagTwo);\n  const flagOne = useFlag(modelFlagOne);\n\n  if (!flagTwo && !flagOne) {\n    return null;\n  }\n\n  return flagOne ? modelOne : modelTwo;\n};\n\n/**\n * @returns latest `BuildModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useBuildModel = () =>\n  useDetermineModelVersion(\n    BuildModel,\n    BuildModelV1Alpha1,\n    'SHIPWRIGHT_BUILD',\n    'SHIPWRIGHT_BUILD_V1ALPHA1',\n  );\n\n/**\n * @returns latest `BuildRunModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useBuildRunModel = () =>\n  useDetermineModelVersion(\n    BuildRunModel,\n    BuildRunModelV1Alpha1,\n    'SHIPWRIGHT_BUILDRUN',\n    'SHIPWRIGHT_BUILDRUN_V1ALPHA1',\n  );\n\n/**\n * @returns latest `BuildStrategyModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useBuildStrategyModel = () =>\n  useDetermineModelVersion(\n    BuildStrategyModel,\n    BuildStrategyModelV1Alpha1,\n    'SHIPWRIGHT_BUILDSTRATEGY',\n    'SHIPWRIGHT_BUILDSTRATEGY_V1ALPHA1',\n  );\n\n/**\n * @returns latest `ClusterBuildStrategyModel` model if exists, otherwise v1Alpha1 if it exists, otherwise null\n */\nexport const useClusterBuildStrategyModel = () =>\n  useDetermineModelVersion(\n    ClusterBuildStrategyModel,\n    ClusterBuildStrategyModelV1Alpha1,\n    'SHIPWRIGHT_CLUSTERBUILDSTRATEGY',\n    'SHIPWRIGHT_CLUSTERBUILDSTRATEGY_V1ALPHA1',\n  );\n\n/** map of shipwright kinds to tab names */\nconst kindToTabMap = {\n  [BuildModel.kind]: 'builds',\n  [BuildModelV1Alpha1.kind]: 'builds',\n  [BuildRunModel.kind]: 'buildruns',\n  [BuildRunModelV1Alpha1.kind]: 'buildruns',\n  [BuildStrategyModel.kind]: 'buildstrategies',\n  [BuildStrategyModelV1Alpha1.kind]: 'buildstrategies',\n  [ClusterBuildStrategyModel.kind]: 'clusterbuildstrategies',\n  [ClusterBuildStrategyModelV1Alpha1.kind]: 'clusterbuildstrategies',\n};\n\n/** convert a resource using a shipwright model to its corresponding k8s model */\nconst resourceToModel = (obj: K8sResourceKind): K8sModel => {\n  if (obj?.apiVersion === 'shipwright.io/v1alpha1') {\n    switch (obj?.kind) {\n      case 'Build':\n        return BuildModelV1Alpha1;\n      case 'BuildRun':\n        return BuildRunModelV1Alpha1;\n      case 'BuildStrategy':\n        return BuildStrategyModelV1Alpha1;\n      case 'ClusterBuildStrategy':\n        return ClusterBuildStrategyModelV1Alpha1;\n      default:\n        return null;\n    }\n  }\n  switch (obj?.kind) {\n    case 'Build':\n      return BuildModel;\n    case 'BuildRun':\n      return BuildRunModel;\n    case 'BuildStrategy':\n      return BuildStrategyModel;\n    case 'ClusterBuildStrategy':\n      return ClusterBuildStrategyModel;\n    default:\n      return null;\n  }\n};\n\nexport const useShipwrightBreadcrumbsFor = (obj: K8sResourceKind) => {\n  const isAdminPerspective = useActivePerspective()[0] === 'admin';\n  const params = useParams();\n  const location = useLocation();\n  return useTabbedTableBreadcrumbsFor(\n    resourceToModel(obj),\n    location,\n    params,\n    'k8s',\n    `shipwright.io/${kindToTabMap[obj.kind]}`,\n    undefined,\n    isAdminPerspective,\n  );\n};\n","import { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\n\n/**\n * ConsoleSample is an extension to customizing OpenShift web console by adding samples.\n */\nexport type ConsoleSample = K8sResourceCommon & {\n  spec: ConsoleSampleSpec;\n};\n\n/**\n * ConsoleSampleSpec is the desired sample for the web console.\n * Samples will appear with their title, descriptions and a badge in a samples catalog.\n */\nexport type ConsoleSampleSpec = {\n  /**\n   * title is the display name of the sample.\n   *\n   * It is required and must be no more than 50 characters in length.\n   */\n  title: string;\n  /**\n   * abstract is a short introduction to the sample.\n   *\n   * It is required and must be no more than 100 characters in length.\n   *\n   * The abstract is shown on the sample card tile below the title and provider\n   * and is limited to three lines of content.\n   */\n  abstract: string;\n  /**\n   * description is a long form explanation of the sample.\n   *\n   * It is required and can have a maximum length of **4096** characters.\n   *\n   * It is a README.md-like content for additional information, links, pre-conditions, and other instructions.\n   * It will be rendered as Markdown so that it can contain line breaks, links, and other simple formatting.\n   */\n  description: string;\n  /**\n   * icon is an optional base64 encoded image and shown beside the sample title.\n   *\n   * The format must follow the [data: URL format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs)\n   * and can have a maximum size of **10 KB**.\n   *\n   * `data:[<mediatype>][;base64],<base64 encoded image>`\n   *\n   * For example:\n   *\n   * `data:image;base64,` plus the base64 encoded image.\n   *\n   * Vector images can also be used. SVG icons must start with:\n   *\n   * `data:image/svg+xml;base64,` plus the base64 encoded SVG image.\n   *\n   * All sample catalog icons will be shown on a white background (also when the dark theme is used).\n   * The web console ensures that different aspect ratios work correctly.\n   * Currently, the surface of the icon is at most 40x100px.\n   */\n  icon?: string;\n  /**\n   * type is an optional label to group multiple samples.\n   *\n   * It is optional and must be no more than 20 characters in length.\n   *\n   * Recommendation is a singular term like \"Builder Image\", \"Devfile\" or \"Serverless Function\".\n   *\n   * Currently, the type is shown a badge on the sample card tile in the top right corner.\n   */\n  type?: string;\n  /**\n   * provider is an optional label to honor who provides the sample.\n   *\n   * It is optional and must be no more than 50 characters in length.\n   *\n   * A provider can be a company like \"Red Hat\" or an organization like \"CNCF\" or \"Knative\".\n   *\n   * Currently, the provider is only shown on the sample card tile below the title with the prefix \"Provided by \"\n   */\n  provider?: string;\n  /**\n   * tags are optional string values that can be used to find samples in the samples catalog.\n   *\n   * Examples of common tags may be \"Java\", \"Quarkus\", etc.\n   *\n   * They will be displayed on the samples details page.\n   */\n  tags?: string[];\n  /**\n   * source defines where to deploy the sample service from.\n   * The sample may be sourced from an external git repository or container image.\n   */\n  source: ConsoleSampleSource;\n};\n\n/**\n * Union of the sample source types.\n * Unsupported samples types will be ignored in the web console.\n */\nexport type ConsoleSampleSource = ConsoleSampleGitImportSource | ConsoleSampleContainerImportSource;\n\n/** ConsoleSampleGitImportSource allows the user to import code from a git repository. */\nexport type ConsoleSampleGitImportSource = {\n  type: 'GitImport';\n  gitImport: {\n    /** repository contains the reference to the actual Git repository.. */\n    repository: ConsoleSampleGitImportSourceRepository;\n    /** service contains configuration for the Service resource created for this sample. */\n    service?: ConsoleSampleGitImportSourceService;\n  };\n};\n\n/** ConsoleSampleGitImportSourceRepository contains the reference to the actual Git repository. */\nexport type ConsoleSampleGitImportSourceRepository = {\n  /**\n   * url of the Git repository that contains a HTTP service.\n   * The HTTP service must be exposed on the default port (8080) unless\n   * otherwise configured with the port field.\n   *\n   * Only public repositories on GitHub, GitLab and Bitbucket are currently supported:\n   *\n   *   - https://github.com/<org>/<repository>\n   *   - https://gitlab.com/<org>/<repository>\n   *   - https://bitbucket.org/<org>/<repository>\n   *\n   * The url must have a maximum length of 256 characters.\n   */\n  url: string;\n  /**\n   * revision is the git revision at which to clone the git repository\n   * Can be used to clone a specific branch, tag or commit SHA.\n   * Must be at most 256 characters in length.\n   * When omitted the repository's default branch is used.\n   */\n  revision?: string;\n  /**\n   * contextDir is used to specify a directory within the repository to build the\n   * component.\n   * Must start with `/` and have a maximum length of 256 characters.\n   * When omitted, the default value is to build from the root of the repository.\n   */\n  contextDir?: string;\n};\n\n/**\n * ConsoleSampleGitImportSourceService allows the samples author define defaults\n * for the Service created for this sample\n */\nexport type ConsoleSampleGitImportSourceService = {\n  /**\n   * targetPort is the port that the service listens on for HTTP requests.\n   * This port will be used for Service created for this sample.\n   * Port must be in the range 1 to 65535.\n   * Default port is 8080.\n   */\n  targetPort?: number;\n};\n\n/** ConsoleSampleContainerImportSource allows the user import a container image. */\nexport type ConsoleSampleContainerImportSource = {\n  type: 'ContainerImport';\n  containerImport: {\n    /**\n     * reference to a container image that provides a HTTP service.\n     * The service must be exposed on the default port (8080) unless\n     * otherwise configured with the port field.\n     *\n     * Supported formats:\n     *   - <repository-name>/<image-name>\n     *   - docker.io/<repository-name>/<image-name>\n     *   - quay.io/<repository-name>/<image-name>\n     *   - quay.io/<repository-name>/<image-name>@sha256:<image hash>\n     *   - quay.io/<repository-name>/<image-name>:<tag>\n     */\n    image: string;\n    /** service contains configuration for the Service resource created for this sample. */\n    service?: ConsoleSampleContainerImportSourceService;\n  };\n};\n\n/**\n * ConsoleSampleContainerImportSourceService allows the samples author define defaults\n * for the Service created for this sample\n */\nexport type ConsoleSampleContainerImportSourceService = {\n  /**\n   * targetPort is the port that the service listens on for HTTP requests.\n   * This port will be used for Service created for this sample.\n   * Port must be in the range 1 to 65535.\n   * Default port is 8080.\n   */\n  targetPort?: number;\n};\n\nexport function isGitImportSource(\n  source: ConsoleSampleSource,\n): source is ConsoleSampleGitImportSource {\n  return source?.type === 'GitImport' && !!source.gitImport?.repository?.url;\n}\n\nexport function isContainerImportSource(\n  source: ConsoleSampleSource,\n): source is ConsoleSampleContainerImportSource {\n  return source?.type === 'ContainerImport' && !!source.containerImport?.image;\n}\n","import { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { k8sGetResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ConsoleSampleModel } from '../models/samples';\nimport {\n  ConsoleSample,\n  ConsoleSampleGitImportSourceRepository,\n  isContainerImportSource,\n  isGitImportSource,\n} from '../types/samples';\n\nconst LOCALIZATION_NAME_LABEL = 'console.openshift.io/name';\nconst LOCALIZATION_LANGUAGE_LABEL = 'console.openshift.io/lang';\nconst LOCALIZATION_COUNTRY_LABEL = 'console.openshift.io/country';\n\nexport const createSampleLink = (sample: ConsoleSample, activeNamespace: string): string | null => {\n  if (isGitImportSource(sample.spec.source)) {\n    const { gitImport } = sample.spec.source;\n    const searchParams = new URLSearchParams();\n    searchParams.set('formType', 'sample');\n    searchParams.set('sample', sample.metadata.name);\n    searchParams.set('git.repository', gitImport.repository.url);\n    if (gitImport.repository.revision) {\n      searchParams.set('git.revision', gitImport.repository.revision);\n    }\n    if (gitImport.repository.contextDir) {\n      searchParams.set('git.contextDir', gitImport.repository.contextDir);\n    }\n    return `/import/ns/${activeNamespace}?${searchParams}`;\n  }\n\n  if (isContainerImportSource(sample.spec.source)) {\n    const { containerImport } = sample.spec.source;\n    const searchParams = new URLSearchParams();\n    searchParams.set('sample', sample.metadata.name);\n    searchParams.set('image', containerImport.image);\n    return `/deploy-image/ns/${activeNamespace}?${searchParams}`;\n  }\n\n  // Unsupported source type, will be dropped.\n  return null;\n};\n\nexport const getGitImportSample = (): {\n  sampleName: string;\n  repository: ConsoleSampleGitImportSourceRepository;\n} => {\n  const searchParams = new URLSearchParams(window.location.search);\n  return {\n    sampleName: searchParams.get('sample'),\n    repository: {\n      url: searchParams.get('git.repository'),\n      revision: searchParams.get('git.revision'),\n      contextDir: searchParams.get('git.contextDir'),\n    },\n  };\n};\n\nexport const getContainerImportSample = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  return {\n    sampleName: searchParams.get('sample'),\n    image: searchParams.get('image'),\n  };\n};\n\nexport const hasSampleQueryParameter = () => {\n  return !!new URLSearchParams(window.location.search).get('sample');\n};\n\nexport const groupConsoleSamplesByName = (samples: ConsoleSample[]) => {\n  return samples.reduce<Record<string, ConsoleSample[]>>((grouped, consoleSample) => {\n    const name =\n      consoleSample.metadata.labels?.[LOCALIZATION_NAME_LABEL] || consoleSample.metadata.name;\n    if (!grouped[name]) grouped[name] = [];\n    grouped[name].push(consoleSample);\n    return grouped;\n  }, {});\n};\n\n/**\n * Returns the samples with the best localization match, for the given\n * preferred language and preferred country. It prefers a match in this order:\n *\n * 1. Sample language and country are equal to the preferred language and country.\n *    This includes sample without language (fallbacks to en) and no country.\n *\n * 2. Sample language is equal to the preferred language.\n *    1. And the sample has no country defined.  (eg, select en sample is used for en-CA and en-GB)\n *    2. Any country is defined.                 (eg, select en-CA sample is used for en-GB)\n *\n * 3. Fallback to an english sample\n *    (Sample language is en OR sample language is not defined):\n *    1. Same country  (use en-CA sample if preference is fr-CA)\n *    2. No country\n *    3. Any country   (use en-CA sample if preference is en-US)\n */\nexport const getBestMatch = (samples: ConsoleSample[], language: string): ConsoleSample | null => {\n  if (!samples || !samples.length) {\n    return null;\n  }\n  const preferredLanguage = (language || 'en').split('-')[0].toLowerCase();\n  const preferredCountry = ((language || '').split('-')[1] || '').toUpperCase();\n\n  let sameLanguageWithoutCountry: ConsoleSample = null;\n  let sameLanguageWithAnyCountry: ConsoleSample = null;\n  let fallbackLanguageSameCountry: ConsoleSample = null;\n  let fallbackLanguageNoCountry: ConsoleSample = null;\n  let fallbackLanguageAnyCountry: ConsoleSample = null;\n\n  for (const sample of samples) {\n    const sampleLanguage = (\n      sample.metadata?.labels?.[LOCALIZATION_LANGUAGE_LABEL] || 'en'\n    ).toLowerCase();\n    const sampleCountry = (\n      sample.metadata?.labels?.[LOCALIZATION_COUNTRY_LABEL] || ''\n    ).toUpperCase();\n\n    if (sampleLanguage === preferredLanguage && sampleCountry === preferredCountry) {\n      return sample;\n    }\n    if (sampleLanguage === preferredLanguage) {\n      if (!sampleCountry && !sameLanguageWithoutCountry) {\n        sameLanguageWithoutCountry = sample;\n      } else if (sampleCountry && !sameLanguageWithAnyCountry) {\n        sameLanguageWithAnyCountry = sample;\n      }\n    }\n    if (sampleLanguage === 'en') {\n      if (sampleCountry === preferredCountry && !fallbackLanguageSameCountry) {\n        fallbackLanguageSameCountry = sample;\n      } else if (!sampleCountry && !fallbackLanguageNoCountry) {\n        fallbackLanguageNoCountry = sample;\n      } else if (!fallbackLanguageAnyCountry) {\n        fallbackLanguageAnyCountry = sample;\n      }\n    }\n  }\n  return (\n    sameLanguageWithoutCountry ||\n    sameLanguageWithAnyCountry ||\n    fallbackLanguageSameCountry ||\n    fallbackLanguageNoCountry ||\n    fallbackLanguageAnyCountry\n  );\n};\n\nexport const useSamples = () => {\n  return useK8sWatchResource<ConsoleSample[]>({\n    isList: true,\n    groupVersionKind: getGroupVersionKindForModel(ConsoleSampleModel),\n  });\n};\n\nexport const getSample = (name: string): Promise<ConsoleSample> =>\n  k8sGetResource({ model: ConsoleSampleModel, name });\n","import * as React from 'react';\nimport {\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory/modal';\nimport {\n  SecretFormWrapper,\n  SecretTypeAbstraction,\n} from '@console/internal/components/secrets/create-secret';\n\nexport interface CreateSecretModalProps {\n  save?: (name: string) => void;\n  namespace: string;\n  secretType: SecretTypeAbstraction;\n}\n\ntype Props = CreateSecretModalProps & ModalComponentProps;\n\nconst CreateSecretModal: React.FC<Props> = ({ close, namespace, save, secretType }) => {\n  const handleSave = (name: string) => {\n    close();\n    save(name);\n  };\n\n  return (\n    <SecretFormWrapper\n      onCancel={close}\n      onSave={handleSave}\n      fixed={{ metadata: { namespace } }}\n      secretTypeAbstraction={secretType}\n      isCreate\n      modal\n    />\n  );\n};\n\nexport const secretModalLauncher = createModalLauncher<Props>(CreateSecretModal);\n\nexport default CreateSecretModal;\n","import { saveAs } from 'file-saver';\nimport { safeLoad } from 'js-yaml';\n\nexport const downloadYaml = (data: BlobPart) => {\n  const blob = new Blob([data], { type: 'text/yaml;charset=utf-8' });\n  let filename = 'k8s-object.yaml';\n  try {\n    const obj = safeLoad(data);\n    if (obj.kind) {\n      filename = `${obj.kind.toLowerCase()}-${obj.metadata.name}.yaml`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not parse YAML file:', e);\n  }\n  saveAs(blob, filename);\n};\n","import * as React from 'react';\nimport i18next from 'i18next';\nimport Status, { StatusProps } from '@console/dynamic-plugin-sdk/src/app/components/status/Status';\nimport { BuildRun, ComputedBuildRunStatus } from '../../types';\n\nconst getSucceededCondition = (buildRun: BuildRun) =>\n  buildRun?.status?.conditions?.find((condition) => condition.type === 'Succeeded');\n\nexport const getBuildRunStatus = (buildRun: BuildRun): ComputedBuildRunStatus => {\n  const succeededCondition = getSucceededCondition(buildRun);\n  if (succeededCondition) {\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Pending') {\n      return ComputedBuildRunStatus.PENDING;\n    }\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Running') {\n      return ComputedBuildRunStatus.RUNNING;\n    }\n    if (succeededCondition.status === 'True') {\n      return ComputedBuildRunStatus.SUCCEEDED;\n    }\n    if (succeededCondition.status === 'False') {\n      return ComputedBuildRunStatus.FAILED;\n    }\n  }\n  return ComputedBuildRunStatus.UNKNOWN;\n};\n\nexport const getBuildRunStatusProps = (buildRun: BuildRun): StatusProps => {\n  const succeededCondition = getSucceededCondition(buildRun);\n  if (succeededCondition) {\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Pending') {\n      return {\n        status: ComputedBuildRunStatus.PENDING,\n        title: i18next.t('shipwright-plugin~Pending'),\n      };\n    }\n    if (succeededCondition.status === 'Unknown' && succeededCondition.reason === 'Running') {\n      return {\n        status: ComputedBuildRunStatus.RUNNING,\n        title: i18next.t('shipwright-plugin~Running'),\n      };\n    }\n    if (succeededCondition.status === 'True') {\n      return {\n        status: ComputedBuildRunStatus.SUCCEEDED,\n        title: i18next.t('shipwright-plugin~Succeeded'),\n      };\n    }\n    if (succeededCondition.status === 'False') {\n      return {\n        status: ComputedBuildRunStatus.FAILED,\n        title: i18next.t('shipwright-plugin~Failed'),\n      };\n    }\n  }\n  return {\n    status: ComputedBuildRunStatus.UNKNOWN,\n    title: i18next.t('shipwright-plugin~Unknown'),\n  };\n};\n\nconst BuildRunStatus: React.FC<{ buildRun: BuildRun }> = ({ buildRun }) => {\n  const status = getBuildRunStatus(buildRun);\n  const failedCondition = getSucceededCondition(buildRun);\n  return (\n    <Status {...getBuildRunStatusProps(buildRun)}>\n      {status === ComputedBuildRunStatus.FAILED ? (\n        <>\n          <pre data-test=\"failure-popup\">{failedCondition.reason}</pre>\n          {failedCondition.message}\n        </>\n      ) : null}\n    </Status>\n  );\n};\n\nexport default BuildRunStatus;\n","import { K8sModel } from '@console/internal/module/k8s';\n\nexport const ConsoleSampleModel: K8sModel = {\n  kind: 'ConsoleSample',\n  label: 'ConsoleSample',\n  labelPlural: 'ConsoleSamples',\n  apiGroup: 'console.openshift.io',\n  apiVersion: 'v1',\n  abbr: 'CS',\n  namespaced: false,\n  crd: true,\n  plural: 'consolesamples',\n  propagationPolicy: 'Background',\n};\n","import * as React from 'react';\nimport { Alert, TextInputTypes, ValidatedOptions } from '@patternfly/react-core';\nimport { useFormikContext, FormikErrors, FormikTouched } from 'formik';\nimport { isEmpty } from 'lodash';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useAccessReview } from '@console/dynamic-plugin-sdk/src';\nimport { RepoStatus, ImportStrategy, getGitService, GitProvider } from '@console/git-service';\nimport { DetectedBuildType } from '@console/git-service/src/utils/build-tool-type-detector';\nimport { detectImportStrategies } from '@console/git-service/src/utils/import-strategy-detector';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport {\n  FLAG_KNATIVE_SERVING_SERVICE,\n  ServerlessBuildStrategyType,\n  ServiceModel as ksvcModel,\n} from '@console/knative-plugin';\nimport { InputField, useFormikValidationFix, useDebounceCallback, useFlag } from '@console/shared';\nimport { UNASSIGNED_KEY, CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isGitImportSource } from '../../../types/samples';\nimport {\n  getSampleRepo,\n  getSampleRef,\n  getSampleContextDir,\n  NormalizedBuilderImages,\n} from '../../../utils/imagestream-utils';\nimport { getSample, getGitImportSample } from '../../../utils/samples';\nimport { GitData, DetectedStrategyFormData } from '../import-types';\nimport { detectGitRepoName, detectGitType } from '../import-validation-utils';\nimport FormSection from '../section/FormSection';\nimport AdvancedGitOptions from './AdvancedGitOptions';\nimport GitTypeSelector from './GitTypeSelector';\nimport SampleRepo from './SampleRepo';\n\nexport type GitSectionFormData = {\n  formType: string;\n  name: string;\n  application: {\n    selected: string;\n    selectedKey: string;\n    name: string;\n    isInContext: any;\n  };\n  image: {\n    selected: any;\n    selectedKey: string;\n    tagObj: string;\n    recommended: string;\n    couldNotRecommend: boolean;\n  };\n  git: GitData;\n  devfile?: {\n    devfilePath: string;\n    devfileSourceUrl: string;\n    devfileContent?: string;\n  };\n  docker?: {\n    dockerfilePath: string;\n  };\n  build: {\n    strategy: BuildStrategyType;\n  };\n  project: {\n    name: string;\n  };\n  import?: {\n    recommendedStrategy?: DetectedStrategyFormData;\n  };\n};\n\nexport interface GitSectionProps {\n  title?: React.ReactNode;\n  formContextField?: string;\n  builderImages?: NormalizedBuilderImages;\n  defaultSample?: { url: string; ref?: string; dir?: string };\n  showSample?: boolean;\n  formType?: string;\n  importType?: string;\n  imageStreamName?: string;\n  autoFocus?: boolean;\n}\n\nconst GitSection: React.FC<GitSectionProps> = ({\n  title,\n  formContextField,\n  builderImages,\n  defaultSample,\n  showSample = !!defaultSample,\n  formType,\n  importType,\n  imageStreamName,\n  autoFocus = true,\n}) => {\n  const { t } = useTranslation();\n  const inputRef = React.useRef<HTMLInputElement>();\n\n  const {\n    dirty,\n    isSubmitting,\n    values: formikValues,\n    touched: formikTouched,\n    errors: formikErrors,\n    status,\n    setFieldValue: formikSetFieldValue,\n    setFieldTouched: formikSetFieldTouched,\n  } = useFormikContext<GitSectionFormData>();\n\n  const isKnativeServingAvailable = useFlag(FLAG_KNATIVE_SERVING_SERVICE);\n  const [canCreateKnativeService, canCreateKnativeServiceLoading] = useAccessReview({\n    group: ksvcModel.apiGroup,\n    resource: ksvcModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const setFieldValue = React.useCallback(\n    (key: string, value: string | boolean | object, shouldValidate?: boolean) => {\n      formikSetFieldValue(`${fieldPrefix}${key}` as any, value, shouldValidate);\n    },\n    [fieldPrefix, formikSetFieldValue],\n  );\n  const setFieldTouched = React.useCallback(\n    (key: string, touched: boolean, shouldValidate?: boolean) => {\n      formikSetFieldTouched(`${fieldPrefix}${key}` as any, touched, shouldValidate);\n    },\n    [fieldPrefix, formikSetFieldTouched],\n  );\n\n  const values: GitSectionFormData = formContextField\n    ? _.get(formikValues, formContextField)\n    : formikValues;\n  const touched: FormikTouched<GitSectionFormData> = formContextField\n    ? _.get(formikTouched, formContextField, {})\n    : formikTouched;\n  const errors: FormikErrors<GitSectionFormData> = formContextField\n    ? _.get(formikErrors, formContextField, {})\n    : formikErrors;\n  const formReloadCount: number = _.get(formikValues, 'formReloadCount');\n\n  const { url: defaultSampleURL, dir: defaultSampleDir, ref: defaultSampleRef } =\n    defaultSample || {};\n  const defaultSampleTagObj = React.useMemo(\n    () =>\n      defaultSampleURL\n        ? {\n            annotations: {\n              sampleRepo: defaultSampleURL,\n              sampleContextDir: defaultSampleDir ?? './',\n              sampleRef: defaultSampleRef ?? '',\n            },\n          }\n        : null,\n    [defaultSampleURL, defaultSampleDir, defaultSampleRef],\n  );\n  const imageStreamTag = isEmpty(values.image.tagObj) ? defaultSampleTagObj : values.image.tagObj;\n  const imageStreamTagSampleRepo = showSample && getSampleRepo(imageStreamTag);\n  const {\n    name: nameTouched,\n    application: { name: applicationNameTouched } = {},\n    image: { selected: imageSelectorTouched } = {},\n    git: { dir: gitDirTouched, type: gitTypeTouched } = {},\n  } = touched;\n  const { git: { url: gitUrlError } = {} } = errors;\n\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const [repoStatus, setRepoStatus] = React.useState<RepoStatus>();\n\n  const handleBuilderImageRecommendation = React.useCallback(\n    async (detectedBuildTypes: DetectedBuildType[]) => {\n      setFieldValue('image.isRecommending', false);\n      if (gitUrlError) {\n        setFieldValue('image.recommended', '');\n        setFieldValue('image.couldNotRecommend', true);\n        return;\n      }\n      const recommendedBuildType =\n        builderImages &&\n        detectedBuildTypes?.find(\n          ({ type: recommended }) => recommended && builderImages.hasOwnProperty(recommended),\n        );\n      if (recommendedBuildType && recommendedBuildType.type) {\n        setFieldValue('image.couldNotRecommend', false);\n        setFieldValue('image.recommended', recommendedBuildType.type);\n      } else {\n        setFieldValue('image.couldNotRecommend', true);\n        setFieldValue('image.recommended', '');\n      }\n    },\n    [builderImages, gitUrlError, setFieldValue],\n  );\n\n  const handleDevfileStrategyDetection = React.useCallback(\n    async (devfilePath: string, gitType: GitProvider) => {\n      if (gitUrlError) {\n        setFieldValue('devfile.devfileContent', null);\n        setFieldValue('devfile.devfileHasError', true);\n        return;\n      }\n      if (importType !== 'devfile' && !values.devfile?.devfileSourceUrl) {\n        setFieldValue('devfile.devfilePath', devfilePath);\n        setFieldValue('docker.dockerfilePath', 'Dockerfile');\n        const gitService = getGitService(\n          values.git.url,\n          gitType,\n          values.git.ref,\n          values.git.dir,\n          values.git.secretResource,\n          devfilePath,\n        );\n        const devfileContents = gitService && (await gitService.getDevfileContent());\n        if (!devfileContents) {\n          setFieldValue('devfile.devfileContent', null);\n          setFieldValue('devfile.devfileHasError', true);\n        } else {\n          setFieldValue('devfile.devfileContent', devfileContents);\n          setFieldValue('devfile.devfileHasError', false);\n        }\n      }\n    },\n    [\n      gitUrlError,\n      importType,\n      setFieldValue,\n      values.devfile,\n      values.git.dir,\n      values.git.ref,\n      values.git.secretResource,\n      values.git.url,\n    ],\n  );\n\n  const handleGitUrlChange = React.useCallback(\n    async (url: string, ref: string, dir: string) => {\n      if (isKnativeServingAvailable && canCreateKnativeServiceLoading) return;\n      if (isSubmitting || status?.submitError) return;\n      setValidated(ValidatedOptions.default);\n      setFieldValue('git.validated', ValidatedOptions.default);\n      setFieldValue('git.isUrlValidating', true);\n      if (gitUrlError) {\n        // Reset git type field when url is not valid or empty so that when new url valid is added, we run git type detection again.\n        // Don't do anything else if URL is not valid.\n        setFieldValue('git.showGitType', false);\n        setFieldTouched('git.type', false);\n        setFieldValue('git.isUrlValidating', false);\n        return;\n      }\n      const detectedGitType = detectGitType(url);\n      const isUnsureDetectedGitType = detectedGitType === GitProvider.UNSURE;\n      const gitRepoName = formType !== 'sample' && detectGitRepoName(url);\n\n      // Updated detectedType only\n      if (detectedGitType !== values.git.detectedType) {\n        setFieldValue('git.detectedType', detectedGitType);\n      }\n      if (isUnsureDetectedGitType && !values.git.showGitType) {\n        setFieldValue('git.showGitType', true);\n      }\n\n      if (!isUnsureDetectedGitType && values.git.showGitType) {\n        setFieldValue('git.showGitType', false);\n      }\n\n      const gitType =\n        isUnsureDetectedGitType && values.git.showGitType ? values.git.type : detectedGitType;\n\n      if (gitType !== values.git.type) {\n        setFieldTouched('git.type', false, false);\n        setFieldValue('git.type', gitType);\n      }\n\n      const gitService = getGitService(\n        url,\n        gitType,\n        ref,\n        dir,\n        values.git.secretResource,\n        values.devfile?.devfilePath,\n        values.docker?.dockerfilePath,\n      );\n\n      const importStrategyData = await detectImportStrategies(\n        url,\n        gitService,\n        isKnativeServingAvailable && canCreateKnativeService,\n      );\n\n      const {\n        loaded,\n        loadError,\n        repositoryStatus,\n        strategies: importStrategies,\n      } = importStrategyData;\n\n      setRepoStatus(repositoryStatus);\n\n      if (repositoryStatus !== RepoStatus.Reachable) {\n        setValidated(ValidatedOptions.warning);\n        setFieldValue('git.validated', ValidatedOptions.warning);\n        setFieldValue('git.isUrlValidating', false);\n        setFieldValue('import', {\n          loaded: false,\n          loadError: null,\n          strategies: [],\n          selectedStrategy: {\n            name: 'Builder Image',\n            type: ImportStrategy.S2I,\n            priority: 0,\n            detectedFiles: [],\n          },\n          recommendedStrategy: null,\n          showEditImportStrategy: true,\n        });\n        setFieldValue('build.strategy', BuildStrategyType.Source);\n        return;\n      }\n\n      gitRepoName && !nameTouched && !values.name && setFieldValue('name', gitRepoName);\n      gitRepoName &&\n        values.formType !== 'edit' &&\n        !values.application.name &&\n        values.application.selectedKey !== UNASSIGNED_KEY &&\n        setFieldValue('application.name', `${gitRepoName}-app`);\n\n      if (importType === 'devfile' || imageStreamName || values.formType === 'edit') {\n        setValidated(ValidatedOptions.success);\n        setFieldValue('git.validated', ValidatedOptions.success);\n        setFieldValue('git.isUrlValidating', false);\n        importType === 'devfile' && setFieldValue('build.strategy', BuildStrategyType.Devfile);\n        importType === 'devfile' &&\n          !values.devfile?.devfileContent &&\n          setFieldValue('import.recommendedStrategy', importStrategies[0]);\n        values.formType === 'edit' &&\n          values.build.strategy === BuildStrategyType.Source &&\n          handleBuilderImageRecommendation(\n            importStrategies?.find((s) => s.type === ImportStrategy.S2I)?.detectedCustomData,\n          );\n        return;\n      }\n\n      setFieldValue('import.loaded', loaded);\n      setFieldValue('import.loadError', loadError);\n      setFieldValue('import.strategies', importStrategies);\n      if (importStrategies.length > 0) {\n        setFieldValue('import.showEditImportStrategy', false);\n        setFieldValue('import.selectedStrategy', importStrategies[0]);\n        setFieldValue('import.recommendedStrategy', importStrategies[0]);\n      } else {\n        setFieldValue('import.selectedStrategy', {\n          name: 'Devfile',\n          type: ImportStrategy.DEVFILE,\n          priority: 2,\n          detectedFiles: [],\n        });\n        setFieldValue('import.recommendedStrategy', null);\n        setFieldValue('import.showEditImportStrategy', true);\n      }\n      setFieldValue('import.strategyChanged', false);\n\n      if (importStrategies.length > 0) {\n        switch (importStrategies[0].type) {\n          case ImportStrategy.S2I: {\n            setFieldValue('build.strategy', BuildStrategyType.Source);\n            if (builderImages) {\n              setFieldValue('image.isRecommending', true);\n              handleBuilderImageRecommendation(importStrategies[0].detectedCustomData);\n            }\n            break;\n          }\n          case ImportStrategy.DEVFILE: {\n            setFieldValue('build.strategy', BuildStrategyType.Devfile);\n            handleDevfileStrategyDetection(importStrategies[0].detectedFiles[0], gitType);\n            break;\n          }\n          case ImportStrategy.DOCKERFILE: {\n            setFieldValue('build.strategy', BuildStrategyType.Docker);\n            setFieldValue('docker.dockerfilePath', importStrategies[0].detectedFiles[0]);\n            setFieldValue('docker.dockerfileHasError', false);\n            break;\n          }\n          case ImportStrategy.SERVERLESS_FUNCTION: {\n            setFieldValue('build.strategy', ServerlessBuildStrategyType.ServerlessFunction);\n            break;\n          }\n          default:\n        }\n      }\n\n      setValidated(ValidatedOptions.success);\n      setFieldValue('git.validated', ValidatedOptions.success);\n      setFieldValue('git.isUrlValidating', false);\n    },\n    [\n      isSubmitting,\n      status,\n      setFieldValue,\n      gitUrlError,\n      formType,\n      values.git.detectedType,\n      values.git.showGitType,\n      values.git.type,\n      values.git.secretResource,\n      values.devfile,\n      values.docker,\n      values.name,\n      values.formType,\n      values.application.name,\n      values.application.selectedKey,\n      values.build.strategy,\n      isKnativeServingAvailable,\n      canCreateKnativeService,\n      canCreateKnativeServiceLoading,\n      nameTouched,\n      importType,\n      imageStreamName,\n      setFieldTouched,\n      handleBuilderImageRecommendation,\n      builderImages,\n      handleDevfileStrategyDetection,\n    ],\n  );\n\n  const debouncedHandleGitUrlChange = useDebounceCallback(handleGitUrlChange);\n\n  const fillImageStreamTagSample = React.useCallback(() => {\n    if (isKnativeServingAvailable && canCreateKnativeServiceLoading) return;\n    const url = imageStreamTagSampleRepo;\n    const ref = getSampleRef(imageStreamTag);\n    const dir = getSampleContextDir(imageStreamTag);\n    setFieldValue('git.url', imageStreamTagSampleRepo, false);\n    setFieldValue('git.ref', ref, false);\n    setFieldValue('git.dir', dir, false);\n    setFieldTouched('git.url', true, true);\n    debouncedHandleGitUrlChange(url, ref, dir);\n  }, [\n    debouncedHandleGitUrlChange,\n    imageStreamTagSampleRepo,\n    setFieldTouched,\n    setFieldValue,\n    imageStreamTag,\n    isKnativeServingAvailable,\n    canCreateKnativeServiceLoading,\n  ]);\n\n  React.useEffect(() => {\n    (!dirty || gitDirTouched || gitTypeTouched || formReloadCount || values.git.secretResource) &&\n      values.git.url &&\n      debouncedHandleGitUrlChange(values.git.url, values.git.ref, values.git.dir);\n  }, [\n    dirty,\n    isSubmitting,\n    gitDirTouched,\n    formReloadCount,\n    debouncedHandleGitUrlChange,\n    values.git.url,\n    values.git.ref,\n    values.git.dir,\n    values.git.type,\n    values.git.secretResource,\n    gitTypeTouched,\n  ]);\n\n  const helpText = React.useMemo(() => {\n    if (values.git.isUrlValidating) {\n      return `${t('devconsole~Validating')}...`;\n    }\n    if (validated === ValidatedOptions.success) {\n      return t('devconsole~Validated');\n    }\n    if (validated === ValidatedOptions.warning) {\n      switch (repoStatus) {\n        case RepoStatus.RateLimitExceeded: {\n          return t('devconsole~Rate limit exceeded');\n        }\n        case RepoStatus.GitTypeNotDetected: {\n          return t(\n            'devconsole~URL is valid but a git type could not be identified. Please select a git type from the options below',\n          );\n        }\n        case RepoStatus.PrivateRepo: {\n          return t(\n            'devconsole~If this is a private repository, enter a source Secret in advanced Git options',\n          );\n        }\n        case RepoStatus.ResourceNotFound: {\n          return t('devconsole~Requested repository does not exist');\n        }\n        case RepoStatus.InvalidGitTypeSelected: {\n          return t(\n            'devconsole~The selected git type might not be valid or the repository is private. Please try selecting another git type or enter a source Secret in advanced Git options',\n          );\n        }\n        /* Special case for Gitea as it throws 404 for all kinds of negatives */\n        case RepoStatus.GiteaRepoUnreachable: {\n          return t(\n            'devconsole~The Gitea repository is unreachable. The repository might be private or does not exist',\n          );\n        }\n        default: {\n          return t('devconsole~URL is valid but cannot be reached');\n        }\n      }\n    }\n    return t('devconsole~Repository URL to build and deploy your code from');\n  }, [t, values.git.isUrlValidating, validated, repoStatus]);\n\n  const resetFields = React.useCallback(() => {\n    if (!imageSelectorTouched) {\n      setFieldValue('image.selected', '');\n      setFieldValue('image.tag', '');\n    }\n    values.image.recommended && setFieldValue('image.recommended', '');\n    values.image.couldNotRecommend && setFieldValue('image.couldNotRecommend', false);\n    if (values.formType === 'edit') {\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n        values.application.selectedKey === CREATE_APPLICATION_KEY &&\n        !applicationNameTouched &&\n        setFieldValue('application.name', '');\n      return;\n    }\n    !nameTouched && setFieldValue('name', '');\n    !values.application.isInContext &&\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n      !applicationNameTouched &&\n      setFieldValue('application.name', '');\n  }, [\n    setFieldValue,\n    values.formType,\n    values.image.recommended,\n    values.image.couldNotRecommend,\n    values.application.selectedKey,\n    values.application.isInContext,\n    applicationNameTouched,\n    imageSelectorTouched,\n    nameTouched,\n  ]);\n\n  useFormikValidationFix(values.git.url);\n\n  /**\n   * Automatically focus the git repository field and prefill it with different\n   * sample types.\n   *\n   * 1. ConsoleSample\n   * 2. ImageStream samples\n   */\n  React.useEffect(() => {\n    // Skip handling until Knative Service status is unknown!\n    if (canCreateKnativeServiceLoading) return;\n\n    if (autoFocus) {\n      inputRef.current?.focus();\n    }\n\n    const { sampleName, repository: sampleRepository } = getGitImportSample();\n    if (sampleRepository?.url) {\n      const name = detectGitRepoName(sampleRepository.url);\n      setFieldValue('name', name, false);\n      setFieldValue('application.name', `${name}-app`, false);\n      setFieldValue('git.url', sampleRepository.url, false);\n      if (sampleRepository.revision) {\n        setFieldValue('git.ref', sampleRepository.revision, false);\n      }\n      if (sampleRepository.contextDir) {\n        setFieldValue('git.dir', sampleRepository.contextDir, false);\n      }\n      setFieldTouched('git.url', true, true);\n      debouncedHandleGitUrlChange(\n        sampleRepository.url,\n        sampleRepository.revision,\n        sampleRepository.contextDir,\n      );\n    }\n    if (sampleName) {\n      getSample(sampleName)\n        .then((sample) => {\n          if (isGitImportSource(sample.spec.source)) {\n            const { gitImport } = sample.spec.source;\n            if (!sampleRepository?.url) {\n              const name = detectGitRepoName(sampleRepository.url);\n              setFieldValue('name', name, false);\n              setFieldValue('application.name', `${name}-app`, false);\n              setFieldValue('git.url', gitImport.repository.url, false);\n              if (sampleRepository.revision) {\n                setFieldValue('git.ref', sampleRepository.revision, false);\n              }\n              if (sampleRepository.contextDir) {\n                setFieldValue('git.dir', sampleRepository.contextDir, false);\n              }\n              setFieldTouched('git.url', true, true);\n              debouncedHandleGitUrlChange(\n                gitImport.repository.url,\n                gitImport.repository.revision,\n                gitImport.repository.contextDir,\n              );\n            }\n            if (gitImport?.service?.targetPort && gitImport?.service?.targetPort !== 8080) {\n              setFieldValue(\n                'route.unknownTargetPort',\n                gitImport.service.targetPort.toString(),\n                false,\n              );\n            }\n            // handleSearch(containerImport.image);\n          } else {\n            // eslint-disable-next-line no-console\n            console.error(\n              `Unsupported ConsoleSample \"${sampleName}\" source type ${sample.spec?.source?.type}`,\n            );\n          }\n        })\n        .catch((error) => {\n          // eslint-disable-next-line no-console\n          console.error(`Error while loading ConsoleSample \"${sampleName}\":`, error);\n        });\n    } else if (formType === 'sample' && imageStreamTagSampleRepo) {\n      fillImageStreamTagSample();\n    }\n\n    // Disable deps to load the samples only once when the component is loaded.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [canCreateKnativeServiceLoading]);\n\n  return (\n    <FormSection title={title ?? t('devconsole~Git')}>\n      <InputField\n        ref={inputRef}\n        type={TextInputTypes.text}\n        name={`${fieldPrefix}git.url`}\n        label={t('devconsole~Git Repo URL')}\n        helpText={helpText}\n        helpTextInvalid={helpText}\n        validated={validated}\n        onBlur={(e: React.FocusEvent<HTMLInputElement>) => {\n          const trimmedURL = e.target.value.trim();\n          if (e.target.value !== trimmedURL) {\n            setFieldValue('git.url', trimmedURL);\n            debouncedHandleGitUrlChange(trimmedURL, values.git.ref, values.git.dir);\n          }\n        }}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          resetFields();\n          debouncedHandleGitUrlChange(e.target.value.trim(), values.git.ref, values.git.dir);\n        }}\n        data-test-id=\"git-form-input-url\"\n        required\n        isDisabled={formType === 'sample' && imageStreamTagSampleRepo}\n      />\n      {formType !== 'sample' && imageStreamTagSampleRepo && (\n        <SampleRepo onClick={fillImageStreamTagSample} />\n      )}\n      {values.git.showGitType && (\n        <>\n          <GitTypeSelector fieldPrefix={fieldPrefix} />\n          {values.git.type === GitProvider.UNSURE && (\n            <Alert isInline variant=\"info\" title={t('devconsole~Defaulting Git type to other')}>\n              {t('devconsole~We failed to detect the Git type.')}\n            </Alert>\n          )}\n        </>\n      )}\n      {formType !== 'sample' && <AdvancedGitOptions formContextField={formContextField} />}\n    </FormSection>\n  );\n};\n\nexport default GitSection;\n","import * as _ from 'lodash';\nimport {\n  K8sResourceCommon,\n  MatchExpression,\n  MatchLabels,\n  Selector,\n} from '@console/dynamic-plugin-sdk/src';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { ALL_NAMESPACES_KEY } from '@console/shared/src/constants';\nimport { consoleProxyFetch, consoleProxyFetchJSON } from '@console/shared/src/utils/proxy';\nimport {\n  DELETED_RESOURCE_IN_K8S_ANNOTATION,\n  RESOURCE_LOADED_FROM_RESULTS_ANNOTATION,\n} from '../../../const';\nimport { TektonResultModel } from '../../../models';\nimport { PipelineRunKind, TaskRunKind } from '../../../types';\n\n// REST API spec\n// https://github.com/tektoncd/results/blob/main/docs/api/rest-api-spec.md\n\n// const URL_PREFIX = `/apis/results.tekton.dev/v1alpha2/parents/`;\n\nconst MINIMUM_PAGE_SIZE = 5;\nconst MAXIMUM_PAGE_SIZE = 10000;\n\nexport type ResultRecord = {\n  name: string;\n  uid: string;\n  createTime: string;\n  updateTime: string;\n  etag: string;\n  data: {\n    // tekton.dev/v1beta1.PipelineRun | tekton.dev/v1beta1.TaskRun | results.tekton.dev/v1alpha2.Log\n    type: string;\n    value: string;\n  };\n};\n\nexport type Log = {\n  result: {\n    name: string;\n    data: string;\n  };\n};\n\ntype ProxyRequest = {\n  allowInsecure?: boolean;\n  method: string;\n  url: string;\n  headers?: Record<string, string[]>;\n  queryparams?: Record<string, string[]>;\n  body?: string;\n};\n\nexport type RecordsList = {\n  nextPageToken?: string;\n  records: ResultRecord[];\n};\n\nexport type TektonResultsOptions = {\n  pageSize?: number;\n  selector?: Selector;\n  // limit cannot be used in conjuction with pageSize and takes precedence\n  limit?: number;\n  filter?: string;\n};\n\nconst throw404 = () => {\n  // eslint-disable-next-line no-throw-literal\n  throw { code: 404 };\n};\n\n// decoding result base64\nexport const decodeValue = (value: string) => atob(value);\nexport const decodeValueJson = (value: string) => {\n  const decodedValue = value ? JSON.parse(decodeValue(value)) : null;\n  let resourceDeletedInK8sAnnotation;\n  if (_.has(decodedValue?.metadata, 'deletionTimestamp')) {\n    delete decodedValue?.metadata?.deletionTimestamp;\n    resourceDeletedInK8sAnnotation = { [DELETED_RESOURCE_IN_K8S_ANNOTATION]: 'true' };\n  }\n  const decodedValueWithTRAnnotation = decodedValue\n    ? {\n        ...decodedValue,\n        metadata: {\n          ...decodedValue?.metadata,\n          annotations: {\n            ...decodedValue?.metadata?.annotations,\n            [RESOURCE_LOADED_FROM_RESULTS_ANNOTATION]: 'true',\n            ...resourceDeletedInK8sAnnotation,\n          },\n        },\n      }\n    : null;\n  return decodedValueWithTRAnnotation;\n};\n\n// filter functions\nexport const AND = (...expressions: string[]) => expressions.filter((x) => x).join(' && ');\nexport const OR = (...expressions: string[]) => {\n  const filteredExpressions = expressions.filter((x) => x);\n  const filter = filteredExpressions.join(' || ');\n  return filteredExpressions.length > 1 ? `(${filter})` : filter;\n};\n\nconst EXP = (left: string, right: string, operator: string) => `${left} ${operator} ${right}`;\nexport const EQ = (left: string, right: string) => EXP(left, `\"${right}\"`, '==');\nexport const NEQ = (left: string, right: string) => EXP(left, `\"${right}\"`, '!=');\n\nexport enum DataType {\n  PipelineRunV1Beta1 = 'tekton.dev/v1beta1.PipelineRun',\n  TaskRunV1Beta1 = 'tekton.dev/v1beta1.TaskRun',\n  PipelineRunV1 = 'tekton.dev/v1.PipelineRun',\n  TaskRunV1 = 'tekton.dev/v1.TaskRun',\n}\n\nexport const labelsToFilter = (labels?: MatchLabels): string =>\n  labels\n    ? AND(\n        ...Object.keys(labels).map((label) =>\n          EQ(`data.metadata.labels[\"${label}\"]`, labels[label]),\n        ),\n      )\n    : '';\n\nexport const nameFilter = (name?: string): string =>\n  name ? AND(`data.metadata.name.startsWith(\"${name.trim().toLowerCase()}\")`) : '';\n\nexport const expressionsToFilter = (expressions: Omit<MatchExpression, 'value'>[]): string =>\n  AND(\n    ...expressions\n      .map((expression) => {\n        switch (expression.operator) {\n          case 'Exists':\n            return `data.metadata.labels.contains(\"${expression.key}\")`;\n          case 'DoesNotExist':\n            return `!data.metadata.labels.contains(\"${expression.key}\")`;\n          case 'NotIn':\n            return expression.values?.length > 0\n              ? AND(\n                  ...expression.values.map((value) =>\n                    NEQ(`data.metadata.labels[\"${expression.key}\"]`, value),\n                  ),\n                )\n              : '';\n          case 'In':\n            return expression.values?.length > 0\n              ? `data.metadata.labels[\"${expression.key}\"] in [${expression.values.map(\n                  (value) => `\"${value}\"`,\n                )}]`\n              : '';\n          case 'Equals':\n            return expression.values?.[0]\n              ? EQ(`data.metadata.labels[\"${expression.key}\"]`, expression.values?.[0])\n              : '';\n          case 'NotEquals':\n          case 'NotEqual':\n            return expression.values?.[0]\n              ? NEQ(`data.metadata.labels[\"${expression.key}\"]`, expression.values?.[0])\n              : '';\n          case 'GreaterThan':\n            return expression.values?.[0]\n              ? EXP(`data.metadata.labels[\"${expression.key}\"]`, expression.values?.[0], '>')\n              : '';\n          case 'LessThan':\n            return expression.values?.[0]\n              ? EXP(`data.metadata.labels[\"${expression.key}\"]`, expression.values?.[0], '<')\n              : '';\n          default:\n            throw new Error(\n              `Tekton results operator '${expression.operator}' conversion not implemented.`,\n            );\n        }\n      })\n      .filter((x) => x),\n  );\n\nexport const selectorToFilter = (selector) => {\n  let filter = '';\n  if (selector) {\n    const { matchLabels, matchExpressions, filterByName } = selector;\n    if (filterByName) {\n      filter = AND(filter, nameFilter(filterByName as string));\n    }\n    if (matchLabels || matchExpressions) {\n      if (matchLabels) {\n        filter = AND(filter, labelsToFilter(matchLabels));\n      }\n      if (matchExpressions) {\n        filter = AND(filter, expressionsToFilter(matchExpressions));\n      }\n    } else {\n      filter = labelsToFilter(selector as MatchLabels);\n    }\n  }\n  return filter;\n};\n\n// Devs should be careful to not cache a response that may not be complete.\n// In most situtations, caching is unnecessary.\n// Only cache a response that returns a single complete record as lists can change over time.\nlet CACHE: { [key: string]: [any[], RecordsList] } = {};\nexport const clearCache = () => {\n  CACHE = {};\n};\nconst InFlightStore: { [key: string]: boolean } = {};\n\nexport const getTRURLHost = async () => {\n  const tektonResult = await k8sGet(TektonResultModel, 'result');\n  const targetNamespace = tektonResult?.spec?.targetNamespace;\n  const serverPort = tektonResult?.spec?.server_port ?? '8080';\n  const tlsHostname = tektonResult?.spec?.tls_hostname_override;\n  let tektonResultsAPI;\n  if (tlsHostname) {\n    tektonResultsAPI = `${tlsHostname}:${serverPort}`;\n  } else if (targetNamespace && serverPort) {\n    tektonResultsAPI = `tekton-results-api-service.${targetNamespace}.svc.cluster.local:${serverPort}`;\n  } else {\n    tektonResultsAPI = `tekton-results-api-service.openshift-pipelines.svc.cluster.local:${serverPort}`;\n  }\n  return tektonResultsAPI;\n};\n\nexport const createTektonResultsUrl = async (\n  namespace: string,\n  dataType?: DataType,\n  filter?: string,\n  options?: TektonResultsOptions,\n  nextPageToken?: string,\n): Promise<string> => {\n  const tektonResultsAPI = await getTRURLHost();\n  const namespaceToSearch = namespace && namespace !== ALL_NAMESPACES_KEY ? namespace : '-';\n  const url = `https://${tektonResultsAPI}/apis/results.tekton.dev/v1alpha2/parents/${namespaceToSearch}/results/-/records?${new URLSearchParams(\n    {\n      // default sort should always be by `create_time desc`\n      // order_by: 'create_time desc', not supported yet\n      page_size: `${Math.max(\n        MINIMUM_PAGE_SIZE,\n        Math.min(MAXIMUM_PAGE_SIZE, options?.limit >= 0 ? options.limit : options?.pageSize ?? 50),\n      )}`,\n      ...(nextPageToken ? { page_token: nextPageToken } : {}),\n      filter: AND(\n        EQ('data_type', dataType.toString()),\n        filter,\n        selectorToFilter(options?.selector),\n        options?.filter,\n      ),\n    },\n  ).toString()}`;\n  return url;\n};\n\nexport const getFilteredRecord = async <R extends K8sResourceCommon>(\n  namespace: string,\n  dataType: DataType,\n  filter?: string,\n  options?: TektonResultsOptions,\n  nextPageToken?: string,\n  cacheKey?: string,\n): Promise<[R[], RecordsList, boolean?]> => {\n  if (cacheKey) {\n    const result = CACHE[cacheKey];\n    if (result) {\n      return result;\n    }\n    if (InFlightStore[cacheKey]) {\n      return [\n        [],\n        {\n          nextPageToken: null,\n          records: [],\n        },\n        true,\n      ];\n    }\n  }\n  InFlightStore[cacheKey] = true;\n  const value = await (async (): Promise<[R[], RecordsList]> => {\n    try {\n      const url = await createTektonResultsUrl(namespace, dataType, filter, options, nextPageToken);\n      let list: RecordsList = await consoleProxyFetchJSON({\n        url,\n        method: 'GET',\n        allowInsecure: true,\n      });\n      if (options?.limit >= 0) {\n        list = {\n          nextPageToken: null,\n          records: list.records.slice(0, options.limit),\n        };\n      }\n      return [list.records.map((result) => decodeValueJson(result.data.value)), list];\n    } catch (e) {\n      // return an empty response if we get a 404 error\n      if (e?.code === 404) {\n        return [\n          [],\n          {\n            nextPageToken: null,\n            records: [],\n          },\n        ] as [R[], RecordsList];\n      }\n      throw e;\n    }\n  })();\n\n  if (cacheKey) {\n    InFlightStore[cacheKey] = false;\n    CACHE[cacheKey] = value;\n  }\n  return value;\n};\n\nconst getFilteredPipelineRuns = (\n  namespace: string,\n  filter: string,\n  options?: TektonResultsOptions,\n  nextPageToken?: string,\n  cacheKey?: string,\n  IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER?: boolean,\n) =>\n  getFilteredRecord<PipelineRunKind>(\n    namespace,\n    IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER\n      ? DataType.PipelineRunV1\n      : DataType.PipelineRunV1Beta1,\n    filter,\n    options,\n    nextPageToken,\n    cacheKey,\n  );\n\nconst getFilteredTaskRuns = (\n  namespace: string,\n  filter: string,\n  options?: TektonResultsOptions,\n  nextPageToken?: string,\n  cacheKey?: string,\n  IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER?: boolean,\n) =>\n  getFilteredRecord<TaskRunKind>(\n    namespace,\n    IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER ? DataType.TaskRunV1 : DataType.TaskRunV1Beta1,\n    filter,\n    options,\n    nextPageToken,\n    cacheKey,\n  );\n\nexport const getPipelineRuns = (\n  namespace: string,\n  options?: TektonResultsOptions,\n  nextPageToken?: string,\n  // supply a cacheKey only if the PipelineRun is complete and response will never change in the future\n  cacheKey?: string,\n  IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER?: boolean,\n) =>\n  getFilteredPipelineRuns(\n    namespace,\n    '',\n    options,\n    nextPageToken,\n    cacheKey,\n    IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER,\n  );\n\nexport const getTaskRuns = (\n  namespace: string,\n  options?: TektonResultsOptions,\n  nextPageToken?: string,\n  // supply a cacheKey only if the TaskRun is complete and response will never change in the future\n  cacheKey?: string,\n  IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER?: boolean,\n) =>\n  getFilteredTaskRuns(\n    namespace,\n    '',\n    options,\n    nextPageToken,\n    cacheKey,\n    IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER,\n  );\n\nconst isJSONString = (str: string): boolean => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\nexport const consoleProxyFetchLog = <T>(proxyRequest: ProxyRequest): Promise<T> => {\n  return consoleProxyFetch(proxyRequest).then((response) => {\n    return isJSONString(response.body) ? JSON.parse(response.body) : response.body;\n  });\n};\n\nexport const getTaskRunLog = async (taskRunPath: string): Promise<string> => {\n  if (!taskRunPath) {\n    throw404();\n  }\n  const tektonResultsAPI = await getTRURLHost();\n  const url = `https://${tektonResultsAPI}/apis/results.tekton.dev/v1alpha2/parents/${taskRunPath.replace(\n    '/records/',\n    '/logs/',\n  )}`;\n  return consoleProxyFetchLog({ url, method: 'GET', allowInsecure: true });\n};\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { InputField, useDebounceCallback } from '@console/shared';\nimport FormSection from '../section/FormSection';\nimport SourceSecretSelector from './SourceSecretSelector';\n\nconst AdvancedGitOptions: React.FC<{\n  formContextField?: string;\n}> = ({ formContextField }) => {\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n\n  const { t } = useTranslation();\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n\n  const handleGitRefChange = useDebounceCallback((e: React.SyntheticEvent) =>\n    setFieldValue(`${fieldPrefix}git.ref`, (e.target as HTMLInputElement).value),\n  );\n\n  const handleGitDirChange = useDebounceCallback((e: React.SyntheticEvent) => {\n    setFieldValue(`${fieldPrefix}git.dir`, (e.target as HTMLInputElement).value);\n    setFieldTouched(`${fieldPrefix}git.dir`);\n  });\n\n  return (\n    <ExpandCollapse\n      textExpanded={t('devconsole~Hide advanced Git options')}\n      textCollapsed={t('devconsole~Show advanced Git options')}\n      dataTest=\"advanced-git-options\"\n    >\n      <FormSection>\n        <InputField\n          type={TextInputTypes.text}\n          name={`${fieldPrefix}git.ref`}\n          label={t('devconsole~Git reference')}\n          helpText={t('devconsole~Optional branch, tag, or commit.')}\n          onChange={handleGitRefChange}\n        />\n        <InputField\n          type={TextInputTypes.text}\n          name={`${fieldPrefix}git.dir`}\n          label={t('devconsole~Context dir')}\n          helpText={t(\n            'devconsole~Optional subdirectory for the source code, used as a context directory for build.',\n          )}\n          onChange={handleGitDirChange}\n        />\n        <SourceSecretSelector formContextField={formContextField} />\n      </FormSection>\n    </ExpandCollapse>\n  );\n};\n\nexport default AdvancedGitOptions;\n","import * as React from 'react';\nimport { FormGroup, FormHelperText, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { SecretTypeAbstraction } from '@console/internal/components/secrets/create-secret';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { SecretModel } from '@console/internal/models';\nimport { getFieldId } from '@console/shared';\nimport SourceSecretDropdown from '../../dropdown/SourceSecretDropdown';\nimport { secretModalLauncher } from '../CreateSecretModal';\n\nconst CREATE_SOURCE_SECRET = 'create-source-secret';\nconst CLEAR_SOURCE_SECRET = 'clear-source-secret';\n\nconst SourceSecretSelector: React.FC<{\n  formContextField?: string;\n}> = ({ formContextField }) => {\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n\n  const { t } = useTranslation();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const namespace: string = _.get(values, `${fieldPrefix}project.name`);\n  const secret: string = _.get(values, `${fieldPrefix}git.secret`);\n  const [data, loaded, loadError] = useK8sWatchResource(\n    namespace && secret\n      ? {\n          kind: SecretModel.kind,\n          namespace,\n          name: secret,\n          optional: true,\n          isList: false,\n        }\n      : null,\n  );\n\n  const handleSave = (name: string) => {\n    setFieldValue(`${fieldPrefix}git.secret`, name);\n  };\n\n  const handleDropdownChange = (key: string) => {\n    if (key === CREATE_SOURCE_SECRET) {\n      setFieldValue(`${fieldPrefix}git.secret`, secret);\n      secretModalLauncher({\n        namespace,\n        save: handleSave,\n        secretType: SecretTypeAbstraction.source,\n      });\n    } else if (key === CLEAR_SOURCE_SECRET) {\n      setFieldValue(`${fieldPrefix}git.secret`, '');\n      setFieldValue(`${fieldPrefix}git.secretResource`, {});\n    } else {\n      setFieldValue(`${fieldPrefix}git.secret`, key);\n    }\n  };\n\n  React.useEffect(() => {\n    loaded &&\n      !loadError &&\n      secret &&\n      data &&\n      setFieldValue(`${fieldPrefix}git.secretResource`, data);\n  }, [loaded, loadError, secret, data, setFieldValue, fieldPrefix]);\n\n  return (\n    <>\n      <FormGroup\n        fieldId={getFieldId('source-secret', 'dropdown')}\n        label={t('devconsole~Source Secret')}\n      >\n        <SourceSecretDropdown\n          dropDownClassName=\"dropdown--full-width\"\n          menuClassName=\"dropdown-menu--text-wrap\"\n          namespace={namespace}\n          actionItems={[\n            {\n              actionTitle: t('devconsole~Create new Secret'),\n              actionKey: CREATE_SOURCE_SECRET,\n            },\n            {\n              actionTitle: t('devconsole~No Secret'),\n              actionKey: CLEAR_SOURCE_SECRET,\n            },\n          ]}\n          selectedKey={secret}\n          title={secret}\n          onChange={handleDropdownChange}\n        />\n\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              {t('devconsole~Secret with credentials for pulling your source code.')}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default SourceSecretSelector;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Firehose } from '@console/internal/components/utils/firehose';\nimport { SecretModel } from '@console/internal/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface SourceSecretDropdownProps {\n  dropDownClassName?: string;\n  menuClassName?: string;\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  onChange?: (key: string) => void;\n  title?: React.ReactNode;\n}\n\nconst SourceSecretDropdown: React.FC<SourceSecretDropdownProps> = (props) => {\n  const { t } = useTranslation();\n  const filterData = (item) => {\n    return item.type === 'kubernetes.io/basic-auth' || item.type === 'kubernetes.io/ssh-auth';\n  };\n  const resources = [\n    {\n      isList: true,\n      namespace: props.namespace,\n      kind: SecretModel.kind,\n      prop: 'secrets',\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder={t('devconsole~Select Secret name')}\n        resourceFilter={filterData}\n        dataSelector={['metadata', 'name']}\n      />\n    </Firehose>\n  );\n};\n\nexport default SourceSecretDropdown;\n","import * as React from 'react';\nimport { Tile, Flex, FlexItem, FormGroup } from '@patternfly/react-core';\nimport {\n  GithubIcon,\n  GitlabIcon,\n  BitbucketIcon,\n  GitAltIcon,\n} from '@patternfly/react-icons/dist/esm/icons';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { GitProvider } from '@console/git-service/src';\nimport GiteaIcon from '../GiteaIcon';\nimport { GitReadableTypes } from '../import-types';\n\nimport './GitTypeSelector.scss';\n\ntype GitTypeSelectorProps = {\n  fieldPrefix: string;\n};\n\nconst GitTypeSelector: React.FC<GitTypeSelectorProps> = ({ fieldPrefix }) => {\n  const { values, setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const { t } = useTranslation();\n\n  const handleGitTypeChange = (gitType: GitProvider) => {\n    setFieldValue(`${fieldPrefix}git.type`, gitType, false);\n    setFieldTouched(`${fieldPrefix}git.type`, true, false);\n  };\n  const typeValue = _.get(values, `${fieldPrefix}git.type`);\n\n  return (\n    <>\n      <FormGroup label={t('devconsole~Git type')} isRequired id=\"git-type\">\n        <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITHUB]}\n              icon={<GithubIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITHUB)}\n              isSelected={typeValue === GitProvider.GITHUB}\n              id=\"git-type-github\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITLAB]}\n              icon={<GitlabIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITLAB)}\n              isSelected={typeValue === GitProvider.GITLAB}\n              id=\"git-type-gitlab\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.BITBUCKET]}\n              icon={<BitbucketIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.BITBUCKET)}\n              isSelected={typeValue === GitProvider.BITBUCKET}\n              id=\"git-type-bitbucket\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITEA]}\n              icon={<GiteaIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITEA)}\n              isSelected={typeValue === GitProvider.GITEA}\n              id=\"git-type-gitea\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.UNSURE]}\n              icon={<GitAltIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.UNSURE)}\n              isSelected={typeValue === GitProvider.UNSURE}\n              id=\"git-type-other\"\n            />\n          </FlexItem>\n        </Flex>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default GitTypeSelector;\n","import * as React from 'react';\nimport { FormHelperText, Button, ButtonVariant } from '@patternfly/react-core';\nimport { LevelUpAltIcon } from '@patternfly/react-icons/dist/esm/icons/level-up-alt-icon';\nimport { useTranslation } from 'react-i18next';\n\nexport interface SampleRepoProps {\n  onClick: () => void;\n}\n\nconst SampleRepo = (props) => {\n  const { t } = useTranslation();\n  return (\n    <FormHelperText>\n      <Button {...props} type=\"button\" variant={ButtonVariant.link} isInline>\n        {t('devconsole~Try sample')} <LevelUpAltIcon />\n      </Button>\n    </FormHelperText>\n  );\n};\n\nexport default SampleRepo;\n","import * as React from 'react';\nimport { uniqBy } from 'lodash';\nimport { K8sResourceCommon, Selector } from '@console/dynamic-plugin-sdk/src';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineRunKind, TaskRunKind } from '../../../types';\nimport { FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER } from '../../pipelines/const';\nimport { RepositoryLabels, RepositoryFields } from '../../repository/consts';\nimport {\n  getPipelineRuns,\n  TektonResultsOptions,\n  getTaskRuns,\n  RecordsList,\n  getTaskRunLog,\n} from '../utils/tekton-results';\n\nexport type GetNextPage = () => void | undefined;\n\nconst useTRRuns = <Kind extends K8sResourceCommon>(\n  getRuns: (\n    namespace: string,\n    options?: TektonResultsOptions,\n    nextPageToken?: string,\n    cacheKey?: string,\n    IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER?: boolean,\n  ) => Promise<[Kind[], RecordsList, boolean?]>,\n  namespace: string,\n  options?: TektonResultsOptions,\n  cacheKey?: string,\n): [Kind[], boolean, unknown, GetNextPage] => {\n  const IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER = useFlag(\n    FLAG_PIPELINES_OPERATOR_VERSION_1_16_OR_NEWER,\n  );\n  const [nextPageToken, setNextPageToken] = React.useState<string>(null);\n  const [localCacheKey, setLocalCacheKey] = React.useState(cacheKey);\n\n  if (cacheKey !== localCacheKey) {\n    // force update local cache key\n    setLocalCacheKey(cacheKey);\n  }\n\n  const [result, setResult] = React.useState<[Kind[], boolean, unknown, GetNextPage]>([\n    [],\n    false,\n    undefined,\n    undefined,\n  ]);\n\n  // reset token if namespace or options change\n  React.useEffect(() => {\n    setNextPageToken(null);\n  }, [namespace, options, cacheKey]);\n\n  // eslint-disable-next-line consistent-return\n  React.useEffect(() => {\n    let disposed = false;\n    (async () => {\n      try {\n        const tkPipelineRuns = await getRuns(\n          namespace,\n          options,\n          nextPageToken,\n          localCacheKey,\n          IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER,\n        );\n        if (!disposed) {\n          const token = tkPipelineRuns[1].nextPageToken;\n          const callInflight = !!tkPipelineRuns?.[2];\n          const loaded = !callInflight;\n          if (!callInflight) {\n            setResult((cur) => [\n              nextPageToken ? [...cur[0], ...tkPipelineRuns[0]] : tkPipelineRuns[0],\n              loaded,\n              undefined,\n              token\n                ? (() => {\n                    // ensure we can only call this once\n                    let executed = false;\n                    return () => {\n                      if (!disposed && !executed) {\n                        executed = true;\n                        // trigger the update\n                        setNextPageToken(token);\n                        return true;\n                      }\n                      return false;\n                    };\n                  })()\n                : undefined,\n            ]);\n          }\n        }\n      } catch (e) {\n        if (!disposed) {\n          if (nextPageToken) {\n            setResult((cur) => [cur[0], cur[1], e, undefined]);\n          } else {\n            setResult([[], false, e, undefined]);\n          }\n        }\n      }\n    })();\n    return () => {\n      disposed = true;\n    };\n  }, [\n    namespace,\n    options,\n    nextPageToken,\n    localCacheKey,\n    getRuns,\n    IS_PIPELINE_OPERATOR_VERSION_1_16_OR_NEWER,\n  ]);\n  return result;\n};\n\nexport const useTRPipelineRuns = (\n  namespace: string,\n  options?: TektonResultsOptions,\n  cacheKey?: string,\n): [PipelineRunKind[], boolean, unknown, GetNextPage] =>\n  useTRRuns<PipelineRunKind>(getPipelineRuns, namespace, options, cacheKey);\n\nexport const useTRTaskRuns = (\n  namespace: string,\n  options?: TektonResultsOptions,\n  cacheKey?: string,\n): [TaskRunKind[], boolean, unknown, GetNextPage] =>\n  useTRRuns<TaskRunKind>(getTaskRuns, namespace, options, cacheKey);\n\nexport const useGetPipelineRuns = (ns: string, options?: { name: string; kind: string }) => {\n  let selector: Selector;\n\n  if (options?.kind === 'Pipeline') {\n    selector = { matchLabels: { 'tekton.dev/pipeline': options?.name } };\n  }\n  if (options?.kind === 'Repository') {\n    selector = {\n      matchLabels: { [RepositoryLabels[RepositoryFields.REPOSITORY]]: options?.name },\n    };\n  }\n  const [resultPlrs, resultPlrsLoaded, resultPlrsLoadError, getNextPage] = useTRPipelineRuns(\n    ns,\n    options && {\n      selector,\n    },\n  );\n  const [k8sPlrs, k8sPlrsLoaded, k8sPlrsLoadError] = useK8sWatchResource<PipelineRunKind[]>({\n    isList: true,\n    kind: referenceForModel(PipelineRunModel),\n    namespace: ns,\n    ...(options ? { selector } : {}),\n  });\n  const mergedPlrs =\n    (resultPlrsLoaded || k8sPlrsLoaded) && !k8sPlrsLoadError\n      ? uniqBy([...k8sPlrs, ...resultPlrs], (r) => r.metadata.uid)\n      : [];\n  return [\n    mergedPlrs,\n    resultPlrsLoaded || k8sPlrsLoaded,\n    resultPlrsLoadError || k8sPlrsLoadError,\n    getNextPage,\n  ];\n};\n\nexport const useTRTaskRunLog = (\n  namespace: string,\n  taskRunName: string,\n  taskRunPath: string,\n): [string, boolean, unknown] => {\n  const [result, setResult] = React.useState<[string, boolean, unknown]>([null, false, undefined]);\n  React.useEffect(() => {\n    let disposed = false;\n    if (namespace && taskRunName) {\n      (async () => {\n        try {\n          const log = await getTaskRunLog(taskRunPath);\n          if (!disposed) {\n            setResult([log, true, undefined]);\n          }\n        } catch (e) {\n          if (!disposed) {\n            setResult([null, false, e]);\n          }\n        }\n      })();\n    }\n    return () => {\n      disposed = true;\n    };\n  }, [namespace, taskRunName, taskRunPath]);\n  return result;\n};\n","import * as React from 'react';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst SwitchToYAMLAlert: React.FC<{ onClose?: () => void }> = ({ onClose }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      actionClose={onClose && <AlertActionCloseButton onClose={onClose} />}\n      isInline\n      title={t(\n        'console-shared~Note: Some fields may not be represented in this form view. Please select \"YAML view\" for full control.',\n      )}\n      variant=\"info\"\n      data-test=\"info-alert\"\n    />\n  );\n};\n\nexport default SwitchToYAMLAlert;\n","import { ObjectMetadata, ObjectReference } from '@console/dynamic-plugin-sdk';\nimport { NameValueFromPair, NameValuePair } from '@console/shared';\n\nexport { BuildConfigModel } from '@console/internal/models';\nexport { BuildStrategyType } from '@console/internal/components/build';\n\ntype LocalObjectReference = { name: string };\n\ntype ImageStreamTagReference = {\n  kind: 'ImageStreamTag';\n  namespace?: string;\n  name: string;\n};\n\ntype ImageStreamImageReference = {\n  kind: 'ImageStreamImage';\n  namespace?: string;\n  name: string;\n};\n\ntype DockerImageReference = {\n  kind: 'DockerImage';\n  name: string;\n};\n\nexport type ImageReference =\n  | ImageStreamTagReference\n  | ImageStreamImageReference\n  | DockerImageReference;\n\nexport type BuildConfigGitSource = {\n  type: 'Git';\n  git: {\n    uri: string;\n    ref?: string;\n  };\n  contextDir?: string;\n};\n\nexport type BuildConfigDockerfileSource = {\n  type: 'Dockerfile';\n  dockerfile: string;\n};\n\nexport type BuildConfigBinarySource = {\n  type: 'Binary';\n  binary?: any;\n};\n\nexport type BuildConfigSource = (\n  | BuildConfigGitSource\n  | BuildConfigDockerfileSource\n  | BuildConfigBinarySource\n) & {\n  configMaps?: { configMap: LocalObjectReference; destinationDir: string }[];\n  secrets?: { secret: LocalObjectReference; destinationDir: string }[];\n  sourceSecret?: LocalObjectReference;\n};\n\nexport type BuildConfigRevision = {\n  type: 'Source' | 'Dockerfile' | 'Binary' | 'Images';\n  git?: {\n    author: { email: string; name: string };\n    commit: string;\n    committer: { email: string; name: string };\n    message: string;\n  };\n};\n\nexport type BuildConfigSourceStrategy = {\n  type: 'Source';\n  sourceStrategy?: {\n    from?: ImageReference;\n    env?: (NameValuePair | NameValueFromPair)[];\n  };\n  git?: {\n    uri: string;\n    ref: string;\n    noProxy?: string;\n    httpProxy?: string;\n    httpsProxy?: string;\n  };\n  contextDir?: string;\n  images?: {\n    as: string[];\n    from: ObjectReference;\n    paths: { sourcePath: string; destinationDir: string }[];\n    pullSecret: LocalObjectReference;\n  }[];\n  secrets?: { secret: LocalObjectReference; destinationDir: string }[];\n  sourceSecret?: LocalObjectReference;\n};\n\nexport type BuildConfigDockerStrategy = {\n  type: 'Docker';\n  dockerStrategy: {\n    from?: ImageReference;\n    dockerfilePath?: string;\n    env?: (NameValuePair | NameValueFromPair)[];\n  };\n};\n\nexport type BuildConfigStrategy = (BuildConfigSourceStrategy | BuildConfigDockerStrategy) & {\n  configMaps?: { configMap: LocalObjectReference; destinationDir: string }[];\n};\n\nexport type BuildConfigOutput = {\n  imageLabels?: { name: string; value: string }[];\n  pushSecret?: LocalObjectReference;\n  to?: ImageReference;\n};\n\nexport type BuildConfigConfigChangeTrigger = {\n  type: 'ConfigChange';\n};\n\nexport type BuildConfigImageChangeTrigger = {\n  type: 'ImageChange';\n  imageChange?: {\n    lastTriggeredImageID?: string;\n  };\n};\n\nexport type BuildConfigGenericTrigger = {\n  type: 'Generic';\n  generic: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigGitHubTrigger = {\n  type: 'GitHub';\n  github: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigGitLabTrigger = {\n  type: 'GitLab';\n  gitlab: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigBitbucketTrigger = {\n  type: 'Bitbucket';\n  bitbucket: {\n    allowEnv?: boolean;\n    secret?: string;\n    secretReference?: { name: string };\n  };\n};\n\nexport type BuildConfigTrigger =\n  | BuildConfigConfigChangeTrigger\n  | BuildConfigImageChangeTrigger\n  | BuildConfigGenericTrigger\n  | BuildConfigGitHubTrigger\n  | BuildConfigGitLabTrigger\n  | BuildConfigBitbucketTrigger;\n\nexport type BuildConfigPostCommit = {\n  command?: string[];\n  script?: string;\n  args?: string[];\n  commit?: string[];\n};\n\nexport enum BuildConfigRunPolicy {\n  Parallel = 'Parallel',\n  Serial = 'Serial',\n  SerialLatestOnly = 'SerialLatestOnly',\n}\n\nexport type BuildConfig = {\n  apiVersion: 'build.openshift.io/v1';\n  kind: 'BuildConfig';\n  metadata: ObjectMetadata;\n  spec: {\n    source?: BuildConfigSource;\n    revision?: BuildConfigRevision;\n    strategy?: BuildConfigStrategy;\n    output?: BuildConfigOutput;\n    triggers?: BuildConfigTrigger[];\n    postCommit?: BuildConfigPostCommit;\n    runPolicy?: BuildConfigRunPolicy;\n    serviceAccount?: string;\n    completionDeadlineSeconds?: number;\n    successfulBuildsHistoryLimit?: number;\n    failedBuildsHistoryLimit?: number;\n  };\n  status?: never;\n};\n","import { saveAs } from 'file-saver';\nimport i18next from 'i18next';\nimport { coFetchText } from '@console/internal/co-fetch';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  LOG_SOURCE_TERMINATED,\n  LOG_SOURCE_WAITING,\n  LineBuffer,\n} from '@console/internal/components/utils';\nimport { PodModel } from '@console/internal/models';\nimport {\n  PodKind,\n  ContainerSpec,\n  ContainerStatus,\n  resourceURL,\n  k8sGet,\n} from '@console/internal/module/k8s';\nimport { TaskRunKind } from '../../../types';\nimport { containerToLogSourceStatus } from '../../../utils/pipeline-utils';\nimport { getTaskRunLog } from '../utils/tekton-results';\n\nconst getSortedContainerStatus = (\n  containers: ContainerSpec[],\n  containerStatuses: ContainerStatus[],\n): ContainerStatus[] => {\n  const containerNames = containers.map((c) => c.name);\n  const sortedContainerStatus = [];\n  containerStatuses.forEach((cs) => {\n    const containerIndex = containerNames.indexOf(cs.name);\n    sortedContainerStatus[containerIndex] = cs;\n  });\n  return sortedContainerStatus;\n};\n\nexport const getRenderContainers = (\n  pod: PodKind,\n): { containers: ContainerSpec[]; stillFetching: boolean } => {\n  const containers: ContainerSpec[] = pod?.spec?.containers ?? [];\n  const containerStatuses: ContainerStatus[] = pod?.status?.containerStatuses ?? [];\n\n  const sortedContainerStatuses = getSortedContainerStatus(containers, containerStatuses);\n\n  const firstRunningCont = sortedContainerStatuses.findIndex(\n    (container) => containerToLogSourceStatus(container) !== LOG_SOURCE_TERMINATED,\n  );\n  return {\n    containers: containers.slice(\n      0,\n      firstRunningCont === -1 ? containers.length : firstRunningCont + 1,\n    ),\n    stillFetching: firstRunningCont !== -1,\n  };\n};\n\nconst getOrderedStepsFromPod = (name: string, ns: string): Promise<ContainerStatus[]> => {\n  return k8sGet(PodModel, name, ns)\n    .then((pod: PodKind) => {\n      return getSortedContainerStatus(\n        pod.spec.containers ?? [],\n        pod.status?.containerStatuses ?? [],\n      );\n    })\n    .catch((err) => {\n      errorModal({ error: err.message || i18next.t('pipelines-plugin~Error downloading logs.') });\n      return [];\n    });\n};\n\ntype StepsWatchUrl = {\n  [key: string]: {\n    name: string;\n    steps: { [step: string]: WatchURLStatus };\n    taskRunPath: string;\n  };\n};\n\ntype WatchURLStatus = {\n  status: string;\n  url: string;\n};\n\nexport const getDownloadAllLogsCallback = (\n  sortedTaskRunNames: string[],\n  taskRuns: TaskRunKind[],\n  namespace: string,\n  pipelineRunName: string,\n): (() => Promise<Error>) => {\n  const getWatchUrls = async (): Promise<StepsWatchUrl> => {\n    const stepsList: ContainerStatus[][] = await Promise.all(\n      sortedTaskRunNames.map((currTask) => {\n        const { status } = taskRuns.find((t) => t.metadata.name === currTask) ?? {};\n        return getOrderedStepsFromPod(status?.podName, namespace);\n      }),\n    );\n    return sortedTaskRunNames.reduce((acc, currTask, i) => {\n      const taskRun = taskRuns.find((t) => t.metadata.name === currTask);\n      const pipelineTaskName = taskRun?.spec.taskRef?.name ?? taskRun?.metadata.name;\n      const { status } = taskRun;\n      const podName = status?.podName;\n      const steps = stepsList[i];\n      const allStepUrls = steps.reduce((stepUrls, currentStep) => {\n        const { name } = currentStep;\n        const currentStatus = containerToLogSourceStatus(currentStep);\n        if (currentStatus === LOG_SOURCE_WAITING) return stepUrls;\n        const urlOpts = {\n          ns: namespace,\n          name: podName,\n          path: 'log',\n          queryParams: {\n            container: name,\n            follow: 'true',\n          },\n        };\n        return {\n          ...stepUrls,\n          [name]: {\n            status: currentStatus,\n            url: resourceURL(PodModel, urlOpts),\n          } as WatchURLStatus,\n        };\n      }, {});\n      acc[currTask] = {\n        name: pipelineTaskName,\n        steps: { ...allStepUrls },\n        taskRunPath: taskRun.metadata?.annotations?.['results.tekton.dev/record'],\n      };\n      return acc;\n    }, {});\n  };\n\n  const fetchLogs = async (tasksPromise: Promise<StepsWatchUrl>) => {\n    const tasks = await tasksPromise;\n    let allLogs = '';\n    for (const currTask of sortedTaskRunNames) {\n      const task = tasks[currTask];\n      const steps = Object.keys(task.steps);\n      allLogs += `${task.name}\\n\\n`;\n      if (steps.length > 0) {\n        for (const step of steps) {\n          const { url, status } = task.steps[step];\n          const getContentPromise = coFetchText(url).then((logs) => {\n            return `${step.toUpperCase()}\\n\\n${logs}\\n\\n`;\n          });\n          allLogs +=\n            status === LOG_SOURCE_TERMINATED\n              ? // If we are done, we want this log content\n                // eslint-disable-next-line no-await-in-loop\n                await getContentPromise\n              : // If we are not done, let's not wait indefinitely\n                // eslint-disable-next-line no-await-in-loop\n                await Promise.race([\n                  getContentPromise,\n                  new Promise<string>((resolve) => {\n                    setTimeout(() => resolve(''), 1000);\n                  }),\n                ]);\n        }\n      } else {\n        // eslint-disable-next-line no-await-in-loop\n        allLogs += await getTaskRunLog(task.taskRunPath).then(\n          (log) => `${tasks[currTask].name.toUpperCase()}\\n\\n${log}\\n\\n`,\n        );\n      }\n    }\n    const buffer = new LineBuffer(null);\n    buffer.ingest(allLogs);\n    const blob = buffer.getBlob({\n      type: 'text/plain;charset=utf-8',\n    });\n    saveAs(blob, `${pipelineRunName}.log`);\n    return null;\n  };\n  return (): Promise<Error> => {\n    return fetchLogs(getWatchUrls());\n  };\n};\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { InputField } from '@console/shared';\nimport FormSection from '../../import/section/FormSection';\n\nexport type NameSectionFormData = {\n  formData: {\n    name?: string;\n  };\n};\n\nconst NameSection: React.FC<{}> = () => {\n  const { t } = useTranslation();\n\n  const [, meta] = useField<string>('formData.name');\n  const isNew = !meta.initialValue;\n\n  return (\n    <FormSection dataTest=\"section name\">\n      <InputField\n        label={t('devconsole~Name')}\n        name=\"formData.name\"\n        type={TextInputTypes.text}\n        isDisabled={!isNew}\n        required\n      />\n    </FormSection>\n  );\n};\n\nexport default NameSection;\n","import * as React from 'react';\nimport { Button, Flex, FlexItem } from '@patternfly/react-core';\nimport { CompressIcon, DownloadIcon, ExpandIcon } from '@patternfly/react-icons/dist/js/icons';\nimport classNames from 'classnames';\nimport { saveAs } from 'file-saver';\nimport { useTranslation } from 'react-i18next';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { PodKind, WatchK8sResource } from '@console/internal/module/k8s';\nimport { useFullscreen } from '@console/shared';\nimport { TaskRunKind } from '../../../types';\nimport { MultiStreamLogs } from './MultiStreamLogs';\nimport { TektonTaskRunLog } from './TektonTaskRunLog';\n\ntype LogsWrapperComponentProps = {\n  taskName?: string;\n  downloadAllLabel?: string;\n  onDownloadAll?: () => Promise<Error>;\n  taskRun?: TaskRunKind;\n  resource?: WatchK8sResource;\n};\n\nconst LogsWrapperComponent: React.FC<LogsWrapperComponentProps> = ({\n  resource,\n  taskRun,\n  taskName,\n  onDownloadAll,\n  downloadAllLabel = 'Download all',\n  ...props\n}) => {\n  const { t } = useTranslation();\n  const resourceRef = React.useRef(null);\n  const [obj, loaded, error] = useK8sWatchResource<PodKind>(resource);\n  const [isFullscreen, fullscreenRef, fullscreenToggle] = useFullscreen<HTMLDivElement>();\n  const [downloadAllStatus, setDownloadAllStatus] = React.useState(false);\n  const currentLogGetterRef = React.useRef<() => string>();\n\n  if (loaded && !error && resource.name === obj.metadata.name) {\n    resourceRef.current = obj;\n  } else if (error) {\n    resourceRef.current = null;\n  }\n\n  const downloadLogs = () => {\n    if (!currentLogGetterRef.current) return;\n    const logString = currentLogGetterRef.current();\n    const blob = new Blob([logString], {\n      type: 'text/plain;charset=utf-8',\n    });\n    saveAs(blob, `${taskName}.log`);\n  };\n  const setLogGetter = React.useCallback((getter) => (currentLogGetterRef.current = getter), []);\n\n  const startDownloadAll = () => {\n    setDownloadAllStatus(true);\n    onDownloadAll()\n      .then(() => {\n        setDownloadAllStatus(false);\n      })\n      .catch((err: Error) => {\n        setDownloadAllStatus(false);\n        // eslint-disable-next-line no-console\n        console.warn(err.message || 'Error downloading logs.');\n      });\n  };\n\n  return (\n    <div ref={fullscreenRef} className=\"odc-multi-stream-logs\">\n      <Flex\n        className={(classNames as any)({\n          'odc-multi-stream-logs--fullscreen': isFullscreen,\n        })}\n      >\n        <FlexItem className=\"odc-multi-stream-logs__button\" align={{ default: 'alignRight' }}>\n          <Button variant=\"link\" onClick={downloadLogs} isInline>\n            <DownloadIcon className=\"odc-multi-stream-logs__icon\" />\n            {t('pipelines-plugin~Download')}\n          </Button>\n        </FlexItem>\n        <FlexItem className=\"odc-multi-stream-logs__divider\">|</FlexItem>\n        {onDownloadAll && (\n          <>\n            <FlexItem className=\"odc-multi-stream-logs__button\">\n              <Button\n                variant=\"link\"\n                onClick={startDownloadAll}\n                isDisabled={downloadAllStatus}\n                isInline\n              >\n                <DownloadIcon className=\"odc-multi-stream-logs__icon\" />\n                {downloadAllLabel || t('pipelines-plugin~Download all')}\n                {downloadAllStatus && <LoadingInline />}\n              </Button>\n            </FlexItem>\n            <FlexItem className=\"odc-multi-stream-logs__divider\">|</FlexItem>\n          </>\n        )}\n        {fullscreenToggle && (\n          <FlexItem className=\"odc-multi-stream-logs__button\">\n            <Button variant=\"link\" onClick={fullscreenToggle} isInline>\n              {isFullscreen ? (\n                <>\n                  <CompressIcon className=\"odc-multi-stream-logs__icon\" />\n                  {t('pipelines-plugin~Collapse')}\n                </>\n              ) : (\n                <>\n                  <ExpandIcon className=\"odc-multi-stream-logs__icon\" />\n                  {t('pipelines-plugin~Expand')}\n                </>\n              )}\n            </Button>\n          </FlexItem>\n        )}\n      </Flex>\n      {!error ? (\n        <MultiStreamLogs\n          {...props}\n          taskName={taskName}\n          resource={resourceRef.current}\n          setCurrentLogsGetter={setLogGetter}\n        />\n      ) : (\n        <TektonTaskRunLog taskRun={taskRun} setCurrentLogsGetter={setLogGetter} />\n      )}\n    </div>\n  );\n};\n\nexport default LogsWrapperComponent;\n","import * as React from 'react';\nimport { LoadingInline, LOG_SOURCE_WAITING } from '@console/internal/components/utils';\nimport { ContainerStatus, PodKind, ContainerSpec } from '@console/internal/module/k8s';\nimport { useScrollDirection, ScrollDirection } from '@console/shared';\nimport { containerToLogSourceStatus } from '../../../utils/pipeline-utils';\nimport Logs from './Logs';\nimport { getRenderContainers } from './logs-utils';\n\nimport './MultiStreamLogs.scss';\n\ntype MultiStreamLogsProps = {\n  resource: PodKind;\n  taskName?: string;\n  setCurrentLogsGetter?: (getter: () => string) => void;\n};\n\nexport const MultiStreamLogs: React.FC<MultiStreamLogsProps> = ({\n  resource,\n  taskName,\n  setCurrentLogsGetter,\n}) => {\n  const scrollPane = React.useRef<HTMLDivElement>();\n  const completedRef = React.useRef<boolean[]>([]);\n  const [renderToCount, setRenderToCount] = React.useState(0);\n  const [scrollDirection, handleScrollCallback] = useScrollDirection();\n  const { containers, stillFetching } = getRenderContainers(resource);\n  const dataRef = React.useRef<ContainerSpec[]>(null);\n  dataRef.current = containers;\n\n  React.useEffect(() => {\n    setCurrentLogsGetter(() => {\n      return scrollPane.current?.innerText;\n    });\n  }, [setCurrentLogsGetter]);\n\n  const handleComplete = React.useCallback((containerName) => {\n    const index = dataRef.current.findIndex(({ name }) => name === containerName);\n    completedRef.current[index] = true;\n    const newRenderTo = dataRef.current.findIndex((c, i) => completedRef.current[i] !== true);\n    if (newRenderTo === -1) {\n      setRenderToCount(dataRef.current.length);\n    } else {\n      setRenderToCount(newRenderTo);\n    }\n  }, []);\n\n  const autoScroll =\n    scrollDirection == null || scrollDirection !== ScrollDirection.scrolledToBottom;\n\n  const containerStatus: ContainerStatus[] = resource?.status?.containerStatuses ?? [];\n  return (\n    <>\n      <div className=\"odc-multi-stream-logs__taskName\" data-test-id=\"logs-taskName\">\n        {taskName}\n        {stillFetching && (\n          <span className=\"odc-multi-stream-logs__taskName__loading-indicator\">\n            <LoadingInline />\n          </span>\n        )}\n      </div>\n      <div\n        className=\"odc-multi-stream-logs__container\"\n        onScroll={handleScrollCallback}\n        data-test-id=\"logs-task-container\"\n      >\n        <div className=\"odc-multi-stream-logs__container__logs\" ref={scrollPane}>\n          {containers.map((container, idx) => {\n            const statusIndex = containerStatus.findIndex((c) => c.name === container.name);\n            const resourceStatus = containerToLogSourceStatus(containerStatus[statusIndex]);\n            return (\n              resourceStatus !== LOG_SOURCE_WAITING && (\n                <Logs\n                  key={`${taskName}-${container.name}`}\n                  resource={resource}\n                  container={container}\n                  resourceStatus={resourceStatus}\n                  onComplete={handleComplete}\n                  render={renderToCount >= idx}\n                  autoScroll={autoScroll}\n                />\n              )\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { Base64 } from 'js-base64';\nimport { throttle } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { coFetchText } from '@console/internal/co-fetch';\nimport { LOG_SOURCE_TERMINATED } from '@console/internal/components/utils';\nimport { resourceURL, modelFor, PodKind, ContainerSpec } from '@console/internal/module/k8s';\nimport { WSFactory } from '@console/internal/module/ws-factory';\nimport './Logs.scss';\n\ntype LogsProps = {\n  resource: PodKind;\n  resourceStatus: string;\n  container: ContainerSpec;\n  render: boolean;\n  autoScroll?: boolean;\n  onComplete: (containerName: string) => void;\n};\n\nconst Logs: React.FC<LogsProps> = ({\n  resource,\n  resourceStatus,\n  container,\n  onComplete,\n  render,\n  autoScroll = true,\n}) => {\n  const { t } = useTranslation();\n  const { name } = container;\n  const { kind, metadata = {} } = resource;\n  const { name: resName, namespace: resNamespace } = metadata;\n  const scrollToRef = React.useRef<HTMLDivElement>(null);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  const [error, setError] = React.useState<boolean>(false);\n  const resourceStatusRef = React.useRef<string>(resourceStatus);\n  const onCompleteRef = React.useRef<(name) => void>();\n  const blockContentRef = React.useRef<string>('');\n  onCompleteRef.current = onComplete;\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const addContentAndScroll = React.useCallback(\n    throttle(() => {\n      if (contentRef.current) {\n        contentRef.current.innerText += blockContentRef.current;\n      }\n      if (scrollToRef.current) {\n        scrollToRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n      }\n      blockContentRef.current = '';\n    }, 1000),\n    [],\n  );\n\n  const appendMessage = React.useRef<(blockContent) => void>();\n\n  appendMessage.current = React.useCallback(\n    (blockContent: string) => {\n      blockContentRef.current += blockContent;\n      if (scrollToRef.current && blockContent && render && autoScroll) {\n        addContentAndScroll();\n      }\n    },\n    [autoScroll, render, addContentAndScroll],\n  );\n\n  if (resourceStatusRef.current !== resourceStatus) {\n    resourceStatusRef.current = resourceStatus;\n  }\n\n  React.useEffect(() => {\n    let loaded: boolean = false;\n    let ws: WSFactory;\n    const urlOpts = {\n      ns: resNamespace,\n      name: resName,\n      path: 'log',\n      queryParams: {\n        container: name,\n        follow: 'true',\n      },\n    };\n    const watchURL = resourceURL(modelFor(kind), urlOpts);\n    if (resourceStatusRef.current === LOG_SOURCE_TERMINATED) {\n      coFetchText(watchURL)\n        .then((res) => {\n          if (loaded) return;\n          appendMessage.current(res);\n          onCompleteRef.current(name);\n        })\n        .catch(() => {\n          if (loaded) return;\n          setError(true);\n          onCompleteRef.current(name);\n        });\n    } else {\n      const wsOpts = {\n        host: 'auto',\n        path: watchURL,\n        subprotocols: ['base64.binary.k8s.io'],\n      };\n      ws = new WSFactory(watchURL, wsOpts);\n      ws.onmessage((msg) => {\n        if (loaded) return;\n        const message = Base64.decode(msg);\n        appendMessage.current(message);\n      })\n        .onclose(() => {\n          onCompleteRef.current(name);\n        })\n        .onerror(() => {\n          if (loaded) return;\n          setError(true);\n          onCompleteRef.current(name);\n        });\n    }\n    return () => {\n      loaded = true;\n      ws && ws.destroy();\n    };\n  }, [kind, name, resName, resNamespace]);\n\n  React.useEffect(() => {\n    if (scrollToRef.current && render && autoScroll) {\n      addContentAndScroll();\n    }\n  }, [autoScroll, render, addContentAndScroll]);\n\n  return (\n    <div className=\"odc-logs\" style={{ display: render ? '' : 'none' }}>\n      <p className=\"odc-logs__name\">{name}</p>\n      {error && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title={t('pipelines-plugin~An error occurred while retrieving the requested logs.')}\n        />\n      )}\n      <div>\n        <div className=\"odc-logs__content\" ref={contentRef} />\n        <div ref={scrollToRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default Logs;\n","import * as React from 'react';\nimport { HttpError } from '@console/dynamic-plugin-sdk/src/utils/error/http-error';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { TaskRunKind } from '../../../types';\nimport { TektonResourceLabel } from '../../pipelines/const';\nimport { useTRTaskRunLog } from '../hooks/useTektonResults';\n\nimport './Logs.scss';\nimport './MultiStreamLogs.scss';\n\ntype TektonTaskRunLogProps = {\n  taskRun?: TaskRunKind;\n  setCurrentLogsGetter: (getter: () => string) => void;\n};\n\nexport const TektonTaskRunLog: React.FC<TektonTaskRunLogProps> = ({\n  taskRun,\n  setCurrentLogsGetter,\n}) => {\n  const scrollPane = React.useRef<HTMLDivElement>();\n  const taskName = taskRun?.metadata?.labels?.[TektonResourceLabel.pipelineTask] || '-';\n  const [trResults, trLoaded, trError] = useTRTaskRunLog(\n    taskRun.metadata.namespace,\n    taskRun.metadata.name,\n    taskRun.metadata?.annotations?.['results.tekton.dev/record'],\n  );\n\n  React.useEffect(() => {\n    setCurrentLogsGetter(() => scrollPane.current?.innerText);\n  }, [setCurrentLogsGetter]);\n\n  React.useEffect(() => {\n    if (!trError && trLoaded && scrollPane.current && trResults) {\n      scrollPane.current.scrollTop = scrollPane.current.scrollHeight;\n    }\n  }, [trError, trLoaded, trResults]);\n\n  const errorMessage =\n    (trError as HttpError)?.code === 404\n      ? `Logs are no longer accessible for ${taskName} task`\n      : null;\n  return (\n    <>\n      <div className=\"odc-multi-stream-logs__taskName\" data-test-id=\"logs-taskName\">\n        {taskName}\n        {!trLoaded && (\n          <span\n            className=\"odc-multi-stream-logs__taskName__loading-indicator\"\n            data-test-id=\"loading-indicator\"\n          >\n            <LoadingInline />\n          </span>\n        )}\n      </div>\n      <div\n        className=\"odc-multi-stream-logs__container\"\n        data-test-id=\"tr-logs-task-container\"\n        ref={scrollPane}\n      >\n        <div className=\"odc-multi-stream-logs__container__logs\" data-testid=\"tr-logs-container\">\n          {errorMessage && (\n            <div className=\"odc-pipeline-run-logs__logtext\" data-testid=\"tr-logs-error-message\">\n              {errorMessage}\n            </div>\n          )}\n          {!errorMessage && trLoaded ? (\n            <div className=\"odc-logs\" data-testid=\"tr-logs-container\">\n              <p className=\"odc-logs__name\">{taskName}</p>\n              <div>\n                <div className=\"odc-logs__content\" data-testid=\"tr-logs-content\">\n                  {trResults}\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListPage } from '@console/internal/components/factory';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { BuildRun, ComputedBuildRunStatus } from '../../types';\nimport { useBuildRunModel } from '../../utils';\nimport { getBuildRunStatus } from '../buildrun-status/BuildRunStatus';\nimport { BuildRunTable } from './BuildRunTable';\n\ntype ListPageProps = React.ComponentProps<typeof ListPage>;\n\ntype BuildRunListPageProps = Omit<ListPageProps, 'title' | 'kind' | 'ListComponent' | 'rowFilters'>;\n\nconst BuildRunListPage: React.FC<BuildRunListPageProps> = (props) => {\n  const { t } = useTranslation();\n\n  const filters: RowFilter<BuildRun>[] = [\n    {\n      type: 'status',\n      filterGroupName: t('shipwright-plugin~Status'),\n      items: [\n        { id: ComputedBuildRunStatus.PENDING, title: t('shipwright-plugin~Pending') },\n        { id: ComputedBuildRunStatus.RUNNING, title: t('shipwright-plugin~Running') },\n        { id: ComputedBuildRunStatus.SUCCEEDED, title: t('shipwright-plugin~Succeeded') },\n        { id: ComputedBuildRunStatus.FAILED, title: t('shipwright-plugin~Failed') },\n        { id: ComputedBuildRunStatus.UNKNOWN, title: t('shipwright-plugin~Unknown') },\n      ],\n      reducer: getBuildRunStatus,\n      filter: (filterValue, buildRun: BuildRun): boolean => {\n        const status = getBuildRunStatus(buildRun);\n        return !filterValue.selected?.length || (status && filterValue.selected.includes(status));\n      },\n    },\n  ];\n\n  const buildRunModel = useBuildRunModel();\n\n  return (\n    <ListPage\n      title={t('shipwright-plugin~BuildRuns')}\n      kind={referenceForModel(buildRunModel)}\n      ListComponent={BuildRunTable}\n      rowFilters={filters}\n      canCreate\n      {...props}\n    />\n  );\n};\n\nexport default BuildRunListPage;\n","import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { EnvironmentField, NameValueFromPair, NameValuePair } from '@console/shared/src';\nimport FormSection from '../../import/section/FormSection';\n\nexport type EnvironmentVariablesSectionFormData = {\n  formData: {\n    environmentVariables: (NameValuePair | NameValueFromPair)[];\n  };\n};\n\nconst EnvironmentVariablesSection: React.FC<{ namespace: string }> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      formData: { environmentVariables },\n    },\n  } = useFormikContext<EnvironmentVariablesSectionFormData>();\n  return (\n    <FormSection\n      title={t('devconsole~Environment Variables')}\n      dataTest=\"section environment-variables\"\n    >\n      <EnvironmentField\n        name=\"formData.environmentVariables\"\n        envs={environmentVariables}\n        obj={{ metadata: { namespace } }}\n      />\n    </FormSection>\n  );\n};\n\nexport default EnvironmentVariablesSection;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { StatusBox } from '@console/internal/components/utils/status-box';\nimport { PodModel } from '@console/internal/models';\nimport { TaskRunKind } from '../../types';\nimport LogsWrapperComponent from '../pipelineruns/logs/LogsWrapperComponent';\nimport './TaskRunLog.scss';\n\nexport type TaskRunLogProps = {\n  obj: TaskRunKind;\n};\n\nconst TaskRunLog: React.FC<TaskRunLogProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  if (obj?.status?.podName) {\n    const podResources = {\n      kind: PodModel.kind,\n      isList: false,\n      prop: `obj`,\n      namespace: obj.metadata.namespace,\n      name: obj.status.podName,\n    };\n    return (\n      <div className=\"odc-task-run-log\">\n        <LogsWrapperComponent\n          taskRun={obj}\n          resource={podResources}\n          downloadAllLabel={t('pipelines-plugin~Download all TaskRun logs')}\n        />\n      </div>\n    );\n  }\n  return (\n    <StatusBox\n      label={t('pipelines-plugin~TaskRun log')}\n      loadError={new Error(t('pipelines-plugin~Pod not found'))}\n    />\n  );\n};\n\nexport default TaskRunLog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListPage, ListPageProps } from '@console/internal/components/factory';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { Build } from '../../types';\nimport { useBuildModel } from '../../utils';\nimport { getBuildRunStatus } from '../buildrun-status/BuildRunStatus';\nimport { BuildTable } from './BuildTable';\n\ntype BuildListPageProps = Omit<\n  ListPageProps,\n  'title' | 'badge' | 'kind' | 'ListComponent' | 'rowFilters'\n>;\n\nconst getBuildStatus = (build: Build): string => {\n  if (build.latestBuild) {\n    return getBuildRunStatus(build.latestBuild);\n  }\n  return 'Unknown';\n};\n\nconst BuildListPage: React.FC<BuildListPageProps> = (props) => {\n  const { t } = useTranslation();\n\n  const filters: RowFilter<Build>[] = [\n    {\n      type: 'status',\n      filterGroupName: t('shipwright-plugin~BuildRun status'),\n      items: [\n        { id: 'Pending', title: t('shipwright-plugin~Pending') },\n        { id: 'Running', title: t('shipwright-plugin~Running') },\n        { id: 'Succeeded', title: t('shipwright-plugin~Succeeded') },\n        { id: 'Failed', title: t('shipwright-plugin~Failed') },\n        { id: 'Unknown', title: t('shipwright-plugin~Unknown') },\n      ],\n      reducer: getBuildStatus,\n      filter: (filterValue, build: Build): boolean => {\n        const status = getBuildRunStatus(build.latestBuild);\n        return !filterValue.selected?.length || (status && filterValue.selected.includes(status));\n      },\n    },\n  ];\n\n  const buildModel = useBuildModel();\n\n  return (\n    <ListPage\n      title={t('shipwright-plugin~Builds')}\n      kind={referenceForModel(buildModel)}\n      ListComponent={BuildTable}\n      rowFilters={filters}\n      canCreate\n      createProps={{\n        to: props.namespace\n          ? `/k8s/ns/${props.namespace}/${referenceForModel(buildModel)}/~new/form`\n          : `/k8s/cluster/${referenceForModel(buildModel)}/~new`,\n      }}\n      {...props}\n    />\n  );\n};\n\nexport default BuildListPage;\n","import * as React from 'react';\nimport i18next from 'i18next';\nimport { BuildRun } from '../../types';\n\nexport const getDuration = (seconds: number, long?: boolean): string => {\n  if (seconds === 0) {\n    return i18next.t('shipwright-plugin~less than a sec');\n  }\n  let sec = Math.round(seconds);\n  let min = 0;\n  let hr = 0;\n  let duration = '';\n  if (sec >= 60) {\n    min = Math.floor(sec / 60);\n    sec %= 60;\n  }\n  if (min >= 60) {\n    hr = Math.floor(min / 60);\n    min %= 60;\n  }\n  if (hr > 0) {\n    duration += long\n      ? i18next.t('shipwright-plugin~{{count}} hour', { count: hr })\n      : i18next.t('shipwright-plugin~{{hr}}h', { hr });\n    duration += ' ';\n  }\n  if (min > 0) {\n    duration += long\n      ? i18next.t('shipwright-plugin~{{count}} minute', { count: min })\n      : i18next.t('shipwright-plugin~{{min}}m', { min });\n    duration += ' ';\n  }\n  if (sec > 0) {\n    duration += long\n      ? i18next.t('shipwright-plugin~{{count}} second', { count: sec })\n      : i18next.t('shipwright-plugin~{{sec}}s', { sec });\n  }\n\n  return duration.trim();\n};\n\nexport const getBuildRunDurationInSeconds = (buildRun: BuildRun): number | null => {\n  const startTime = buildRun?.status?.startTime;\n  const completionTime = buildRun?.status?.completionTime;\n  if (!startTime) {\n    return null;\n  }\n  const start = new Date(startTime).getTime();\n  const end = completionTime ? new Date(completionTime).getTime() : new Date().getTime();\n  return (end - start) / 1000;\n};\n\nexport const getBuildRunDuration = (buildRun: BuildRun): string => {\n  const seconds = getBuildRunDurationInSeconds(buildRun);\n  if (!seconds) {\n    return '-';\n  }\n  return getDuration(seconds, true);\n};\n\nconst BuildRunDuration: React.FC<{ buildRun: BuildRun }> = ({ buildRun }) => {\n  return <>{getBuildRunDuration(buildRun)}</>;\n};\n\nexport default BuildRunDuration;\n","import * as React from 'react';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { ExternalLinkWithCopy, ResourceLink } from '@console/internal/components/utils';\nimport { ImageStreamModel } from '@console/internal/models';\nimport { BUILD_OUTPUT_IMAGESTREAM_URL, BUILD_OUTPUT_QUAY_URL } from '../../const';\nimport { BuildSpec } from '../../types';\n\ntype BuildOutputProps = {\n  buildSpec: BuildSpec;\n};\n\nconst BuildOutput: React.FC<BuildOutputProps> = ({ buildSpec }) => {\n  const outputImage = buildSpec?.output?.image;\n\n  if (outputImage?.startsWith(BUILD_OUTPUT_IMAGESTREAM_URL)) {\n    let imageStreamName = outputImage?.split('/')?.pop();\n    if (imageStreamName?.includes(':')) {\n      imageStreamName = imageStreamName?.split(':')[0];\n    }\n    const imageStreamNamespace = outputImage?.split('/')[1];\n    return (\n      <ResourceLink\n        name={imageStreamName}\n        namespace={imageStreamNamespace}\n        groupVersionKind={getGroupVersionKindForModel(ImageStreamModel)}\n      />\n    );\n  }\n  if (outputImage?.startsWith(BUILD_OUTPUT_QUAY_URL)) {\n    const outputImageName = outputImage?.split('/')?.slice(1)?.join('/');\n    return <ExternalLinkWithCopy link={`https://${outputImage}`} text={outputImageName} />;\n  }\n  return <>{outputImage}</>;\n};\n\nexport default BuildOutput;\n","import * as React from 'react';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { Page, navFactory } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport {\n  ActionMenu,\n  ActionMenuVariant,\n  ActionServiceProvider,\n} from '@console/shared/src/components/actions';\nimport { useShipwrightBreadcrumbsFor } from '../../utils';\nimport BuildDetailsTab from './BuildDetailsTab';\nimport BuildEventsTab from './BuildEventsTab';\nimport BuildRunsTab from './BuildRunsTab';\n\nconst BuildDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const customActionMenu = (_, build) => {\n    const kindReference = referenceFor(build);\n    const context = { [kindReference]: build };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  const pages: Page[] = [\n    navFactory.details(BuildDetailsTab),\n    navFactory.editYaml(),\n    {\n      href: 'buildruns',\n      // t('shipwright-plugin~BuildRuns')\n      nameKey: 'shipwright-plugin~BuildRuns',\n      component: BuildRunsTab,\n    },\n    navFactory.events(BuildEventsTab),\n  ];\n\n  return (\n    <DetailsPage\n      {...props}\n      customActionMenu={customActionMenu}\n      pages={pages}\n      breadcrumbsFor={useShipwrightBreadcrumbsFor}\n    />\n  );\n};\n\nexport default BuildDetailsPage;\n","import * as React from 'react';\nimport { ClipboardCopy, ClipboardCopyVariant } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/utils/k8s/k8s-ref';\nimport { ResourceLink, DetailsItem, ExternalLink } from '@console/internal/components/utils';\nimport { SecretModel } from '@console/internal/models';\nimport {\n  ClusterBuildStrategyModel,\n  BuildStrategyModel,\n  ClusterBuildStrategyModelV1Alpha1,\n  BuildStrategyModelV1Alpha1,\n} from '../../models';\nimport { Build, BuildRun, BuildSpec } from '../../types';\nimport { isV1Alpha1Resource } from '../../utils';\nimport BuildOutput from '../build-list/BuildOutput';\n\ntype BuildSpecSectionProps = {\n  obj: Build | BuildRun;\n  buildSpec: BuildSpec;\n  path: string;\n};\n\nconst BuildSpecSection: React.FC<BuildSpecSectionProps> = ({ obj, buildSpec, path }) => {\n  const { t } = useTranslation();\n\n  if (!buildSpec) {\n    return null;\n  }\n\n  const namespace = obj?.metadata?.namespace;\n\n  const url = isV1Alpha1Resource(obj) ? buildSpec.source?.url : buildSpec.source?.git?.url;\n  const contextDir = buildSpec.source?.contextDir;\n  const credentials = isV1Alpha1Resource(obj)\n    ? buildSpec.source?.credentials?.name\n    : buildSpec.source?.git?.cloneSecret;\n  const outputCredentials = isV1Alpha1Resource(obj)\n    ? buildSpec.output?.credentials?.name\n    : buildSpec.output?.pushSecret;\n  const dockerFile = isV1Alpha1Resource(obj)\n    ? buildSpec?.dockerfile\n    : buildSpec?.paramValues?.find((param) => param?.name === 'dockerfile')?.value;\n  const builderImage = isV1Alpha1Resource(obj)\n    ? buildSpec?.builder?.image\n    : buildSpec?.paramValues?.find((param) => param?.name === 'builder-image')?.value;\n\n  return (\n    <dl>\n      {buildSpec.strategy ? (\n        <DetailsItem label={t('shipwright-plugin~Strategy')} obj={obj} path={`${path}.strategy`}>\n          {buildSpec.strategy.kind === 'ClusterBuildStrategy' ? (\n            <ResourceLink\n              groupVersionKind={getGroupVersionKindForModel(\n                isV1Alpha1Resource(obj)\n                  ? ClusterBuildStrategyModelV1Alpha1\n                  : ClusterBuildStrategyModel,\n              )}\n              name={buildSpec.strategy.name}\n            />\n          ) : (\n            <ResourceLink\n              groupVersionKind={getGroupVersionKindForModel(\n                isV1Alpha1Resource(obj) ? BuildStrategyModelV1Alpha1 : BuildStrategyModel,\n              )}\n              namespace={namespace}\n              name={buildSpec.strategy.name}\n            />\n          )}\n        </DetailsItem>\n      ) : null}\n\n      {url ? (\n        <DetailsItem\n          label={t('shipwright-plugin~Source URL')}\n          obj={obj}\n          path={isV1Alpha1Resource(obj) ? `${path}.source.url` : `${path}.source.git.url`}\n        >\n          <ClipboardCopy variant={ClipboardCopyVariant.inlineCompact}>\n            <ExternalLink href={url} text={url} />\n          </ClipboardCopy>\n        </DetailsItem>\n      ) : null}\n\n      {contextDir ? (\n        <DetailsItem\n          label={t('shipwright-plugin~Context dir')}\n          obj={obj}\n          path={`${path}.source.contextDir`}\n        >\n          <ClipboardCopy variant={ClipboardCopyVariant.inlineCompact}>{contextDir}</ClipboardCopy>\n        </DetailsItem>\n      ) : null}\n\n      {credentials ? (\n        <DetailsItem\n          label={t('shipwright-plugin~Source credentials')}\n          obj={obj}\n          path={\n            isV1Alpha1Resource(obj)\n              ? `${path}.source.credentials.name`\n              : `${path}.source.git.cloneSecret`\n          }\n        >\n          <ResourceLink\n            groupVersionKind={getGroupVersionKindForModel(SecretModel)}\n            namespace={obj.metadata.namespace}\n            name={credentials}\n          />\n        </DetailsItem>\n      ) : null}\n\n      {isV1Alpha1Resource(obj) && buildSpec?.sources?.length ? (\n        <DetailsItem label={t('shipwright-plugin~Sources')} obj={obj} path={`${path}.sources`}>\n          {buildSpec.sources?.map((source) => (\n            <React.Fragment key={source.name}>\n              {source.name}:<br />\n              <ClipboardCopy variant={ClipboardCopyVariant.inlineCompact}>\n                <ExternalLink href={source.url} text={source.url} />\n              </ClipboardCopy>\n              <br />\n            </React.Fragment>\n          ))}\n        </DetailsItem>\n      ) : null}\n\n      {dockerFile ? (\n        <DetailsItem\n          label={t('shipwright-plugin~Dockerfile')}\n          obj={obj}\n          path={\n            isV1Alpha1Resource(obj)\n              ? `${path}.dockerfile`\n              : `${path}.paramValues['dockerfile'].value`\n          }\n        >\n          <ClipboardCopy variant={ClipboardCopyVariant.inlineCompact}>{dockerFile}</ClipboardCopy>\n        </DetailsItem>\n      ) : null}\n\n      {builderImage ? (\n        <DetailsItem\n          label={t('shipwright-plugin~Builder image')}\n          obj={obj}\n          path={\n            isV1Alpha1Resource(obj)\n              ? `${path}.builder.image`\n              : `${path}.paramValues['builder-image'].value`\n          }\n        >\n          <ClipboardCopy variant={ClipboardCopyVariant.inlineCompact}>{builderImage}</ClipboardCopy>\n        </DetailsItem>\n      ) : null}\n\n      {buildSpec.output?.image ? (\n        <DetailsItem\n          label={t('shipwright-plugin~Output image')}\n          obj={obj}\n          path={`${path}.output.image`}\n        >\n          <BuildOutput buildSpec={buildSpec} />\n        </DetailsItem>\n      ) : null}\n\n      {outputCredentials ? (\n        <DetailsItem\n          label={t('shipwright-plugin~Output credentials')}\n          obj={obj}\n          path={\n            isV1Alpha1Resource(obj)\n              ? `${path}.output.credentials.name`\n              : `${path}.output.pushSecret`\n          }\n        >\n          <ResourceLink\n            groupVersionKind={getGroupVersionKindForModel(SecretModel)}\n            namespace={obj.metadata.namespace}\n            name={outputCredentials}\n          />\n        </DetailsItem>\n      ) : null}\n    </dl>\n  );\n};\n\nexport default BuildSpecSection;\n","import * as React from 'react';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { Page, navFactory } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport {\n  ActionMenu,\n  ActionMenuVariant,\n  ActionServiceProvider,\n} from '@console/shared/src/components/actions';\nimport { useShipwrightBreadcrumbsFor } from '../../utils';\nimport { getBuildRunStatus } from '../buildrun-status/BuildRunStatus';\nimport BuildRunDetailsTab from './BuildRunDetailsTab';\nimport BuildRunEventsTab from './BuildRunEventsTab';\nimport BuildRunLogsTab from './BuildRunLogsTab';\n\nconst BuildRunDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const customActionMenu = (_, buildRun) => {\n    const kindReference = referenceFor(buildRun);\n    const context = { [kindReference]: buildRun };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  const pages: Page[] = [\n    navFactory.details(BuildRunDetailsTab),\n    navFactory.editYaml(),\n    navFactory.logs(BuildRunLogsTab),\n    navFactory.events(BuildRunEventsTab),\n  ];\n\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={getBuildRunStatus}\n      customActionMenu={customActionMenu}\n      pages={pages}\n      breadcrumbsFor={useShipwrightBreadcrumbsFor}\n    />\n  );\n};\n\nexport default BuildRunDetailsPage;\n","import * as React from 'react';\nimport { DetailsForKind } from '@console/internal/components/default-resource';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { Page, navFactory } from '@console/internal/components/utils';\nimport { useShipwrightBreadcrumbsFor } from '../../utils';\n\nconst BuildStrategyPage: React.FC<DetailsPageProps> = (props) => {\n  const pages: Page[] = [navFactory.details(DetailsForKind), navFactory.editYaml()];\n\n  return <DetailsPage {...props} pages={pages} breadcrumbsFor={useShipwrightBreadcrumbsFor} />;\n};\n\nexport default BuildStrategyPage;\n","import * as React from 'react';\nimport { DetailsForKind } from '@console/internal/components/default-resource';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { Page, navFactory } from '@console/internal/components/utils';\nimport { useShipwrightBreadcrumbsFor } from '../../utils';\n\nconst ClusterBuildStrategyPage: React.FC<DetailsPageProps> = (props) => {\n  const pages: Page[] = [navFactory.details(DetailsForKind), navFactory.editYaml()];\n\n  return <DetailsPage {...props} pages={pages} breadcrumbsFor={useShipwrightBreadcrumbsFor} />;\n};\n\nexport default ClusterBuildStrategyPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom-v5-compat';\nimport { K8sModel } from '@console/dynamic-plugin-sdk/src/api/common-types';\nimport { DefaultPage } from '@console/internal/components/default-resource';\nimport { Page } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { MenuAction, MenuActions, MultiTabListPage } from '@console/shared';\nimport {\n  useBuildModel,\n  useBuildRunModel,\n  useBuildStrategyModel,\n  useClusterBuildStrategyModel,\n} from '../../utils';\nimport BuildListPage from '../build-list/BuildListPage';\nimport BuildRunListPage from '../buildrun-list/BuildRunListPage';\n\nconst commonPageProps = {\n  showTitle: false,\n  canCreate: false,\n  hideBadge: true,\n};\n\nconst buildListTab = (model: K8sModel): Page => {\n  return {\n    href: 'builds',\n    component: BuildListPage,\n    nameKey: 'shipwright-plugin~Builds',\n    pageData: {\n      ...commonPageProps,\n      kind: referenceForModel(model),\n    },\n  };\n};\n\nconst buildRunListTab = (model: K8sModel): Page => {\n  return {\n    href: 'buildruns',\n    component: BuildRunListPage,\n    nameKey: 'shipwright-plugin~BuildRuns',\n    pageData: {\n      ...commonPageProps,\n      kind: referenceForModel(model),\n    },\n  };\n};\n\nconst buildStrategyTab = (model: K8sModel): Page => {\n  return {\n    href: 'buildstrategies',\n    component: DefaultPage,\n    nameKey: 'shipwright-plugin~BuildStrategies',\n    pageData: {\n      ...commonPageProps,\n      kind: referenceForModel(model),\n    },\n  };\n};\n\nconst clusterBuildStrategyTab = (model: K8sModel): Page => {\n  return {\n    href: 'clusterbuildstrategies',\n    component: DefaultPage,\n    nameKey: 'shipwright-plugin~ClusterBuildStrategies',\n    pageData: {\n      ...commonPageProps,\n      kind: referenceForModel(model),\n    },\n  };\n};\n\nconst ShipwrightTabListPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { '*': currentTab } = useParams();\n  const navigate = useNavigate();\n\n  const buildModel = useBuildModel();\n  const buildRunModel = useBuildRunModel();\n  const buildStrategyModel = useBuildStrategyModel();\n  const clusterBuildStrategyModel = useClusterBuildStrategyModel();\n\n  /* Use feature flags to determine which pages to show */\n  const pages: Page[] = [];\n  const menuActions: MenuActions = {};\n\n  if (buildModel) {\n    pages.push(buildListTab(buildModel));\n    menuActions.build = {\n      model: buildModel,\n      label: t('shipwright-plugin~Build'),\n      onSelection: (_key: string, _action: MenuAction, url: string) => `${url}/form`,\n    };\n  }\n\n  if (buildRunModel) {\n    pages.push(buildRunListTab(buildRunModel));\n    menuActions.buildRun = {\n      model: buildRunModel,\n      label: t('shipwright-plugin~BuildRun'),\n    };\n  }\n\n  if (buildStrategyModel) {\n    pages.push(buildStrategyTab(buildStrategyModel));\n    menuActions.buildStrategy = {\n      model: buildStrategyModel,\n      label: t('shipwright-plugin~BuildStrategy'),\n    };\n  }\n\n  if (clusterBuildStrategyModel) {\n    pages.push(clusterBuildStrategyTab(clusterBuildStrategyModel));\n    menuActions.clusterBuildStrategy = {\n      model: clusterBuildStrategyModel,\n      label: t('shipwright-plugin~ClusterBuildStrategy'),\n    };\n  }\n\n  /* Do not show empty page when no tab is selected */\n  React.useEffect(() => {\n    if (currentTab !== '') {\n      return;\n    }\n\n    if (buildModel) {\n      navigate('builds');\n    } else if (buildRunModel) {\n      navigate('buildruns');\n    } else if (buildStrategyModel) {\n      navigate('buildstrategies');\n    } else if (clusterBuildStrategyModel) {\n      navigate('clusterbuildstrategies');\n    }\n  }, [\n    currentTab,\n    navigate,\n    buildModel,\n    buildRunModel,\n    buildStrategyModel,\n    clusterBuildStrategyModel,\n  ]);\n\n  return (\n    <MultiTabListPage\n      title={t('shipwright-plugin~Shipwright')}\n      pages={pages}\n      menuActions={menuActions}\n      telemetryPrefix=\"Shipwright\"\n    />\n  );\n};\n\nexport default ShipwrightTabListPage;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { StatusBox } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { BuildModel } from '../../models';\nimport { Build } from '../../types';\nimport EditBuild from './EditBuild';\n\nconst BuildFormPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { ns: namespace, name } = useParams();\n\n  const isNew = !name;\n\n  const [watchedBuild, loaded, loadError] = useK8sWatchResource<Build>(\n    isNew\n      ? null\n      : {\n          groupVersionKind: {\n            group: BuildModel.apiGroup,\n            kind: BuildModel.kind,\n            version: BuildModel.apiVersion,\n          },\n          name,\n          namespace,\n        },\n  );\n  const build: Build = isNew\n    ? {\n        apiVersion: 'shipwright.io/v1beta1',\n        kind: 'Build',\n        metadata: {\n          namespace,\n        },\n        spec: {\n          output: {\n            image: '',\n          },\n          source: {\n            git: {\n              url: '',\n              revision: '',\n            },\n            contextDir: '',\n          },\n          strategy: {\n            name: '',\n          },\n        },\n      }\n    : watchedBuild;\n\n  const title = isNew\n    ? t('shipwright-plugin~Create Shipwright Build')\n    : t('shipwright-plugin~Edit Shipwright Build');\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <StatusBox loaded={loaded} loadError={loadError} label={title} data={build}>\n        <EditBuild heading={title} namespace={namespace} name={name} build={build} />\n      </StatusBox>\n    </>\n  );\n};\n\nexport default BuildFormPage;\n","import { IBuild } from '@kubernetes-models/shipwright/shipwright.io/v1beta1/Build';\nimport * as _ from 'lodash';\nimport { safeJSToYAML, safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { Build, BuildRun } from '../../types';\nimport { getInitialBuildFormikValues } from './initial-data';\nimport { BuildFormikValues } from './types';\n\n// utils to convert yaml to formData\nconst convertBuildNameToFormData = (build: Build, values: BuildFormikValues) => {\n  values.formData.name = build.metadata.name || '';\n};\n\nconst convertBuildSourceToFormData = (\n  build: IBuild & { latestBuild?: BuildRun },\n  values: BuildFormikValues,\n) => {\n  values.formData.source.git.project.name = build.metadata.namespace;\n  values.formData.source.type = 'Git';\n  values.formData.source.git.git.url = build.spec.source?.git?.url || '';\n  values.formData.source.git.git.ref = build.spec.source?.git?.revision || '';\n  values.formData.source.git.git.dir = build.spec.source?.contextDir || '';\n  values.formData.source.git.git.secret = build.spec.source?.git?.cloneSecret || '';\n};\n\nconst convertBuildStrategyToFormData = (build: Build, values: BuildFormikValues) => {\n  values.formData.build.strategy = build.spec.strategy.name;\n  values.formData.build.kind = build.spec.strategy.kind;\n};\n\nconst convertBuildParamsToFormData = (build: Build, values) => {\n  const params = build.spec?.paramValues?.map((paramValue) => {\n    return {\n      name: paramValue.name,\n      ...(paramValue.value\n        ? { value: paramValue.value }\n        : { value: paramValue?.values?.map((val) => val.value) }),\n      ...(paramValue.value ? { default: paramValue.value } : {}),\n      type: paramValue.values ? 'array' : 'string',\n    };\n  });\n  values.formData.parameters = params || [];\n};\n\nconst convertBuildOutputToFormData = (\n  build: IBuild & { latestBuild?: BuildRun },\n  values: BuildFormikValues,\n) => {\n  values.formData.outputImage.image = build.spec.output.image;\n  if (build.spec.output.pushSecret) {\n    values.formData.outputImage.secret = build.spec.output.pushSecret;\n  } else {\n    values.formData.outputImage.secret = '';\n  }\n};\n\nconst convertBuildVolumesToFormData = (build, values) => {\n  const volumes = (build.spec?.volumes || []).map((volume) => {\n    const keys = Object.keys(volume);\n    const volumeKey = _.without(keys, 'name', 'overridable', 'description');\n    return {\n      name: volume.name,\n      resourceType: volumeKey[0],\n      resource: volumeKey[0] === 'emptyDir' ? volume[volumeKey[0]] : volume[volumeKey[0]].name,\n      overridable: true,\n      description: volume.description,\n    };\n  });\n  values.formData.volumes = volumes;\n};\n\nconst convertBuildEnvsToFormData = (build: IBuild & { latestBuild?: BuildRun }, values) => {\n  values.formData.environmentVariables = build.spec.env || [];\n};\n\nexport const convertBuildToFormData = (\n  build: Build,\n  originValues = getInitialBuildFormikValues(),\n): any => {\n  const values: BuildFormikValues = _.cloneDeep(originValues);\n\n  const safeBuild: Build = {\n    apiVersion: 'shipwright.io/v1beta1',\n    kind: 'Build',\n    metadata: build?.metadata && typeof build.metadata === 'object' ? build.metadata : {},\n    spec:\n      build?.spec && typeof build.spec === 'object'\n        ? build.spec\n        : {\n            output: {\n              image: '',\n            },\n            source: {},\n            strategy: {\n              name: '',\n              kind: '',\n            },\n          },\n  };\n  convertBuildNameToFormData(safeBuild, values);\n  convertBuildSourceToFormData(safeBuild, values);\n  convertBuildStrategyToFormData(safeBuild, values);\n  convertBuildParamsToFormData(safeBuild, values);\n  convertBuildOutputToFormData(safeBuild, values);\n  convertBuildVolumesToFormData(safeBuild, values);\n  convertBuildEnvsToFormData(safeBuild, values);\n\n  return values;\n};\n\n// utils to convert formData to yaml\nconst convertFormDataNameToBuild = (values: BuildFormikValues, build: Build) => {\n  build.metadata.name = values.formData.name;\n};\n\nconst convertFormDataSourceToBuild = (values: BuildFormikValues, build: Build) => {\n  const { git } = values.formData.source.git;\n  build.spec.source = {\n    ...build.spec.source,\n    type: 'Git',\n    contextDir: git.dir,\n    git: {\n      url: git.url,\n      ...(git.ref ? { revision: git.ref } : {}),\n      ...(git.secret ? { cloneSecret: git.secret } : {}),\n    },\n  };\n};\n\nconst convertFormDataStrategyToBuild = (values: BuildFormikValues, build: Build) => {\n  const buildStrategy = values.formData.build;\n  build.spec.strategy = {\n    ...build.spec.strategy,\n    name: buildStrategy.strategy,\n    kind: buildStrategy?.kind,\n  };\n};\n\nconst convertFormDataOutputToBuild = (values: BuildFormikValues, build: Build) => {\n  const { outputImage } = values.formData;\n  build.spec.output = {\n    ...build.spec.output,\n    image: outputImage.image,\n    ...(outputImage.secret ? { pushSecret: outputImage.secret } : {}),\n  };\n};\n\nconst convertFromDataVolumesToBuild = (values: BuildFormikValues, build: Build) => {\n  const { volumes } = values.formData;\n  const buildVolumes = volumes.map((volume) => {\n    return (\n      volume.overridable && {\n        name: volume.name,\n        ...(volume.resourceType === 'emptyDir'\n          ? {\n              [volume.resourceType]: {},\n            }\n          : {\n              [volume.resourceType]: {\n                name: volume.resource,\n              },\n            }),\n      }\n    );\n  });\n  build.spec.volumes = buildVolumes;\n};\n\nconst convertFormDataParamsToBuild = (values, build: Build) => {\n  const { parameters } = values.formData;\n  const paramValues = parameters?.map((param) => {\n    return {\n      name: param.name,\n      ...(param.type === 'string'\n        ? { value: param.value }\n        : {\n            values:\n              param.value.length > 0\n                ? param.value?.map((val) => ({\n                    value: val,\n                  }))\n                : [],\n          }),\n    };\n  });\n\n  build.spec.paramValues = paramValues || [];\n};\n\nconst convertFormDataEnvsToBuild = (values: BuildFormikValues, build: Build) => {\n  const { environmentVariables } = values.formData;\n  build.spec.env = environmentVariables;\n};\n\nexport const convertFormDataToBuild = (originalBuild: Build, values: BuildFormikValues): Build => {\n  let build = _.cloneDeep(originalBuild);\n  if (!build || typeof build !== 'object') {\n    build = {\n      apiVersion: 'shipwright.io/v1beta1',\n      kind: 'Build',\n      metadata: {},\n      spec: {\n        output: {\n          image: '',\n        },\n        source: {},\n        strategy: {\n          name: '',\n          kind: '',\n        },\n      },\n    };\n  }\n\n  if (!build.apiVersion) build.apiVersion = 'shipwright.io/v1beta1';\n  if (!build.kind) build.kind = 'Build';\n  if (!build.metadata || typeof build.metadata !== 'object') build.metadata = {};\n  if (!build.spec || typeof build.spec !== 'object') {\n    build.spec = {\n      output: {\n        image: '',\n      },\n      source: {},\n      strategy: {\n        name: '',\n        kind: '',\n      },\n    };\n  }\n\n  // Convert all sections\n  convertFormDataNameToBuild(values, build);\n  convertFormDataSourceToBuild(values, build);\n  convertFormDataStrategyToBuild(values, build);\n  convertFormDataOutputToBuild(values, build);\n  convertFromDataVolumesToBuild(values, build);\n  convertFormDataParamsToBuild(values, build);\n  convertFormDataEnvsToBuild(values, build);\n\n  return build;\n};\n\nexport const convertBuildFormDataToYAML = (values): string => {\n  const parsedBuild = safeYAMLToJS(values.yamlData);\n  const updatedBuild = convertFormDataToBuild(parsedBuild, values);\n  return safeJSToYAML(updatedBuild, '', { skipInvalid: true });\n};\n"],"sourceRoot":""}