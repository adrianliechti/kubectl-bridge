{"version":3,"sources":["webpack:///./packages/knative-plugin/src/components/sink-source/SinkSource.tsx","webpack:///./packages/knative-plugin/src/components/sink-source/SinkSourceModal.tsx","webpack:///./packages/knative-plugin/src/components/sink-source/SinkSourceController.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/import-types.ts","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts","webpack:///./packages/dev-console/src/components/import/serverless/serverless-utils.ts","webpack:///./packages/knative-plugin/src/components/add/import-types.ts","webpack:///./packages/knative-plugin/src/components/pub-sub/pub-sub-utils.ts","webpack:///./packages/knative-plugin/src/components/add/eventSource-validation-utils.ts","webpack:///./packages/knative-plugin/src/components/add/event-sources/form-fields/SinkUriResourcesGroup.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/form-fields/SinkResources.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/form-fields/SinkUri.tsx"],"names":["source","cancel","close","t","metadata","namespace","name","spec","isSinkRef","sink","ref","sinkName","apiVersion","kind","uri","initialValues","formData","sinkType","Uri","Resource","key","onSubmit","values","action","updatePayload","then","setStatus","error","catch","err","errMessage","message","onReset","initialStatus","validationSchema","shape","when","is","formikProps","resourceName","handleSubmit","isSubmitting","status","errors","dirty","className","ns","i18nKey","fullWidth","isMoveSink","inProgress","submitText","submitDisabled","cancelText","errorMessage","SinkSourceController","props","sinkModalLauncher","flexStyle","display","flex","flexDirection","margin","title","subTitle","children","flexLayout","extraMargin","dataTest","style","PipelineType","hostnameRegex","pathRegex","gitUrlRegex","projectNameValidationSchema","matches","required","applicationNameValidationSchema","selectedKey","max","deploymentValidationSchema","replicas","transform","cv","undefined","test","min","Number","MAX_SAFE_INTEGER","maxSafeInteger","value","resourcesValidationSchema","oneOf","OpenShift","Kubernetes","KnativeService","serverlessValidationSchema","scaling","minpods","maxpods","limit","this","parent","concurrencytarget","concurrencylimit","concurrencyutilization","autoscale","autoscalewindow","autoscalewindowUnit","unit","convertToSec","domainMapping","of","excludeEmptyString","domainName","split","length","routeValidationSchema","secure","tls","termination","hostname","path","unknownTargetPort","typeError","integer","limitsValidationSchema","cpu","request","requestUnit","limitUnit","ensure","memory","imageValidationSchema","build","strategy","selected","tag","gitValidationSchema","url","type","showGitType","dockerValidationSchema","containerPort","dockerfilePath","devfileValidationSchema","devfilePath","devfileContent","devfileHasError","devfileSuggestedResources","buildValidationSchema","isiValidationSchema","image","importFlowPipelineTemplateValidationSchema","isPipelineEnabled","buildOption","pipelineType","PIPELINES","PAC","templateSelected","isInteger","bitBucketUserNameRegex","getAutoscaleWindow","autoscaleValue","val","match","defaultAutoscalewindowUnit","DOMAIN_MAPPING_KSVC_INFO_REGEX","removeKsvcInfoFromDomainMapping","dm","replace","getOtherKsvcFromDomainMapping","currentKsvcName","removeDuplicateDomainMappings","allDomainMappings","connectedDomainMappings","Set","filter","includes","map","n","hasOtherKsvcDomainMappings","some","RegExp","getAllOtherDomainMappingInUse","domainMappings","data","serviceName","d","selectedDomain","find","EventSources","ApiServerSource","ContainerSource","KafkaSource","PingSource","SinkBinding","KameletBinding","defaultChannels","InMemoryChannel","KafkaChannel","SinkType","sourceSinkType","label","getSinkableResourceOrder","getResourceApiGroup","craftResourceKey","resource","join","getResourceNameFromKey","pop","sanitizeResourceName","finalValues","subscriber","sinkTypeUriValidation","sinkServiceSchema","sourceDataSpecSchema","schedule","subject","selector","matchLabels","obj","resources","bootstrapServers","consumerGroup","topics","net","sasl","enable","user","secretKeyRef","password","caCert","cert","template","containers","eventSourceValidationSchema","editorType","Form","project","application","yamlData","addChannelValidationSchema","options","activeChildren","resourceAlert","setResourceAlert","setFieldValue","setFieldTouched","validateForm","touched","sinkTypeTouched","fieldId","onChange","_selectedValue","valueObj","modelData","model","apiGroup","contextAvailable","resourcesData","isRequired","variant","isInline","menuClassName","dataSelector","placeholder","showBadge","disabled","autocompleteFilter","strText","item","autoSelect","customResourceKey","resourceFilter","ownerReferences","onLoad","resourceList","text"],"mappings":"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","file":"sink-source-chunk-58d5b8b162e44d807e0d.min.js","sourcesContent":["import * as React from 'react';\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { K8sResourceKind, k8sUpdate, referenceFor, modelFor } from '@console/internal/module/k8s';\nimport { sinkTypeUriValidation } from '../add/eventSource-validation-utils';\nimport { SinkType } from '../add/import-types';\nimport { craftResourceKey } from '../pub-sub/pub-sub-utils';\nimport SinkSourceModal from './SinkSourceModal';\n\nexport interface SinkSourceProps {\n  source: K8sResourceKind;\n  cancel?: () => void;\n  close?: () => void;\n}\n\nconst SinkSource: React.FC<SinkSourceProps> = ({ source, cancel, close }) => {\n  const { t } = useTranslation();\n  const {\n    metadata: { namespace, name },\n    spec,\n  } = source;\n  const isSinkRef = !!spec?.sink?.ref;\n  const { name: sinkName = '', apiVersion = '', kind = '', uri = '' } = isSinkRef\n    ? spec?.sink?.ref\n    : spec?.sink || {};\n  const initialValues = {\n    formData: {\n      sinkType: uri ? SinkType.Uri : SinkType.Resource,\n      sink: {\n        apiVersion,\n        kind,\n        name: sinkName,\n        key: craftResourceKey(sinkName, { kind, apiVersion }),\n        uri,\n      },\n    },\n  };\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    const {\n      formData: { sinkType, sink },\n    } = values;\n    const updatePayload = {\n      ...source,\n      ...(SinkType.Uri !== sinkType\n        ? {\n            spec: {\n              ...source.spec,\n              sink: {\n                ref: {\n                  apiVersion: sink?.apiVersion,\n                  kind: sink?.kind,\n                  name: sink?.name,\n                },\n              },\n            },\n          }\n        : { spec: { ...source.spec, sink: { uri: sink?.uri } } }),\n    };\n    return k8sUpdate(modelFor(referenceFor(source)), updatePayload)\n      .then(() => {\n        action.setStatus({ error: '' });\n        close();\n      })\n      .catch((err) => {\n        const errMessage = err.message || t('knative-plugin~An error occurred. Please try again');\n        action.setStatus({ error: errMessage });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n      validationSchema={() =>\n        yup.object().shape({\n          formData: yup.object().shape({\n            sink: yup.object().when('sinkType', {\n              is: SinkType.Uri,\n              then: sinkTypeUriValidation(t),\n            }),\n          }),\n        })\n      }\n    >\n      {(formikProps) => (\n        <SinkSourceModal\n          {...formikProps}\n          resourceName={name}\n          namespace={namespace}\n          cancel={cancel}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default SinkSource;\n","import * as React from 'react';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport SinkUriResourcesGroup from '../add/event-sources/form-fields/SinkUriResourcesGroup';\n\nexport interface SinkSourceModalProps {\n  resourceName: string;\n  namespace: string;\n  cancel?: () => void;\n}\n\ntype Props = FormikProps<FormikValues> & SinkSourceModalProps;\n\nconst SinkSourceModal: React.FC<Props> = ({\n  resourceName,\n  namespace,\n  handleSubmit,\n  cancel,\n  isSubmitting,\n  status,\n  errors,\n  values,\n  initialValues,\n}) => {\n  const { t } = useTranslation();\n  const dirty =\n    values?.formData?.sink?.key !== initialValues.formData.sink.key ||\n    values?.formData?.sink?.uri !== initialValues.formData.sink.uri;\n\n  return (\n    <form className=\"modal-content\" onSubmit={handleSubmit}>\n      <ModalTitle>{t('knative-plugin~Move sink')}</ModalTitle>\n      <ModalBody>\n        <p>\n          <Trans t={t} ns=\"knative-plugin\" i18nKey=\"Connects <strong>{{resourceName}}</strong> to\">\n            Connects <strong>{{ resourceName }}</strong> to\n          </Trans>\n        </p>\n        <FormSection fullWidth>\n          <SinkUriResourcesGroup namespace={namespace} isMoveSink />\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitting}\n        submitText={t('knative-plugin~Save')}\n        submitDisabled={!dirty || !_.isEmpty(errors)}\n        cancelText={t('knative-plugin~Cancel')}\n        cancel={cancel}\n        errorMessage={status.error}\n      />\n    </form>\n  );\n};\n\nexport default SinkSourceModal;\n","import * as React from 'react';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport SinkSource from './SinkSource';\n\ntype SinkSourceControllerProps = {\n  source: K8sResourceKind;\n};\n\nconst SinkSourceController: React.FC<SinkSourceControllerProps> = ({ source, ...props }) => (\n  <SinkSource {...props} source={source} />\n);\n\ntype Props = SinkSourceControllerProps & ModalComponentProps;\n\nexport const sinkModalLauncher = createModalLauncher<Props>(SinkSourceController);\n\nexport default SinkSourceController;\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { PipelineKind } from '../../types';\n\nexport enum PipelineType {\n  PAC = 'pac',\n  PIPELINE = 'pipeline',\n}\nexport interface PipelineData {\n  enabled: boolean;\n  type?: PipelineType;\n  template?: PipelineKind;\n}\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { PipelineType } from '@console/pipelines-plugin/src/components/import/import-types';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { BuildOptions, Resources } from './import-types';\nimport { removeKsvcInfoFromDomainMapping } from './serverless/serverless-utils';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nconst convertToSec = (value: number, unit: string): number => {\n  switch (unit) {\n    case 'm': {\n      return value * 60;\n    }\n    case 'h': {\n      return value * 3600;\n    }\n    default: {\n      return value;\n    }\n  }\n};\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    replicas: yup\n      .number()\n      .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n      .test(isInteger(t('devconsole~Replicas must be an integer.')))\n      .min(0, t('devconsole~Replicas must be greater than or equal to 0.'))\n      .max(\n        Number.MAX_SAFE_INTEGER,\n        t('devconsole~Replicas must be lesser than or equal to {{maxSafeInteger}}.', {\n          maxSafeInteger: Number.MAX_SAFE_INTEGER,\n        }),\n      )\n      .test({\n        name: 'isEmpty',\n        test: (value) => value !== undefined,\n        message: t('devconsole~This field cannot be empty.'),\n      }),\n  });\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = (t: TFunction) =>\n  yup.object().when('resources', {\n    is: Resources.KnativeService,\n    then: yup.object().shape({\n      scaling: yup.object({\n        minpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Min Pods must be an integer.')))\n          .min(0, t('devconsole~Min Pods must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Min Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        maxpods: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Max Pods must be an integer.')))\n          .min(1, t('devconsole~Max Pods must be greater than or equal to 1.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Max Pods must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          )\n          .test({\n            test(limit) {\n              const { minpods } = this.parent;\n              return limit ? limit >= minpods : true;\n            },\n            message: t('devconsole~Max Pods must be greater than or equal to Min Pods.'),\n          }),\n        concurrencytarget: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency target must be an integer.')))\n          .min(0, t('devconsole~Concurrency target must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency target must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencylimit: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .test(isInteger(t('devconsole~Concurrency limit must be an integer.')))\n          .min(0, t('devconsole~Concurrency limit must be greater than or equal to 0.'))\n          .max(\n            Number.MAX_SAFE_INTEGER,\n            t('devconsole~Concurrency limit must be lesser than or equal to {{maxSafeInteger}}.', {\n              maxSafeInteger: Number.MAX_SAFE_INTEGER,\n            }),\n          ),\n        concurrencyutilization: yup\n          .number()\n          .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n          .min(0, t('devconsole~Concurrency utilization must be between 0 and 100.'))\n          .max(100, t('devconsole~Concurrency utilization must be between 0 and 100.')),\n        autoscale: yup.object().shape({\n          autoscalewindow: yup\n            .number()\n            .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n            .test({\n              test(autoscalewindow) {\n                if (autoscalewindow) {\n                  const { autoscalewindowUnit } = this.parent;\n                  const value = convertToSec(autoscalewindow, autoscalewindowUnit);\n                  return value >= 6 && value <= 3600;\n                }\n                return true;\n              },\n              message: t('devconsole~Autoscale window must be between 6s and 1h.'),\n            }),\n        }),\n      }),\n      domainMapping: yup.array().of(\n        yup\n          .string()\n          .transform(removeKsvcInfoFromDomainMapping)\n          .matches(hostnameRegex, {\n            message: t(\n              'devconsole~Domain name must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n            ),\n            excludeEmptyString: true,\n          })\n          .test(\n            'domainname-has-segements',\n            t('devconsole~Domain name must consist of at least two segments separated by dots.'),\n            function (domainName: string) {\n              return domainName.split('.').length >= 2;\n            },\n          ),\n      ),\n    }),\n  });\n\nexport const routeValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    secure: yup.boolean(),\n    tls: yup.object().when('secure', {\n      is: true,\n      then: yup.object({\n        termination: yup.string().required(t('devconsole~Please select a termination type.')),\n      }),\n    }),\n    hostname: yup\n      .string()\n      .matches(hostnameRegex, {\n        message: t(\n          'devconsole~Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n        ),\n        excludeEmptyString: true,\n      })\n      .max(253, t('devconsole~Cannot be longer than 253 characters.')),\n    path: yup.string().matches(pathRegex, {\n      message: t('devconsole~Path must start with /.'),\n      excludeEmptyString: true,\n    }),\n    unknownTargetPort: yup\n      .number()\n      .typeError(t('devconsole~Port must be an integer.'))\n      .integer(t('devconsole~Port must be an integer.'))\n      .min(1, t('devconsole~Port must be between 1 and 65535.'))\n      .max(65535, t('devconsole~Port must be between 1 and 65535.')),\n  });\n\nexport const limitsValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    cpu: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limitUnit: yup.string(t('devconsole~Unit must be millicores or cores.')).ensure(),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${limit}${limitUnit}`) >=\n                convertToBaseValue(`${request}${requestUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~CPU limit must be greater than or equal to request.'),\n        }),\n    }),\n    memory: yup.object().shape({\n      request: yup\n        .number()\n        .transform((request) => (_.isNaN(request) ? undefined : request))\n        .min(0, t('devconsole~Request must be greater than or equal to 0.'))\n        .test({\n          test(request) {\n            const { requestUnit, limit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory request must be less than or equal to limit.'),\n        }),\n      requestUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n      limit: yup\n        .number()\n        .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n        .min(0, t('devconsole~Limit must be greater than or equal to 0.'))\n        .test({\n          test(limit) {\n            const { request, requestUnit, limitUnit } = this.parent;\n            if (limit !== undefined) {\n              return (\n                convertToBaseValue(`${request}${requestUnit}`) <=\n                convertToBaseValue(`${limit}${limitUnit}`)\n              );\n            }\n            return true;\n          },\n          message: t('devconsole~Memory limit must be greater than or equal to request.'),\n        }),\n      limitUnit: yup.string(t('devconsole~Unit must be Mi or Gi.')),\n    }),\n  });\n\nexport const imageValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Source',\n    then: yup.object().shape({\n      selected: yup.string().required(t('devconsole~Required')),\n      tag: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const gitValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    url: yup\n      .string()\n      .max(2000, t('devconsole~Please enter a URL that is less then 2000 characters.'))\n      .matches(gitUrlRegex, t('devconsole~Invalid Git URL.'))\n      .required(t('devconsole~Required')),\n    type: yup.string().when('showGitType', {\n      is: true,\n      then: yup\n        .string()\n        .required(t('devconsole~We failed to detect the Git type. Please choose a Git type.')),\n    }),\n    showGitType: yup.boolean(),\n  });\n\nexport const dockerValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Docker',\n    then: yup.object().shape({\n      containerPort: yup\n        .number()\n        .test(isInteger(t('devconsole~Container port should be an integer'))),\n      dockerfilePath: yup.string().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const devfileValidationSchema = (t: TFunction) =>\n  yup.object().when('build', {\n    is: (build) => build.strategy === 'Devfile',\n    then: yup.object().shape({\n      devfilePath: yup.string().required(t('devconsole~Required')),\n      devfileContent: yup\n        .string()\n        .min(1, t('devconsole~Required'))\n        .required(t('devconsole~Required')),\n      devfileHasError: yup.boolean().oneOf([false]),\n      devfileSuggestedResources: yup.object().required(t('devconsole~Required')),\n    }),\n  });\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = (t: TFunction) =>\n  yup.string().required(t('devconsole~Required'));\n\nexport const isiValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup.string().required(t('devconsole~Required')),\n    image: yup.object().required(t('devconsole~Required')),\n    tag: yup.string(),\n    status: yup.string().required(t('devconsole~Required')),\n  });\n\nexport const importFlowPipelineTemplateValidationSchema = yup\n  .object()\n  .when(['enabled', 'build.option', 'type'], {\n    is: (isPipelineEnabled, buildOption, pipelineType) =>\n      (isPipelineEnabled || buildOption === BuildOptions.PIPELINES) &&\n      pipelineType !== PipelineType.PAC,\n    then: yup.object().shape({\n      templateSelected: yup.string().required(),\n    }),\n  });\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n\nexport const bitBucketUserNameRegex = /^[a-z]([a-z0-9_]-?)*[a-z0-9]$/;\n","import { apiVersionForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin/src';\nimport { AutoscaleWindowType } from '../import-types';\n\nexport const getAutoscaleWindow = (autoscaleValue: string): AutoscaleWindowType => {\n  const windowRegEx = /^[0-9]+|[a-zA-Z]*/g;\n  const [val, unit] = autoscaleValue?.match(windowRegEx);\n  return {\n    autoscalewindow: Number(val) || '',\n    autoscalewindowUnit: unit || 's',\n    defaultAutoscalewindowUnit: unit || 's',\n  };\n};\n\nconst DOMAIN_MAPPING_KSVC_INFO_REGEX = / *\\([^)]*\\) */g;\n\nexport const removeKsvcInfoFromDomainMapping = (dm: string) =>\n  dm.replace(DOMAIN_MAPPING_KSVC_INFO_REGEX, '');\n\nexport const getOtherKsvcFromDomainMapping = (\n  dm: K8sResourceKind,\n  currentKsvcName: string,\n): string | null => {\n  if (!dm.spec?.ref) return null;\n  const { apiVersion, kind, name } = dm.spec.ref;\n  return apiVersionForModel(ServiceModel) === apiVersion &&\n    kind === ServiceModel.kind &&\n    name !== currentKsvcName\n    ? name\n    : null;\n};\n\nexport const removeDuplicateDomainMappings = (\n  allDomainMappings: string[],\n  connectedDomainMappings: string[],\n): string[] => {\n  return [\n    ...new Set(\n      allDomainMappings\n        ?.filter((dm) =>\n          connectedDomainMappings?.length > 0\n            ? connectedDomainMappings?.includes(removeKsvcInfoFromDomainMapping(dm))\n            : true,\n        )\n        .map((n) => removeKsvcInfoFromDomainMapping(n)),\n    ),\n  ];\n};\n\nexport const hasOtherKsvcDomainMappings = (domainMapping: string[]): boolean =>\n  domainMapping.some((dm) => new RegExp(DOMAIN_MAPPING_KSVC_INFO_REGEX).test(dm));\n\nexport const getAllOtherDomainMappingInUse = (\n  domainMappings: string[],\n  data: K8sResourceKind[] = [],\n  serviceName: string,\n): K8sResourceKind[] =>\n  domainMappings\n    .filter((d) => hasOtherKsvcDomainMappings([d]))\n    .map((dm) => {\n      const selectedDomain = data?.find(\n        (d) => d.metadata.name === removeKsvcInfoFromDomainMapping(dm),\n      );\n      return selectedDomain && selectedDomain.spec?.ref?.name !== serviceName\n        ? selectedDomain\n        : null;\n    })\n    .filter((d) => !!d);\n","import { TFunction } from 'i18next';\nimport { CatalogItem } from '@console/dynamic-plugin-sdk';\nimport {\n  EVENTING_KAFKA_CHANNEL_KIND,\n  EVENTING_IMC_KIND,\n  EVENT_SOURCE_SINK_BINDING_KIND,\n  EVENT_SOURCE_API_SERVER_KIND,\n  EVENT_SOURCE_CONTAINER_KIND,\n  EVENT_SOURCE_PING_KIND,\n  EVENT_SOURCE_KAFKA_KIND,\n} from '../../const';\nimport { CamelKameletBindingModel } from '../../models';\n\nexport const EventSources = {\n  ApiServerSource: EVENT_SOURCE_API_SERVER_KIND,\n  ContainerSource: EVENT_SOURCE_CONTAINER_KIND,\n  KafkaSource: EVENT_SOURCE_KAFKA_KIND,\n  PingSource: EVENT_SOURCE_PING_KIND,\n  SinkBinding: EVENT_SOURCE_SINK_BINDING_KIND,\n  KameletBinding: CamelKameletBindingModel.kind,\n};\n\nexport const defaultChannels = {\n  InMemoryChannel: EVENTING_IMC_KIND,\n  KafkaChannel: EVENTING_KAFKA_CHANNEL_KIND,\n};\nexport interface ProjectData {\n  name: string;\n  displayName: string;\n  description: string;\n}\n\nexport interface ApplicationData {\n  initial: string;\n  name: string;\n  selectedKey: string;\n  isInContext?: boolean;\n}\n\nexport interface EventSourceData {\n  [x: string]: any;\n}\n\nexport interface SinkResourceData {\n  apiVersion: string;\n  name: string;\n  kind: string;\n  key: string;\n  uri?: string;\n}\n\nexport interface EventSourceFormData {\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  apiVersion: string;\n  type: string;\n  sinkType: string;\n  sink: SinkResourceData;\n  data?: EventSourceData;\n}\nexport interface EventSourceSyncFormData {\n  editorType?: string;\n  showCanUseYAMLMessage?: boolean;\n  formData: EventSourceFormData;\n  yamlData?: string;\n}\nexport interface EventSinkFormData {\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  apiVersion: string;\n  type: string;\n  source?: SinkResourceData;\n  data?: EventSourceData;\n}\n\nexport interface EventSinkSyncFormData {\n  editorType?: string;\n  showCanUseYAMLMessage?: boolean;\n  formData: EventSinkFormData;\n  yamlData?: string;\n}\n\nexport type YamlFormSyncData<T> = {\n  editorType?: string;\n  showCanUseYAMLMessage?: boolean;\n  formData: T;\n  yamlData?: string;\n};\n\nexport interface KnEventCatalogMetaData {\n  name: string;\n  description?: string;\n  provider?: string;\n  iconUrl?: string;\n}\nexport interface EventSourceListData {\n  loaded: boolean;\n  eventSourceList: CatalogItem[];\n}\n\nexport enum SinkType {\n  Resource = 'resource',\n  Uri = 'uri',\n}\n\nexport const sourceSinkType = (t: TFunction) => {\n  return {\n    Resource: {\n      value: SinkType.Resource,\n      label: t('knative-plugin~Resource'),\n    },\n    Uri: {\n      value: SinkType.Uri,\n      label: t('knative-plugin~URI'),\n    },\n  };\n};\nexport interface AddChannelFormData {\n  project?: ProjectData;\n  application: ApplicationData;\n  name: string;\n  namespace: string;\n  apiVersion: string;\n  type: string;\n  data?: EventSourceData;\n  yamlData?: string;\n}\n\nexport interface ChannelListProps {\n  loaded: boolean;\n  channelList: string[];\n}\n\nexport interface AddBrokerFormYamlValues {\n  editorType: string;\n  showCanUseYAMLMessage: boolean;\n  formData: BrokerFormData;\n  yamlData: string;\n}\n\nexport interface BrokerFormData {\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  spec: {};\n}\n","import { FormikValues } from 'formik';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nexport const RESOURCE_KEY_SEPERATOR = '#';\n\nexport const getResourceApiGroup = (apiVersion: string): string => apiVersion.split('/')[0];\n\nexport const getSinkableResourceOrder = (apiVersion: string): number => {\n  const sortOrder = {\n    'serving.knative.dev': 1,\n    'messaging.knative.dev': 2,\n    'eventing.knative.dev': 3,\n  };\n  return sortOrder[getResourceApiGroup(apiVersion)] ?? 4;\n};\nexport const craftResourceKey = (key: string, resource: K8sResourceKind): string | undefined => {\n  if (!resource?.apiVersion) return undefined;\n  const { apiVersion } = resource;\n  return key\n    ? [getSinkableResourceOrder(apiVersion), referenceFor(resource), key].join(\n        RESOURCE_KEY_SEPERATOR,\n      )\n    : undefined;\n};\n\nexport const getResourceNameFromKey = (key: string): string =>\n  key?.split(RESOURCE_KEY_SEPERATOR).pop() ?? '';\n\nexport const sanitizeResourceName = (values: FormikValues): FormikValues => {\n  const finalValues = { ...values };\n  finalValues.spec.subscriber.ref.name = getResourceNameFromKey(values.spec.subscriber.ref.name);\n  return finalValues;\n};\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\nimport {\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n} from '@console/dev-console/src/components/import/validation-schema';\nimport { isValidUrl, nameValidationSchema } from '@console/shared';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { EventSources, SinkType } from './import-types';\n\nexport const sinkTypeUriValidation = (t: TFunction) =>\n  yup.object().shape({\n    uri: yup\n      .string()\n      .max(2000, t('knative-plugin~Please enter a URI that is less then 2000 characters.'))\n      .test('validate-uri', t('knative-plugin~Invalid URI.'), function (value) {\n        return isValidUrl(value);\n      })\n      .required(t('knative-plugin~Required')),\n  });\n\nconst sinkServiceSchema = (t: TFunction) =>\n  yup\n    .object()\n    .when('sinkType', {\n      is: SinkType.Resource,\n      then: yup.object().shape({\n        name: yup.string().required(t('knative-plugin~Required')),\n      }),\n    })\n    .when('sinkType', {\n      is: SinkType.Uri,\n      then: sinkTypeUriValidation(t),\n    });\n\nexport const sourceDataSpecSchema = (t: TFunction) =>\n  yup\n    .object()\n    .when('type', {\n      is: EventSources.PingSource,\n      then: yup.object().shape({\n        [EventSources.PingSource]: yup.object().shape({\n          data: yup.string().max(253, t('knative-plugin~Cannot be longer than 253 characters.')),\n          schedule: yup\n            .string()\n            .max(253, t('knative-plugin~Cannot be longer than 253 characters.'))\n            .required(t('knative-plugin~Required')),\n        }),\n      }),\n    })\n    .when('type', {\n      is: EventSources.SinkBinding,\n      then: yup.object().shape({\n        [EventSources.SinkBinding]: yup.object().shape({\n          subject: yup.object().shape({\n            selector: yup.object().shape({\n              matchLabels: yup.object(),\n            }),\n            name: yup.string().when('selector.matchLabels', {\n              is: (obj: object) => !obj,\n              then: yup.string().required(t('knative-plugin~Required')),\n            }),\n            apiVersion: yup\n              .string()\n              .max(253, t('knative-plugin~Cannot be longer than 253 characters.'))\n              .required(t('knative-plugin~Required')),\n            kind: yup\n              .string()\n              .max(253, t('knative-plugin~Cannot be longer than 253 characters.'))\n              .required(t('knative-plugin~Required')),\n          }),\n        }),\n      }),\n    })\n    .when('type', {\n      is: EventSources.ApiServerSource,\n      then: yup.object().shape({\n        [EventSources.ApiServerSource]: yup.object().shape({\n          resources: yup\n            .array()\n            .of(\n              yup.object({\n                apiVersion: yup.string().required(t('knative-plugin~Required')),\n                kind: yup.string().required(t('knative-plugin~Required')),\n              }),\n            )\n            .required(t('knative-plugin~Required')),\n        }),\n      }),\n    })\n    .when('type', {\n      is: EventSources.KafkaSource,\n      then: yup.object().shape({\n        [EventSources.KafkaSource]: yup.object().shape({\n          bootstrapServers: yup.array().of(yup.string()).min(1, t('knative-plugin~Required')),\n          consumerGroup: yup.string().required(t('knative-plugin~Required')),\n          topics: yup.array().of(yup.string()).min(1, t('knative-plugin~Required')),\n          net: yup.object().shape({\n            sasl: yup.object().shape({\n              enable: yup.boolean(),\n              user: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string(),\n                  key: yup.string(),\n                }),\n              }),\n              password: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string(),\n                  key: yup.string(),\n                }),\n              }),\n            }),\n            tls: yup.object().shape({\n              enable: yup.boolean(),\n              caCert: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string(),\n                  key: yup.string(),\n                }),\n              }),\n              cert: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string(),\n                  key: yup.string(),\n                }),\n              }),\n              key: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string(),\n                  key: yup.string(),\n                }),\n              }),\n            }),\n          }),\n        }),\n      }),\n    })\n    .when('type', {\n      is: EventSources.ContainerSource,\n      then: yup.object().shape({\n        [EventSources.ContainerSource]: yup.object().shape({\n          template: yup.object({\n            spec: yup.object({\n              containers: yup.array().of(\n                yup.object({\n                  image: yup.string().required(t('knative-plugin~Required')),\n                }),\n              ),\n            }),\n          }),\n        }),\n      }),\n    });\n\nexport const eventSourceValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    editorType: yup.string(),\n    formData: yup.object().when('editorType', {\n      is: EditorType.Form,\n      then: yup.object().shape({\n        project: projectNameValidationSchema,\n        application: applicationNameValidationSchema,\n        name: nameValidationSchema(t),\n        sink: sinkServiceSchema(t),\n        data: sourceDataSpecSchema(t),\n      }),\n    }),\n    yamlData: yup.string(),\n  });\n\nexport const addChannelValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    editorType: yup.string(),\n    formData: yup.object().when('editorType', {\n      is: EditorType.Form,\n      then: yup.object().shape({\n        project: projectNameValidationSchema,\n        application: applicationNameValidationSchema,\n        name: nameValidationSchema(t),\n        data: yup.object(),\n        type: yup.string(),\n      }),\n    }),\n    yamlData: yup.string(),\n  });\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RadioGroupField } from '@console/shared';\nimport { sourceSinkType } from '../../import-types';\nimport SinkResources, { SinkResourcesProps } from './SinkResources';\nimport SinkUri from './SinkUri';\n\nconst SinkUriResourcesGroup: React.FC<SinkResourcesProps> = ({ namespace, isMoveSink }) => {\n  const { t } = useTranslation();\n  return (\n    <RadioGroupField\n      name=\"formData.sinkType\"\n      options={[\n        {\n          label: sourceSinkType(t).Resource.label,\n          value: sourceSinkType(t).Resource.value,\n          activeChildren: <SinkResources namespace={namespace} isMoveSink={isMoveSink} />,\n        },\n        {\n          label: sourceSinkType(t).Uri.label,\n          value: sourceSinkType(t).Uri.value,\n          activeChildren: <SinkUri />,\n        },\n      ]}\n    />\n  );\n};\n\nexport default SinkUriResourcesGroup;\n","import * as React from 'react';\nimport {\n  FormGroup,\n  Alert,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n} from '@patternfly/react-core';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport { isEmpty } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getFieldId, ResourceDropdownField } from '@console/shared';\nimport { getDynamicChannelResourceList } from '../../../../utils/fetch-dynamic-eventsources-utils';\nimport {\n  knativeServingResourcesServices,\n  knativeEventingResourcesBroker,\n  k8sServices,\n  knativeKafkaSinks,\n} from '../../../../utils/get-knative-resources';\nimport { craftResourceKey } from '../../../pub-sub/pub-sub-utils';\nimport { SinkType } from '../../import-types';\n\nimport './SinkResources.scss';\n\nexport interface SinkResourcesProps {\n  namespace: string;\n  isMoveSink?: boolean;\n}\n\nconst SinkResources: React.FC<SinkResourcesProps> = ({ namespace, isMoveSink }) => {\n  const { t } = useTranslation();\n  const [resourceAlert, setResourceAlert] = React.useState(false);\n  const { setFieldValue, setFieldTouched, validateForm, initialValues } = useFormikContext<\n    FormikValues\n  >();\n  const [, { touched: sinkTypeTouched }] = useField('formData.sinkType');\n  const autocompleteFilter = (strText: string, item: React.ReactElement): boolean =>\n    fuzzy(strText, item?.props?.name);\n  const fieldId = getFieldId('sink-name', 'dropdown');\n  const onChange = React.useCallback(\n    (_selectedValue, valueObj) => {\n      const modelData = valueObj?.props?.model;\n      const name = valueObj?.props?.name;\n      if (name && modelData) {\n        const { apiGroup, apiVersion, kind } = modelData;\n        setFieldValue('formData.sink.name', name);\n        setFieldTouched('formData.sink.name', true);\n        setFieldValue(\n          'formData.sink.apiVersion',\n          apiGroup ? `${apiGroup}/${apiVersion}` : apiVersion,\n        );\n        setFieldTouched('formData.sink.apiVersion', true);\n        setFieldValue('formData.sink.kind', kind);\n        setFieldTouched('formData.sink.kind', true);\n        validateForm();\n      }\n    },\n    [setFieldValue, setFieldTouched, validateForm],\n  );\n  const contextAvailable = isMoveSink ? false : !!initialValues.formData.sink.name;\n  const resourcesData = [\n    ...k8sServices(namespace),\n    ...knativeServingResourcesServices(namespace),\n    ...getDynamicChannelResourceList(namespace),\n    ...knativeEventingResourcesBroker(namespace),\n    ...knativeKafkaSinks(namespace),\n  ];\n\n  const handleOnLoad = (resourceList: { [key: string]: string }) => {\n    if (isEmpty(resourceList)) {\n      setResourceAlert(true);\n      if (!sinkTypeTouched) {\n        setFieldValue('formData.sinkType', SinkType.Uri);\n        setFieldTouched('formData.sinkType', true);\n      }\n    } else {\n      setResourceAlert(false);\n    }\n  };\n\n  // filter out resource which are owned by other resource\n  const resourceFilter = ({ metadata }: K8sResourceKind) => !metadata?.ownerReferences?.length;\n\n  return (\n    <FormGroup fieldId={fieldId} isRequired>\n      {resourceAlert && (\n        <>\n          <Alert variant=\"custom\" title={t('knative-plugin~No resources available')} isInline>\n            {t(\n              'knative-plugin~Select the URI option, or exit this form and create a Knative Service, Broker, or Channel first.',\n            )}\n          </Alert>\n          &nbsp;\n        </>\n      )}\n      <ResourceDropdownField\n        menuClassName={'max-height-menu'}\n        data-test=\"sinkable-resources\"\n        name=\"formData.sink.key\"\n        resources={resourcesData}\n        dataSelector={['metadata', 'name']}\n        fullWidth\n        placeholder={t('knative-plugin~Select resource')}\n        showBadge\n        disabled={contextAvailable || resourceAlert}\n        onChange={onChange}\n        autocompleteFilter={autocompleteFilter}\n        autoSelect\n        customResourceKey={craftResourceKey}\n        resourceFilter={resourceFilter}\n        onLoad={handleOnLoad}\n      />\n\n      {!contextAvailable && (\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              {t('knative-plugin~This resource will be the sink for the Event source.')}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      )}\n    </FormGroup>\n  );\n};\n\nexport default SinkResources;\n","import * as React from 'react';\nimport {\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  TextInputTypes,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InputField, getFieldId } from '@console/shared';\n\nconst SinkUri: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <FormGroup fieldId={getFieldId('sink-name', 'uri')} isRequired>\n      <InputField\n        type={TextInputTypes.text}\n        name=\"formData.sink.uri\"\n        placeholder={t('knative-plugin~Enter URI')}\n        data-test-id=\"sink-section-uri\"\n        required\n      />\n\n      <FormHelperText>\n        <HelperText>\n          <HelperTextItem>\n            {t(\n              'knative-plugin~A Universal Resource Indicator where events are going to be delivered. Ex. \"http://cluster.example.com/svc\"',\n            )}\n          </HelperTextItem>\n        </HelperText>\n      </FormHelperText>\n    </FormGroup>\n  );\n};\n\nexport default SinkUri;\n"],"sourceRoot":""}