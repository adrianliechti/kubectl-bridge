{"version":3,"sources":["webpack:///./packages/topology/src/components/export-app/export-app-context.ts"],"names":["ExportAppContext","ExportAppContextProvider","Provider","useExportAppFormToast","toast","t","currentToasts","setCurrentToasts","exportAppToast","setExportAppToast","exportAppToastLoaded","exportAppWatchResources","Object","keys","reduce","acc","k","groupVersionKind","name","namespace","resNamespace","namespaced","isList","optional","exportResources","cleanToast","toastDismiss","removeToast","toastId","cleanToastConfig","forEach","loadError","response","status","showDownloadToast","expNamespace","routeUrl","key","addToast","variant","info","title","content","dismissible","actions","dismiss","label","callback","window","open","component","dataTest","onClose","toasts","isValidResource","loaded","data","uid","metadata","completed","route"],"mappings":"6FAAA,qPAYO,MAAMA,EAAmB,gBAAoB,IAEvCC,EAA2BD,EAAiBE,SAE5CC,EAAwB,KACnC,MAAMC,EAAQ,gBACR,EAAEC,GAAM,4BACPC,EAAeC,GAAoB,WACxC,KAEKC,EAAgBC,EAAmBC,GAAwB,aAE7D,KAAH,aAAoC,IAAI,GAEpCC,EAA0B,UAAgD,KAC9E,IAAKD,GAAwB,IAAUF,GAAiB,MAAO,GAc/D,OAbaI,OAAOC,KAAKL,GACHM,OAAO,CAACC,EAAKC,KACjC,MAAM,iBAAEC,EAAgB,KAAEC,EAAMC,UAAWC,GAAiBZ,EAAeQ,GAS3E,OARAD,EAAIC,GAAK,CACPC,iBAAkBA,GAAoB,YAA4B,eAClEC,OACAC,UAAWC,EACXC,YAAY,EACZC,QAAQ,EACRC,UAAU,GAELR,GACN,KAEF,CAACP,EAAgBE,IAEdc,EAAkB,YACtBb,GAGIc,EAAa,cAChBT,IACC,MAAMU,EAAepB,EAAcU,GAC/BU,IACFtB,EAAMuB,YAAYD,EAAaE,SAC/BrB,EAAiB,IAAOD,EAAeU,MAG3C,CAACV,EAAeF,IAGZyB,EAAmB,cACtBb,IACKN,GACFD,EAAkB,IAAOD,EAAgBQ,KAG7C,CAACR,EAAgBE,EAAsBD,IAGzC,YAAgB,KACd,GAAIe,EAAiB,CACNZ,OAAOC,KAAKW,GACpBM,QAASd,I,QAC2C,OAAb,QAAtC,EAA4B,QAA5B,EAAAQ,EAAgBR,GAAGe,iBAAS,eAAEC,gBAAQ,eAAEC,UAC1CR,EAAWT,GACXa,EAAiBb,QAItB,CAACS,EAAYI,EAAkBL,IAElC,MAAMU,EAAoB,cACxB,CAACC,EAAsBC,EAAkBC,KACvC,MAAMT,EAAUxB,EAAMkC,SAAS,CAC7BC,QAAS,IAAaC,KACtBC,MAAOpC,EAAE,+BACTqC,QAASrC,EACP,uGACA,CACEc,UAAWgB,IAGfQ,aAAa,EACbC,QAAS,CACP,CACEC,SAAS,EACTC,MAAOzC,EAAE,qBACT0C,SAAU,KACRtB,EAAWY,GACXR,EAAiBQ,GACjBW,OAAOC,KAAKb,EAAU,WAExBc,UAAW,IACXC,SAAU,oBAGdC,QAAS,IAAMvB,EAAiBQ,KAElC9B,EAAkB8C,GAAY,OAAD,wBAAMA,GAAM,CAAE,CAAChB,GAAM,CAAET,eAEtD,CAACH,EAAYI,EAAkBxB,EAAGD,IAGpC,YAAgB,KACd,GAAIM,EAAsB,CACXE,OAAOC,KAAKL,GACpBsB,QAASd,I,UACZ,MAAMsC,EACJ9B,EAAgBR,GAAGuC,SAClB/B,EAAgBR,GAAGe,WACpBP,EAAgBR,GAAGwC,MACnBhD,EAAeQ,GAAGyC,MAAQjC,EAAgBR,GAAGwC,KAAKE,SAASD,IAE3DH,IAC8B,QAA9B,EAAA9B,EAAgBR,GAAGwC,KAAKvB,cAAM,eAAE0B,aACF,QAA9B,EAAAnC,EAAgBR,GAAGwC,KAAKvB,cAAM,eAAE2B,SAC/BtD,EAAcU,GAEfkB,EACEV,EAAgBR,GAAGwC,KAAKE,SAASvC,UACjCK,EAAgBR,GAAGwC,KAAKvB,OAAO2B,MAC/B5C,GAGFsC,KAC+B,QAA9B,EAAA9B,EAAgBR,GAAGwC,KAAKvB,cAAM,eAAE0B,YACjCrD,EAAcU,IAEdS,EAAWT,OAIhB,CACDQ,EACAhB,EACAE,EACAwB,EACA5B,EACAmB","file":"topology/code-refs/exportAppContext-chunk-65c9648c508d5a613aae.min.js","sourcesContent":["import * as React from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { WatchK8sResource } from '@console/dynamic-plugin-sdk/src/extensions/console-types';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/utils/k8s/k8s-ref';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { USERSETTINGS_PREFIX, useToast, useUserSettings } from '@console/shared/src';\nimport { ExportModel } from '../../models';\nimport { ExportAppUserSettings } from './types';\n\nexport const ExportAppContext = React.createContext({});\n\nexport const ExportAppContextProvider = ExportAppContext.Provider;\n\nexport const useExportAppFormToast = () => {\n  const toast = useToast();\n  const { t } = useTranslation();\n  const [currentToasts, setCurrentToasts] = React.useState<{ [key: string]: { toastId: string } }>(\n    {},\n  );\n  const [exportAppToast, setExportAppToast, exportAppToastLoaded] = useUserSettings<\n    ExportAppUserSettings\n  >(`${USERSETTINGS_PREFIX}.exportApp`, {}, true);\n\n  const exportAppWatchResources = React.useMemo<Record<string, WatchK8sResource>>(() => {\n    if (!exportAppToastLoaded || _.isEmpty(exportAppToast)) return {};\n    const keys = Object.keys(exportAppToast);\n    const watchRes = keys.reduce((acc, k) => {\n      const { groupVersionKind, name, namespace: resNamespace } = exportAppToast[k];\n      acc[k] = {\n        groupVersionKind: groupVersionKind || getGroupVersionKindForModel(ExportModel),\n        name,\n        namespace: resNamespace,\n        namespaced: true,\n        isList: false,\n        optional: true,\n      };\n      return acc;\n    }, {} as Record<string, WatchK8sResource>);\n    return watchRes;\n  }, [exportAppToast, exportAppToastLoaded]);\n\n  const exportResources = useK8sWatchResources<{ [k: string]: K8sResourceKind }>(\n    exportAppWatchResources,\n  );\n\n  const cleanToast = React.useCallback(\n    (k: string) => {\n      const toastDismiss = currentToasts[k];\n      if (toastDismiss) {\n        toast.removeToast(toastDismiss.toastId);\n        setCurrentToasts(_.omit(currentToasts, k));\n      }\n    },\n    [currentToasts, toast],\n  );\n\n  const cleanToastConfig = React.useCallback(\n    (k: string) => {\n      if (exportAppToastLoaded) {\n        setExportAppToast(_.omit(exportAppToast, k));\n      }\n    },\n    [exportAppToast, exportAppToastLoaded, setExportAppToast],\n  );\n\n  React.useEffect(() => {\n    if (exportResources) {\n      const keys = Object.keys(exportResources);\n      keys.forEach((k) => {\n        if (exportResources[k].loadError?.response?.status === 404) {\n          cleanToast(k);\n          cleanToastConfig(k);\n        }\n      });\n    }\n  }, [cleanToast, cleanToastConfig, exportResources]);\n\n  const showDownloadToast = React.useCallback(\n    (expNamespace: string, routeUrl: string, key: string) => {\n      const toastId = toast.addToast({\n        variant: AlertVariant.info,\n        title: t('topology~Export application'),\n        content: t(\n          'topology~All the resources are exported successfully from {{namespace}}. Click below to download it.',\n          {\n            namespace: expNamespace,\n          },\n        ),\n        dismissible: true,\n        actions: [\n          {\n            dismiss: true,\n            label: t('topology~Download'),\n            callback: () => {\n              cleanToast(key);\n              cleanToastConfig(key);\n              window.open(routeUrl, '_blank');\n            },\n            component: 'a',\n            dataTest: 'download-export',\n          },\n        ],\n        onClose: () => cleanToastConfig(key),\n      });\n      setCurrentToasts((toasts) => ({ ...toasts, [key]: { toastId } }));\n    },\n    [cleanToast, cleanToastConfig, t, toast],\n  );\n\n  React.useEffect(() => {\n    if (exportAppToastLoaded) {\n      const keys = Object.keys(exportAppToast);\n      keys.forEach((k) => {\n        const isValidResource =\n          exportResources[k].loaded &&\n          !exportResources[k].loadError &&\n          exportResources[k].data &&\n          exportAppToast[k].uid === exportResources[k].data.metadata.uid;\n        if (\n          isValidResource &&\n          exportResources[k].data.status?.completed &&\n          exportResources[k].data.status?.route &&\n          !currentToasts[k]\n        ) {\n          showDownloadToast(\n            exportResources[k].data.metadata.namespace,\n            exportResources[k].data.status.route,\n            k,\n          );\n        } else if (\n          isValidResource &&\n          !exportResources[k].data.status?.completed &&\n          currentToasts[k]\n        ) {\n          cleanToast(k);\n        }\n      });\n    }\n  }, [\n    exportResources,\n    exportAppToast,\n    exportAppToastLoaded,\n    showDownloadToast,\n    currentToasts,\n    cleanToast,\n  ]);\n};\n"],"sourceRoot":""}