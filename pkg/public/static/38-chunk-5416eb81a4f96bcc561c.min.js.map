{"version":3,"sources":["webpack:///./public/components/graphs/graph-loader.ts","webpack:///./public/components/graphs/gauge.tsx","webpack:///./public/components/graphs/bar.tsx","webpack:///./public/components/graphs/stack.tsx"],"names":["DEFAULT_THRESHOLDS","value","GaugeChart","data","error","humanize","invert","loading","query","remainderLabel","themeColor","green","thresholds","title","ariaChartLinkLabel","ariaChartTitle","usedLabel","label","secondaryTitle","className","t","ref","width","ready","status","usedLabelText","secondaryTitleText","labelText","y","string","undefined","ariaTitle","height","padding","labels","datum","x","subTitle","Gauge","namespace","percent","response","endpoint","QUERY","map","BarChart","barSpacing","barWidth","LabelComponent","noLink","theme","blue","titleClassName","containerRef","maxHorizontalPadding","bottom","left","right","Math","min","top","length","index","key","metric","horizontal","labelComponent","textAnchor","bar","style","domain","Bar","delay","customDataSource","DEFAULT_SAMPLES","DEFAULT_TIMESPAN","StackChart","formatDate","format","tickCount","xAxis","yAxis","chartStyle","byteDataType","mainDataName","multiUnordered","processedData","unit","result","tickFormat","tick","getLabel","prop","includeDate","date","multiLine","container","legendData","d","childName","description","name","symbol","activateData","cursorDimension","props","stack","reduce","acc","curr","voronoiDimension","containerComponent","domainPadding","scale","dependentAxis","Stack","samples","timeout","timespan","rest","utilization","QUERY_RANGE","ChartComponent"],"mappings":"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","file":"38-chunk-5416eb81a4f96bcc561c.min.js","sourcesContent":["export { Bar } from './bar';\nexport { Gauge } from './gauge';\nexport { Area } from './area';\nexport { Stack } from './stack';\n","import * as React from 'react';\nimport {\n  ChartDonutThreshold,\n  ChartDonutUtilization,\n  ChartThemeColor,\n} from '@patternfly/react-charts';\nimport classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\n\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { PrometheusEndpoint } from './helpers';\nimport { useRefWidth, humanizePercentage, Humanize } from '../utils';\nimport { getInstantVectorStats } from './utils';\nimport { DataPoint } from '.';\n\nconst DEFAULT_THRESHOLDS = [{ value: 67 }, { value: 92 }];\n\nexport const GaugeChart: React.FC<GaugeChartProps> = ({\n  data,\n  error,\n  humanize = humanizePercentage,\n  invert = false,\n  loading,\n  query = '',\n  remainderLabel,\n  themeColor = ChartThemeColor.green,\n  thresholds = DEFAULT_THRESHOLDS,\n  title,\n  ariaChartLinkLabel,\n  ariaChartTitle,\n  usedLabel,\n  // Don't sort, Uses previously declared props\n  label,\n  secondaryTitle,\n  className,\n}) => {\n  const { t } = useTranslation();\n  const [ref, width] = useRefWidth();\n  const ready = !error && !loading;\n\n  const status = loading ? t('Loading') : error;\n  const usedLabelText = usedLabel || t('public~used');\n  const secondaryTitleText = secondaryTitle || usedLabelText;\n  const labelText = label || (data ? humanize(data.y).string : undefined) || t('No data');\n\n  const labels = ({ datum: { x, y } }) =>\n    x ? `${x} ${usedLabelText}` : `${y} ${remainderLabel || t('available')}`;\n  return (\n    <PrometheusGraph\n      className={classNames('graph-wrapper--title-center graph-wrapper--gauge', className)}\n      ref={ref}\n      title={title}\n    >\n      <PrometheusGraphLink query={query} ariaChartLinkLabel={ariaChartLinkLabel}>\n        <ChartDonutThreshold\n          ariaTitle={ariaChartTitle || title}\n          data={thresholds}\n          height={width} // Changes the scale of the graph, not actual width and height\n          padding={0}\n          width={width}\n          y=\"value\"\n        >\n          <ChartDonutUtilization\n            labels={labels}\n            data={ready ? data : { y: 0 }}\n            invert={invert}\n            padding={0}\n            subTitle={ready ? secondaryTitleText : ''}\n            themeColor={themeColor}\n            thresholds={thresholds}\n            title={status || labelText}\n          />\n        </ChartDonutThreshold>\n      </PrometheusGraphLink>\n    </PrometheusGraph>\n  );\n};\n\nexport const Gauge: React.FC<GaugeProps> = ({\n  humanize = humanizePercentage,\n  invert,\n  namespace,\n  percent = 0,\n  query,\n  remainderLabel,\n  secondaryTitle,\n  thresholds,\n  title,\n  usedLabel,\n}) => {\n  const { t } = useTranslation();\n\n  const [response, error, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query,\n  });\n\n  const [data] = response\n    ? getInstantVectorStats(response, null, humanize).map(({ label, y }) => ({ x: label, y }))\n    : [{ x: humanize(percent).string, y: percent }];\n  return (\n    <GaugeChart\n      data={data}\n      error={!!error && t('No data')}\n      invert={invert}\n      label={data.x}\n      loading={loading}\n      query={query}\n      remainderLabel={remainderLabel}\n      secondaryTitle={secondaryTitle}\n      thresholds={thresholds}\n      title={title}\n      usedLabel={usedLabel}\n    />\n  );\n};\n\ntype GaugeChartProps = {\n  data: DataPoint;\n  error?: string;\n  humanize?: Humanize;\n  invert?: boolean;\n  isLoaded?: boolean;\n  label?: string;\n  loading?: boolean;\n  query?: string;\n  remainderLabel?: string;\n  secondaryTitle?: string;\n  themeColor?: string;\n  thresholds?: {\n    value: number;\n    color?: string;\n  }[];\n  title?: string;\n  ariaChartLinkLabel?: string;\n  ariaChartTitle?: string;\n  usedLabel?: string;\n  className?: string;\n};\n\ntype GaugeProps = {\n  humanize?: Humanize;\n  invert?: boolean;\n  namespace?: string;\n  percent?: number;\n  query?: string;\n  remainderLabel?: string;\n  secondaryTitle?: string;\n  thresholds?: {\n    value: number;\n    color?: string;\n  }[];\n  title?: string;\n  usedLabel?: string;\n};\n","import * as React from 'react';\nimport { ChartBar, ChartLabel, ChartThemeColor, getCustomTheme } from '@patternfly/react-charts';\n\nimport { useRefWidth } from '../utils/ref-width-hook';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { PrometheusEndpoint } from './helpers';\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { barTheme } from './themes';\nimport { humanizeNumber, Humanize } from '../utils';\nimport { DataPoint } from '.';\nimport { getInstantVectorStats } from './utils';\nimport { GraphEmpty } from './graph-empty';\n\nimport { CustomDataSource } from '@console/dynamic-plugin-sdk/src/extensions/dashboard-data-source';\n\nconst DEFAULT_BAR_WIDTH = 10;\nconst PADDING_RATIO = 1 / 3;\n\nexport const BarChart: React.FC<BarChartProps> = ({\n  barSpacing = 15,\n  barWidth = DEFAULT_BAR_WIDTH,\n  data = [],\n  LabelComponent,\n  loading = false,\n  noLink = false,\n  query,\n  theme = getCustomTheme(ChartThemeColor.blue, barTheme),\n  title,\n  titleClassName,\n}) => {\n  const [containerRef, width] = useRefWidth();\n\n  // Max space that horizontal padding should take up. By default, 2/3 of the horizontal space is always available for the actual bar graph.\n  const maxHorizontalPadding = PADDING_RATIO * width;\n\n  const padding = {\n    bottom: barSpacing,\n    left: 0,\n    right: Math.min(100, maxHorizontalPadding),\n    top: 0,\n  };\n\n  return (\n    <PrometheusGraph ref={containerRef} title={title} className={titleClassName}>\n      <PrometheusGraphLink query={noLink ? undefined : query}>\n        {data.length ? (\n          data.map((datum, index) => (\n            <React.Fragment key={index}>\n              <div className=\"graph-bar__label\">\n                {LabelComponent ? (\n                  <LabelComponent title={datum.x} metric={datum.metric} />\n                ) : (\n                  datum.x\n                )}\n              </div>\n              <div className=\"graph-bar__chart\">\n                <ChartBar\n                  barWidth={barWidth}\n                  data={[datum]}\n                  horizontal\n                  labelComponent={\n                    <ChartLabel x={width} textAnchor={theme.bar?.style?.labels?.textAnchor} />\n                  }\n                  theme={theme}\n                  height={barWidth + padding.bottom}\n                  width={width}\n                  domain={{ y: [0, data[0].y] }}\n                  padding={padding}\n                />\n              </div>\n            </React.Fragment>\n          ))\n        ) : (\n          <GraphEmpty loading={loading} />\n        )}\n      </PrometheusGraphLink>\n    </PrometheusGraph>\n  );\n};\n\nexport const Bar: React.FC<BarProps> = ({\n  barSpacing,\n  barWidth,\n  delay = undefined,\n  humanize = humanizeNumber,\n  LabelComponent,\n  metric,\n  namespace,\n  noLink = false,\n  query,\n  theme,\n  title,\n  customDataSource,\n}) => {\n  const [response, , loading] = usePrometheusPoll({\n    delay,\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query,\n    customDataSource,\n  });\n  const data = getInstantVectorStats(response, metric, humanize);\n\n  return (\n    <BarChart\n      barSpacing={barSpacing}\n      barWidth={barWidth}\n      data={data}\n      LabelComponent={LabelComponent}\n      loading={loading}\n      noLink={noLink}\n      query={query}\n      theme={theme}\n      title={title}\n    />\n  );\n};\n\ntype LabelComponentProps = {\n  title: Date | string | number;\n  metric?: { [key: string]: string };\n};\n\ntype BarChartProps = {\n  barSpacing?: number;\n  barWidth?: number;\n  data?: DataPoint[];\n  LabelComponent?: React.ComponentType<LabelComponentProps>;\n  loading?: boolean;\n  noLink?: boolean;\n  query?: string;\n  theme?: any; // TODO figure out the best way to import VictoryThemeDefinition\n  title?: string;\n  titleClassName?: string;\n};\n\ntype BarProps = {\n  barSpacing?: number;\n  barWidth?: number;\n  delay?: number;\n  humanize?: Humanize;\n  LabelComponent?: React.ComponentType<LabelComponentProps>;\n  metric: string;\n  namespace?: string;\n  noLink?: boolean;\n  query: string;\n  theme?: any; // TODO figure out the best way to import VictoryThemeDefinition\n  title?: string;\n  titleClassName: string;\n  customDataSource?: CustomDataSource;\n};\n","import * as React from 'react';\nimport {\n  ChartArea,\n  ChartAxis,\n  ChartVoronoiContainer,\n  Chart,\n  ChartStack,\n  ChartThemeColor,\n  getCustomTheme,\n} from '@patternfly/react-charts';\nimport { processFrame, ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { timeFormatter } from '../utils/datetime';\nimport { humanizeNumber, useRefWidth } from '../utils';\nimport { PrometheusEndpoint } from './helpers';\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { DataPoint, CursorVoronoiContainer, PrometheusResult } from './';\nimport { getRangeVectorStats } from './utils';\nimport { GraphEmpty } from './graph-empty';\nimport { ChartLegendTooltip } from './tooltip';\nimport { areaTheme } from './themes';\nimport { AreaChart, AreaChartProps } from './area';\n\nconst DEFAULT_HEIGHT = 180;\nconst DEFAULT_SAMPLES = 60;\nconst DEFAULT_TICK_COUNT = 2;\nconst DEFAULT_TIMESPAN = 60 * 60 * 1000; // 1 hour\n\nexport const StackChart: React.FC<AreaChartProps> = ({\n  className,\n  data = [],\n  formatDate = timeFormatter.format,\n  height = DEFAULT_HEIGHT,\n  humanize = humanizeNumber,\n  loading = true,\n  padding,\n  query,\n  tickCount = DEFAULT_TICK_COUNT,\n  title,\n  ariaChartLinkLabel,\n  ariaChartTitle,\n  xAxis = true,\n  yAxis = true,\n  chartStyle,\n  byteDataType = '',\n  mainDataName,\n}) => {\n  const theme = getCustomTheme(\n    ChartThemeColor.multiUnordered,\n    // Note: Victory incorrectly typed ThemeBaseProps.padding as number instead of PaddingProps\n    // @ts-ignore\n    areaTheme,\n  );\n  const [containerRef, width] = useRefWidth();\n\n  const [processedData, unit] = React.useMemo(() => {\n    if (byteDataType) {\n      const result = processFrame(data, byteDataType);\n      return [result.processedData, result.unit];\n    }\n    return [data, ''];\n  }, [byteDataType, data]);\n\n  const tickFormat = React.useCallback((tick) => `${humanize(tick, unit, unit).string}`, [\n    humanize,\n    unit,\n  ]);\n\n  const getLabel = React.useCallback(\n    (prop, includeDate = true) => {\n      const { x, y } = prop.datum as DataPoint<Date>;\n      const value = humanize(y, unit, unit).string;\n      const date = formatDate(x);\n      return includeDate ? `${value} at ${date}` : `${value} -`;\n    },\n    [humanize, unit, formatDate],\n  );\n\n  const multiLine = processedData?.length > 1;\n\n  const container = React.useMemo(() => {\n    if (multiLine) {\n      const legendData = processedData.map((d) => ({\n        childName: d[0]?.description,\n        name: d[0]?.description,\n        symbol: d[0]?.symbol,\n      }));\n      return (\n        <CursorVoronoiContainer\n          activateData={false}\n          cursorDimension=\"x\"\n          labels={(props) => getLabel(props, false)}\n          labelComponent={\n            <ChartLegendTooltip\n              legendData={legendData}\n              stack\n              formatDate={(d) => {\n                const y = d.reduce((acc, curr) => acc + curr.y, 0);\n                const value = humanize(y, unit, unit).string;\n                return `${value} total at ${formatDate(d[0].x)}`;\n              }}\n              mainDataName={mainDataName}\n            />\n          }\n          voronoiDimension=\"x\"\n        />\n      );\n    }\n    return <ChartVoronoiContainer voronoiDimension=\"x\" labels={getLabel} activateData={false} />;\n  }, [formatDate, getLabel, humanize, mainDataName, multiLine, processedData, unit]);\n\n  return (\n    <PrometheusGraph className={className} ref={containerRef} title={title}>\n      <PrometheusGraphLink query={query} ariaChartLinkLabel={ariaChartLinkLabel}>\n        {data?.[0]?.length ? (\n          <Chart\n            ariaTitle={ariaChartTitle || title}\n            containerComponent={container}\n            domainPadding={{ y: 20 }}\n            height={height}\n            width={width}\n            scale={{ x: 'time', y: 'linear' }}\n            padding={padding}\n            theme={theme}\n          >\n            {xAxis && <ChartAxis tickCount={tickCount} tickFormat={(tick) => formatDate(tick)} />}\n            {yAxis && <ChartAxis dependentAxis tickCount={tickCount} tickFormat={tickFormat} />}\n            <ChartStack height={height} width={width}>\n              {processedData.map((datum, index) => (\n                <ChartArea\n                  height={height}\n                  width={width}\n                  key={index}\n                  data={datum}\n                  style={chartStyle && chartStyle[index]}\n                  name={datum[0]?.description}\n                />\n              ))}\n            </ChartStack>\n          </Chart>\n        ) : (\n          <GraphEmpty height={height} loading={loading} />\n        )}\n      </PrometheusGraphLink>\n    </PrometheusGraph>\n  );\n};\n\nexport const Stack: React.FC<StackProps> = ({\n  namespace,\n  query,\n  samples = DEFAULT_SAMPLES,\n  timeout,\n  timespan = DEFAULT_TIMESPAN,\n  description,\n  ...rest\n}) => {\n  const [utilization, , loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY_RANGE,\n    namespace,\n    query,\n    samples,\n    timeout,\n    timespan,\n  });\n  const data = getRangeVectorStats(utilization, description);\n  const ChartComponent = data?.length === 1 ? AreaChart : StackChart;\n  return <ChartComponent data={data} loading={loading} query={query} {...rest} />;\n};\n\ntype StackProps = AreaChartProps & {\n  namespace?: string;\n  query: string;\n  samples?: number;\n  timeout?: string;\n  timespan?: number;\n  byteDataType?: ByteDataTypes;\n  description: (result: PrometheusResult, index: number) => string;\n};\n"],"sourceRoot":""}