{"version":3,"sources":["webpack:///./packages/dev-console/src/components/import/GitImportForm.tsx","webpack:///./packages/dev-console/src/components/import/devfile/devfileHooks.ts","webpack:///./packages/dev-console/src/components/import/devfile/devfile-utils.ts","webpack:///./packages/dev-console/src/components/import/devfile/DevfileInfo.tsx","webpack:///./packages/dev-console/src/components/import/ImportStrategySection.tsx","webpack:///./packages/dev-console/src/components/import/ImportStrategySelector.tsx","webpack:///./packages/dev-console/src/components/import/ServerlessFxIcon.tsx","webpack:///./packages/dev-console/src/components/import/serverless-function/ServerlessFunctionSection.tsx","webpack:///./packages/dev-console/src/utils/serverless-functions.ts","webpack:///./packages/dev-console/src/components/import/git/DockerSection.tsx","webpack:///./packages/dev-console/src/components/import/devfile/DevfileStrategySection.tsx"],"names":["values","errors","handleSubmit","handleReset","builderImages","status","isSubmitting","dirty","projects","t","searchParams","URLSearchParams","window","location","search","gitRepositoryUrl","get","gitRevision","gitContextDir","formType","importType","git","validated","type","gitType","build","option","buildOption","showFullForm","devfile","default","INVALID","isSample","showAdvancedSections","import","selectedStrategy","DEVFILE","showSecureRouteSectionForDevfile","devfileSuggestedResources","route","spec","tls","onSubmit","direction","sm","flex","alignSelf","defaultSample","url","ref","dir","project","noProjectsAvailable","loaded","data","PIPELINES","DISABLED","className","errorMessage","submitError","submitLabel","sticky","disableSubmit","resetLabel","useDevfileServer","setFieldValue","devfileParseError","setDevfileParseError","parsingDevfile","setParsingDevfile","name","secretResource","smartSlashDir","devfileContent","devfilePath","devfileDataPromise","newDevfileContent","URL","setError","msg","clearError","devfileData","e","console","warn","message","post","then","value","imageStream","buildResource","deployResource","service","template","containers","length","buildGuidanceContainer","ports","env","catch","useDevfileSource","devfileSourceUrl","devfileName","setFieldTouched","recommendedStrategy","detectedFiles","devfileContents","useSelectedDevfileSample","devfileSamples","setDevfileSamples","mounted","samples","find","sample","suffixSlash","val","endsWith","prefixDotSlash","startsWith","getResourceContent","componentName","resourceURI","text","error","gitService","Error","resourcePath","resourceContent","getFileContent","getParsedComponent","currentComponent","component","kubernetes","uri","inlined","openshift","convertURItoInlineYAML","devfileJSON","components","devfileSample","icon","iconClass","displayName","description","tags","iconUrl","sampleRepo","remotes","Object","src","alt","size","map","tag","key","href","setValues","strategies","importStrategies","loadError","showEditImportStrategy","strategyChanged","docker","recommendedValues","strategySections","DOCKERFILE","SERVERLESS_FUNCTION","S2I","recommendedStrategyDescriptions","filePath","dockerfilePath","alertInfo","title","variant","success","strategy","info","warning","handleEditStrategy","current","isInline","isFilled","link","onClick","fieldId","itemList","Devfile","priority","isDisabled","UNSURE","disabledReason","Docker","Source","knativeServiceAccess","group","apiGroup","resource","plural","namespace","verb","canIncludeKnative","push","ServerlessFunction","onSelect","item","label","hasGutter","content","span","isSelected","fill","height","width","viewBox","transform","role","d","setFieldError","image","runtimeImage","setRuntimeImage","setLoaded","setResourceType","helpText","setHelpText","res","KnativeService","runtime","includes","builderEnvs","runtimeEnvs","err","finally","recentTag","extraMargin","selectedBuilderImage","selectedImageTag","SupportedRuntime","notSupportedRuntime","getRuntimeImage","Node","NodeJS","TypeScript","nodejs","Quarkus","java","setValidated","handleDockerfileChange","isDockerFilePresent","isDockerfilePresent","dockerfileStrategy","s","getDockerfileContent","dockerfileContent","port","getContainerPort","containerPort","protocol","placeholder","helpTextInvalid","onBlur","required","dockerfileHasError","fireTelemetryEvent","selectedSample","devfileInfo","projectType","metadata","version","handleDevfileChange","getDevfileContent","client","devfileStrategy"],"mappings":"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","file":"git-import-form-chunk-524a9e272bb88888e554.min.js","sourcesContent":["import * as React from 'react';\nimport { Flex, FlexItem, ValidatedOptions } from '@patternfly/react-core';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { GitProvider, ImportStrategy } from '@console/git-service/src';\nimport PipelineSection from '@console/pipelines-plugin/src/components/import/pipeline/PipelineSection';\nimport { FormBody, FormFooter } from '@console/shared/src/components/form-utils';\nimport { hasSampleQueryParameter } from '../../utils/samples';\nimport AdvancedSection from './advanced/AdvancedSection';\nimport AppSection from './app/AppSection';\nimport DevfileStrategySection from './devfile/DevfileStrategySection';\nimport GitSection from './git/GitSection';\nimport { BuildOptions, GitImportFormData, GitImportFormProps, ImportTypes } from './import-types';\nimport ImportStrategySection from './ImportStrategySection';\nimport SecureRoute from './route/SecureRoute';\nimport { BuildSection } from './section/build-section/BuildSection';\nimport { DeploySection } from './section/deploy-section/DeploySection';\n\nconst GitImportForm: React.FC<\n  FormikProps<FormikValues & GitImportFormData> & GitImportFormProps\n> = ({\n  values,\n  errors,\n  handleSubmit,\n  handleReset,\n  builderImages,\n  status,\n  isSubmitting,\n  dirty,\n  projects,\n}) => {\n  const { t } = useTranslation();\n  const searchParams = new URLSearchParams(window.location.search);\n  const gitRepositoryUrl = searchParams.get('git.repository');\n  const gitRevision = searchParams.get('git.revision');\n  const gitContextDir = searchParams.get('git.contextDir');\n  const formType = searchParams.get('formType');\n  const importType = searchParams.get('importType');\n  const {\n    git: { validated, type: gitType },\n    build: { option: buildOption },\n  } = values;\n\n  const showFullForm =\n    importType === ImportTypes.devfile ||\n    (validated !== ValidatedOptions.default && gitType !== GitProvider.INVALID);\n\n  const isSample = hasSampleQueryParameter();\n  const showAdvancedSections =\n    importType !== ImportTypes.devfile &&\n    values.import.selectedStrategy.type !== ImportStrategy.DEVFILE &&\n    !isSample;\n  const showSecureRouteSectionForDevfile =\n    (importType === ImportTypes.devfile ||\n      values.import.selectedStrategy.type === ImportStrategy.DEVFILE) &&\n    values?.devfile?.devfileSuggestedResources?.route?.spec?.tls;\n\n  return (\n    <form onSubmit={handleSubmit} data-test-id=\"import-git-form\">\n      <Flex direction={{ default: 'column', sm: 'row' }}>\n        <FlexItem flex={{ default: 'flex_1' }} alignSelf={{ default: 'alignSelfFlexStart' }}>\n          <FormBody>\n            <GitSection\n              builderImages={builderImages}\n              defaultSample={\n                gitRepositoryUrl && {\n                  url: gitRepositoryUrl,\n                  ref: gitRevision,\n                  dir: gitContextDir,\n                }\n              }\n              formType={formType}\n              importType={importType}\n            />\n            {showFullForm && (\n              <>\n                {importType === ImportTypes.devfile ? (\n                  <DevfileStrategySection />\n                ) : (\n                  <ImportStrategySection builderImages={builderImages} />\n                )}\n                <AppSection\n                  project={values.project}\n                  noProjectsAvailable={projects.loaded && _.isEmpty(projects.data)}\n                />\n                {formType !== 'sample' && importType !== ImportTypes.devfile && (\n                  <BuildSection values={values} />\n                )}\n                {showAdvancedSections && (\n                  <>\n                    {buildOption === BuildOptions.PIPELINES && (\n                      <PipelineSection builderImages={builderImages} />\n                    )}\n                    {buildOption !== BuildOptions.DISABLED && <DeploySection values={values} />}\n\n                    <AdvancedSection values={values} />\n                  </>\n                )}\n                {showSecureRouteSectionForDevfile && (\n                  <div className=\"pf-v5-c-form co-m-pane__form\">\n                    <SecureRoute />\n                  </div>\n                )}\n              </>\n            )}\n          </FormBody>\n        </FlexItem>\n      </Flex>\n      <FormFooter\n        handleReset={handleReset}\n        errorMessage={status && status.submitError}\n        isSubmitting={isSubmitting}\n        submitLabel={t('devconsole~Create')}\n        sticky\n        disableSubmit={!dirty || !_.isEmpty(errors) || isSubmitting}\n        resetLabel={t('devconsole~Cancel')}\n      />\n    </form>\n  );\n};\n\nexport default GitImportForm;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { getLimitsDataFromResource } from '@console/shared/src';\nimport { SAMPLE_APPLICATION_GROUP } from '../../../const';\nimport { DevfileSuggestedResources } from '../import-types';\nimport { createComponentName } from '../import-validation-utils';\nimport { DevfileSample } from './devfile-types';\nimport { convertURItoInlineYAML, prefixDotSlash, suffixSlash } from './devfile-utils';\n\nexport const useDevfileServer = (\n  values: FormikValues,\n  setFieldValue: (name: string, value: any, shouldValidate?: boolean) => any,\n): [boolean, string] => {\n  const { t } = useTranslation();\n  const [devfileParseError, setDevfileParseError] = React.useState<string>(null);\n  const [parsingDevfile, setParsingDevfile] = React.useState<boolean>(false);\n\n  const {\n    name,\n    git: { url, ref, dir, type, secretResource },\n    devfile,\n  } = values;\n  const smartSlashDir = prefixDotSlash(suffixSlash(dir));\n\n  const { devfileContent, devfilePath } = devfile || {};\n\n  const devfileDataPromise = React.useMemo(async () => {\n    if (!name || !url || !devfileContent) {\n      return null;\n    }\n\n    const newDevfileContent = await convertURItoInlineYAML(\n      devfileContent,\n      url,\n      ref,\n      dir,\n      type,\n      secretResource,\n    );\n\n    return {\n      name,\n      git: { URL: url, ref, dir: prefixDotSlash(dir) },\n      devfile: { devfileContent: newDevfileContent, devfilePath: `${smartSlashDir}${devfilePath}` },\n    };\n  }, [name, url, devfileContent, ref, dir, type, secretResource, smartSlashDir, devfilePath]);\n\n  React.useEffect(() => {\n    const setError = (msg) => {\n      setDevfileParseError(msg);\n      setFieldValue('devfile.devfileHasError', true);\n    };\n    const clearError = () => {\n      setDevfileParseError(null);\n      setFieldValue('devfile.devfileHasError', false);\n    };\n\n    const getDevfileResources = async () => {\n      let devfileData;\n      try {\n        devfileData = await devfileDataPromise;\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Could not fetch devfile resource:', e);\n        setError(e.message || t('devconsole~Could not fetch devfile resources.'));\n        return;\n      }\n\n      if (devfileData === null) {\n        clearError();\n        return;\n      }\n\n      setParsingDevfile(true);\n      setFieldValue('devfile.devfileSuggestedResources', null);\n      coFetchJSON\n        .post('/api/devfile/', devfileData)\n        .then((value: DevfileSuggestedResources) => {\n          setParsingDevfile(false);\n          if (value) {\n            clearError();\n            const { imageStream, buildResource, deployResource, service, route } = value;\n\n            if (deployResource.spec?.template?.spec?.containers?.length > 0) {\n              const buildGuidanceContainer = deployResource.spec.template.spec.containers[0];\n\n              setFieldValue('image.ports', buildGuidanceContainer.ports || [], false);\n              setFieldValue('deployment.env', buildGuidanceContainer.env || [], false);\n              setFieldValue('limits', getLimitsDataFromResource(deployResource), false);\n\n              delete deployResource.spec.template.spec.containers;\n            }\n\n            setFieldValue('devfile.devfileSuggestedResources', {\n              imageStream,\n              buildResource,\n              deployResource,\n              service,\n              route,\n            });\n            return;\n          }\n\n          // Failed to parse response, error out\n          setError(t('devconsole~The Devfile in your Git repository is invalid.'));\n        })\n        .catch((e) => {\n          setParsingDevfile(false);\n          setError(e.message || t('devconsole~The Devfile in your Git repository is invalid.'));\n        });\n    };\n\n    getDevfileResources();\n  }, [devfileDataPromise, setFieldValue, t]);\n\n  return [parsingDevfile, devfileParseError];\n};\n\nexport const useDevfileSource = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const devfileSourceUrl = searchParams.get('git.repository');\n  const devfileName = searchParams.get('devfileName');\n  const formType = searchParams.get('formType');\n  const { values, setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const {\n    import: { recommendedStrategy },\n    devfile,\n  } = values;\n\n  React.useEffect(() => {\n    if (devfileSourceUrl && !devfile.devfileContent) {\n      setFieldValue('devfile.devfileSourceUrl', devfileSourceUrl);\n      setFieldValue('devfile.devfilePath', recommendedStrategy?.detectedFiles?.[0]);\n      setFieldValue('docker.dockerfilePath', 'Dockerfile');\n      if (formType === 'sample') {\n        setFieldValue('name', createComponentName(devfileName));\n        setFieldValue('application.initial', SAMPLE_APPLICATION_GROUP);\n        setFieldValue('application.name', SAMPLE_APPLICATION_GROUP);\n        setFieldValue('application.selectedKey', SAMPLE_APPLICATION_GROUP);\n      }\n    }\n  }, [\n    devfileSourceUrl,\n    devfileName,\n    formType,\n    setFieldValue,\n    setFieldTouched,\n    recommendedStrategy,\n    devfile.devfileContents,\n    devfile.devfileContent,\n  ]);\n};\n\nexport const useSelectedDevfileSample = () => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const devfileName = searchParams.get('devfileName');\n  const [devfileSamples, setDevfileSamples] = React.useState<DevfileSample[]>();\n\n  React.useEffect(() => {\n    let mounted = true;\n    coFetchJSON('/api/devfile/samples/?registry=https://registry.devfile.io')\n      .then((samples: DevfileSample[]) => {\n        if (mounted) setDevfileSamples(samples);\n      })\n      .catch(() => {\n        if (mounted) setDevfileSamples(null);\n      });\n\n    return () => (mounted = false);\n  }, []);\n\n  return React.useMemo(() => devfileSamples?.find((sample) => sample.name === devfileName), [\n    devfileSamples,\n    devfileName,\n  ]);\n};\n","import i18n from 'i18next';\nimport * as _ from 'lodash';\nimport { GitProvider, getGitService } from '@console/git-service/src';\nimport { coFetch } from '@console/internal/co-fetch';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { safeYAMLToJS, safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { Devfile, DevfileComponent } from './devfile-types';\n\nexport const suffixSlash = (val: string) => (val.endsWith('/') ? val : `${val}/`);\n\nexport const prefixDotSlash = (val) => (val.startsWith('/') ? `.${val}` : val);\n\nexport const getResourceContent = async (\n  componentName: string,\n  resourceURI: string,\n  url: string,\n  ref: string,\n  dir: string,\n  type: GitProvider,\n  secretResource?: K8sResourceKind,\n): Promise<string> => {\n  if (resourceURI.startsWith('http://') || resourceURI.startsWith('https://')) {\n    try {\n      const response = await coFetch(resourceURI);\n      return response.text();\n    } catch (error) {\n      if (!error.message) {\n        error.message = i18n.t(\n          'devconsole~Could not fetch kubernetes resource \"{{resourceURI}}\" for component \"{{componentName}}\".',\n          { resourceURI, componentName },\n        );\n      }\n      throw error;\n    }\n  }\n\n  const gitService = getGitService(url, type, ref, dir, secretResource);\n  if (!gitService) {\n    throw new Error(\n      i18n.t(\n        'devconsole~Could not fetch kubernetes resource \"{{resourceURI}}\" for component \"{{componentName}}\". Git provider is not supported.',\n        { resourceURI, componentName },\n      ),\n    );\n  }\n\n  let resourcePath;\n  if (resourceURI.startsWith('/')) {\n    resourcePath = resourceURI;\n  } else {\n    const contextDir = suffixSlash(dir);\n    resourcePath = `${contextDir}${resourceURI}`;\n  }\n\n  const resourceContent = await gitService.getFileContent(resourcePath);\n  if (!resourceContent) {\n    throw new Error(\n      i18n.t(\n        'devconsole~Could not fetch kubernetes resource \"{{resourcePath}}\" for component \"{{componentName}}\" from Git repository {{url}}.',\n        { resourcePath, componentName, url },\n      ),\n    );\n  }\n\n  return resourceContent;\n};\n\nexport const getParsedComponent = async (\n  currentComponent: DevfileComponent,\n  url: string,\n  ref: string,\n  dir: string,\n  type: GitProvider,\n  secretResource?: K8sResourceKind,\n): Promise<DevfileComponent> => {\n  let resourceContent;\n  const component = currentComponent;\n  if (component.kubernetes && component.kubernetes.uri) {\n    resourceContent = await getResourceContent(\n      component.name,\n      component.kubernetes.uri,\n      url,\n      ref,\n      dir,\n      type,\n      secretResource,\n    );\n    if (resourceContent) {\n      component.kubernetes = _.omit({ ...component.kubernetes, inlined: resourceContent }, ['uri']);\n    }\n  } else if (component.openshift && component.openshift.uri) {\n    resourceContent = await getResourceContent(\n      component.name,\n      component.openshift.uri,\n      url,\n      ref,\n      dir,\n      type,\n      secretResource,\n    );\n    if (resourceContent) {\n      component.openshift = _.omit({ ...component.openshift, inlined: resourceContent }, ['uri']);\n    }\n  }\n  return component;\n};\n\nexport const convertURItoInlineYAML = async (\n  devfileContent: string,\n  url: string,\n  ref: string,\n  dir: string,\n  type: GitProvider,\n  secretResource?: K8sResourceKind,\n) => {\n  const devfileJSON = safeYAMLToJS(devfileContent) as Devfile;\n  if (devfileJSON?.components?.length > 0) {\n    for (let component of devfileJSON?.components) {\n      // eslint-disable-next-line no-await-in-loop\n      component = await getParsedComponent(component, url, ref, dir, type, secretResource);\n    }\n  }\n\n  return safeJSToYAML(devfileJSON);\n};\n","import * as React from 'react';\nimport { Icon } from '@patternfly/react-core';\nimport { LayerGroupIcon } from '@patternfly/react-icons/dist/esm/icons/layer-group-icon';\nimport { useTranslation } from 'react-i18next';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { ExternalLink } from '@console/internal/components/utils';\nimport { DevfileSample } from './devfile-types';\n\nexport type DevfileInfoProps = {\n  devfileSample: DevfileSample;\n};\n\nconst DevfileInfo: React.FC<DevfileInfoProps> = ({ devfileSample }) => {\n  const { t } = useTranslation();\n  const { icon, iconClass, displayName, description, git, tags } = devfileSample;\n  const iconUrl = iconClass ? getImageForIconClass(iconClass) : icon || '';\n  const sampleRepo = git?.remotes ? Object.values(git.remotes)[0] : '';\n\n  return (\n    <div>\n      <div className=\"co-catalog-item-details\">\n        {iconUrl ? (\n          <div className=\"co-catalog-item-icon\">\n            <span className=\"co-catalog-item-icon__bg\">\n              <img\n                className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n                src={iconUrl}\n                alt={displayName}\n                aria-hidden\n              />\n            </span>\n          </div>\n        ) : (\n          <Icon size=\"xl\">\n            <LayerGroupIcon />\n          </Icon>\n        )}\n        &nbsp;\n        <div>\n          <h2 className=\"co-section-heading co-catalog-item-details__name\">{displayName}</h2>\n          {tags && (\n            <p className=\"co-catalog-item-details__tags\">\n              {tags.map((tag) => (\n                <span className=\"co-catalog-item-details__tag\" key={tag}>\n                  {tag}\n                </span>\n              ))}\n            </p>\n          )}\n        </div>\n      </div>\n      {description && <p className=\"co-catalog-item-details__description\">{description}</p>}\n      {sampleRepo && (\n        <p>\n          {t('devconsole~Sample repository:')} <ExternalLink href={sampleRepo} text={sampleRepo} />\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default DevfileInfo;\n","import * as React from 'react';\nimport {\n  AlertVariant,\n  Alert,\n  ButtonVariant,\n  Button,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { UndoIcon } from '@patternfly/react-icons/dist/esm/icons/undo-icon';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ImportStrategy } from '@console/git-service/src';\nimport { NormalizedBuilderImages } from '../../utils/imagestream-utils';\nimport BuilderSection from './builder/BuilderSection';\nimport DevfileStrategySection from './devfile/DevfileStrategySection';\nimport DockerSection from './git/DockerSection';\nimport ImportStrategySelector from './ImportStrategySelector';\nimport FormSection from './section/FormSection';\nimport ServerlessFunctionSection from './serverless-function/ServerlessFunctionSection';\nimport './ImportStrategySection.scss';\n\nexport interface ImportStrategySectionProps {\n  builderImages: NormalizedBuilderImages;\n}\n\nconst ImportStrategySection: React.FC<ImportStrategySectionProps> = ({ builderImages }) => {\n  const { t } = useTranslation();\n  const { values, setFieldValue, setValues } = useFormikContext<FormikValues>();\n  const {\n    import: {\n      strategies: importStrategies,\n      loaded,\n      loadError,\n      selectedStrategy,\n      showEditImportStrategy,\n      recommendedStrategy,\n      strategyChanged,\n    },\n    devfile,\n    docker,\n  } = values;\n  const recommendedValues = React.useRef<FormikValues>(null);\n\n  const strategySections = React.useMemo(\n    () => ({\n      [ImportStrategy.DEVFILE]: <DevfileStrategySection />,\n      [ImportStrategy.DOCKERFILE]: <DockerSection />,\n      [ImportStrategy.SERVERLESS_FUNCTION]: (\n        <ServerlessFunctionSection builderImages={builderImages} />\n      ),\n      [ImportStrategy.S2I]: <BuilderSection builderImages={builderImages} />,\n    }),\n    [builderImages],\n  );\n\n  const recommendedStrategyDescriptions = React.useMemo(\n    () => ({\n      [ImportStrategy.DEVFILE]: t('devconsole~The Devfile at {{filePath}} is recommended.', {\n        filePath: devfile?.devfilePath,\n      }),\n      [ImportStrategy.SERVERLESS_FUNCTION]: t(\n        'devconsole~The Serverless function strategy is recommended.',\n      ),\n      [ImportStrategy.DOCKERFILE]: t('devconsole~The Dockerfile at {{filePath}} is recommended.', {\n        filePath: docker?.dockerfilePath,\n      }),\n      [ImportStrategy.S2I]: t('devconsole~A Builder Image is recommended.'),\n    }),\n    [devfile, docker, t],\n  );\n\n  const alertInfo = React.useMemo(() => {\n    let title;\n    let description;\n    let variant;\n    if (loaded && !loadError && importStrategies.length > 0) {\n      variant = AlertVariant.success;\n      if (recommendedStrategy && !strategyChanged) {\n        if (importStrategies.length > 1) {\n          title = t('devconsole~Multiple import strategies detected');\n        } else if (importStrategies.length === 1) {\n          title = t('devconsole~{{strategy}} detected.', { strategy: recommendedStrategy.name });\n        }\n        description = recommendedStrategyDescriptions[recommendedStrategy.type];\n      } else if (strategyChanged) {\n        title = t('devconsole~Import strategy changed to {{strategy}}', {\n          strategy: selectedStrategy.name,\n        });\n        description = '';\n        variant = AlertVariant.info;\n      }\n    } else {\n      variant = AlertVariant.warning;\n      title = t('devconsole~Unable to detect import strategy');\n      description = (\n        <span>\n          {loadError && (\n            <>\n              <p>{t('devconsole~Error: {{loadError}}', { loadError })}</p> <br />\n            </>\n          )}\n          <p>{t('devconsole~Select from the options below.')}</p>\n        </span>\n      );\n    }\n    return { title, description, variant };\n  }, [\n    loaded,\n    loadError,\n    importStrategies.length,\n    recommendedStrategy,\n    strategyChanged,\n    recommendedStrategyDescriptions,\n    t,\n    selectedStrategy.name,\n  ]);\n\n  const handleEditStrategy = React.useCallback(() => {\n    if (showEditImportStrategy) {\n      setValues(recommendedValues.current);\n    } else {\n      recommendedValues.current = values;\n    }\n    setFieldValue('import.showEditImportStrategy', !showEditImportStrategy);\n    setFieldValue('import.strategyChanged', false);\n  }, [setFieldValue, setValues, showEditImportStrategy, values]);\n\n  return (\n    <>\n      <FormSection>\n        <Alert isInline variant={alertInfo.variant} title={alertInfo.title}>\n          {alertInfo.description}\n        </Alert>\n        {recommendedStrategy && (\n          <Split>\n            <SplitItem isFilled />\n            <SplitItem>\n              <Button\n                variant={ButtonVariant.link}\n                className=\"odc-import-strategy-section__edit-strategy-button\"\n                onClick={handleEditStrategy}\n                icon={!showEditImportStrategy ? <PencilAltIcon /> : <UndoIcon />}\n                data-test=\"import-strategy-button\"\n              >\n                {!showEditImportStrategy\n                  ? t('devconsole~Edit Import Strategy')\n                  : t('devconsole~Revert to recommended')}\n              </Button>\n            </SplitItem>\n          </Split>\n        )}\n      </FormSection>\n      <div className={recommendedStrategy ? 'odc-import-strategy-section__strategy-selector' : ''}>\n        {showEditImportStrategy && (\n          <>\n            <FormSection>\n              <ImportStrategySelector />\n            </FormSection>\n            <br />\n          </>\n        )}\n        {strategySections[selectedStrategy.type]}\n      </div>\n    </>\n  );\n};\n\nexport default ImportStrategySection;\n","import * as React from 'react';\nimport { FormGroup, Grid, GridItem, Tile, Tooltip } from '@patternfly/react-core';\nimport { CubeIcon } from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { GitAltIcon } from '@patternfly/react-icons/dist/esm/icons/git-alt-icon';\nimport { LayerGroupIcon } from '@patternfly/react-icons/dist/esm/icons/layer-group-icon';\nimport { StarIcon } from '@patternfly/react-icons/dist/esm/icons/star-icon';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { useAccessReview } from '@console/dynamic-plugin-sdk/src';\nimport { GitProvider, ImportStrategy } from '@console/git-service/src';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport { ServerlessBuildStrategyType } from '@console/knative-plugin/src';\nimport { FLAG_KNATIVE_SERVING_SERVICE } from '@console/knative-plugin/src/const';\nimport { ServiceModel as ksvcModel } from '@console/knative-plugin/src/models';\nimport { getFieldId, useFlag, useFormikValidationFix } from '@console/shared/src';\nimport ServerlessFxIcon from './ServerlessFxIcon';\nimport './ImportStrategySelector.scss';\n\nconst ImportStrategySelector: React.FC = () => {\n  const { t } = useTranslation();\n  const {\n    values: {\n      import: { recommendedStrategy, selectedStrategy },\n      build: { strategy },\n      git: { type },\n    },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId('import.selectedStrategy', 'importStrategySelect');\n\n  type ItemListType = {\n    name: string;\n    type: ImportStrategy;\n    build: BuildStrategyType | ServerlessBuildStrategyType;\n    priority: number;\n    detectedFiles: string[];\n    icon: React.ReactNode;\n    isDisabled?: boolean;\n    disabledReason?: React.ReactNode;\n  };\n\n  const itemList: ItemListType[] = [\n    {\n      name: 'Devfile',\n      type: ImportStrategy.DEVFILE,\n      build: BuildStrategyType.Devfile,\n      priority: 2,\n      detectedFiles: [],\n      icon: <LayerGroupIcon />,\n      isDisabled: type === GitProvider.UNSURE,\n      disabledReason:\n        type === GitProvider.UNSURE\n          ? t('devconsole~Could not get Devfile for an unknown Git type')\n          : null,\n    },\n    {\n      name: 'Dockerfile',\n      type: ImportStrategy.DOCKERFILE,\n      build: BuildStrategyType.Docker,\n      priority: 1,\n      detectedFiles: [],\n      icon: <CubeIcon />,\n    },\n    {\n      name: 'Builder Image',\n      type: ImportStrategy.S2I,\n      build: BuildStrategyType.Source,\n      priority: 0,\n      detectedFiles: [],\n      icon: <GitAltIcon />,\n    },\n  ];\n\n  const [knativeServiceAccess] = useAccessReview({\n    group: ksvcModel.apiGroup,\n    resource: ksvcModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  const canIncludeKnative = useFlag(FLAG_KNATIVE_SERVING_SERVICE) && knativeServiceAccess;\n\n  if (recommendedStrategy?.type === ImportStrategy.SERVERLESS_FUNCTION && canIncludeKnative) {\n    itemList.push({\n      name: 'Serverless Function',\n      type: ImportStrategy.SERVERLESS_FUNCTION,\n      build: ServerlessBuildStrategyType.ServerlessFunction,\n      priority: 3,\n      detectedFiles: [],\n      icon: <ServerlessFxIcon />,\n    });\n  }\n\n  const onSelect = React.useCallback(\n    (item) => {\n      setFieldValue('import.selectedStrategy.name', item.name);\n      setFieldValue('import.selectedStrategy.type', item.type);\n      setFieldValue('import.selectedStrategy.priority', item.priority);\n      setFieldValue('import.selectedStrategy.detectedFiles', item.detectedFiles);\n      setFieldValue('build.strategy', item.build);\n      setFieldValue('import.strategyChanged', false);\n    },\n    [setFieldValue],\n  );\n\n  useFormikValidationFix(strategy);\n\n  return (\n    <FormGroup fieldId={fieldId} label={t('devconsole~Import Strategy')}>\n      <Grid hasGutter>\n        {itemList.map((item) =>\n          item.disabledReason ? (\n            <Tooltip content={item.disabledReason}>\n              <GridItem span={4} key={item.name}>\n                <Tile\n                  className=\"odc-import-strategy-selector__tile\"\n                  data-test={`import-strategy-${item.name}`}\n                  title={item.name}\n                  icon={item.icon}\n                  onClick={() => onSelect(item)}\n                  isSelected={selectedStrategy.type === item.type}\n                  isDisabled={item.isDisabled}\n                >\n                  {recommendedStrategy?.type === item.type && (\n                    <span className=\"odc-import-strategy-selector__recommended\">\n                      <StarIcon />\n                    </span>\n                  )}\n                </Tile>\n              </GridItem>\n            </Tooltip>\n          ) : (\n            <GridItem span={4} key={item.name}>\n              <Tile\n                className=\"odc-import-strategy-selector__tile\"\n                data-test={`import-strategy-${item.name}`}\n                title={item.name}\n                icon={item.icon}\n                onClick={() => onSelect(item)}\n                isSelected={selectedStrategy.type === item.type}\n                isDisabled={item.isDisabled}\n              >\n                {recommendedStrategy?.type === item.type && (\n                  <span className=\"odc-import-strategy-selector__recommended\">\n                    <StarIcon />\n                  </span>\n                )}\n              </Tile>\n            </GridItem>\n          ),\n        )}\n      </Grid>\n    </FormGroup>\n  );\n};\n\nexport default ImportStrategySelector;\n","import * as React from 'react';\n\nconst ServerlessFxIcon: React.FC<React.HTMLProps<SVGElement>> = (): React.ReactElement => {\n  return (\n    <svg\n      fill=\"currentColor\"\n      height=\"1em\"\n      width=\"1em\"\n      viewBox=\"0 0 17 17\"\n      transform=\"translate(0 4)\"\n      aria-hidden=\"true\"\n      role=\"img\"\n    >\n      <path\n        className=\"st0\"\n        d=\"M10 1.5c-1.4-.7-2.7 0-3.4 1.3-.2.4-.2 1.1-.3 1.7-.6 2.8-1.1 5.7-2 8.5-.2.6-.4 1.3-.9 1.7-.4.3-1 .2-1.5 0-.6-.3-1.1.5-.5.9 1.1.6 2.5.4 3.2-.7.6-1 .9-2.3 1.1-3.4.6-2.6 1.2-5.2 1.7-7.8v-.3c0 .1-.1.2 0 0 0-.1.1-.2.2-.3.4-.7 1.1-1.1 1.9-.7.6.2 1.1-.6.5-.9z\"\n      />\n      <path\n        className=\"st0\"\n        d=\"M4.2 6.2h4.6c.6 0 .6-1 0-1H4.2c-.7 0-.7 1 0 1zM10.5 5.1c-.4 1.9-.7 3.8-1.1 5.6-.1.3-.1.5-.2.8-.1.6.8.9 1 .3.4-1.9.8-3.7 1.2-5.6.1-.3.1-.5.2-.8 0-.6-.9-.9-1.1-.3z\"\n      />\n      <path\n        className=\"st0\"\n        d=\"M10.9 8.5c-.1.2 0 0 0 0 .1-.3.2-.4.3-.6.2-.4.5-.9.9-1.3s.8-.7 1.3-.9c.3-.1.5-.1.8 0 .2 0 .4.1.5.3 0-.1.1.1.1.2v.1c0 .1 0-.1 0 0v.1c0 .1 0-.2 0 0 0 .1 0 .2-.1.3-.2.9-.4 1.8-.5 2.7-.1.7-.3 1.5-.4 2.2-.1.6.8.9 1 .3.3-1.7.7-3.3 1-5 .1-.6.1-1.1-.3-1.6s-1.2-.6-1.8-.6c-.7.1-1.3.4-1.9.8-.8.7-1.4 1.7-1.8 2.6-.2.4 0 .7.3.7.3.1.5-.1.6-.3z\"\n      />\n    </svg>\n  );\n};\n\nexport default ServerlessFxIcon;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { BuilderImage } from '@console/dev-console/src/utils/imagestream-utils';\nimport { getGitService } from '@console/git-service/src';\nimport { evaluateFunc } from '@console/git-service/src/utils/serverless-strategy-detector';\nimport { Loading } from '@console/internal/components/utils';\nimport {\n  getRuntimeImage,\n  notSupportedRuntime,\n  SupportedRuntime,\n} from '../../../utils/serverless-functions';\nimport BuilderImageTagSelector from '../builder/BuilderImageTagSelector';\nimport { Resources } from '../import-types';\nimport { useResourceType } from '../section/useResourceType';\nimport './ServerlessFunctionSection.scss';\n\nconst ServerlessFunctionSection = ({ builderImages }) => {\n  const { t } = useTranslation();\n  const { values, setFieldValue, setFieldError, errors } = useFormikContext<FormikValues>();\n  const {\n    git: { url, type, ref, dir, secretResource },\n    image,\n  } = values;\n  const [runtimeImage, setRuntimeImage] = React.useState<BuilderImage>();\n  const [loaded, setLoaded] = React.useState<boolean>(false);\n  const [, setResourceType] = useResourceType();\n  const [helpText, setHelpText] = React.useState<string>('');\n\n  React.useEffect(() => {\n    const gitService = url && getGitService(url, type, ref, dir, secretResource);\n    gitService &&\n      evaluateFunc(gitService)\n        .then((res) => {\n          setResourceType(Resources.KnativeService);\n          setRuntimeImage(getRuntimeImage(res.values.runtime as SupportedRuntime, builderImages));\n          if (notSupportedRuntime.includes(res.values.runtime)) {\n            setHelpText(\n              t('devconsole~Support for {{runtime}} is not yet available.', {\n                runtime: res.values.runtime,\n              }),\n            );\n          } else {\n            setHelpText(\n              t(\n                'devconsole~Unsupported Runtime detected. Please update the Repository URL or change the Build Strategy to continue.',\n              ),\n            );\n          }\n          setFieldValue('resources', Resources.KnativeService);\n          setFieldValue('build.env', res.values.builderEnvs);\n          setFieldValue('deployment.env', res.values.runtimeEnvs);\n        })\n        .catch((err) => {\n          // eslint-disable-next-line no-console\n          console.warn('Error fetching Serverless Function YAML: ', err);\n          setFieldError('ServerlessFunction', err.message);\n        })\n        .finally(() => {\n          setLoaded(true);\n          setFieldValue('import.knativeFuncLoaded', true);\n        });\n  }, [\n    setFieldValue,\n    setFieldError,\n    url,\n    type,\n    ref,\n    dir,\n    secretResource,\n    setResourceType,\n    builderImages,\n    setHelpText,\n    t,\n  ]);\n\n  React.useEffect(() => {\n    if (loaded && runtimeImage) {\n      setFieldValue('image.tag', runtimeImage?.recentTag?.name);\n      setFieldValue('image.selected', runtimeImage?.name);\n      setFieldValue('image.recommended', runtimeImage?.name);\n    }\n  }, [runtimeImage, setFieldValue, loaded]);\n\n  React.useEffect(() => {\n    if (loaded && !runtimeImage) {\n      setFieldError('ServerlessFunction', 'Unsupported Runtime detected');\n    }\n  }, [setFieldError, loaded, runtimeImage, errors]);\n\n  if (loaded && !runtimeImage) {\n    return (\n      <FormSection>\n        <Alert\n          className=\"odc-serverless-function-strategy-section__error-alert\"\n          isInline\n          variant=\"danger\"\n          title={t('devconsole~Import is not possible.')}\n        >\n          {helpText}\n        </Alert>\n      </FormSection>\n    );\n  }\n\n  return loaded ? (\n    <FormSection extraMargin>\n      <BuilderImageTagSelector selectedBuilderImage={runtimeImage} selectedImageTag={image.tag} />\n    </FormSection>\n  ) : (\n    <Loading />\n  );\n};\n\nexport default ServerlessFunctionSection;\n","import { BuilderImage, NormalizedBuilderImages } from './imagestream-utils';\n\nexport enum SupportedRuntime {\n  Node = 'node',\n  NodeJS = 'nodejs',\n  TypeScript = 'typescript',\n  Quarkus = 'quarkus',\n}\n\nexport const notSupportedRuntime = ['go', 'rust', 'springboot', 'python'];\n\nexport const getRuntimeImage = (\n  runtime: SupportedRuntime,\n  builderImages: NormalizedBuilderImages,\n): BuilderImage => {\n  switch (runtime) {\n    case SupportedRuntime.Node:\n      return builderImages.nodejs;\n    case SupportedRuntime.NodeJS:\n      return builderImages.nodejs;\n    case SupportedRuntime.TypeScript:\n      return builderImages.nodejs;\n    case SupportedRuntime.Quarkus:\n      return builderImages.java;\n    default:\n      return undefined;\n  }\n};\n","import * as React from 'react';\nimport { Icon, TextInputTypes, ValidatedOptions } from '@patternfly/react-core';\nimport { CubeIcon } from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { DockerFileParser, getGitService, ImportStrategy } from '@console/git-service/src';\nimport { InputField } from '@console/shared';\nimport { GitImportFormData } from '../import-types';\nimport FormSection from '../section/FormSection';\n\nconst DockerSection: React.FC = () => {\n  const { t } = useTranslation();\n  const { values, setFieldValue, setFieldTouched } = useFormikContext<\n    FormikValues & GitImportFormData\n  >();\n  const {\n    import: { showEditImportStrategy, strategies, recommendedStrategy },\n    git: { url, type, ref, dir, secretResource },\n    image: { ports },\n    docker,\n    formType,\n  } = values;\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n\n  const handleDockerfileChange = React.useCallback(async () => {\n    const gitService = getGitService(\n      url,\n      type,\n      ref,\n      dir,\n      secretResource,\n      null,\n      docker.dockerfilePath,\n    );\n    const isDockerFilePresent = gitService && (await gitService.isDockerfilePresent());\n    if (docker.dockerfilePath && isDockerFilePresent) {\n      setValidated(ValidatedOptions.success);\n      setFieldValue('docker.dockerfileHasError', false);\n    } else {\n      setValidated(ValidatedOptions.error);\n      setFieldValue('docker.dockerfileHasError', true);\n    }\n  }, [dir, docker.dockerfilePath, ref, secretResource, setFieldValue, type, url]);\n\n  const helpText = React.useMemo(() => {\n    if (validated === ValidatedOptions.success) {\n      return t('devconsole~Validated');\n    }\n    if (validated === ValidatedOptions.error) {\n      return t('devconsole~Dockerfile not detected');\n    }\n    return t(\n      'devconsole~Allows the builds to use a different path to locate your Dockerfile, relative to the Context Dir field.',\n    );\n  }, [t, validated]);\n\n  React.useEffect(() => {\n    if (recommendedStrategy && recommendedStrategy.type !== ImportStrategy.DOCKERFILE) {\n      const dockerfileStrategy = strategies.find((s) => s.type === ImportStrategy.DOCKERFILE);\n      if (dockerfileStrategy) {\n        setFieldValue('import.selectedStrategy.detectedFiles', dockerfileStrategy.detectedFiles);\n        setFieldValue('docker.dockerfilePath', dockerfileStrategy.detectedFiles?.[0]);\n        handleDockerfileChange();\n        validated === ValidatedOptions.success\n          ? setFieldValue('import.strategyChanged', true)\n          : setFieldValue('import.strategyChanged', false);\n      }\n      setFieldTouched('docker.dockerfilePath', true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [recommendedStrategy, setFieldValue, strategies]);\n\n  React.useEffect(() => {\n    const gitService =\n      url && getGitService(url, type, ref, dir, secretResource, null, docker.dockerfilePath);\n    gitService &&\n      gitService.getDockerfileContent().then((dockerfileContent) => {\n        if (dockerfileContent) {\n          const parser = new DockerFileParser(dockerfileContent);\n          const port = parser.getContainerPort();\n          port &&\n            setFieldValue('image.ports', [...ports, { containerPort: port, protocol: 'TCP' }]);\n        }\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [docker.dockerfilePath, url]);\n\n  return (\n    <FormSection>\n      {showEditImportStrategy && (\n        <InputField\n          type={TextInputTypes.text}\n          name=\"docker.dockerfilePath\"\n          label={t('devconsole~Dockerfile path')}\n          placeholder={t('devconsole~Enter Dockerfile path')}\n          helpText={helpText}\n          helpTextInvalid={helpText}\n          validated={validated}\n          onBlur={() => {\n            handleDockerfileChange();\n            validated === ValidatedOptions.success\n              ? setFieldValue('import.strategyChanged', true)\n              : setFieldValue('import.strategyChanged', false);\n          }}\n          required\n        />\n      )}\n      {formType !== 'edit' && !docker.dockerfileHasError && (\n        <div className=\"co-catalog-item-details\">\n          <Icon size=\"xl\">\n            <CubeIcon />\n          </Icon>\n          &nbsp;\n          <div>\n            <h2 className=\"co-section-heading co-catalog-item-details__name\">\n              {t('devconsole~Dockerfile')}\n            </h2>\n          </div>\n        </div>\n      )}\n    </FormSection>\n  );\n};\n\nexport default DockerSection;\n","import * as React from 'react';\nimport { Alert, TextInputTypes, ValidatedOptions } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { getGitService, ImportStrategy, GitProvider } from '@console/git-service/src';\nimport { InputField } from '@console/shared/src';\nimport { useTelemetry } from '@console/shared/src/hooks/useTelemetry';\nimport { safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { ImportTypes, SampleRuntime } from '../import-types';\nimport FormSection from '../section/FormSection';\nimport { useDevfileServer, useDevfileSource, useSelectedDevfileSample } from './devfileHooks';\nimport DevfileInfo from './DevfileInfo';\nimport './DevfileStrategySection.scss';\n\nconst DevfileStrategySection: React.FC = () => {\n  const { t } = useTranslation();\n  const { values, setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fireTelemetryEvent = useTelemetry();\n  const {\n    import: { showEditImportStrategy, strategies, recommendedStrategy, selectedStrategy },\n    git: { url, type, ref, dir, secretResource },\n    devfile,\n  } = values;\n  const [, devfileParseError] = useDevfileServer(values, setFieldValue);\n  useDevfileSource();\n  const selectedSample = useSelectedDevfileSample();\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const searchParams = new URLSearchParams(window.location.search);\n  const importType = searchParams.get('importType');\n\n  const devfileInfo = React.useMemo(() => {\n    let info;\n    if (selectedSample) {\n      info = selectedSample;\n      setFieldValue('devfile.devfileProjectType', SampleRuntime[selectedSample.projectType]);\n    } else if (devfile.devfileContent) {\n      const devfileJSON = safeYAMLToJS(devfile.devfileContent);\n      info = {\n        displayName: devfileJSON.metadata?.name || 'Devfile',\n        tags: devfileJSON.metadata?.version ? [devfileJSON.metadata.version] : [],\n        iconClass: devfileJSON.metadata?.name ? `icon-${devfileJSON.metadata?.name}` : '',\n      };\n    }\n    return info;\n  }, [selectedSample, devfile.devfileContent, setFieldValue]);\n\n  const handleDevfileChange = React.useCallback(async () => {\n    const gitService = getGitService(url, type, ref, dir, secretResource, devfile.devfilePath);\n    const devfileContents = gitService && (await gitService.getDevfileContent());\n    if (!devfileContents) {\n      setFieldValue('devfile.devfileContent', null);\n      setFieldValue('devfile.devfileHasError', true);\n      setValidated(ValidatedOptions.error);\n    } else {\n      if (selectedSample != null) {\n        fireTelemetryEvent('Download Devfile from Git', {\n          client: 'openshift-console',\n          devfileName: selectedSample.name,\n        });\n      }\n\n      setFieldValue('devfile.devfileContent', devfileContents);\n      setFieldValue('devfile.devfileHasError', false);\n      setValidated(ValidatedOptions.success);\n    }\n  }, [\n    devfile,\n    dir,\n    fireTelemetryEvent,\n    ref,\n    secretResource,\n    selectedSample,\n    setFieldValue,\n    type,\n    url,\n  ]);\n\n  const helpText = React.useMemo(() => {\n    if (validated === ValidatedOptions.success) {\n      return t('devconsole~Validated');\n    }\n    if (validated === ValidatedOptions.error) {\n      if (type === GitProvider.UNSURE) {\n        return t('devconsole~Could not get Devfile for an unknown Git type');\n      }\n      return t('devconsole~Devfile not detected');\n    }\n    return t(\n      'devconsole~Allows the builds to use a different path to locate your Devfile, relative to the Context Dir field',\n    );\n  }, [t, type, validated]);\n\n  React.useEffect(() => {\n    if (\n      importType !== ImportTypes.devfile &&\n      recommendedStrategy &&\n      recommendedStrategy.type !== ImportStrategy.DEVFILE\n    ) {\n      const devfileStrategy = strategies.find((s) => s.type === ImportStrategy.DEVFILE);\n      if (devfileStrategy) {\n        setFieldValue('import.selectedStrategy.detectedFiles', devfileStrategy.detectedFiles);\n        setFieldValue('devfile.devfilePath', devfileStrategy.detectedFiles?.[0]);\n        setFieldValue('docker.dockerfilePath', 'Dockerfile');\n        handleDevfileChange();\n        validated === ValidatedOptions.success\n          ? setFieldValue('import.strategyChanged', true)\n          : setFieldValue('import.strategyChanged', false);\n      }\n      setFieldTouched('devfile.devfilePath', true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [recommendedStrategy, setFieldValue, strategies]);\n\n  React.useEffect(() => {\n    (importType === ImportTypes.devfile || selectedStrategy.type === ImportStrategy.DEVFILE) &&\n      devfile.devfilePath &&\n      handleDevfileChange();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [importType, devfile.devfilePath, selectedStrategy.type]);\n\n  return (\n    <>\n      {devfileParseError && (\n        <FormSection>\n          <Alert\n            isInline\n            className=\"odc-devfile-strategy-section__error-alert\"\n            variant=\"danger\"\n            title={t('devconsole~Import is not possible.')}\n          >\n            {devfileParseError}\n          </Alert>\n        </FormSection>\n      )}\n      {showEditImportStrategy && importType !== 'devfile' && (\n        <FormSection>\n          <InputField\n            type={TextInputTypes.text}\n            name=\"devfile.devfilePath\"\n            label={t('devconsole~Devfile Path')}\n            placeholder={t('devconsole~Enter Devfile path')}\n            helpText={helpText}\n            helpTextInvalid={helpText}\n            data-test=\"git-form-devfile-path-input\"\n            validated={validated}\n            onBlur={() => {\n              handleDevfileChange();\n              validated === ValidatedOptions.success\n                ? setFieldValue('import.strategyChanged', true)\n                : setFieldValue('import.strategyChanged', false);\n            }}\n            required\n          />\n        </FormSection>\n      )}\n      {devfileInfo && <DevfileInfo devfileSample={devfileInfo} />}\n    </>\n  );\n};\n\nexport default DevfileStrategySection;\n"],"sourceRoot":""}