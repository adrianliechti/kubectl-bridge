{"version":3,"sources":["webpack:///./public/components/user.tsx","webpack:///./packages/console-shared/src/hooks/oauth.ts"],"names":["tableColumnClasses","columnClass","UserKebab","startImpersonate","user","t","navigate","actions","_kind","obj","label","metadata","callback","name","window","SERVER_FLAGS","basePath","accessReview","group","resource","verb","factory","common","kind","UserTableRow","className","fullName","identities","identity","key","UsersHelpText","EmptyMsg","title","oAuthResourcePath","NoDataEmptyMsgDetail","canEditIdentityProviders","oauth","oauthLoaded","spec","identityProviders","length","to","variant","NoDataEmptyMsg","UserList","props","UserTableHeader","sortField","transforms","displayName","Header","Row","virtualize","UserPage","helpText","ListComponent","canCreate","RoleBindingsTab","showTitle","staticFilters","UserDetails","text","UserDetailsPage","menuActions","pages","details","editYaml","roles","useCanEditIdentityProviders","apiGroup","plural","useOAuthData","canEdit","isList","namespaced"],"mappings":"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","file":"user-chunk-52d1a63470d883ada292.min.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom-v5-compat';\nimport * as _ from 'lodash-es';\nimport { Button, TextContent } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\n\nimport { useCanEditIdentityProviders, useOAuthData } from '@console/shared/src/hooks/oauth';\nimport * as UIActions from '../actions/ui';\nimport { OAuthModel, UserModel } from '../models';\nimport { K8sKind, referenceForModel, UserKind } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport { RoleBindingsPage } from './RBAC';\nimport {\n  Kebab,\n  KebabAction,\n  ConsoleEmptyState,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  resourcePathFromModel,\n} from './utils';\n\nimport { useTranslation } from 'react-i18next';\n\nconst tableColumnClasses = ['', '', 'pf-m-hidden pf-m-visible-on-md', Kebab.columnClass];\n\nconst UserKebab_: React.FC<UserKebabProps & UserKebabDispatchProps> = ({\n  user,\n  startImpersonate,\n}) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const impersonateAction: KebabAction = (_kind: K8sKind, obj: UserKind) => ({\n    label: t('public~Impersonate User {{name}}', obj.metadata),\n    callback: () => {\n      startImpersonate('User', obj.metadata.name);\n      navigate(window.SERVER_FLAGS.basePath);\n    },\n    // Must use API group authorization.k8s.io, NOT user.openshift.io\n    // See https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation\n    accessReview: {\n      group: 'authorization.k8s.io',\n      resource: 'users',\n      name: obj.metadata.name,\n      verb: 'impersonate',\n    },\n  });\n  return (\n    <ResourceKebab\n      actions={[impersonateAction, ...Kebab.factory.common]}\n      kind={referenceForModel(UserModel)}\n      resource={user}\n    />\n  );\n};\n\nconst UserKebab = connect<{}, UserKebabDispatchProps, UserKebabProps>(null, {\n  startImpersonate: UIActions.startImpersonate,\n})(UserKebab_);\n\nconst UserTableRow: React.FC<RowFunctionArgs<UserKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={referenceForModel(UserModel)} name={obj.metadata.name} />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>{obj.fullName || '-'}</TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {_.map(obj.identities, (identity: string) => (\n          <div key={identity}>{identity}</div>\n        ))}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <UserKebab user={obj} />\n      </TableData>\n    </>\n  );\n};\n\nconst UsersHelpText = () => {\n  const { t } = useTranslation();\n  return <>{t('public~Users are automatically added the first time they log in.')}</>;\n};\n\nconst EmptyMsg = () => {\n  const { t } = useTranslation();\n  return <ConsoleEmptyState title={t('public~No Users found')} />;\n};\nconst oAuthResourcePath = resourcePathFromModel(OAuthModel, 'cluster');\n\nconst NoDataEmptyMsgDetail = () => {\n  const { t } = useTranslation();\n  const canEditIdentityProviders = useCanEditIdentityProviders();\n  const [oauth, oauthLoaded] = useOAuthData(canEditIdentityProviders);\n  return (\n    <TextContent>\n      {canEditIdentityProviders && oauthLoaded ? (\n        oauth?.spec?.identityProviders?.length > 0 ? (\n          <p>\n            <UsersHelpText />\n          </p>\n        ) : (\n          <>\n            <p>\n              {t(\n                'public~Add identity providers (IDPs) to the OAuth configuration to allow others to log in.',\n              )}\n            </p>\n            <p>\n              <Link to={oAuthResourcePath}>\n                <Button variant=\"primary\">{t('public~Add IDP')}</Button>\n              </Link>\n            </p>\n          </>\n        )\n      ) : (\n        <p>\n          <UsersHelpText />\n        </p>\n      )}\n    </TextContent>\n  );\n};\n\nconst NoDataEmptyMsg = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('public~No Users found')}>\n      <NoDataEmptyMsgDetail />\n    </ConsoleEmptyState>\n  );\n};\n\nexport const UserList: React.FC = (props) => {\n  const { t } = useTranslation();\n  const UserTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Full name'),\n        sortField: 'fullName',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Identities'),\n        sortField: 'identities[0]',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n  UserTableHeader.displayName = 'UserTableHeader';\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~Users')}\n      Header={UserTableHeader}\n      Row={UserTableRow}\n      EmptyMsg={EmptyMsg}\n      NoDataEmptyMsg={NoDataEmptyMsg}\n      virtualize\n    />\n  );\n};\n\nexport const UserPage: React.FC<UserPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      title={t('public~Users')}\n      helpText={<UsersHelpText />}\n      kind={referenceForModel(UserModel)}\n      ListComponent={UserList}\n      canCreate={false}\n    />\n  );\n};\n\nconst RoleBindingsTab: React.FC<RoleBindingsTabProps> = ({ obj }) => (\n  <RoleBindingsPage\n    showTitle={false}\n    staticFilters={{ 'role-binding-user': obj.metadata.name }}\n    name={obj.metadata.name}\n    kind={obj.kind}\n  />\n);\n\nconst UserDetails: React.FC<UserDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('public~User details')} />\n      <ResourceSummary resource={obj}>\n        <dt>{t('public~Full name')}</dt>\n        <dd>{obj.fullName || '-'}</dd>\n        <dt>{t('public~Identities')}</dt>\n        <dd>\n          {_.map(obj.identities, (identity: string) => (\n            <div key={identity}>{identity}</div>\n          ))}\n        </dd>\n      </ResourceSummary>\n    </div>\n  );\n};\n\ntype UserKebabDispatchProps = {\n  startImpersonate: (kind: string, name: string) => (dispatch, store) => Promise<void>;\n};\n\ntype UserKebabProps = {\n  user: UserKind;\n};\n\nconst UserDetailsPage_: React.FC<UserKebabDispatchProps> = ({ startImpersonate, ...props }) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const impersonateAction: KebabAction = (_kind: K8sKind, obj: UserKind) => ({\n    label: t('public~Impersonate User {{name}}', obj.metadata),\n    callback: () => {\n      startImpersonate('User', obj.metadata.name);\n      navigate(window.SERVER_FLAGS.basePath);\n    },\n    // Must use API group authorization.k8s.io, NOT user.openshift.io\n    // See https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation\n    accessReview: {\n      group: 'authorization.k8s.io',\n      resource: 'users',\n      name: obj.metadata.name,\n      verb: 'impersonate',\n    },\n  });\n  return (\n    <DetailsPage\n      {...props}\n      kind={referenceForModel(UserModel)}\n      menuActions={[impersonateAction, ...Kebab.factory.common]}\n      pages={[\n        navFactory.details(UserDetails),\n        navFactory.editYaml(),\n        navFactory.roles(RoleBindingsTab),\n      ]}\n    />\n  );\n};\n\nexport const UserDetailsPage = connect<{}, UserKebabDispatchProps>(null, {\n  startImpersonate: UIActions.startImpersonate,\n})(UserDetailsPage_);\n\ntype UserPageProps = {\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype RoleBindingsTabProps = {\n  obj: UserKind;\n};\n\ntype UserDetailsProps = {\n  obj: UserKind;\n};\n","import { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { OAuthModel } from '@console/internal/models';\nimport { OAuthKind, referenceForModel } from '@console/internal/module/k8s';\n\nexport const useCanEditIdentityProviders = () =>\n  useAccessReview({\n    group: OAuthModel.apiGroup,\n    resource: OAuthModel.plural,\n    name: 'cluster',\n    verb: 'patch',\n  });\n\nexport const useOAuthData = (canEdit: boolean) =>\n  useK8sWatchResource<OAuthKind>(\n    canEdit\n      ? {\n          kind: referenceForModel(OAuthModel),\n          isList: false,\n          namespaced: false,\n          name: 'cluster',\n        }\n      : null,\n  );\n"],"sourceRoot":""}