{"version":3,"sources":["webpack:///./public/components/routes/RouteForm.tsx","webpack:///./public/components/routes/RoutePage.tsx","webpack:///./public/components/routes/create-route.tsx","webpack:///./public/components/routes/utils.ts"],"names":["RouteForm","dirty","errors","existingRoute","handleCancel","handleSubmit","heading","isSubmitting","services","setStatus","status","submitLabel","validateForm","values","t","editorType","formData","formEditor","yamlEditor","name","model","onSave","showSamples","submitError","Form","setTimeout","title","helpText","onSubmit","flexLayout","className","formContext","editor","sanitizeTo","yamlData","yamlContext","skipInvalid","lastViewUserSettingKey","noMargin","errorMessage","successMessage","submitSuccess","disableSubmit","YAML","sticky","defaultRouteYAML","get","RoutePage","navigate","ns","namespace","isEditForm","route","routeLoaded","routeLoadError","kind","servicesLoaded","serviceLoadError","isList","loaded","canUpdateHost","group","apiGroup","resource","verb","initialValues","loadError","data","helpers","metadata","spec","host","e","message","validationSchema","enableReinitialize","formikProps","UNNAMED_PORT_KEY","getPortOptions","service","reduce","acc","port","targetPort","protocol","DroppableFileInput","props","loader","then","c","CreateRouteWithTranslation","state","hostname","path","weight","termination","insecureEdgeTerminationPolicy","certificate","key","caCertificate","destinationCACertificate","secure","labels","portOptions","alternateBackends","handleChange","event","value","currentTarget","this","setState","formik","setFieldValue","handleWeightChange","changeService","serviceName","changeTargetPort","toggleSection","checked","changeTermination","newState","Object","assign","changeInsecureTraffic","onCertificateChange","onPrivateKeyChange","onCaCertificateChange","onDestinationCACertificateChange","addAltServiceEntry","onDataChanged","updatedEntry","index","updatedServiceEntriesArray","updatedEntryData","autocompleteFilter","strText","item","alternateServiceIndex","splice","length","serviceOptions","configuredServices","Set","add","availableServiceOptions","has","alternateBackendsList","entryData","type","onClick","removeAltServiceEntry","variant","isInline","AlternateServicesGroup","onChange","htmlFor","disabled","placeholder","id","required","items","dropDownClassName","describedBy","selectedKey","edge","passthrough","reencrypt","None","Redirect","Allow","inputFileData","label","inputFieldHelpText","CreateRoute","setWeight","setName","routeValidationSchema","when","is","convertRouteToEditForm","find","s","to","tls","Array","isArray","map","b","convertEditFormToRoute","selectedPort","createRoteTls","altBackends","serviceData","createAlternateBackends","apiVersion"],"mappings":"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","file":"edit-route-chunk-3c4dbc62df44d3c2b9b1.min.js","sourcesContent":["import * as React from 'react';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { RouteModel } from '@console/internal/models';\nimport { K8sResourceKind, RouteKind } from '@console/internal/module/k8s';\nimport {\n  FlexForm,\n  FormBody,\n  FormFooter,\n  SyncedEditorField,\n  CodeEditorField,\n} from '@console/shared/src';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { CreateRoute } from './create-route';\nimport { convertEditFormToRoute, convertRouteToEditForm } from './utils';\nimport { PageHeading } from '../utils';\n\ntype RouteFormProps = {\n  handleCancel: () => void;\n  heading: string;\n  submitLabel: string;\n  services: K8sResourceKind[];\n  existingRoute?: RouteKind;\n};\n\nexport const RouteForm: React.FC<FormikProps<FormikValues> & RouteFormProps> = ({\n  dirty,\n  errors,\n  existingRoute,\n  handleCancel,\n  handleSubmit,\n  heading,\n  isSubmitting,\n  services,\n  setStatus,\n  status,\n  submitLabel,\n  validateForm,\n  values,\n}) => {\n  const { t } = useTranslation();\n  const { editorType, formData } = values;\n  const LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY = 'console.routeForm.editor.lastView';\n\n  const formEditor = <CreateRoute services={services} existingRoute={existingRoute} />;\n\n  const yamlEditor = (\n    <CodeEditorField name=\"yamlData\" model={RouteModel} onSave={handleSubmit} showSamples />\n  );\n\n  const sanitizeToForm = (yamlData: RouteKind) => {\n    return convertRouteToEditForm(services, yamlData);\n  };\n\n  const sanitizeToYaml = () =>\n    safeJSToYAML(convertEditFormToRoute(formData, existingRoute), 'yamlData', {\n      skipInvalid: true,\n    });\n\n  React.useEffect(() => {\n    setStatus({ submitError: null });\n    if (values.editorType === EditorType.Form) {\n      setTimeout(() => validateForm(), 0);\n    }\n  }, [setStatus, values.editorType, validateForm]);\n\n  return (\n    <>\n      <PageHeading\n        title={heading}\n        helpText={t('public~Routing is a way to make your application publicly visible.')}\n      />\n      <FlexForm onSubmit={handleSubmit}>\n        <FormBody flexLayout className=\"co-m-pane__body--no-top-margin\">\n          <SyncedEditorField\n            name=\"editorType\"\n            formContext={{\n              name: 'formData',\n              editor: formEditor,\n              sanitizeTo: sanitizeToForm,\n            }}\n            yamlContext={{\n              name: 'yamlData',\n              editor: yamlEditor,\n              sanitizeTo: sanitizeToYaml,\n            }}\n            lastViewUserSettingKey={LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY}\n            noMargin\n          />\n        </FormBody>\n        <FormFooter\n          handleCancel={handleCancel}\n          errorMessage={status?.submitError}\n          successMessage={status?.submitSuccess}\n          isSubmitting={isSubmitting}\n          submitLabel={submitLabel}\n          disableSubmit={\n            (editorType === EditorType.YAML ? !dirty : !dirty || !_.isEmpty(errors)) || isSubmitting\n          }\n          sticky\n        />\n      </FlexForm>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useParams, useNavigate } from 'react-router-dom-v5-compat';\nimport Helmet from 'react-helmet';\nimport { useAccessReviewAllowed } from '@console/dynamic-plugin-sdk/src';\nimport { k8sCreateResource, k8sUpdateResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { ErrorPage404 } from '@console/internal/components/error';\nimport { StatusBox } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { RouteModel, ServiceModel } from '@console/internal/models';\nimport { K8sResourceKind, referenceForModel, RouteKind } from '@console/internal/module/k8s';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeJSToYAML, safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { baseTemplates } from '../../models/yaml-templates';\nimport { RouteForm } from './RouteForm';\nimport { useTranslation } from 'react-i18next';\nimport { convertEditFormToRoute, convertRouteToEditForm, routeValidationSchema } from './utils';\nimport { RouteFormProps } from './create-route';\n\ntype RouteFormValues = {\n  editorType: EditorType;\n  formData: RouteFormProps;\n  yamlData: string;\n};\n\nconst defaultRouteYAML = baseTemplates.get(referenceForModel(RouteModel)).get('default');\n\nexport const RoutePage: React.FC = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { ns: namespace, name } = useParams();\n  const isEditForm = !!name;\n  const heading = isEditForm ? t('public~Edit Route') : t('public~Create Route');\n  const submitLabel = isEditForm ? t('public~Save') : t('public~Create');\n\n  const [route, routeLoaded, routeLoadError] = useK8sWatchResource<RouteKind>({\n    kind: RouteModel.kind,\n    name,\n    namespace,\n  });\n  const [services, servicesLoaded, serviceLoadError] = useK8sWatchResource<K8sResourceKind[]>({\n    kind: ServiceModel.kind,\n    namespace,\n    isList: true,\n  });\n  const loaded = routeLoaded && servicesLoaded;\n\n  const canUpdateHost = useAccessReviewAllowed({\n    group: RouteModel.apiGroup,\n    resource: 'routes/custom-host',\n    verb: 'update',\n    name,\n    namespace,\n  });\n\n  const initialValues = React.useMemo(\n    () => ({\n      editorType: EditorType.Form,\n      yamlData: isEditForm\n        ? safeJSToYAML(route, 'yamlData', {\n            skipInvalid: true,\n          })\n        : defaultRouteYAML,\n      formData: isEditForm ? convertRouteToEditForm(services, route) : {},\n    }),\n    [isEditForm, route, services],\n  );\n\n  const handleSubmit = async (values: RouteFormValues, helpers: FormikHelpers<RouteFormValues>) => {\n    const data: RouteKind =\n      values.editorType === EditorType.Form\n        ? convertEditFormToRoute(values.formData, isEditForm && route)\n        : safeYAMLToJS(values.yamlData);\n\n    if (data?.metadata && !data.metadata.namespace) {\n      data.metadata.namespace = namespace;\n    }\n\n    if (!canUpdateHost && isEditForm && data.spec.host !== route.spec.host) {\n      helpers.setStatus({\n        submitSuccess: '',\n        submitError: t('public~Insufficient permissions to update host.'),\n      });\n      return null;\n    }\n\n    let resource: RouteKind;\n    try {\n      if (isEditForm) {\n        resource = await k8sUpdateResource({ model: RouteModel, data, name });\n      } else {\n        resource = await k8sCreateResource({ model: RouteModel, data });\n      }\n      navigate(`/k8s/ns/${resource.metadata.namespace}/routes/${resource.metadata.name}`);\n    } catch (e) {\n      helpers.setStatus({\n        submitSuccess: '',\n        submitError: e?.message || t('public~Unknown error submitting'),\n      });\n    }\n\n    return resource;\n  };\n\n  const handleCancel = () => navigate(-1);\n\n  if (isEditForm && loaded && !route) {\n    return <ErrorPage404 />;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{heading}</title>\n      </Helmet>\n      <StatusBox\n        loaded={loaded}\n        loadError={routeLoadError || serviceLoadError}\n        data={initialValues}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={routeValidationSchema}\n          enableReinitialize\n        >\n          {(formikProps) => (\n            <RouteForm\n              {...formikProps}\n              heading={heading}\n              handleCancel={handleCancel}\n              submitLabel={submitLabel}\n              services={services}\n              existingRoute={name && route}\n            />\n          )}\n        </Formik>\n      </StatusBox>\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { connect, FormikContextType, FormikValues } from 'formik';\nimport { TFunction } from 'i18next';\n/* eslint-disable-next-line */\nimport { useTranslation, withTranslation, WithTranslation } from 'react-i18next';\nimport { Dropdown, ResourceName } from '../utils';\nimport { K8sResourceKind, RouteKind } from '../../module/k8s';\nimport { getActiveNamespace } from '../../actions/ui';\nimport { AsyncComponent } from '../utils/async';\n\nexport const UNNAMED_PORT_KEY = '#unnamed';\nconst MAX_ALT_SERVICE_TARGET = 3;\n\nconst getPortOptions = (service: K8sResourceKind) => {\n  if (!service) {\n    return {};\n  }\n\n  const ports = _.get(service, 'spec.ports', []);\n  const portOptions = ports.reduce(\n    (acc, { name = UNNAMED_PORT_KEY, port, targetPort, protocol }) => {\n      acc[name] = (\n        <>\n          {port} &rarr; {targetPort} ({protocol})\n        </>\n      );\n      return acc;\n    },\n    {},\n  );\n\n  return portOptions;\n};\n\nconst DroppableFileInput = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nclass CreateRouteWithTranslation extends React.Component<\n  CreateRouteProps & { formik: FormikContextType<FormikValues> },\n  CreateRouteState\n> {\n  state = {\n    name: '',\n    hostname: '',\n    path: '',\n    service: null,\n    weight: 100,\n    targetPort: '',\n    termination: '',\n    insecureEdgeTerminationPolicy: '',\n    certificate: '',\n    key: '',\n    caCertificate: '',\n    destinationCACertificate: '',\n    secure: false,\n    namespace: getActiveNamespace(),\n    labels: {},\n    portOptions: {},\n    alternateBackends: [],\n  };\n\n  componentDidMount() {\n    const { formik } = this.props;\n    const portOptions = getPortOptions(formik.values.formData?.service);\n    this.setState((state) => ({ ...state, ...formik.values.formData, portOptions }));\n  }\n\n  handleChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    } as any);\n    this.props.formik.setFieldValue(`formData.${name}`, value);\n  };\n\n  handleWeightChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const value = _.toInteger(event.currentTarget.value);\n    this.setState({\n      weight: value,\n    });\n    this.props.formik.setFieldValue('formData.weight', value);\n  };\n\n  changeService = (serviceName: string) => {\n    const service = _.find(this.props.services, { metadata: { name: serviceName } });\n    const portOptions = getPortOptions(service);\n    this.setState({\n      service,\n      portOptions,\n      // unset targetPort if previously set\n      targetPort: '',\n    });\n    this.props.formik.setFieldValue('formData.service', service);\n    this.props.formik.setFieldValue('formData.portOptions', portOptions);\n    this.props.formik.setFieldValue('formData.targetPort', '');\n  };\n\n  changeTargetPort = (targetPort: string) => {\n    this.setState({\n      targetPort,\n    });\n    this.props.formik.setFieldValue('formData.targetPort', targetPort);\n  };\n\n  toggleSection: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, checked } = event.currentTarget;\n    this.setState({\n      [name]: checked,\n    } as any);\n    this.props.formik.setFieldValue(`formData.${name}`, checked);\n  };\n\n  changeTermination = (termination: string) => {\n    const newState: any = {\n      termination,\n      // unset insecureEdgeTerminationPolicy if it was set\n      insecureEdgeTerminationPolicy: '',\n    };\n    this.props.formik.setFieldValue('formData.termination', termination);\n    this.props.formik.setFieldValue('formData.insecureEdgeTerminationPolicy', '');\n    switch (termination) {\n      case 'edge':\n        // unset tls data if it was set\n        newState.destinationCACertificate = '';\n        this.props.formik.setFieldValue('formData.destinationCACertificate', '');\n        break;\n      case 'passthrough':\n        Object.assign(newState, {\n          // unset tls data if it was set\n          certificate: '',\n          key: '',\n          caCertificate: '',\n          destinationCACertificate: '',\n        });\n        this.props.formik.setFieldValue('formData.certificate', '');\n        this.props.formik.setFieldValue('formData.key', '');\n        this.props.formik.setFieldValue('formData.caCertificate', '');\n        this.props.formik.setFieldValue('formData.destinationCACertificate', '');\n        break;\n      default:\n    }\n    this.setState(newState);\n  };\n\n  changeInsecureTraffic = (insecureEdgeTerminationPolicy: string) => {\n    this.setState({ insecureEdgeTerminationPolicy });\n    this.props.formik.setFieldValue(\n      `formData.insecureEdgeTerminationPolicy`,\n      insecureEdgeTerminationPolicy,\n    );\n  };\n\n  onCertificateChange = (certificate: string) => {\n    this.setState({ certificate });\n    this.props.formik.setFieldValue('formData.certificate', certificate);\n  };\n\n  onPrivateKeyChange = (key: string) => {\n    this.setState({ key });\n    this.props.formik.setFieldValue('formData.key', key);\n  };\n\n  onCaCertificateChange = (caCertificate: string) => {\n    this.setState({ caCertificate });\n    this.props.formik.setFieldValue('formData.caCertificate', caCertificate);\n  };\n\n  onDestinationCACertificateChange = (destinationCACertificate: string) => {\n    this.setState({ destinationCACertificate });\n    this.props.formik.setFieldValue('formData.destinationCACertificate', destinationCACertificate);\n  };\n\n  addAltServiceEntry = () => {\n    this.setState(({ alternateBackends }) => {\n      const services = [\n        ...alternateBackends,\n        { name: null, weight: 100, key: _.uniqueId('alternate-backend-') },\n      ];\n      this.props.formik.setFieldValue('formData.alternateBackends', services);\n      return {\n        alternateBackends: services,\n      };\n    });\n  };\n\n  removeAltServiceEntry(alternateServiceIndex: number) {\n    this.setState(\n      ({ alternateBackends }) => {\n        const updatedServiceEntriesArray: AlternateServiceEntryType[] = [...alternateBackends];\n        updatedServiceEntriesArray.splice(alternateServiceIndex, 1);\n        this.props.formik.setFieldValue('formData.alternateBackends', updatedServiceEntriesArray);\n        return {\n          alternateBackends: updatedServiceEntriesArray,\n        };\n      },\n      () => {\n        if (this.state.alternateBackends.length < 1) {\n          this.setState({ weight: 100 });\n          this.props.formik.setFieldValue('formData.weight', 100);\n        }\n      },\n    );\n  }\n\n  onDataChanged = (updatedEntry: AlternateServiceEntryGroupData, index: number) => {\n    this.setState(({ alternateBackends }) => {\n      const updatedServiceEntriesArray: AlternateServiceEntryType[] = [...alternateBackends];\n      const updatedEntryData: AlternateServiceEntryType = {\n        key: updatedServiceEntriesArray[index].key,\n        weight: updatedEntry.weight,\n        name: updatedEntry.name,\n      };\n      updatedServiceEntriesArray[index] = updatedEntryData;\n      this.props.formik.setFieldValue('formData.alternateBackends', updatedServiceEntriesArray);\n      return {\n        alternateBackends: updatedServiceEntriesArray,\n      };\n    });\n  };\n\n  autocompleteFilter = (strText: string, item: React.ReactElement): boolean =>\n    fuzzy(strText, item?.props?.name);\n\n  render() {\n    const { t, services, existingRoute } = this.props;\n    const {\n      service,\n      portOptions,\n      targetPort,\n      termination,\n      alternateBackends,\n      insecureEdgeTerminationPolicy,\n    } = this.state;\n    const serviceOptions = {};\n    _.each(\n      _.sortBy(services, 'metadata.name'),\n      ({ metadata: { name } }) =>\n        (serviceOptions[name] = <ResourceName kind=\"Service\" name={name} />),\n    );\n    const configuredServices = new Set<string>();\n    if (service) {\n      configuredServices.add(service.metadata.name);\n    }\n    _.each(alternateBackends, ({ name }) => configuredServices.add(name));\n    const availableServiceOptions = _.pickBy(\n      serviceOptions,\n      (item, key) => !configuredServices.has(key),\n    );\n    const terminationTypes = {\n      edge: 'Edge',\n      passthrough: 'Passthrough',\n      reencrypt: 'Re-encrypt',\n    };\n    const insecureTrafficTypes = {\n      None: 'None',\n      Allow: 'Allow',\n      Redirect: 'Redirect',\n    };\n    const passthroughInsecureTrafficTypes = {\n      None: 'None',\n      Redirect: 'Redirect',\n    };\n    const alternateBackendsList = _.map(alternateBackends, (entryData, index) => {\n      return (\n        <div className=\"co-add-remove-form__entry\" key={entryData.key}>\n          {!_.isEmpty(alternateBackends) && (\n            <div className=\"co-add-remove-form__link--remove-entry\">\n              <Button\n                type=\"button\"\n                onClick={() => this.removeAltServiceEntry(index)}\n                variant=\"link\"\n                isInline\n              >\n                <MinusCircleIcon className=\"co-icon-space-r\" />\n                {t('public~Remove alternate Service')}\n              </Button>\n            </div>\n          )}\n          <AlternateServicesGroup\n            index={index}\n            name={entryData.name}\n            weight={entryData.weight}\n            onChange={this.onDataChanged}\n            serviceOptions={serviceOptions}\n            availableServiceOptions={availableServiceOptions}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"co-m-pane__form\">\n        <div className=\"form-group co-create-route__name\">\n          <label className=\"co-required\" htmlFor=\"name\">\n            {t('public~Name')}\n          </label>\n          <input\n            className=\"pf-v5-c-form-control\"\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.name}\n            disabled={!!existingRoute}\n            placeholder=\"my-route\"\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name-help\"\n            required\n          />\n          <div className=\"help-block\" id=\"name-help\">\n            <p>{t('public~A unique name for the Route within the project.')}</p>\n          </div>\n        </div>\n        <div className=\"form-group co-create-route__hostname\">\n          <label htmlFor=\"hostname\">{t('public~Hostname')}</label>\n          <input\n            className=\"pf-v5-c-form-control\"\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.hostname}\n            placeholder=\"www.example.com\"\n            id=\"hostname\"\n            name=\"hostname\"\n            aria-describedby=\"hostname-help\"\n          />\n          <div className=\"help-block\" id=\"hostname-help\">\n            <p>\n              {t(\n                'public~Public hostname for the Route. If not specified, a hostname is generated.',\n              )}\n            </p>\n          </div>\n        </div>\n        <div className=\"form-group co-create-route__path\">\n          <label htmlFor=\"path\">{t('public~Path')}</label>\n          <input\n            className=\"pf-v5-c-form-control\"\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.path ?? ''} // this.state.path can be set to undefined in componentDidMount\n            placeholder=\"/\"\n            id=\"path\"\n            name=\"path\"\n            aria-describedby=\"path-help\"\n          />\n          <div className=\"help-block\" id=\"path-help\">\n            <p>{t('public~Path that the router watches to route traffic to the service.')}</p>\n          </div>\n        </div>\n        <div className=\"form-group co-create-route__service\">\n          <label className=\"co-required\" htmlFor=\"service\">\n            {t('public~Service')}\n          </label>\n          {_.isEmpty(serviceOptions) && (\n            <Alert\n              isInline\n              className=\"co-alert co-create-route__alert\"\n              variant=\"info\"\n              title=\"No services\"\n            >\n              {t('public~There are no Services in your project to expose with a Route.')}\n            </Alert>\n          )}\n          {!_.isEmpty(serviceOptions) && (\n            <Dropdown\n              autocompleteFilter={this.autocompleteFilter}\n              items={availableServiceOptions}\n              title={service ? serviceOptions[service.metadata.name] : t('public~Select a service')}\n              dropDownClassName=\"dropdown--full-width\"\n              id=\"service\"\n              onChange={this.changeService}\n              describedBy=\"service-help\"\n            />\n          )}\n          <div className=\"help-block\" id=\"service-help\">\n            <p>{t('public~Service to route to.')}</p>\n          </div>\n        </div>\n        {alternateBackendsList.length > 0 && (\n          <>\n            <div className=\"form-group co-create-route__weight\">\n              <label htmlFor=\"weight\">{t('public~Weight')}</label>\n              <input\n                className=\"pf-v5-c-form-control co-create-route__weight-label\"\n                type=\"number\"\n                onChange={this.handleWeightChange}\n                value={this.state.weight}\n                id=\"weight\"\n                aria-describedby=\"weight-help\"\n              />\n              <div className=\"help-block\" id=\"weight-help\">\n                <p>\n                  {t(\n                    'public~A number between 0 and 255 that depicts relative weight compared with other targets.',\n                  )}\n                </p>\n              </div>\n            </div>\n            {alternateBackendsList}\n          </>\n        )}\n        {alternateBackendsList.length < MAX_ALT_SERVICE_TARGET &&\n          alternateBackendsList.length + 1 < _.keys(serviceOptions).length &&\n          service && (\n            <Button\n              className=\"pf-m-link--align-left co-create-route__add-service-btn\"\n              onClick={this.addAltServiceEntry}\n              type=\"button\"\n              variant=\"link\"\n              isInline\n            >\n              <PlusCircleIcon className=\"co-icon-space-r\" />\n              {t('public~Add alternate Service')}\n            </Button>\n          )}\n        <div className=\"form-group co-create-route__target-port\">\n          <label className=\"co-required\" htmlFor=\"target-port\">\n            {t('public~Target port')}\n          </label>\n          {_.isEmpty(portOptions) && <p>{t('public~Select a Service above')}</p>}\n          {!_.isEmpty(portOptions) && (\n            <Dropdown\n              items={portOptions}\n              title={t('public~Select target port')}\n              selectedKey={_.isNumber(targetPort) ? UNNAMED_PORT_KEY : targetPort} // if targetPort is a number, it's an unnamed port\n              dropDownClassName=\"dropdown--full-width\"\n              id=\"target-port\"\n              onChange={this.changeTargetPort}\n              describedBy=\"target-port-help\"\n            />\n          )}\n          <div className=\"help-block\" id=\"target-port-help\">\n            <p>{t('public~Target port for traffic.')}</p>\n          </div>\n        </div>\n        <div className=\"form-group co-create-route__security\">\n          <label className=\"control-label\">{t('public~Security')}</label>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                onChange={this.toggleSection}\n                checked={this.state.secure}\n                id=\"secure\"\n                name=\"secure\"\n                aria-describedby=\"secure-help\"\n              />\n              {t('public~Secure Route')}\n            </label>\n            <div className=\"help-block\" id=\"secure-help\">\n              <p>\n                {t(\n                  'public~Routes can be secured using several TLS termination types for serving certificates.',\n                )}\n              </p>\n            </div>\n          </div>\n          {this.state.secure && (\n            <div className=\"co-create-route__security\">\n              <div className=\"form-group co-create-route__tls-termination\">\n                <label className=\"co-required\" htmlFor=\"tls-termination\">\n                  {t('public~TLS termination')}\n                </label>\n                <Dropdown\n                  items={terminationTypes}\n                  title={t('public~Select termination type')}\n                  dropDownClassName=\"dropdown--full-width\"\n                  id=\"tls-termination\"\n                  onChange={this.changeTermination}\n                  selectedKey={termination}\n                />\n              </div>\n              <div className=\"form-group co-create-route__insecure-traffic\">\n                <label htmlFor=\"insecure-traffic\">{t('public~Insecure traffic')}</label>\n                <Dropdown\n                  items={\n                    termination === 'passthrough'\n                      ? passthroughInsecureTrafficTypes\n                      : insecureTrafficTypes\n                  }\n                  title={t('public~Select insecure traffic type')}\n                  dropDownClassName=\"dropdown--full-width\"\n                  id=\"insecure-traffic\"\n                  onChange={this.changeInsecureTraffic}\n                  describedBy=\"insecure-traffic-help\"\n                  selectedKey={insecureEdgeTerminationPolicy}\n                />\n                <div className=\"help-block\" id=\"insecure-traffic-help\">\n                  <p>{t('public~Policy for traffic on insecure schemes like HTTP.')}</p>\n                </div>\n              </div>\n              {termination && termination !== 'passthrough' && (\n                <>\n                  <h2 className=\"h3\">{t('public~Certificates')}</h2>\n                  <div className=\"help-block\">\n                    <p>\n                      {t(\n                        'public~TLS certificates for edge and re-encrypt termination. If not specified, the router&apos;s default certificate is used.',\n                      )}\n                    </p>\n                  </div>\n                  <div className=\"form-group co-create-route__certificate\">\n                    <DroppableFileInput\n                      onChange={this.onCertificateChange}\n                      inputFileData={this.state.certificate}\n                      id=\"certificate\"\n                      label={t('public~Certificate')}\n                      inputFieldHelpText={t(\n                        'public~The PEM format certificate. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.',\n                      )}\n                    />\n                  </div>\n                  <div className=\"form-group co-create-route__private-key\">\n                    <DroppableFileInput\n                      onChange={this.onPrivateKeyChange}\n                      inputFileData={this.state.key}\n                      id=\"private-key\"\n                      label={t('public~Private key')}\n                      inputFieldHelpText={t(\n                        'public~The PEM format key. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.',\n                      )}\n                    />\n                  </div>\n                  <div className=\"form-group co-create-route__caCertificate\">\n                    <DroppableFileInput\n                      onChange={this.onCaCertificateChange}\n                      inputFileData={this.state.caCertificate}\n                      id=\"ca-certificate\"\n                      label={t('public~CA certificate')}\n                      inputFieldHelpText={t(\n                        'public~The PEM format CA certificate chain. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.',\n                      )}\n                    />\n                  </div>\n                  {termination === 'reencrypt' && (\n                    <div className=\"form-group co-create-route__destinationCaCertificate\">\n                      <DroppableFileInput\n                        onChange={this.onDestinationCACertificateChange}\n                        inputFileData={this.state.destinationCACertificate}\n                        id=\"destination-ca-certificate\"\n                        label={t('public~Destination CA certificate')}\n                      />\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const CreateRoute = withTranslation()(\n  connect<CreateRouteProps, any>(CreateRouteWithTranslation),\n);\n\nexport const AlternateServicesGroup: React.FC<AlternateServiceEntryGroupProps> = (props) => {\n  const { t } = useTranslation();\n  const [weight, setWeight] = React.useState(props.weight);\n  const [name, setName] = React.useState(props.name);\n\n  const onWeightChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setWeight(_.toInteger(event.currentTarget.value));\n  };\n\n  const onServiceChange = (serviceName: string) => {\n    setName(serviceName);\n  };\n\n  const { serviceOptions, availableServiceOptions, index, onChange } = props;\n\n  React.useEffect(() => {\n    onChange({ name, weight }, index);\n  }, [name, weight, index, onChange]);\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label htmlFor={`${index}-alt-service`}>{t('public~Alternate Service target')}</label>\n        <Dropdown\n          items={availableServiceOptions}\n          title={name ? serviceOptions[name] : t('public~Select a service')}\n          dropDownClassName=\"dropdown--full-width\"\n          id={`${index}-alt-service`}\n          onChange={onServiceChange}\n          describedBy={`${index}-alt-service-help`}\n        />\n        <div className=\"help-block\" id={`${index}-alt-service-help`}>\n          <p>{t('public~Alternate Service to route to.')}</p>\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor={`${index}-weight`}>{t('public~Alternate Service weight')}</label>\n        <input\n          className=\"pf-v5-c-form-control co-create-route__weight-label\"\n          id={`${index}-weight`}\n          type=\"number\"\n          onChange={onWeightChange}\n          value={weight}\n          aria-describedby={`${index}-alt-weight-help`}\n        />\n        <div className=\"help-block\" id={`${index}-alt-weight-help`}>\n          <p>\n            {t(\n              'public~A number between 0 and 255 that depicts relative weight compared with other targets.',\n            )}\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport type AlternateServiceEntryType = {\n  name: string;\n  weight: number;\n  key: string;\n};\n\ntype AlternateServiceEntryGroupData = {\n  weight: number;\n  name: string;\n};\n\ntype AlternateServiceEntryGroupProps = {\n  name: string;\n  weight: number;\n  index: number;\n  onChange: Function;\n  serviceOptions: any;\n  availableServiceOptions: any;\n};\n\ntype CreateRouteProps = WithTranslation & {\n  t: TFunction;\n  services: K8sResourceKind[];\n  existingRoute?: RouteKind;\n};\n\nexport type RouteFormProps = {\n  name: string;\n  hostname: string;\n  path: string;\n  service: K8sResourceKind;\n  weight: number;\n  targetPort: string;\n  termination: string;\n  insecureEdgeTerminationPolicy: string;\n  certificate: string;\n  key: string;\n  caCertificate: string;\n  destinationCACertificate: string;\n  secure: boolean;\n  namespace: string;\n  labels: object;\n  alternateBackends: AlternateServiceEntryType[];\n};\n\nexport type CreateRouteState = RouteFormProps & {\n  portOptions: any;\n};\n","import * as _ from 'lodash-es';\nimport * as yup from 'yup';\nimport { K8sResourceKind, RouteKind, RouteTarget } from '@console/internal/module/k8s';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { getActiveNamespace } from '../../actions/ui';\nimport { AlternateServiceEntryType, RouteFormProps, UNNAMED_PORT_KEY } from './create-route';\n\nexport const routeValidationSchema = yup.object({\n  editorType: yup.string(),\n  formData: yup.object().when('editorType', {\n    is: EditorType.Form,\n    then: yup.object({\n      name: yup.string().required(),\n      service: yup.string().required(),\n      targetPort: yup.string().required(),\n      termination: yup.string().when('formData.secure', {\n        is: true,\n        then: yup.string().required(),\n      }),\n    }),\n  }),\n});\n\nexport const convertRouteToEditForm = (\n  services: K8sResourceKind[],\n  data: RouteKind,\n): Partial<RouteFormProps> => {\n  if (!data) {\n    return null;\n  }\n  const { metadata, spec } = data;\n  return {\n    name: metadata?.name,\n    hostname: spec?.host,\n    path: spec?.path,\n    service: services?.find((s) => s.metadata.name === spec?.to?.name),\n    weight: spec?.to?.weight,\n    targetPort: spec?.port?.targetPort as string,\n    termination: spec?.tls?.termination,\n    insecureEdgeTerminationPolicy: spec?.tls?.insecureEdgeTerminationPolicy,\n    certificate: spec?.tls?.certificate,\n    key: spec?.tls?.key,\n    caCertificate: spec?.tls?.caCertificate,\n    destinationCACertificate: spec?.tls?.destinationCACertificate,\n    secure: !!spec?.tls,\n    namespace: metadata?.namespace || getActiveNamespace(),\n    labels: metadata?.labels,\n    alternateBackends: Array.isArray(spec?.alternateBackends)\n      ? spec.alternateBackends.map((b) => ({\n          name: b.name,\n          weight: b.weight,\n          key: _.uniqueId('alternate-backend-'),\n        }))\n      : [],\n  };\n};\n\nconst createRoteTls = (formData: RouteFormProps) => {\n  const {\n    termination,\n    insecureEdgeTerminationPolicy,\n    certificate,\n    key,\n    caCertificate,\n    destinationCACertificate,\n    secure,\n  } = formData;\n\n  return secure\n    ? {\n        termination,\n        insecureEdgeTerminationPolicy,\n        certificate,\n        key,\n        caCertificate,\n        destinationCACertificate,\n      }\n    : null;\n};\n\nexport const createAlternateBackends = (\n  alternateBackends: RouteFormProps['alternateBackends'],\n): RouteTarget[] => {\n  return _.filter(alternateBackends, 'name').map((serviceData: AlternateServiceEntryType) => {\n    return {\n      weight: serviceData.weight,\n      kind: 'Service',\n      name: serviceData.name,\n    };\n  });\n};\n\nexport const convertEditFormToRoute = (\n  formData: RouteFormProps,\n  existingRoute?: RouteKind,\n): RouteKind => {\n  const {\n    name,\n    hostname,\n    path,\n    service,\n    weight,\n    targetPort: selectedPort,\n    namespace,\n    alternateBackends,\n  } = formData;\n\n  const tls = createRoteTls(formData);\n\n  const serviceName = _.get(service, 'metadata.name');\n  const labels = _.merge(\n    _.get(service, 'metadata.labels'),\n    _.get(existingRoute, 'metadata.labels'),\n  );\n\n  // If the port is unnamed, there is only one port. Use the port number.\n  const targetPort =\n    selectedPort === UNNAMED_PORT_KEY\n      ? _.get(service, 'spec.ports[0].targetPort') || _.get(service, 'spec.ports[0].port')\n      : selectedPort;\n\n  const altBackends = createAlternateBackends(alternateBackends);\n\n  const route: RouteKind = {\n    ...(existingRoute || {}),\n    kind: 'Route',\n    apiVersion: 'route.openshift.io/v1',\n    metadata: {\n      ..._.get(existingRoute, 'metadata', {}),\n      name,\n      namespace: namespace || getActiveNamespace(),\n      labels,\n    },\n    spec: {\n      ..._.get(existingRoute, 'spec', {}),\n      to: {\n        kind: 'Service',\n        name: serviceName,\n        weight,\n      },\n      tls,\n      host: hostname,\n      path,\n      port: {\n        targetPort,\n      },\n    },\n  };\n\n  route.spec.alternateBackends = altBackends;\n\n  return route;\n};\n"],"sourceRoot":""}