{"version":3,"sources":["webpack:///./public/components/machine-config-pools-selector.tsx","webpack:///./public/components/modals/cluster-update-modal.tsx"],"names":["MachineConfigPoolsSelector","machineConfigPools","onChange","selected","t","className","id","resource","labelPlural","map","mcp","key","metadata","uid","label","Worker","name","isChecked","includes","upgradeTypes","ClusterUpdateModal","props","cancel","close","cv","errorMessage","handlePromise","inProgress","clusterUpgradeableFalse","availableSortedUpdates","notRecommendedSortedUpdates","currentVersion","currentMinorVersionPatchUpdate","find","update","version","desiredVersion","setDesiredVersion","machineConfigPoolsLoaded","isList","kind","error","setError","machineConfigPoolsToPause","setMachineConfigPoolsToPause","upgradeType","setUpgradeType","Full","includeNotRecommended","setIncludeNotRecommended","initialMCPPausedValues","filter","handleUpgradeTypeChange","value","pauseableMCPs","sort","pausedMCPs","desiredRecommendedUpdate","desiredNotRecommendedUpdate","release","desiredNotRecommendedUpdateConditions","conditions","dropdownItem","isDisabled","title","recommendedOptions","notRecommendedOptions","options","items","unshift","helpURL","updateUsingCustomMachineConfigPools","onSubmit","e","preventDefault","MCPsToPausePromises","MCPsToResumePromises","MCPsToPause","m","MCPsToResume","patch","op","path","Promise","all","onCancel","isFullWidth","onSelect","event","selection","switchIsChecked","switchIsDisabled","length","switchLabel","switchLabelClassName","switchLabelIsReversed","switchOnChange","val","toggleLabel","message","isInline","variant","component","p","split","item","description","master","Master","worker","body","isPlain","Partial","checked","checkedItems","push","currentTarget","href","submitText","cancelText","submitDisabled","clusterUpdateModal"],"mappings":"8FAAA,4EAOO,MAAMA,EAAwE,EACnFC,qBACAC,WACAC,eAEA,MAAM,EAAEC,GAAM,2BACd,OACE,uBAAKC,UAAU,cACb,yBAAOC,GAAG,iBACPF,EAAE,sCAAuC,CAAEG,SAAU,YAAUC,eAEjEP,EAAmBQ,IAAKC,GACvB,gBAAC,IAAQ,CACPC,IAAKD,EAAIE,SAASC,IAClBC,MAAO,GAAG,aAAYJ,GAAO,IAAcK,OAASL,EAAIE,SAASI,QAC/D,YAAUR,cAEZF,GAAII,EAAIE,SAASI,KACjBC,UAAWd,EAASe,SAASR,EAAIE,SAASI,MAC1Cd,SAAUA,EAAQ,YACP,sBAAsBQ,EAAIE,SAASI,W,kCC3BxD,8DAkDKG,EAlDL,4IAkDA,SAAKA,GACH,cACA,oBAFF,CAAKA,MAAY,KAKjB,MAAMC,EAAqB,aAAmBC,I,MAC5C,MAAM,OAAEC,EAAM,MAAEC,EAAK,GAAEC,EAAE,aAAEC,EAAY,cAAEC,EAAa,WAAEC,GAAeN,EACjEO,IAA4B,YAA6BJ,GACzDK,EAAyB,YAA0BL,GACnDM,EAA8B,YAA+BN,GAC7DO,EAAiB,YAAyBP,GAC1CQ,EAAiCH,aAAsB,EAAtBA,EAAwBI,KAC5DC,IAAY,aAAoBH,EAAgBG,EAAOC,WAEnDC,EAAgBC,GAAqB,YACzCT,EACGI,aAA8B,EAA9BA,EAAgCG,QACP,QAAzB,EAAAN,EAAuB,UAAE,eAAEM,UAAY,KAEtClC,EAAoBqC,GAA4B,YAErD,CACAC,QAAQ,EACRC,KAAM,aAAkB,6BAEnBC,EAAOC,GAAY,WAAe,KAClCC,EAA2BC,GAAgC,WAAyB,KACpFC,EAAaC,GAAkB,WAA6B3B,EAAa4B,OACzEC,EAAuBC,GAA4B,YAAe,IACnE,EAAE7C,GAAM,2BACd,YAAgB,KACd,MAAM8C,EAAyBjD,EAC5BkD,OAAQzC,IAAS,aAAYA,IAAQ,aAAYA,IACjDD,IAAKC,GAAQA,EAAIE,SAASI,MAC7B4B,EAA6BM,IAE5B,IACH,MAIME,EAA2BC,IAC/BP,EAAeO,IASXC,EAAgBrD,EACnBkD,OAAQzC,IAAS,aAAYA,IAC7B6C,KAAK,MACFC,EAAaF,EAAcH,OAAQzC,GAAQ,aAAYA,IACvD+C,EAA2B,IAAO5B,EAAwB,CAAEM,QAASC,IACrEsB,EAA8B,IAAO5B,EAA6B,CACtE6B,QAAS,CAAExB,QAASC,KAEhBwB,EAAwC,YAC5CF,aAA2B,EAA3BA,EAA6BG,YA+CzBC,EAAgB3B,IACpB,MAAM4B,EAAanC,GAA2B,aAAoBG,EAAgBI,GAClF,MAAO,CACL4B,aACApD,IAAKwB,EACL6B,MAAOD,EACL,gCACG5B,E,IAAS,gBAAC,qBAAkB,OAE7B,IAKF8B,EAAqBpC,EAAuBpB,IAAI,EAAG0B,aAChD2B,EAAa3B,IAEhB+B,EAAwBpC,EAA4BrB,IAAI,EAAGkD,SAAWxB,cACnE2B,EAAa3B,IAEhBgC,EAAU,CACd,CACEC,MAAOH,EACPtD,IAAK,cACLG,MAAOV,EAAE,wBAGT4C,GACFmB,EAAQE,QAAQ,CACdD,MAAOF,EACPvD,IAAK,iBACLG,MAAOV,EAAE,8BAGb,MAAMkE,EAAU,aAAoB,KAAkBC,qCAEtD,OACE,wBAAMC,SAlFiDC,IAEvD,GADAA,EAAEC,kBACGjB,IAA6BC,EAOhC,YANAhB,EACEtC,EACE,mGACA,CAAEgC,oBAQR,IAAIuC,EACAC,EACJ,GAHAlC,EAAS,IAGLG,IAAgB1B,EAAa4B,KAC/B4B,EAAsB,GACtBC,EAAuB,YAAuBpB,GAAY,OACrD,CACL,MAAMqB,EAAcvB,EAAcH,OAAQzC,GACxCiC,EAA0BV,KAAM6C,GAAMA,IAAMpE,EAAIE,SAASI,OAErD+D,EAAezB,EAAcH,OAAQzC,IAASmE,EAAY3D,SAASR,IACzEiE,EAAsB,YAAuBE,GAAa,GAC1DD,EAAuB,YAAuBG,GAAc,GAE9D,MAAMC,EAAQ,CACZ,CACEC,GAAI,MACJC,KAAM,sBACN7B,MAAOK,EACHA,EAA4BC,QAC5BF,IAGR,OAAO/B,EACLyD,QAAQC,IAAI,CACV,aAAS,sBAAqB5D,EAAIwD,MAC/BJ,KACAD,IAELpD,IAwCsBP,KAAK,OAAOX,UAAU,gBAAe,YAAW,wBACtE,gBAAC,IAAU,KAAED,EAAE,0BACf,gBAAC,IAAS,KACPwB,GAA2B,gBAAC,6BAA0B,CAACyD,SAAU/D,EAAQE,GAAIA,IAC9E,uBAAKnB,UAAU,cACb,6BAAQD,EAAE,2BACV,yBAAI2B,IAEN,uBAAK1B,UAAU,cACb,yBAAOC,GAAG,iBAAiBF,EAAE,8BAC7B,gBAAC,IAAkB,CACjBkF,aAAW,EACXC,SAvHc,CAACC,EAAOC,KAC9BD,EAAMd,iBACNrC,EAAkBoD,IAsHVtB,QAASA,EACThE,SAAUiC,EACVsD,gBAAiB1C,EACjB2C,iBAAmD,IAAjCzB,EAAsB0B,OACxCC,YACE,gCACGzF,EAAE,6CACH,gBAAC,IAAc,KACZA,EACC,6GAKR0F,qBAAqB,kBACrBC,uBAAqB,EACrBC,eAAiBC,GAAQhD,EAAyBgD,GAClDC,YAAa9D,IAEdsB,IAA+BE,aAAqC,EAArCA,EAAuCuC,UACrE,gBAAC,IAAK,CACJ9F,UAAU,gBACV+F,UAAQ,EACRpC,MAAO5D,EACL,wIACA,CAAEgC,eAAgBsB,EAA4BC,QAAQxB,UAExDkE,QAAQ,OAAM,YACJ,8CAEV,gBAAC,IAAW,KACV,gBAAC,IAAI,CAACC,UAAW,IAAaC,GAC5B,gBAAC,IAAe,KACb3C,EAAsCuC,QAAQK,MAAM,MAAM/F,IAAKgG,GAC9D,gBAAC,WAAc,CAAC9F,IAAK8F,GAClBA,EACD,kCAShB,uBAAKpG,UAAU,cACb,6BACGD,EAAE,yBACH,gBAAC,IAAc,KACZA,EACC,0SAIN,gBAAC,IAAK,CACJa,UAAW4B,IAAgB1B,EAAa4B,KACxC/B,KAAMG,EAAa4B,KACnB7C,SAAU,IAAMkD,EAAwBjC,EAAa4B,MACrDjC,MAAOV,EAAE,8BACTE,GAAIa,EAAa4B,KACjBM,MAAOlC,EAAa4B,KACpB2D,YAAatG,EACX,sKACA,CACEuG,OAAQ,IAAcC,OACtBC,OAAQ,IAAc9F,OACtBR,SAAU,YAAUC,cAGxBH,UAAU,gBACVyG,KACExE,GACAkB,EAAWoC,OAAS,GACpB/C,IAAgB1B,EAAa4B,MAC3B,gBAAC,IAAK,CACJsD,QAAQ,UACRD,UAAQ,EACRW,SAAO,EACP/C,MAAO5D,EACL,wKACA,CAAEyG,OAAQ,IAAc9F,OAAQR,SAAU,YAAUO,QACrD,YACS,8CAEb,YAEO,2CAEZ,gBAAC,IAAK,CACJG,UAAW4B,IAAgB1B,EAAa6F,QACxChG,KAAMG,EAAa6F,QACnB9G,SAAU,IAAMkD,EAAwBjC,EAAa6F,SACrDlG,MAAOV,EAAE,oCACTE,GAAIa,EAAa6F,QACjB3D,MAAOlC,EAAa6F,QACpBN,YAAatG,EACX,wGACA,CAAEyG,OAAQ,IAAc9F,OAAQR,SAAU,YAAUO,QAEtDT,UAAU,gBACVyG,KACEjE,IAAgB1B,EAAa6F,SAC3B,gCACE,gBAAC,IAA0B,CACzB/G,mBAAoBqD,EACpBnD,SAAUwC,EACVzC,SA3Ne,CAACsF,EAA0CyB,KAC1E,MAAMC,EAAe,IAAIvE,GACzBsE,EACIC,EAAaC,KAAK3B,EAAM4B,cAAc9G,IACtC,IAAO4G,EAAc1B,EAAM4B,cAAc9G,IAC7CsC,EAA6BsE,MAwNf,gBAAC,IAAK,CACJb,QAAQ,UACRD,UAAQ,EACRW,SAAO,EACP/C,MAAO5D,EAAE,oEACTC,UAAU,kBAER,gBACA,gBAAC,IAAY,CAACgH,KAAM/C,GAAUlE,EAAE,wBAIvC,YAEO,gDAIhB,gBAAC,IAAiB,CAChBqB,aAAcA,GAAgBgB,EAC9Bd,WAAYA,EACZ2F,WAAYlH,EAAE,iBACdmH,WAAYnH,EAAE,iBACdkB,OAAQA,EACRkG,gBACGpF,GACAS,IAAgB1B,EAAa6F,SAAgD,IAArCrE,EAA0BiD,YAOhE6B,EAAqB,YAAoBrG","file":"cluster-update-modal-chunk-9c3afb3ccf370c09b6ac.min.js","sourcesContent":["import * as React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nimport { isMCPWorker, MachineConfigPoolKind, NodeTypeNames } from '../module/k8s';\nimport { NodeModel } from '../models';\n\nexport const MachineConfigPoolsSelector: React.FC<MachineConfigPoolsSelectorProps> = ({\n  machineConfigPools,\n  onChange,\n  selected,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label id=\"version-label\">\n        {t('public~Select {{resource}} to pause', { resource: NodeModel.labelPlural })}\n      </label>\n      {machineConfigPools.map((mcp: MachineConfigPoolKind) => (\n        <Checkbox\n          key={mcp.metadata.uid}\n          label={`${isMCPWorker(mcp) ? NodeTypeNames.Worker : mcp.metadata.name} ${\n            NodeModel.labelPlural\n          }`}\n          id={mcp.metadata.name}\n          isChecked={selected.includes(mcp.metadata.name)}\n          onChange={onChange}\n          data-test={`pause-mcp-checkbox-${mcp.metadata.name}`}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport type MachineConfigPoolsSelectorProps = {\n  machineConfigPools: MachineConfigPoolKind[];\n  onChange: (event: React.FormEvent<HTMLInputElement>, checked: boolean) => void;\n  selected: string[];\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert, Radio, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport {\n  documentationURLs,\n  ExternalLink,\n  getDocumentationURL,\n} from '@console/internal/components/utils';\nimport { DropdownWithSwitch } from '@console/shared/src/components/dropdown';\n\nimport { ClusterVersionModel, MachineConfigPoolModel, NodeModel } from '../../models';\nimport {\n  FieldLevelHelp,\n  HandlePromiseProps,\n  LinkifyExternal,\n  isManaged,\n  withHandlePromise,\n} from '../utils';\nimport {\n  ClusterVersionKind,\n  getConditionUpgradeableFalse,\n  getDesiredClusterVersion,\n  getMCPsToPausePromises,\n  getNotRecommendedUpdateCondition,\n  getSortedAvailableUpdates,\n  getSortedNotRecommendedUpdates,\n  isMCPMaster,\n  isMCPPaused,\n  isMinorVersionNewer,\n  k8sPatch,\n  MachineConfigPoolKind,\n  NodeTypeNames,\n  referenceForModel,\n  sortMCPsByCreationTimestamp,\n} from '../../module/k8s';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '../factory/modal';\nimport {\n  ClusterNotUpgradeableAlert,\n  UpdateBlockedLabel,\n} from '../cluster-settings/cluster-settings';\nimport { MachineConfigPoolsSelector } from '../machine-config-pools-selector';\n\nenum upgradeTypes {\n  Full = 'Full',\n  Partial = 'Partial',\n}\n\nconst ClusterUpdateModal = withHandlePromise((props: ClusterUpdateModalProps) => {\n  const { cancel, close, cv, errorMessage, handlePromise, inProgress } = props;\n  const clusterUpgradeableFalse = !!getConditionUpgradeableFalse(cv);\n  const availableSortedUpdates = getSortedAvailableUpdates(cv);\n  const notRecommendedSortedUpdates = getSortedNotRecommendedUpdates(cv);\n  const currentVersion = getDesiredClusterVersion(cv);\n  const currentMinorVersionPatchUpdate = availableSortedUpdates?.find(\n    (update) => !isMinorVersionNewer(currentVersion, update.version),\n  );\n  const [desiredVersion, setDesiredVersion] = React.useState(\n    (clusterUpgradeableFalse\n      ? currentMinorVersionPatchUpdate?.version\n      : availableSortedUpdates[0]?.version) || '',\n  );\n  const [machineConfigPools, machineConfigPoolsLoaded] = useK8sWatchResource<\n    MachineConfigPoolKind[]\n  >({\n    isList: true,\n    kind: referenceForModel(MachineConfigPoolModel),\n  });\n  const [error, setError] = React.useState('');\n  const [machineConfigPoolsToPause, setMachineConfigPoolsToPause] = React.useState<string[]>([]);\n  const [upgradeType, setUpgradeType] = React.useState<upgradeTypes>(upgradeTypes.Full);\n  const [includeNotRecommended, setIncludeNotRecommended] = React.useState(false);\n  const { t } = useTranslation();\n  React.useEffect(() => {\n    const initialMCPPausedValues = machineConfigPools\n      .filter((mcp) => !isMCPMaster(mcp) && isMCPPaused(mcp))\n      .map((mcp) => mcp.metadata.name);\n    setMachineConfigPoolsToPause(initialMCPPausedValues);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // only run the effect once so changes don't affect user input\n  const onSelectVersion = (event, selection) => {\n    event.preventDefault();\n    setDesiredVersion(selection);\n  };\n  const handleUpgradeTypeChange = (value: typeof upgradeType) => {\n    setUpgradeType(value);\n  };\n  const handleMCPSelectionChange = (event: React.FormEvent<HTMLInputElement>, checked: boolean) => {\n    const checkedItems = [...machineConfigPoolsToPause];\n    checked\n      ? checkedItems.push(event.currentTarget.id)\n      : _.pull(checkedItems, event.currentTarget.id);\n    setMachineConfigPoolsToPause(checkedItems);\n  };\n  const pauseableMCPs = machineConfigPools\n    .filter((mcp) => !isMCPMaster(mcp))\n    .sort(sortMCPsByCreationTimestamp);\n  const pausedMCPs = pauseableMCPs.filter((mcp) => isMCPPaused(mcp));\n  const desiredRecommendedUpdate = _.find(availableSortedUpdates, { version: desiredVersion });\n  const desiredNotRecommendedUpdate = _.find(notRecommendedSortedUpdates, {\n    release: { version: desiredVersion },\n  });\n  const desiredNotRecommendedUpdateConditions = getNotRecommendedUpdateCondition(\n    desiredNotRecommendedUpdate?.conditions,\n  );\n  const submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    if (!desiredRecommendedUpdate && !desiredNotRecommendedUpdate) {\n      setError(\n        t(\n          'public~Version {{desiredVersion}} not found among the supported updates. Select another version.',\n          { desiredVersion },\n        ),\n      );\n      return;\n    }\n\n    // Clear any previous error message.\n    setError('');\n    let MCPsToPausePromises;\n    let MCPsToResumePromises;\n    if (upgradeType === upgradeTypes.Full) {\n      MCPsToPausePromises = [];\n      MCPsToResumePromises = getMCPsToPausePromises(pausedMCPs, false);\n    } else {\n      const MCPsToPause = pauseableMCPs.filter((mcp) =>\n        machineConfigPoolsToPause.find((m) => m === mcp.metadata.name),\n      );\n      const MCPsToResume = pauseableMCPs.filter((mcp) => !MCPsToPause.includes(mcp));\n      MCPsToPausePromises = getMCPsToPausePromises(MCPsToPause, true);\n      MCPsToResumePromises = getMCPsToPausePromises(MCPsToResume, false);\n    }\n    const patch = [\n      {\n        op: 'add',\n        path: '/spec/desiredUpdate',\n        value: desiredNotRecommendedUpdate\n          ? desiredNotRecommendedUpdate.release\n          : desiredRecommendedUpdate,\n      },\n    ];\n    return handlePromise(\n      Promise.all([\n        k8sPatch(ClusterVersionModel, cv, patch),\n        ...MCPsToResumePromises,\n        ...MCPsToPausePromises,\n      ]),\n      close,\n    );\n  };\n  const dropdownItem = (version) => {\n    const isDisabled = clusterUpgradeableFalse && isMinorVersionNewer(currentVersion, version);\n    return {\n      isDisabled,\n      key: version,\n      title: isDisabled ? (\n        <>\n          {version} <UpdateBlockedLabel />\n        </>\n      ) : (\n        version\n      ),\n    };\n  };\n  const recommendedOptions = availableSortedUpdates.map(({ version }) => {\n    return dropdownItem(version);\n  });\n  const notRecommendedOptions = notRecommendedSortedUpdates.map(({ release: { version } }) => {\n    return dropdownItem(version);\n  });\n  const options = [\n    {\n      items: recommendedOptions,\n      key: 'recommended',\n      label: t('public~Recommended'),\n    },\n  ];\n  if (includeNotRecommended) {\n    options.unshift({\n      items: notRecommendedOptions,\n      key: 'notRecommended',\n      label: t('public~Have known issues'),\n    });\n  }\n  const helpURL = getDocumentationURL(documentationURLs.updateUsingCustomMachineConfigPools);\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\" data-test=\"update-cluster-modal\">\n      <ModalTitle>{t('public~Update cluster')}</ModalTitle>\n      <ModalBody>\n        {clusterUpgradeableFalse && <ClusterNotUpgradeableAlert onCancel={cancel} cv={cv} />}\n        <div className=\"form-group\">\n          <label>{t('public~Current version')}</label>\n          <p>{currentVersion}</p>\n        </div>\n        <div className=\"form-group\">\n          <label id=\"version-label\">{t('public~Select new version')}</label>\n          <DropdownWithSwitch\n            isFullWidth\n            onSelect={onSelectVersion}\n            options={options}\n            selected={desiredVersion}\n            switchIsChecked={includeNotRecommended}\n            switchIsDisabled={notRecommendedOptions.length === 0}\n            switchLabel={\n              <>\n                {t('public~Include versions with known issues')}\n                <FieldLevelHelp>\n                  {t(\n                    'public~These versions are supported, but include known issues. Review the known issues before updating.',\n                  )}\n                </FieldLevelHelp>\n              </>\n            }\n            switchLabelClassName=\"co-switch-label\"\n            switchLabelIsReversed\n            switchOnChange={(val) => setIncludeNotRecommended(val)}\n            toggleLabel={desiredVersion}\n          />\n          {desiredNotRecommendedUpdate && desiredNotRecommendedUpdateConditions?.message && (\n            <Alert\n              className=\"pf-v5-u-mt-sm\"\n              isInline\n              title={t(\n                'public~Updating this cluster to {{desiredVersion}} is supported, but includes known issues.  Review the known issues before updating.',\n                { desiredVersion: desiredNotRecommendedUpdate.release.version },\n              )}\n              variant=\"info\"\n              data-test=\"update-cluster-modal-not-recommended-alert\"\n            >\n              <TextContent>\n                <Text component={TextVariants.p}>\n                  <LinkifyExternal>\n                    {desiredNotRecommendedUpdateConditions.message.split('\\n').map((item) => (\n                      <React.Fragment key={item}>\n                        {item}\n                        <br />\n                      </React.Fragment>\n                    ))}\n                  </LinkifyExternal>\n                </Text>\n              </TextContent>\n            </Alert>\n          )}\n        </div>\n        <div className=\"form-group\">\n          <label>\n            {t('public~Update options')}\n            <FieldLevelHelp>\n              {t(\n                \"public~Full cluster update allows you to update all your Nodes, but takes longer. Control plane only update allows you to pause worker and custom pool Nodes to accommodate your maintenance schedule, but you'll need to resume the non-control plane Node updates within 60 days to avoid failure.\",\n              )}\n            </FieldLevelHelp>\n          </label>\n          <Radio\n            isChecked={upgradeType === upgradeTypes.Full}\n            name={upgradeTypes.Full}\n            onChange={() => handleUpgradeTypeChange(upgradeTypes.Full)}\n            label={t('public~Full cluster update')}\n            id={upgradeTypes.Full}\n            value={upgradeTypes.Full}\n            description={t(\n              'public~{{master}}, {{worker}}, and custom pool {{resource}} are updated concurrently. This might take longer, so make sure to allocate enough time for maintenance.',\n              {\n                master: NodeTypeNames.Master,\n                worker: NodeTypeNames.Worker,\n                resource: NodeModel.labelPlural,\n              },\n            )}\n            className=\"pf-v5-u-mb-sm\"\n            body={\n              machineConfigPoolsLoaded &&\n              pausedMCPs.length > 0 &&\n              upgradeType === upgradeTypes.Full && (\n                <Alert\n                  variant=\"warning\"\n                  isInline\n                  isPlain\n                  title={t(\n                    'public~Paused {{worker}} or custom pool {{resource}} updates will be resumed. If you want to update only the control plane, select \"Control plane only update\" below.',\n                    { worker: NodeTypeNames.Worker, resource: NodeModel.label },\n                  )}\n                  data-test=\"update-cluster-modal-paused-nodes-warning\"\n                />\n              )\n            }\n            data-test=\"update-cluster-modal-full-update-radio\"\n          />\n          <Radio\n            isChecked={upgradeType === upgradeTypes.Partial}\n            name={upgradeTypes.Partial}\n            onChange={() => handleUpgradeTypeChange(upgradeTypes.Partial)}\n            label={t('public~Control plane only update')}\n            id={upgradeTypes.Partial}\n            value={upgradeTypes.Partial}\n            description={t(\n              'public~Pause {{worker}} or custom pool {{resource}} updates to accommodate your maintenance schedule.',\n              { worker: NodeTypeNames.Worker, resource: NodeModel.label },\n            )}\n            className=\"pf-v5-u-mb-md\"\n            body={\n              upgradeType === upgradeTypes.Partial && (\n                <>\n                  <MachineConfigPoolsSelector\n                    machineConfigPools={pauseableMCPs}\n                    selected={machineConfigPoolsToPause}\n                    onChange={handleMCPSelectionChange}\n                  />\n                  <Alert\n                    variant=\"warning\"\n                    isInline\n                    isPlain\n                    title={t('public~You must resume updates within 60 days to avoid failures.')}\n                    className=\"pf-v5-u-mb-md\"\n                  >\n                    {!isManaged() && (\n                      <ExternalLink href={helpURL}>{t('public~Learn more')}</ExternalLink>\n                    )}\n                  </Alert>\n                </>\n              )\n            }\n            data-test=\"update-cluster-modal-partial-update-radio\"\n          />\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage || error}\n        inProgress={inProgress}\n        submitText={t('public~Update')}\n        cancelText={t('public~Cancel')}\n        cancel={cancel}\n        submitDisabled={\n          !desiredVersion ||\n          (upgradeType === upgradeTypes.Partial && machineConfigPoolsToPause.length === 0)\n        }\n      />\n    </form>\n  );\n});\n\nexport const clusterUpdateModal = createModalLauncher(ClusterUpdateModal);\n\ntype ClusterUpdateModalProps = {\n  cv: ClusterVersionKind;\n} & ModalComponentProps &\n  HandlePromiseProps;\n"],"sourceRoot":""}