(window.webpackJsonp=window.webpackJsonp||[]).push([[223],{5535:function(e,t,a){"use strict";a.r(t),a.d(t,"AddOpenIDIDPPage",(function(){return b}));var n=a(0),r=a(137),l=a(7),c=a(14),i=a(966),s=a(19),o=a(10),u=a(8),m=a(5),p=a(5957),d=a(5958),h=a(6040);const b=()=>{const e=Object(c.useNavigate)(),[t,a]=n.useState(!1),[b,f]=n.useState(""),[v,g]=n.useState("openid"),[E,y]=n.useState(""),[N,C]=n.useState(""),[O,P]=n.useState(["preferred_username"]),[S,T]=n.useState(["name"]),[j,I]=n.useState(["email"]),[q,D]=n.useState(""),[w,A]=n.useState(""),[_,x]=n.useState([]),{t:M}=Object(l.useTranslation)(),k=e=>(a(!0),e.then(e=>(e=>(a(!1),f(""),e))(e),e=>(e=>{const t=e.message||M("public~An error occurred. Please try again.");return a(!1),f(t),Promise.reject(t)})(e))),F=()=>{const e={apiVersion:"v1",kind:"Secret",metadata:{generateName:"openid-client-secret-",namespace:"openshift-config"},stringData:{clientSecret:N}};return k(Object(u.jb)(o.SecretModel,e))},R=()=>{if(!w)return Promise.resolve(null);const e={apiVersion:"v1",kind:"ConfigMap",metadata:{generateName:"openid-ca-",namespace:"openshift-config"},data:{"ca.crt":w}};return k(Object(u.jb)(o.ConfigMapModel,e))},U=(e,t,a,n)=>{const r={name:v,type:"OpenID",mappingMethod:"claim",openID:{clientID:E,clientSecret:{name:t},issuer:q,extraScopes:_,claims:{preferredUsername:O,name:S,email:j}}};return a&&(r.openID.ca={name:a}),k(Object(p.a)(e,r,n))},V=M("public~Add Identity Provider: OpenID Connect");return n.createElement("div",{className:"co-m-pane__form"},n.createElement(r.a,null,n.createElement("title",null,V)),n.createElement(m.Z,{title:V,helpText:M("public~Integrate with an OpenID Connect identity provider using an Authorization Code Flow.")}),n.createElement("div",{className:"co-m-pane__body"},n.createElement("form",{onSubmit:t=>{t.preventDefault(),f(""),k(Object(p.b)()).then(t=>{const a=w?p.c.ca:"";U(t,p.c.secret,a,!0).then(()=>{const a=[F(),R()];Promise.all(a).then(([e,a])=>{const n=a?a.metadata.name:"";return U(t,e.metadata.name,n)}).then(()=>{Object(p.d)(e)})}).catch(e=>{f(e)})})},name:"form",className:"co-m-pane__body-group"},n.createElement(d.a,{value:v,onChange:e=>g(e.currentTarget.value)}),n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label co-required",htmlFor:"client-id"},M("public~Client ID")),n.createElement("input",{className:"pf-v5-c-form-control",type:"text",onChange:e=>y(e.currentTarget.value),value:E,id:"client-id",required:!0})),n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label co-required",htmlFor:"client-secret"},M("public~Client secret")),n.createElement("input",{className:"pf-v5-c-form-control",type:"password",onChange:e=>C(e.currentTarget.value),value:N,id:"client-secret",required:!0})),n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label co-required",htmlFor:"issuer"},M("public~Issuer URL")),n.createElement("input",{className:"pf-v5-c-form-control",type:"url",onChange:e=>D(e.currentTarget.value),value:q,id:"issuer",required:!0,"aria-describedby":"issuer-help"}),n.createElement("div",{className:"help-block",id:"issuer-help"},M("public~The URL that the OpenID provider asserts as its issuer identifier. It must use the https scheme with no URL query parameters or fragment."))),n.createElement("div",{className:"co-form-section__separator"}),n.createElement("h3",null,M("public~Claims")),n.createElement("p",{className:"co-help-text"},M("public~Claims map metadata from the OpenID provider to an OpenShift user. The first non-empty claim is used.")),n.createElement(m.P,{label:M("public~Preferred username"),initialValues:O,onChange:e=>P(e),helpText:M("public~Any scopes to request in addition to the standard openid scope.")}),n.createElement(m.P,{label:M("public~Name"),initialValues:S,onChange:e=>T(e),helpText:M("public~The list of claims whose values should be used as the display name.")}),n.createElement(m.P,{label:M("public~Email"),initialValues:j,onChange:e=>I(e),helpText:M("public~The list of claims whose values should be used as the email address.")}),n.createElement("div",{className:"co-form-section__separator"}),n.createElement("h3",null,M("public~More options")),n.createElement(h.a,{value:w,onChange:e=>A(e)}),n.createElement(m.P,{label:M("public~Extra scopes"),onChange:e=>x(e),helpText:M("public~Any scopes to request in addition to the standard openid scope.")}),n.createElement(m.g,{errorMessage:b,inProgress:t},n.createElement(i.a,{className:"pf-v5-c-form"},n.createElement(s.a,{type:"submit",variant:"primary","data-test-id":"add-idp"},M("public~Add")),n.createElement(s.a,{type:"button",variant:"secondary",onClick:()=>e(-1)},M("public~Cancel")))))))}},5957:function(e,t,a){"use strict";a.d(t,"b",(function(){return i})),a.d(t,"a",(function(){return s})),a.d(t,"d",(function(){return o})),a.d(t,"c",(function(){return u}));var n=a(22),r=a(10),l=a(8),c=a(5);const i=()=>Object(l.kb)(r.OAuthModel,"cluster"),s=(e,t,a)=>{const c=n.a(e.spec.identityProviders)?{op:"add",path:"/spec/identityProviders",value:[t]}:{op:"add",path:"/spec/identityProviders/-",value:t};return Object(l.pb)(r.OAuthModel,e,[c],a?{queryParams:{dryRun:"All"}}:{})},o=e=>{e(Object(c.uc)(r.OAuthModel,"cluster")+"?idpAdded=true")},u={secret:"secret-name",ca:"ca-name"}},5958:function(e,t,a){"use strict";a.d(t,"a",(function(){return l}));var n=a(0),r=a(7);const l=({value:e,onChange:t})=>{const{t:a}=Object(r.useTranslation)();return n.createElement("div",{className:"form-group"},n.createElement("label",{className:"control-label co-required",htmlFor:"idp-name"},a("public~Name")),n.createElement("input",{className:"pf-v5-c-form-control",type:"text",onChange:t,value:e,"aria-describedby":"idp-name-help",id:"idp-name",required:!0}),n.createElement("p",{className:"help-block",id:"idp-name-help"},a("public~Unique name of the new identity provider. This cannot be changed later.")))}},6040:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var n=a(0),r=a(7),l=a(5);const c=e=>n.createElement(l.c,Object.assign({loader:()=>Promise.resolve().then(a.bind(null,2223)).then(e=>e.DroppableFileInput)},e)),i=({value:e,onChange:t,isRequired:a=!1})=>{const{t:l}=Object(r.useTranslation)();return n.createElement("div",{className:"form-group"},n.createElement(c,{onChange:t,inputFileData:e,id:"idp-file-input",label:l("public~CA file"),isRequired:a,hideContents:!0}))}}}]);
//# sourceMappingURL=openid-idp-form-chunk-6830a8f46b2278f4359b.min.js.map