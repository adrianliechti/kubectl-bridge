{"version":3,"sources":["webpack:///./public/module/k8s/probe.ts","webpack:///./public/components/container.tsx"],"names":["flatteners","exec","cmd","command","join","httpGet","podIP","c","host","port","path","startsWith","tcpSocket","flattenCmd","type","getActionLabelFromObject","obj","a","HookAction","Object","freeze","id","label","t","keys","inferAction","action","getLifecycleHookLabel","lifecycle","stage","mapLifecycleConfigToFields","f","postStart","preStop","k","mapProbeToFields","probe","formatComputeResources","resources","v","Lifecycle","fields","postStartLabel","preStopLabel","ns","className","displayName","Probe","value","formattedValue","indexOf","Ports","ports","length","map","p","i","key","name","containerPort","title","VolumeMounts","volumeMounts","readOnly","mountPath","Env","env","e","valueFrom","fieldRef","resourceFieldRef","configMapKeyRef","secretKeyRef","getContainer","pod","spec","containers","initContainers","getContainerStateValue","state","exitCode","ContainerDetailsList","props","params","container","status","stateValue","imageName","imageTag","image","index","lastIndexOf","substr","getImageNameAndTag","text","containerLastState","lastState","containerID","requests","getResourceRequestsValue","limits","getResourceLimitsValue","readinessProbe","livenessProbe","timestamp","startedAt","finishedAt","kind","podName","namespace","args","nodeName","ContainersDetailsPage","isList","prop","ContainerDetails","location","loaded","data","containerStateValue","containerName","getContainerStatusStateValue","detail","getResourceStatus","breadcrumbsFor","pathname","hideNav","pages","href","component"],"mappings":"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","file":"container-chunk-d54283e40aaa6fc22cea.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport i18next from 'i18next';\n\nimport {\n  ContainerLifecycle,\n  ContainerLifecycleStage,\n  ContainerProbe,\n  ExecProbe,\n  Handler,\n  HTTPGetProbe,\n  TCPSocketProbe,\n} from './';\n\nconst parsers = {\n  exec: function (str: string) {\n    return {\n      command: str.split(' '),\n    };\n  },\n\n  httpGet: function (str: string) {\n    if (!str) {\n      return null;\n    }\n    // XXX: Kubernetes allows for named ports, but the URL spec says ports must be digits.\n    let scheme: string, port: string, host: string, hostname: string, rest: string[];\n    [scheme, ...rest] = str.split('://');\n    if (!scheme) {\n      return null;\n    }\n    str = rest.join();\n    [host, ...rest] = str.split('/');\n    const path = `/${rest.join()}`;\n    [hostname, port] = host.split(':');\n    if (_.isUndefined(port)) {\n      if (scheme === 'http') {\n        port = '80';\n      } else if (scheme === 'https') {\n        port = '443';\n      }\n    }\n    if (_.isUndefined(port)) {\n      return null;\n    }\n    return {\n      host: [scheme, '://', hostname].join(''),\n      path,\n      port: parseInt(port, 10) || port,\n    };\n  },\n\n  tcpSocket: function (str: string) {\n    if (str == null || str === '') {\n      return null;\n    }\n\n    return {\n      // as per http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_tcpsocketaction\n      // port can be either number or IANA name\n      port: /^\\d+$/.test(str) ? +str : str,\n    };\n  },\n};\n\nconst flatteners = {\n  exec: function (cmd: ExecProbe): string {\n    if (_.isEmpty(cmd) || _.isEmpty(cmd.command)) {\n      return '';\n    }\n    return cmd.command.join(' ');\n  },\n\n  httpGet: function (cmd: HTTPGetProbe, podIP: string): string {\n    let c = '';\n    if (_.isEmpty(cmd)) {\n      return c;\n    }\n\n    c += cmd.host || podIP;\n    if (cmd.port) {\n      c += `:${cmd.port}`;\n    }\n\n    if (cmd.path) {\n      if (cmd.path.startsWith('/')) {\n        c += cmd.path;\n      } else {\n        c += `/${cmd.path}`;\n      }\n    }\n    return c;\n  },\n\n  tcpSocket: function (cmd: TCPSocketProbe): string {\n    if (!cmd || !cmd.port) {\n      return '';\n    }\n    return `${cmd.port}`;\n  },\n};\n\nfunction inferAction(obj: Handler) {\n  const HookAction = Object.freeze({\n    exec: {\n      id: 'exec',\n      label: i18next.t('public~Exec command'),\n    },\n    httpGet: {\n      id: 'httpGet',\n      label: i18next.t('public~HTTP GET'),\n    },\n    tcpSocket: {\n      id: 'tcpSocket',\n      label: i18next.t('public~TCP socket (port)'),\n    },\n  });\n\n  if (_.isEmpty(obj)) {\n    return;\n  }\n  const keys = _.keys(obj);\n  if (_.isEmpty(keys)) {\n    return;\n  }\n  return HookAction[keys[0]];\n}\n\nexport function flattenCmd(type: string, cmd: any, podIP?: string) {\n  return flatteners[type](cmd, podIP);\n}\n\nexport function parseCmd(type: string, cmd: any) {\n  return parsers[type](cmd);\n}\n\nfunction getActionLabel(action): string {\n  if (action) {\n    return action.label;\n  }\n  return '';\n}\n\nexport function getActionLabelFromObject(obj: Handler): string {\n  const a = inferAction(obj);\n  return getActionLabel(a);\n}\n\nexport const getLifecycleHookLabel = function (\n  lifecycle: ContainerLifecycle,\n  stage: ContainerLifecycleStage,\n) {\n  if (!lifecycle || !stage || !lifecycle[stage]) {\n    return '';\n  }\n  return getActionLabelFromObject(lifecycle[stage]);\n};\n\n// Maps an api config object to a simple flattened type and command field.\nexport const mapLifecycleConfigToFields = function (lifecycle: ContainerLifecycle) {\n  const f = {\n    postStart: {\n      type: 'exec',\n      cmd: '',\n    },\n    preStop: {\n      type: 'exec',\n      cmd: '',\n    },\n  };\n\n  if (!lifecycle) {\n    return f;\n  }\n\n  if (!_.isEmpty(lifecycle.postStart)) {\n    const k = _.keys(lifecycle.postStart);\n    f.postStart.type = k[0];\n    f.postStart.cmd = flattenCmd(k[0], lifecycle.postStart[k[0]]);\n  }\n\n  if (!_.isEmpty(lifecycle.preStop)) {\n    const k = _.keys(lifecycle.preStop);\n    f.preStop.type = k[0];\n    f.preStop.cmd = flattenCmd(k[0], lifecycle.preStop[k[0]]);\n  }\n\n  return f;\n};\n\nexport const mapProbeToFields = function (probe: ContainerProbe, podIP: string) {\n  const f = {\n    type: 'exec',\n    cmd: '',\n  };\n\n  if (_.isEmpty(probe)) {\n    return f;\n  }\n\n  const k = _.keys(probe);\n  if (!_.isEmpty(k)) {\n    f.type = k[0];\n    f.cmd = flattenCmd(k[0], probe[k[0]], podIP);\n  }\n\n  return f;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useParams, useLocation } from 'react-router-dom-v5-compat';\nimport { CodeBlock, CodeBlockCode, Divider } from '@patternfly/react-core';\nimport { Status } from '@console/shared';\nimport {\n  ContainerLifecycle,\n  ContainerLifecycleStage,\n  ContainerPort,\n  ContainerProbe,\n  ContainerSpec,\n  ContainerStatus,\n  EnvVar,\n  PodKind,\n  ResourceList,\n  VolumeMount,\n} from '../module/k8s';\nimport * as k8sProbe from '../module/k8s/probe';\nimport {\n  getContainerRestartCount,\n  getContainerState,\n  getContainerStatus,\n  getPullPolicyLabel,\n} from '../module/k8s/container';\nimport {\n  Firehose,\n  HorizontalNav,\n  ConsoleEmptyState,\n  NodeLink,\n  PageHeading,\n  resourcePath,\n  ResourceLink,\n  ScrollToTopOnMount,\n  SectionHeading,\n  Timestamp,\n  LoadingBox,\n} from './utils';\nimport { getBreadcrumbPath } from '@console/internal/components/utils/breadcrumbs';\nimport i18n from 'i18next';\nimport { ErrorPage404 } from './error';\nimport { ContainerLastState } from './pod';\n\nconst formatComputeResources = (resources: ResourceList) =>\n  _.map(resources, (v, k) => `${k}: ${v}`).join(', ');\n\nconst getResourceRequestsValue = (container: ContainerSpec) => {\n  const requests: ResourceList = _.get(container, 'resources.requests');\n  return formatComputeResources(requests);\n};\n\nconst getResourceLimitsValue = (container: ContainerSpec) => {\n  const limits: ResourceList = _.get(container, 'resources.limits');\n  return formatComputeResources(limits);\n};\n\nconst Lifecycle: React.FC<LifecycleProps> = ({ lifecycle }) => {\n  const { t } = useTranslation();\n  const fields = lifecycle && k8sProbe.mapLifecycleConfigToFields(lifecycle);\n  const postStart = _.get(fields, 'postStart.cmd');\n  const preStop = _.get(fields, 'preStop.cmd');\n\n  const label = (stage: ContainerLifecycleStage) =>\n    lifecycle && k8sProbe.getLifecycleHookLabel(lifecycle, stage);\n  const postStartLabel = label('postStart');\n  const preStopLabel = label('preStop');\n  return (\n    <div>\n      {postStart && (\n        <div>\n          <Trans t={t} ns=\"public\">\n            PostStart: {{ postStartLabel }} <code className=\"co-code\">{{ postStart }}</code>\n          </Trans>\n        </div>\n      )}\n      {preStop && (\n        <div>\n          <Trans t={t} ns=\"public\">\n            PreStop: {{ preStopLabel }} <code className=\"co-code\">{{ preStop }}</code>\n          </Trans>\n        </div>\n      )}\n      {!postStart && !preStop && '-'}\n    </div>\n  );\n};\nLifecycle.displayName = 'Lifecycle';\n\nconst Probe: React.FC<ProbeProps> = ({ probe, podIP }) => {\n  const label = probe && k8sProbe.getActionLabelFromObject(probe);\n  const value = probe && _.get(k8sProbe.mapProbeToFields(probe, podIP), 'cmd');\n  if (!value) {\n    return <>-</>;\n  }\n  const isMultiline = value.indexOf('\\n') !== -1;\n  const formattedValue = isMultiline ? (\n    <pre className=\"co-pre\">{value}</pre>\n  ) : (\n    <code className=\"co-code\">{value}</code>\n  );\n  return (\n    <>\n      {label} {formattedValue}\n    </>\n  );\n};\nProbe.displayName = 'Probe';\n\nconst Ports: React.FC<PortsProps> = ({ ports }) => {\n  const { t } = useTranslation();\n  if (!ports || !ports.length) {\n    return (\n      <ConsoleEmptyState title={t('public~No ports have been exposed')}>\n        {t('public~Ports allow for traffic to enter this container')}\n      </ConsoleEmptyState>\n    );\n  }\n\n  return (\n    <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n      <thead className=\"pf-v5-c-table__thead\">\n        <tr className=\"pf-v5-c-table__tr\">\n          <th className=\"pf-v5-c-table__th\">{t('public~Name')}</th>\n          <th className=\"pf-v5-c-table__th\">{t('public~Container')}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ports.map((p: ContainerPort, i: number) => (\n          <tr className=\"pf-v5-c-table__tr\" key={i}>\n            <td className=\"pf-v5-c-table__td\">{p.name || '-'}</td>\n            <td className=\"pf-v5-c-table__td\">{p.containerPort}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst VolumeMounts: React.FC<VolumeMountProps> = ({ volumeMounts }) => {\n  const { t } = useTranslation();\n  if (!volumeMounts || !volumeMounts.length) {\n    return (\n      <ConsoleEmptyState title={t('public~No volumes have been mounted')}>\n        {t('public~Volumes allow data to be shared as files with the pod')}\n      </ConsoleEmptyState>\n    );\n  }\n\n  return (\n    <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n      <thead className=\"pf-v5-c-table__thead\">\n        <tr className=\"pf-v5-c-table__tr\">\n          <th className=\"pf-v5-c-table__th\">{t('public~Access')}</th>\n          <th className=\"pf-v5-c-table__th\">{t('public~Location')}</th>\n          <th className=\"pf-v5-c-table__th\">{t('public~Mount path')}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {volumeMounts.map((v: VolumeMount) => (\n          <tr className=\"pf-v5-c-table__tr\" key={v.name}>\n            <td className=\"pf-v5-c-table__td\">\n              {v.readOnly === true ? t('public~Read only') : t('public~Read/write')}\n            </td>\n            <td className=\"pf-v5-c-table__td pf-m-break-word co-select-to-copy\">{v.name}</td>\n            <td className=\"pf-v5-c-table__td\">\n              {v.mountPath ? (\n                <div className=\"co-break-all co-select-to-copy\">{v.mountPath}</div>\n              ) : (\n                '-'\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\nVolumeMounts.displayName = 'VolumeMounts';\n\nconst Env: React.FC<EnvProps> = ({ env }) => {\n  const { t } = useTranslation();\n  if (!env || !env.length) {\n    return (\n      <ConsoleEmptyState title={t('public~No variables have been set')}>\n        {t('public~An easy way to pass configuration values')}\n      </ConsoleEmptyState>\n    );\n  }\n\n  const value = (e: EnvVar) => {\n    const v = e.valueFrom;\n    if (_.has(v, 'fieldRef')) {\n      return t('public~field: {{fieldPath}}', v.fieldRef);\n    } else if (_.has(v, 'resourceFieldRef')) {\n      return t('public~resource: {{resource}}', v.resourceFieldRef);\n    } else if (_.has(v, 'configMapKeyRef')) {\n      return t('public~config-map: {{name}}/{{key}}', v.configMapKeyRef);\n    } else if (_.has(v, 'secretKeyRef')) {\n      return t('public~secret: {{name}}/{{key}}', v.secretKeyRef);\n    }\n    return e.value;\n  };\n\n  return (\n    <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n      <thead className=\"pf-v5-c-table__thead\">\n        <tr className=\"pf-v5-c-table__tr\">\n          <th className=\"pf-v5-c-table__th\">{t('public~Name')}</th>\n          <th className=\"pf-v5-c-table__th\">{t('public~Value')}</th>\n        </tr>\n      </thead>\n      <tbody className=\"pf-v5-c-table__tbody\">\n        {env.map((e: EnvVar, i: number) => (\n          <tr className=\"pf-v5-c-table__tr\" key={i}>\n            <td className=\"pf-v5-c-table__td\">{e.name}</td>\n            <td className=\"pf-v5-c-table__td\">{value(e)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\nEnv.displayName = 'Env';\n\n// Split image string into the image name and tag.\nconst getImageNameAndTag = (image: string) => {\n  if (!image) {\n    return { imageName: null, imageTag: null };\n  }\n  const index = image.lastIndexOf(':');\n  if (index === -1 || _.includes(image, '@sha256:')) {\n    return { imageName: image, imageTag: null };\n  }\n  const imageName = image.substr(0, index);\n  const imageTag = image.substr(index + 1);\n  return { imageName, imageTag };\n};\n\nconst getContainer = (pod: PodKind, name: String): ContainerSpec => {\n  if (!pod.spec) {\n    return null;\n  }\n\n  return _.find(pod.spec.containers, { name }) || _.find(pod.spec.initContainers, { name });\n};\n\nconst getContainerStateValue = (state: any) => {\n  const containerTerminated = state.value === 'terminated' && _.isFinite(state.exitCode);\n  return containerTerminated\n    ? i18n.t('public~{{label}} with exit code {{exitCode}}', {\n        label: state.label,\n        exitCode: state.exitCode,\n      })\n    : state.label;\n};\n\nexport const ContainerDetailsList: React.FC<ContainerDetailsListProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const pod = props.obj;\n  const container = getContainer(pod, params.name);\n\n  if (!container) {\n    return <ErrorPage404 />;\n  }\n\n  const status: ContainerStatus = getContainerStatus(pod, container.name);\n  const state = getContainerState(status);\n  const stateValue = getContainerStateValue(state);\n  const { imageName, imageTag } = getImageNameAndTag(container.image);\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <ScrollToTopOnMount />\n\n      <div className=\"row\">\n        <div className=\"col-lg-4\">\n          <SectionHeading text={t('public~Container details')} />\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('public~State')}</dt>\n            <dd>\n              <Status status={stateValue} />\n            </dd>\n            <dt>{t('public~Last State')}</dt>\n            <dd>\n              <ContainerLastState containerLastState={status?.lastState} />\n            </dd>\n            <dt>{t('public~ID')}</dt>\n            <dd>\n              {status?.containerID ? (\n                <div className=\"co-break-all co-select-to-copy\">{status.containerID}</div>\n              ) : (\n                '-'\n              )}\n            </dd>\n            <dt>{t('public~Restarts')}</dt>\n            <dd>{getContainerRestartCount(status)}</dd>\n            <dt>{t('public~Resource requests')}</dt>\n            <dd>{getResourceRequestsValue(container) || '-'}</dd>\n            <dt>{t('public~Resource limits')}</dt>\n            <dd>{getResourceLimitsValue(container) || '-'}</dd>\n            <dt>{t('public~Lifecycle hooks')}</dt>\n            <dd>\n              <Lifecycle lifecycle={container.lifecycle} />\n            </dd>\n            <dt>{t('public~Readiness probe')}</dt>\n            <dd>\n              <Probe probe={container.readinessProbe} podIP={pod.status.podIP || '-'} />\n            </dd>\n            <dt>{t('public~Liveness probe')}</dt>\n            <dd>\n              <Probe probe={container.livenessProbe} podIP={pod.status.podIP || '-'} />\n            </dd>\n            <dt>{t('public~Started')}</dt>\n            <dd>\n              <Timestamp timestamp={state.startedAt} />\n            </dd>\n            <dt>{t('public~Finished')}</dt>\n            <dd>\n              <Timestamp timestamp={state.finishedAt} />\n            </dd>\n            <dt>{t('public~Pod')}</dt>\n            <dd>\n              <ResourceLink kind=\"Pod\" name={params.podName} namespace={params.ns} />\n            </dd>\n          </dl>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text={t('public~Image details')} />\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('public~Image')}</dt>\n            <dd>\n              {imageName ? <div className=\"co-break-all co-select-to-copy\">{imageName}</div> : '-'}\n            </dd>\n            <dt>{t('public~Image version/tag')}</dt>\n            <dd>{imageTag || '-'}</dd>\n            <dt>{t('public~Command')}</dt>\n            <dd>\n              {container.command ? (\n                <CodeBlock className=\"co-code-block--no-header\">\n                  <CodeBlockCode>{container.command.join(' ')}</CodeBlockCode>\n                </CodeBlock>\n              ) : (\n                <span>-</span>\n              )}\n            </dd>\n            <dt>{t('public~Args')}</dt>\n            <dd>\n              {container.args ? (\n                <CodeBlock>\n                  <CodeBlockCode>{container.args.join(' ')}</CodeBlockCode>\n                </CodeBlock>\n              ) : (\n                <span>-</span>\n              )}\n            </dd>\n            <dt>{t('public~Pull policy')}</dt>\n            <dd>{getPullPolicyLabel(container)}</dd>\n          </dl>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text={t('public~Network')} />\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('public~Node')}</dt>\n            <dd>\n              <NodeLink name={pod.spec.nodeName} />\n            </dd>\n            <dt>{t('public~Pod IP')}</dt>\n            <dd>{pod.status.podIP || '-'}</dd>\n          </dl>\n        </div>\n      </div>\n\n      <Divider className=\"co-divider\" />\n\n      <div className=\"row\">\n        <div className=\"col-lg-4\">\n          <SectionHeading text={t('public~Ports')} />\n          <div className=\"co-table-container\">\n            <Ports ports={container.ports} />\n          </div>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text={t('public~Mounted volumes')} />\n          <div className=\"co-table-container\">\n            <VolumeMounts volumeMounts={container.volumeMounts} />\n          </div>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text={t('public~Environment variables')} />\n          <div className=\"co-table-container\">\n            <Env env={container.env} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nContainerDetailsList.displayName = 'ContainerDetailsList';\n\nexport const ContainersDetailsPage: React.FC = (props) => {\n  const params = useParams();\n  return (\n    <Firehose\n      resources={[\n        {\n          name: params.podName,\n          namespace: params.ns,\n          kind: 'Pod',\n          isList: false,\n          prop: 'obj',\n        },\n      ]}\n    >\n      <ContainerDetails {...props} />\n    </Firehose>\n  );\n};\nContainersDetailsPage.displayName = 'ContainersDetailsPage';\n\nconst getContainerStatusStateValue = (pod: PodKind, containerName: string) => {\n  const status: ContainerStatus = getContainerStatus(pod, containerName);\n  const state = getContainerState(status);\n\n  return getContainerStateValue(state);\n};\n\nexport const ContainerDetails: React.FC<ContainerDetailsProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const location = useLocation();\n\n  if (!props.loaded) {\n    return <LoadingBox />;\n  }\n\n  const pod = props.obj.data;\n  const container = getContainer(pod, params.name);\n\n  if (!container) {\n    return <ErrorPage404 />;\n  }\n\n  const containerStateValue = getContainerStatusStateValue(pod, container.name);\n\n  return (\n    <>\n      <PageHeading\n        detail={true}\n        title={params.name}\n        kind=\"Container\"\n        getResourceStatus={() => containerStateValue}\n        breadcrumbsFor={() => [\n          { name: t('public~Pods'), path: getBreadcrumbPath(params, 'pods') },\n          {\n            name: params.podName,\n            path: resourcePath('Pod', params.podName, params.ns),\n          },\n          { name: t('public~Container details'), path: location.pathname },\n        ]}\n        obj={props.obj}\n      />\n      <HorizontalNav\n        hideNav={true}\n        pages={[{ name: 'container', href: '', component: ContainerDetailsList }]}\n        obj={props.obj}\n      />\n    </>\n  );\n};\nContainerDetails.displayName = 'ContainerDetails';\n\ntype LifecycleProps = {\n  lifecycle: ContainerLifecycle;\n};\n\ntype ProbeProps = {\n  probe: ContainerProbe;\n  podIP: string;\n};\n\ntype PortsProps = {\n  ports: ContainerPort[];\n};\n\ntype VolumeMountProps = {\n  volumeMounts: VolumeMount[];\n};\n\ntype EnvProps = {\n  env: EnvVar[];\n};\n\nexport type ContainerDetailsListProps = {\n  obj: PodKind;\n};\n\nexport type ContainerDetailsProps = {\n  obj?: any;\n  loaded?: boolean;\n};\n"],"sourceRoot":""}