{"version":3,"sources":["webpack:///./packages/helm-plugin/src/providers/index.ts","webpack:///./packages/helm-plugin/src/const.ts","webpack:///./packages/helm-plugin/src/providers/useHelmChartRepositoriesBreadcrumbs.ts","webpack:///./packages/helm-plugin/src/providers/helm-detection-provider.ts"],"names":["FLAG_OPENSHIFT_HELM","FLAG_HELM_CHARTS_CATALOG_TYPE","HELM_CHART_CATALOG_TYPE_ID","HELM_CHART_ACTION_ID","getHelmChartRepositoriesModel","useHelmChartRepositoriesBreadcrumbs","kindObj","t","params","location","isAdminPerspective","undefined","useDetectHelmChartRepositories","setFeatureFlag","namespace","delay","setDelay","fetchHelmChartRepositories","helmChartRepos","then","fulfilledValues","rejectedReasons","some","l","hasEnabledHelmCharts","helmChartRepositories","items","hcr","spec","disabled","length","notFound","e","response","status","catch","err","console","log"],"mappings":"6FAAA,2O,kCCAA,wIAAO,MAAMA,EAAsB,iBACtBC,EAAgC,2BAChCC,EAA6B,YAC7BC,EAAuB,Q,kCCHpC,iHAOO,MAAMC,EAAgC,IAAM,CACjD,IACA,KAGWC,EAAuCC,IAClD,MAAM,EAAEC,GAAM,2BACRC,EAAS,sBACTC,EAAW,wBACXC,EAAmD,UAA9B,eAAuB,GAClD,OAAO,aACLJ,EACAG,EACAD,EACA,gBACA,eACAE,OAAqBC,EAAYJ,EAAE,6BAClCG,K,kCCxBL,sGAUO,MAGME,EAAkCC,IAC7C,MAAOC,GAAa,gCACbC,EAAOC,GAAY,WAAuB,KAC3CC,EAA6B,cAAkB,KACnD,MAAMC,EAAuD,CAC3D,YAAoC,KACpC,YAAoC,IAAiC,KAAMJ,IAE7E,YAAkBI,GACfC,KAAK,EAAEC,EAAiBC,MACvB,GAAID,EAAgBE,KAAMC,IAAMC,OAZtCC,OADmCA,EAawBF,aAAC,EAADA,EAAGG,YAZzC,EAArBD,EAAuBH,KAAMK,IAAO,MAAC,QAAU,QAAT,EAAAA,aAAG,EAAHA,EAAKC,YAAI,eAAEC,eAAa,EAD5B,IAACJ,IAc3BZ,EAAe,KAAqB,QAC/B,GAAIQ,EAAgBS,SAAWZ,EAAeY,OAAQ,CAC3D,MAAMC,EAAWV,EAAgBC,KAAMU,IAAK,MAAC,OAAwB,OAAb,QAAX,EAAAA,aAAC,EAADA,EAAGC,gBAAQ,eAAEC,UAEtDrB,EAAe,KADnBkB,QAEwCpB,GACxCK,EAAS,WAETH,EAAe,KAAqB,KAGvCsB,MAAOC,IAENC,QAAQC,IAAI,0CAA2CF,MAE1D,CAACtB,EAAWD,IACf,YAAQI,EAA4BF","file":"helm-plugin/code-refs/helmProviders-chunk-0d54937f6f841df6efbb.min.js","sourcesContent":["export { useDetectHelmChartRepositories } from './helm-detection-provider';\n\nexport {\n  useHelmChartRepositoriesBreadcrumbs,\n  getHelmChartRepositoriesModel,\n} from './useHelmChartRepositoriesBreadcrumbs';\n","export const FLAG_OPENSHIFT_HELM = 'OPENSHIFT_HELM';\nexport const FLAG_HELM_CHARTS_CATALOG_TYPE = 'HELM_CHARTS_CATALOG_TYPE';\nexport const HELM_CHART_CATALOG_TYPE_ID = 'HelmChart';\nexport const HELM_CHART_ACTION_ID = 'helm';\n","import { useTranslation } from 'react-i18next';\nimport { useParams, useLocation } from 'react-router-dom-v5-compat';\nimport { useActivePerspective } from '@console/dynamic-plugin-sdk';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { useTabbedTableBreadcrumbsFor } from '@console/shared';\nimport { HelmChartRepositoryModel, ProjectHelmChartRepositoryModel } from '../models';\n\nexport const getHelmChartRepositoriesModel = () => [\n  HelmChartRepositoryModel,\n  ProjectHelmChartRepositoryModel,\n];\n\nexport const useHelmChartRepositoriesBreadcrumbs = (kindObj: K8sKind) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const location = useLocation();\n  const isAdminPerspective = useActivePerspective()[0] === 'admin';\n  return useTabbedTableBreadcrumbsFor(\n    kindObj,\n    location,\n    params,\n    'helm-releases',\n    'repositories',\n    isAdminPerspective ? undefined : t('helm-plugin~Repositories'),\n    !isAdminPerspective,\n  );\n};\n","import * as React from 'react';\nimport { SetFeatureFlag } from '@console/dynamic-plugin-sdk';\nimport { settleAllPromises } from '@console/dynamic-plugin-sdk/src/utils/promise';\nimport { usePoll } from '@console/internal/components/utils/poll-hook';\nimport { fetchK8s } from '@console/internal/graphql/client';\nimport { K8sResourceKind, ListKind } from '@console/internal/module/k8s';\nimport { useActiveNamespace } from '@console/shared/src/hooks/useActiveNamespace';\nimport { FLAG_OPENSHIFT_HELM } from '../const';\nimport { HelmChartRepositoryModel, ProjectHelmChartRepositoryModel } from '../models';\n\nexport const hasEnabledHelmCharts = (helmChartRepositories: K8sResourceKind[]): boolean =>\n  helmChartRepositories?.some((hcr) => !hcr?.spec?.disabled) || false;\n\nexport const useDetectHelmChartRepositories = (setFeatureFlag: SetFeatureFlag) => {\n  const [namespace] = useActiveNamespace();\n  const [delay, setDelay] = React.useState<number>(10 * 1000);\n  const fetchHelmChartRepositories = React.useCallback(() => {\n    const helmChartRepos: Promise<ListKind<K8sResourceKind>>[] = [\n      fetchK8s<ListKind<K8sResourceKind>>(HelmChartRepositoryModel),\n      fetchK8s<ListKind<K8sResourceKind>>(ProjectHelmChartRepositoryModel, null, namespace),\n    ];\n    settleAllPromises(helmChartRepos)\n      .then(([fulfilledValues, rejectedReasons]) => {\n        if (fulfilledValues.some((l) => hasEnabledHelmCharts(l?.items))) {\n          setFeatureFlag(FLAG_OPENSHIFT_HELM, true);\n        } else if (rejectedReasons.length === helmChartRepos.length) {\n          const notFound = rejectedReasons.some((e) => e?.response?.status === 404);\n          notFound\n            ? setFeatureFlag(FLAG_OPENSHIFT_HELM, false)\n            : setFeatureFlag(FLAG_OPENSHIFT_HELM, undefined);\n          setDelay(null);\n        } else {\n          setFeatureFlag(FLAG_OPENSHIFT_HELM, false);\n        }\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.log('failed to fetch helm chart repositories', err);\n      });\n  }, [namespace, setFeatureFlag]);\n  usePoll(fetchHelmChartRepositories, delay);\n};\n"],"sourceRoot":""}