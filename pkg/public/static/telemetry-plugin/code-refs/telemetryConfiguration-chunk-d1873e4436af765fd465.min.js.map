{"version":3,"sources":["webpack:///./packages/console-telemetry-plugin/src/components/TelemetryConfiguration.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/useConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/patchConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/FormLayout.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/LoadError.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/SaveStatus.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/index.ts"],"names":["TelemetryAnalyticsSelect","disabled","value","onChange","t","options","OPTIN","title","description","isSelected","OPTOUT","ENFORCE","DISABLED","isOpen","setIsOpen","selection","find","option","toggle","toggleRef","ref","onClick","isExpanded","isDisabled","isFullWidth","onSelect","_","selectedValue","onOpenChange","open","map","key","readonly","fireTelemetryEvent","consoleConfig","consoleConfigLoaded","consoleConfigError","configuredTelemetrySetting","setConfiguredTelemetrySetting","metadata","annotations","saveStatus","setSaveStatus","save","status","patch","then","catch","error","isHorizontal","selectedOption","customize","analytics","groupVersionKind","isList","name","resource","url","headers","Accept","body","JSON","stringify","children","isWidthLimited","className","form","modifiers","horizontal","limitWidth","variant","isInline","message","toString","SaveStatus"],"mappings":"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","file":"telemetry-plugin/code-refs/telemetryConfiguration-chunk-d1873e4436af765fd465.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  FormHelperText,\n  FormSection,\n  Select,\n  SelectList,\n  SelectOption,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CLUSTER_TELEMETRY_ANALYTICS, useTelemetry } from '@console/shared/src';\nimport {\n  useDebounceCallback,\n  useConsoleOperatorConfig,\n  patchConsoleOperatorConfig,\n  FormLayout,\n  LoadError,\n  SaveStatus,\n  SaveStatusProps,\n} from '@console/shared/src/components/cluster-configuration';\n\ntype TelemetryConsoleConfig = K8sResourceKind & {\n  metadata: {\n    annotations?: {\n      'telemetry.console.openshift.io/STATE': CLUSTER_TELEMETRY_ANALYTICS;\n    };\n  };\n};\n\ntype TelemetryAnalyticsSelectOptions = {\n  value: CLUSTER_TELEMETRY_ANALYTICS;\n  title: string;\n  description: string;\n  isSelected: boolean;\n};\n\nconst TelemetryAnalyticsSelect: React.FC<{\n  disabled: boolean;\n  value?: CLUSTER_TELEMETRY_ANALYTICS;\n  onChange: (selectedOption: TelemetryAnalyticsSelectOptions) => void;\n}> = ({ disabled, value, onChange }) => {\n  const { t } = useTranslation();\n  const options: TelemetryAnalyticsSelectOptions[] = [\n    {\n      value: CLUSTER_TELEMETRY_ANALYTICS.OPTIN,\n      title: t('console-telemetry-plugin~Opt-in'),\n      description: t('console-telemetry-plugin~Opt-in to send telemetry events.'),\n      isSelected: value === CLUSTER_TELEMETRY_ANALYTICS.OPTIN,\n    },\n    {\n      value: CLUSTER_TELEMETRY_ANALYTICS.OPTOUT,\n      title: t('console-telemetry-plugin~Opt-out'),\n      description: t('console-telemetry-plugin~Opt-out to send telemetry events.'),\n      isSelected: value === CLUSTER_TELEMETRY_ANALYTICS.OPTOUT,\n    },\n    {\n      value: CLUSTER_TELEMETRY_ANALYTICS.ENFORCE,\n      title: t('console-telemetry-plugin~Enforce'),\n      description: t('console-telemetry-plugin~Always send telemetry events.'),\n      isSelected: value === CLUSTER_TELEMETRY_ANALYTICS.ENFORCE,\n    },\n    {\n      value: CLUSTER_TELEMETRY_ANALYTICS.DISABLED,\n      title: t('console-telemetry-plugin~Disabled'),\n      description: t('console-telemetry-plugin~Disable the telemetry in the cluster.'),\n      isSelected: value === CLUSTER_TELEMETRY_ANALYTICS.DISABLED,\n    },\n  ];\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const selection = options.find((option) => option.isSelected)?.value;\n\n  const toggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle\n      ref={toggleRef}\n      onClick={() => setIsOpen(!isOpen)}\n      isExpanded={isOpen}\n      isDisabled={disabled}\n      isFullWidth\n    >\n      {options.find((option) => option.value === selection)?.title ||\n        t('console-telemetry-plugin~Select option')}\n    </MenuToggle>\n  );\n\n  return (\n    <div data-test=\"telemetry-dropdown\">\n      <Select\n        toggle={toggle}\n        isOpen={isOpen}\n        onSelect={(_, selectedValue: TelemetryAnalyticsSelectOptions) => {\n          if (selectedValue && !disabled) {\n            onChange(selectedValue);\n          }\n          setIsOpen(false);\n        }}\n        onOpenChange={(open) => setIsOpen(open)}\n      >\n        <SelectList>\n          {options.map((option) => (\n            <SelectOption\n              key={option.value}\n              value={option}\n              description={option.description}\n              data-test={`telemetry-dropdown-option-${option.title}`}\n              isSelected={option.isSelected}\n            >\n              {option.title}\n            </SelectOption>\n          ))}\n        </SelectList>\n      </Select>\n    </div>\n  );\n};\n\nconst TelemetryConfiguration: React.FC<{ readonly: boolean }> = ({ readonly }) => {\n  const { t } = useTranslation();\n  const fireTelemetryEvent = useTelemetry();\n\n  // Current configuration\n  const [consoleConfig, consoleConfigLoaded, consoleConfigError] = useConsoleOperatorConfig<\n    TelemetryConsoleConfig\n  >();\n  const [configuredTelemetrySetting, setConfiguredTelemetrySetting] = React.useState<\n    CLUSTER_TELEMETRY_ANALYTICS\n  >();\n  React.useEffect(() => {\n    if (consoleConfig && consoleConfigLoaded && !configuredTelemetrySetting) {\n      setConfiguredTelemetrySetting(\n        consoleConfig?.metadata?.annotations?.['telemetry.console.openshift.io/STATE'],\n      );\n    }\n  }, [configuredTelemetrySetting, consoleConfig, consoleConfigLoaded]);\n\n  // Save the latest changes\n  const [saveStatus, setSaveStatus] = React.useState<SaveStatusProps>();\n  const save = useDebounceCallback(() => {\n    setSaveStatus({ status: 'in-progress' });\n\n    const patch = {\n      metadata: {\n        annotations: {\n          'telemetry.console.openshift.io/STATE': configuredTelemetrySetting,\n        },\n      },\n    };\n    patchConsoleOperatorConfig(patch)\n      .then(() => setSaveStatus({ status: 'successful' }))\n      .catch((error) => setSaveStatus({ status: 'error', error }));\n  }, 2000);\n\n  const disabled = readonly || !consoleConfigLoaded || !!consoleConfigError;\n\n  const onChange = (selectedOption: TelemetryAnalyticsSelectOptions) => {\n    fireTelemetryEvent('Console cluster configuration changed', {\n      customize: 'Telemetry',\n      analytics: selectedOption.value,\n    });\n    setConfiguredTelemetrySetting(selectedOption.value);\n    save();\n  };\n\n  return (\n    <FormLayout isHorizontal>\n      <FormSection\n        title={t('console-telemetry-plugin~Analytics')}\n        data-test=\"telemetry form-section\"\n      >\n        <FormHelperText>\n          {t(\n            'console-telemetry-plugin~As admin you can decide sending telemetry events to a pre-configured Red Hat proxy that can be forwarded to third-party services for analysis.',\n          )}\n        </FormHelperText>\n        <TelemetryAnalyticsSelect\n          disabled={disabled}\n          value={configuredTelemetrySetting}\n          onChange={onChange}\n        />\n        <LoadError error={consoleConfigError} />\n        <SaveStatus {...saveStatus} />\n      </FormSection>\n    </FormLayout>\n  );\n};\n\nexport default TelemetryConfiguration;\n","import { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sWatchResource';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\nconst useConsoleOperatorConfig = <R extends K8sResourceKind>() => {\n  return useK8sWatchResource<R>({\n    groupVersionKind: getGroupVersionKindForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n};\n\nexport default useConsoleOperatorConfig;\n","import { consoleFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch/console-fetch';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind, resourceURL } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\n/**\n * JSON Merge Patch instead of JSON patch to update also properties that doesn't exist yet.\n *\n * See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment\n */\nconst patchConsoleOperatorConfig = <R extends K8sResourceKind>(resource: R): Promise<R> => {\n  const url = resourceURL(ConsoleOperatorConfigModel, { name: CONSOLE_OPERATOR_CONFIG_NAME });\n  return consoleFetchJSON(url, 'PATCH', {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/merge-patch+json;charset=UTF-8',\n    },\n    body: JSON.stringify(resource),\n  });\n};\n\nexport default patchConsoleOperatorConfig;\n","import * as React from 'react';\nimport { FormProps } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\n\nexport type FormLayoutProps = Pick<FormProps, 'children' | 'isHorizontal' | 'isWidthLimited'>;\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  children,\n  isHorizontal = false,\n  isWidthLimited = true,\n}) => {\n  return (\n    <div\n      className={css(\n        formStyles.form,\n        isHorizontal && formStyles.modifiers.horizontal,\n        isWidthLimited && formStyles.modifiers.limitWidth,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default FormLayout;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadError: React.FC<{ error?: Error }> = ({ error }) => {\n  const { t } = useTranslation();\n  if (!error) {\n    return null;\n  }\n  return (\n    <Alert variant=\"warning\" isInline title={t('console-shared~Could not load configuration.')}>\n      {error.message?.toString?.() || error.toString?.()}\n    </Alert>\n  );\n};\n\nexport default LoadError;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type SaveStatusProps = {\n  status: 'pending' | 'in-progress' | 'successful' | 'error';\n  error?: Error;\n};\n\nexport const SaveStatus: React.FC<SaveStatusProps> = ({ status, error }) => {\n  const { t } = useTranslation();\n  if (status === 'successful') {\n    return (\n      <Alert\n        variant=\"success\"\n        data-test=\"success-alert\"\n        isInline\n        title={t('console-shared~Saved.')}\n      >\n        {t(\n          'console-shared~This config update requires a console rollout, this can take up to a minute and require a browser refresh.',\n        )}\n      </Alert>\n    );\n  }\n  if (status === 'error') {\n    return (\n      <Alert variant=\"danger\" isInline title={t('console-shared~Could not save configuration.')}>\n        {error?.message?.toString?.() || error?.toString?.()}\n      </Alert>\n    );\n  }\n  return null;\n};\n","export { useDebounceCallback } from '../../hooks/debounce';\n\nexport { default as useConsoleOperatorConfig } from './useConsoleOperatorConfig';\nexport { default as patchConsoleOperatorConfig } from './patchConsoleOperatorConfig';\nexport { default as FormLayout } from './FormLayout';\nexport { default as LoadError } from './LoadError';\nexport * from './SaveStatus';\nexport * from './path-utils';\n"],"sourceRoot":""}