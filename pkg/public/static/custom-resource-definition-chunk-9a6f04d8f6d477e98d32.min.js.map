{"version":3,"sources":["webpack:///./public/components/custom-resource-definition.tsx"],"names":["common","factory","menuActions","kind","obj","labelKey","href","crd","getExtensionsActionsForKind","tableColumnClasses","columnClass","Established","t","status","conditions","condition","c","type","isEstablished","title","EmptyVersionsMsg","label","CRDVersionTable","versions","sortBy","setSortBy","index","direction","asc","onSort","_event","compare","a","b","descending","desc","left","right","localeCompare","versionRows","map","name","served","storage","toString","sort","headers","length","variant","compact","header","columnIndex","key","Details","className","text","showPodSelector","showNodeSelector","resource","path","spec","Instances","namespace","resourceListPageExtensions","dynamicResourceListPageExtensions","crdKind","componentLoader","get","Promise","resolve","loader","undefined","showTitle","autoFocus","CustomResourceDefinitionsList","props","fallback","Header","sortField","transforms","sortFunc","Row","metadata","displayName","group","scope","namespaced","actions","defaultSortField","virtualize","CustomResourceDefinitionsPage","ListComponent","canCreate","textFilter","CustomResourceDefinitionsDetailsPage","pages","details","editYaml","nameKey","component"],"mappings":"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","file":"custom-resource-definition-chunk-9a6f04d8f6d477e98d32.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  sortable,\n  SortByDirection,\n  TableVariant,\n  Table as PfTable,\n  Thead,\n  Tbody,\n  Td,\n  Th,\n  Tr,\n} from '@patternfly/react-table';\nimport { BanIcon } from '@patternfly/react-icons/dist/esm/icons/ban-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { DetailsPage, ListPage, TableData, RowFunctionArgs, Table } from './factory';\nimport {\n  AsyncComponent,\n  DetailsItem,\n  EmptyBox,\n  Kebab,\n  KebabAction,\n  LoadingBox,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from './utils';\nimport {\n  apiVersionCompare,\n  CRDVersion,\n  CustomResourceDefinitionKind,\n  getLatestVersionForCRD,\n  K8sKind,\n  referenceForCRD,\n} from '../module/k8s';\nimport { CustomResourceDefinitionModel } from '../models';\nimport { Conditions } from './conditions';\nimport { getResourceListPages } from './resource-pages';\nimport { DefaultPage } from './default-resource';\nimport { GreenCheckCircleIcon } from '@console/shared';\nimport { useExtensions, isResourceListPage, ResourceListPage } from '@console/plugin-sdk';\nimport {\n  ResourceListPage as DynamicResourceListPage,\n  isResourceListPage as isDynamicResourceListPage,\n} from '@console/dynamic-plugin-sdk';\n\nconst { common } = Kebab.factory;\n\nconst crdInstancesPath = (crd: CustomResourceDefinitionKind) =>\n  _.get(crd, 'spec.scope') === 'Namespaced'\n    ? `/k8s/all-namespaces/${referenceForCRD(crd)}`\n    : `/k8s/cluster/${referenceForCRD(crd)}`;\n\nconst instances = (kind: K8sKind, obj: CustomResourceDefinitionKind) => ({\n  // t('public~View instances')\n  labelKey: 'public~View instances',\n  href: crdInstancesPath(obj),\n});\n\nconst menuActions: KebabAction[] = [\n  instances,\n  ...Kebab.getExtensionsActionsForKind(CustomResourceDefinitionModel),\n  ...common,\n];\n\nconst tableColumnClasses = [\n  'pf-m-u-w-33-on-md pf-v5-u-w-25-on-lg',\n  'pf-m-u-w-33-on-md pf-v5-u-w-25-on-lg',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-xl',\n  Kebab.columnClass,\n];\n\nconst isEstablished = (conditions: any[]) => {\n  const condition = _.find(conditions, (c) => c.type === 'Established');\n  return condition && condition.status === 'True';\n};\n\nconst namespaced = (crd: CustomResourceDefinitionKind) => crd.spec.scope === 'Namespaced';\n\nconst Established: React.FC<{ crd: CustomResourceDefinitionKind }> = ({ crd }) => {\n  const { t } = useTranslation();\n  return crd.status && isEstablished(crd.status.conditions) ? (\n    <span>\n      <GreenCheckCircleIcon title={t('public~true')} />\n    </span>\n  ) : (\n    <span>\n      <BanIcon title={t('public~false')} />\n    </span>\n  );\n};\n\nconst EmptyVersionsMsg: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  return <EmptyBox label={t('public~CRD versions')} />;\n};\n\nconst CRDVersionTable: React.FC<CRDVersionProps> = ({ versions }) => {\n  const { t } = useTranslation();\n  const [sortBy, setSortBy] = React.useState({ index: 0, direction: SortByDirection.asc });\n  const onSort = React.useCallback(\n    (_event, index, direction) => setSortBy({ index, direction }),\n    [],\n  );\n  const compare = React.useCallback(\n    (a, b) => {\n      const { index, direction } = sortBy;\n      const descending = direction === SortByDirection.desc;\n      const left = (descending ? b : a)?.[index] ?? '';\n      const right = (descending ? a : b)?.[index] ?? '';\n      return index === 0 ? apiVersionCompare(left, right) : left.localeCompare(right);\n    },\n    [sortBy],\n  );\n\n  const versionRows = React.useMemo(\n    () =>\n      versions\n        .map(({ name, served, storage }: CRDVersion) => [\n          name,\n          served?.toString?.(),\n          storage?.toString?.(),\n        ])\n        .sort(compare),\n    [versions, compare],\n  );\n\n  const headers = React.useMemo(() => [t('public~Name'), t('public~Served'), t('public~Storage')], [\n    t,\n  ]);\n\n  return versionRows.length > 0 ? (\n    <PfTable variant={TableVariant.compact} aria-label={t('public~CRD versions')}>\n      <Thead>\n        <Tr>\n          {headers.map((header, columnIndex) => (\n            <Th key={header} sort={{ sortBy, onSort, columnIndex }}>\n              {header}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {versionRows.map(([name, served, storage]) => (\n          <Tr key={name}>\n            <Td>{name}</Td>\n            <Td>{served}</Td>\n            <Td>{storage}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </PfTable>\n  ) : (\n    <EmptyVersionsMsg />\n  );\n};\n\nconst Details: React.FC<{ obj: CustomResourceDefinitionKind }> = ({ obj: crd }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~CustomResourceDefinition details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary showPodSelector={false} showNodeSelector={false} resource={crd} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('public~Established')}</dt>\n                <dd>\n                  <Established crd={crd} />\n                </dd>\n                <DetailsItem label={t('public~Group')} obj={crd} path=\"spec.group\" />\n                <dt>{t('public~Latest version')}</dt>\n                <dd>{getLatestVersionForCRD(crd)}</dd>\n                <DetailsItem label={t('public~Scope')} obj={crd} path=\"spec.scope\" />\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={crd.status.conditions} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Versions')} />\n        <CRDVersionTable versions={crd.spec.versions} />\n      </div>\n    </>\n  );\n};\n\nconst Instances: React.FC<InstancesProps> = ({ obj, namespace }) => {\n  const resourceListPageExtensions = useExtensions<ResourceListPage>(isResourceListPage);\n  const dynamicResourceListPageExtensions = useExtensions<DynamicResourceListPage>(\n    isDynamicResourceListPage,\n  );\n  const crdKind = referenceForCRD(obj);\n  const componentLoader = getResourceListPages(\n    resourceListPageExtensions,\n    dynamicResourceListPageExtensions,\n  ).get(crdKind, () => Promise.resolve(DefaultPage));\n  return (\n    <AsyncComponent\n      loader={componentLoader}\n      namespace={namespace ? namespace : undefined}\n      kind={crdKind}\n      showTitle={false}\n      autoFocus={false}\n    />\n  );\n};\n\nexport const CustomResourceDefinitionsList: React.FC<CustomResourceDefinitionsListProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const CRDTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'spec.names.kind',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Group'),\n        sortField: 'spec.group',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Latest version'),\n        sortFunc: 'crdLatestVersion',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Namespaced'),\n        sortField: 'spec.scope',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('public~Established'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n  const CRDTableRow: React.FC<RowFunctionArgs<CustomResourceDefinitionKind>> = ({ obj: crd }) => {\n    return (\n      <>\n        <TableData className={tableColumnClasses[0]}>\n          <span className=\"co-resource-item\">\n            <ResourceLink\n              kind=\"CustomResourceDefinition\"\n              name={crd.metadata.name}\n              namespace={crd.metadata.namespace}\n              displayName={_.get(crd, 'spec.names.kind')}\n            />\n          </span>\n        </TableData>\n        <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n          {crd.spec.group}\n        </TableData>\n        <TableData className={tableColumnClasses[2]}>{getLatestVersionForCRD(crd)}</TableData>\n        <TableData className={tableColumnClasses[3]}>\n          {namespaced(crd) ? t('public~Yes') : t('public~No')}\n        </TableData>\n        <TableData className={tableColumnClasses[4]}>\n          <Established crd={crd} />\n        </TableData>\n        <TableData className={tableColumnClasses[5]}>\n          <ResourceKebab actions={menuActions} kind=\"CustomResourceDefinition\" resource={crd} />\n        </TableData>\n      </>\n    );\n  };\n\n  return (\n    <React.Suspense fallback={<LoadingBox />}>\n      <Table\n        {...props}\n        aria-label={CustomResourceDefinitionModel.label}\n        Header={CRDTableHeader}\n        Row={CRDTableRow}\n        defaultSortField=\"spec.names.kind\"\n        virtualize\n      />\n    </React.Suspense>\n  );\n};\n\nexport const CustomResourceDefinitionsPage: React.FC<CustomResourceDefinitionsPageProps> = (\n  props,\n) => (\n  <ListPage\n    {...props}\n    ListComponent={CustomResourceDefinitionsList}\n    kind=\"CustomResourceDefinition\"\n    canCreate={true}\n    textFilter=\"custom-resource-definition-name\"\n  />\n);\nexport const CustomResourceDefinitionsDetailsPage: React.FC = (props) => {\n  return (\n    <DetailsPage\n      {...props}\n      kind=\"CustomResourceDefinition\"\n      menuActions={menuActions}\n      pages={[\n        navFactory.details(Details),\n        navFactory.editYaml(),\n        {\n          // t('public~Instances')\n          nameKey: 'public~Instances',\n          href: 'instances',\n          component: Instances,\n        },\n      ]}\n    />\n  );\n};\n\nexport type CustomResourceDefinitionsListProps = {};\n\nexport type CustomResourceDefinitionsPageProps = {};\n\ntype InstancesProps = {\n  obj: CustomResourceDefinitionKind;\n  namespace: string;\n};\n\nCustomResourceDefinitionsList.displayName = 'CustomResourceDefinitionsList';\nCustomResourceDefinitionsPage.displayName = 'CustomResourceDefinitionsPage';\n\nexport type CRDVersionProps = {\n  versions: CRDVersion[];\n};\n"],"sourceRoot":""}