{"version":3,"sources":["webpack:///./public/components/modals/configure-update-strategy-modal.tsx"],"names":["getNumberOrPercent","value","indexOf","ConfigureUpdateStrategy","props","showDescription","t","className","name","uid","onChange","e","onChangeStrategyType","target","checked","strategyType","title","subTitle","autoFocus","htmlFor","disabled","placeholder","size","type","id","maxUnavailable","onChangeMaxUnavailable","replicas","content","count","maxSurge","onChangeMaxSurge","desc","ConfigureUpdateStrategyModal","setStrategyType","deployment","spec","setMaxUnavailable","setMaxSurge","onSubmit","event","preventDefault","patch","path","op","promise","handlePromise","close","errorMessage","inProgress","submitText","cancel","configureUpdateStrategyModal","displayName"],"mappings":"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","file":"configure-update-strategy-modal-chunk-d500eed010baceecc72a.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nimport { k8sPatch, Patch, DeploymentUpdateStrategy, K8sResourceKind } from '../../module/k8s';\nimport { DeploymentModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { withHandlePromise, HandlePromiseProps } from '../utils';\nimport { RadioInput } from '../radio';\n\nexport const getNumberOrPercent = (value) => {\n  if (typeof value === 'undefined') {\n    return null;\n  }\n  if (typeof value === 'string' && value.indexOf('%') > -1) {\n    return value;\n  }\n\n  return _.toInteger(value);\n};\n\nexport const ConfigureUpdateStrategy: React.FC<ConfigureUpdateStrategyProps> = (props) => {\n  const { showDescription = true } = props;\n  const { t } = useTranslation();\n  return (\n    <>\n      {showDescription && (\n        <div className=\"co-m-form-row\">\n          <p>{t('public~How should the pods be replaced when a new revision is created?')}</p>\n        </div>\n      )}\n      <div className=\"row co-m-form-row\">\n        <div className=\"col-sm-12\">\n          <RadioInput\n            name={`${props.uid || 'update-strategy'}-type`}\n            onChange={(e) => {\n              props.onChangeStrategyType(e.target.value);\n            }}\n            value=\"RollingUpdate\"\n            checked={props.strategyType === 'RollingUpdate'}\n            title={t('public~RollingUpdate')}\n            subTitle={t('public~(default)')}\n            autoFocus={props.strategyType === 'RollingUpdate'}\n          >\n            <div className=\"co-m-radio-desc\">\n              <p className=\"text-muted modal-paragraph\">\n                {t(\n                  'public~Execute a smooth roll out of the new revision, based on the settings below',\n                )}\n              </p>\n\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-sm-3\">\n                  <label htmlFor=\"input-max-unavailable\" className=\"control-label co-break-word\">\n                    {t('public~Max unavailable')}\n                  </label>\n                </div>\n                <div className=\"co-m-form-col col-sm-9\">\n                  <div className=\"form-inline\">\n                    <div className=\"pf-v5-c-input-group\">\n                      <input\n                        disabled={props.strategyType !== 'RollingUpdate'}\n                        placeholder=\"25%\"\n                        size={5}\n                        type=\"text\"\n                        className=\"pf-v5-c-form-control\"\n                        id=\"input-max-unavailable\"\n                        value={props.maxUnavailable}\n                        onChange={(e) => props.onChangeMaxUnavailable(e.target.value)}\n                        aria-describedby=\"input-max-unavailable-help\"\n                      />\n                      {props.replicas && (\n                        <span className=\"pf-v5-c-input-group__text\">\n                          <Tooltip content={t('public~Current desired pod count')}>\n                            <span>{t('public~of pod', { count: props.replicas })}</span>\n                          </Tooltip>\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"help-block text-muted\" id=\"input-max-unavailable-help\">\n                    {t(\n                      'public~Percentage of total number of pods or the maximum number ' +\n                        'of pods that can be unavailable during the update(optional)',\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-sm-3\">\n                  <label htmlFor=\"input-max-surge\" className=\"control-label co-break-word\">\n                    {t('public~Max surge')}\n                  </label>\n                </div>\n                <div className=\"co-m-form-col col-sm-9\">\n                  <div className=\"form-inline\">\n                    <div className=\"pf-v5-c-input-group\">\n                      <input\n                        disabled={props.strategyType !== 'RollingUpdate'}\n                        placeholder=\"25%\"\n                        size={5}\n                        type=\"text\"\n                        className=\"pf-v5-c-form-control\"\n                        id=\"input-max-surge\"\n                        value={props.maxSurge}\n                        onChange={(e) => props.onChangeMaxSurge(e.target.value)}\n                        aria-describedby=\"input-max-surge-help\"\n                      />\n                      <span className=\"pf-v5-c-input-group__text\">\n                        <Tooltip content={t('public~Current desired pod count')}>\n                          <span>{t('public~greater than pod', { count: props.replicas })}</span>\n                        </Tooltip>\n                      </span>\n                    </div>\n                  </div>\n                  <p className=\"help-block text-muted\" id=\"input-max-surge-help\">\n                    {t(\n                      'public~Percentage of total number of pods or the maximum number ' +\n                        'of pods that can be scheduled above the original number of pods(optional)',\n                    )}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </RadioInput>\n        </div>\n\n        <div className=\"col-sm-12\">\n          <RadioInput\n            name={`${props.uid || 'update-strategy'}-type`}\n            onChange={(e) => {\n              props.onChangeStrategyType(e.target.value);\n            }}\n            value=\"Recreate\"\n            checked={props.strategyType === 'Recreate'}\n            title={t('public~Recreate')}\n            desc={t('public~Shut down all existing pods before creating new ones')}\n            autoFocus={props.strategyType === 'Recreate'}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const ConfigureUpdateStrategyModal = withHandlePromise(\n  (props: ConfigureUpdateStrategyModalProps) => {\n    const [strategyType, setStrategyType] = React.useState(\n      _.get(props.deployment.spec, 'strategy.type'),\n    );\n    const [maxUnavailable, setMaxUnavailable] = React.useState(\n      _.get(props.deployment.spec, 'strategy.rollingUpdate.maxUnavailable', '25%'),\n    );\n    const [maxSurge, setMaxSurge] = React.useState(\n      _.get(props.deployment.spec, 'strategy.rollingUpdate.maxSurge', '25%'),\n    );\n\n    const { t } = useTranslation();\n\n    const submit = (event) => {\n      event.preventDefault();\n\n      const patch: Patch = { path: '/spec/strategy/rollingUpdate', op: 'remove' };\n      if (strategyType === 'RollingUpdate') {\n        patch.value = {\n          maxUnavailable: getNumberOrPercent(maxUnavailable || '25%'),\n          maxSurge: getNumberOrPercent(maxSurge || '25%'),\n        };\n        patch.op = 'add';\n      }\n      const promise = k8sPatch(DeploymentModel, props.deployment, [\n        patch,\n        { path: '/spec/strategy/type', value: strategyType, op: 'replace' },\n      ]);\n      props.handlePromise(promise, props.close);\n    };\n\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>{t('public~Edit update strategy')}</ModalTitle>\n        <ModalBody>\n          <ConfigureUpdateStrategy\n            strategyType={strategyType}\n            maxUnavailable={maxUnavailable}\n            maxSurge={maxSurge}\n            onChangeStrategyType={setStrategyType}\n            onChangeMaxUnavailable={setMaxUnavailable}\n            onChangeMaxSurge={setMaxSurge}\n            replicas={props.deployment.spec.replicas}\n          />\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={props.errorMessage}\n          inProgress={props.inProgress}\n          submitText={t('public~Save')}\n          cancel={props.cancel}\n        />\n      </form>\n    );\n  },\n);\n\nexport const configureUpdateStrategyModal = createModalLauncher(ConfigureUpdateStrategyModal);\n\nexport type ConfigureUpdateStrategyProps = {\n  showDescription?: boolean;\n  strategyType: DeploymentUpdateStrategy['type'];\n  maxUnavailable: number | string;\n  maxSurge: number | string;\n  onChangeStrategyType: (strategy: DeploymentUpdateStrategy['type']) => void;\n  onChangeMaxUnavailable: (maxUnavailable: number | string) => void;\n  onChangeMaxSurge: (maxSurge: number | string) => void;\n  replicas?: number;\n  uid?: string;\n};\n\nexport type ConfigureUpdateStrategyModalProps = {\n  deployment: K8sResourceKind;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n} & HandlePromiseProps;\n\nConfigureUpdateStrategy.displayName = 'ConfigureUpdateStrategy';\n"],"sourceRoot":""}