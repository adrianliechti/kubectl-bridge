{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager-v1/src/contexts/useExtensionCatalogDatabaseContextValues.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/indexeddb.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/types.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/bundles.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/const.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/injest.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/metadata.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/jsonl.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/packages.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/channels.ts","webpack:///./packages/operator-lifecycle-manager-v1/src/database/type-guards.ts"],"names":["useExtensionCatalogDatabaseContextValues","catalogs","groupVersionKind","isList","done","setDone","error","setError","refresh","newCatalogs","then","database","catch","e","currentRefresh","current","cancel","openDatabase","dbName","version","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","db","result","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","channelStore","bundleStore","extensionCatalogStore","multiEntry","onsuccess","onerror","Error","message","getObjectStore","storeName","mode","transaction","objectStore","putItem","item","put","getItems","getAll","getIndexedItems","index","value","storeIndex","keyRange","IDBKeyRange","only","cursorRequest","openCursor","objects","cursor","push","continue","clearObjectStores","names","all","map","name","clear","clearObjectStore","FileBasedCatalogSchema","CSVMetadataKey","NormalizedCSVMetadataKey","bundleHasProperty","bundle","propertyType","properties","some","type","getBundleVersion","versionString","find","getBundleProperty","package","compareBundleVersions","a","b","aVersion","bVersion","getBundleMetadataForPackage","packageName","bundles","console","warn","latestBundle","sort","CLUSTER_CATALOG_GROUP_VERSION_KIND","group","kind","streamFBCObjectsToIndexedDB","catalog","reader","count","read","csvMetadata","schema","object","objectName","pkg","id","populateExtensionCatalogDatabase","time","log","allSettled","catalogName","metadata","toString","injestClusterCatalog","results","fbcObjectCount","reduce","acc","status","packages","r","populateExtensionCatalogs","extensionItemCount","timeEnd","aggregateArray","key","aggregateSerialJSONArray","JSON","parse","aggregateAnnotations","extensionMetadata","annotations","Object","entries","description","displayName","capabilities","validSubscription","legacyInfrastructureFeatures","infrastructureFeatures","i","aggregateLegacyInfrastructureFeatures","categories","newValues","split","trim","filter","length","aggregateCommaSeparatedList","Disconnected","FIPSCompliant","ProxyAware","CNF","CNI","CSI","TLSProfiles","TokenAuthAWS","TokenAuthAzure","TokenAuthGCP","aggregateMetadata","fbcMetadata","keys","longDescription","provider","nestedPath","aggregateNestedValue","keywords","getBundleMetadata","property","enqueueJSON","controller","jsonString","enqueue","parseJSONLines","TransformStream","this","buffer","chunk","lines","l","endsWith","pop","forEach","line","fetchAndProcessJSONLines","url","options","response","ok","statusText","body","pipeThrough","TextDecoderStream","getReader","addPackagesToExtensionCatalog","icon","channels","extensionCatalogItem","source","Custom","addPackageToExtensionCatalog","getChannelsForPackage","pkgName","channel","versions","aggregateChannels","isFileBasedCatalogBundle"],"mappings":"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","file":"operator-lifecycle-manager-v1/code-refs/useExtensionCatalogDatabaseContextValues-chunk-9ef208eea2c0940042eb.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { CLUSTER_CATALOG_GROUP_VERSION_KIND } from '../const';\nimport { openDatabase } from '../database/indexeddb';\nimport { populateExtensionCatalogDatabase } from '../database/injest';\nimport { ExtensionCatalogDatabaseContextValues } from './types';\n\nexport const useExtensionCatalogDatabaseContextValues: UseExtensionCatalogDatabaseContextValues = () => {\n  const [catalogs] = useK8sWatchResource<K8sResourceCommon[]>({\n    groupVersionKind: CLUSTER_CATALOG_GROUP_VERSION_KIND,\n    isList: true,\n  });\n  const [done, setDone] = React.useState(false);\n  const [error, setError] = React.useState<Error>();\n  const refresh = React.useRef(\n    _.debounce((newCatalogs: K8sResourceCommon[]) => {\n      setDone(false);\n      setError(null);\n      openDatabase('olm')\n        .then((database) => populateExtensionCatalogDatabase(database, newCatalogs))\n        .then(() => {\n          setDone(true);\n          setError(null);\n        })\n        .catch((e) => {\n          setDone(true);\n          setError(e);\n        });\n    }, 5000),\n  );\n\n  React.useEffect(() => {\n    const currentRefresh = refresh.current;\n    currentRefresh(catalogs);\n    return () => currentRefresh.cancel();\n  }, [catalogs]);\n  return { done, error };\n};\n\nexport default useExtensionCatalogDatabaseContextValues;\n\ntype UseExtensionCatalogDatabaseContextValues = () => ExtensionCatalogDatabaseContextValues;\n","export const deleteDatabase = (dbName): Promise<void> =>\n  new Promise((resolve, reject) => {\n    const request = indexedDB.deleteDatabase(dbName);\n    request.onsuccess = () => {\n      resolve();\n    };\n\n    request.onerror = () => {\n      reject(new Error(`Database error: ${request.error?.message}`));\n    };\n  });\n\nexport const openDatabase = (dbName: string, version?: number): Promise<IDBDatabase> =>\n  new Promise((resolve, reject) => {\n    const request = indexedDB.open(dbName, version);\n    request.onupgradeneeded = () => {\n      const db = request.result;\n\n      if (!db.objectStoreNames.contains('olm.package')) {\n        const packageStore = db.createObjectStore('olm.package', { keyPath: 'id' });\n        packageStore.createIndex('catalog', 'catalog', { unique: false });\n      }\n      if (!db.objectStoreNames.contains('olm.channel')) {\n        const channelStore = db.createObjectStore('olm.channel', { keyPath: 'id' });\n        channelStore.createIndex('package', 'package', { unique: false });\n        channelStore.createIndex('catalog', 'catalog', { unique: false });\n      }\n      if (!db.objectStoreNames.contains('olm.bundle')) {\n        const bundleStore = db.createObjectStore('olm.bundle', { keyPath: 'id' });\n        bundleStore.createIndex('package', 'package', { unique: false });\n        bundleStore.createIndex('catalog', 'catalog', { unique: false });\n      }\n      if (!db.objectStoreNames.contains('extension-catalog')) {\n        const extensionCatalogStore = db.createObjectStore('extension-catalog', {\n          keyPath: 'id',\n        });\n        extensionCatalogStore.createIndex('categories', 'categories', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('keywords', 'keywords', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('infrastructureFeatures', 'infrastructureFeatures', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('validSubscription', 'validSubscription', {\n          unique: false,\n          multiEntry: true,\n        });\n        extensionCatalogStore.createIndex('source', 'source', { unique: false });\n        extensionCatalogStore.createIndex('provider', 'provider', { unique: false });\n        extensionCatalogStore.createIndex('catalog', 'catalog', { unique: false });\n        extensionCatalogStore.createIndex('capabilities', 'capabilities', { unique: false });\n      }\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n\n    request.onerror = () => {\n      reject(new Error(`Database error: ${request.error?.message}`));\n    };\n  });\n\nexport const getObjectStore = (db: IDBDatabase, storeName: string, mode: IDBTransactionMode) => {\n  const transaction = db.transaction([storeName], mode);\n  return transaction.objectStore(storeName);\n};\n\nexport const addItem = <Item = any>(\n  db: IDBDatabase,\n  storeName: string,\n  item: Item,\n): Promise<IDBValidKey> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readwrite');\n    const request = store.add(item);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const putItem = <Item = any>(\n  db: IDBDatabase,\n  storeName: string,\n  item: Item,\n): Promise<IDBValidKey> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readwrite');\n    const request = store.put(item);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const getItem = <Item = any>(\n  db: IDBDatabase,\n  storeName: string,\n  key: string,\n): Promise<Item> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readonly');\n    const request = store.get(key);\n    request.onsuccess = () => resolve(request.result as Item);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const getItems = <Item = any>(db: IDBDatabase, storeName: string): Promise<Item[]> =>\n  new Promise((resolve, reject) => {\n    const store = getObjectStore(db, storeName, 'readonly');\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n\nexport const getIndexedItems = <Item = unknown>(\n  db: IDBDatabase,\n  storeName: string,\n  index: string,\n  value: string,\n): Promise<Item[]> =>\n  new Promise((resolve, reject) => {\n    // Start a transaction\n    const transaction = db.transaction(storeName, 'readonly');\n    const objectStore = transaction.objectStore(storeName);\n    const storeIndex = objectStore.index(index);\n    const keyRange = IDBKeyRange.only(value);\n    const cursorRequest = storeIndex.openCursor(keyRange);\n\n    const objects: Item[] = [];\n    cursorRequest.onsuccess = () => {\n      const cursor = cursorRequest.result;\n      if (cursor) {\n        objects.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve(objects);\n      }\n    };\n    cursorRequest.onerror = () => {\n      reject(cursorRequest.error);\n    };\n  });\n\nexport const clearObjectStore = (db: IDBDatabase, name: string): Promise<void> =>\n  new Promise((resolve, reject) => {\n    const objectStore = getObjectStore(db, name, 'readwrite');\n    const request = objectStore.clear();\n\n    request.onsuccess = () => resolve();\n    request.onerror = () => reject(request.error);\n  });\n\nexport const clearObjectStores = (db: IDBDatabase, ...names: string[]) =>\n  Promise.all(names.map((name) => clearObjectStore(db, name)));\n","import { InfrastructureFeature } from '@console/operator-lifecycle-manager/src/components/operator-hub';\n\nexport enum FileBasedCatalogSchema {\n  package = 'olm.package',\n  channel = 'olm.channel',\n  bundle = 'olm.bundle',\n  csvMetadata = 'olm.csv.metadata',\n}\n\nexport enum CSVMetadataKey {\n  annotations = 'annotations',\n  capabilities = 'capabilities',\n  description = 'description',\n  displayName = 'displayName',\n  provider = 'provider',\n  categories = 'categories',\n  keywords = 'keywords',\n  validSubscription = 'operators.openshift.io/valid-subscription',\n  legacyInfrastructureFeatures = 'operators.openshift.io/infrastructure-features',\n}\n\nexport enum NormalizedCSVMetadataKey {\n  validSubscription = 'validSubscription',\n  infrastructureFeatures = 'infrastructureFeatures',\n  longDescription = 'longDescription',\n}\n\nexport type CommaSeparatedList = string; // foo,bar,baz\nexport type SerializedJSONArray = string; // '[\"foo\",\"bar\",\"baz\"]'\nexport type ProviderMetadataValue = { name: string } | string;\n\nexport type FileBasedCatalogMetadata = {\n  annotations: {\n    [CSVMetadataKey.categories]?: CommaSeparatedList;\n    [CSVMetadataKey.capabilities]?: string;\n    [CSVMetadataKey.description]?: string;\n    [CSVMetadataKey.displayName]?: string;\n    [CSVMetadataKey.legacyInfrastructureFeatures]?: SerializedJSONArray;\n    [CSVMetadataKey.validSubscription]?: SerializedJSONArray;\n    [key: string]: any;\n  };\n  [CSVMetadataKey.description]?: string;\n  [CSVMetadataKey.displayName]?: string;\n  [CSVMetadataKey.keywords]?: string[];\n  [CSVMetadataKey.provider]?: ProviderMetadataValue;\n  [key: string]: any;\n};\n\nexport type FileBasedCatalogItem = {\n  catalog: string;\n  id: string;\n  name: string;\n  package: string;\n  schema: string;\n  [key: string]: any;\n};\n\nexport type FileBasedCatalogProperty<Value = any> = {\n  type: string;\n  value: Value;\n};\n\nexport type FileBasedCatalogBundle = FileBasedCatalogItem & {\n  properties: FileBasedCatalogProperty[];\n};\n\nexport type FileBasedCatalogChannelEntry = {\n  name: string;\n};\n\nexport type FileBasedCatalogChannel = FileBasedCatalogItem & {\n  entries: FileBasedCatalogChannelEntry[];\n};\n\nexport type FileBasedCatalogPackage = FileBasedCatalogItem & {\n  icon: {\n    base64data: string;\n    mediatype: string;\n  };\n};\n\nexport type ExtensionCatalogItemMetadata = {\n  capabilities?: string;\n  categories?: string[];\n  description?: string;\n  displayName?: string;\n  infrastructureFeatures?: InfrastructureFeature[];\n  keywords?: string[];\n  longDescription?: string;\n  provider?: string;\n  source?: string;\n  validSubscription?: string[];\n};\n\ntype SemverCoercableString = string;\n\nexport type ExtensionCatalogItemChannels = {\n  [key: SemverCoercableString]: SemverCoercableString[];\n};\n\nexport type ExtensionCatalogItem = {\n  catalog: string;\n  channels?: ExtensionCatalogItemChannels;\n  icon: {\n    mediatype: string;\n    base64data: string;\n  };\n  id: string;\n  name: string;\n} & ExtensionCatalogItemMetadata;\n","import * as SemVer from 'semver';\nimport { getIndexedItems } from './indexeddb';\nimport { getBundleMetadata } from './metadata';\nimport {\n  ExtensionCatalogItemMetadata,\n  FileBasedCatalogSchema,\n  FileBasedCatalogBundle,\n} from './types';\n\nexport const bundleHasProperty = (bundle: FileBasedCatalogBundle, propertyType: string) =>\n  (bundle.properties ?? []).some(({ type }) => type === propertyType);\n\nexport const getBundleProperty = (bundle: FileBasedCatalogBundle, propertyType: string) =>\n  (bundle.properties ?? []).find(({ type }) => type === propertyType)?.value;\n\nconst getBundleVersion = (bundle: FileBasedCatalogBundle) => {\n  const versionString = getBundleProperty(bundle, FileBasedCatalogSchema.package)?.version || '';\n  return SemVer.parse(versionString);\n};\n\nexport const compareBundleVersions = (\n  a: FileBasedCatalogBundle,\n  b: FileBasedCatalogBundle,\n): number => {\n  const aVersion = getBundleVersion(a);\n  const bVersion = getBundleVersion(b);\n  return SemVer.compare(aVersion, bVersion);\n};\n\nexport const getBundleMetadataForPackage = async (\n  db: IDBDatabase,\n  packageName: string,\n): Promise<ExtensionCatalogItemMetadata> => {\n  const bundles = await getIndexedItems<FileBasedCatalogBundle>(\n    db,\n    'olm.bundle',\n    'package',\n    packageName,\n  ).catch((e) => {\n    // eslint-disable-next-line no-console\n    console.warn(e);\n    return [];\n  });\n  const [latestBundle] = bundles?.sort?.(compareBundleVersions) ?? [];\n  return latestBundle ? getBundleMetadata(latestBundle) : {};\n};\n","export const CLUSTER_CATALOG_GROUP = 'catalogd.operatorframework.io';\nexport const CLUSTER_CATALOG_VERSION = 'v1alpha1';\nexport const CLUSTER_CATALOG_KIND = 'ClusterCatalog';\nexport const CLUSTER_CATALOG_GROUP_VERSION_KIND = {\n  group: CLUSTER_CATALOG_GROUP,\n  version: CLUSTER_CATALOG_VERSION,\n  kind: CLUSTER_CATALOG_KIND,\n};\n","/* eslint-disable no-console */\nimport { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { bundleHasProperty } from './bundles';\nimport { putItem, getItems, clearObjectStores } from './indexeddb';\nimport { fetchAndProcessJSONLines } from './jsonl';\nimport { addPackagesToExtensionCatalog } from './packages';\nimport { isFileBasedCatalogBundle } from './type-guards';\nimport { FileBasedCatalogItem, FileBasedCatalogSchema } from './types';\n\nconst populateExtensionCatalogs = async (db: IDBDatabase): Promise<number> => {\n  const packages = await getItems(db, 'olm.package');\n  return addPackagesToExtensionCatalog(db, packages).then((results) =>\n    results.reduce((acc, r) => (r.status === 'fulfilled' && r.value ? acc + 1 : acc), 0),\n  );\n};\n\nconst streamFBCObjectsToIndexedDB = (\n  db: IDBDatabase,\n  catalog: string,\n  reader: ReadableStreamDefaultReader<FileBasedCatalogItem>,\n  count?: number,\n): Promise<number> =>\n  reader.read().then(async ({ done, value }) => {\n    if (done) {\n      return count;\n    }\n    if (\n      isFileBasedCatalogBundle(value) &&\n      !bundleHasProperty(value, FileBasedCatalogSchema.csvMetadata)\n    ) {\n      return streamFBCObjectsToIndexedDB(db, catalog, reader, count ?? 0);\n    }\n    const { schema, ...object } = value;\n    const packageName = object.package ?? object.name;\n    const objectName = schema === 'olm.package' ? '' : `~${object.name}`;\n    const pkg = `${catalog}~${packageName}`; // Fully qualified package includes catalog\n    const id = `${pkg}${objectName}`; // catalog~package or catalog~package~object\n    await putItem(db, schema, { ...object, id, catalog, package: pkg });\n    return streamFBCObjectsToIndexedDB(db, catalog, reader, (count ?? 0) + 1);\n  });\n\nconst injestClusterCatalog = async (\n  db: IDBDatabase,\n  catalog: K8sResourceCommon,\n): Promise<number> => {\n  const catalogName = catalog.metadata.name;\n  console.log('[Extension Catalog Database] Injesting FBC from ClusterCatalog', catalogName);\n  return fetchAndProcessJSONLines<FileBasedCatalogItem>(\n    `/api/catalogd/catalogs/${catalogName}/all.json`,\n    { 'Content-Type': 'application/jsonl' },\n  )\n    .then((reader) => streamFBCObjectsToIndexedDB(db, catalogName, reader))\n    .then((count) => {\n      console.log(\n        '[Extension Catalog Database] Successfully injested',\n        count,\n        'objects from ClusterCatalog',\n        catalogName,\n      );\n      return count;\n    })\n    .catch((e) => {\n      console.warn(\n        '[Extension Catalog Database} Failed to injest FBC from ClusterCatalog',\n        catalogName,\n        e.toString(),\n      );\n      return 0;\n    });\n};\n\nexport const populateExtensionCatalogDatabase = async (\n  db: IDBDatabase,\n  catalogs: K8sResourceCommon[],\n): Promise<void> => {\n  console.time('[Extension Catalog Database] took');\n  console.log('[Extension Catalog Database] Refreshing extension catalog database');\n  return clearObjectStores(db, 'olm.package', 'olm.channel', 'olm.bundle', 'extension-catalog')\n    .then(() => {\n      console.log('[Extension Catalog Database] Object stores cleared');\n      return Promise.allSettled(catalogs.map((catalog) => injestClusterCatalog(db, catalog)));\n    })\n    .then((results) => {\n      const fbcObjectCount = results.reduce(\n        (acc, result) => (result.status === 'fulfilled' ? acc + result.value : acc),\n        0,\n      );\n      console.log(\n        '[Extension Catalog Database]',\n        fbcObjectCount,\n        'items populated to FBC object stores',\n      );\n      return populateExtensionCatalogs(db);\n    })\n    .then((extensionItemCount) => {\n      console.log(\n        '[Extension Catalog Database] Database initialization complete.',\n        extensionItemCount,\n        'items populated to extension catlog object store',\n      );\n      console.timeEnd('[Extension Catalog Database] took');\n    })\n    .catch((e) => {\n      console.warn('[Extension Catalog Database] Error encountered', e.toString());\n      console.timeEnd('[Extension Catalog Database] took');\n      throw new Error(e);\n    });\n};\n","import * as _ from 'lodash';\nimport { OLMAnnotation } from '@console/operator-lifecycle-manager/src/components/operator-hub';\nimport { normalizeInfrastructureFeature } from '@console/operator-lifecycle-manager/src/components/operator-hub/operator-hub-utils';\nimport {\n  CommaSeparatedList,\n  ExtensionCatalogItemMetadata,\n  FileBasedCatalogBundle,\n  FileBasedCatalogMetadata,\n  CSVMetadataKey,\n  SerializedJSONArray,\n  NormalizedCSVMetadataKey,\n} from './types';\n\nconst aggregateNestedValue = (\n  acc: ExtensionCatalogItemMetadata,\n  key: string,\n  value: any,\n  nestedPath,\n): ExtensionCatalogItemMetadata => ({ ...acc, [key]: _.get(value, nestedPath, value) });\n\nconst aggregateArray = (\n  acc: ExtensionCatalogItemMetadata,\n  key: string,\n  value: string[],\n): ExtensionCatalogItemMetadata => ({\n  ...acc,\n  [key]: [...(acc[key] ?? []), ...(value ?? [])],\n});\n\nconst aggregateSerialJSONArray = (\n  acc: ExtensionCatalogItemMetadata,\n  key: string,\n  value: SerializedJSONArray,\n): ExtensionCatalogItemMetadata => {\n  if (!value) return acc;\n  try {\n    return aggregateArray(acc, key, JSON.parse(value));\n  } catch (e) {\n    throw new Error(\n      `Malformed FBC metadata property: \"${key}\". Expected serialized JSON array, got \"${value}\".`,\n    );\n  }\n};\n\nconst aggregateCommaSeparatedList = (\n  acc: ExtensionCatalogItemMetadata,\n  key: string,\n  value: CommaSeparatedList,\n): ExtensionCatalogItemMetadata => {\n  if (!value) return acc;\n  try {\n    const newValues = value\n      .split(',')\n      .map((e) => e.trim())\n      .filter((e) => e);\n    if (!newValues.length) {\n      throw new Error();\n    }\n    return aggregateArray(acc, key, newValues);\n  } catch (e) {\n    throw new Error(\n      `Malformed FBC metadata property: \"${key}\". Expected comma-separated list, got \"${value}\".`,\n    );\n  }\n};\n\nconst aggregateLegacyInfrastructureFeatures = (acc, key, value) => {\n  const { infrastructureFeatures } = aggregateSerialJSONArray(acc, key, value);\n  if (!infrastructureFeatures) return acc;\n  return {\n    ...acc,\n    infrastructureFeatures: infrastructureFeatures.map((i) => normalizeInfrastructureFeature[i]),\n  };\n};\n\nconst aggregateAnnotations = (\n  extensionMetadata: ExtensionCatalogItemMetadata,\n  annotations: FileBasedCatalogMetadata['annotations'],\n): ExtensionCatalogItemMetadata => {\n  return Object.entries(annotations).reduce((acc, [key, value]) => {\n    if (!value) return acc;\n    switch (key) {\n      case CSVMetadataKey.description:\n      case CSVMetadataKey.displayName:\n      case CSVMetadataKey.capabilities:\n        return {\n          [key]: value,\n          ...acc,\n        };\n      case CSVMetadataKey.validSubscription:\n        return aggregateSerialJSONArray(acc, NormalizedCSVMetadataKey.validSubscription, value);\n      case CSVMetadataKey.legacyInfrastructureFeatures:\n        return aggregateLegacyInfrastructureFeatures(\n          acc,\n          NormalizedCSVMetadataKey.infrastructureFeatures,\n          value,\n        );\n      case CSVMetadataKey.categories:\n        return aggregateCommaSeparatedList(acc, key, value);\n      case OLMAnnotation.Disconnected:\n      case OLMAnnotation.FIPSCompliant:\n      case OLMAnnotation.ProxyAware:\n      case OLMAnnotation.CNF:\n      case OLMAnnotation.CNI:\n      case OLMAnnotation.CSI:\n      case OLMAnnotation.TLSProfiles:\n      case OLMAnnotation.TokenAuthAWS:\n      case OLMAnnotation.TokenAuthAzure:\n      case OLMAnnotation.TokenAuthGCP:\n        return value === 'true'\n          ? aggregateArray(acc, NormalizedCSVMetadataKey.infrastructureFeatures, [\n              normalizeInfrastructureFeature[key],\n            ])\n          : acc;\n      default:\n        return acc;\n    }\n  }, extensionMetadata);\n};\n\nconst aggregateMetadata = (\n  fbcMetadata: FileBasedCatalogMetadata,\n  extensionMetadata?: ExtensionCatalogItemMetadata,\n): ExtensionCatalogItemMetadata => {\n  if (!fbcMetadata) return extensionMetadata;\n  return Object.keys(fbcMetadata)\n    .sort() // ensure annotations are handled first\n    .reduce((acc, key) => {\n      const value = fbcMetadata[key];\n      if (!value) return acc;\n      switch (key) {\n        case CSVMetadataKey.annotations:\n          return {\n            ...acc,\n            ...aggregateAnnotations(acc, value),\n          };\n        case CSVMetadataKey.description:\n          return {\n            ...acc,\n            [NormalizedCSVMetadataKey.longDescription]: value,\n          };\n        case CSVMetadataKey.displayName:\n          return { ...acc, [key]: value };\n        case CSVMetadataKey.provider:\n          return aggregateNestedValue(acc, key, value, 'name');\n        case CSVMetadataKey.keywords:\n          return aggregateArray(acc, key, value);\n        default:\n          return acc;\n      }\n    }, extensionMetadata ?? {});\n};\n\nexport const getBundleMetadata = (bundle: FileBasedCatalogBundle): ExtensionCatalogItemMetadata => {\n  return bundle.properties.reduce((acc, property) => {\n    switch (property.type) {\n      case 'olm.csv.metadata':\n        return aggregateMetadata(property.value, acc);\n      default:\n        return acc;\n    }\n  }, {});\n};\n","/* eslint-disable no-console */\nimport { consoleFetch } from '@console/dynamic-plugin-sdk/src/lib-core';\n\nconst enqueueJSON = (controller: TransformStreamDefaultController, jsonString: string) => {\n  try {\n    controller.enqueue(JSON.parse(jsonString));\n  } catch (e) {\n    console.warn(`Error parsing JSON line: ${e}\\n${jsonString}`);\n  }\n};\n\nexport const parseJSONLines = <ObjectType>() =>\n  new TransformStream<string, ObjectType>({\n    start() {\n      this.buffer = '';\n    },\n    transform(chunk, controller) {\n      this.buffer += chunk;\n      const lines = this.buffer.split('\\n').map((l) => l?.trim());\n      this.buffer = this.buffer.endsWith('\\n') ? '' : lines.pop().trim();\n      lines.forEach((line) => {\n        if (line) {\n          enqueueJSON(controller, line);\n        }\n      });\n    },\n    flush(controller) {\n      if (this.buffer) {\n        enqueueJSON(controller, this.buffer);\n      }\n    },\n  });\n\n// ObjectType is the expected shape of each JSON object (defaults to any).\n// HandlerResult is the expected value the handler will resolve when called with ObjectType as an argument\nexport const fetchAndProcessJSONLines = <ObjectType = any>(\n  url: string,\n  options,\n): Promise<ReadableStreamDefaultReader<ObjectType>> =>\n  consoleFetch(url, options).then((response) => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch ${url}: ${response.statusText}`);\n    }\n    return response.body\n      .pipeThrough(new TextDecoderStream())\n      .pipeThrough<ObjectType>(parseJSONLines<ObjectType>())\n      .getReader();\n  });\n","/* eslint-disable no-console */\nimport { defaultPackageSourceMap } from '@console/operator-lifecycle-manager/src/components/operator-hub/operator-hub-utils';\nimport { PackageSource } from '@console/operator-lifecycle-manager/src/const';\nimport { getBundleMetadataForPackage } from './bundles';\nimport { getChannelsForPackage } from './channels';\nimport { putItem } from './indexeddb';\nimport { ExtensionCatalogItem, FileBasedCatalogPackage } from './types';\n\nconst addPackageToExtensionCatalog = async (\n  db: IDBDatabase,\n  { id, icon, name, catalog }: FileBasedCatalogPackage,\n): Promise<ExtensionCatalogItem> => {\n  const channels = await getChannelsForPackage(db, id);\n  const metadata = await getBundleMetadataForPackage(db, id);\n  const extensionCatalogItem: ExtensionCatalogItem = {\n    catalog,\n    id,\n    icon,\n    name,\n    source: defaultPackageSourceMap[catalog] || PackageSource.Custom,\n    channels: {\n      ...channels,\n    },\n    ...metadata,\n  };\n  // eslint-disable-next-line no-console\n  await putItem(db, 'extension-catalog', extensionCatalogItem);\n  return extensionCatalogItem;\n};\n\nexport const addPackagesToExtensionCatalog = (\n  db: IDBDatabase,\n  packages: FileBasedCatalogPackage[],\n): Promise<PromiseSettledResult<ExtensionCatalogItem>[]> =>\n  Promise.allSettled(\n    packages.map((pkg) =>\n      addPackageToExtensionCatalog(db, pkg).catch((e) => {\n        console.warn(\n          '[Extension Catalog Database] Error encountered while creating extension catalog item for',\n          pkg.name,\n          e.toString(),\n        );\n        return null;\n      }),\n    ),\n  );\n","import { getIndexedItems } from './indexeddb';\nimport { ExtensionCatalogItem, FileBasedCatalogChannel } from './types';\n\nexport const aggregateChannels = (\n  channels: FileBasedCatalogChannel[],\n): ExtensionCatalogItem['channels'] =>\n  channels.reduce((acc, channel) => {\n    const versions = channel.entries.map(({ name }) => name);\n    return {\n      ...acc,\n      [channel.name]: versions,\n    };\n  }, {});\n\nexport const getChannelsForPackage = async (\n  db: IDBDatabase,\n  pkgName: string,\n): Promise<ExtensionCatalogItem['channels']> => {\n  const channels = await getIndexedItems<FileBasedCatalogChannel>(\n    db,\n    'olm.channel',\n    'package',\n    pkgName,\n  ).catch((e) => {\n    // eslint-disable-next-line no-console\n    console.warn(e);\n    return [];\n  });\n  return aggregateChannels(channels ?? []);\n};\n","import {\n  FileBasedCatalogSchema,\n  FileBasedCatalogBundle,\n  FileBasedCatalogItem,\n  FileBasedCatalogChannel,\n  FileBasedCatalogPackage,\n} from './types';\n\nexport const isFileBasedCatalogBundle = (\n  object: FileBasedCatalogItem,\n): object is FileBasedCatalogBundle => object.schema === FileBasedCatalogSchema.bundle;\n\nexport const isFileBasedCatalogChannel = (\n  object: FileBasedCatalogItem,\n): object is FileBasedCatalogChannel => object.schema === FileBasedCatalogSchema.channel;\n\nexport const isFileBasedCatalogPackage = (\n  object: FileBasedCatalogItem,\n): object is FileBasedCatalogPackage => object.schema === FileBasedCatalogSchema.package;\n"],"sourceRoot":""}