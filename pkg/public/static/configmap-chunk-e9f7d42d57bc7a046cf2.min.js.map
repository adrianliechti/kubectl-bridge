{"version":3,"sources":["webpack:///./public/components/configmap.jsx"],"names":["menuActions","getExtensionsActionsForKind","factory","common","tableColumnClasses","columnClass","ConfigMapTableRow","obj","configMap","className","kind","name","metadata","namespace","columnID","data","binaryData","timestamp","creationTimestamp","actions","resource","ConfigMaps","props","t","Header","title","sortField","transforms","id","sortFunc","Row","virtualize","ConfigMapsPage","createProps","to","ListComponent","canCreate","ConfigMapsDetailsPage","pages","details","text","label","editYaml"],"mappings":"6FAAA,mOAkBA,MAAMA,EAAc,IAAI,IAAMC,4BAA4B,qBAAoB,IAAMC,QAAQC,QAItFC,EAAqB,CAAC,GAAI,GAAI,YAAa,YAAa,IAAMC,aAE9DC,EAAoB,EAAGC,IAAKC,KAE9B,gCACE,gBAAC,IAAS,CAACC,UAAWL,EAAmB,IACvC,gBAAC,KAAY,CACXM,KAAK,YACLC,KAAMH,EAAUI,SAASD,KACzBE,UAAWL,EAAUI,SAASC,aAGlC,gBAAC,IAAS,CACRJ,UAAW,EAAWL,EAAmB,GAAI,iBAC7CU,SAAS,aAET,gBAAC,KAAY,CAACJ,KAAK,YAAYC,KAAMH,EAAUI,SAASC,aAE1D,gBAAC,IAAS,CAACJ,UAAWL,EAAmB,IACtC,IAAOI,EAAUO,MAAQ,IAAOP,EAAUQ,aAE7C,gBAAC,IAAS,CAACP,UAAWL,EAAmB,IACvC,gBAAC,KAAS,CAACa,UAAWT,EAAUI,SAASM,qBAE3C,gBAAC,IAAS,CAACT,UAAWL,EAAmB,IACvC,gBAAC,KAAa,CAACe,QAASnB,EAAaU,KA3BhC,YA2B4CU,SAAUZ,MAM7Da,EAAcC,IAClB,MAAM,EAAEC,GAAM,2BAiCd,OACE,gBAAC,IAAK,iBACAD,EAAK,cACGC,EAAE,qBACdC,OApCyB,IAAM,CACjC,CACEC,MAAOF,EAAE,eACTG,UAAW,gBACXC,WAAY,CAAC,KACbL,MAAO,CAAEb,UAAWL,EAAmB,KAEzC,CACEqB,MAAOF,EAAE,oBACTG,UAAW,qBACXC,WAAY,CAAC,KACbL,MAAO,CAAEb,UAAWL,EAAmB,IACvCwB,GAAI,aAEN,CACEH,MAAOF,EAAE,eACTM,SAAU,WACVF,WAAY,CAAC,KACbL,MAAO,CAAEb,UAAWL,EAAmB,KAEzC,CACEqB,MAAOF,EAAE,kBACTG,UAAW,6BACXC,WAAY,CAAC,KACbL,MAAO,CAAEb,UAAWL,EAAmB,KAEzC,CACEqB,MAAO,GACPH,MAAO,CAAEb,UAAWL,EAAmB,MASvC0B,IAAKxB,EACLyB,YAAU,MAKVC,EAAkBV,IACtB,MAAMW,EAAc,CAClBC,GAAI,WAAWZ,EAAMT,WAAa,kCAEpC,OACE,gBAAC,IAAQ,eAACsB,cAAed,EAAYe,WAAW,EAAMH,YAAaA,GAAiBX,KAIlFe,EAAyBf,IAC7B,MAAM,EAAEC,GAAM,2BAwBd,OACE,gBAAC,IAAW,iBACND,EAAK,CACTtB,YAAaA,EACbsC,MAAO,CAAC,KAAWC,QA3BE,EAAGhC,IAAKC,KAE7B,gCACE,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAAC+B,KAAMjB,EAAE,8BACxB,uBAAKd,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,KAAe,CAACW,SAAUZ,OAIjC,uBAAKC,UAAU,mBACb,gBAAC,KAAc,CAAC+B,KAAMjB,EAAE,iBACxB,gBAAC,IAAa,CAACR,KAAMP,EAAUO,KAAM0B,MAAOlB,EAAE,kBAEhD,uBAAKd,UAAU,mBACb,gBAAC,KAAc,CAAC+B,KAAMjB,EAAE,wBACxB,gBAAC,IAAmB,CAACR,KAAMP,EAAUQ,gBAUK,KAAW0B","file":"configmap-chunk-e9f7d42d57bc7a046cf2.min.js","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport { ConfigMapData, ConfigMapBinaryData } from './configmap-and-secret-data';\nimport {\n  Kebab,\n  SectionHeading,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  Timestamp,\n} from './utils';\nimport { ConfigMapModel } from '../models';\n\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ConfigMapModel), ...Kebab.factory.common];\n\nconst kind = 'ConfigMap';\n\nconst tableColumnClasses = ['', '', 'hidden-xs', 'hidden-xs', Kebab.columnClass];\n\nconst ConfigMapTableRow = ({ obj: configMap }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind=\"ConfigMap\"\n          name={configMap.metadata.name}\n          namespace={configMap.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={configMap.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {_.size(configMap.data) + _.size(configMap.binaryData)}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={configMap.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={configMap} />\n      </TableData>\n    </>\n  );\n};\n\nconst ConfigMaps = (props) => {\n  const { t } = useTranslation();\n  const ConfigMapTableHeader = () => [\n    {\n      title: t('public~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('public~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      id: 'namespace',\n    },\n    {\n      title: t('public~Size'),\n      sortFunc: 'dataSize',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('public~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~ConfigMaps')}\n      Header={ConfigMapTableHeader}\n      Row={ConfigMapTableRow}\n      virtualize\n    />\n  );\n};\n\nconst ConfigMapsPage = (props) => {\n  const createProps = {\n    to: `/k8s/ns/${props.namespace || 'default'}/configmaps/~new/form`,\n  };\n  return (\n    <ListPage ListComponent={ConfigMaps} canCreate={true} createProps={createProps} {...props} />\n  );\n};\n\nconst ConfigMapsDetailsPage = (props) => {\n  const { t } = useTranslation();\n  const ConfigMapDetails = ({ obj: configMap }) => {\n    return (\n      <>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~ConfigMap details')} />\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <ResourceSummary resource={configMap} />\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~Data')} />\n          <ConfigMapData data={configMap.data} label={t('public~Data')} />\n        </div>\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('public~Binary data')} />\n          <ConfigMapBinaryData data={configMap.binaryData} />\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <DetailsPage\n      {...props}\n      menuActions={menuActions}\n      pages={[navFactory.details(ConfigMapDetails), navFactory.editYaml()]}\n    />\n  );\n};\n\nexport { ConfigMaps, ConfigMapsPage, ConfigMapsDetailsPage };\n"],"sourceRoot":""}