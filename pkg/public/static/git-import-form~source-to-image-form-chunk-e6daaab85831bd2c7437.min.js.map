{"version":3,"sources":["webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/const.ts","webpack:///./packages/topology/src/components/svg/SvgDropShadowFilter.tsx","webpack:///./packages/topology/src/components/svg/SvgCircledIcon.tsx","webpack:///./packages/dev-console/src/components/import/GiteaIcon.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/utils.ts","webpack:///./packages/topology/src/components/svg/SvgResourceIcon.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationTask.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/draw-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/ErrorNodeDecorator.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/factories.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/detail-page-tabs/pipeline-details/StatusIcon.tsx","webpack:///./packages/topology/src/components/svg/index.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/detail-page-tabs/pipeline-details/pipeline-step-utils.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationStepList.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/LoadingTask.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/PlusNodeDecorator.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/TaskList.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/TaskNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/TaskListNode.tsx","webpack:///./packages/pipelines-plugin/src/components/repository/sections/WebhookSection.tsx","webpack:///./packages/dev-console/src/components/import/git/GitSection.tsx","webpack:///./packages/dev-console/src/components/import/git/AdvancedGitOptions.tsx","webpack:///./packages/dev-console/src/components/import/git/SourceSecretSelector.tsx","webpack:///./packages/dev-console/src/components/dropdown/SourceSecretDropdown.tsx","webpack:///./packages/dev-console/src/components/import/git/GitTypeSelector.tsx","webpack:///./packages/dev-console/src/components/import/git/SampleRepo.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualization.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/PipelineTopologyGraph.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/BuilderFinallyNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/WhenExpressionDecorator.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/dag.ts","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/InstallingNodeDecorator.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/RemoveNodeDecorator.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/BuilderNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/CustomTaskNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/FinallyNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/InvalidTaskListNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/LoadingNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/PipelineTaskNode.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/TaskEdge.tsx","webpack:///./packages/pipelines-plugin/src/components/pipelines/pipeline-topology/PipelineVisualizationSurface.tsx","webpack:///./packages/pipelines-plugin/src/components/repository/sections/ConfigTypeSection.tsx","webpack:///./packages/pipelines-plugin/src/components/repository/sections/GithubSection.tsx","webpack:///./packages/pipelines-plugin/src/components/repository/sections/PermissionsSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/pipeline/PipelineSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/pipeline/PipelineTemplate.tsx","webpack:///./packages/pipelines-plugin/src/components/import/pipeline/PacSection.tsx","webpack:///./packages/pipelines-plugin/src/components/import/pipeline/PacInfoPanel.tsx","webpack:///./packages/dev-console/src/components/import/builder/BuilderSection.tsx","webpack:///./packages/dev-console/src/components/import/section/build-section/BuildSection.tsx","webpack:///./packages/dev-console/src/components/import/builder/BuilderImageSelector.tsx","webpack:///./packages/dev-console/src/components/import/advanced/BuildConfigSection.tsx","webpack:///./packages/dev-console/src/components/import/section/build-section/BuildOptions.tsx","webpack:///./packages/dev-console/src/components/import/section/build-section/BuildStrategySelector.tsx"],"names":["NODE_SEPARATION_HORIZONTAL","DROP_SHADOW_SPACING","BUILDER_NODE_ADD_RADIUS","BUILDER_NODE_DECORATOR_RADIUS","BUILDER_NODE_ADD_PADDING","NODE_WIDTH","NODE_HEIGHT","FINALLY_NODE_PADDING","FINALLY_NODE_VERTICAL_SPACING","FINALLY_ADD_LINK_TEXT_HEIGHT","FINALLY_ADD_LINK_SIZE","WHEN_EXPRESSSION_DIAMOND_SIZE","WHEN_EXPRESSION_SPACING","DEFAULT_NODE_HEIGHT","NODE_PADDING","DEFAULT_NODE_ICON_WIDTH","DEFAULT_BADGE_WIDTH","DEFAULT_FINALLLY_GROUP_PADDING","TOOLBAR_HEIGHT","GRAPH_MIN_WIDTH","GRAPH_MAX_HEIGHT_PERCENT","NodeType","DrawDesign","PipelineLayout","AddNodeDirection","DAGRE_SHARED_PROPS","nodesep","ranksep","edgesep","ranker","rankdir","marginx","marginy","DAGRE_VIEWER_PROPS","DAGRE_VIEWER_SPACED_PROPS","DAGRE_BUILDER_PROPS","DAGRE_BUILDER_SPACED_PROPS","CustomTask","id","dx","dy","stdDeviation","floodColor","value","floodOpacity","window","navigator","userAgent","includes","x","y","width","height","in","result","in2","operator","FILTER_ID","className","iconClass","icon","padding","circleRef","typedIconSize","typedIconRef","iconWidth","iconHeight","key","ref","filter","cx","cy","r","xlinkHref","style","topology","xmlns","viewBox","fill","role","d","createGenericNode","type","name","data","label","runAfterTasks","createTaskNode","TASK_NODE","createCustomTaskNode","CUSTOM_TASK_NODE","createSpacerNode","SPACER_NODE","createTaskListNode","TASK_LIST_NODE","createInvalidTaskListNode","INVALID_TASK_LIST_NODE","createBuilderNode","BUILDER_NODE","createLoadingNode","LOADING_NODE","createBuilderFinallyNode","BUILDER_FINALLY_NODE","createPipelineTaskNode","handleParallelToParallelNodes","nodes","multipleRunBeforeMap","reduce","acc","node","idx","task","runAfter","length","sort","a","b","localeCompare","str","Array","isArray","push","atIndex","multiParallelToParallelList","Object","values","newNodes","newRunAfterNodeMap","forEach","p2p","names","map","p2pData","parallelSpacerName","join","p2pNodeId","newRunAfters","createNode","getNodeCreator","tasksToBuilderNodes","taskList","onAddNode","onNodeSelection","getError","selectedIds","error","selected","direction","getBuilderEdgesFromNodes","target","source","edgeList","getFinallyTaskHeight","allTasksLength","disableBuilder","getFinallyTaskWidth","whenExpressionSpacing","getLastRegularTasks","regularTasks","runAfters","concat","n","getTextWidth","text","font","context","document","createElement","getContext","measureText","extractDepsFromContextVariables","contextVariable","regex","matches","deps","exec","index","lastIndex","getSpacerNode","getTaskWhenStatus","when","status","Succeeded","Failed","Met","Skipped","Idle","Unmet","getWhenStatus","reason","getGraphDataModel","pipeline","pipelineRun","apiVersion","metadata","kind","spec","taskRuns","dag","addEdges","maxWidthForLevel","topologicalSort","v","level","Math","max","vertex","depsFromContextVariables","params","p","paramValue","input","whenValue","dependancies","dependancyNames","dep","depObj","vertices","get","minLevelDep","v1","nd","badgePadding","keys","isTaskSkipped","skippedTasks","some","t","taskKind","taskRef","whenStatus","finallyTaskList","maxFinallyNodeName","finallyNodes","fTask","FINALLY_NODE","finallyGroup","FINALLY_GROUP","children","group","spacerNodes","edges","EDGE","graph","layout","DAGRE_VIEWER","scaleExtent","taskHasWhenExpression","nodesHasWhenExpression","getLayoutData","DAGRE_BUILDER","DAGRE_VIEWER_SPACED","DAGRE_BUILDER_SPACED","getWhenExpressionDiamondState","isPipelineRun","isFinallyTask","diamondColor","tooltipContent","pftoken","getTooltipContent","statusReason","SvgResourceIcon","leftJustified","iconRef","kindAbbr","kindStr","kindColor","kindObj","undefined","abbr","getKindStringAndAbbreviation","textSize","textRef","rect","paddingX","paddingY","rx","ry","toLowerCase","textAnchor","PipelineVisualizationTask","pipelineRunName","namespace","pipelineRunStatus","disableTooltip","isSkipped","IS_PIPELINE_OPERATOR_VERSION_1_17_OR_NEWER","taskStatus","duration","Cancelled","Pending","taskComponent","TaskComponent","taskSpec","disableVisualizationTooltip","pipelineTask","resources","prop","stepStatusList","steps","step","showStatusState","visualName","nameRef","pillRef","path","enableLogLink","hasWhenExpression","hasRunAfter","taskStatusColor","hover","hoverRef","truncatedVisualName","truncateEnd","renderVisualName","taskPill","triggerRef","content","color","Running","disableSpin","SvgTaskStatus","position","enableFlip","isSpecOverview","taskName","taskNode","appendLine","enableTooltip","leftOffset","to","stepWidth","segments","seg","leftRight","p1","p2","topDown","bottomUp","point","moveTo","lineTo","quadTo","corner","end","CURVE_SIZE","curve","fromPoint","cornerPoint","toPoint","rightAndDown","downAndRight","clone","translate","rightAndUp","upAndRight","straightPath","start","finish","integralShapePath","firstCurve","secondCurve","cornerX","floor","firstCorner","secondCorner","errorStr","transform","builderComponentsFactory","edge","dagreViewerComponentFactory","layoutFactory","linkDistance","nodeDistance","groupDistance","collideDistance","simulationSpeed","chargeStrength","allowDrag","layoutOnDrag","StatusIcon","props","ColoredStatusIcon","others","TerminatedReasons","getMatchingStep","find","statusStep","getMatchingStepDuration","matchingStep","terminated","startedAt","finishedAt","running","createStepStatus","stepRunStatus","PipelineNotStarted","Completed","waiting","TooltipColoredStatusIcon","sharedProps","size","PipelineVisualizationStepList","hideHeader","truncatedName","onClick","tooltip","tooltipPosition","unselectedText","onRemoveTask","onNewTask","onTaskSearch","unselectedTaskText","truncatedTaskText","renderText","e","stopPropagation","removeCallback","element","getBounds","getData","pac","formContextField","setFieldValue","fieldPrefix","gitProvider","webhook","controllerUrl","setControllerUrl","webhookSecret","setWebhookSecret","ctlUrl","isList","fullWidth","extraMargin","BITBUCKET","required","labelIcon","options","activeChildren","helpText","GITHUB","ns","href","rel","GITLAB","dataSelector","placeholder","autocompleteFilter","item","showBadge","onChange","k","res","secret","decode","url","fieldId","isReadOnly","hoverTip","clickTip","flex","display","_event","variant","UNSURE","toggleText","git","getPermssionSectionHeading","component","small","title","builderImages","defaultSample","showSample","formType","importType","imageStreamName","autoFocus","inputRef","dirty","isSubmitting","formikValues","touched","formikTouched","errors","formikErrors","formikSetFieldValue","setFieldTouched","formikSetFieldTouched","isKnativeServingAvailable","canCreateKnativeService","canCreateKnativeServiceLoading","apiGroup","resource","plural","verb","shouldValidate","formReloadCount","defaultSampleURL","dir","defaultSampleDir","defaultSampleRef","defaultSampleTagObj","annotations","sampleRepo","sampleContextDir","sampleRef","imageStreamTag","image","tagObj","imageStreamTagSampleRepo","nameTouched","application","applicationNameTouched","imageSelectorTouched","gitDirTouched","gitTypeTouched","gitUrlError","validated","setValidated","default","repoStatus","setRepoStatus","handleBuilderImageRecommendation","detectedBuildTypes","recommendedBuildType","recommended","hasOwnProperty","handleDevfileStrategyDetection","devfilePath","gitType","devfile","devfileSourceUrl","gitService","secretResource","devfileContents","getDevfileContent","handleGitUrlChange","submitError","detectedGitType","isUnsureDetectedGitType","gitRepoName","detectedType","showGitType","docker","dockerfilePath","importStrategyData","loaded","loadError","repositoryStatus","strategies","importStrategies","Reachable","warning","selectedStrategy","S2I","priority","detectedFiles","recommendedStrategy","showEditImportStrategy","Source","selectedKey","success","Devfile","devfileContent","build","strategy","s","detectedCustomData","DEVFILE","DOCKERFILE","Docker","SERVERLESS_FUNCTION","ServerlessFunction","debouncedHandleGitUrlChange","fillImageStreamTagSample","isUrlValidating","RateLimitExceeded","GitTypeNotDetected","PrivateRepo","ResourceNotFound","InvalidGitTypeSelected","GiteaRepoUnreachable","resetFields","couldNotRecommend","isInContext","current","focus","sampleName","repository","sampleRepository","revision","contextDir","then","sample","gitImport","service","targetPort","toString","console","catch","helpTextInvalid","onBlur","trimmedURL","trim","isDisabled","isInline","handleGitRefChange","handleGitDirChange","textExpanded","textCollapsed","dataTest","optional","handleSave","dropDownClassName","menuClassName","actionItems","actionTitle","actionKey","save","secretType","resourceFilter","handleGitTypeChange","typeValue","isRequired","spaceItems","isSelected","GITEA","link","model","componentFactory","showControlBar","builder","noScrollbar","addNewFinallyListNode","finallyTasks","finallyListTasks","finallyLoadingTasks","finallyInvalidListTasks","nodeCenter","leftPadding","verticalHeight","finallyTaskLinkX","IntegralShape","taskIndex","ft","i","onTaskSelection","fld","ivl","convertList","flt","cursor","nodeRef","diamondHeight","round","sin","cos","diamondNode","stroke","x1","y1","x2","y2","DAG","this","Map","fn","visited","dependancy","len","has","set","visit","pop","addVertex","hasOutgoing","fromNode","toNode","Error","reverse","before","after","addEdge","orderedNodes","stage","log","trashRef","showAdd","AFTER","BEFORE","bottom","PARALLEL","CustomTaskComponent","customTask","customTaskName","watchedResources","customRun","groupVersionKind","resourcesData","strokeWidth","onContextMenu","contextMenuOpen","rest","detailsLevel","getType","computedTask","stepList","skippedTask","succeededStepsCount","badge","passedData","newData","hasTaskIcon","taskIconClass","taskIcon","whenDecorator","toolTip","plrName","getLabel","showContextMenu","scaleNode","high","hideDetailsAtMedium","truncateLength","classes","startPoint","getStartPoint","endPoint","getEndPoint","sourceNode","getSource","targetNode","getTarget","vis","setVis","maxSize","setMaxSize","setWidth","storedGraphModel","onLayoutUpdate","nodeBounds","maxWidth","bounds","w1","w2","maxHeight","h1","h2","maxObject","nb","maxX","maxY","horizontalMargin","verticalMargin","finallyTaskHeight","regularTaskHeight","visualization","registerLayoutFactory","registerComponentFactory","fromModel","addEventListener","getGraph","toModel","getNodes","onResize","contentRect","measureRef","min","innerHeight","controller","controlBar","controlButtons","zoomInCallback","scaleBy","zoomOutCallback","fitToScreenCallback","fit","resetViewCallback","reset","legend","method","span","WEBHOOK","appLink","permission","flags","existingPipeline","hasCreatePipelineAccess","canListPipelines","canCreatePipelines","usePipelineAccessReview","getAlertText","isDockerStrategy","builderImage","resourceType","MISSING_DOCKERFILE_LABEL_TEXT","noTemplateForRuntime","setNoTemplateForRuntime","isPacRepo","setIsPacRepo","isPipelineTypeChanged","setIsPipelineTypeChanged","isExpanded","setIsExpanded","pipelineTemplates","setPipelineTemplates","pipelineStorageRef","isRepositoryEnabled","import","option","buildOption","isPipelineAttached","isServerlessFunctionStrategy","getPipelineNames","pipelines","pl","handlePipelineTypeChange","disallowedPacGitTypes","isTektonFolderPresent","PAC","PIPELINE","enabled","setTimeout","PIPELINES","ignore","builderPipelineLabel","dockerPipelineLabel","funcPipelineLabel","labelSelector","fetchedPipelines","imagePipelines","candidatePipelines","labels","pipelineTemplate","templateSelected","pipelineTemplateItems","items","img","builderImageTitle","resourceName","template","val","onChangePipelineType","disabled","onToggle","githubAppAvailable","setGithubAppAvailable","translatedResourceName","inlineCompact","handleBuilderImageSelection","s2iStrategy","loadingImageStream","tag","selectedBuilderImage","selectedImageTag","BuildSection","appResources","project","env","buildEnv","selectedImage","selectedTag","knativeFuncLoaded","funcLoaded","environments","envsLoaded","envs","BUILDS","strategyType","buildConfig","SHIPWRIGHT_BUILD","shipwrightBuild","autoSelectPipelines","checkTektonFolder","importStrategy","isi","showHeader","obj","PipelineChangeAlert","alertMessage","validateForm","isRecommending","showPipelineWarning","setShowPipelineWarning","recentTag","imageName","changedPipelineWarning","itemList","loadingItems","onSelect","triggers","config","BuildOption","isBuildV1Enabled","isShipwrightBuildsEnabled","strategyLoaded","isPipelineEnabled","selectInputOptions","description","selection","getLabelFromValue","toggleOnSelection","BuildStrategySelector","clusterBuildStrategyOptions","buildah","BUILDAH","s2i","ariaLabel","placeholderText"],"mappings":"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","file":"git-import-form~source-to-image-form-chunk-e6daaab85831bd2c7437.min.js","sourcesContent":["import * as dagre from 'dagre';\n\nexport const NODE_SEPARATION_HORIZONTAL = 25;\nexport const NODE_SEPARATION_VERTICAL = 20;\nexport const DROP_SHADOW_SPACING = 5;\nexport const BUILDER_NODE_ADD_RADIUS = 9;\nexport const BUILDER_NODE_DECORATOR_RADIUS = 9;\nexport const BUILDER_NODE_ADD_PADDING = 4;\n\nexport const NODE_WIDTH = 120;\nexport const NODE_HEIGHT = 30;\nexport const FINALLY_NODE_PADDING = 30;\nexport const FINALLY_NODE_VERTICAL_SPACING = 20;\n\nexport const FINALLY_ADD_LINK_TEXT_HEIGHT = 10;\nexport const FINALLY_ADD_LINK_SIZE = 15;\nexport const WHEN_EXPRESSSION_DIAMOND_SIZE = 10;\nexport const WHEN_EXPRESSION_SPACING = 25;\n\nexport const DEFAULT_NODE_HEIGHT = 32;\nexport const NODE_PADDING = 12;\nexport const DEFAULT_NODE_ICON_WIDTH = 30;\nexport const DEFAULT_BADGE_WIDTH = 40;\nexport const DEFAULT_FINALLLY_GROUP_PADDING = 35;\nexport const TOOLBAR_HEIGHT = 40;\nexport const GRAPH_MIN_WIDTH = 300;\nexport const GRAPH_MAX_HEIGHT_PERCENT = 45;\n\nexport enum NodeType {\n  TASK_NODE = 'task',\n  CUSTOM_TASK_NODE = 'custom-task',\n  SPACER_NODE = 'spacer',\n  LOADING_NODE = 'loading',\n  TASK_LIST_NODE = 'task-list',\n  BUILDER_NODE = 'builder',\n  INVALID_TASK_LIST_NODE = 'invalid-task-list',\n  FINALLY_NODE = 'finally-node',\n  BUILDER_FINALLY_NODE = 'builder-finally-node',\n  FINALLY_GROUP = 'finally-group',\n  EDGE = 'edge',\n}\nexport enum DrawDesign {\n  INTEGRAL_SHAPE = 'integral-shape',\n  STRAIGHT = 'line',\n}\nexport enum PipelineLayout {\n  DAGRE_BUILDER = 'dagre-builder',\n  DAGRE_BUILDER_SPACED = 'dagre-builder-spaced',\n  DAGRE_VIEWER = 'dagre-viewer',\n  DAGRE_VIEWER_SPACED = 'dagre-viewer-spaced',\n}\n\nexport enum AddNodeDirection {\n  /**\n   * Rules today:\n   *  - the `relatedTask` is pointing at ONLY us\n   *  - we inherit all that `relatedTask` is pointing at\n   */\n  BEFORE = 'in-run-after',\n\n  /**\n   * Rules today:\n   *  - the `relatedTask` must be our ONLY runAfter\n   *  - we are added to all that is pointing at `relatedTask`\n   */\n  AFTER = 'has-run-after',\n\n  /**\n   * Rules today:\n   *  - we inherit all that `relatedTask` is pointing at\n   *  - we are added to all that is pointing at `relatedTask`\n   */\n  PARALLEL = 'shared-parallel',\n}\n\nconst DAGRE_SHARED_PROPS: dagre.GraphLabel = {\n  nodesep: NODE_SEPARATION_VERTICAL,\n  ranksep: NODE_SEPARATION_HORIZONTAL,\n  edgesep: 50,\n  ranker: 'longest-path',\n  rankdir: 'LR',\n  marginx: 20,\n  marginy: 20,\n};\nexport const DAGRE_VIEWER_PROPS: dagre.GraphLabel = {\n  ...DAGRE_SHARED_PROPS,\n};\nexport const DAGRE_VIEWER_SPACED_PROPS: dagre.GraphLabel = {\n  ...DAGRE_VIEWER_PROPS,\n  ranksep: NODE_SEPARATION_HORIZONTAL + WHEN_EXPRESSION_SPACING,\n};\nexport const DAGRE_BUILDER_PROPS: dagre.GraphLabel = {\n  ...DAGRE_SHARED_PROPS,\n  ranksep: NODE_SEPARATION_HORIZONTAL + BUILDER_NODE_ADD_RADIUS * 2,\n  nodesep: NODE_SEPARATION_VERTICAL + BUILDER_NODE_ADD_RADIUS,\n  marginx: DAGRE_SHARED_PROPS.marginx + BUILDER_NODE_ADD_RADIUS * 2,\n  marginy: DAGRE_SHARED_PROPS.marginy + BUILDER_NODE_ADD_RADIUS * 2,\n};\n\nexport const DAGRE_BUILDER_SPACED_PROPS: dagre.GraphLabel = {\n  ...DAGRE_BUILDER_PROPS,\n  ranksep: NODE_SEPARATION_HORIZONTAL + WHEN_EXPRESSION_SPACING + BUILDER_NODE_ADD_RADIUS * 2,\n};\n\nexport enum CustomTask {\n  CUSTOM_TASK = 'CustomTask',\n}\n","import * as React from 'react';\nimport { global_palette_black_1000 as globalBlack1000 } from '@patternfly/react-tokens/dist/js/global_palette_black_1000';\nimport { SVGDefs } from '@patternfly/react-topology';\n\ninterface SvgDropShadowFilterProps {\n  // The unique ID that identifies the filter.\n  // It is also used to uniquely identify the def entry to prevent duplicates.\n  id: string;\n  dx?: number;\n  dy?: number;\n  stdDeviation?: number;\n  floodOpacity?: number;\n  floodColor?: string;\n}\n\nconst SvgDropShadowFilter: React.FC<SvgDropShadowFilterProps> = ({\n  id,\n  dx = 0,\n  dy = 1,\n  stdDeviation = 2,\n  floodColor = globalBlack1000.value,\n  floodOpacity = 0.2,\n}) => {\n  if (window.navigator.userAgent.includes('Edge')) {\n    // feDropShadow is not supported by Edge\n    return (\n      <SVGDefs id={id}>\n        <filter\n          id={id}\n          x={`-${stdDeviation * 12.5}%`}\n          y={`-${stdDeviation * 12.5}%`}\n          width={`${100 + stdDeviation * 25}%`}\n          height={`${100 + stdDeviation * 25}%`}\n        >\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation={stdDeviation} />\n          <feOffset dx={dx} dy={dy} result=\"offsetblur\" />\n          <feFlood floodColor={floodColor} floodOpacity={floodOpacity} />\n          <feComposite in2=\"offsetblur\" operator=\"in\" />\n          <feMerge>\n            <feMergeNode />\n            <feMergeNode in=\"SourceGraphic\" />\n          </feMerge>\n        </filter>\n      </SVGDefs>\n    );\n  }\n\n  return (\n    <SVGDefs id={id}>\n      <filter\n        id={id}\n        x={`-${stdDeviation * 12.5}%`}\n        y={`-${stdDeviation * 12.5}%`}\n        width={`${100 + stdDeviation * 25}%`}\n        height={`${100 + stdDeviation * 25}%`}\n      >\n        <feDropShadow\n          dx={dx}\n          dy={dy}\n          stdDeviation={stdDeviation}\n          floodColor={floodColor}\n          floodOpacity={floodOpacity}\n        />\n      </filter>\n    </SVGDefs>\n  );\n};\n\nexport default SvgDropShadowFilter;\n","import * as React from 'react';\nimport { useSize, createSvgIdUrl } from '@patternfly/react-topology';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport SvgDropShadowFilter from './SvgDropShadowFilter';\n\ninterface SvgTypedIconProps {\n  className?: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  padding?: number;\n  iconClass?: string;\n  icon?: React.ReactNode;\n}\n\nconst FILTER_ID = 'SvgTypedIconDropShadowFilterId';\n\nconst CircledIcon: React.FC<SvgTypedIconProps> = (\n  { className, x, y, width, height, iconClass, icon, padding = 4 },\n  circleRef,\n) => {\n  const [typedIconSize, typedIconRef] = useSize([]);\n\n  let iconWidth = 0;\n  let iconHeight = 0;\n\n  if (typedIconSize) {\n    ({ width: iconWidth, height: iconHeight } = typedIconSize);\n  }\n\n  return (\n    <g className={className}>\n      <SvgDropShadowFilter id={FILTER_ID} />\n      <circle\n        key={`circle-${FILTER_ID}`}\n        ref={circleRef}\n        filter={createSvgIdUrl(FILTER_ID)}\n        cx={x - iconWidth / 2}\n        cy={y + iconHeight / 2}\n        r={iconWidth / 2 + padding}\n      />\n      {icon ? (\n        <g ref={typedIconRef}>\n          <foreignObject\n            key={`image-${FILTER_ID}`}\n            x={x - iconWidth + 4}\n            y={y}\n            width={width}\n            height={height}\n          >\n            {icon}\n          </foreignObject>\n        </g>\n      ) : (\n        <g ref={typedIconRef}>\n          <image\n            key={`image-${FILTER_ID}`}\n            x={x - iconWidth}\n            y={y}\n            width={width}\n            height={height}\n            xlinkHref={getImageForIconClass(iconClass) || iconClass}\n            filter={createSvgIdUrl(FILTER_ID)}\n          />\n        </g>\n      )}\n    </g>\n  );\n};\n\nexport default React.forwardRef(CircledIcon);\n","import * as React from 'react';\n\ntype GiteaIconProps = {\n  style?: React.CSSProperties;\n  topology?: boolean;\n};\n\nconst GiteaIcon: React.FC<GiteaIconProps> = ({ style, topology }): React.ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={topology ? '0 20 650 587' : '0 20 650 450'}\n      fill=\"currentColor\"\n      aria-hidden=\"true\"\n      role=\"img\"\n      width=\"1em\"\n      height=\"1em\"\n      style={style}\n    >\n      <path\n        d=\"m395.9 484.2-126.9-61c-12.5-6-17.9-21.2-11.8-33.8l61-126.9c6-12.5 21.2-17.9 33.8-11.8 17.2 8.3 27.1 13 27.1 13l-.1-109.2 16.7-.1.1 117.1s57.4 24.2 83.1 40.1c3.7 2.3 10.2 6.8 12.9 14.4 2.1 6.1 2 13.1-1 19.3l-61 126.9c-6.2 12.7-21.4 18.1-33.9 12z\"\n        style={{\n          fill: '#fff',\n        }}\n      />\n      <path\n        d=\"M622.7 149.8c-4.1-4.1-9.6-4-9.6-4s-117.2 6.6-177.9 8c-13.3.3-26.5.6-39.6.7v117.2c-5.5-2.6-11.1-5.3-16.6-7.9 0-36.4-.1-109.2-.1-109.2-29 .4-89.2-2.2-89.2-2.2s-141.4-7.1-156.8-8.5c-9.8-.6-22.5-2.1-39 1.5-8.7 1.8-33.5 7.4-53.8 26.9C-4.9 212.4 6.6 276.2 8 285.8c1.7 11.7 6.9 44.2 31.7 72.5 45.8 56.1 144.4 54.8 144.4 54.8s12.1 28.9 30.6 55.5c25 33.1 50.7 58.9 75.7 62 63 0 188.9-.1 188.9-.1s12 .1 28.3-10.3c14-8.5 26.5-23.4 26.5-23.4S547 483 565 451.5c5.5-9.7 10.1-19.1 14.1-28 0 0 55.2-117.1 55.2-231.1-1.1-34.5-9.6-40.6-11.6-42.6zM125.6 353.9c-25.9-8.5-36.9-18.7-36.9-18.7S69.6 321.8 60 295.4c-16.5-44.2-1.4-71.2-1.4-71.2s8.4-22.5 38.5-30c13.8-3.7 31-3.1 31-3.1s7.1 59.4 15.7 94.2c7.2 29.2 24.8 77.7 24.8 77.7s-26.1-3.1-43-9.1zm300.3 107.6s-6.1 14.5-19.6 15.4c-5.8.4-10.3-1.2-10.3-1.2s-.3-.1-5.3-2.1l-112.9-55s-10.9-5.7-12.8-15.6c-2.2-8.1 2.7-18.1 2.7-18.1L322 273s4.8-9.7 12.2-13c.6-.3 2.3-1 4.5-1.5 8.1-2.1 18 2.8 18 2.8L467.4 315s12.6 5.7 15.3 16.2c1.9 7.4-.5 14-1.8 17.2-6.3 15.4-55 113.1-55 113.1z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n      <path\n        d=\"M326.8 380.1c-8.2.1-15.4 5.8-17.3 13.8-1.9 8 2 16.3 9.1 20 7.7 4 17.5 1.8 22.7-5.4 5.1-7.1 4.3-16.9-1.8-23.1l24-49.1c1.5.1 3.7.2 6.2-.5 4.1-.9 7.1-3.6 7.1-3.6 4.2 1.8 8.6 3.8 13.2 6.1 4.8 2.4 9.3 4.9 13.4 7.3.9.5 1.8 1.1 2.8 1.9 1.6 1.3 3.4 3.1 4.7 5.5 1.9 5.5-1.9 14.9-1.9 14.9-2.3 7.6-18.4 40.6-18.4 40.6-8.1-.2-15.3 5-17.7 12.5-2.6 8.1 1.1 17.3 8.9 21.3 7.8 4 17.4 1.7 22.5-5.3 5-6.8 4.6-16.3-1.1-22.6 1.9-3.7 3.7-7.4 5.6-11.3 5-10.4 13.5-30.4 13.5-30.4.9-1.7 5.7-10.3 2.7-21.3-2.5-11.4-12.6-16.7-12.6-16.7-12.2-7.9-29.2-15.2-29.2-15.2s0-4.1-1.1-7.1c-1.1-3.1-2.8-5.1-3.9-6.3 4.7-9.7 9.4-19.3 14.1-29-4.1-2-8.1-4-12.2-6.1-4.8 9.8-9.7 19.7-14.5 29.5-6.7-.1-12.9 3.5-16.1 9.4-3.4 6.3-2.7 14.1 1.9 19.8l-24.6 50.4z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n    </svg>\n  );\n};\n\nexport default GiteaIcon;\n","import { chart_color_green_400 as successColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport {\n  getSpacerNodes,\n  getEdgesFromNodes,\n  WhenStatus,\n  RunStatus,\n  ModelKind,\n  GraphModel,\n  EdgeModel,\n} from '@patternfly/react-topology';\nimport * as dagre from 'dagre';\nimport * as _ from 'lodash';\nimport i18n from '@console/internal/i18n';\nimport {\n  ComputedStatus,\n  PipelineKind,\n  PipelineRunKind,\n  PipelineTask,\n  PipelineTaskWithStatus,\n  TaskRunKind,\n} from '../../../types';\nimport { getRunStatusColor } from '../../../utils/pipeline-augment';\nimport {\n  getPipelineTasks,\n  getFinallyTasksWithStatus,\n  appendPipelineRunStatus,\n} from '../../../utils/pipeline-utils';\nimport { CheckTaskErrorMessage } from '../pipeline-builder/types';\nimport {\n  NODE_HEIGHT,\n  NodeType,\n  NODE_WIDTH,\n  AddNodeDirection,\n  PipelineLayout,\n  DAGRE_BUILDER_PROPS,\n  DAGRE_VIEWER_PROPS,\n  FINALLY_NODE_PADDING,\n  FINALLY_NODE_VERTICAL_SPACING,\n  WHEN_EXPRESSION_SPACING,\n  DAGRE_VIEWER_SPACED_PROPS,\n  DAGRE_BUILDER_SPACED_PROPS,\n  NODE_PADDING,\n  DEFAULT_NODE_ICON_WIDTH,\n  DEFAULT_FINALLLY_GROUP_PADDING,\n  DEFAULT_NODE_HEIGHT,\n  DEFAULT_BADGE_WIDTH,\n} from './const';\nimport { DAG, Vertex } from './dag';\nimport {\n  PipelineEdgeModel,\n  NodeCreator,\n  NodeCreatorSetup,\n  SpacerNodeModelData,\n  TaskListNodeModelData,\n  TaskNodeModelData,\n  PipelineMixedNodeModel,\n  PipelineTaskNodeModel,\n  BuilderNodeModelData,\n  PipelineRunAfterNodeModelData,\n  BuilderFinallyNodeModel,\n  FinallyNodeModel,\n  PipelineFinallyNodeModel,\n  DiamondStateType,\n  LoadingNodeModel,\n} from './types';\n\nconst createGenericNode: NodeCreatorSetup = (type, width?, height?) => (name, data) => ({\n  id: name,\n  label: data?.label || name,\n  runAfterTasks: data?.runAfterTasks || [],\n  ...(data && { data }),\n  height: height ?? NODE_HEIGHT,\n  width: width ?? NODE_WIDTH,\n  type,\n});\n\n// Node variations\nexport const createTaskNode: NodeCreator<TaskNodeModelData> = createGenericNode(NodeType.TASK_NODE);\n\nexport const createCustomTaskNode: NodeCreator<TaskNodeModelData> = createGenericNode(\n  NodeType.CUSTOM_TASK_NODE,\n);\n\nexport const createSpacerNode: NodeCreator<SpacerNodeModelData> = createGenericNode(\n  NodeType.SPACER_NODE,\n  0,\n);\nexport const createTaskListNode: NodeCreator<TaskListNodeModelData> = createGenericNode(\n  NodeType.TASK_LIST_NODE,\n);\nexport const createInvalidTaskListNode: NodeCreator<TaskListNodeModelData> = createGenericNode(\n  NodeType.INVALID_TASK_LIST_NODE,\n);\nexport const createBuilderNode: NodeCreator<BuilderNodeModelData> = createGenericNode(\n  NodeType.BUILDER_NODE,\n);\n\nexport const createFinallyNode = (height): NodeCreator<FinallyNodeModel> =>\n  createGenericNode(\n    NodeType.FINALLY_NODE,\n    NODE_WIDTH + WHEN_EXPRESSION_SPACING + FINALLY_NODE_PADDING * 2,\n    height,\n  );\n\nexport const createLoadingNode: NodeCreator<LoadingNodeModel> = createGenericNode(\n  NodeType.LOADING_NODE,\n);\n\nexport const createBuilderFinallyNode = (\n  height: number,\n  width: number,\n): NodeCreator<BuilderFinallyNodeModel> =>\n  createGenericNode(NodeType.BUILDER_FINALLY_NODE, width, height);\n\nconst createPipelineTaskNode = (type: NodeType, data: PipelineRunAfterNodeModelData) =>\n  createGenericNode(type, data.width, data.height)(data.id, data);\n\nexport const getNodeCreator = (type: NodeType): NodeCreator<PipelineRunAfterNodeModelData> => {\n  switch (type) {\n    case NodeType.TASK_LIST_NODE:\n      return createTaskListNode;\n    case NodeType.BUILDER_NODE:\n      return createBuilderNode;\n    case NodeType.SPACER_NODE:\n      return createSpacerNode;\n    case NodeType.LOADING_NODE:\n      return createLoadingNode;\n    case NodeType.INVALID_TASK_LIST_NODE:\n      return createInvalidTaskListNode;\n    case NodeType.CUSTOM_TASK_NODE:\n      return createCustomTaskNode;\n    case NodeType.TASK_NODE:\n    default:\n      return createTaskNode;\n  }\n};\n\nexport const handleParallelToParallelNodes = (\n  nodes: PipelineMixedNodeModel[],\n): PipelineMixedNodeModel[] => {\n  type ParallelNodeReference = {\n    node: PipelineTaskNodeModel;\n    runAfter: string[];\n    atIndex: number;\n  };\n  type ParallelNodeMap = {\n    [id: string]: ParallelNodeReference[];\n  };\n\n  // Collect only multiple run-afters\n  const multipleRunBeforeMap: ParallelNodeMap = nodes.reduce((acc, node, idx) => {\n    const {\n      data: {\n        task: { runAfter },\n      },\n    } = node;\n    if (runAfter && runAfter.length > 1) {\n      const id: string = [...runAfter]\n        .sort((a, b) => a.localeCompare(b))\n        .reduce((str, ref) => `${str}|${ref}`);\n\n      if (!Array.isArray(acc[id])) {\n        acc[id] = [];\n      }\n      acc[id].push({\n        node,\n        runAfter,\n        atIndex: idx,\n      });\n    }\n    return acc;\n  }, {} as ParallelNodeMap);\n\n  // Trim out single occurrences\n  const multiParallelToParallelList: ParallelNodeReference[][] = Object.values(\n    multipleRunBeforeMap,\n  ).filter((data: ParallelNodeReference[]) => data.length > 1);\n\n  if (multiParallelToParallelList.length === 0) {\n    // No parallel to parallel\n    return nodes;\n  }\n\n  // Insert a spacer node between the multiple nodes on the sides of a parallel-to-parallel\n  const newNodes: PipelineMixedNodeModel[] = [];\n  const newRunAfterNodeMap: { [nodeId: string]: string[] } = {};\n  multiParallelToParallelList.forEach((p2p: ParallelNodeReference[]) => {\n    // All nodes in each array share their runAfters\n    const { runAfter } = p2p[0];\n\n    const names: string[] = p2p.map((p2pData) => p2pData.node.id);\n    const parallelSpacerName = `parallel-${names.join('-')}`;\n\n    names.forEach((p2pNodeId) => {\n      if (!Array.isArray(newRunAfterNodeMap[p2pNodeId])) {\n        newRunAfterNodeMap[p2pNodeId] = [];\n      }\n      newRunAfterNodeMap[p2pNodeId].push(parallelSpacerName);\n    });\n\n    newNodes.push(\n      createSpacerNode(parallelSpacerName, {\n        task: {\n          name: parallelSpacerName,\n          runAfter,\n        },\n      }),\n    );\n  });\n\n  // Update all impacted nodes to point at the spacer node as the spacer points at their original runAfters\n  nodes.forEach((node) => {\n    const newRunAfters: string[] | undefined = newRunAfterNodeMap[node.id];\n    if (newRunAfters && newRunAfters.length > 0) {\n      const {\n        data: { task },\n        type,\n      } = node;\n\n      const createNode: NodeCreator<PipelineRunAfterNodeModelData> = getNodeCreator(type);\n\n      // Recreate the node with the new runAfter pointing to the spacer node\n      newNodes.push(\n        createNode(node.id, {\n          ...node.data,\n          task: {\n            ...task,\n            runAfter: newRunAfters,\n          },\n        }),\n      );\n    } else {\n      // Unaffected node, just carry it over\n      newNodes.push(node);\n    }\n  });\n\n  return newNodes;\n};\n\nexport const tasksToNodes = (\n  taskList: PipelineTask[],\n  pipeline?: PipelineKind,\n  pipelineRun?: PipelineRunKind,\n): PipelineMixedNodeModel[] => {\n  const nodeList: PipelineTaskNodeModel[] = taskList.map((task) =>\n    createTaskNode(task.name, {\n      task,\n      pipeline,\n      pipelineRun,\n    }),\n  );\n\n  return handleParallelToParallelNodes(nodeList);\n};\n\nexport const tasksToBuilderNodes = (\n  taskList: PipelineTask[],\n  onAddNode: (task: PipelineTask, direction: AddNodeDirection) => void,\n  onNodeSelection: (task: PipelineTask) => void,\n  getError: CheckTaskErrorMessage,\n  selectedIds: string[],\n): PipelineMixedNodeModel[] => {\n  return taskList.map((task, idx) => {\n    return createBuilderNode(task.name, {\n      error: getError(idx),\n      task,\n      selected: selectedIds.includes(task.name),\n      onNodeSelection: () => {\n        onNodeSelection(task);\n      },\n      onAddNode: (direction: AddNodeDirection) => {\n        onAddNode(task, direction);\n      },\n    });\n  });\n};\n\nexport const getBuilderEdgesFromNodes = (nodes: PipelineMixedNodeModel[]): PipelineEdgeModel[] =>\n  _.flatten(\n    nodes.map((node) => {\n      const {\n        data: {\n          task: { name: target, runAfter = [] },\n        },\n      } = node;\n\n      if (runAfter.length === 0) return null;\n\n      return runAfter.map((source) => ({\n        id: `${source}~to~${target}`,\n        type: 'edge',\n        source,\n        target,\n      }));\n    }),\n  ).filter((edgeList) => !!edgeList);\n\nexport const getFinallyTaskHeight = (allTasksLength: number, disableBuilder: boolean): number => {\n  return (\n    allTasksLength * NODE_HEIGHT +\n    (allTasksLength - 1) * FINALLY_NODE_VERTICAL_SPACING +\n    (!disableBuilder ? NODE_HEIGHT + FINALLY_NODE_VERTICAL_SPACING : 0) +\n    FINALLY_NODE_PADDING * 2\n  );\n};\n\nexport const getFinallyTaskWidth = (allTasksLength: number): number => {\n  const whenExpressionSpacing = allTasksLength > 0 ? WHEN_EXPRESSION_SPACING : 0;\n  return NODE_WIDTH + FINALLY_NODE_PADDING * 2 + whenExpressionSpacing;\n};\n\nexport const getLastRegularTasks = (regularTasks: PipelineMixedNodeModel[]): string[] => {\n  const runAfters = _.uniq(\n    regularTasks.reduce((acc, { data: { task: { runAfter } } }) => {\n      return runAfter ? acc.concat(runAfter) : acc;\n    }, []),\n  );\n  return _.difference(\n    regularTasks.map((n) => n.id),\n    runAfters,\n  );\n};\n\nexport const connectFinallyTasksToNodes = (\n  nodes: PipelineMixedNodeModel[],\n  pipeline?: PipelineKind,\n  pipelineRun?: PipelineRunKind,\n  taskRuns?: TaskRunKind[],\n): PipelineMixedNodeModel[] => {\n  const finallyTasks = pipelineRun\n    ? getFinallyTasksWithStatus(pipeline, pipelineRun, taskRuns)\n    : pipeline.spec?.finally ?? [];\n  if (finallyTasks.length === 0) {\n    return nodes;\n  }\n  const regularRunAfters = getLastRegularTasks(nodes);\n  const name = 'finally-node';\n  const finallyGroupNode: PipelineFinallyNodeModel = createFinallyNode(\n    getFinallyTaskHeight(finallyTasks.length, true),\n  )(name, {\n    isFinallyTask: true,\n    pipeline,\n    pipelineRun,\n    task: {\n      isFinallyTask: true,\n      name,\n      runAfter: regularRunAfters,\n      finallyTasks: finallyTasks.map((ft) => ({\n        ...ft,\n        disableTooltip: false,\n      })),\n    },\n  });\n  return [...nodes, finallyGroupNode];\n};\n\nexport const getTopologyNodesEdges = (\n  pipeline: PipelineKind,\n  pipelineRun?: PipelineRunKind,\n  taskRuns?: TaskRunKind[],\n): { nodes: PipelineMixedNodeModel[]; edges: PipelineEdgeModel[] } => {\n  const taskList: PipelineTask[] = _.flatten(getPipelineTasks(pipeline, pipelineRun, taskRuns));\n  const taskNodes: PipelineMixedNodeModel[] = tasksToNodes(taskList, pipeline, pipelineRun);\n\n  const nodes: PipelineMixedNodeModel[] = connectFinallyTasksToNodes(\n    taskNodes,\n    pipeline,\n    pipelineRun,\n    taskRuns,\n  );\n  const edges: PipelineEdgeModel[] = getEdgesFromNodes(nodes);\n\n  return { nodes, edges };\n};\n\nexport const getTextWidth = (text: string, font: string = '0.8rem RedHatText'): number => {\n  if (!text || text.length === 0) {\n    return 0;\n  }\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  if (!context) {\n    return text.length;\n  }\n  context.font = font;\n  const { width } = context.measureText(text);\n  return width;\n};\n\nexport const extractDepsFromContextVariables = (contextVariable: string) => {\n  const regex = /(?:(?:\\$\\(tasks.))([a-z0-9_-]+)(?:.results+)(?:[.^\\w]+\\))/g;\n  let matches;\n  const deps = [];\n  // eslint-disable-next-line no-cond-assign\n  while ((matches = regex.exec(contextVariable)) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (matches.index === regex.lastIndex) {\n      regex.lastIndex++;\n    }\n    if (matches) {\n      if (!deps.includes(matches[1])) {\n        deps.push(matches[1]);\n      }\n    }\n  }\n  return deps;\n};\n\nexport const getSpacerNode = (node: PipelineMixedNodeModel): PipelineMixedNodeModel => ({\n  ...node,\n  height: 1,\n  width: 1,\n});\n\nexport const getWhenStatus = (status: RunStatus): WhenStatus => {\n  switch (status) {\n    case RunStatus.Succeeded:\n    case RunStatus.Failed:\n      return WhenStatus.Met;\n    case RunStatus.Skipped:\n    case RunStatus['In Progress']:\n    case RunStatus.Idle:\n      return WhenStatus.Unmet;\n    default:\n      return undefined;\n  }\n};\n\nexport const getTaskWhenStatus = (task: PipelineTaskWithStatus): WhenStatus => {\n  if (!task.when) {\n    return undefined;\n  }\n  return getWhenStatus(task.status?.reason);\n};\n\nexport const getGraphDataModel = (\n  pipeline: PipelineKind,\n  pipelineRun: PipelineRunKind = {\n    apiVersion: '',\n    metadata: {},\n    kind: 'PipelineRun',\n    spec: {},\n  },\n  taskRuns: TaskRunKind[],\n): {\n  graph: GraphModel;\n  nodes: PipelineMixedNodeModel[];\n  edges: EdgeModel[];\n} => {\n  if (!pipeline) {\n    return null;\n  }\n\n  const taskList = _.flatten(getPipelineTasks(pipeline, pipelineRun, taskRuns));\n\n  const dag = new DAG();\n  taskList?.forEach((task: PipelineTask) => {\n    dag.addEdges(task.name, task, '', task.runAfter || []);\n  });\n\n  const nodes = [];\n  const maxWidthForLevel = {};\n  dag.topologicalSort((v: Vertex) => {\n    if (!maxWidthForLevel[v.level]) {\n      maxWidthForLevel[v.level] = getTextWidth(v.name);\n    } else {\n      maxWidthForLevel[v.level] = Math.max(maxWidthForLevel[v.level], getTextWidth(v.name));\n    }\n  });\n  dag.topologicalSort((vertex: Vertex) => {\n    const runAfterTasks = [];\n    const task = vertex.data;\n    const depsFromContextVariables = [];\n    if (task.params) {\n      task.params.forEach((p) => {\n        if (Array.isArray(p.value)) {\n          p.value.forEach((paramValue) => {\n            depsFromContextVariables.push(...extractDepsFromContextVariables(paramValue));\n          });\n        } else {\n          depsFromContextVariables.push(...extractDepsFromContextVariables(p.value));\n        }\n      });\n    }\n    if (task?.when) {\n      task.when.forEach(({ input, values }) => {\n        if (values) {\n          depsFromContextVariables.push(...extractDepsFromContextVariables(input));\n          values.forEach((whenValue) => {\n            depsFromContextVariables.push(...extractDepsFromContextVariables(whenValue));\n          });\n        }\n      });\n    }\n    const dependancies = _.uniq([...vertex.dependancyNames]);\n    if (dependancies) {\n      dependancies.forEach((dep) => {\n        const depObj = dag.vertices.get(dep);\n        if (depObj.level - vertex.level <= 1 || vertex.data.runAfter?.includes(depObj.name)) {\n          runAfterTasks.push(dep);\n        }\n      });\n    }\n    if (depsFromContextVariables.length > 0) {\n      const v = depsFromContextVariables.map((d) => {\n        return dag.vertices.get(d);\n      });\n      const minLevelDep = _.minBy(v, (d) => d.level);\n      const nearestDeps = v.filter((v1) => v1.level === minLevelDep.level);\n      nearestDeps.forEach((nd) => {\n        if (vertex.dependancyNames.includes(nd.name)) {\n          if (nd.level - vertex.level <= 1 || vertex.dependancyNames.length === 0) {\n            runAfterTasks.push(nd.name);\n          }\n        }\n      });\n    }\n    const badgePadding = Object.keys(pipelineRun.spec)?.length > 0 ? DEFAULT_BADGE_WIDTH : 0;\n    const isTaskSkipped = pipelineRun?.status?.skippedTasks?.some((t) => t.name === task.name);\n    const getNodeType = (taskKind: string) => {\n      if (!taskKind || taskKind === 'Task' || taskKind === 'ClusterTask') {\n        return NodeType.TASK_NODE;\n      }\n      return NodeType.CUSTOM_TASK_NODE;\n    };\n\n    nodes.push(\n      createPipelineTaskNode(getNodeType(task?.taskRef?.kind), {\n        id: vertex.name,\n        label: vertex.name,\n        width:\n          maxWidthForLevel[vertex.level] +\n          NODE_PADDING * 2 +\n          DEFAULT_NODE_ICON_WIDTH +\n          badgePadding,\n        runAfterTasks,\n        status: isTaskSkipped ? RunStatus.Skipped : vertex.data.status?.reason,\n        whenStatus: getTaskWhenStatus(vertex.data),\n        task: vertex.data,\n        pipeline,\n        pipelineRun,\n      }),\n    );\n  });\n\n  const finallyTaskList = appendPipelineRunStatus(pipeline, pipelineRun, taskRuns, true);\n\n  const maxFinallyNodeName =\n    finallyTaskList.sort((a, b) => b.name.length - a.name.length)[0]?.name || '';\n  const finallyNodes = finallyTaskList.map((fTask) => {\n    const isTaskSkipped = pipelineRun?.status?.skippedTasks?.some((t) => t.name === fTask.name);\n\n    return createPipelineTaskNode(NodeType.FINALLY_NODE, {\n      id: fTask.name,\n      label: fTask.name,\n      width:\n        getTextWidth(maxFinallyNodeName) + NODE_PADDING * 2 + DEFAULT_FINALLLY_GROUP_PADDING * 2,\n      height: DEFAULT_NODE_HEIGHT,\n      runAfterTasks: [],\n      status: isTaskSkipped ? RunStatus.Skipped : fTask.status?.reason,\n      whenStatus: getTaskWhenStatus(fTask),\n      task: fTask,\n      pipeline,\n      pipelineRun,\n    });\n  });\n\n  const finallyGroup = finallyNodes.length\n    ? [\n        {\n          id: 'finally-group-id',\n          type: NodeType.FINALLY_GROUP,\n          children: finallyNodes.map((n) => n.id),\n          group: true,\n          style: { padding: DEFAULT_FINALLLY_GROUP_PADDING },\n        },\n      ]\n    : [];\n  const spacerNodes: PipelineMixedNodeModel[] = getSpacerNodes(\n    [...nodes, ...finallyNodes],\n    NodeType.SPACER_NODE,\n    [NodeType.FINALLY_NODE],\n  ).map(getSpacerNode);\n\n  const edges: PipelineEdgeModel[] = getEdgesFromNodes(\n    [...nodes, ...spacerNodes, ...finallyNodes],\n    NodeType.SPACER_NODE,\n    NodeType.EDGE,\n    NodeType.EDGE,\n    [NodeType.FINALLY_NODE],\n    NodeType.EDGE,\n  );\n\n  return {\n    graph: {\n      id: `${pipelineRun?.metadata?.name || pipeline.metadata.name}-graph`,\n      type: ModelKind.graph,\n      layout: PipelineLayout.DAGRE_VIEWER,\n      scaleExtent: [0.5, 1],\n    },\n    nodes: [...nodes, ...spacerNodes, ...finallyNodes, ...finallyGroup],\n    edges,\n  };\n};\n\nexport const taskHasWhenExpression = (task: PipelineTask): boolean => task?.when?.length > 0;\n\nexport const nodesHasWhenExpression = (nodes: PipelineMixedNodeModel[]): boolean =>\n  nodes.some((n) => taskHasWhenExpression(n.data.task));\n\nexport const hasWhenExpression = (pipeline: PipelineKind): boolean => {\n  return [...(pipeline?.spec?.tasks || []), ...(pipeline?.spec?.finally || [])].some(\n    taskHasWhenExpression,\n  );\n};\nexport const getLayoutData = (layout: PipelineLayout): dagre.GraphLabel => {\n  switch (layout) {\n    case PipelineLayout.DAGRE_BUILDER:\n      return DAGRE_BUILDER_PROPS;\n    case PipelineLayout.DAGRE_VIEWER:\n      return DAGRE_VIEWER_PROPS;\n    case PipelineLayout.DAGRE_VIEWER_SPACED:\n      return DAGRE_VIEWER_SPACED_PROPS;\n    case PipelineLayout.DAGRE_BUILDER_SPACED:\n      return DAGRE_BUILDER_SPACED_PROPS;\n    default:\n      return null;\n  }\n};\n\nexport const getWhenExpressionDiamondState = (\n  status: ComputedStatus,\n  isPipelineRun: boolean,\n  isFinallyTask: boolean,\n): DiamondStateType => {\n  let diamondColor: string;\n  if (isPipelineRun) {\n    if (status === ComputedStatus.Failed) {\n      diamondColor = successColor.value;\n    } else {\n      diamondColor = getRunStatusColor(status).pftoken.value;\n    }\n  } else if (!isFinallyTask) {\n    diamondColor = 'var(--pf-v5-global--BackgroundColor--200)';\n  } else {\n    diamondColor = 'var(--pf-v5-global--BackgroundColor--light-100)';\n  }\n\n  let tooltipContent: string;\n  switch (status) {\n    case ComputedStatus.Succeeded:\n    case ComputedStatus.Failed:\n      tooltipContent = i18n.t('pipelines-plugin~When expression was met');\n      break;\n    case ComputedStatus.Skipped:\n      tooltipContent = i18n.t('pipelines-plugin~When expression was not met');\n      break;\n    default:\n      tooltipContent = i18n.t('pipelines-plugin~When expression');\n  }\n  return { tooltipContent, diamondColor };\n};\n\nexport const getTooltipContent = (statusReason: ComputedStatus): string => {\n  switch (statusReason) {\n    case ComputedStatus.Succeeded:\n    case ComputedStatus.Failed:\n      return i18n.t('pipelines-plugin~When expression was met');\n    case ComputedStatus.Skipped:\n      return i18n.t('pipelines-plugin~When expression was not met');\n    default:\n      return i18n.t('pipelines-plugin~When expression');\n  }\n};\n","import * as React from 'react';\nimport { useSize } from '@patternfly/react-topology';\nimport cx from 'classnames';\nimport { get } from 'lodash';\nimport { modelFor, kindToAbbr } from '@console/internal/module/k8s';\nimport './SvgResourceIcon.scss';\n\ninterface ResourceIconProps {\n  x: number;\n  y: number;\n  kind: string;\n  leftJustified?: boolean;\n}\n\nfunction getKindStringAndAbbreviation(kind: string) {\n  const kindObj = modelFor(kind);\n  const kindStr = get(kindObj, 'kind', kind);\n  const kindColor = get(kindObj, 'color', undefined);\n  const kindAbbr = (kindObj && kindObj.abbr) || kindToAbbr(kindStr);\n  return { kindStr, kindAbbr, kindColor };\n}\n\nconst ForwardSvgResourceIcon: React.FC<ResourceIconProps> = (\n  { kind, x, y, leftJustified },\n  iconRef,\n) => {\n  const { kindAbbr, kindStr, kindColor } = getKindStringAndAbbreviation(kind);\n  const [textSize, textRef] = useSize([]);\n\n  let rect = null;\n  let paddingX = 0;\n  let paddingY = 0;\n  let width = 0;\n  let height = 0;\n\n  if (textSize) {\n    ({ height, width } = textSize);\n    paddingX = height / 2;\n    paddingY = height / 14;\n    height += paddingY * 2;\n    rect = (\n      <rect\n        fill={kindColor}\n        ref={iconRef}\n        x={x - (leftJustified ? 0 : paddingX + width / 2)}\n        width={textSize.width + paddingX * 2}\n        y={y - (leftJustified ? 0 : paddingY + textSize.height / 2)}\n        height={height}\n        rx={height / 2}\n        ry={height / 2}\n      />\n    );\n  }\n\n  return (\n    <g\n      className={cx('odc-resource-icon', {\n        [`odc-resource-icon-${kindStr.toLowerCase()}`]: !kindColor,\n      })}\n      data-test={`icon ${kindStr.toLowerCase()}`}\n    >\n      {rect}\n      <title>{kindStr}</title>\n      <text\n        ref={textRef}\n        x={x + (leftJustified ? paddingX + width / 2 : 0)}\n        y={y + (leftJustified ? (paddingY + height) / 2 : 0)}\n        textAnchor=\"middle\"\n        dy=\"0.35em\"\n      >\n        {kindAbbr}\n      </text>\n    </g>\n  );\n};\n\nconst SvgResourceIcon = React.forwardRef(ForwardSvgResourceIcon);\nexport { SvgResourceIcon as default, getKindStringAndAbbreviation };\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { createSvgIdUrl, useHover } from '@patternfly/react-topology';\nimport * as cx from 'classnames';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom-v5-compat';\nimport {\n  Firehose,\n  resourcePathFromModel,\n  truncateMiddle,\n} from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { SvgDropShadowFilter } from '@console/topology/src/components/svg';\nimport { PipelineRunModel, TaskModel, ClusterTaskModel } from '../../../../models';\nimport {\n  ComputedStatus,\n  TektonTaskSpec,\n  PipelineTaskRef,\n  TaskKind,\n  WhenExpression,\n} from '../../../../types';\nimport { getRunStatusColor } from '../../../../utils/pipeline-augment';\nimport { FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER } from '../../const';\nimport { WHEN_EXPRESSSION_DIAMOND_SIZE } from '../../pipeline-topology/const';\nimport WhenExpressionDecorator from '../../pipeline-topology/WhenExpressionDecorator';\nimport { createStepStatus, StepStatus, TaskStatus } from './pipeline-step-utils';\nimport { PipelineVisualizationStepList } from './PipelineVisualizationStepList';\nimport { StatusIcon } from './StatusIcon';\n\nimport './PipelineVisualizationTask.scss';\n\ntype PipelineVisualizationTask = {\n  name?: string;\n  taskSpec?: TektonTaskSpec;\n  taskRef?: PipelineTaskRef;\n  runAfter?: string[];\n  when?: WhenExpression[];\n  status?: TaskStatus;\n};\ninterface TaskProps {\n  pipelineRunName?: string;\n  name: string;\n  loaded?: boolean;\n  task?: {\n    data: TaskKind;\n  };\n  status: TaskStatus;\n  namespace: string;\n  isPipelineRun: boolean;\n  disableVisualizationTooltip?: boolean;\n  selected?: boolean;\n  width: number;\n  height: number;\n  isFinallyTask?: boolean;\n  pipelineTask: PipelineVisualizationTask;\n}\n\ninterface PipelineVisualizationTaskProp {\n  pipelineRunName?: string;\n  namespace: string;\n  task: PipelineVisualizationTask;\n  taskRun?: string;\n  pipelineRunStatus?: string;\n  disableTooltip?: boolean;\n  selected?: boolean;\n  isSkipped?: boolean;\n  width: number;\n  height: number;\n  isFinallyTask?: boolean;\n}\n\nconst FILTER_ID = 'SvgTaskDropShadowFilterId';\n\nexport const PipelineVisualizationTask: React.FC<PipelineVisualizationTaskProp> = ({\n  pipelineRunName,\n  task,\n  namespace,\n  pipelineRunStatus,\n  disableTooltip,\n  selected,\n  isSkipped,\n  width,\n  height,\n  isFinallyTask,\n}) => {\n  const IS_PIPELINE_OPERATOR_VERSION_1_17_OR_NEWER = useFlag(\n    FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER,\n  );\n  const taskStatus = task.status || {\n    duration: '',\n    reason: ComputedStatus.Idle,\n  };\n  if (\n    pipelineRunStatus === ComputedStatus.Failed ||\n    pipelineRunStatus === ComputedStatus.Cancelled\n  ) {\n    if (\n      task.status?.reason === ComputedStatus.Idle ||\n      task.status?.reason === ComputedStatus.Pending\n    ) {\n      taskStatus.reason = ComputedStatus.Cancelled;\n    }\n  }\n  if (isSkipped) {\n    taskStatus.reason = ComputedStatus.Skipped;\n  }\n\n  const taskComponent = (\n    <TaskComponent\n      pipelineRunName={pipelineRunName}\n      name={task.name || ''}\n      task={task.taskSpec && { data: { spec: task.taskSpec } }}\n      namespace={namespace}\n      status={taskStatus}\n      isPipelineRun={!!pipelineRunStatus}\n      disableVisualizationTooltip={disableTooltip}\n      selected={selected}\n      width={width}\n      height={height}\n      isFinallyTask={isFinallyTask}\n      pipelineTask={task}\n    />\n  );\n\n  if (disableTooltip || task.taskSpec) {\n    return taskComponent;\n  }\n\n  let resources;\n  if (!IS_PIPELINE_OPERATOR_VERSION_1_17_OR_NEWER && task.taskRef.kind === ClusterTaskModel.kind) {\n    resources = [\n      {\n        kind: referenceForModel(ClusterTaskModel),\n        name: task.taskRef.name,\n        prop: 'task',\n      },\n    ];\n  } else {\n    resources = [\n      {\n        kind: referenceForModel(TaskModel),\n        name: task.taskRef.name,\n        namespace,\n        prop: 'task',\n      },\n    ];\n  }\n  return <Firehose resources={resources}>{taskComponent}</Firehose>;\n};\nconst TaskComponent: React.FC<TaskProps> = ({\n  pipelineRunName,\n  namespace,\n  task,\n  status,\n  name,\n  isPipelineRun,\n  disableVisualizationTooltip,\n  selected,\n  width,\n  height,\n  isFinallyTask,\n  pipelineTask,\n}) => {\n  const stepList = task?.data?.spec?.steps || [];\n  const stepStatusList: StepStatus[] = stepList.map((step) => createStepStatus(step, status));\n  const showStatusState: boolean = isPipelineRun && !!status && !!status.reason;\n  const visualName = name || _.get(task, ['metadata', 'name'], '');\n  const nameRef = React.useRef();\n  const pillRef = React.useRef();\n  const path = pipelineRunName\n    ? `${resourcePathFromModel(PipelineRunModel, pipelineRunName, namespace)}/logs/${name}`\n    : undefined;\n  const enableLogLink =\n    status?.reason !== ComputedStatus.Idle &&\n    status?.reason !== ComputedStatus.Pending &&\n    status?.reason !== ComputedStatus.Cancelled &&\n    !!path;\n  const hasWhenExpression = pipelineTask?.when?.length > 0;\n  const hasRunAfter = pipelineTask?.runAfter?.length > 0;\n  const taskStatusColor = status\n    ? getRunStatusColor(status.reason).pftoken.value\n    : getRunStatusColor(ComputedStatus.Cancelled).pftoken.value;\n\n  const [hover, hoverRef] = useHover();\n  const truncatedVisualName = React.useMemo(\n    () => truncateMiddle(visualName, { length: showStatusState ? 11 : 14, truncateEnd: true }),\n    [visualName, showStatusState],\n  );\n\n  const renderVisualName = (\n    <text\n      ref={nameRef}\n      x={showStatusState ? 30 : width / 2}\n      y={height / 2 + 1}\n      className={cx('odc-pipeline-vis-task-text', {\n        'is-text-center': !isPipelineRun,\n        'is-linked': enableLogLink,\n      })}\n    >\n      {truncatedVisualName}\n    </text>\n  );\n\n  let taskPill = (\n    <g ref={hoverRef}>\n      <SvgDropShadowFilter dy={1} id={FILTER_ID} />\n      <rect\n        filter={hover ? createSvgIdUrl(FILTER_ID) : ''}\n        width={width}\n        height={height}\n        rx={15}\n        className={cx('odc-pipeline-vis-task', {\n          'is-selected': selected,\n          'is-linked': enableLogLink,\n        })}\n      />\n      {visualName !== truncatedVisualName && disableVisualizationTooltip ? (\n        <Tooltip triggerRef={nameRef} content={visualName}>\n          {renderVisualName}\n        </Tooltip>\n      ) : (\n        renderVisualName\n      )}\n\n      {showStatusState && (\n        <>\n          <svg\n            width={30}\n            height={30}\n            viewBox=\"-5 -4 20 20\"\n            style={{\n              color: taskStatusColor,\n            }}\n          >\n            <g\n              className={cx({\n                'fa-spin odc-pipeline-vis-task--icon-spin':\n                  status.reason === ComputedStatus.Running,\n                'odc-pipeline-vis-task--icon-stop': status.reason !== ComputedStatus.Running,\n              })}\n            >\n              <StatusIcon status={status.reason} disableSpin />\n            </g>\n          </svg>\n          <SvgTaskStatus steps={stepStatusList} x={30} y={23} width={width / 2 + 15} />\n        </>\n      )}\n    </g>\n  );\n\n  if (!disableVisualizationTooltip) {\n    taskPill = (\n      <>\n        <Tooltip\n          triggerRef={pillRef}\n          position=\"bottom\"\n          enableFlip={false}\n          content={\n            <PipelineVisualizationStepList\n              isSpecOverview={!isPipelineRun}\n              taskName={visualName}\n              steps={stepStatusList}\n              isFinallyTask={isFinallyTask}\n            />\n          }\n        >\n          <g ref={pillRef}>{taskPill}</g>\n        </Tooltip>\n      </>\n    );\n  }\n\n  const taskNode = (\n    <>\n      {hasWhenExpression && (\n        <WhenExpressionDecorator\n          width={WHEN_EXPRESSSION_DIAMOND_SIZE}\n          height={WHEN_EXPRESSSION_DIAMOND_SIZE}\n          appendLine={!hasRunAfter && !isFinallyTask}\n          isPipelineRun={isPipelineRun}\n          status={status.reason}\n          enableTooltip\n          leftOffset={disableVisualizationTooltip && !isFinallyTask ? 3 : 2}\n          isFinallyTask={isFinallyTask}\n        />\n      )}\n      {taskPill}\n    </>\n  );\n  return enableLogLink ? (\n    <Link to={path}>\n      <g data-test={`task ${visualName}`}>{taskNode}</g>\n    </Link>\n  ) : (\n    taskNode\n  );\n};\n\ninterface SvgTaskStatusProps {\n  steps: StepStatus[];\n  x: number;\n  y: number;\n  width: number;\n}\n\nconst SvgTaskStatus: React.FC<SvgTaskStatusProps> = ({ steps, x, y, width }) => {\n  if (steps.length === 0) {\n    return null;\n  }\n  const stepWidth = width / steps.length;\n  const gap = 2;\n  return (\n    <g>\n      {steps.map((step, index) => {\n        return (\n          <rect\n            key={step.name}\n            x={x + stepWidth * index}\n            y={y}\n            width={stepWidth - gap}\n            height={2}\n            fill={getRunStatusColor(step.status).pftoken.value}\n          />\n        );\n      })}\n    </g>\n  );\n};\n","import { Point } from '@patternfly/react-topology';\nimport { DrawDesign, NODE_SEPARATION_HORIZONTAL } from './const';\n\ntype SingleDraw = (p: Point) => string;\ntype DoubleDraw = (p1: Point, p2: Point) => string;\ntype TripleDraw = (p1: Point, p2: Point, p3: Point) => string;\ntype DetermineDirection = (p1: Point, p2: Point) => boolean;\n\nconst join = (...segments: string[]) => segments.filter((seg) => !!seg).join(' ');\n\nconst leftRight: DetermineDirection = (p1, p2) => p1.x < p2.x;\nconst topDown: DetermineDirection = (p1, p2) => p1.y < p2.y;\nconst bottomUp: DetermineDirection = (p1, p2) => p1.y > p2.y;\n\nconst point: SingleDraw = (p) => `${p.x},${p.y}`;\nconst moveTo: SingleDraw = (p) => `M ${point(p)}`;\nconst lineTo: SingleDraw = (p) => `L ${point(p)}`;\nconst quadTo: DoubleDraw = (corner, end) => `Q ${point(corner)} ${point(end)}`;\n\n// TODO: Try to simplify\n// x should not be greater than (NODE_SEPARATION_HORIZONTAL / 2)\nconst CURVE_SIZE = { x: 8, y: 10 };\nconst curve: TripleDraw = (fromPoint, cornerPoint, toPoint) => {\n  const topToBottom = topDown(fromPoint, toPoint);\n  if (topToBottom) {\n    const rightAndDown = leftRight(fromPoint, cornerPoint) && topDown(cornerPoint, toPoint);\n    const downAndRight = topDown(fromPoint, cornerPoint) && leftRight(cornerPoint, toPoint);\n    if (rightAndDown) {\n      return join(\n        lineTo(cornerPoint.clone().translate(-CURVE_SIZE.x, 0)),\n        quadTo(cornerPoint, cornerPoint.clone().translate(0, CURVE_SIZE.y)),\n      );\n    }\n    if (downAndRight) {\n      return join(\n        lineTo(cornerPoint.clone().translate(0, -CURVE_SIZE.y)),\n        quadTo(cornerPoint, cornerPoint.clone().translate(CURVE_SIZE.x, 0)),\n      );\n    }\n  } else {\n    const rightAndUp = leftRight(fromPoint, cornerPoint) && bottomUp(cornerPoint, toPoint);\n    const upAndRight = bottomUp(fromPoint, cornerPoint) && leftRight(cornerPoint, toPoint);\n    if (rightAndUp) {\n      return join(\n        lineTo(cornerPoint.clone().translate(-CURVE_SIZE.x, 0)),\n        quadTo(cornerPoint, cornerPoint.clone().translate(0, -CURVE_SIZE.y)),\n      );\n    }\n    if (upAndRight) {\n      return join(\n        lineTo(cornerPoint.clone().translate(0, CURVE_SIZE.y)),\n        quadTo(cornerPoint, cornerPoint.clone().translate(CURVE_SIZE.x, 0)),\n      );\n    }\n  }\n\n  return '';\n};\n\nexport const straightPath: DoubleDraw = (start, finish) => join(moveTo(start), lineTo(finish));\n\nexport const integralShapePath: DoubleDraw = (start, finish) => {\n  // Integral shape: ∫\n  let firstCurve: string = null;\n  let secondCurve: string = null;\n\n  if (start.y !== finish.y) {\n    const cornerX = Math.floor(start.x + NODE_SEPARATION_HORIZONTAL / 2);\n    const firstCorner = new Point(cornerX, start.y);\n    const secondCorner = new Point(cornerX, finish.y);\n\n    firstCurve = curve(start, firstCorner, secondCorner);\n    secondCurve = curve(firstCorner, secondCorner, finish);\n  }\n\n  return join(moveTo(start), firstCurve, secondCurve, lineTo(finish));\n};\n\nexport const path = (start: Point, finish: Point, drawDesign?: DrawDesign) => {\n  switch (drawDesign) {\n    case DrawDesign.INTEGRAL_SHAPE:\n      return integralShapePath(start, finish);\n    case DrawDesign.STRAIGHT:\n    default:\n      return straightPath(start, finish);\n  }\n};\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ExclamationIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-icon';\nimport { global_danger_color_100 as redColor } from '@patternfly/react-tokens/dist/js/global_danger_color_100';\nimport { BUILDER_NODE_DECORATOR_RADIUS } from './const';\n\nimport './ErrorNodeDecorator.scss';\n\ntype ErrorNodeDecoratorProps = {\n  errorStr: string;\n  x: number;\n  y: number;\n};\n\nconst ErrorNodeDecorator: React.FC<ErrorNodeDecoratorProps> = ({ errorStr, x, y }) => {\n  const iconRef = React.useRef();\n  return (\n    <Tooltip triggerRef={iconRef} content={errorStr}>\n      <g ref={iconRef} className=\"odc-error-node-decorator\" transform={`translate(${x}, ${y})`}>\n        <circle cx={0} cy={0} r={BUILDER_NODE_DECORATOR_RADIUS} fill={redColor.value} />\n        <g transform=\"translate(-5, -6)\">\n          <ExclamationIcon color=\"white\" />\n        </g>\n      </g>\n    </Tooltip>\n  );\n};\n\nexport default ErrorNodeDecorator;\n","import {\n  ComponentFactory,\n  DagreLayout,\n  GraphComponent,\n  LayoutFactory,\n  ModelKind,\n  Graph,\n  TaskEdge,\n  PipelineDagreLayout,\n  withPanZoom,\n  SpacerNode,\n  DefaultTaskGroup,\n} from '@patternfly/react-topology';\nimport BuilderFinallyNode from './BuilderFinallyNode';\nimport BuilderNode from './BuilderNode';\nimport { NodeType, PipelineLayout } from './const';\nimport CustomTaskNode from './CustomTaskNode';\nimport FinallyNode from './FinallyNode';\nimport InvalidTaskListNode from './InvalidTaskListNode';\nimport LoadingNode from './LoadingNode';\nimport PipelineTaskNode from './PipelineTaskNode';\nimport BuilderTaskEdge from './TaskEdge';\nimport TaskListNode from './TaskListNode';\nimport TaskNode from './TaskNode';\nimport { getLayoutData } from './utils';\n\nexport const builderComponentsFactory: ComponentFactory = (kind: ModelKind, type: string) => {\n  switch (kind) {\n    case ModelKind.graph:\n      return GraphComponent;\n    case ModelKind.edge:\n      return BuilderTaskEdge;\n    case ModelKind.node:\n      switch (type) {\n        case NodeType.TASK_NODE:\n          return TaskNode;\n        case NodeType.SPACER_NODE:\n          return SpacerNode;\n        case NodeType.TASK_LIST_NODE:\n          return TaskListNode;\n        case NodeType.INVALID_TASK_LIST_NODE:\n          return InvalidTaskListNode;\n        case NodeType.BUILDER_NODE:\n          return BuilderNode;\n        case NodeType.FINALLY_NODE:\n          return FinallyNode;\n        case NodeType.BUILDER_FINALLY_NODE:\n          return BuilderFinallyNode;\n        case NodeType.LOADING_NODE:\n          return LoadingNode;\n        default:\n          return undefined;\n      }\n    default:\n      return undefined;\n  }\n};\n\nexport const dagreViewerComponentFactory: ComponentFactory = (kind: ModelKind, type: string) => {\n  switch (kind) {\n    case ModelKind.graph:\n      return withPanZoom()(GraphComponent);\n    case ModelKind.edge:\n      return TaskEdge;\n    case ModelKind.node:\n      switch (type) {\n        case NodeType.TASK_NODE:\n        case NodeType.FINALLY_NODE:\n          return PipelineTaskNode;\n        case NodeType.CUSTOM_TASK_NODE:\n          return CustomTaskNode;\n        case NodeType.FINALLY_GROUP:\n          return DefaultTaskGroup;\n        case NodeType.SPACER_NODE:\n          return SpacerNode;\n        default:\n          return undefined;\n      }\n    default:\n      return undefined;\n  }\n};\n\nexport const layoutFactory: LayoutFactory = (type: string, graph: Graph) => {\n  switch (type) {\n    case PipelineLayout.DAGRE_BUILDER:\n    case PipelineLayout.DAGRE_BUILDER_SPACED:\n      return new DagreLayout(graph, {\n        // Hack to get around undesirable defaults\n        // TODO: fix this, it's not ideal but it works for now\n        linkDistance: 0,\n        nodeDistance: 0,\n        groupDistance: 0,\n        collideDistance: 0,\n        simulationSpeed: 0,\n        chargeStrength: 0,\n        allowDrag: false,\n        layoutOnDrag: false,\n        ...getLayoutData(type),\n      });\n    case PipelineLayout.DAGRE_VIEWER:\n      return new PipelineDagreLayout(graph, { nodesep: 25 });\n    default:\n      return undefined;\n  }\n};\n","import * as React from 'react';\nimport { AngleDoubleRightIcon } from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport { CheckCircleIcon } from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport { CircleIcon } from '@patternfly/react-icons/dist/esm/icons/circle-icon';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { HourglassHalfIcon } from '@patternfly/react-icons/dist/esm/icons/hourglass-half-icon';\nimport { SyncAltIcon } from '@patternfly/react-icons/dist/esm/icons/sync-alt-icon';\nimport * as cx from 'classnames';\nimport { YellowExclamationTriangleIcon } from '@console/dynamic-plugin-sdk/src/app/components/status/icons';\nimport { ComputedStatus } from '../../../../types';\nimport { getRunStatusColor } from '../../../../utils/pipeline-augment';\n\ninterface StatusIconProps {\n  status: string;\n  height?: number;\n  width?: number;\n  disableSpin?: boolean;\n}\n\nexport const StatusIcon: React.FC<StatusIconProps> = ({ status, disableSpin, ...props }) => {\n  switch (status) {\n    case ComputedStatus['In Progress']:\n    case ComputedStatus.Running:\n      return <SyncAltIcon {...props} className={cx({ 'fa-spin': !disableSpin })} />;\n\n    case ComputedStatus.Succeeded:\n      return <CheckCircleIcon {...props} />;\n\n    case ComputedStatus.Failed:\n      return <ExclamationCircleIcon {...props} />;\n\n    case ComputedStatus.Idle:\n    case ComputedStatus.Pending:\n      return <HourglassHalfIcon {...props} />;\n\n    case ComputedStatus.Cancelled:\n      return <YellowExclamationTriangleIcon {...props} />;\n\n    case ComputedStatus.Skipped:\n      return <AngleDoubleRightIcon {...props} />;\n\n    default:\n      return <CircleIcon {...props} />;\n  }\n};\n\nexport const ColoredStatusIcon: React.FC<StatusIconProps> = ({ status, ...others }) => {\n  return (\n    <div\n      style={{\n        color: status\n          ? getRunStatusColor(status).pftoken.value\n          : getRunStatusColor(ComputedStatus.Cancelled).pftoken.value,\n      }}\n    >\n      <StatusIcon status={status} {...others} />\n    </div>\n  );\n};\n","export { default as SvgBoxedText } from './SvgBoxedText';\nexport { default as SvgCircledIcon } from './SvgCircledIcon';\nexport { default as SvgDropShadowFilter } from './SvgDropShadowFilter';\nexport { default as SvgResourceIcon, getKindStringAndAbbreviation } from './SvgResourceIcon';\n","import { ComputedStatus } from '../../../../types';\nimport { calculateDuration } from '../../../../utils/pipeline-utils';\n\nenum TerminatedReasons {\n  Completed = 'Completed',\n}\n\nexport type TaskStatusStep = {\n  name: string;\n  running?: { startedAt: string };\n  terminated?: {\n    finishedAt: string;\n    reason: TerminatedReasons;\n    startedAt: string;\n  };\n  waiting?: {};\n};\n\nexport type TaskStatus = {\n  reason: ComputedStatus;\n  duration?: string;\n  steps?: TaskStatusStep[];\n};\n\nconst getMatchingStep = (step, status: TaskStatus): TaskStatusStep => {\n  const statusSteps: TaskStatusStep[] = status.steps || [];\n  return statusSteps.find((statusStep) => {\n    // In rare occasions the status step name is prefixed with `step-`\n    // This is likely a bug but this workaround will be temporary as it's investigated separately\n    return statusStep.name === step.name || statusStep.name === `step-${step.name}`;\n  });\n};\n\nconst getMatchingStepDuration = (matchingStep?: TaskStatusStep) => {\n  if (!matchingStep) return '';\n\n  if (matchingStep.terminated) {\n    return calculateDuration(matchingStep.terminated.startedAt, matchingStep.terminated.finishedAt);\n  }\n\n  if (matchingStep.running) {\n    return calculateDuration(matchingStep.running.startedAt);\n  }\n\n  return '';\n};\n\nexport type StepStatus = {\n  duration: string | null;\n  name: string;\n  status: ComputedStatus;\n};\n\nexport const createStepStatus = (step: { name: string }, status: TaskStatus): StepStatus => {\n  let stepRunStatus: ComputedStatus = ComputedStatus.PipelineNotStarted;\n  let duration: string = null;\n\n  if (!status || !status.reason) {\n    stepRunStatus = ComputedStatus.Cancelled;\n  } else if (status.reason === ComputedStatus['In Progress']) {\n    // In progress, try to get granular statuses\n    const matchingStep: TaskStatusStep = getMatchingStep(step, status);\n\n    if (!matchingStep) {\n      stepRunStatus = ComputedStatus.Pending;\n    } else if (matchingStep.terminated) {\n      stepRunStatus =\n        matchingStep.terminated.reason === TerminatedReasons.Completed\n          ? ComputedStatus.Succeeded\n          : ComputedStatus.Failed;\n      duration = getMatchingStepDuration(matchingStep);\n    } else if (matchingStep.running) {\n      stepRunStatus = ComputedStatus['In Progress'];\n      duration = getMatchingStepDuration(matchingStep);\n    } else if (matchingStep.waiting) {\n      stepRunStatus = ComputedStatus.Pending;\n    }\n  } else {\n    // Not in progress, just use the run status reason\n    stepRunStatus = status.reason;\n\n    duration = getMatchingStepDuration(getMatchingStep(step, status)) || status.duration;\n  }\n\n  return {\n    duration,\n    name: step.name,\n    status: stepRunStatus,\n  };\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { ComputedStatus } from '../../../../types';\nimport { getRunStatusColor } from '../../../../utils/pipeline-augment';\nimport { StepStatus } from './pipeline-step-utils';\nimport { StatusIcon } from './StatusIcon';\n\nimport './PipelineVisualizationStepList.scss';\n\nexport interface PipelineVisualizationStepListProps {\n  isSpecOverview: boolean;\n  taskName: string;\n  steps: StepStatus[];\n  isFinallyTask?: boolean;\n  hideHeader?: boolean;\n}\n\nconst TooltipColoredStatusIcon = ({ status }) => {\n  const size = 18;\n  const sharedProps = {\n    height: size,\n    width: size,\n  };\n\n  const icon = <StatusIcon status={status} {...sharedProps} />;\n\n  if (status === ComputedStatus.Succeeded || status === ComputedStatus.Failed) {\n    // Succeeded and Failed icons have transparent centers shapes - in tooltips, this becomes an undesired black\n    // This will simply wrap the icon and place a white backdrop\n    return (\n      <div style={{ color: getRunStatusColor(status).pftoken.value }}>\n        <svg {...sharedProps}>\n          <circle\n            className=\"odc-pipeline-visualization-step-list__icon-backdrop\"\n            cx={size / 2}\n            cy={size / 2}\n            r={size / 2 - 1}\n          />\n          {icon}\n        </svg>\n      </div>\n    );\n  }\n\n  return icon;\n};\n\nexport const PipelineVisualizationStepList: React.FC<PipelineVisualizationStepListProps> = ({\n  isSpecOverview,\n  taskName,\n  steps,\n  isFinallyTask,\n  hideHeader,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"odc-pipeline-visualization-step-list\">\n      {!hideHeader && (\n        <div className=\"odc-pipeline-visualization-step-list__task-name\">{taskName}</div>\n      )}\n      {isFinallyTask && (\n        <div className=\"odc-pipeline-visualization-step-list__task-type\">\n          {t('pipelines-plugin~Finally task')}\n        </div>\n      )}\n      {steps.map(({ duration, name, status }) => {\n        return (\n          <div\n            className={classNames('odc-pipeline-visualization-step-list__step', {\n              'odc-pipeline-visualization-step-list__step--task-run': !isSpecOverview,\n            })}\n            key={name}\n          >\n            {!isSpecOverview ? (\n              <div className=\"odc-pipeline-visualization-step-list__icon\">\n                <TooltipColoredStatusIcon status={status} />\n              </div>\n            ) : (\n              <span className=\"odc-pipeline-visualization-step-list__bullet\">&bull;</span>\n            )}\n            <div className=\"odc-pipeline-visualization-step-list__name\">{name}</div>\n            {!isSpecOverview && (\n              <div className=\"odc-pipeline-visualization-step-list__duration\">{duration}</div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport i18next from 'i18next';\nimport { truncateMiddle } from '@console/internal/components/utils';\nimport { BUILDER_NODE_ADD_RADIUS } from './const';\nimport InstallingNodeDecorator from './InstallingNodeDecorator';\n\nimport './LoadingTask.scss';\n\ntype LoadingTaskProps = {\n  width: number;\n  height: number;\n  name: string;\n};\n\nconst LoadingTask: React.FC<LoadingTaskProps> = ({ width, height, name }) => {\n  const textRef = React.useRef();\n  const truncatedName = React.useMemo(\n    () => truncateMiddle(name, { length: 10, truncateEnd: true }),\n    [name],\n  );\n  return (\n    <g>\n      <rect width={width} height={height} rx={15} className={'opp-pipeline-vis-loading-node'} />\n      <g>\n        <InstallingNodeDecorator\n          x={0}\n          y={BUILDER_NODE_ADD_RADIUS / 4}\n          content={i18next.t('pipelines-plugin~Installing')}\n        />\n      </g>\n      <Tooltip triggerRef={textRef} content={name}>\n        <text\n          ref={textRef}\n          className=\"opp-pipeline-vis-loading-node__name\"\n          x={width / 2}\n          y={height / 2 + 1}\n        >\n          {truncatedName}\n        </text>\n      </Tooltip>\n    </g>\n  );\n};\n\nexport default LoadingTask;\n","import * as React from 'react';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { PlusIcon } from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport { BUILDER_NODE_ADD_RADIUS } from './const';\n\nimport './PlusNodeDecorator.scss';\n\ntype PlusNodeProps = {\n  x: number;\n  y: number;\n  tooltip: string;\n  tooltipPosition?: TooltipPosition;\n  onClick?: () => void;\n};\n\nconst PlusNodeDecorator: React.FC<PlusNodeProps> = ({\n  x,\n  y,\n  onClick,\n  tooltip,\n  tooltipPosition,\n}) => {\n  const iconRef = React.useRef();\n  return (\n    <Tooltip triggerRef={iconRef} content={tooltip} position={tooltipPosition}>\n      <g\n        className=\"odc-plus-node-decorator\"\n        onClick={onClick}\n        transform={`translate(${x}, ${y})`}\n        ref={iconRef}\n      >\n        <circle\n          cx={0}\n          cy={0}\n          r={BUILDER_NODE_ADD_RADIUS}\n          className=\"odc-plus-node-decorator__circle\"\n        />\n        <g transform=\"translate(-6, -6)\">\n          <PlusIcon color=\"white\" />\n        </g>\n      </g>\n    </Tooltip>\n  );\n};\n\nexport default PlusNodeDecorator;\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { useHover } from '@patternfly/react-topology';\nimport * as cx from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { truncateMiddle } from '@console/internal/components/utils';\nimport { BUILDER_NODE_ADD_RADIUS } from './const';\nimport RemoveNodeDecorator from './RemoveNodeDecorator';\n\nconst TaskList: React.FC<any> = ({\n  width,\n  height,\n  unselectedText,\n  onRemoveTask,\n  onNewTask,\n  onTaskSearch,\n}) => {\n  const { t } = useTranslation();\n  const triggerRef = React.useRef(null);\n  const textRef = React.useRef();\n  const [hover, hoverRef] = useHover();\n\n  const unselectedTaskText = unselectedText || t('pipelines-plugin~Add task');\n\n  const truncatedTaskText = React.useMemo(\n    () =>\n      truncateMiddle(unselectedTaskText, {\n        length: 10,\n        truncateEnd: true,\n      }),\n    [unselectedTaskText],\n  );\n  const renderText = (\n    <text\n      x={width / 2}\n      y={height / 2 + 1}\n      className=\"odc-task-list-node__render-text\"\n      ref={textRef}\n    >\n      {truncatedTaskText}\n    </text>\n  );\n\n  return (\n    <>\n      <g\n        data-test=\"task-list\"\n        ref={hoverRef}\n        className=\"odc-task-list-node__trigger\"\n        onClick={(e) => {\n          e.stopPropagation();\n          onTaskSearch(onNewTask);\n        }}\n      >\n        <rect\n          ref={triggerRef}\n          className={cx('odc-task-list-node__trigger-background')}\n          width={width}\n          height={height}\n        />\n        <g>\n          <rect\n            className={\n              hover\n                ? 'odc-task-list-node__trigger-underline--hover'\n                : 'odc-task-list-node__trigger-underline'\n            }\n            y={height}\n            width={width}\n            height={hover ? 2 : 1}\n          />\n\n          {onRemoveTask && hover && (\n            <g>\n              <RemoveNodeDecorator\n                removeCallback={onRemoveTask}\n                x={120}\n                y={BUILDER_NODE_ADD_RADIUS / 4}\n                content={t('pipelines-plugin~Delete task')}\n              />\n            </g>\n          )}\n          {unselectedTaskText !== truncatedTaskText ? (\n            <Tooltip content={unselectedTaskText} triggerRef={textRef}>\n              {renderText}\n            </Tooltip>\n          ) : (\n            renderText\n          )}\n        </g>\n      </g>\n    </>\n  );\n};\nexport default TaskList;\n","import * as React from 'react';\nimport { observer, Node, NodeModel } from '@patternfly/react-topology';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { PipelineVisualizationTask } from '../detail-page-tabs/pipeline-details/PipelineVisualizationTask';\nimport { TaskNodeModelData } from './types';\n\ntype TaskNodeProps = {\n  element: Node<NodeModel, TaskNodeModelData>;\n  disableTooltip?: boolean;\n};\n\nconst TaskNode: React.FC<TaskNodeProps> = ({ element, disableTooltip }) => {\n  const { height, width } = element.getBounds();\n  const { pipeline, pipelineRun, task, selected } = element.getData();\n  const isTaskSkipped = pipelineRun?.status?.skippedTasks?.some((t) => t.name === task.name);\n\n  return (\n    <PipelineVisualizationTask\n      pipelineRunName={pipelineRun?.metadata?.name}\n      task={task}\n      pipelineRunStatus={pipelineRun && pipelineRunFilterReducer(pipelineRun)}\n      namespace={pipeline?.metadata?.namespace}\n      disableTooltip={disableTooltip}\n      selected={selected}\n      width={width}\n      height={height}\n      isSkipped={isTaskSkipped}\n    />\n  );\n};\n\nexport default observer(TaskNode);\n","import * as React from 'react';\nimport { observer, Node, NodeModel } from '@patternfly/react-topology';\nimport TaskList from './TaskList';\nimport { TaskListNodeModelData } from './types';\n\nimport './TaskListNode.scss';\n\ntype TaskListNodeProps = {\n  element: Node<NodeModel, TaskListNodeModelData>;\n  unselectedText?: string;\n};\n\nconst TaskListNode: React.FC<TaskListNodeProps> = ({ element, unselectedText }) => {\n  const { height = 30, width = 120 } = {};\n  const { onNewTask = () => {}, onTaskSearch = () => {}, onRemoveTask = () => {} } =\n    element.getData() || {};\n\n  return (\n    <TaskList\n      width={width}\n      height={height}\n      unselectedText={unselectedText}\n      onRemoveTask={onRemoveTask}\n      onNewTask={onNewTask}\n      onTaskSearch={onTaskSearch}\n    />\n  );\n};\n\nexport default observer(TaskListNode);\n","import * as React from 'react';\nimport {\n  Text,\n  TextInputTypes,\n  FormGroup,\n  ClipboardCopy,\n  InputGroup,\n  ExpandableSection,\n  TextVariants,\n  Button,\n  Tooltip,\n  InputGroupItem,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n} from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport { Base64 } from 'js-base64';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { generateSecret } from '@console/dev-console/src/components/import/import-submit-utils';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { GitProvider } from '@console/git-service/src';\nimport { ExternalLink, FirehoseResource } from '@console/internal/components/utils';\nimport { SecretModel } from '@console/internal/models';\nimport { ConfigMapKind } from '@console/internal/module/k8s/types';\nimport {\n  RadioGroupField,\n  InputField,\n  ResourceDropdownField,\n  useActiveNamespace,\n} from '@console/shared/src';\nimport { AccessTokenDocLinks, WebhookDocLinks } from '../consts';\nimport PermissionsSection from './PermissionsSection';\n\ntype WebhoookSectionProps = {\n  pac: ConfigMapKind;\n  formContextField?: string;\n};\n\nconst WebhookSection: React.FC<WebhoookSectionProps> = ({ pac, formContextField }) => {\n  const [namespace] = useActiveNamespace();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const { gitProvider, webhook } = _.get(values, formContextField) || values;\n  const [controllerUrl, setControllerUrl] = React.useState('');\n  const [webhookSecret, setWebhookSecret] = React.useState('');\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    const ctlUrl = pac?.data?.['controller-url'];\n    if (ctlUrl) {\n      setControllerUrl(ctlUrl);\n      setFieldValue(`${fieldPrefix}webhook.url`, ctlUrl);\n    }\n  }, [fieldPrefix, pac, setFieldValue]);\n  const autocompleteFilter = (text: string, item: any): boolean => fuzzy(text, item?.props?.name);\n  const resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: SecretModel.kind,\n      prop: SecretModel.id,\n      namespace,\n    },\n  ];\n\n  const generateWebhookSecret = () => {\n    setWebhookSecret(generateSecret());\n  };\n\n  const getPermssionSectionHeading = (git: GitProvider) => {\n    switch (git) {\n      case GitProvider.GITHUB:\n        return t('pipelines-plugin~See GitHub events');\n      case GitProvider.GITLAB:\n        return t('pipelines-plugin~See Gitlab events');\n      case GitProvider.BITBUCKET:\n        return t('pipelines-plugin~See BitBucket events');\n      default:\n        return t('pipelines-plugin~See Git events');\n    }\n  };\n\n  const HelpText = (): React.ReactElement => {\n    let helpText: React.ReactNode;\n    switch (gitProvider) {\n      case GitProvider.GITHUB:\n        helpText = (\n          <Trans t={t} ns=\"pipelines-plugin\">\n            Use your GitHub Personal token. Use this{' '}\n            <a\n              href={AccessTokenDocLinks[GitProvider.GITHUB]}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              link\n            </a>{' '}\n            to create a <b>classic</b> token with <b>repo</b> & <b>admin:repo_hook</b> scopes and\n            give your token an expiration, i.e 30d.\n          </Trans>\n        );\n        break;\n\n      case GitProvider.GITLAB:\n        helpText = (\n          <Trans t={t} ns=\"pipelines-plugin\">\n            Use your Gitlab Personal access token. Use this{' '}\n            <a\n              href={AccessTokenDocLinks[GitProvider.GITLAB]}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              link\n            </a>{' '}\n            to create a token with <b>api</b> scope. Select the role as <b>Maintainer/Owner</b>.\n            Give your token an expiration i.e 30d.\n          </Trans>\n        );\n        break;\n\n      case GitProvider.BITBUCKET:\n        helpText = (\n          <Trans t={t} ns=\"pipelines-plugin\">\n            Use your Bitbucket App password. Use this{' '}\n            <a\n              href={AccessTokenDocLinks[GitProvider.BITBUCKET]}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              link\n            </a>{' '}\n            to create a token with <b>Read and Write </b>scopes in{' '}\n            <b>Account, Workspace membership, Projects, Issues, Pull requests and Webhooks</b>.\n          </Trans>\n        );\n        break;\n\n      default:\n        helpText = (\n          <Trans t={t} ns=\"pipelines-plugin\">\n            Use your Git Personal token. Create a token with repo, public_repo & admin:repo_hook\n            scopes and give your token an expiration, i.e 30d.\n          </Trans>\n        );\n    }\n\n    return <div data-test={`${values.gitProvider}-helptext`}>{helpText}</div>;\n  };\n\n  return (\n    <FormSection fullWidth={!fieldPrefix} extraMargin>\n      {gitProvider && gitProvider === GitProvider.BITBUCKET ? (\n        <InputField\n          label={t('pipelines-plugin~Bitbucket username')}\n          name={`${fieldPrefix}webhook.user`}\n          type={TextInputTypes.text}\n          required\n        />\n      ) : null}\n      <RadioGroupField\n        name={`${fieldPrefix}webhook.method`}\n        label={t('pipelines-plugin~Secret')}\n        labelIcon={\n          <Tooltip\n            position=\"right\"\n            content={\n              <p>\n                {t(\n                  'pipelines-plugin~The secret is required to set the Build status and to attach the webhook to the Git repository.',\n                )}\n              </p>\n            }\n          >\n            <HelpIcon />\n          </Tooltip>\n        }\n        required\n        options={[\n          {\n            value: 'token',\n            label: t('pipelines-plugin~Git access token'),\n            activeChildren: (\n              <InputField\n                name={`${fieldPrefix}webhook.token`}\n                type={TextInputTypes.text}\n                helpText={<HelpText />}\n                required\n              />\n            ),\n          },\n          {\n            value: 'secret',\n            label: t('pipelines-plugin~Git access token secret'),\n\n            activeChildren: (\n              <ResourceDropdownField\n                helpText={t(\n                  'pipelines-plugin~Secret with the Git access token for pulling pipeline and tasks from your Git repository.',\n                )}\n                name={`${fieldPrefix}webhook.secretRef`}\n                resources={resources}\n                dataSelector={['metadata', 'name']}\n                placeholder={t('pipelines-plugin~Select a secret')}\n                autocompleteFilter={autocompleteFilter}\n                fullWidth\n                showBadge\n                onChange={(k, v, res) => {\n                  if (res && res.data) {\n                    setFieldValue(`${fieldPrefix}webhook.secretObj`, res);\n                    const secret = res?.data['webhook.secret'];\n                    if (secret) {\n                      setWebhookSecret(Base64.decode(secret));\n                    }\n                  }\n                }}\n              />\n            ),\n          },\n        ]}\n      />\n      {webhook?.url && (\n        <FormGroup fieldId=\"test\" label={t('pipelines-plugin~Webhook URL')}>\n          <ClipboardCopy\n            isReadOnly\n            name={`${fieldPrefix}webhook.url`}\n            hoverTip=\"Copy\"\n            clickTip=\"Copied\"\n            style={{ flex: '1' }}\n          >\n            {controllerUrl}\n          </ClipboardCopy>\n\n          <FormHelperText>\n            <HelperText>\n              <HelperTextItem>\n                {t(\n                  'pipelines-plugin~We have detected a URL that can be used to configure the webhook. It will be created and attached to the Git repository.',\n                )}\n              </HelperTextItem>\n            </HelperText>\n          </FormHelperText>\n        </FormGroup>\n      )}\n\n      {gitProvider && gitProvider !== GitProvider.BITBUCKET ? (\n        <FormGroup\n          fieldId={'webhook-secret-clipboard'}\n          label={t('pipelines-plugin~Webhook secret')}\n        >\n          <InputGroup style={{ display: 'flex' }}>\n            <InputGroupItem>\n              <ClipboardCopy\n                name={`${fieldPrefix}webhook.secret`}\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                style={{ flex: '1' }}\n                onChange={(_event, v) => {\n                  setFieldValue(`${fieldPrefix}webhook.secret`, v);\n                }}\n              >\n                {webhookSecret}\n              </ClipboardCopy>\n            </InputGroupItem>\n            <InputGroupItem>\n              <Button data-test=\"generate-secret\" variant=\"control\" onClick={generateWebhookSecret}>\n                {t('pipelines-plugin~Generate')}\n              </Button>\n            </InputGroupItem>\n          </InputGroup>\n        </FormGroup>\n      ) : null}\n\n      {gitProvider && gitProvider !== GitProvider.UNSURE ? (\n        <>\n          <ExpandableSection toggleText={getPermssionSectionHeading(gitProvider)}>\n            <FormGroup\n              label={t('pipelines-plugin~Events triggering the webhook: ')}\n              fieldId=\"repo-permissions\"\n            >\n              <Text component={TextVariants.small}>\n                <PermissionsSection formContextField={formContextField} />\n              </Text>\n            </FormGroup>\n          </ExpandableSection>\n\n          <ExternalLink\n            text={t('pipelines-plugin~Read more about setting up webhook')}\n            href={WebhookDocLinks[gitProvider]}\n          />\n        </>\n      ) : null}\n    </FormSection>\n  );\n};\n\nexport default WebhookSection;\n","import * as React from 'react';\nimport { Alert, TextInputTypes, ValidatedOptions } from '@patternfly/react-core';\nimport { useFormikContext, FormikErrors, FormikTouched } from 'formik';\nimport { isEmpty } from 'lodash';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useAccessReview } from '@console/dynamic-plugin-sdk/src';\nimport { RepoStatus, ImportStrategy, getGitService, GitProvider } from '@console/git-service';\nimport { DetectedBuildType } from '@console/git-service/src/utils/build-tool-type-detector';\nimport { detectImportStrategies } from '@console/git-service/src/utils/import-strategy-detector';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport {\n  FLAG_KNATIVE_SERVING_SERVICE,\n  ServerlessBuildStrategyType,\n  ServiceModel as ksvcModel,\n} from '@console/knative-plugin';\nimport { InputField, useFormikValidationFix, useDebounceCallback, useFlag } from '@console/shared';\nimport { UNASSIGNED_KEY, CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { isGitImportSource } from '../../../types/samples';\nimport {\n  getSampleRepo,\n  getSampleRef,\n  getSampleContextDir,\n  NormalizedBuilderImages,\n} from '../../../utils/imagestream-utils';\nimport { getSample, getGitImportSample } from '../../../utils/samples';\nimport { GitData, DetectedStrategyFormData } from '../import-types';\nimport { detectGitRepoName, detectGitType } from '../import-validation-utils';\nimport FormSection from '../section/FormSection';\nimport AdvancedGitOptions from './AdvancedGitOptions';\nimport GitTypeSelector from './GitTypeSelector';\nimport SampleRepo from './SampleRepo';\n\nexport type GitSectionFormData = {\n  formType: string;\n  name: string;\n  application: {\n    selected: string;\n    selectedKey: string;\n    name: string;\n    isInContext: any;\n  };\n  image: {\n    selected: any;\n    selectedKey: string;\n    tagObj: string;\n    recommended: string;\n    couldNotRecommend: boolean;\n  };\n  git: GitData;\n  devfile?: {\n    devfilePath: string;\n    devfileSourceUrl: string;\n    devfileContent?: string;\n  };\n  docker?: {\n    dockerfilePath: string;\n  };\n  build: {\n    strategy: BuildStrategyType;\n  };\n  project: {\n    name: string;\n  };\n  import?: {\n    recommendedStrategy?: DetectedStrategyFormData;\n  };\n};\n\nexport interface GitSectionProps {\n  title?: React.ReactNode;\n  formContextField?: string;\n  builderImages?: NormalizedBuilderImages;\n  defaultSample?: { url: string; ref?: string; dir?: string };\n  showSample?: boolean;\n  formType?: string;\n  importType?: string;\n  imageStreamName?: string;\n  autoFocus?: boolean;\n}\n\nconst GitSection: React.FC<GitSectionProps> = ({\n  title,\n  formContextField,\n  builderImages,\n  defaultSample,\n  showSample = !!defaultSample,\n  formType,\n  importType,\n  imageStreamName,\n  autoFocus = true,\n}) => {\n  const { t } = useTranslation();\n  const inputRef = React.useRef<HTMLInputElement>();\n\n  const {\n    dirty,\n    isSubmitting,\n    values: formikValues,\n    touched: formikTouched,\n    errors: formikErrors,\n    status,\n    setFieldValue: formikSetFieldValue,\n    setFieldTouched: formikSetFieldTouched,\n  } = useFormikContext<GitSectionFormData>();\n\n  const isKnativeServingAvailable = useFlag(FLAG_KNATIVE_SERVING_SERVICE);\n  const [canCreateKnativeService, canCreateKnativeServiceLoading] = useAccessReview({\n    group: ksvcModel.apiGroup,\n    resource: ksvcModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const setFieldValue = React.useCallback(\n    (key: string, value: string | boolean | object, shouldValidate?: boolean) => {\n      formikSetFieldValue(`${fieldPrefix}${key}` as any, value, shouldValidate);\n    },\n    [fieldPrefix, formikSetFieldValue],\n  );\n  const setFieldTouched = React.useCallback(\n    (key: string, touched: boolean, shouldValidate?: boolean) => {\n      formikSetFieldTouched(`${fieldPrefix}${key}` as any, touched, shouldValidate);\n    },\n    [fieldPrefix, formikSetFieldTouched],\n  );\n\n  const values: GitSectionFormData = formContextField\n    ? _.get(formikValues, formContextField)\n    : formikValues;\n  const touched: FormikTouched<GitSectionFormData> = formContextField\n    ? _.get(formikTouched, formContextField, {})\n    : formikTouched;\n  const errors: FormikErrors<GitSectionFormData> = formContextField\n    ? _.get(formikErrors, formContextField, {})\n    : formikErrors;\n  const formReloadCount: number = _.get(formikValues, 'formReloadCount');\n\n  const { url: defaultSampleURL, dir: defaultSampleDir, ref: defaultSampleRef } =\n    defaultSample || {};\n  const defaultSampleTagObj = React.useMemo(\n    () =>\n      defaultSampleURL\n        ? {\n            annotations: {\n              sampleRepo: defaultSampleURL,\n              sampleContextDir: defaultSampleDir ?? './',\n              sampleRef: defaultSampleRef ?? '',\n            },\n          }\n        : null,\n    [defaultSampleURL, defaultSampleDir, defaultSampleRef],\n  );\n  const imageStreamTag = isEmpty(values.image.tagObj) ? defaultSampleTagObj : values.image.tagObj;\n  const imageStreamTagSampleRepo = showSample && getSampleRepo(imageStreamTag);\n  const {\n    name: nameTouched,\n    application: { name: applicationNameTouched } = {},\n    image: { selected: imageSelectorTouched } = {},\n    git: { dir: gitDirTouched, type: gitTypeTouched } = {},\n  } = touched;\n  const { git: { url: gitUrlError } = {} } = errors;\n\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const [repoStatus, setRepoStatus] = React.useState<RepoStatus>();\n\n  const handleBuilderImageRecommendation = React.useCallback(\n    async (detectedBuildTypes: DetectedBuildType[]) => {\n      setFieldValue('image.isRecommending', false);\n      if (gitUrlError) {\n        setFieldValue('image.recommended', '');\n        setFieldValue('image.couldNotRecommend', true);\n        return;\n      }\n      const recommendedBuildType =\n        builderImages &&\n        detectedBuildTypes?.find(\n          ({ type: recommended }) => recommended && builderImages.hasOwnProperty(recommended),\n        );\n      if (recommendedBuildType && recommendedBuildType.type) {\n        setFieldValue('image.couldNotRecommend', false);\n        setFieldValue('image.recommended', recommendedBuildType.type);\n      } else {\n        setFieldValue('image.couldNotRecommend', true);\n        setFieldValue('image.recommended', '');\n      }\n    },\n    [builderImages, gitUrlError, setFieldValue],\n  );\n\n  const handleDevfileStrategyDetection = React.useCallback(\n    async (devfilePath: string, gitType: GitProvider) => {\n      if (gitUrlError) {\n        setFieldValue('devfile.devfileContent', null);\n        setFieldValue('devfile.devfileHasError', true);\n        return;\n      }\n      if (importType !== 'devfile' && !values.devfile?.devfileSourceUrl) {\n        setFieldValue('devfile.devfilePath', devfilePath);\n        setFieldValue('docker.dockerfilePath', 'Dockerfile');\n        const gitService = getGitService(\n          values.git.url,\n          gitType,\n          values.git.ref,\n          values.git.dir,\n          values.git.secretResource,\n          devfilePath,\n        );\n        const devfileContents = gitService && (await gitService.getDevfileContent());\n        if (!devfileContents) {\n          setFieldValue('devfile.devfileContent', null);\n          setFieldValue('devfile.devfileHasError', true);\n        } else {\n          setFieldValue('devfile.devfileContent', devfileContents);\n          setFieldValue('devfile.devfileHasError', false);\n        }\n      }\n    },\n    [\n      gitUrlError,\n      importType,\n      setFieldValue,\n      values.devfile,\n      values.git.dir,\n      values.git.ref,\n      values.git.secretResource,\n      values.git.url,\n    ],\n  );\n\n  const handleGitUrlChange = React.useCallback(\n    async (url: string, ref: string, dir: string) => {\n      if (isKnativeServingAvailable && canCreateKnativeServiceLoading) return;\n      if (isSubmitting || status?.submitError) return;\n      setValidated(ValidatedOptions.default);\n      setFieldValue('git.validated', ValidatedOptions.default);\n      setFieldValue('git.isUrlValidating', true);\n      if (gitUrlError) {\n        // Reset git type field when url is not valid or empty so that when new url valid is added, we run git type detection again.\n        // Don't do anything else if URL is not valid.\n        setFieldValue('git.showGitType', false);\n        setFieldTouched('git.type', false);\n        setFieldValue('git.isUrlValidating', false);\n        return;\n      }\n      const detectedGitType = detectGitType(url);\n      const isUnsureDetectedGitType = detectedGitType === GitProvider.UNSURE;\n      const gitRepoName = formType !== 'sample' && detectGitRepoName(url);\n\n      // Updated detectedType only\n      if (detectedGitType !== values.git.detectedType) {\n        setFieldValue('git.detectedType', detectedGitType);\n      }\n      if (isUnsureDetectedGitType && !values.git.showGitType) {\n        setFieldValue('git.showGitType', true);\n      }\n\n      if (!isUnsureDetectedGitType && values.git.showGitType) {\n        setFieldValue('git.showGitType', false);\n      }\n\n      const gitType =\n        isUnsureDetectedGitType && values.git.showGitType ? values.git.type : detectedGitType;\n\n      if (gitType !== values.git.type) {\n        setFieldTouched('git.type', false, false);\n        setFieldValue('git.type', gitType);\n      }\n\n      const gitService = getGitService(\n        url,\n        gitType,\n        ref,\n        dir,\n        values.git.secretResource,\n        values.devfile?.devfilePath,\n        values.docker?.dockerfilePath,\n      );\n\n      const importStrategyData = await detectImportStrategies(\n        url,\n        gitService,\n        isKnativeServingAvailable && canCreateKnativeService,\n      );\n\n      const {\n        loaded,\n        loadError,\n        repositoryStatus,\n        strategies: importStrategies,\n      } = importStrategyData;\n\n      setRepoStatus(repositoryStatus);\n\n      if (repositoryStatus !== RepoStatus.Reachable) {\n        setValidated(ValidatedOptions.warning);\n        setFieldValue('git.validated', ValidatedOptions.warning);\n        setFieldValue('git.isUrlValidating', false);\n        setFieldValue('import', {\n          loaded: false,\n          loadError: null,\n          strategies: [],\n          selectedStrategy: {\n            name: 'Builder Image',\n            type: ImportStrategy.S2I,\n            priority: 0,\n            detectedFiles: [],\n          },\n          recommendedStrategy: null,\n          showEditImportStrategy: true,\n        });\n        setFieldValue('build.strategy', BuildStrategyType.Source);\n        return;\n      }\n\n      gitRepoName && !nameTouched && !values.name && setFieldValue('name', gitRepoName);\n      gitRepoName &&\n        values.formType !== 'edit' &&\n        !values.application.name &&\n        values.application.selectedKey !== UNASSIGNED_KEY &&\n        setFieldValue('application.name', `${gitRepoName}-app`);\n\n      if (importType === 'devfile' || imageStreamName || values.formType === 'edit') {\n        setValidated(ValidatedOptions.success);\n        setFieldValue('git.validated', ValidatedOptions.success);\n        setFieldValue('git.isUrlValidating', false);\n        importType === 'devfile' && setFieldValue('build.strategy', BuildStrategyType.Devfile);\n        importType === 'devfile' &&\n          !values.devfile?.devfileContent &&\n          setFieldValue('import.recommendedStrategy', importStrategies[0]);\n        values.formType === 'edit' &&\n          values.build.strategy === BuildStrategyType.Source &&\n          handleBuilderImageRecommendation(\n            importStrategies?.find((s) => s.type === ImportStrategy.S2I)?.detectedCustomData,\n          );\n        return;\n      }\n\n      setFieldValue('import.loaded', loaded);\n      setFieldValue('import.loadError', loadError);\n      setFieldValue('import.strategies', importStrategies);\n      if (importStrategies.length > 0) {\n        setFieldValue('import.showEditImportStrategy', false);\n        setFieldValue('import.selectedStrategy', importStrategies[0]);\n        setFieldValue('import.recommendedStrategy', importStrategies[0]);\n      } else {\n        setFieldValue('import.selectedStrategy', {\n          name: 'Devfile',\n          type: ImportStrategy.DEVFILE,\n          priority: 2,\n          detectedFiles: [],\n        });\n        setFieldValue('import.recommendedStrategy', null);\n        setFieldValue('import.showEditImportStrategy', true);\n      }\n      setFieldValue('import.strategyChanged', false);\n\n      if (importStrategies.length > 0) {\n        switch (importStrategies[0].type) {\n          case ImportStrategy.S2I: {\n            setFieldValue('build.strategy', BuildStrategyType.Source);\n            if (builderImages) {\n              setFieldValue('image.isRecommending', true);\n              handleBuilderImageRecommendation(importStrategies[0].detectedCustomData);\n            }\n            break;\n          }\n          case ImportStrategy.DEVFILE: {\n            setFieldValue('build.strategy', BuildStrategyType.Devfile);\n            handleDevfileStrategyDetection(importStrategies[0].detectedFiles[0], gitType);\n            break;\n          }\n          case ImportStrategy.DOCKERFILE: {\n            setFieldValue('build.strategy', BuildStrategyType.Docker);\n            setFieldValue('docker.dockerfilePath', importStrategies[0].detectedFiles[0]);\n            setFieldValue('docker.dockerfileHasError', false);\n            break;\n          }\n          case ImportStrategy.SERVERLESS_FUNCTION: {\n            setFieldValue('build.strategy', ServerlessBuildStrategyType.ServerlessFunction);\n            break;\n          }\n          default:\n        }\n      }\n\n      setValidated(ValidatedOptions.success);\n      setFieldValue('git.validated', ValidatedOptions.success);\n      setFieldValue('git.isUrlValidating', false);\n    },\n    [\n      isSubmitting,\n      status,\n      setFieldValue,\n      gitUrlError,\n      formType,\n      values.git.detectedType,\n      values.git.showGitType,\n      values.git.type,\n      values.git.secretResource,\n      values.devfile,\n      values.docker,\n      values.name,\n      values.formType,\n      values.application.name,\n      values.application.selectedKey,\n      values.build.strategy,\n      isKnativeServingAvailable,\n      canCreateKnativeService,\n      canCreateKnativeServiceLoading,\n      nameTouched,\n      importType,\n      imageStreamName,\n      setFieldTouched,\n      handleBuilderImageRecommendation,\n      builderImages,\n      handleDevfileStrategyDetection,\n    ],\n  );\n\n  const debouncedHandleGitUrlChange = useDebounceCallback(handleGitUrlChange);\n\n  const fillImageStreamTagSample = React.useCallback(() => {\n    if (isKnativeServingAvailable && canCreateKnativeServiceLoading) return;\n    const url = imageStreamTagSampleRepo;\n    const ref = getSampleRef(imageStreamTag);\n    const dir = getSampleContextDir(imageStreamTag);\n    setFieldValue('git.url', imageStreamTagSampleRepo, false);\n    setFieldValue('git.ref', ref, false);\n    setFieldValue('git.dir', dir, false);\n    setFieldTouched('git.url', true, true);\n    debouncedHandleGitUrlChange(url, ref, dir);\n  }, [\n    debouncedHandleGitUrlChange,\n    imageStreamTagSampleRepo,\n    setFieldTouched,\n    setFieldValue,\n    imageStreamTag,\n    isKnativeServingAvailable,\n    canCreateKnativeServiceLoading,\n  ]);\n\n  React.useEffect(() => {\n    (!dirty || gitDirTouched || gitTypeTouched || formReloadCount || values.git.secretResource) &&\n      values.git.url &&\n      debouncedHandleGitUrlChange(values.git.url, values.git.ref, values.git.dir);\n  }, [\n    dirty,\n    isSubmitting,\n    gitDirTouched,\n    formReloadCount,\n    debouncedHandleGitUrlChange,\n    values.git.url,\n    values.git.ref,\n    values.git.dir,\n    values.git.type,\n    values.git.secretResource,\n    gitTypeTouched,\n  ]);\n\n  const helpText = React.useMemo(() => {\n    if (values.git.isUrlValidating) {\n      return `${t('devconsole~Validating')}...`;\n    }\n    if (validated === ValidatedOptions.success) {\n      return t('devconsole~Validated');\n    }\n    if (validated === ValidatedOptions.warning) {\n      switch (repoStatus) {\n        case RepoStatus.RateLimitExceeded: {\n          return t('devconsole~Rate limit exceeded');\n        }\n        case RepoStatus.GitTypeNotDetected: {\n          return t(\n            'devconsole~URL is valid but a git type could not be identified. Please select a git type from the options below',\n          );\n        }\n        case RepoStatus.PrivateRepo: {\n          return t(\n            'devconsole~If this is a private repository, enter a source Secret in advanced Git options',\n          );\n        }\n        case RepoStatus.ResourceNotFound: {\n          return t('devconsole~Requested repository does not exist');\n        }\n        case RepoStatus.InvalidGitTypeSelected: {\n          return t(\n            'devconsole~The selected git type might not be valid or the repository is private. Please try selecting another git type or enter a source Secret in advanced Git options',\n          );\n        }\n        /* Special case for Gitea as it throws 404 for all kinds of negatives */\n        case RepoStatus.GiteaRepoUnreachable: {\n          return t(\n            'devconsole~The Gitea repository is unreachable. The repository might be private or does not exist',\n          );\n        }\n        default: {\n          return t('devconsole~URL is valid but cannot be reached');\n        }\n      }\n    }\n    return t('devconsole~Repository URL to build and deploy your code from');\n  }, [t, values.git.isUrlValidating, validated, repoStatus]);\n\n  const resetFields = React.useCallback(() => {\n    if (!imageSelectorTouched) {\n      setFieldValue('image.selected', '');\n      setFieldValue('image.tag', '');\n    }\n    values.image.recommended && setFieldValue('image.recommended', '');\n    values.image.couldNotRecommend && setFieldValue('image.couldNotRecommend', false);\n    if (values.formType === 'edit') {\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n        values.application.selectedKey === CREATE_APPLICATION_KEY &&\n        !applicationNameTouched &&\n        setFieldValue('application.name', '');\n      return;\n    }\n    !nameTouched && setFieldValue('name', '');\n    !values.application.isInContext &&\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n      !applicationNameTouched &&\n      setFieldValue('application.name', '');\n  }, [\n    setFieldValue,\n    values.formType,\n    values.image.recommended,\n    values.image.couldNotRecommend,\n    values.application.selectedKey,\n    values.application.isInContext,\n    applicationNameTouched,\n    imageSelectorTouched,\n    nameTouched,\n  ]);\n\n  useFormikValidationFix(values.git.url);\n\n  /**\n   * Automatically focus the git repository field and prefill it with different\n   * sample types.\n   *\n   * 1. ConsoleSample\n   * 2. ImageStream samples\n   */\n  React.useEffect(() => {\n    // Skip handling until Knative Service status is unknown!\n    if (canCreateKnativeServiceLoading) return;\n\n    if (autoFocus) {\n      inputRef.current?.focus();\n    }\n\n    const { sampleName, repository: sampleRepository } = getGitImportSample();\n    if (sampleRepository?.url) {\n      const name = detectGitRepoName(sampleRepository.url);\n      setFieldValue('name', name, false);\n      setFieldValue('application.name', `${name}-app`, false);\n      setFieldValue('git.url', sampleRepository.url, false);\n      if (sampleRepository.revision) {\n        setFieldValue('git.ref', sampleRepository.revision, false);\n      }\n      if (sampleRepository.contextDir) {\n        setFieldValue('git.dir', sampleRepository.contextDir, false);\n      }\n      setFieldTouched('git.url', true, true);\n      debouncedHandleGitUrlChange(\n        sampleRepository.url,\n        sampleRepository.revision,\n        sampleRepository.contextDir,\n      );\n    }\n    if (sampleName) {\n      getSample(sampleName)\n        .then((sample) => {\n          if (isGitImportSource(sample.spec.source)) {\n            const { gitImport } = sample.spec.source;\n            if (!sampleRepository?.url) {\n              const name = detectGitRepoName(sampleRepository.url);\n              setFieldValue('name', name, false);\n              setFieldValue('application.name', `${name}-app`, false);\n              setFieldValue('git.url', gitImport.repository.url, false);\n              if (sampleRepository.revision) {\n                setFieldValue('git.ref', sampleRepository.revision, false);\n              }\n              if (sampleRepository.contextDir) {\n                setFieldValue('git.dir', sampleRepository.contextDir, false);\n              }\n              setFieldTouched('git.url', true, true);\n              debouncedHandleGitUrlChange(\n                gitImport.repository.url,\n                gitImport.repository.revision,\n                gitImport.repository.contextDir,\n              );\n            }\n            if (gitImport?.service?.targetPort && gitImport?.service?.targetPort !== 8080) {\n              setFieldValue(\n                'route.unknownTargetPort',\n                gitImport.service.targetPort.toString(),\n                false,\n              );\n            }\n            // handleSearch(containerImport.image);\n          } else {\n            // eslint-disable-next-line no-console\n            console.error(\n              `Unsupported ConsoleSample \"${sampleName}\" source type ${sample.spec?.source?.type}`,\n            );\n          }\n        })\n        .catch((error) => {\n          // eslint-disable-next-line no-console\n          console.error(`Error while loading ConsoleSample \"${sampleName}\":`, error);\n        });\n    } else if (formType === 'sample' && imageStreamTagSampleRepo) {\n      fillImageStreamTagSample();\n    }\n\n    // Disable deps to load the samples only once when the component is loaded.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [canCreateKnativeServiceLoading]);\n\n  return (\n    <FormSection title={title ?? t('devconsole~Git')}>\n      <InputField\n        ref={inputRef}\n        type={TextInputTypes.text}\n        name={`${fieldPrefix}git.url`}\n        label={t('devconsole~Git Repo URL')}\n        helpText={helpText}\n        helpTextInvalid={helpText}\n        validated={validated}\n        onBlur={(e: React.FocusEvent<HTMLInputElement>) => {\n          const trimmedURL = e.target.value.trim();\n          if (e.target.value !== trimmedURL) {\n            setFieldValue('git.url', trimmedURL);\n            debouncedHandleGitUrlChange(trimmedURL, values.git.ref, values.git.dir);\n          }\n        }}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          resetFields();\n          debouncedHandleGitUrlChange(e.target.value.trim(), values.git.ref, values.git.dir);\n        }}\n        data-test-id=\"git-form-input-url\"\n        required\n        isDisabled={formType === 'sample' && imageStreamTagSampleRepo}\n      />\n      {formType !== 'sample' && imageStreamTagSampleRepo && (\n        <SampleRepo onClick={fillImageStreamTagSample} />\n      )}\n      {values.git.showGitType && (\n        <>\n          <GitTypeSelector fieldPrefix={fieldPrefix} />\n          {values.git.type === GitProvider.UNSURE && (\n            <Alert isInline variant=\"info\" title={t('devconsole~Defaulting Git type to other')}>\n              {t('devconsole~We failed to detect the Git type.')}\n            </Alert>\n          )}\n        </>\n      )}\n      {formType !== 'sample' && <AdvancedGitOptions formContextField={formContextField} />}\n    </FormSection>\n  );\n};\n\nexport default GitSection;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { InputField, useDebounceCallback } from '@console/shared';\nimport FormSection from '../section/FormSection';\nimport SourceSecretSelector from './SourceSecretSelector';\n\nconst AdvancedGitOptions: React.FC<{\n  formContextField?: string;\n}> = ({ formContextField }) => {\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n\n  const { t } = useTranslation();\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n\n  const handleGitRefChange = useDebounceCallback((e: React.SyntheticEvent) =>\n    setFieldValue(`${fieldPrefix}git.ref`, (e.target as HTMLInputElement).value),\n  );\n\n  const handleGitDirChange = useDebounceCallback((e: React.SyntheticEvent) => {\n    setFieldValue(`${fieldPrefix}git.dir`, (e.target as HTMLInputElement).value);\n    setFieldTouched(`${fieldPrefix}git.dir`);\n  });\n\n  return (\n    <ExpandCollapse\n      textExpanded={t('devconsole~Hide advanced Git options')}\n      textCollapsed={t('devconsole~Show advanced Git options')}\n      dataTest=\"advanced-git-options\"\n    >\n      <FormSection>\n        <InputField\n          type={TextInputTypes.text}\n          name={`${fieldPrefix}git.ref`}\n          label={t('devconsole~Git reference')}\n          helpText={t('devconsole~Optional branch, tag, or commit.')}\n          onChange={handleGitRefChange}\n        />\n        <InputField\n          type={TextInputTypes.text}\n          name={`${fieldPrefix}git.dir`}\n          label={t('devconsole~Context dir')}\n          helpText={t(\n            'devconsole~Optional subdirectory for the source code, used as a context directory for build.',\n          )}\n          onChange={handleGitDirChange}\n        />\n        <SourceSecretSelector formContextField={formContextField} />\n      </FormSection>\n    </ExpandCollapse>\n  );\n};\n\nexport default AdvancedGitOptions;\n","import * as React from 'react';\nimport { FormGroup, FormHelperText, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { SecretTypeAbstraction } from '@console/internal/components/secrets/create-secret';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { SecretModel } from '@console/internal/models';\nimport { getFieldId } from '@console/shared';\nimport SourceSecretDropdown from '../../dropdown/SourceSecretDropdown';\nimport { secretModalLauncher } from '../CreateSecretModal';\n\nconst CREATE_SOURCE_SECRET = 'create-source-secret';\nconst CLEAR_SOURCE_SECRET = 'clear-source-secret';\n\nconst SourceSecretSelector: React.FC<{\n  formContextField?: string;\n}> = ({ formContextField }) => {\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n\n  const { t } = useTranslation();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const namespace: string = _.get(values, `${fieldPrefix}project.name`);\n  const secret: string = _.get(values, `${fieldPrefix}git.secret`);\n  const [data, loaded, loadError] = useK8sWatchResource(\n    namespace && secret\n      ? {\n          kind: SecretModel.kind,\n          namespace,\n          name: secret,\n          optional: true,\n          isList: false,\n        }\n      : null,\n  );\n\n  const handleSave = (name: string) => {\n    setFieldValue(`${fieldPrefix}git.secret`, name);\n  };\n\n  const handleDropdownChange = (key: string) => {\n    if (key === CREATE_SOURCE_SECRET) {\n      setFieldValue(`${fieldPrefix}git.secret`, secret);\n      secretModalLauncher({\n        namespace,\n        save: handleSave,\n        secretType: SecretTypeAbstraction.source,\n      });\n    } else if (key === CLEAR_SOURCE_SECRET) {\n      setFieldValue(`${fieldPrefix}git.secret`, '');\n      setFieldValue(`${fieldPrefix}git.secretResource`, {});\n    } else {\n      setFieldValue(`${fieldPrefix}git.secret`, key);\n    }\n  };\n\n  React.useEffect(() => {\n    loaded &&\n      !loadError &&\n      secret &&\n      data &&\n      setFieldValue(`${fieldPrefix}git.secretResource`, data);\n  }, [loaded, loadError, secret, data, setFieldValue, fieldPrefix]);\n\n  return (\n    <>\n      <FormGroup\n        fieldId={getFieldId('source-secret', 'dropdown')}\n        label={t('devconsole~Source Secret')}\n      >\n        <SourceSecretDropdown\n          dropDownClassName=\"dropdown--full-width\"\n          menuClassName=\"dropdown-menu--text-wrap\"\n          namespace={namespace}\n          actionItems={[\n            {\n              actionTitle: t('devconsole~Create new Secret'),\n              actionKey: CREATE_SOURCE_SECRET,\n            },\n            {\n              actionTitle: t('devconsole~No Secret'),\n              actionKey: CLEAR_SOURCE_SECRET,\n            },\n          ]}\n          selectedKey={secret}\n          title={secret}\n          onChange={handleDropdownChange}\n        />\n\n        <FormHelperText>\n          <HelperText>\n            <HelperTextItem>\n              {t('devconsole~Secret with credentials for pulling your source code.')}\n            </HelperTextItem>\n          </HelperText>\n        </FormHelperText>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default SourceSecretSelector;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Firehose } from '@console/internal/components/utils/firehose';\nimport { SecretModel } from '@console/internal/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface SourceSecretDropdownProps {\n  dropDownClassName?: string;\n  menuClassName?: string;\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  onChange?: (key: string) => void;\n  title?: React.ReactNode;\n}\n\nconst SourceSecretDropdown: React.FC<SourceSecretDropdownProps> = (props) => {\n  const { t } = useTranslation();\n  const filterData = (item) => {\n    return item.type === 'kubernetes.io/basic-auth' || item.type === 'kubernetes.io/ssh-auth';\n  };\n  const resources = [\n    {\n      isList: true,\n      namespace: props.namespace,\n      kind: SecretModel.kind,\n      prop: 'secrets',\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder={t('devconsole~Select Secret name')}\n        resourceFilter={filterData}\n        dataSelector={['metadata', 'name']}\n      />\n    </Firehose>\n  );\n};\n\nexport default SourceSecretDropdown;\n","import * as React from 'react';\nimport { Tile, Flex, FlexItem, FormGroup } from '@patternfly/react-core';\nimport {\n  GithubIcon,\n  GitlabIcon,\n  BitbucketIcon,\n  GitAltIcon,\n} from '@patternfly/react-icons/dist/esm/icons';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { GitProvider } from '@console/git-service/src';\nimport GiteaIcon from '../GiteaIcon';\nimport { GitReadableTypes } from '../import-types';\n\nimport './GitTypeSelector.scss';\n\ntype GitTypeSelectorProps = {\n  fieldPrefix: string;\n};\n\nconst GitTypeSelector: React.FC<GitTypeSelectorProps> = ({ fieldPrefix }) => {\n  const { values, setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const { t } = useTranslation();\n\n  const handleGitTypeChange = (gitType: GitProvider) => {\n    setFieldValue(`${fieldPrefix}git.type`, gitType, false);\n    setFieldTouched(`${fieldPrefix}git.type`, true, false);\n  };\n  const typeValue = _.get(values, `${fieldPrefix}git.type`);\n\n  return (\n    <>\n      <FormGroup label={t('devconsole~Git type')} isRequired id=\"git-type\">\n        <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITHUB]}\n              icon={<GithubIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITHUB)}\n              isSelected={typeValue === GitProvider.GITHUB}\n              id=\"git-type-github\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITLAB]}\n              icon={<GitlabIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITLAB)}\n              isSelected={typeValue === GitProvider.GITLAB}\n              id=\"git-type-gitlab\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.BITBUCKET]}\n              icon={<BitbucketIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.BITBUCKET)}\n              isSelected={typeValue === GitProvider.BITBUCKET}\n              id=\"git-type-bitbucket\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.GITEA]}\n              icon={<GiteaIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.GITEA)}\n              isSelected={typeValue === GitProvider.GITEA}\n              id=\"git-type-gitea\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Tile\n              className=\"odc-git-type-selector\"\n              title={GitReadableTypes[GitProvider.UNSURE]}\n              icon={<GitAltIcon />}\n              onClick={() => handleGitTypeChange(GitProvider.UNSURE)}\n              isSelected={typeValue === GitProvider.UNSURE}\n              id=\"git-type-other\"\n            />\n          </FlexItem>\n        </Flex>\n      </FormGroup>\n    </>\n  );\n};\n\nexport default GitTypeSelector;\n","import * as React from 'react';\nimport { FormHelperText, Button, ButtonVariant } from '@patternfly/react-core';\nimport { LevelUpAltIcon } from '@patternfly/react-icons/dist/esm/icons/level-up-alt-icon';\nimport { useTranslation } from 'react-i18next';\n\nexport interface SampleRepoProps {\n  onClick: () => void;\n}\n\nconst SampleRepo = (props) => {\n  const { t } = useTranslation();\n  return (\n    <FormHelperText>\n      <Button {...props} type=\"button\" variant={ButtonVariant.link} isInline>\n        {t('devconsole~Try sample')} <LevelUpAltIcon />\n      </Button>\n    </FormHelperText>\n  );\n};\n\nexport default SampleRepo;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { PipelineKind, PipelineRunKind, TaskRunKind } from '../../../../types';\nimport { dagreViewerComponentFactory } from '../../pipeline-topology/factories';\nimport PipelineTopologyGraph from '../../pipeline-topology/PipelineTopologyGraph';\nimport { getGraphDataModel } from '../../pipeline-topology/utils';\n\nimport './PipelineVisualization.scss';\n\ninterface PipelineTopologyVisualizationProps {\n  pipeline: PipelineKind;\n  pipelineRun?: PipelineRunKind;\n  taskRuns?: TaskRunKind[];\n}\n\nconst PipelineVisualization: React.FC<PipelineTopologyVisualizationProps> = ({\n  pipeline,\n  pipelineRun,\n  taskRuns,\n}) => {\n  const { t } = useTranslation();\n  let content: React.ReactElement;\n  const model = getGraphDataModel(pipeline, pipelineRun, taskRuns);\n\n  if (!model || (model.nodes.length === 0 && model.edges.length === 0)) {\n    // Nothing to render\n    content = (\n      <Alert\n        variant=\"info\"\n        isInline\n        title={t('pipelines-plugin~This Pipeline has no tasks to visualize.')}\n      />\n    );\n  } else {\n    content = (\n      <PipelineTopologyGraph\n        data-test=\"pipeline-visualization\"\n        componentFactory={dagreViewerComponentFactory}\n        model={model}\n        showControlBar\n      />\n    );\n  }\n\n  return <div className=\"odc-pipeline-visualization\">{content}</div>;\n};\n\nexport default PipelineVisualization;\n","import * as React from 'react';\nimport { ComponentFactory, Model } from '@patternfly/react-topology';\nimport * as cx from 'classnames';\nimport PipelineVisualizationSurface from './PipelineVisualizationSurface';\n\nimport './PipelineTopologyGraph.scss';\n\ntype PipelineTopologyGraphProps = {\n  builder?: boolean;\n  model: Model;\n  componentFactory: ComponentFactory;\n  showControlBar?: boolean;\n};\n\nconst PipelineTopologyGraph: React.FC<PipelineTopologyGraphProps> = ({\n  builder,\n  model,\n  componentFactory,\n  ...props\n}) => {\n  return (\n    <div\n      className={cx('odc-pipeline-topology-graph', { builder })}\n      data-test={props['data-test'] || 'pipeline-topology-graph'}\n    >\n      <PipelineVisualizationSurface\n        model={model}\n        componentFactory={componentFactory}\n        noScrollbar={builder}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default React.memo(PipelineTopologyGraph);\n","import * as React from 'react';\nimport { observer, Node, NodeModel, Point } from '@patternfly/react-topology';\nimport { useTranslation } from 'react-i18next';\nimport { PipelineVisualizationTask } from '../detail-page-tabs/pipeline-details/PipelineVisualizationTask';\nimport {\n  BUILDER_NODE_ADD_RADIUS,\n  NODE_WIDTH,\n  NODE_HEIGHT,\n  FINALLY_NODE_PADDING,\n  FINALLY_NODE_VERTICAL_SPACING,\n  FINALLY_ADD_LINK_TEXT_HEIGHT,\n  BUILDER_NODE_DECORATOR_RADIUS,\n  FINALLY_ADD_LINK_SIZE,\n  WHEN_EXPRESSION_SPACING,\n} from './const';\nimport { integralShapePath, straightPath } from './draw-utils';\nimport ErrorNodeDecorator from './ErrorNodeDecorator';\nimport LoadingTask from './LoadingTask';\nimport PlusNodeDecorator from './PlusNodeDecorator';\nimport TaskList from './TaskList';\nimport { BuilderFinallyNodeModel } from './types';\n\nimport './BuilderFinallyNode.scss';\n\ntype BuilderFinallyNodeProps = {\n  element: Node<NodeModel, BuilderFinallyNodeModel>;\n};\n\nconst BuilderFinallyNode: React.FC<BuilderFinallyNodeProps> = ({ element }) => {\n  const { t } = useTranslation();\n  const { width, height } = element.getBounds();\n  const { task, namespace } = element.getData();\n\n  const {\n    addNewFinallyListNode,\n    finallyTasks = [],\n    finallyListTasks = [],\n    finallyLoadingTasks = [],\n    finallyInvalidListTasks = [],\n    onTaskSearch = () => {},\n  } = task;\n  const allTasksLength =\n    finallyTasks.length +\n    finallyListTasks.length +\n    finallyLoadingTasks.length +\n    finallyInvalidListTasks.length;\n  const nodeCenter = NODE_HEIGHT + NODE_HEIGHT / 2;\n  const leftPadding = FINALLY_NODE_PADDING + WHEN_EXPRESSION_SPACING;\n  const verticalHeight = NODE_HEIGHT + FINALLY_NODE_VERTICAL_SPACING;\n  const finallyTaskLinkX =\n    FINALLY_NODE_PADDING +\n    FINALLY_NODE_PADDING / 2 +\n    (allTasksLength === 0 ? 0 : WHEN_EXPRESSION_SPACING);\n\n  const IntegralShape = ({ taskIndex }: { taskIndex: number }) => (\n    <path\n      className=\"opp-builder-finally-node__task-connectors\"\n      d={\n        nodeCenter + taskIndex * verticalHeight === height / 2\n          ? straightPath(new Point(leftPadding, height / 2), new Point(0, height / 2))\n          : integralShapePath(\n              new Point(0, height / 2),\n              new Point(leftPadding, nodeCenter + taskIndex * verticalHeight),\n            )\n      }\n    />\n  );\n\n  return (\n    <g data-test=\"builder-finally-node\">\n      <rect className=\"opp-builder-finally-node\" width={width} height={height} rx=\"20\" ry=\"20\" />\n\n      {finallyTasks.map((ft, i) => (\n        <g key={ft.name}>\n          <IntegralShape taskIndex={i} />\n          <g\n            data-test={`finally-task-node ${ft.name}`}\n            transform={`translate(${leftPadding}, ${\n              NODE_HEIGHT * i + FINALLY_NODE_VERTICAL_SPACING * i + FINALLY_NODE_PADDING\n            })`}\n            onClick={ft.onTaskSelection}\n          >\n            <PipelineVisualizationTask\n              task={ft}\n              namespace={namespace}\n              disableTooltip\n              selected={ft.selected}\n              width={NODE_WIDTH}\n              height={NODE_HEIGHT}\n              isFinallyTask\n            />\n            {ft.error && (\n              <ErrorNodeDecorator\n                x={BUILDER_NODE_ADD_RADIUS / 2}\n                y={BUILDER_NODE_DECORATOR_RADIUS / 4}\n                errorStr={ft.error}\n              />\n            )}\n          </g>\n        </g>\n      ))}\n      {finallyLoadingTasks.map((fld, i) => (\n        <g key={fld.name} data-test={`finally-loading-task-list-node ${fld.name}`}>\n          <IntegralShape taskIndex={i + finallyTasks.length} />\n          <g\n            transform={`translate(${leftPadding},\n          ${\n            NODE_HEIGHT * (i + finallyTasks.length) +\n            FINALLY_NODE_VERTICAL_SPACING * (i + finallyTasks.length) +\n            FINALLY_NODE_PADDING\n          })`}\n          >\n            <LoadingTask width={NODE_WIDTH} height={NODE_HEIGHT} name={fld.name} key={fld.name} />\n          </g>\n        </g>\n      ))}\n      {finallyInvalidListTasks.map((ivl, i) => (\n        <g key={ivl.name} data-test={`finally-invalid-task-list-node ${ivl.name}`}>\n          <IntegralShape taskIndex={i + finallyTasks.length + finallyLoadingTasks.length} />\n          <g\n            transform={`translate(${leftPadding},\n              ${\n                NODE_HEIGHT * (i + finallyTasks.length + finallyLoadingTasks.length) +\n                FINALLY_NODE_VERTICAL_SPACING *\n                  (i + finallyTasks.length + finallyLoadingTasks.length) +\n                FINALLY_NODE_PADDING\n              })`}\n          >\n            <TaskList\n              width={NODE_WIDTH}\n              height={NODE_HEIGHT}\n              onRemoveTask={ivl.onRemoveTask}\n              onNewTask={ivl.convertList}\n              onTaskSearch={onTaskSearch}\n              unselectedText={ivl.name}\n            />\n            <ErrorNodeDecorator\n              x={BUILDER_NODE_DECORATOR_RADIUS / 2}\n              y={BUILDER_NODE_DECORATOR_RADIUS / 4}\n              errorStr={t('pipelines-plugin~Task does not exist')}\n            />\n          </g>\n        </g>\n      ))}\n\n      {finallyListTasks.map((flt, i) => (\n        <g key={flt.name} data-test={`finally-task-list-node ${flt.name}`}>\n          <IntegralShape\n            taskIndex={\n              i + finallyTasks.length + finallyLoadingTasks.length + finallyInvalidListTasks.length\n            }\n          />\n          <g\n            transform={`translate(${leftPadding},\n              ${\n                NODE_HEIGHT *\n                  (i +\n                    finallyTasks.length +\n                    finallyLoadingTasks.length +\n                    finallyInvalidListTasks.length) +\n                FINALLY_NODE_VERTICAL_SPACING *\n                  (i +\n                    finallyTasks.length +\n                    finallyLoadingTasks.length +\n                    finallyInvalidListTasks.length) +\n                FINALLY_NODE_PADDING\n              })`}\n          >\n            <TaskList\n              width={NODE_WIDTH}\n              height={NODE_HEIGHT}\n              onRemoveTask={flt.onRemoveTask}\n              onNewTask={flt.convertList}\n              onTaskSearch={onTaskSearch}\n            />\n          </g>\n        </g>\n      ))}\n      {\n        <g\n          transform={`translate(${finallyTaskLinkX}, ${\n            allTasksLength * NODE_HEIGHT +\n            (allTasksLength - 1) * FINALLY_NODE_VERTICAL_SPACING +\n            NODE_HEIGHT +\n            FINALLY_ADD_LINK_TEXT_HEIGHT +\n            FINALLY_NODE_PADDING\n          })`}\n          style={{ cursor: 'pointer' }}\n          onClick={addNewFinallyListNode}\n        >\n          <g>\n            <PlusNodeDecorator\n              x={0}\n              y={FINALLY_ADD_LINK_TEXT_HEIGHT - FINALLY_ADD_LINK_SIZE}\n              tooltip={t('pipelines-plugin~Add finally task')}\n            />\n            <text\n              x={FINALLY_ADD_LINK_SIZE}\n              data-test=\"add-finally-node\"\n              className=\"opp-builder-finally-node__text\"\n            >\n              {t('pipelines-plugin~Add finally task')}\n            </text>\n          </g>\n        </g>\n      }\n    </g>\n  );\n};\n\nexport default observer(BuilderFinallyNode);\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ComputedStatus } from '../../../types';\nimport { NODE_HEIGHT } from './const';\nimport { getWhenExpressionDiamondState } from './utils';\n\nimport './WhenExpressionDecorator.scss';\n\ntype WhenExpressionDecoratorProps = {\n  width: number;\n  height: number;\n  leftOffset?: number;\n  stroke?: string;\n  status: ComputedStatus;\n  appendLine?: boolean;\n  enableTooltip?: boolean;\n  isFinallyTask: boolean;\n  isPipelineRun: boolean;\n};\n\nconst WhenExpressionDecorator: React.FC<WhenExpressionDecoratorProps> = ({\n  width,\n  height,\n  enableTooltip,\n  appendLine = false,\n  status,\n  leftOffset = 2,\n  isFinallyTask,\n  isPipelineRun,\n}) => {\n  const nodeRef = React.useRef();\n  const rotation = 45; // 45deg\n  const { tooltipContent, diamondColor } = getWhenExpressionDiamondState(\n    status,\n    isPipelineRun,\n    isFinallyTask,\n  );\n  const diamondHeight =\n    Math.round(width * Math.sin(rotation)) + Math.round(height * Math.cos(rotation));\n  const diamondNode = (\n    <g\n      transform={`translate(-${width * leftOffset}, ${NODE_HEIGHT / 2 - diamondHeight / 2})`}\n      ref={nodeRef}\n    >\n      <rect\n        data-test=\"diamond-decorator\"\n        className=\"opp-when-expression-decorator-diamond\"\n        width={width}\n        height={height}\n        fill={diamondColor}\n        stroke={isPipelineRun ? diamondColor : 'var(--pf-v5-global--BorderColor--light-100)'}\n      />\n      {appendLine && (\n        <line\n          x1={diamondHeight / 2}\n          y1={diamondHeight / 2}\n          x2={width * leftOffset}\n          y2={diamondHeight / 2}\n          stroke=\"var(--pf-v5-global--BorderColor--light-100)\"\n        />\n      )}\n    </g>\n  );\n\n  return enableTooltip ? (\n    <Tooltip\n      triggerRef={nodeRef}\n      position=\"bottom\"\n      enableFlip={false}\n      content={<div data-test=\"when-expression-tooltip\">{tooltipContent}</div>}\n    >\n      {diamondNode}\n    </Tooltip>\n  ) : (\n    diamondNode\n  );\n};\n\nexport default WhenExpressionDecorator;\n","export interface Vertex {\n  name: string;\n  level: number;\n  dependancy: {};\n  dependancyNames: string[];\n  hasOutgoing: boolean;\n  data: any;\n}\n\ntype Vertices = Map<string, Vertex>;\n\nexport class DAG {\n  names: string[];\n\n  vertices: Vertices;\n\n  constructor() {\n    this.names = [];\n    this.vertices = new Map();\n  }\n\n  private visit(\n    vertex: Vertex,\n    fn: (v: Vertex, path: string[]) => void,\n    visited?: any,\n    path?: string[],\n  ) {\n    const { name } = vertex;\n    const vertices = vertex.dependancy;\n    const names = vertex.dependancyNames;\n    const len = names.length;\n\n    if (!visited) {\n      // eslint-disable-next-line no-param-reassign\n      visited = new Map();\n    }\n    if (!path) {\n      // eslint-disable-next-line no-param-reassign\n      path = [];\n    }\n    if (visited.has(name)) {\n      return;\n    }\n    path.push(name);\n    visited.set(name, true);\n    for (let i = 0; i < len; i++) {\n      this.visit(vertices[names[i]], fn, visited, path);\n    }\n    fn(vertex, path);\n    path.pop();\n  }\n\n  private map(name: string, data: any) {\n    const vertex = this.addVertex(name);\n    vertex.data = data;\n  }\n\n  addVertex(name: string) {\n    if (!name) {\n      return null;\n    }\n    if (this.vertices.has(name)) {\n      return this.vertices.get(name);\n    }\n\n    const vertex: Vertex = {\n      name,\n      level: 0,\n      dependancy: {},\n      dependancyNames: [],\n      hasOutgoing: false,\n      data: {},\n    };\n    this.vertices.set(name, vertex);\n    this.names.push(name);\n    return vertex;\n  }\n\n  addEdge(source: string, target: string): void {\n    if (!source || !target || source === target) {\n      return;\n    }\n    const fromNode = this.addVertex(source);\n    const toNode = this.addVertex(target);\n\n    if (toNode.dependancy[source]) {\n      return;\n    }\n\n    const checkCycle = (vertex: Vertex, path: string[]) => {\n      if (vertex.name === target) {\n        throw new Error(`cycle detected: ${path.reverse().join(' --> ')} --> ${target}`);\n      } else {\n        vertex.level = path.length;\n      }\n    };\n    this.visit(fromNode, checkCycle);\n    fromNode.hasOutgoing = true;\n    toNode.dependancy[source] = fromNode;\n    toNode.dependancyNames.push(source);\n  }\n\n  addEdges(name: string, data: any, before: string | string[], after: string | string[]): void {\n    this.map(name, data);\n\n    if (before) {\n      if (typeof before === 'string') {\n        this.addEdge(name, before);\n      } else {\n        before.forEach((b) => this.addEdge(name, b));\n      }\n    }\n    if (after) {\n      if (typeof after === 'string') {\n        this.addEdge(after, name);\n      } else {\n        after.forEach((a) => this.addEdge(a, name));\n      }\n    }\n  }\n\n  topologicalSort(fn: any): void {\n    const visited = new Map();\n    const { vertices } = this;\n    const { names } = this;\n    const len = names.length;\n\n    for (let i = 0; i < len; i++) {\n      const vertex: Vertex = vertices.get(names[i]);\n      if (!vertex.hasOutgoing) {\n        this.visit(vertex, fn, visited);\n      }\n    }\n  }\n\n  printGraph() {\n    const orderedNodes = [];\n    this.topologicalSort((v, t) => {\n      v.data.stage = this.names.length - t.length;\n      orderedNodes.push(v.name);\n    });\n    // eslint-disable-next-line no-console\n    console.log(orderedNodes.join(' --> '));\n    return orderedNodes.join(' --> ');\n  }\n}\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport { BUILDER_NODE_DECORATOR_RADIUS } from './const';\n\nimport './InstallingNodeDecorator.scss';\n\ntype InstallingNodeDecoratorProps = {\n  content: string;\n  x: number;\n  y: number;\n};\nconst InstallingNodeDecorator: React.FC<InstallingNodeDecoratorProps> = ({ content, x, y }) => {\n  const iconRef = React.useRef();\n  return (\n    <Tooltip triggerRef={iconRef} content={content}>\n      <g\n        ref={iconRef}\n        className=\"opp-installing-node-decorator\"\n        transform={`translate(${x}, ${y})`}\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        <circle\n          cx={0}\n          cy={0}\n          r={BUILDER_NODE_DECORATOR_RADIUS}\n          className=\"opp-installing-node-decorator__circle\"\n        />\n        <g transform=\"translate(-5, -7)\">\n          <InProgressIcon className=\"fa-spin\" />\n        </g>\n      </g>\n    </Tooltip>\n  );\n};\n\nexport default InstallingNodeDecorator;\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { TrashIcon } from '@patternfly/react-icons/dist/esm/icons/trash-icon';\nimport { global_palette_black_500 as greyColor } from '@patternfly/react-tokens';\nimport { BUILDER_NODE_DECORATOR_RADIUS } from './const';\n\nimport './RemoveNodeDecorator.scss';\n\ntype RemoveNodeDecoratorProps = {\n  content: string;\n  x: number;\n  y: number;\n  removeCallback?: () => void;\n};\n\nconst RemoveNodeDecorator: React.FC<RemoveNodeDecoratorProps> = ({\n  content,\n  x,\n  y,\n  removeCallback = () => {},\n}) => {\n  const trashRef = React.useRef();\n  return (\n    <Tooltip triggerRef={trashRef} content={content}>\n      <g\n        ref={trashRef}\n        className=\"opp-remove-node-decorator\"\n        transform={`translate(${x}, ${y})`}\n        onClick={(e) => {\n          e.stopPropagation();\n          removeCallback();\n        }}\n        data-id=\"delete-task\"\n      >\n        <circle cx={0} cy={0} r={BUILDER_NODE_DECORATOR_RADIUS} fill={greyColor.value} />\n        <g transform=\"translate(-6, -6)\">\n          <TrashIcon color=\"white\" />\n        </g>\n      </g>\n    </Tooltip>\n  );\n};\n\nexport default RemoveNodeDecorator;\n","import * as React from 'react';\nimport { TooltipPosition } from '@patternfly/react-core';\nimport { Node, NodeModel, observer, useHover } from '@patternfly/react-topology';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AddNodeDirection,\n  BUILDER_NODE_ADD_RADIUS,\n  BUILDER_NODE_DECORATOR_RADIUS,\n  BUILDER_NODE_ADD_PADDING,\n} from './const';\nimport ErrorNodeDecorator from './ErrorNodeDecorator';\nimport PlusNodeDecorator from './PlusNodeDecorator';\nimport TaskNode from './TaskNode';\nimport { BuilderNodeModelData } from './types';\n\ntype BuilderNodeProps = {\n  element: Node<NodeModel, BuilderNodeModelData>;\n};\n\nconst BuilderNode: React.FC<BuilderNodeProps> = ({ element }) => {\n  const { t } = useTranslation();\n  const [showAdd, hoverRef] = useHover();\n  const { width, height } = element.getBounds();\n  const data = element.getData();\n  const { error, onAddNode, onNodeSelection } = data;\n\n  return (\n    <g className=\"odc-builder-node\" data-test={`builder-node ${data.task.name}`} ref={hoverRef}>\n      <rect\n        x={-BUILDER_NODE_ADD_RADIUS * 2}\n        y={0}\n        width={width + BUILDER_NODE_ADD_RADIUS * 4}\n        height={height + BUILDER_NODE_ADD_RADIUS * 2}\n        fill=\"transparent\"\n      />\n      <g onClick={() => onNodeSelection(data)}>\n        <TaskNode element={element} disableTooltip />\n        {error && (\n          <ErrorNodeDecorator\n            x={BUILDER_NODE_DECORATOR_RADIUS / 2}\n            y={BUILDER_NODE_DECORATOR_RADIUS / 4}\n            errorStr={error}\n          />\n        )}\n      </g>\n      <g style={{ display: showAdd ? 'block' : 'none' }}>\n        <PlusNodeDecorator\n          data-test=\"add-after\"\n          x={width + BUILDER_NODE_ADD_RADIUS + BUILDER_NODE_ADD_PADDING}\n          y={height / 2}\n          tooltip={t('pipelines-plugin~Add a sequential task after this task')}\n          onClick={() => onAddNode(AddNodeDirection.AFTER)}\n        />\n        <PlusNodeDecorator\n          data-test=\"add-before\"\n          x={-BUILDER_NODE_ADD_RADIUS - BUILDER_NODE_ADD_PADDING}\n          y={height / 2}\n          tooltip={t('pipelines-plugin~Add a sequential task before this task')}\n          onClick={() => onAddNode(AddNodeDirection.BEFORE)}\n        />\n        <PlusNodeDecorator\n          data-test=\"add-parallel\"\n          x={width / 2}\n          y={height + BUILDER_NODE_ADD_RADIUS + BUILDER_NODE_ADD_PADDING}\n          tooltip={t('pipelines-plugin~Add a parallel task')}\n          tooltipPosition={TooltipPosition.bottom}\n          onClick={() => onAddNode(AddNodeDirection.PARALLEL)}\n        />\n      </g>\n    </g>\n  );\n};\n\nexport default observer(BuilderNode);\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport { global_palette_black_500 as customTaskColor } from '@patternfly/react-tokens/dist/js/global_palette_black_500';\nimport { observer, Node, NodeModel, useHover, createSvgIdUrl } from '@patternfly/react-topology';\nimport * as cx from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport {\n  K8sResourceKind,\n  WatchK8sResults,\n  getGroupVersionKindForModel,\n} from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResources } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks';\nimport { resourcePathFromModel, truncateMiddle } from '@console/internal/components/utils';\nimport { CustomRunModelV1Beta1 } from '@console/pipelines-plugin/src/models';\nimport { SvgDropShadowFilter } from '@console/topology/src/components/svg';\nimport { TaskKind, CustomRunKind } from '../../../types';\nimport { TaskNodeModelData } from './types';\n\nimport './CustomTaskNode.scss';\n\ntype CustomTaskNodeProps = {\n  element: Node<NodeModel, TaskNodeModelData>;\n  disableTooltip?: boolean;\n};\n\ntype WatchResource = {\n  [key: string]: K8sResourceKind[] | K8sResourceKind;\n};\n\ninterface CustomTaskProps {\n  pipelineRunName?: string;\n  name: string;\n  loaded?: boolean;\n  task?: {\n    data: TaskKind;\n  };\n  namespace: string;\n  disableVisualizationTooltip?: boolean;\n  width: number;\n  height: number;\n  customTask?: K8sResourceKind;\n}\n\nconst FILTER_ID = 'SvgTaskDropShadowFilterId';\n\nconst CustomTaskComponent: React.FC<CustomTaskProps> = ({\n  pipelineRunName,\n  namespace,\n  task,\n  name,\n  disableVisualizationTooltip,\n  width,\n  height,\n  customTask,\n}) => {\n  const { t } = useTranslation();\n  const showStatusState: boolean = !!pipelineRunName;\n  const visualName = name || _.get(task, ['metadata', 'name'], '');\n  const nameRef = React.useRef();\n  const pillRef = React.useRef();\n\n  const path = `${resourcePathFromModel(\n    CustomRunModelV1Beta1,\n    customTask?.metadata?.name,\n    namespace,\n  )}`;\n  const enableLogLink = !!path;\n  const [hover, hoverRef] = useHover();\n  const truncatedVisualName = React.useMemo(\n    () => truncateMiddle(visualName, { length: showStatusState ? 11 : 14, truncateEnd: true }),\n    [visualName, showStatusState],\n  );\n\n  const renderVisualName = (\n    <text\n      ref={nameRef}\n      x={showStatusState ? 30 : width / 2}\n      y={height / 2 + 1}\n      className={cx('odc-pipeline-vis-task-text', {\n        'is-text-center': !pipelineRunName,\n        'is-linked': enableLogLink,\n      })}\n    >\n      {truncatedVisualName}\n    </text>\n  );\n\n  let taskPill = (\n    <g ref={hoverRef}>\n      <SvgDropShadowFilter dy={1} id={FILTER_ID} />\n      <rect\n        filter={hover ? createSvgIdUrl(FILTER_ID) : ''}\n        width={width}\n        height={height}\n        rx={5}\n        className={cx('odc-pipeline-vis-task', {\n          'is-selected': !!pipelineRunName && hover,\n          'is-linked': !!pipelineRunName && enableLogLink,\n        })}\n        style={{\n          stroke: customTaskColor.value,\n        }}\n      />\n      {visualName !== truncatedVisualName && disableVisualizationTooltip ? (\n        <Tooltip triggerRef={nameRef} content={visualName}>\n          {renderVisualName}\n        </Tooltip>\n      ) : (\n        renderVisualName\n      )}\n\n      {showStatusState && (\n        <>\n          <svg\n            width={30}\n            height={30}\n            viewBox=\"-10 -7 30 30\"\n            style={{\n              color: customTaskColor.value,\n            }}\n          >\n            {<QuestionCircleIcon />}\n          </svg>\n        </>\n      )}\n    </g>\n  );\n\n  if (!disableVisualizationTooltip) {\n    taskPill = (\n      <Tooltip\n        triggerRef={pillRef}\n        position=\"bottom\"\n        enableFlip={false}\n        content={t('pipelines-plugin~Custom Task')}\n      >\n        <g ref={pillRef}>{taskPill}</g>\n      </Tooltip>\n    );\n  }\n  return (\n    <g className={cx('odc-pipeline-topology__task-node', { 'is-link': enableLogLink })}>\n      {enableLogLink ? <Link to={path}>{taskPill}</Link> : taskPill}\n    </g>\n  );\n};\n\nconst CustomTaskNode: React.FC<CustomTaskNodeProps> = ({ element, disableTooltip }) => {\n  const { height, width } = element.getBounds();\n\n  const { pipeline, pipelineRun, task } = element.getData();\n\n  const customTaskName = `${pipelineRun?.metadata?.name}-${task?.name}`;\n\n  const watchedResources = {\n    customRun: {\n      groupVersionKind: getGroupVersionKindForModel(CustomRunModelV1Beta1),\n      name: customTaskName,\n      namespace: pipeline?.metadata?.namespace,\n      prop: 'task',\n    },\n  };\n\n  const resourcesData: WatchK8sResults<WatchResource> = useK8sWatchResources<WatchResource>(\n    watchedResources,\n  );\n\n  const taskComponent: JSX.Element = (\n    <CustomTaskComponent\n      pipelineRunName={pipelineRun?.metadata?.name}\n      name={task.name || ''}\n      task={task.taskSpec && { data: { spec: task.taskSpec } }}\n      namespace={pipeline?.metadata?.namespace}\n      disableVisualizationTooltip={disableTooltip}\n      width={width}\n      height={height}\n      customTask={resourcesData.customRun?.data as CustomRunKind}\n    />\n  );\n  return taskComponent;\n};\n\nexport default React.memo(observer(CustomTaskNode));\n","import * as React from 'react';\nimport { observer, Node, NodeModel, Point } from '@patternfly/react-topology';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { PipelineVisualizationTask } from '../detail-page-tabs/pipeline-details/PipelineVisualizationTask';\nimport {\n  NODE_WIDTH,\n  NODE_HEIGHT,\n  FINALLY_NODE_PADDING,\n  FINALLY_NODE_VERTICAL_SPACING,\n  WHEN_EXPRESSION_SPACING,\n} from './const';\nimport { integralShapePath, straightPath } from './draw-utils';\nimport { FinallyNodeModel } from './types';\n\nimport './FinallyNode.scss';\n\ntype FinallyNodeProps = {\n  element: Node<NodeModel, FinallyNodeModel>;\n};\n\nconst FinallyNode: React.FC<FinallyNodeProps> = ({ element }) => {\n  const { task, pipeline, pipelineRun } = element.getData();\n  const { width, height } = element.getBounds();\n  const nodeCenter = NODE_HEIGHT + NODE_HEIGHT / 2;\n  const leftPadding = FINALLY_NODE_PADDING + WHEN_EXPRESSION_SPACING;\n  const verticalHeight = NODE_HEIGHT + FINALLY_NODE_VERTICAL_SPACING;\n\n  const { finallyTasks = [] } = task;\n  return (\n    <g transform=\"translate(0.5, 0.5)\" data-test=\"finally-node\">\n      <rect\n        className=\"opp-finally-node\"\n        strokeWidth={1}\n        width={width}\n        height={height}\n        rx=\"20\"\n        ry=\"20\"\n      />\n\n      {finallyTasks.map((ft, i) => {\n        return (\n          <g key={ft.name} data-test={`finally-task-node ${ft.name}`}>\n            <path\n              className=\"opp-finally-node__connector\"\n              d={\n                nodeCenter + i * verticalHeight === height / 2\n                  ? straightPath(new Point(leftPadding, height / 2), new Point(0, height / 2))\n                  : integralShapePath(\n                      new Point(0, height / 2),\n                      new Point(leftPadding, nodeCenter + i * verticalHeight),\n                    )\n              }\n            />\n            <g\n              transform={`translate(${leftPadding}, ${\n                NODE_HEIGHT * i + FINALLY_NODE_VERTICAL_SPACING * i + FINALLY_NODE_PADDING\n              })`}\n            >\n              <PipelineVisualizationTask\n                pipelineRunName={pipelineRun?.metadata?.name}\n                task={ft}\n                pipelineRunStatus={pipelineRun && pipelineRunFilterReducer(pipelineRun)}\n                namespace={pipeline?.metadata?.namespace}\n                selected={ft.selected}\n                width={NODE_WIDTH}\n                height={NODE_HEIGHT}\n                isFinallyTask\n                isSkipped={pipelineRun?.status?.skippedTasks?.some((t) => t.name === ft.name)}\n              />\n            </g>\n          </g>\n        );\n      })}\n    </g>\n  );\n};\n\nexport default observer(FinallyNode);\n","import * as React from 'react';\nimport { Node, NodeModel, observer } from '@patternfly/react-topology';\nimport { useTranslation } from 'react-i18next';\nimport { BUILDER_NODE_DECORATOR_RADIUS } from './const';\nimport ErrorNodeDecorator from './ErrorNodeDecorator';\nimport TaskListNode from './TaskListNode';\nimport { TaskListNodeModelData } from './types';\n\ntype InvalidTaskListNodeProps = {\n  element: Node<NodeModel, TaskListNodeModelData>;\n};\n\nconst InvalidTaskListNode: React.FC<InvalidTaskListNodeProps> = ({ element }) => {\n  const { t } = useTranslation();\n  const {\n    task: { name },\n  } = element.getData();\n\n  return (\n    <g>\n      <TaskListNode element={element} unselectedText={name} />\n      <ErrorNodeDecorator\n        x={BUILDER_NODE_DECORATOR_RADIUS / 2}\n        y={BUILDER_NODE_DECORATOR_RADIUS / 4}\n        errorStr={t('pipelines-plugin~Task does not exist')}\n      />\n    </g>\n  );\n};\n\nexport default observer(InvalidTaskListNode);\n","import * as React from 'react';\nimport { observer, Node } from '@patternfly/react-topology';\nimport LoadingTask from './LoadingTask';\n\nconst LoadingNode: React.FC<{ element: Node }> = ({ element }) => {\n  const { height, width } = element.getBounds();\n  const {\n    task: { name },\n  } = element.getData();\n\n  return <LoadingTask {...{ width, height, name }} />;\n};\n\nexport default observer(LoadingNode);\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport {\n  DEFAULT_LAYER,\n  DEFAULT_WHEN_OFFSET,\n  Layer,\n  Node,\n  ScaleDetailsLevel,\n  TaskNode,\n  TOP_LAYER,\n  useDetailsLevel,\n  useHover,\n  WhenDecorator,\n  WithContextMenuProps,\n  WithSelectionProps,\n} from '@patternfly/react-topology';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { ClusterTaskModel, PipelineRunModel, TaskModel } from '../../../models';\nimport { ComputedStatus, TaskKind } from '../../../types';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER } from '../const';\nimport {\n  createStepStatus,\n  StepStatus,\n} from '../detail-page-tabs/pipeline-details/pipeline-step-utils';\nimport { PipelineVisualizationStepList } from '../detail-page-tabs/pipeline-details/PipelineVisualizationStepList';\nimport { NodeType } from './const';\nimport { getTooltipContent } from './utils';\n\nimport './PipelineTaskNode.scss';\n\ntype PipelineTaskNodeProps = {\n  element: Node;\n} & WithContextMenuProps &\n  WithSelectionProps;\n\nconst PipelineTaskNode: React.FunctionComponent<PipelineTaskNodeProps> = ({\n  element,\n  onContextMenu,\n  contextMenuOpen,\n  ...rest\n}) => {\n  const data = element.getData();\n  const [hover, hoverRef] = useHover();\n  const taskRef = React.useRef();\n  const detailsLevel = useDetailsLevel();\n  const IS_PIPELINE_OPERATOR_VERSION_1_17_OR_NEWER = useFlag(\n    FLAG_PIPELINES_OPERATOR_VERSION_1_17_OR_NEWER,\n  );\n  const isFinallyTask = element.getType() === NodeType.FINALLY_NODE;\n  let resources;\n  if (\n    !IS_PIPELINE_OPERATOR_VERSION_1_17_OR_NEWER &&\n    data.task?.taskRef?.kind === ClusterTaskModel.kind\n  ) {\n    resources = {\n      kind: referenceForModel(ClusterTaskModel),\n      name: data.task.taskRef.name,\n      prop: 'task',\n    };\n  } else if (data.task?.taskRef) {\n    resources = {\n      kind: referenceForModel(TaskModel),\n      name: data.task.taskRef.name,\n      namespace: data.pipeline.metadata.namespace,\n      prop: 'task',\n    };\n  }\n  const [task] = useK8sWatchResource<TaskKind>(resources);\n\n  const computedTask = task && Object.keys(task).length ? task : data.task;\n  const stepList =\n    computedTask?.status?.steps || computedTask?.spec?.steps || computedTask?.taskSpec?.steps || [];\n\n  const pipelineRunStatus = data.pipelineRun && pipelineRunFilterReducer(data.pipelineRun);\n  const isSkipped = !!(\n    computedTask &&\n    data.pipelineRun?.status?.skippedTasks?.some(\n      (skippedTask) => skippedTask.name === data.task.name,\n      (skippedTask) => skippedTask.name === computedTask.name,\n    )\n  );\n\n  const taskStatus = data.task?.status || {\n    duration: '',\n    reason: ComputedStatus.Idle,\n  };\n  if (\n    pipelineRunStatus === ComputedStatus.Failed ||\n    pipelineRunStatus === ComputedStatus.Cancelled\n  ) {\n    if (\n      data.task?.status?.reason === ComputedStatus.Idle ||\n      data.task?.status?.reason === ComputedStatus.Pending\n    ) {\n      taskStatus.reason = ComputedStatus.Cancelled;\n    }\n  }\n  if (isSkipped) {\n    taskStatus.reason = ComputedStatus.Skipped;\n  }\n\n  const stepStatusList: StepStatus[] = stepList.map((step) => createStepStatus(step, taskStatus));\n  const { pipelineRun } = data;\n  const succeededStepsCount = stepStatusList.filter(\n    ({ status }) => status === ComputedStatus.Succeeded,\n  ).length;\n\n  const badge =\n    stepStatusList.length > 0 && data.status\n      ? `${succeededStepsCount}/${stepStatusList.length}`\n      : null;\n\n  const passedData = React.useMemo(() => {\n    const newData = { ...data };\n    Object.keys(newData).forEach((key) => {\n      if (newData[key] === undefined) {\n        delete newData[key];\n      }\n    });\n    return newData;\n  }, [data]);\n\n  const hasTaskIcon = !!(data.taskIconClass || data.taskIcon);\n  const tooltipContent = getTooltipContent(data.task?.status?.reason);\n  const whenDecorator = data.whenStatus ? (\n    <WhenDecorator\n      element={element}\n      status={data.whenStatus}\n      leftOffset={\n        hasTaskIcon\n          ? DEFAULT_WHEN_OFFSET + (element.getBounds().height - 4) * 0.75\n          : DEFAULT_WHEN_OFFSET\n      }\n      toolTip={tooltipContent}\n    />\n  ) : null;\n\n  const { name: plrName, namespace } = pipelineRun?.metadata;\n  const path = plrName\n    ? `${resourcePathFromModel(\n        PipelineRunModel,\n        plrName,\n        namespace,\n      )}/logs?taskName=${element.getLabel()}`\n    : undefined;\n\n  const enableLogLink =\n    data.status !== ComputedStatus.Idle &&\n    data.status !== ComputedStatus.Pending &&\n    data.status !== ComputedStatus.Cancelled &&\n    data.status !== ComputedStatus.Skipped &&\n    !!path;\n\n  const taskNode = (\n    <TaskNode\n      className=\"odc-pipeline-topology__task-node\"\n      element={element}\n      onContextMenu={data.showContextMenu ? onContextMenu : undefined}\n      contextMenuOpen={contextMenuOpen}\n      scaleNode={(hover || contextMenuOpen) && detailsLevel !== ScaleDetailsLevel.high}\n      hideDetailsAtMedium\n      {...passedData}\n      {...rest}\n      badge={badge}\n      truncateLength={element.getData()?.label?.length}\n    >\n      {whenDecorator}\n    </TaskNode>\n  );\n\n  const classes = classNames('odc-pipeline-topology__task-node', { 'is-link': enableLogLink });\n  return (\n    <Layer\n      id={\n        detailsLevel !== ScaleDetailsLevel.high && (hover || contextMenuOpen)\n          ? TOP_LAYER\n          : DEFAULT_LAYER\n      }\n    >\n      <g data-test={`task ${element.getLabel()}`} className={classes} ref={hoverRef}>\n        <Tooltip\n          enableFlip\n          triggerRef={taskRef}\n          content={\n            <PipelineVisualizationStepList\n              isSpecOverview={!data.status}\n              taskName={element.getLabel()}\n              steps={stepStatusList}\n              isFinallyTask={isFinallyTask}\n            />\n          }\n        >\n          <g ref={taskRef}>{enableLogLink ? <Link to={path}>{taskNode}</Link> : taskNode}</g>\n        </Tooltip>\n      </g>\n    </Layer>\n  );\n};\n\nexport default React.memo(observer(PipelineTaskNode));\n","import * as React from 'react';\nimport { Edge, Point } from '@patternfly/react-topology';\nimport { integralShapePath } from './draw-utils';\n\nconst TaskEdge: React.FC<{ element: Edge }> = ({ element }) => {\n  const startPoint: Point = element.getStartPoint();\n  const endPoint: Point = element.getEndPoint();\n  const sourceNode = element.getSource();\n  const targetNode = element.getTarget();\n\n  return (\n    <path\n      d={integralShapePath(\n        startPoint.clone().translate(sourceNode.getBounds().width / 2 - 1, 0),\n        endPoint.clone().translate(-targetNode.getBounds().width / 2, 0),\n      )}\n      stroke=\"var(--pf-v5-global--BorderColor--light-100)\"\n      fill=\"none\"\n      transform=\"translate(0.5,0.5)\"\n    />\n  );\n};\n\nexport default TaskEdge;\n","import * as React from 'react';\nimport {\n  GRAPH_LAYOUT_END_EVENT,\n  Model,\n  Node,\n  Visualization,\n  VisualizationSurface,\n  VisualizationProvider,\n  action,\n  createTopologyControlButtons,\n  defaultControlButtonsOptions,\n  TopologyControlBar,\n  TopologyView,\n  Controller,\n  GRAPH_POSITION_CHANGE_EVENT,\n  ComponentFactory,\n} from '@patternfly/react-topology';\nimport Measure from 'react-measure';\nimport {\n  DROP_SHADOW_SPACING,\n  NODE_HEIGHT,\n  TOOLBAR_HEIGHT,\n  GRAPH_MIN_WIDTH,\n  PipelineLayout,\n  GRAPH_MAX_HEIGHT_PERCENT,\n} from './const';\nimport { layoutFactory } from './factories';\nimport { getLayoutData } from './utils';\n\ntype PipelineVisualizationSurfaceProps = {\n  model: Model;\n  componentFactory: ComponentFactory;\n  showControlBar?: boolean;\n  noScrollbar?: boolean;\n};\n\nconst PipelineVisualizationSurface: React.FC<PipelineVisualizationSurfaceProps> = ({\n  model,\n  componentFactory,\n  showControlBar = false,\n  noScrollbar = false,\n}) => {\n  const [vis, setVis] = React.useState<Controller>(null);\n  const [maxSize, setMaxSize] = React.useState(null);\n  const [width, setWidth] = React.useState(null);\n  const storedGraphModel = React.useRef(null);\n\n  const layout: PipelineLayout = model.graph.layout as PipelineLayout;\n\n  const onLayoutUpdate = React.useCallback(\n    (nodes: Node[]) => {\n      const nodeBounds = nodes.map((node) => node.getBounds());\n      const maxWidth = Math.floor(\n        nodeBounds.map((bounds) => bounds.width).reduce((w1, w2) => Math.max(w1, w2), 0),\n      );\n      const maxHeight = Math.floor(\n        nodeBounds.map((bounds) => bounds.height).reduce((h1, h2) => Math.max(h1, h2), 0),\n      );\n      const maxObject = nodeBounds.find((nb) => nb.height === maxHeight);\n\n      const maxX = Math.floor(\n        nodeBounds.map((bounds) => bounds.x).reduce((x1, x2) => Math.max(x1, x2), 0),\n      );\n      const maxY = Math.floor(\n        nodeBounds.map((bounds) => bounds.y).reduce((y1, y2) => Math.max(y1, y2), 0),\n      );\n\n      let horizontalMargin = 0;\n      let verticalMargin = 0;\n      if (layout) {\n        horizontalMargin = getLayoutData(layout).marginx || 0;\n        verticalMargin = getLayoutData(layout).marginy || 0;\n      }\n      const finallyTaskHeight = maxObject.y + maxHeight + DROP_SHADOW_SPACING + verticalMargin * 2;\n      const regularTaskHeight = maxY + NODE_HEIGHT + DROP_SHADOW_SPACING + verticalMargin * 2;\n\n      setMaxSize({\n        height: Math.max(finallyTaskHeight, regularTaskHeight) + TOOLBAR_HEIGHT,\n        width: Math.max(\n          maxX + maxWidth + DROP_SHADOW_SPACING + horizontalMargin * 2,\n          GRAPH_MIN_WIDTH,\n        ),\n      });\n    },\n    [setMaxSize, layout],\n  );\n\n  React.useEffect(() => {\n    if (vis === null) {\n      const visualization = new Visualization();\n      visualization.registerLayoutFactory(layoutFactory);\n      visualization.registerComponentFactory(componentFactory);\n      visualization.fromModel(model);\n      visualization.addEventListener(GRAPH_POSITION_CHANGE_EVENT, () => {\n        storedGraphModel.current = visualization.getGraph().toModel();\n      });\n      visualization.addEventListener(GRAPH_LAYOUT_END_EVENT, () => {\n        onLayoutUpdate(visualization.getGraph().getNodes());\n      });\n      setVis(visualization);\n    } else {\n      const graph = storedGraphModel.current;\n      if (graph) {\n        model.graph = graph;\n      }\n      vis.fromModel(model);\n      vis.getGraph().layout();\n    }\n  }, [vis, model, onLayoutUpdate, componentFactory]);\n\n  React.useEffect(() => {\n    if (model && vis) {\n      const graph = storedGraphModel.current;\n      if (graph) {\n        model.graph = graph;\n      }\n      vis.fromModel(model);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [model, vis]);\n\n  if (!vis) return null;\n\n  const controlBar = (controller) => (\n    <TopologyControlBar\n      controlButtons={createTopologyControlButtons({\n        ...defaultControlButtonsOptions,\n        zoomInCallback: action(() => {\n          controller.getGraph().scaleBy(4 / 3);\n        }),\n        zoomOutCallback: action(() => {\n          controller.getGraph().scaleBy(0.75);\n        }),\n        fitToScreenCallback: action(() => {\n          controller.getGraph().fit(80);\n        }),\n        resetViewCallback: action(() => {\n          controller.getGraph().reset();\n          controller.getGraph().layout();\n        }),\n        legend: false,\n      })}\n    />\n  );\n\n  return (\n    <Measure\n      bounds\n      onResize={(contentRect) => {\n        setWidth(contentRect.bounds?.width);\n      }}\n    >\n      {({ measureRef }) => (\n        <div ref={measureRef}>\n          <div\n            style={{\n              height: noScrollbar\n                ? maxSize?.height\n                : Math.min((GRAPH_MAX_HEIGHT_PERCENT / 100) * window.innerHeight, maxSize?.height),\n              width: noScrollbar ? maxSize?.width : Math.min(maxSize?.width, width),\n            }}\n          >\n            <VisualizationProvider controller={vis}>\n              {showControlBar ? (\n                <TopologyView controlBar={controlBar(vis)}>\n                  <VisualizationSurface />\n                </TopologyView>\n              ) : (\n                <VisualizationSurface />\n              )}\n            </VisualizationProvider>\n          </div>\n        </div>\n      )}\n    </Measure>\n  );\n};\n\nexport default PipelineVisualizationSurface;\n","import * as React from 'react';\nimport { FormGroup, Flex, FlexItem, Tile, Text } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { ConfigMapKind } from 'public/module/k8s/types';\nimport { PacConfigurationTypes } from '../consts';\nimport { RepositoryFormValues } from '../types';\nimport GithubSection from './GithubSection';\nimport WebhookSection from './WebhookSection';\n\ntype ConfigTypeSectionProps = {\n  pac: ConfigMapKind;\n  formContextField?: string;\n};\n\nconst ConfigTypeSection: React.FC<ConfigTypeSectionProps> = ({ pac, formContextField }) => {\n  const { values, setFieldValue } = useFormikContext<FormikValues & RepositoryFormValues>();\n  const fieldPrefix = formContextField ? `${formContextField}.` : '';\n  const { method } = _.get(values, formContextField) || values;\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Text>\n        {t(\n          'pipelines-plugin~A GitHub App is already set up for this cluster. To use it, install the GitHub app on your personal account or GitHub organization.',\n        )}\n      </Text>\n      <br />\n      <FormSection extraMargin>\n        <FormGroup fieldId=\"method\">\n          <Flex>\n            <FlexItem span={3}>\n              <Tile\n                data-test=\"github\"\n                title={t('pipelines-plugin~Use GitHub App')}\n                onClick={() => setFieldValue(`${fieldPrefix}method`, PacConfigurationTypes.GITHUB)}\n                isSelected={method === PacConfigurationTypes.GITHUB}\n              />\n            </FlexItem>\n            <FlexItem span={3}>\n              <Tile\n                data-test=\"webhook\"\n                title={t('pipelines-plugin~Setup a webhook')}\n                onClick={() => setFieldValue(`${fieldPrefix}method`, PacConfigurationTypes.WEBHOOK)}\n                isSelected={method === PacConfigurationTypes.WEBHOOK}\n              />\n            </FlexItem>\n          </Flex>\n        </FormGroup>\n      </FormSection>\n      <FormSection fullWidth={method === PacConfigurationTypes.WEBHOOK || !fieldPrefix}>\n        {method === PacConfigurationTypes.GITHUB && <GithubSection pac={pac} />}\n        {method === PacConfigurationTypes.WEBHOOK && (\n          <WebhookSection pac={pac} formContextField={formContextField} />\n        )}\n      </FormSection>\n    </>\n  );\n};\n\nexport default ConfigTypeSection;\n","import * as React from 'react';\nimport { Text } from '@patternfly/react-core';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { ConfigMapKind } from '@console/internal/module/k8s/types';\n\ntype GithubSectionProps = {\n  pac: ConfigMapKind;\n};\n\nconst GithubSection: React.FC<GithubSectionProps> = ({ pac }) => {\n  const { t } = useTranslation();\n  const appLink = pac?.data?.['app-link'] ?? '';\n  return (\n    <Text>\n      <Trans t={t} ns=\"pipelines-plugin\">\n        Use{' '}\n        <a target=\"_blank\" href={appLink} rel=\"noopener noreferrer\">\n          {appLink}\n        </a>{' '}\n        link to install the GitHub Application to your repositories in your organisation/account.\n      </Trans>\n    </Text>\n  );\n};\n\nexport default GithubSection;\n","import * as React from 'react';\nimport { List, ListItem } from '@patternfly/react-core';\nimport { useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { GitProvider } from '@console/git-service';\nimport { RepositoryFormValues } from '../types';\n\ntype PermissionsSectionProps = {\n  formContextField?: string;\n};\n\nconst PermissionsSection: React.FC<PermissionsSectionProps> = ({ formContextField }) => {\n  const { t } = useTranslation();\n  const { values } = useFormikContext<RepositoryFormValues>();\n  const { gitProvider } = _.get(values, formContextField) || values;\n\n  let permission;\n  switch (gitProvider) {\n    case GitProvider.GITHUB:\n      permission = (\n        <List>\n          <ListItem>{t('pipelines-plugin~Commit comments')}</ListItem>\n          <ListItem>{t('pipelines-plugin~Issue comments')}</ListItem>\n          <ListItem>{t('pipelines-plugin~Pull request')}</ListItem>\n          <ListItem>{t('pipelines-plugin~Pushes')}</ListItem>\n        </List>\n      );\n      break;\n    case GitProvider.GITLAB:\n      permission = (\n        <List>\n          <ListItem>{t('pipelines-plugin~Merge request Events')}</ListItem>\n          <ListItem>{t('pipelines-plugin~Push Events')}</ListItem>\n        </List>\n      );\n      break;\n    case GitProvider.BITBUCKET:\n      permission = (\n        <List>\n          <ListItem>{t('pipelines-plugin~Repository: Push')}</ListItem>\n          <ListItem>{t('pipelines-plugin~Pull Request: Created')}</ListItem>\n          <ListItem>{t('pipelines-plugin~Pull Request: Updated')}</ListItem>\n          <ListItem>{t('pipelines-plugin~Pull Request: Comment Created')}</ListItem>\n        </List>\n      );\n      break;\n    default:\n      permission = null;\n  }\n  return permission;\n};\n\nexport default PermissionsSection;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { FLAG_OPENSHIFT_BUILDCONFIG } from '@console/dev-console/src/const';\nimport { NormalizedBuilderImages } from '@console/dev-console/src/utils/imagestream-utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { connectToFlags } from '@console/internal/reducers/connectToFlags';\nimport { FlagsObject } from '@console/internal/reducers/features';\nimport { FLAG_OPENSHIFT_PIPELINE, CLUSTER_PIPELINE_NS } from '../../../const';\nimport { PipelineModel } from '../../../models';\nimport { PipelineKind } from '../../../types';\nimport PipelineTemplate from './PipelineTemplate';\n\nimport './PipelineSection.scss';\n\ntype PipelineSectionProps = {\n  flags: FlagsObject;\n  builderImages: NormalizedBuilderImages;\n  existingPipeline?: PipelineKind;\n};\n\nconst usePipelineAccessReview = (): boolean => {\n  const canListPipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: CLUSTER_PIPELINE_NS,\n    verb: 'list',\n  });\n\n  const canCreatePipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  return canListPipelines && canCreatePipelines;\n};\n\nconst PipelineSection: React.FC<PipelineSectionProps> = ({\n  flags,\n  builderImages,\n  existingPipeline,\n}) => {\n  const { t } = useTranslation();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n\n  /* Set pipeline.enabled to true if the user has access to create pipelines and the Builds are not installed */\n  React.useEffect(() => {\n    if (flags[FLAG_OPENSHIFT_PIPELINE] && !flags[FLAG_OPENSHIFT_BUILDCONFIG]) {\n      setFieldValue('pipeline.enabled', true);\n    }\n  }, [setFieldValue, flags]);\n\n  const hasCreatePipelineAccess = usePipelineAccessReview();\n  if (flags[FLAG_OPENSHIFT_PIPELINE] && hasCreatePipelineAccess) {\n    return (\n      <FormSection>\n        {values.image.selected || values.build.strategy === 'Docker' ? (\n          <PipelineTemplate builderImages={builderImages} existingPipeline={existingPipeline} />\n        ) : (\n          <Alert\n            isInline\n            variant=\"info\"\n            title={t(\n              'pipelines-plugin~Select a Builder Image and resource to see if there is a pipeline template available for this runtime.',\n            )}\n          />\n        )}\n      </FormSection>\n    );\n  }\n\n  return null;\n};\n\nexport default connectToFlags<PipelineSectionProps>(\n  FLAG_OPENSHIFT_PIPELINE,\n  FLAG_OPENSHIFT_BUILDCONFIG,\n)(PipelineSection);\n","import * as React from 'react';\nimport { Alert, ExpandableSection, Tooltip } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  BuildOptions,\n  ReadableResourcesNames,\n} from '@console/dev-console/src/components/import/import-types';\nimport { NormalizedBuilderImages } from '@console/dev-console/src/utils/imagestream-utils';\nimport { GitProvider, getGitService } from '@console/git-service/src';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { k8sList } from '@console/internal/module/k8s';\nimport {\n  FLAG_OPENSHIFT_PIPELINE_AS_CODE,\n  FUNC_PIPELINE_RUNTIME_LABEL,\n} from '@console/pipelines-plugin/src/const';\nimport {\n  BlueInfoCircleIcon,\n  CheckboxField,\n  DropdownField,\n  RadioGroupField,\n  useFlag,\n} from '@console/shared';\nimport { CLUSTER_PIPELINE_NS, PIPELINE_RUNTIME_LABEL } from '../../../const';\nimport { PipelineModel } from '../../../models';\nimport { PipelineKind } from '../../../types';\nimport PipelineVisualization from '../../pipelines/detail-page-tabs/pipeline-details/PipelineVisualization';\nimport { PipelineType } from '../import-types';\nimport PacSection from './PacSection';\nimport './PacSection.scss';\n\nconst labelType = 'pipeline.openshift.io/type';\nconst labelDocker = 'pipeline.openshift.io/strategy';\n\nconst getAlertText = (\n  isDockerStrategy: boolean,\n  builderImage: string,\n  resourceType: string,\n): string => {\n  const MISSING_DOCKERFILE_LABEL_TEXT = i18next.t(\n    'pipelines-plugin~The pipeline template for Dockerfiles is not available at this time.',\n  );\n  if (isDockerStrategy) return MISSING_DOCKERFILE_LABEL_TEXT;\n\n  return i18next.t(\n    'pipelines-plugin~There are no pipeline templates available for {{builderImage}} and {{resourceType}} combination.',\n    { builderImage, resourceType },\n  );\n};\n\ntype PipelineTemplateProps = {\n  builderImages: NormalizedBuilderImages;\n  existingPipeline?: PipelineKind;\n};\n\nconst PipelineTemplate: React.FC<PipelineTemplateProps> = ({ builderImages, existingPipeline }) => {\n  const { t } = useTranslation();\n  const [noTemplateForRuntime, setNoTemplateForRuntime] = React.useState(false);\n  const [isPacRepo, setIsPacRepo] = React.useState(false);\n  const [isPipelineTypeChanged, setIsPipelineTypeChanged] = React.useState(false);\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const [pipelineTemplates, setPipelineTemplates] = React.useState([]);\n  const pipelineStorageRef = React.useRef<{ [image: string]: PipelineKind[] }>({});\n  const isRepositoryEnabled = useFlag(FLAG_OPENSHIFT_PIPELINE_AS_CODE);\n\n  const {\n    values: {\n      import: { recommendedStrategy, selectedStrategy },\n      git: { url, type, ref, dir, secretResource },\n      pipeline,\n      image,\n      build: { option: buildOption, strategy },\n      resources,\n    },\n    setFieldValue,\n    setFieldTouched,\n  } = useFormikContext<FormikValues>();\n\n  const isDockerStrategy = strategy === 'Docker';\n  const isPipelineAttached = !_.isEmpty(existingPipeline);\n  const isServerlessFunctionStrategy = strategy === 'ServerlessFunction';\n\n  const getPipelineNames = (pipelines: PipelineKind[]): string =>\n    pipelines\n      .map((pl) => pl.metadata?.name)\n      .sort()\n      .join(',');\n\n  const handlePipelineTypeChange = React.useCallback(async () => {\n    const gitService = url && getGitService(url, type, ref, dir, secretResource);\n    const disallowedPacGitTypes = [GitProvider.GITEA];\n    const isPacRepository =\n      gitService &&\n      !disallowedPacGitTypes.includes(type) &&\n      isRepositoryEnabled &&\n      (await gitService.isTektonFolderPresent());\n    if (isPacRepository) {\n      setIsPacRepo(true);\n      setFieldValue('pipeline.enabled', true);\n      setFieldValue('pipeline.type', PipelineType.PAC);\n      setFieldValue('pac.repository.gitUrl', url);\n      setFieldValue('pac.pipelineType', PipelineType.PAC);\n      setFieldValue('pac.pipelineEnabled', true);\n    } else {\n      setFieldValue('pipeline.type', PipelineType.PIPELINE);\n      setFieldValue('pac.repository.gitUrl', '');\n      setFieldValue('pac.pipelineType', PipelineType.PIPELINE);\n      setFieldValue('pac.pipelineEnabled', false);\n    }\n    setIsPipelineTypeChanged(true);\n  }, [url, type, ref, dir, secretResource, isRepositoryEnabled, setFieldValue]);\n\n  React.useEffect(() => {\n    pipelineStorageRef.current = {};\n  }, [selectedStrategy]);\n\n  React.useEffect(() => {\n    setFieldValue('pac.pipelineEnabled', !!pipeline.enabled);\n    // Added setTimeout to re-validate yup validation after onchange event\n    setTimeout(() => {\n      setFieldTouched('pipeline.enabled', true);\n    }, 0);\n  }, [pipeline.enabled, setFieldValue, setFieldTouched]);\n\n  React.useEffect(() => {\n    if (buildOption === BuildOptions.PIPELINES) {\n      setFieldValue('pipeline.enabled', true);\n      setFieldValue('pac.pipelineEnabled', true);\n    }\n  }, [buildOption, setFieldValue]);\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const builderPipelineLabel = { [PIPELINE_RUNTIME_LABEL]: image.selected };\n    const dockerPipelineLabel = { [labelDocker]: 'docker' };\n    const funcPipelineLabel = { [FUNC_PIPELINE_RUNTIME_LABEL]: image.selected };\n\n    let labelSelector;\n    if (isDockerStrategy) {\n      labelSelector = dockerPipelineLabel;\n    } else if (isServerlessFunctionStrategy) {\n      labelSelector = funcPipelineLabel;\n    } else {\n      labelSelector = builderPipelineLabel;\n    }\n    const fetchPipelineTemplate = async () => {\n      let fetchedPipelines: PipelineKind[] = null;\n      if (\n        !pipelineStorageRef.current[image.selected] ||\n        !pipelineStorageRef.current[image.selected]?.length\n      ) {\n        fetchedPipelines = (await k8sList(PipelineModel, {\n          ns: CLUSTER_PIPELINE_NS,\n          labelSelector,\n        })) as PipelineKind[];\n      }\n      if (ignore) return;\n\n      if (fetchedPipelines) {\n        pipelineStorageRef.current[image.selected] = fetchedPipelines;\n      }\n\n      const imagePipelines: PipelineKind[] = pipelineStorageRef.current[image.selected] || [];\n      const resourceSpecificPipelines = imagePipelines.filter(\n        (pl) => pl.metadata?.labels?.[labelType] === resources,\n      );\n      const candidatePipelines = [\n        ...resourceSpecificPipelines,\n        ...imagePipelines.filter((pl) => !pl.metadata?.labels?.[labelType]),\n      ];\n\n      if (getPipelineNames(pipelineTemplates) !== getPipelineNames(candidatePipelines)) {\n        setPipelineTemplates(candidatePipelines);\n      }\n      const pipelineTemplate = candidatePipelines[0];\n\n      if (isPipelineAttached) {\n        setFieldValue('pipeline.template', existingPipeline);\n        setFieldValue('pipeline.templateSelected', existingPipeline.metadata.name);\n        setNoTemplateForRuntime(false);\n      } else if (\n        pipeline.templateSelected &&\n        pipelineTemplates.some((pl) => pl.metadata.name === pipeline.templateSelected)\n      ) {\n        setFieldValue(\n          'pipeline.template',\n          pipelineTemplates.find((pl) => pl.metadata.name === pipeline.templateSelected),\n        );\n        setNoTemplateForRuntime(false);\n      } else if (pipelineTemplate) {\n        setFieldValue('pipeline.template', pipelineTemplate);\n        setFieldValue('pipeline.templateSelected', pipelineTemplate.metadata.name);\n        setNoTemplateForRuntime(false);\n      } else {\n        setFieldValue('pipeline.template', null);\n        setFieldValue('pipeline.templateSelected', '');\n        setNoTemplateForRuntime(true);\n      }\n    };\n\n    fetchPipelineTemplate();\n    if (!isPipelineAttached && !isPipelineTypeChanged) {\n      handlePipelineTypeChange();\n    }\n    return () => {\n      ignore = true;\n    };\n  }, [\n    resources,\n    recommendedStrategy,\n    image.selected,\n    isDockerStrategy,\n    setFieldValue,\n    pipeline.templateSelected,\n    pipelineTemplates,\n    isPipelineAttached,\n    existingPipeline,\n    handlePipelineTypeChange,\n    isServerlessFunctionStrategy,\n    isPipelineTypeChanged,\n  ]);\n\n  const pipelineTemplateItems = React.useMemo(() => {\n    const items = {};\n    for (const img of pipelineTemplates) {\n      const { name } = img.metadata;\n      items[name] = name;\n    }\n    if (pipeline.templateSelected) {\n      items[pipeline.templateSelected] = pipeline.templateSelected;\n    }\n    return items;\n  }, [pipeline.templateSelected, pipelineTemplates]);\n\n  if (noTemplateForRuntime) {\n    const builderImageTitle =\n      builderImages?.[image.selected]?.title || t('pipelines-plugin~this Builder Image');\n    const resourceName = t(ReadableResourcesNames[resources]);\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={getAlertText(isDockerStrategy, builderImageTitle, resourceName)}\n      />\n    );\n  }\n\n  const onChangePipelineType = (value: PipelineType) => {\n    setFieldValue('pac.pipelineType', value);\n    setFieldValue('pipeline.type', value);\n    // Added setTimeout to re-validate yup validation after onchange event\n    setTimeout(() => {\n      setFieldTouched('pipeline.type', true);\n    }, 0);\n  };\n\n  return pipeline.template ? (\n    <>\n      {buildOption !== BuildOptions.PIPELINES && (\n        <CheckboxField\n          label={t('pipelines-plugin~Add pipeline')}\n          name=\"pipeline.enabled\"\n          isDisabled={isPipelineAttached}\n        />\n      )}\n      {pipeline.enabled && isPacRepo && (\n        <>\n          <span className=\"pf-c-form__label-text\">{t('pipelines-plugin~Pipeline')}</span>\n          <RadioGroupField\n            className=\"odc-pipeline-section-pac__radio-intent\"\n            name={'pipeline.type'}\n            onChange={(val: string) => onChangePipelineType(val as PipelineType)}\n            options={[\n              {\n                value: PipelineType.PAC,\n                label: (\n                  <>\n                    {t('pipelines-plugin~Build, deploy and configure a Pipeline Repository')}\n                    {'  '}\n                    <Tooltip\n                      position=\"right\"\n                      content={\n                        <p>\n                          {t(\n                            'pipelines-plugin~Automatically configure a new Pipeline Repository for your Git repository. This will automatically trigger new PipelineRuns on new commits or Pull Requests based on your configuration in your source code.',\n                          )}\n                        </p>\n                      }\n                    >\n                      <BlueInfoCircleIcon />\n                    </Tooltip>\n                  </>\n                ),\n                activeChildren: <PacSection />,\n              },\n              {\n                value: PipelineType.PIPELINE,\n                label: (\n                  <>\n                    {t('pipelines-plugin~Use Pipeline from this cluster')}\n                    {'  '}\n                    <Tooltip\n                      position=\"right\"\n                      content={\n                        <p>\n                          {t(\n                            'pipelines-plugin~Use an installed Pipeline from your cluster to build and deploy your component. Pipelines are from \"openshift\" namespace that support the relevant runtime are shown below.',\n                          )}\n                        </p>\n                      }\n                    >\n                      <BlueInfoCircleIcon />\n                    </Tooltip>\n                  </>\n                ),\n                activeChildren: (\n                  <>\n                    <DropdownField\n                      name=\"pipeline.templateSelected\"\n                      title={pipelineTemplateItems[pipeline.templateSelected]}\n                      items={pipelineTemplateItems}\n                      disabled={isPipelineAttached}\n                      fullWidth\n                    />\n                    <br />\n                    <ExpandableSection\n                      toggleText={`${\n                        isExpanded ? t('pipelines-plugin~Hide') : t('pipelines-plugin~Show')\n                      } ${t('pipelines-plugin~pipeline visualization')}`}\n                      isExpanded={isExpanded}\n                      onToggle={() => setIsExpanded(!isExpanded)}\n                    >\n                      {isExpanded && <PipelineVisualization pipeline={pipeline.template} />}\n                    </ExpandableSection>\n                  </>\n                ),\n              },\n            ]}\n          />\n        </>\n      )}\n      {pipeline.enabled && !isPacRepo && (\n        <>\n          <DropdownField\n            name=\"pipeline.templateSelected\"\n            title={pipelineTemplateItems[pipeline.templateSelected]}\n            items={pipelineTemplateItems}\n            disabled={isPipelineAttached}\n            label={t('pipelines-plugin~Pipeline')}\n            fullWidth\n          />\n          <ExpandableSection\n            toggleText={`${\n              isExpanded ? t('pipelines-plugin~Hide') : t('pipelines-plugin~Show')\n            } ${t('pipelines-plugin~pipeline visualization')}`}\n            isExpanded={isExpanded}\n            onToggle={() => setIsExpanded(!isExpanded)}\n          >\n            {isExpanded && <PipelineVisualization pipeline={pipeline.template} />}\n          </ExpandableSection>\n        </>\n      )}\n    </>\n  ) : (\n    <LoadingInline />\n  );\n};\n\nexport default PipelineTemplate;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { GitProvider } from '@console/git-service/src';\nimport { ExpandCollapse, Loading } from '@console/internal/components/utils';\nimport { usePacInfo } from '@console/pipelines-plugin/src/components/repository/hooks/pac-hook';\nimport { recommendRepositoryName } from '@console/pipelines-plugin/src/components/repository/repository-form-utils';\nimport ConfigTypeSection from '@console/pipelines-plugin/src/components/repository/sections/ConfigTypeSection';\nimport WebhookSection from '@console/pipelines-plugin/src/components/repository/sections/WebhookSection';\nimport { PacConfigurationTypes } from '../../repository/consts';\nimport InfoPanel from './PacInfoPanel';\nimport './PacSection.scss';\n\nconst PacSection: React.FC = () => {\n  const { t } = useTranslation();\n  const formContextField = 'pac.repository';\n  const [githubAppAvailable, setGithubAppAvailable] = React.useState(false);\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const {\n    git: { url, type },\n  } = values;\n  const [pac, loaded] = usePacInfo();\n\n  React.useEffect(() => {\n    if (loaded && !!pac && pac.data['app-link']) {\n      setGithubAppAvailable(true);\n      setFieldValue('pac.repository.githubAppAvailable', true);\n      setFieldValue('pac.repository.method', PacConfigurationTypes.GITHUB);\n    } else {\n      setFieldValue('pac.repository.method', PacConfigurationTypes.WEBHOOK);\n    }\n  }, [pac, loaded, setFieldValue]);\n\n  React.useEffect(() => {\n    setFieldValue('pac.repository.gitUrl', url);\n    setFieldValue('name', recommendRepositoryName(url));\n    setFieldValue('pac.repository.gitProvider', type);\n  }, [setFieldValue, url, type]);\n\n  React.useEffect(() => {\n    setFieldValue('pac.repository.name', values.name);\n  }, [setFieldValue, values.name]);\n\n  return pac ? (\n    <>\n      <ExpandCollapse\n        textCollapsed={t('pipelines-plugin~View details')}\n        textExpanded={t('pipelines-plugin~Hide details')}\n      >\n        <InfoPanel />\n      </ExpandCollapse>\n\n      {githubAppAvailable && type === GitProvider.GITHUB ? (\n        <div className=\"odc-pipeline-section-pac__config-type\">\n          <ConfigTypeSection pac={pac} formContextField={formContextField} />\n        </div>\n      ) : (\n        <WebhookSection pac={pac} formContextField={formContextField} />\n      )}\n    </>\n  ) : (\n    <Loading />\n  );\n};\n\nexport default PacSection;\n","import * as React from 'react';\nimport { ClipboardCopy, ClipboardCopyVariant } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  ReadableResourcesNames,\n  Resources,\n} from '@console/dev-console/src/components/import/import-types';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { useActiveNamespace } from '@console/shared/src/hooks/useActiveNamespace';\nimport './PacSection.scss';\n\nconst InfoPanel: React.FC = () => {\n  const { t } = useTranslation();\n  const [namespace] = useActiveNamespace();\n  const {\n    values: { name, resources },\n  } = useFormikContext<FormikValues>();\n  const translatedResourceName = ReadableResourcesNames[resources as Resources]\n    ? t(ReadableResourcesNames[resources as Resources])\n    : '';\n\n  return (\n    <FormSection>\n      <div className=\"odc-pipeline-section-pac__info-panel\">\n        <div className=\"odc-pipeline-section-pac__info-text\">\n          <Trans t={t} ns=\"pipelines-plugin\" values={{ translatedResourceName, name }}>\n            Once your Pipeline Repository is configured, in order to update your{' '}\n            {{ translatedResourceName }} <code className=\"co-code\">{{ name }}</code> automatically,\n            update the following in your <code className=\"co-code\">.tekton</code> PipelineRun:\n          </Trans>\n        </div>\n        <ul>\n          <li>\n            <strong> {translatedResourceName}: </strong>\n            <ClipboardCopy variant={ClipboardCopyVariant.inlineCompact}>{name}</ClipboardCopy>\n          </li>\n          <li className=\"odc-pipeline-section-pac__clipboard\">\n            <strong>\n              {t('pipelines-plugin~Internal image registry:')}\n              {'  '}\n            </strong>\n            <ClipboardCopy variant={ClipboardCopyVariant.inlineCompact}>\n              image-registry.openshift-image-registry.svc:5000/{namespace}/{name}\n            </ClipboardCopy>\n          </li>\n        </ul>\n      </div>\n    </FormSection>\n  );\n};\n\nexport default InfoPanel;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { ImportStrategy, DetectedBuildType } from '@console/git-service';\nimport { PipelineKind } from '@console/pipelines-plugin/src/types';\nimport { NormalizedBuilderImages } from '../../../utils/imagestream-utils';\nimport FormSection from '../section/FormSection';\nimport BuilderImageSelector from './BuilderImageSelector';\nimport BuilderImageTagSelector from './BuilderImageTagSelector';\n\nexport interface ImageSectionProps {\n  builderImages: NormalizedBuilderImages;\n  existingPipeline?: PipelineKind;\n}\n\nconst BuilderSection: React.FC<ImageSectionProps> = ({ builderImages, existingPipeline }) => {\n  const {\n    values: {\n      image,\n      import: { showEditImportStrategy, strategies, recommendedStrategy },\n    },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n\n  const handleBuilderImageSelection = React.useCallback(\n    async (detectedBuildTypes?: DetectedBuildType[]) => {\n      setFieldValue('image.isRecommending', false);\n      const recommendedBuildType =\n        builderImages &&\n        detectedBuildTypes?.find(\n          ({ type: recommended }) => recommended && builderImages.hasOwnProperty(recommended),\n        );\n      if (recommendedBuildType && recommendedBuildType.type) {\n        setFieldValue('image.couldNotRecommend', false);\n        setFieldValue('image.recommended', recommendedBuildType.type);\n      } else {\n        setFieldValue('image.couldNotRecommend', true);\n        setFieldValue('image.recommended', '');\n      }\n    },\n    [builderImages, setFieldValue],\n  );\n\n  React.useEffect(() => {\n    if (builderImages && recommendedStrategy && recommendedStrategy.type !== ImportStrategy.S2I) {\n      const s2iStrategy = strategies.find((s) => s.type === ImportStrategy.S2I);\n      if (s2iStrategy) {\n        setFieldValue('image.isRecommending', true);\n        setFieldValue('import.selectedStrategy.detectedCustomData', s2iStrategy.detectedCustomData);\n        handleBuilderImageSelection(s2iStrategy.detectedCustomData);\n      }\n      image.selected\n        ? setFieldValue('import.strategyChanged', true)\n        : setFieldValue('import.strategyChanged', false);\n    }\n  }, [\n    builderImages,\n    handleBuilderImageSelection,\n    image.selected,\n    recommendedStrategy,\n    setFieldValue,\n    strategies,\n  ]);\n\n  if (!builderImages) {\n    return null;\n  }\n\n  return (\n    <>\n      <FormSection fullWidth style={!showEditImportStrategy ? { display: 'none' } : {}}>\n        <BuilderImageSelector\n          loadingImageStream={!builderImages}\n          builderImages={builderImages}\n          existingPipeline={existingPipeline}\n        />\n      </FormSection>\n      {builderImages[image.selected] && image.tag && (\n        <FormSection>\n          <BuilderImageTagSelector\n            selectedBuilderImage={builderImages[image.selected]}\n            selectedImageTag={image.tag}\n          />\n        </FormSection>\n      )}\n    </>\n  );\n};\n\nexport default BuilderSection;\n","import * as React from 'react';\nimport { ExpandableSection } from '@patternfly/react-core';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ImportStrategy, getGitService } from '@console/git-service/src';\nimport { getStrategyType } from '@console/internal/components/build';\nimport { LoadingBox } from '@console/internal/components/utils';\nimport { FLAG_OPENSHIFT_PIPELINE_AS_CODE } from '@console/pipelines-plugin/src/const';\nimport { EnvironmentField, useDebounceCallback, useFlag } from '@console/shared/src';\nimport {\n  isPreferredStrategyAvailable,\n  useClusterBuildStrategy,\n} from '../../../../utils/shipwright-build-hook';\nimport { AppResources } from '../../../edit-application/edit-application-types';\nimport BuildConfigSection from '../../advanced/BuildConfigSection';\nimport { useBuilderImageEnvironments } from '../../builder/builderImageHooks';\nimport { BuildOptions, GitImportFormData } from '../../import-types';\nimport FormSection from '../FormSection';\nimport { BuildOption } from './BuildOptions';\nimport { BuildStrategySelector } from './BuildStrategySelector';\n\ntype BuildSectionProps = {\n  values: FormikValues & GitImportFormData;\n  appResources?: AppResources;\n};\n\nexport const BuildSection: React.FC<BuildSectionProps> = ({ values, appResources }) => {\n  const { t } = useTranslation();\n  const {\n    project: { name: namespace },\n    build: { option: buildOption, env: buildEnv },\n    image: { selected: selectedImage, tag: selectedTag },\n    import: { selectedStrategy, knativeFuncLoaded: funcLoaded },\n  } = values;\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const isRepositoryEnabled = useFlag(FLAG_OPENSHIFT_PIPELINE_AS_CODE);\n  const [strategy] = useClusterBuildStrategy();\n\n  const [environments, envsLoaded] = useBuilderImageEnvironments(selectedImage, selectedTag);\n\n  const envs = React.useMemo(() => {\n    if (selectedStrategy.type === ImportStrategy.SERVERLESS_FUNCTION) {\n      return buildEnv;\n    }\n\n    if (buildOption === BuildOptions.BUILDS) {\n      const strategyType = getStrategyType(appResources?.buildConfig?.data?.spec?.strategy?.type);\n      const buildConfigObj = appResources?.buildConfig?.data || {\n        metadata: {\n          namespace,\n        },\n      };\n      return (buildConfigObj.spec?.strategy?.[strategyType]?.env || []).filter(\n        (e) => !environments.some((env) => env.key === e.name),\n      );\n    }\n\n    if (buildOption === BuildOptions.SHIPWRIGHT_BUILD) {\n      const swBuildObj = appResources?.shipwrightBuild?.data || {\n        metadata: {\n          namespace,\n        },\n      };\n      return (swBuildObj.spec?.env || []).filter(\n        (e) => !environments.some((env) => env.key === e.name),\n      );\n    }\n\n    return [];\n  }, [\n    appResources?.buildConfig?.data,\n    appResources?.shipwrightBuild?.data,\n    buildEnv,\n    buildOption,\n    environments,\n    namespace,\n    selectedStrategy.type,\n  ]);\n\n  /* Auto-select Pipelines as Build option for PAC Repositories */\n  const autoSelectPipelines = useDebounceCallback(() => {\n    const { git, formType } = values || {};\n\n    if (formType !== 'edit' && git?.url) {\n      const gitService = getGitService(\n        git?.url,\n        git?.type,\n        git?.ref,\n        git?.dir,\n        git?.secretResource,\n      );\n      const checkTektonFolder = async () => {\n        const res = await gitService?.isTektonFolderPresent();\n        if (isRepositoryEnabled && res) {\n          setFieldValue('build.option', BuildOptions.PIPELINES);\n        }\n      };\n      gitService && checkTektonFolder();\n    }\n  }, 2000);\n\n  React.useEffect(() => {\n    autoSelectPipelines();\n  }, [values?.git?.url, isRepositoryEnabled, setFieldValue, autoSelectPipelines]);\n\n  React.useEffect(() => {\n    if (values?.formType === 'edit' && values?.pipeline?.enabled) {\n      setFieldValue('build.option', BuildOptions.PIPELINES);\n    }\n    if (values?.formType === 'edit' && values.build.option === BuildOptions.BUILDS) {\n      setFieldValue('build.option', BuildOptions.BUILDS);\n    }\n    if (values?.formType === 'edit' && values.build.option === BuildOptions.SHIPWRIGHT_BUILD) {\n      setFieldValue('build.option', BuildOptions.SHIPWRIGHT_BUILD);\n    }\n  }, [values, setFieldValue]);\n\n  React.useEffect(() => {\n    if (\n      values?.formType !== 'edit' &&\n      values.pipeline?.enabled &&\n      values.build.option !== BuildOptions.PIPELINES\n    ) {\n      setFieldValue('pipeline.enabled', false);\n      setFieldValue('pac.pipelineEnabled', false);\n    }\n  }, [setFieldValue, values.pipeline?.enabled, values.build?.option, values.formType]);\n\n  /** NOTE: Shipwright Builds are not supported with Devfile Import Strategy currently and if required ClusterBuildStrategy for the ImportType is not available */\n  React.useEffect(() => {\n    if (values?.formType !== 'edit') {\n      if (\n        values?.import?.selectedStrategy?.type === ImportStrategy.DEVFILE ||\n        !isPreferredStrategyAvailable(values?.import?.selectedStrategy?.type, strategy)\n      ) {\n        setFieldValue('build.option', BuildOptions.BUILDS);\n      } else {\n        setFieldValue('build.option', BuildOptions.SHIPWRIGHT_BUILD);\n      }\n    }\n  }, [setFieldValue, values?.import?.selectedStrategy?.type, strategy, values?.formType]);\n\n  return (\n    <FormSection title={t('devconsole~Build')}>\n      <BuildOption\n        isDisabled={values?.formType === 'edit'}\n        importStrategy={values?.import?.selectedStrategy?.type}\n      />\n\n      {values.build?.option === BuildOptions.SHIPWRIGHT_BUILD && (\n        <BuildStrategySelector\n          formType={values?.formType}\n          importStrategy={values?.import?.selectedStrategy?.type}\n        />\n      )}\n      {values.isi || values.pipeline?.enabled ? null : (\n        <ExpandableSection toggleText={t('devconsole~Show advanced Build option')}>\n          {values.build?.option === BuildOptions.BUILDS && (\n            <BuildConfigSection showHeader={false} />\n          )}\n          {(\n            selectedStrategy.type === ImportStrategy.SERVERLESS_FUNCTION\n              ? funcLoaded ?? false\n              : envsLoaded\n          ) ? (\n            <EnvironmentField\n              name=\"build.env\"\n              label={t('devconsole~Environment variables (build and runtime)')}\n              obj={{ metadata: { namespace } }}\n              envs={envs}\n            />\n          ) : (\n            <LoadingBox />\n          )}\n        </ExpandableSection>\n      )}\n    </FormSection>\n  );\n};\n","import * as React from 'react';\nimport { FormGroup, Alert } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { PIPELINE_RUNTIME_LABEL } from '@console/pipelines-plugin/src/const';\nimport { PipelineKind } from '@console/pipelines-plugin/src/types';\nimport { getFieldId, ItemSelectorField } from '@console/shared';\nimport { NormalizedBuilderImages } from '../../../utils/imagestream-utils';\n\nexport interface BuilderImageSelectorProps {\n  loadingImageStream: boolean;\n  builderImages: NormalizedBuilderImages;\n  existingPipeline?: PipelineKind;\n}\n\nconst PipelineChangeAlert = (alertMessage: string) => (\n  <>\n    <Alert isInline variant=\"info\" title={alertMessage} />\n    <br />\n  </>\n);\n\nconst BuilderImageSelector: React.FC<BuilderImageSelectorProps> = ({\n  loadingImageStream,\n  builderImages,\n  existingPipeline,\n}) => {\n  const { t } = useTranslation();\n  const {\n    values: { pipeline, image },\n    setFieldValue,\n    setFieldTouched,\n    validateForm,\n  } = useFormikContext<FormikValues>();\n  const { selected, recommended, isRecommending, couldNotRecommend, tag } = image;\n  const [showPipelineWarning, setShowPipelineWarning] = React.useState(false);\n\n  const isPipelineAttached = !_.isEmpty(existingPipeline);\n\n  React.useEffect(() => {\n    if (selected && !tag) {\n      setFieldValue('image.tag', builderImages?.[selected]?.recentTag?.name ?? '');\n      setFieldTouched('image.tag', true);\n    }\n  }, [selected, setFieldValue, setFieldTouched, builderImages, tag]);\n\n  const fieldId = getFieldId('image.name', 'selector');\n  const imageName = builderImages?.[selected]?.title || t('devconsole~this Builder Image');\n\n  const changedPipelineWarning = pipeline.template\n    ? pipeline.template.metadata?.labels[PIPELINE_RUNTIME_LABEL] !==\n        existingPipeline?.metadata?.labels[PIPELINE_RUNTIME_LABEL] &&\n      PipelineChangeAlert(\n        t(\n          'devconsole~Changing to this builder image will update your associated Pipeline and remove any customization you may have applied.',\n        ),\n      )\n    : PipelineChangeAlert(\n        t(\n          'devconsole~There are no supported pipelines available for {{builderImage}}. Changing to this builder image will disconnect your associated Pipeline.',\n          { builderImage: imageName },\n        ),\n      );\n\n  if (_.keys(builderImages).length === 1) {\n    return (\n      <ItemSelectorField\n        itemList={builderImages}\n        name=\"image.selected\"\n        loadingItems={loadingImageStream}\n        recommended={recommended}\n      />\n    );\n  }\n\n  return (\n    <FormGroup fieldId={fieldId} label={t('devconsole~Builder Image')}>\n      {isRecommending && !recommended && (\n        <>\n          <LoadingInline /> {t('devconsole~Detecting recommended Builder Images...')}\n        </>\n      )}\n      {(couldNotRecommend || (recommended && !builderImages.hasOwnProperty(recommended))) && (\n        <>\n          <Alert\n            variant=\"warning\"\n            title={t('devconsole~Unable to detect the Builder Image.')}\n            isInline\n          >\n            {t('devconsole~Select the most appropriate one from the list to continue.')}\n          </Alert>\n          <br />\n        </>\n      )}\n      {showPipelineWarning && changedPipelineWarning}\n      <ItemSelectorField\n        itemList={builderImages}\n        name=\"image.selected\"\n        loadingItems={loadingImageStream}\n        recommended={image.recommended}\n        onSelect={() => {\n          setFieldValue('image.tag', '', false);\n          setFieldTouched('image.tag', true);\n          if (isPipelineAttached) {\n            setShowPipelineWarning(true);\n          }\n          validateForm();\n        }}\n      />\n    </FormGroup>\n  );\n};\n\nexport default BuilderImageSelector;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxField } from '@console/shared';\nimport FormSection from '../section/FormSection';\n\nexport interface BuildConfigSectionProps {\n  showHeader?: boolean;\n}\n\nconst BuildConfigSection: React.FC<BuildConfigSectionProps> = ({ showHeader }) => {\n  const { t } = useTranslation();\n  const {\n    values: { build },\n  } = useFormikContext<FormikValues>();\n\n  return (\n    <FormSection title={showHeader && t('devconsole~Build configuration')} extraMargin>\n      {typeof build?.triggers?.webhook === 'boolean' && (\n        <CheckboxField\n          name=\"build.triggers.webhook\"\n          label={t('devconsole~Configure a webhook build trigger')}\n        />\n      )}\n      {typeof build?.triggers?.image === 'boolean' && (\n        <CheckboxField\n          name=\"build.triggers.image\"\n          label={t('devconsole~Automatically build a new Image when the Builder Image changes')}\n        />\n      )}\n      {typeof build?.triggers?.config === 'boolean' && (\n        <CheckboxField\n          name=\"build.triggers.config\"\n          label={t('devconsole~Launch the first build when the build configuration is created')}\n        />\n      )}\n    </FormSection>\n  );\n};\n\nexport default BuildConfigSection;\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ImportStrategy } from '@console/git-service/src/types';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { LoadingInline, useAccessReview } from '@console/internal/components/utils';\nimport { CLUSTER_PIPELINE_NS, FLAG_OPENSHIFT_PIPELINE } from '@console/pipelines-plugin/src/const';\nimport { PipelineModel } from '@console/pipelines-plugin/src/models';\nimport { SingleDropdownField, SelectInputOption, useFlag } from '@console/shared';\nimport { FLAG_OPENSHIFT_BUILDCONFIG } from '../../../../const';\nimport {\n  isPreferredStrategyAvailable,\n  useClusterBuildStrategy,\n  useShipwrightBuilds,\n} from '../../../../utils/shipwright-build-hook';\nimport { BuildOptions, ReadableBuildOptions } from '../../import-types';\n\ntype BuildOptionProps = {\n  isDisabled: boolean;\n  importStrategy: ImportStrategy;\n};\n\nexport const usePipelineAccessReview = (): boolean => {\n  const canListPipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: CLUSTER_PIPELINE_NS,\n    verb: 'list',\n  });\n\n  const canCreatePipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  return canListPipelines && canCreatePipelines;\n};\n\nexport const BuildOption: React.FC<BuildOptionProps> = ({ isDisabled, importStrategy }) => {\n  const { t } = useTranslation();\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const isBuildV1Enabled = useFlag(FLAG_OPENSHIFT_BUILDCONFIG);\n  const isShipwrightBuildsEnabled = useShipwrightBuilds();\n  const [strategy, strategyLoaded] = useClusterBuildStrategy();\n  const isPipelineEnabled = useFlag(FLAG_OPENSHIFT_PIPELINE);\n  const hasCreatePipelineAccess = usePipelineAccessReview();\n\n  const fieldName = 'build.option';\n\n  const selectInputOptions = React.useMemo(() => {\n    const options: SelectInputOption[] = [];\n\n    if (isShipwrightBuildsEnabled && isPreferredStrategyAvailable(importStrategy, strategy)) {\n      options.push({\n        label: t(ReadableBuildOptions[BuildOptions.SHIPWRIGHT_BUILD]),\n        value: BuildOptions.SHIPWRIGHT_BUILD,\n        description: t(\n          'devconsole~Shipwright is an extensible framework for building container images on OpenShift Container Platform cluster.',\n        ),\n      });\n    }\n\n    if (isBuildV1Enabled) {\n      options.push({\n        label: t(ReadableBuildOptions[BuildOptions.BUILDS]),\n        value: BuildOptions.BUILDS,\n        description: t(\n          'devconsole~Build configuration describes build definitions used for transforming source code into a runnable container image.',\n        ),\n      });\n    }\n\n    // OCPBUGS-32526: Pipeline builds and Devfile import are mutually exclusive\n    if (isPipelineEnabled && hasCreatePipelineAccess && importStrategy !== ImportStrategy.DEVFILE) {\n      options.push({\n        label: t(ReadableBuildOptions[BuildOptions.PIPELINES]),\n        value: BuildOptions.PIPELINES,\n        description: t(\n          'devconsole~Build using pipeline describes a process for transforming source code into a runnable container image. Pipelines support can be added using Red Hat OpenShift Pipelines Operator.',\n        ),\n      });\n    }\n\n    return options;\n  }, [\n    isBuildV1Enabled,\n    isShipwrightBuildsEnabled,\n    isPipelineEnabled,\n    hasCreatePipelineAccess,\n    strategy,\n    importStrategy,\n    t,\n  ]);\n\n  const onChange = React.useCallback(\n    (selection: string) => {\n      const value = _.findKey(ReadableBuildOptions, (name) => t(name) === selection);\n      setFieldValue(fieldName, value);\n    },\n    [setFieldValue, fieldName, t],\n  );\n\n  return strategyLoaded ? (\n    <SingleDropdownField\n      name={fieldName}\n      label={t('devconsole~Build option')}\n      options={selectInputOptions}\n      onChange={onChange}\n      isDisabled={isDisabled}\n      getLabelFromValue={(value: string) => t(ReadableBuildOptions[value])}\n      helpText={\n        <p className=\"pf-c-form__helper-text\">\n          <Trans t={t} ns=\"devconsole\">\n            Build option to use for transforming source code into a runnable container image.\n          </Trans>\n        </p>\n      }\n      toggleOnSelection\n    />\n  ) : (\n    <LoadingInline />\n  );\n};\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useClusterBuildStrategy } from '@console/dev-console/src/utils/shipwright-build-hook';\nimport { ImportStrategy } from '@console/git-service/src';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { SingleDropdownField, SelectInputOption } from '@console/shared/src';\nimport {\n  ClusterBuildStrategy,\n  ReadableClusterBuildStrategies,\n} from '@console/shipwright-plugin/src/types';\n\ntype BuildStrategySelectorProps = {\n  formType: string;\n  importStrategy: ImportStrategy;\n};\n\nexport const BuildStrategySelector: React.FC<BuildStrategySelectorProps> = ({\n  formType,\n  importStrategy,\n}) => {\n  const { t } = useTranslation();\n  const [strategy, strategyLoaded] = useClusterBuildStrategy();\n  const { setFieldValue } = useFormikContext<FormikValues>();\n\n  const clusterBuildStrategyOptions = React.useMemo(() => {\n    const options: SelectInputOption[] = [];\n    if (strategy.buildah && importStrategy === ImportStrategy.DOCKERFILE) {\n      options.push({\n        label: t(ReadableClusterBuildStrategies[ClusterBuildStrategy.BUILDAH]),\n        value: ClusterBuildStrategy.BUILDAH,\n      });\n    }\n    if (strategy.s2i && importStrategy === ImportStrategy.S2I) {\n      options.push({\n        label: t(ReadableClusterBuildStrategies[ClusterBuildStrategy.S2I]),\n        value: ClusterBuildStrategy.S2I,\n      });\n    }\n    return options;\n  }, [strategy, importStrategy, t]);\n\n  React.useEffect(() => {\n    if (formType !== 'edit') {\n      if (importStrategy === ImportStrategy.S2I) {\n        setFieldValue('build.clusterBuildStrategy', ClusterBuildStrategy.S2I);\n      } else if (importStrategy === ImportStrategy.DOCKERFILE) {\n        setFieldValue('build.clusterBuildStrategy', ClusterBuildStrategy.BUILDAH);\n      }\n    }\n  }, [setFieldValue, importStrategy, formType]);\n\n  const onChange = React.useCallback(\n    (selection: string) => {\n      const value = _.findKey(ReadableClusterBuildStrategies, (name) => t(name) === selection);\n      setFieldValue('build.clusterBuildStrategy', value);\n    },\n    [setFieldValue, t],\n  );\n\n  return strategyLoaded ? (\n    <SingleDropdownField\n      data-test-id=\"cluster-build-strategy-field\"\n      name=\"build.clusterBuildStrategy\"\n      label={t('devconsole~Cluster Build Strategy')}\n      onChange={onChange}\n      isDisabled={formType === 'edit'}\n      ariaLabel={t('devconsole~Cluster Build Strategy')}\n      placeholderText={t('devconsole~Select Cluster Build Strategy')}\n      helpText={t(\n        'devconsole~Cluster Build Strategies define a shared group of steps, needed to fullfil the application build process.',\n      )}\n      getLabelFromValue={(value: string) => t(ReadableClusterBuildStrategies[value])}\n      options={clusterBuildStrategyOptions}\n      toggleOnSelection\n    />\n  ) : (\n    <LoadingInline />\n  );\n};\n"],"sourceRoot":""}