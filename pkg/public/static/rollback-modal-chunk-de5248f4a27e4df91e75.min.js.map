{"version":3,"sources":["webpack:///./public/components/modals/rollback-modal.jsx"],"names":["ANNOTATIONS_TO_SKIP","BaseRollbackModal","props","t","isDCRollback","resource","kind","dName","changeScaleSettings","setChangeScaleSettings","changeStrategy","setChangeStrategy","changeTriggers","setChangeTriggers","deploymentResource","isList","name","namespace","metadata","deployment","loaded","loadError","deploymentError","setDeploymentError","spec","paused","deployType","label","onSubmit","e","preventDefault","dcVersion","req","apiVersion","latest","force","from","revision","includeTemplate","includeReplicationMeta","includeStrategy","includeTriggers","opts","ns","path","handlePromise","then","updatedDC","close","submitDCRollback","rsTemplate","template","labels","annotations","forEach","k","Object","keys","includes","patch","op","value","submitDeploymentRollback","className","isInline","variant","title","message","resourceName","type","onChange","checked","errorMessage","inProgress","submitText","cancel","submitDisabled","rollbackModal"],"mappings":"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","file":"rollback-modal-chunk-de5248f4a27e4df91e75.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { getDeploymentConfigVersion, getOwnerNameByKind } from '@console/shared/src';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { LoadingInline, withHandlePromise } from '../utils';\nimport { DeploymentConfigModel, DeploymentModel, ReplicationControllerModel } from '../../models';\nimport { k8sCreate, k8sPatch, k8sUpdate } from '../../module/k8s';\nimport { useK8sWatchResource } from '../utils/k8s-watch-hook';\nimport { Alert } from '@patternfly/react-core';\n\nconst ANNOTATIONS_TO_SKIP = [\n  'kubectl.kubernetes.io/last-applied-configuration',\n  'deployment.kubernetes.io/revision',\n  'deployment.kubernetes.io/revision-history',\n  'deployment.kubernetes.io/desired-replicas',\n  'deployment.kubernetes.io/max-replicas',\n  'deprecated.deployment.rollback.to',\n];\n\nconst BaseRollbackModal = withHandlePromise((props) => {\n  const { t } = useTranslation();\n  const isDCRollback = props.resource.kind === ReplicationControllerModel.kind;\n  const dName = getOwnerNameByKind(\n    props.resource,\n    isDCRollback ? DeploymentConfigModel : DeploymentModel,\n  );\n  const [changeScaleSettings, setChangeScaleSettings] = React.useState(false);\n  const [changeStrategy, setChangeStrategy] = React.useState(false);\n  const [changeTriggers, setChangeTriggers] = React.useState(false);\n  const deploymentResource = {\n    kind: isDCRollback ? DeploymentConfigModel.kind : DeploymentModel.kind,\n    isList: false,\n    name: dName,\n    namespace: props.resource.metadata.namespace,\n  };\n  const [deployment, loaded, loadError] = useK8sWatchResource(deploymentResource);\n  const [deploymentError, setDeploymentError] = React.useState();\n\n  const submitDCRollback = () => {\n    const dcVersion = getDeploymentConfigVersion(props.resource);\n\n    // put together a new rollback request\n    const req = {\n      kind: 'DeploymentConfigRollback',\n      apiVersion: 'apps.openshift.io/v1',\n      name: dName,\n      latest: true,\n      force: true,\n      spec: {\n        from: {},\n        revision: dcVersion,\n        includeTemplate: true,\n        includeReplicationMeta: changeScaleSettings,\n        includeStrategy: changeStrategy,\n        includeTriggers: changeTriggers,\n      },\n    };\n    const opts = {\n      name: dName,\n      ns: props.resource.metadata.namespace,\n      path: 'rollback',\n    };\n\n    return props.handlePromise(\n      // create the deployment config rollback\n      k8sCreate(DeploymentConfigModel, req, opts).then((updatedDC) => {\n        // update the deployment config based on the one returned by the rollback\n        return k8sUpdate(DeploymentConfigModel, updatedDC);\n      }),\n      props.close,\n    );\n  };\n\n  const submitDeploymentRollback = () => {\n    // remove hash label before patching back into the deployment\n    const rsTemplate = _.clone(props.resource.spec.template);\n    delete rsTemplate.metadata.labels['pod-template-hash'];\n\n    // compute deployment annotations\n    const annotations = {};\n\n    ANNOTATIONS_TO_SKIP.forEach((k) => {\n      if (deployment.metadata.annotations[k]) {\n        annotations[k] = deployment.metadata.annotations[k];\n      }\n    });\n\n    Object.keys(props.resource.metadata.annotations).forEach((k) => {\n      if (!ANNOTATIONS_TO_SKIP.includes(k)) {\n        annotations[k] = props.resource.metadata.annotations[k];\n      }\n    });\n\n    // make patch to restore\n    const patch = [\n      { op: 'replace', path: '/spec/template', value: rsTemplate },\n      { op: 'replace', path: '/metadata/annotations', value: annotations },\n    ];\n\n    return props.handlePromise(k8sPatch(DeploymentModel, deployment, patch), props.close);\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    if (isDCRollback) {\n      return submitDCRollback();\n    }\n    return submitDeploymentRollback();\n  };\n\n  React.useEffect(() => {\n    if (loaded && !loadError && deployment) {\n      if (deployment.spec.paused) {\n        setDeploymentError(\n          t('public~You cannot rollback a paused {{ deployType }}. You must resume it first.', {\n            deployType: isDCRollback ? DeploymentConfigModel.label : DeploymentModel.label,\n          }),\n        );\n      }\n    }\n  }, [deployment, isDCRollback, loadError, loaded, t]);\n\n  const renderRollbackBody = () => {\n    if (props.resource.kind === ReplicationControllerModel.kind) {\n      return (\n        <>\n          <p>\n            <Trans t={t} ns=\"public\">\n              Use the following settings from{' '}\n              <strong className=\"co-break-word\">\n                {{ resourceName: props.resource.metadata.name }}\n              </strong>{' '}\n              when rolling back:\n            </Trans>\n          </p>\n          <div className=\"checkbox\">\n            <label className=\"control-label\">\n              <input\n                type=\"checkbox\"\n                onChange={() => setChangeScaleSettings(!changeScaleSettings)}\n                checked={changeScaleSettings}\n              />\n              {t('public~Replica count and selector')}\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label className=\"control-label\">\n              <input\n                type=\"checkbox\"\n                onChange={() => setChangeStrategy(!changeStrategy)}\n                checked={changeStrategy}\n              />\n              {t('public~Deployment strategy')}\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label className=\"control-label\">\n              <input\n                type=\"checkbox\"\n                onChange={() => setChangeTriggers(!changeTriggers)}\n                checked={changeTriggers}\n              />\n              {t('public~Deployment trigger')}\n            </label>\n          </div>\n        </>\n      );\n    }\n\n    return (\n      <p>\n        <Trans t={t} ns=\"public\">\n          Are you sure you want to rollback to{' '}\n          <strong className=\"co-break-word\">\n            {{ resourceName: props.resource.metadata.name }}\n          </strong>\n          ?\n        </Trans>\n      </p>\n    );\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{t('public~Rollback')}</ModalTitle>\n      <ModalBody>\n        {loaded ? (\n          !loadError && !deploymentError ? (\n            renderRollbackBody()\n          ) : (\n            <Alert\n              isInline\n              className=\"co-alert co-alert--scrollable\"\n              variant=\"danger\"\n              title={t('public~Unable to Rollback')}\n            >\n              <div className=\"co-pre-line\">{loadError?.message || deploymentError}</div>\n            </Alert>\n          )\n        ) : (\n          <LoadingInline />\n        )}\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={props.errorMessage}\n        inProgress={false}\n        submitText={t('public~Rollback')}\n        cancel={props.cancel}\n        submitDisabled={loadError?.message || deploymentError}\n      />\n    </form>\n  );\n});\n\nexport const rollbackModal = createModalLauncher((props) => <BaseRollbackModal {...props} />);\n"],"sourceRoot":""}