{"version":3,"sources":["webpack:///./public/components/modals/configure-cluster-upstream-modal.tsx"],"names":["ConfigureClusterUpstreamModal","props","cv","handlePromise","close","currentUpstream","spec","upstream","customSelected","setCustomSelected","customURL","setCustomURL","invalidCustomURL","setInvalidCustomURL","t","updateURL","updateService","onSubmit","e","preventDefault","Promise","resolve","patch","op","path","value","name","className","href","text","onChange","checked","title","id","type","isDisabled","readOnlyVariant","placeholder","_event","validated","errorMessage","inProgress","submitText","cancel","submitDisabled","configureClusterUpstreamModal"],"mappings":"6FAAA,8MA0BO,MAAMA,EAAgC,aAC1CC,I,MACC,MAAM,GAAEC,EAAE,cAAEC,EAAa,MAAEC,GAAUH,EAC/BI,EAA0B,QAAR,EAAAH,aAAE,EAAFA,EAAII,YAAI,eAAEC,UAE3BC,EAAgBC,GAAqB,aAAiBJ,IACtDK,EAAWC,GAAgB,WAAeN,IAC1CO,EAAkBC,GAAuB,YAAe,IAkBzD,EAAEC,GAAM,2BAERC,EAAY,aAAoB,KAAkBC,eAExD,OACE,wBAAMC,SArBiDC,IAEvD,GADAA,EAAEC,iBACEX,EAAgB,CAClB,IAAKE,EAEH,YADAG,GAAoB,GAEf,GAAIH,IAAcL,EACvB,OAAOF,EAAciB,QAAQC,UAAWjB,QAErC,IAAKC,EACV,OAAOF,EAAciB,QAAQC,UAAWjB,GAE1C,MACMkB,EAAQ,CAAC,CAAEC,GAAI,MAAOC,KAAM,iBAAkBC,MADtCjB,EAAiBE,EAAY,OAE3C,OAAOP,EAAc,aAAS,sBAAqBD,EAAIoB,GAAQlB,IAOvCsB,KAAK,OAAOC,UAAU,iBAC5C,gBAAC,IAAU,KAAEb,EAAE,uCACf,gBAAC,IAAS,KACR,yBACGA,EACC,iJAGF,iBAAgB,gBAChB,yBACE,gBAAC,IAAY,CACXc,KAAMb,EACNc,KAAMf,EAAE,+DAId,uBAAKa,UAAU,cACb,gCACE,6BAAQb,EAAE,yBACV,gBAAC,IAAU,CACTW,MAAM,UACNK,SAAU,KACRrB,GAAkB,GAClBI,GAAoB,IAEtBkB,SAAUvB,EACVwB,MAAOlB,EAAE,6DAET,gBAAC,IAAS,CACRmB,GAAI,8CACJC,KAAK,MACLC,YAAU,EACVV,MAAO,IACPW,gBAAgB,aAGpB,gBAAC,IAAU,CACTX,MAAM,SACNK,SAAU,IAAMrB,GAAkB,GAClCsB,QAASvB,EACTwB,MAAOlB,EAAE,kCAET,gBAAC,IAAS,CACRmB,GAAI,6CACJC,KAAK,MACLG,YAAY,iDACZZ,MAAOf,EACPoB,SAAU,CAACQ,EAAQT,KACjBpB,GAAkB,GAClBE,EAAakB,GACbhB,GAAoB,IAEtB0B,UAAW3B,EAAmB,QAAU,YAEzCA,GACC,uBAAKe,UAAU,gBACb,uBAAKA,UAAU,wCACZb,EAAE,mCAQjB,gBAAC,IAAiB,CAChB0B,aAAcvC,EAAMuC,aACpBC,WAAYxC,EAAMwC,WAClBC,WAAY5B,EAAE,eACd6B,OAAQ1C,EAAM0C,OACdC,eAAgBhC,OAObiC,EAAgC,YAAoB7C","file":"configure-cluster-upstream-modal-chunk-079bd71d6b7f31fc7cb8.min.js","sourcesContent":["import * as React from 'react';\n\nimport { ClusterVersionModel } from '../../models';\nimport { ClusterVersionKind, k8sPatch } from '../../module/k8s';\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '../factory/modal';\nimport {\n  documentationURLs,\n  ExternalLink,\n  getDocumentationURL,\n  HandlePromiseProps,\n  isManaged,\n  isUpstream,\n  withHandlePromise,\n} from '../utils';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { RadioInput } from '../radio';\nimport { CLUSTER_VERSION_DEFAULT_UPSTREAM_SERVER_URL_PLACEHOLDER } from '@console/shared/src/constants';\nimport { TextInput } from '@patternfly/react-core';\n\nexport const ConfigureClusterUpstreamModal = withHandlePromise(\n  (props: ConfigureClusterUpstreamModalProps) => {\n    const { cv, handlePromise, close } = props;\n    const currentUpstream = cv?.spec?.upstream;\n\n    const [customSelected, setCustomSelected] = React.useState(!!currentUpstream);\n    const [customURL, setCustomURL] = React.useState(currentUpstream);\n    const [invalidCustomURL, setInvalidCustomURL] = React.useState(false);\n\n    const submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n      e.preventDefault();\n      if (customSelected) {\n        if (!customURL) {\n          setInvalidCustomURL(true);\n          return;\n        } else if (customURL === currentUpstream) {\n          return handlePromise(Promise.resolve(), close);\n        }\n      } else if (!currentUpstream) {\n        return handlePromise(Promise.resolve(), close);\n      }\n      const value = customSelected ? customURL : null;\n      const patch = [{ op: 'add', path: '/spec/upstream', value }];\n      return handlePromise(k8sPatch(ClusterVersionModel, cv, patch), close);\n    };\n    const { t } = useTranslation();\n\n    const updateURL = getDocumentationURL(documentationURLs.updateService);\n\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>{t('public~Edit upstream configuration')}</ModalTitle>\n        <ModalBody>\n          <p>\n            {t(\n              'public~Select a configuration to receive updates. Updates can be configured to receive information from Red Hat or a custom update service.',\n            )}\n          </p>\n          {!isManaged() && !isUpstream() && (\n            <p>\n              <ExternalLink\n                href={updateURL}\n                text={t('public~Learn more about OpenShift local update services.')}\n              />\n            </p>\n          )}\n          <div className=\"form-group\">\n            <fieldset>\n              <label>{t('public~Configuration')}</label>\n              <RadioInput\n                value=\"default\"\n                onChange={() => {\n                  setCustomSelected(false);\n                  setInvalidCustomURL(false);\n                }}\n                checked={!customSelected}\n                title={t('public~Default. Receive update information from Red Hat.')}\n              >\n                <TextInput\n                  id={'cluster-version-default-upstream-server-url'}\n                  type=\"url\"\n                  isDisabled\n                  value={CLUSTER_VERSION_DEFAULT_UPSTREAM_SERVER_URL_PLACEHOLDER}\n                  readOnlyVariant=\"default\"\n                />\n              </RadioInput>\n              <RadioInput\n                value=\"custom\"\n                onChange={() => setCustomSelected(true)}\n                checked={customSelected}\n                title={t('public~Custom update service.')}\n              >\n                <TextInput\n                  id={'cluster-version-custom-upstream-server-url'}\n                  type=\"url\"\n                  placeholder=\"https://example.com/api/upgrades_info/v1/graph\"\n                  value={customURL}\n                  onChange={(_event, text) => {\n                    setCustomSelected(true);\n                    setCustomURL(text);\n                    setInvalidCustomURL(false);\n                  }}\n                  validated={invalidCustomURL ? 'error' : 'default'}\n                />\n                {invalidCustomURL && (\n                  <div className=\"pf-v5-c-form\">\n                    <div className=\"pf-v5-c-form__helper-text pf-m-error\">\n                      {t('public~Please enter a URL')}\n                    </div>\n                  </div>\n                )}\n              </RadioInput>\n            </fieldset>\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={props.errorMessage}\n          inProgress={props.inProgress}\n          submitText={t('public~Save')}\n          cancel={props.cancel}\n          submitDisabled={invalidCustomURL}\n        />\n      </form>\n    );\n  },\n);\n\nexport const configureClusterUpstreamModal = createModalLauncher(ConfigureClusterUpstreamModal);\n\nexport type ConfigureClusterUpstreamModalProps = {\n  cv: ClusterVersionKind;\n  t: TFunction;\n} & ModalComponentProps &\n  HandlePromiseProps;\n"],"sourceRoot":""}