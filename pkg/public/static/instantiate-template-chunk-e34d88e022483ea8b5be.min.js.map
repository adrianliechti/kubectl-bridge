{"version":3,"sources":["webpack:///./public/components/instantiate-template.tsx"],"names":["TemplateResourceDetails","template","resources","objects","sort","className","map","kind","key","displayName","TemplateInfo","t","annotations","metadata","description","name","iconClass","imgURL","tags","split","documentationURL","supportURL","src","alt","tag","i","href","text","TemplateFormField","value","onChange","placeholder","required","helpID","isTextArea","setIsTextArea","commonFormProps","isRequired","id","toggleTooltipText","InputToggle","aria","content","onClick","variant","label","fieldId","isFill","resizeOrientation","type","TemplateForm","state","models","k8s","getIn","perspectiveExtensions","props","preselectedNamespace","ns","activePerspective","obj","namespace","setNamespace","parameters","setParameters","inProgress","setInProgress","error","setError","isInitialLoad","navigate","current","loaded","object","data","reduce","acc","onParameterChanged","event","currentTarget","prevParams","loadError","message","params","onSubmit","preventDefault","secret","apiVersion","generateName","stringData","model","createTemplateSecret","then","instance","spec","createTemplateInstance","templateInstance","updatedSecret","ownerReferences","uid","updatesecretOwnerRef","activeExtension","find","p","properties","url","importRedirectURL","catch","err","htmlFor","selectedKey","v","requiredParam","generate","requiredInput","errorMessage","isLoading","InstantiateTemplatePage","title","location","searchParams","URLSearchParams","search","templateName","get","templateNamespace","isList","prop"],"mappings":"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","file":"instantiate-template-chunk-e34d88e022483ea8b5be.min.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router-dom-v5-compat';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport * as classNames from 'classnames';\nimport {\n  ActionGroup,\n  Button,\n  Divider,\n  FormGroup,\n  TextInput,\n  HelperText,\n  HelperTextItem,\n  Tooltip,\n  TextArea,\n  InputGroup,\n  InputGroupItem,\n} from '@patternfly/react-core';\nimport { CompressIcon, ExpandIcon } from '@patternfly/react-icons/dist/js/icons';\n/* eslint-disable import/named */\nimport { useTranslation } from 'react-i18next';\n\nimport { ANNOTATIONS, withActivePerspective } from '@console/shared';\n\nimport { Perspective, isPerspective } from '@console/dynamic-plugin-sdk';\nimport { withExtensions } from '@console/plugin-sdk';\nimport catalogImg from '../imgs/logos/catalog-icon.svg';\nimport {\n  getImageForIconClass,\n  getTemplateIcon,\n  normalizeIconClass,\n} from './catalog/catalog-item-icon';\nimport {\n  ButtonBar,\n  ExternalLink,\n  Firehose,\n  LoadError,\n  LoadingBox,\n  NsDropdown,\n  PageHeading,\n} from './utils';\nimport { SecretModel, TemplateInstanceModel } from '../models';\nimport {\n  K8sResourceKind,\n  TemplateKind,\n  TemplateInstanceKind,\n  TemplateParameter,\n} from '../module/k8s';\nimport { k8sCreateResource, k8sUpdateResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { RootState } from '../redux';\n\nconst TemplateResourceDetails: React.FC<TemplateResourceDetailsProps> = ({ template }) => {\n  const resources = _.uniq(_.compact(_.map(template.objects, 'kind'))).sort();\n  if (_.isEmpty(resources)) {\n    return null;\n  }\n\n  return (\n    <>\n      <Divider className=\"co-divider\" />\n      <p>The following resources will be created:</p>\n      <ul>\n        {resources.map((kind: string) => (\n          <li key={kind}>{kind}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\nTemplateResourceDetails.displayName = 'TemplateResourceDetails';\n\nconst TemplateInfo: React.FC<TemplateInfoProps> = ({ template }) => {\n  const { t } = useTranslation();\n  const annotations = template.metadata.annotations || {};\n  const { description } = annotations;\n  const displayName = annotations[ANNOTATIONS.displayName] || template.metadata.name;\n  const iconClass = getTemplateIcon(template);\n  const imgURL = iconClass ? getImageForIconClass(iconClass) : catalogImg;\n  const tags = (annotations.tags || '').split(/\\s*,\\s*/);\n  const documentationURL = annotations[ANNOTATIONS.documentationURL];\n  const supportURL = annotations[ANNOTATIONS.supportURL];\n\n  return (\n    <div className=\"co-catalog-item-info\">\n      <div className=\"co-catalog-item-details\">\n        <div className=\"co-catalog-item-icon\">\n          <span className=\"co-catalog-item-icon__bg\">\n            {imgURL ? (\n              <img\n                className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n                src={imgURL}\n                alt={displayName}\n                aria-hidden\n              />\n            ) : (\n              <span\n                className={classNames(\n                  'co-catalog-item-icon__icon co-catalog-item-icon__icon--large',\n                  normalizeIconClass(iconClass),\n                )}\n                aria-hidden\n              />\n            )}\n          </span>\n        </div>\n        <div>\n          <h2 className=\"co-section-heading co-catalog-item-details__name\">{displayName}</h2>\n          {!_.isEmpty(tags) && (\n            <p className=\"co-catalog-item-details__tags\">\n              {_.map(tags, (tag, i) => (\n                <span className=\"co-catalog-item-details__tag\" key={i}>\n                  {tag}\n                </span>\n              ))}\n            </p>\n          )}\n          {(documentationURL || supportURL) && (\n            <ul className=\"list-inline\">\n              {documentationURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={documentationURL} text={t('public~View documentation')} />\n                </li>\n              )}\n              {supportURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={supportURL} text={t('public~Get support')} />\n                </li>\n              )}\n            </ul>\n          )}\n        </div>\n      </div>\n      {description && <p className=\"co-catalog-item-details__description\">{description}</p>}\n      <TemplateResourceDetails template={template} />\n    </div>\n  );\n};\nTemplateInfo.displayName = 'TemplateInfo';\n\nconst stateToProps = (state: RootState) => ({\n  models: state.k8s.getIn(['RESOURCES', 'models']),\n});\n\nconst TemplateFormField: React.FC<TemplateFormFieldProps> = ({\n  name,\n  value,\n  displayName,\n  description,\n  onChange,\n  placeholder,\n  required,\n  helpID,\n}) => {\n  const [isTextArea, setIsTextArea] = React.useState(false);\n  const { t } = useTranslation('public');\n\n  const commonFormProps = {\n    'aria-describedby': helpID,\n    placeholder,\n    isRequired: required,\n    onChange,\n    value,\n    id: name,\n    name,\n  };\n\n  const toggleTooltipText = isTextArea\n    ? t('Compress to a single line of content. This may strip any new lines you have entered.')\n    : t(\n        'Expand to enter multiple lines of content. This is required if you need to include newline characters.',\n      );\n\n  const InputToggle = (\n    <Tooltip aria=\"none\" aria-live=\"polite\" content={toggleTooltipText}>\n      <Button\n        aria-label={toggleTooltipText}\n        onClick={() => setIsTextArea(!isTextArea)}\n        variant=\"control\"\n      >\n        {isTextArea ? <CompressIcon /> : <ExpandIcon />}\n      </Button>\n    </Tooltip>\n  );\n\n  return (\n    <FormGroup label={displayName || name} isRequired={required} fieldId={name}>\n      <InputGroup>\n        <InputGroupItem isFill>\n          {isTextArea ? (\n            <TextArea resizeOrientation=\"vertical\" {...commonFormProps} />\n          ) : (\n            <TextInput type=\"text\" {...commonFormProps} />\n          )}\n        </InputGroupItem>\n        <InputGroupItem>{InputToggle}</InputGroupItem>\n      </InputGroup>\n      {description && (\n        <HelperText>\n          <HelperTextItem id={helpID}>{description}</HelperTextItem>\n        </HelperText>\n      )}\n    </FormGroup>\n  );\n};\n\nconst TemplateForm_: React.FC<TemplateFormProps> = (props) => {\n  const { preselectedNamespace: ns = '', activePerspective, perspectiveExtensions, obj } = props;\n\n  const [namespace, setNamespace] = React.useState(ns);\n  const [parameters, setParameters] = React.useState([]);\n  const [inProgress, setInProgress] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const isInitialLoad = React.useRef(true);\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  React.useEffect(() => {\n    if (isInitialLoad.current && obj.loaded) {\n      const object = (obj.data.parameters || []).reduce((acc, { name, value }) => {\n        acc[name] = value;\n        return acc;\n      }, {});\n      setParameters(object);\n      isInitialLoad.current = false;\n    }\n  }, [obj]);\n\n  const onParameterChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    setParameters((prevParams) => ({ ...prevParams, [name]: value }));\n  };\n\n  const createTemplateSecret = () => {\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: `${obj.data.metadata.name}-parameters-`,\n        namespace,\n      },\n      // Remove empty values.\n      stringData: parameters,\n    };\n    return k8sCreateResource({\n      model: SecretModel,\n      data: secret,\n    });\n  };\n\n  const createTemplateInstance = (secret: K8sResourceKind) => {\n    const instance: TemplateInstanceKind = {\n      apiVersion: 'template.openshift.io/v1',\n      kind: 'TemplateInstance',\n      metadata: {\n        generateName: `${obj.data.metadata.name}-`,\n        namespace,\n      },\n      spec: {\n        template: obj.data as TemplateKind,\n        secret: {\n          name: secret.metadata.name,\n        },\n      },\n    };\n    return k8sCreateResource({\n      model: TemplateInstanceModel,\n      data: instance,\n    });\n  };\n\n  const updatesecretOwnerRef = (secret: K8sResourceKind, templateInstance: K8sResourceKind) => {\n    const updatedSecret = {\n      ...secret,\n      metadata: {\n        ...secret.metadata,\n        ownerReferences: [\n          {\n            apiVersion: templateInstance.apiVersion,\n            kind: templateInstance.kind,\n            name: templateInstance.metadata.name,\n            uid: templateInstance.metadata.uid,\n          },\n        ],\n      },\n    };\n    return k8sUpdateResource({\n      model: SecretModel,\n      data: updatedSecret,\n      name: secret.metadata.name,\n      ns: secret.metadata.namespace,\n    });\n  };\n\n  const save = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    if (!namespace) {\n      setError('Please complete all fields.');\n      return;\n    }\n\n    setError('');\n    setInProgress(true);\n\n    createTemplateSecret()\n      .then((secret: K8sResourceKind) => {\n        return createTemplateInstance(secret).then(async (templateInstance: K8sResourceKind) => {\n          await updatesecretOwnerRef(secret, templateInstance);\n          setInProgress(false);\n          const activeExtension = perspectiveExtensions.find(\n            (p) => p.properties.id === activePerspective,\n          );\n          const url = (await activeExtension.properties.importRedirectURL())(namespace);\n          navigate(url);\n        });\n      })\n      .catch((err) => {\n        setInProgress(false);\n        setError(err.message);\n      });\n  };\n\n  if (obj.loadError) {\n    return <LoadError label={t('public~Template')}>{obj.loadError.message}</LoadError>;\n  }\n\n  if (!obj.loaded) {\n    return <LoadingBox />;\n  }\n\n  const template: TemplateKind = obj.data;\n  const params = template.parameters || [];\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-7 col-md-push-5 co-catalog-item-info\">\n        <TemplateInfo template={template} />\n      </div>\n      <div className=\"col-md-5 col-md-pull-7\">\n        <form className=\"pf-v5-c-form co-instantiate-template-form\" onSubmit={save}>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"namespace\">\n              {t('public~Namespace')}\n            </label>\n            <NsDropdown selectedKey={namespace} onChange={(v) => setNamespace(v)} id=\"namespace\" />\n          </div>\n          {params.map(\n            ({\n              name,\n              displayName,\n              description,\n              required: requiredParam,\n              generate,\n            }: TemplateParameter) => {\n              const value = parameters[name] || '';\n              const helpID = description ? `${name}-help` : '';\n              const placeholder = generate ? t('public~(generated if empty)') : '';\n              // Only set required for parameters not generated.\n              const requiredInput = requiredParam && !generate;\n              return (\n                <TemplateFormField\n                  key={name}\n                  name={name}\n                  value={value}\n                  displayName={displayName}\n                  description={description}\n                  required={requiredInput}\n                  onChange={onParameterChanged}\n                  placeholder={placeholder}\n                  helpID={helpID}\n                />\n              );\n            },\n          )}\n          <ButtonBar className=\"co-instantiate-template-form__button-bar\" errorMessage={error}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\" isLoading={inProgress}>\n                {t('public~Create')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst TemplateForm = connect(stateToProps)(\n  withExtensions<ExtensionsProps>({ perspectiveExtensions: isPerspective })(\n    withActivePerspective<TemplateFormProps>(TemplateForm_),\n  ),\n);\n\nexport const InstantiateTemplatePage: React.FC<{}> = (props) => {\n  const title = 'Instantiate Template';\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const templateName = searchParams.get('template');\n  const templateNamespace = searchParams.get('template-ns');\n  const preselectedNamespace = searchParams.get('preselected-ns');\n  const resources = [\n    {\n      kind: 'Template',\n      name: templateName,\n      namespace: templateNamespace,\n      isList: false,\n      prop: 'obj',\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading title={title} />\n      <div className=\"co-m-pane__body co-m-pane__body--no-top-margin\">\n        <Firehose resources={resources}>\n          <TemplateForm preselectedNamespace={preselectedNamespace} {...(props as any)} />\n        </Firehose>\n      </div>\n    </>\n  );\n};\n\ntype TemplateResourceDetailsProps = {\n  template: TemplateKind;\n};\n\ntype TemplateInfoProps = {\n  template: TemplateKind;\n};\n\ntype ExtensionsProps = {\n  perspectiveExtensions: Perspective[];\n};\n\ntype TemplateFormProps = ExtensionsProps & {\n  obj: any;\n  preselectedNamespace: string;\n  models: any;\n  activePerspective: string;\n};\n\ntype TemplateFormFieldProps = {\n  name: string;\n  value: string;\n  displayName: string;\n  description: string;\n  required: boolean;\n  onChange: React.ReactEventHandler;\n  placeholder: string;\n  helpID: string;\n};\n"],"sourceRoot":""}