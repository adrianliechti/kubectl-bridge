{"version":3,"sources":["webpack:///./public/components/dashboard/with-dashboard-resources.tsx","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/TopConsumerPopover.tsx","webpack:///./packages/console-shared/src/promql/cluster-dashboard.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/utilization-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/utilization-popovers.tsx"],"names":["mapDispatchToProps","dispatch","watchURL","url","fetch","stopWatchURL","watchPrometheusQuery","query","namespace","timespan","stopWatchPrometheusQuery","mapStateToProps","state","URL","dashboards","get","PROMETHEUS","notificationAlerts","observe","withDashboardResources","WrappedComponent","props","super","urls","queries","watchingAlerts","this","push","watchPrometheus","queryKey","filter","q","watchAlerts","stopWatchAlerts","watchK8sResource","resource","setState","k8sResources","optional","stopWatchK8sResource","r","prop","getExternalProps","nextProps","nextState","urlResultChanged","some","urlKey","getIn","queryResultChanged","alertsResultChanged","data","loadError","k8sResourcesChanged","nextExternalProps","externalProps","Object","keys","length","key","resources","urlResults","prometheusResults","ConsumerPopover","current","title","humanize","consumers","position","top","description","children","t","isOpen","setOpen","onShow","onHide","headerContent","bodyContent","PopoverBody","enableFlip","maxWidth","variant","isInline","getLimitIcon","ERROR","WARN","LimitsBody","limitState","requestedState","total","limit","available","requested","OK","className","value","icon","currentConsumer","setCurrentConsumer","activePerspective","canAccessMonitoring","CAN_GET_NS","window","SERVER_FLAGS","prometheusBaseURL","model","metric","fieldSelector","k8sResource","isList","kind","crd","getResourceToWatch","consumerData","consumerLoaded","consumersLoadError","top5Data","error","bodyData","d","consumer","namespaced","y","string","monitoringParams","params","URLSearchParams","set","dropdownItems","reduce","items","curr","label","labelKey","onDropdownChange","find","c","monitoringURL","toString","body","map","item","String","x","ListItem","to","toLowerCase","id","name","onChange","selectedKey","OverviewQuery","top25Queries","PODS_BY_CPU","PODS_BY_MEMORY","PODS_BY_STORAGE","PODS_BY_NETWORK_IN","PODS_BY_NETWORK_OUT","NODES_BY_CPU","NODES_BY_MEMORY","NODES_BY_STORAGE","NODES_BY_PODS","NODES_BY_NETWORK_IN","NODES_BY_NETWORK_OUT","PROJECTS_BY_CPU","PROJECTS_BY_MEMORY","PROJECTS_BY_STORAGE","PROJECTS_BY_PODS","PROJECTS_BY_NETWORK_IN","PROJECTS_BY_NETWORK_OUT","overviewQueries","MEMORY_TOTAL","MEMORY_UTILIZATION","MEMORY_REQUESTS","NETWORK_UTILIZATION","CPU_UTILIZATION","CPU_TOTAL","CPU_REQUESTS","STORAGE_UTILIZATION","STORAGE_TOTAL","POD_UTILIZATION","NETWORK_IN_UTILIZATION","NETWORK_OUT_UTILIZATION","getMultilineQueries","nodeType","desc","getTop25ConsumerQueries","getUtilizationQueries","utilization","requests","networkPopovers","PrometheusUtilizationItem","utilizationQuery","totalQuery","TopConsumerPopover","humanizeValue","byteDataType","isDisabled","limitQuery","requestQuery","setLimitReqState","utilizationError","totalError","max","limitError","request","requestError","isLoading","duration","PrometheusMultilineUtilizationItem","TopConsumerPopovers","forEach","stats","hasError","response","responseError","UtilizationCardNodeFilter","machineConfigPools","onNodeSelect","selectedNodes","setIsOpen","selectOptions","sort","a","b","order","indexA","indexOf","metadata","indexB","localeCompare","mcp","mcpName","hasCheckbox","isSelected","includes","role","onSelect","selected","onOpenChange","open","toggle","toggleRef","ref","onClick","isRead","UtilizationCard","machineConfigPoolsLoaded","setSelectedNodes","dynamicItemExtensions","dynamicMultilineItemExtensions","join","utilizationQueries","multilineQueries","isClickable","isSelectable","actions","event","selection","selectionUpdated","hasNoOffset","undefined","Provider","BinaryBytes","uid","properties","getUtilizationQuery","getTotalQuery","getRequestQuery","getLimitQuery","ClusterUtilizationContext","useConsumers","nsQuery","podQuery","nodeQuery","consumerQueries","CPUPopover","MemoryPopover","StoragePopover","PodPopover","NetworkInPopover","NetworkOutPopover"],"mappings":"4FAAA,uFAuBA,MAAMA,EAAuCC,IAAa,CACxDC,SAAU,CAACC,EAAKC,IAAUH,EAAS,YAASE,EAAKC,IACjDC,aAAeF,GAAQF,EAAS,YAAaE,IAC7CG,qBAAsB,CAACC,EAAOC,EAAWC,IACvCR,EAAS,YAAqBM,EAAOC,EAAWC,IAClDC,yBAA0B,CAACH,EAAOE,IAChCR,EAAS,YAAyBM,EAAOE,MAGvCE,EAAmBC,IAAqB,CAC5C,CAAC,IAAaC,KAAMD,EAAME,WAAWC,IAAI,IAAaF,KACtD,CAAC,IAAaG,YAAaJ,EAAME,WAAWC,IAAI,IAAaC,YAG7DC,mBAAoBL,EAAMM,QAAQH,IAAI,wBAM3BI,EACXC,GAEA,kBACET,EACAX,EAFF,CAIE,cAAqC,YAQnC,YAAYqB,GACVC,MAAMD,GALA,KAAAE,KAAsB,GACtB,KAAAC,QAAyB,GACzB,KAAAC,gBAA0B,EA+ClC,KAAAvB,SAAqB,CAACC,EAAKC,KACzBsB,KAAKH,KAAKI,KAAKxB,GACfuB,KAAKL,MAAMnB,SAASC,EAAKC,IAG3B,KAAAwB,gBAAmC,CAACrB,EAAOC,EAAWC,KACpDiB,KAAKF,QAAQG,KAAK,YAAYpB,EAAOE,IACrCiB,KAAKL,MAAMf,qBAAqBC,EAAOC,EAAWC,IAGpD,KAAAC,yBAAgD,CAACH,EAAOE,KACtD,MAAMoB,EAAW,YAAYtB,EAAOE,GACpCiB,KAAKF,QAAUE,KAAKF,QAAQM,OAAQC,GAAMA,IAAMF,GAChDH,KAAKL,MAAMX,yBAAyBH,EAAOE,IAG7C,KAAAuB,YAA2B,KACzBN,KAAKD,gBAAiB,GAGxB,KAAAQ,gBAAmC,KACjCP,KAAKD,gBAAiB,GAGxB,KAAAS,iBAAsCC,IACpCT,KAAKU,SAAUxB,IAAuC,CACpDyB,aAAc,IAAIzB,EAAMyB,aAAc,OAAF,wBAAOF,GAAQ,CAAEG,UAAU,SAInE,KAAAC,qBAA8CJ,IAC5CT,KAAKU,SAAUxB,IAAuC,CACpDyB,aAAczB,EAAMyB,aAAaP,OAAQU,GAAMA,EAAEC,OAASN,EAASM,UAIvE,KAAAC,iBAAoBrB,GACX,IACLA,EACA,WACA,eACA,uBACA,2BACA,cACA,kBACA,IAAaR,IACb,IAAaG,WACb,sBA1FFU,KAAKd,MAAQ,CACXyB,aAAc,IAIlB,sBACEM,EACAC,G,gBAEA,MAAMC,EAAmBnB,KAAKH,KAAKuB,KAChCC,GACCrB,KAAKL,MAAM,IAAaR,KAAKmC,MAAM,CAACD,EAAQ,WAC1CJ,EAAU,IAAa9B,KAAKmC,MAAM,CAACD,EAAQ,UAC7CrB,KAAKL,MAAM,IAAaR,KAAKmC,MAAM,CAACD,EAAQ,gBAC1CJ,EAAU,IAAa9B,KAAKmC,MAAM,CAACD,EAAQ,eAE3CE,EAAqBvB,KAAKF,QAAQsB,KACrCvC,GACCmB,KAAKL,MAAM,IAAaL,YAAYgC,MAAM,CAACzC,EAAO,WAChDoC,EAAU,IAAa3B,YAAYgC,MAAM,CAACzC,EAAO,UACnDmB,KAAKL,MAAM,IAAaL,YAAYgC,MAAM,CAACzC,EAAO,gBAChDoC,EAAU,IAAa3B,YAAYgC,MAAM,CAACzC,EAAO,eAEjD2C,GAC0B,QAA9B,EAAU,QAAV,EAAAxB,KAAKL,aAAK,eAAEJ,0BAAkB,eAAEkC,SAAsC,QAA7B,EAAAR,aAAS,EAATA,EAAW1B,0BAAkB,eAAEkC,QAC1C,QAA9B,EAAU,QAAV,EAAAzB,KAAKL,aAAK,eAAEJ,0BAAkB,eAAEmC,cAA2C,QAA7B,EAAAT,aAAS,EAATA,EAAW1B,0BAAkB,eAAEmC,WACzEC,EAAsB3B,KAAKd,MAAMyB,eAAiBO,EAAUP,aAE5DiB,EAAoB5B,KAAKgB,iBAAiBC,GAC1CY,EAAgB7B,KAAKgB,iBAAiBhB,KAAKL,OAEjD,OACEwB,GACAI,GACAI,GACC3B,KAAKD,gBAAkByB,GACxBM,OAAOC,KAAKH,GAAmBI,SAAWF,OAAOC,KAAKF,GAAeG,QACrEF,OAAOC,KAAKH,GAAmBR,KAC5Ba,GAAQL,EAAkBK,KAASJ,EAAcI,IAwDxD,SACE,OACE,gBAAC,IAAQ,CAACC,UAAWlC,KAAKd,MAAMyB,cAC9B,gBAACjB,EAAgB,eACflB,SAAUwB,KAAKxB,SACfG,aAAcqB,KAAKL,MAAMhB,aACzBuB,gBAAiBF,KAAKE,gBACtBlB,yBAA0BgB,KAAKhB,yBAC/BsB,YAAaN,KAAKM,YAClBC,gBAAiBP,KAAKO,gBACtB4B,WAAYnC,KAAKL,MAAM,IAAaR,KACpCiD,kBAAmBpC,KAAKL,MAAM,IAAaL,YAC3CC,mBAAoBS,KAAKL,MAAMJ,mBAC/BiB,iBAAkBR,KAAKQ,iBACvBK,qBAAsBb,KAAKa,sBACvBb,KAAKgB,iBAAiBhB,KAAKL,c,kCCzK7C,6LAwBA,MAAM0C,EAAkD,OACtD,EACEC,UACAC,QACAC,WACAC,YACA3D,YACA4D,WAAW,IAAgBC,IAC3BC,cACAC,eAEA,MAAM,EAAEC,GAAM,4BACPC,EAAQC,GAAW,YAAe,GACnCC,EAAS,cAAkB,IAAMD,GAAQ,GAAO,IAChDE,EAAS,cAAkB,IAAMF,GAAQ,GAAQ,IACvD,OAAKV,EAIH,gBAAC,IAAO,CACNI,SAAUA,EACVS,cAAeL,EAAE,qCAAsC,CAAEP,UACzDa,YACE,gBAACC,EAAW,CACVb,SAAUA,EACVC,UAAWA,EACX3D,UAAWA,EACXiE,OAAQA,EACRH,YAAaA,GAEZC,GAGLS,YAAU,EACVL,OAAQA,EACRC,OAAQA,EACRK,SAAS,SAET,gBAAC,IAAM,CAACC,QAAQ,OAAOC,UAAQ,GAC5BnB,IAvBE,OA8BE,MAEf,MAAMoB,EAAgBxE,IACpB,OAAQA,GACN,KAAK,IAAYyE,MACf,OAAO,gBAAC,IAAwB,MAClC,KAAK,IAAYC,KACf,OAAO,gBAAC,IAA6B,MACvC,QACE,OAAO,OAWAC,EAAwC,EACnDC,aACAC,iBACAC,QACAC,QACA3B,UACA4B,YACAC,gBAEA,MAAM,EAAErB,GAAM,2BACd,SACMgB,GAAcA,IAAe,IAAYM,MACxCL,GAAkBA,IAAmB,IAAYK,KACpD,sBAAIC,UAAU,8CACZ,gBAAC,UAAM,CAACC,MAAON,GAAQlB,EAAE,kCACzB,gBAAC,UAAM,CAACwB,MAAOL,EAAOM,KAAMb,EAAaI,IACtChB,EAAE,+BAEL,gBAAC,UAAM,CAACwB,MAAOhC,GAAUQ,EAAE,uCAC3B,gBAAC,UAAM,CAACwB,MAAOJ,GAAYpB,EAAE,8CAC7B,gBAAC,UAAM,CAACwB,MAAOH,EAAWI,KAAMb,EAAaK,IAC1CjB,EAAE,qCAOAO,EAAc,YACzB,OACE,EACEb,WACAC,YACA3D,YACAoB,kBACAlB,2BACAoD,oBACAW,SACAH,cACAC,eAEA,MAAM,EAAEC,GAAM,4BACP0B,EAAiBC,GAAsB,WAAehC,EAAU,IACjEiC,EAAoB,eAAuB,GAC3CC,EACJ,aAAQ,IAAMC,eAAiBC,OAAOC,aAAaC,mBAC/C,MAAElG,EAAK,MAAEmG,EAAK,OAAEC,EAAM,cAAEC,GAAkBV,EAC1CW,EAAc,UAClB,IAAOpC,EAvDY,EAACiC,EAAgBlG,EAAmBoG,KAA0B,CACvFE,QAAQ,EACRC,KAAML,EAAMM,IAAM,aAAkBN,GAASA,EAAMK,KACnDH,gBACApG,cAmDsByG,CAAmBP,EAAOlG,EAAWoG,GAAiB,KACtE,CAACA,EAAenC,EAAQiC,EAAOlG,KAE1B0G,EAAcC,EAAgBC,GAAsB,YAEzDP,GACF,YAAgB,IACTpC,GAGL7C,EAAgBrB,EAAOC,GAChB,KACLE,EAAyBH,KAJlB,OAMR,CAACA,EAAOG,EAA0BkB,EAAiBpB,EAAWiE,IAEjE,MAAM4C,EAAW,IAEVlE,EAAMmE,GAAS,YAA2BxD,EAAmBvD,GAC9DgH,EAAW,YAAsBpE,EAAMwD,GAE7C,GAAIE,GAAeM,IAAmBC,EACpC,IAAK,MAAMI,KAAKD,EAAU,CASxB,GARuBL,EAAapE,KACjC2E,GACC,aAAQA,KAAcD,EAAEb,OAAOA,MAC9BD,EAAMgB,YAAa,aAAaD,KAAcD,EAAEb,OAAOnG,aAG1D6G,EAAS1F,KAAK,OAAD,wBAAM6F,GAAC,CAAEG,EAAGzD,EAASsD,EAAEG,GAAGC,UAEjB,IAApBP,EAAS3D,OACX,MAKN,MAAMmE,EAAmB,UAAc,KACrC,MAAMC,EAAS,IAAIC,gBAEnB,OADAD,EAAOE,IAAI,SAAU9B,EAAgB3F,OAC9BuH,GACN,CAAC5B,EAAgB3F,QAEd0H,EAAgB,UACpB,IACE9D,EAAU+D,OAAO,CAACC,EAAOC,KACvBD,EAAM,aAAkBC,EAAK1B,QAAUlC,EAAE,8BAA+B,CACtE6D,MAAOD,EAAK1B,MAAM4B,SAAW9D,EAAE4D,EAAK1B,MAAM4B,UAAYF,EAAK1B,MAAM2B,QAE5DF,GACN,IACL,CAAChE,EAAWK,IAGR+D,EAAmB,cACtB5E,GAAQwC,EAAmBhC,EAAUqE,KAAMC,GAAM,aAAkBA,EAAE/B,SAAW/C,IACjF,CAACQ,IAGGuE,EACJrC,GAA6C,UAAtBD,EACnB,6BAA6ByB,EAAiBc,WAC9C,sBAAsBnI,aAAqBqH,EAAiBc,aAElE,IAAIC,EAwCJ,OAtCEA,EADEtB,GAASF,EACJ,uBAAKrB,UAAU,kBAAkBvB,EAAE,iCAChC2C,GAAmBhE,EAY3B,gCACE,sBACE4C,UAAU,6CAA4C,aAC1CvB,EAAE,2CAA4C,CAAE6D,MAAO3B,EAAM2B,SAExEhB,GACCA,EAASwB,IAAKC,IACZ,MAAM7E,EAAQ8E,OAAOD,EAAKE,GAC1B,OACE,gBAACC,EAAQ,CAACtF,IAAKM,EAAO+B,MAAO8C,EAAKnB,GAChC,gBAAC,OAAI,CACH5B,UAAU,6CACVmD,GAAI,aAAsBxC,EAAOzC,EAAO6E,EAAKnC,OAAOnG,YAEnDyD,OAMb,gBAAC,OAAI,CAACiF,GAAIR,GAAgBlE,EAAE,8BA9B9B,sBAAIuB,UAAU,8CACZ,sBAAIA,UAAU,sBACd,sBAAIA,UAAU,sBACd,sBAAIA,UAAU,sBACd,sBAAIA,UAAU,sBACd,sBAAIA,UAAU,uBA+BlB,uBAAKA,UAAU,qCACZzB,GACC,uBAAKyB,UAAU,4CAA4CzB,GAE5DC,EACD,uBAAKwB,UAAU,sCACS,IAArB5B,EAAUT,OACPc,EAAE,yCAA0C,CAC1C6D,MAAOnC,EAAgBQ,MAAM2B,MAAMc,gBAErC3E,EAAE,iCAEPL,EAAUT,OAAS,GAClB,gBAAC,IAAQ,CACPqC,UAAU,wCACVqD,GAAG,kBACHC,KAAK,qBAAoB,aACb7E,EAAE,uCACd2D,MAAOF,EACPqB,SAAUf,EACVgB,YAAa,aAAkB7C,KAGlCkC,MAOLK,EAAoC,EAAG1E,WAAUyB,WACrD,sBAAID,UAAU,8CACXxB,EACD,uBAAKwB,UAAU,+CAA+CC,K,kCCpRlE,4IAGYwD,EAHZ,UAGA,SAAYA,GACV,8BACA,0CACA,oCACA,4CACA,kDACA,oDACA,oCACA,wBACA,8BACA,4CACA,gCACA,4BACA,kCACA,oCACA,0CACA,4CACA,8BACA,oCACA,sCACA,4CACA,8CACA,gCACA,oCACA,0CACA,4CACA,kDACA,oDACA,sCACA,oCA7BF,CAAYA,MAAa,KAgCzB,MAAMC,EAAe,CACnB,CAACD,EAAcE,aAAc,IAC3B,qXAYF,CAACF,EAAcG,gBAAiB,IAC9B,4XAYF,CAACH,EAAcI,iBAAkB,IAC/B,2XAYF,CAACJ,EAAcK,oBAAqB,IAClC,4XAYF,CAACL,EAAcM,qBAAsB,IACnC,6XAYF,CAACN,EAAcO,cAAe,IAC5B,yRAUF,CAACP,EAAcQ,iBAAkB,IAC/B,ySAUF,CAACR,EAAcS,kBAAmB,IAChC,gdAcF,CAACT,EAAcU,eAAgB,IAC7B,uNAQF,CAACV,EAAcW,qBAAsB,IACnC,sTAUF,CAACX,EAAcY,sBAAuB,IACpC,uTAWF,CAACZ,EAAca,iBAAkB,IAC/B,4aAcF,CAACb,EAAcc,oBAAqB,IAClC,mbAcF,CAACd,EAAce,qBAAsB,IACnC,kbAcF,CAACf,EAAcgB,kBAAmB,IAChC,kVAWF,CAAChB,EAAciB,wBAAyB,IACtC,mbAcF,CAACjB,EAAckB,yBAA0B,IACvC,qbAgBEC,EAAkB,CACtB,CAACnB,EAAcoB,cAAe,IAC5B,sPAUF,CAACpB,EAAcqB,oBAAqB,IAClC,yRAUF,CAACrB,EAAcsB,iBAAkB,IAC/B,mNAUF,CAACtB,EAAcuB,qBAAsB,IACnC,4XAcF,CAACvB,EAAcwB,iBAAkB,IAC/B,2SAUF,CAACxB,EAAcyB,WAAY,IACzB,4NAUF,CAACzB,EAAc0B,cAAe,IAC5B,gNAUF,CAAC1B,EAAc2B,qBAAsB,IACnC,uZAcF,CAAC3B,EAAc4B,eAAgB,IAC7B,iSAUF,CAAC5B,EAAc6B,iBAAkB,IAC/B,6SAYF,CAAC7B,EAAc8B,wBAAyB,IACtC,mRAUF,CAAC9B,EAAc+B,yBAA0B,IACvC,qRAYSC,EACXC,IAC8C,CAC9C,CAACjC,EAAcuB,qBAAsB,CACnC,CACExK,MAAOoK,EAAgBnB,EAAc8B,wBAAwB,CAAEG,aAC/DC,KAAM,MAER,CACEnL,MAAOoK,EAAgBnB,EAAc+B,yBAAyB,CAAEE,aAChEC,KAAM,UAKCC,EAA2BF,IAAqB,CAC3D,CAACjC,EAAcE,aAAcD,EAAaD,EAAcE,aAAa,CAAE+B,aACvE,CAACjC,EAAcG,gBAAiBF,EAAaD,EAAcG,gBAAgB,CAAE8B,aAC7E,CAACjC,EAAcI,iBAAkBH,EAAaD,EAAcI,iBAAiB,CAAE6B,aAC/E,CAACjC,EAAcK,oBAAqBJ,EAAaD,EAAcK,oBAAoB,CAAE4B,aACrF,CAACjC,EAAcM,qBAAsBL,EAAaD,EAAcM,qBAAqB,CACnF2B,aAEF,CAACjC,EAAcO,cAAeN,EAAaD,EAAcO,cAAc,CAAE0B,aACzE,CAACjC,EAAcQ,iBAAkBP,EAAaD,EAAcQ,iBAAiB,CAAEyB,aAC/E,CAACjC,EAAcS,kBAAmBR,EAAaD,EAAcS,kBAAkB,CAAEwB,aACjF,CAACjC,EAAcU,eAAgBT,EAAaD,EAAcU,eAAe,CAAEuB,aAC3E,CAACjC,EAAcW,qBAAsBV,EAAaD,EAAcW,qBAAqB,CACnFsB,aAEF,CAACjC,EAAcY,sBAAuBX,EAAaD,EAAcY,sBAAsB,CACrFqB,aAEF,CAACjC,EAAca,iBAAkBZ,EAAaD,EAAca,iBAAiB,CAAEoB,aAC/E,CAACjC,EAAcc,oBAAqBb,EAAaD,EAAcc,oBAAoB,CAAEmB,aACrF,CAACjC,EAAce,qBAAsBd,EAAaD,EAAce,qBAAqB,CACnFkB,aAEF,CAACjC,EAAcgB,kBAAmBf,EAAaD,EAAcgB,kBAAkB,CAAEiB,aACjF,CAACjC,EAAciB,wBAAyBhB,EAAaD,EAAciB,wBAAwB,CACzFgB,aAEF,CAACjC,EAAckB,yBAA0BjB,EAAaD,EAAckB,yBAAyB,CAC3Fe,eAISG,EAAyBH,IAAqB,CACzD,CAACjC,EAAcwB,iBAAkB,CAC/Ba,YAAalB,EAAgBnB,EAAcwB,iBAAiB,CAAES,aAC9D/F,MAAOiF,EAAgBnB,EAAcyB,WAAW,CAAEQ,aAClDK,SAAUnB,EAAgBnB,EAAc0B,cAAc,CAAEO,cAE1D,CAACjC,EAAcqB,oBAAqB,CAClCgB,YAAalB,EAAgBnB,EAAcqB,oBAAoB,CAAEY,aACjE/F,MAAOiF,EAAgBnB,EAAcoB,cAAc,CAAEa,aACrDK,SAAUnB,EAAgBnB,EAAcsB,iBAAiB,CAAEW,cAE7D,CAACjC,EAAc2B,qBAAsB,CACnCU,YAAalB,EAAgBnB,EAAc2B,qBAAqB,CAAEM,aAClE/F,MAAOiF,EAAgBnB,EAAc4B,eAAe,CAAEK,cAExD,CAACjC,EAAc6B,iBAAkB,CAC/BQ,YAAalB,EAAgBnB,EAAc6B,iBAAiB,CAAEI,iB,kCCndlE,qWAgEA,MAAMM,EAAkB,CAAC,IAAkB,KAE9BC,EAA4B,YACvC,EACEpK,kBACAlB,2BACAoD,oBACAmI,mBACAC,aACAjI,QACAkI,qBACAC,gBACAC,eACA7L,YACA8L,cAAa,EACbC,aACAC,eACAC,uBAEA,IAAIZ,EAAiCa,EACjChH,EAA2BiH,EAC3BC,EACAjH,EAA2BkH,EAC3BC,EAA6BC,EAC7BC,GAAY,EAChB,MAAM,SAAEC,GAAa,mCA6CrB,OA3CA,YAAgB,KACd,IAAKX,EAKH,OAJA1K,EAAgBqK,EAAkBzL,EAAWyM,GAC7Cf,GAActK,EAAgBsK,EAAY1L,GAC1C+L,GAAc3K,EAAgB2K,EAAY/L,EAAWyM,GACrDT,GAAgB5K,EAAgB4K,EAAchM,EAAWyM,GAClD,KACLvM,EAAyBuL,EAAkBgB,GAC3Cf,GAAcxL,EAAyBwL,GACvCK,GAAc7L,EAAyB6L,EAAYU,GACnDT,GAAgB9L,EAAyB8L,EAAcS,KAG1D,CACDrL,EACAlB,EACAuM,EACAhB,EACAC,EACA1L,EACA8L,EACAC,EACAC,IAGGF,KACFT,EAAaa,GAAoB,YAChC5I,EACAmI,EACAgB,IAEDvH,EAAOiH,GAAc,YAA2B7I,EAAmBoI,IACnEvG,EAAOkH,GAAc,YAA2B/I,EAAmByI,EAAYU,IAC/EH,EAASC,GAAgB,YACxBjJ,EACA0I,EACAS,GAGFL,EAAM,YAAsBlH,GAC5BsH,GAAanB,GAAgBK,IAAexG,GAAW6G,IAAe5G,GAItE,gBAAC,UAAe,CACd1B,MAAOA,EACP4H,YAAaA,EACblG,MAAOA,EACPE,UAAWiH,EACXxF,MAAOoF,GAAoBC,GAAcE,GAAcE,EACvDC,UAAWA,EACXZ,cAAeA,EACfC,aAAcA,EACd9L,MAAO,CAAC0L,EAAkBM,EAAYC,GACtCI,IAAKA,GAAOA,EAAIlJ,OAASkJ,EAAI,GAAGjF,EAAI,KACpCwE,mBAAoBA,EACpBM,iBAAkBA,MAMbS,EAAqC,YAGhD,EACEtL,kBACAlB,2BACAoD,oBACAtC,UACAyC,QACAkJ,sBACAf,gBACAC,eACA7L,YACA8L,cAAa,MAEb,MAAM,SAAEW,GAAa,mCACrB,YAAgB,KACd,IAAKX,EAEH,OADA9K,EAAQ4L,QAASrL,GAAMH,EAAgBG,EAAExB,MAAOC,EAAWyM,IACpD,KACLzL,EAAQ4L,QAASrL,GAAMrB,EAAyBqB,EAAExB,MAAO0M,MAG5D,CAACrL,EAAiBlB,EAA0BuM,EAAUzL,EAAShB,EAAW8L,IAE7E,MAAMe,EAAQ,GACd,IAAIC,GAAW,EACXN,GAAY,EAoBhB,OAnBKV,GACH9K,EAAQ4L,QAAS7M,I,MACf,MAAOgN,EAAUC,GAAiB,YAChC1J,EACAvD,EAAMA,MACN0M,GAEF,OAAIO,GACFF,GAAW,GACJ,GAEJC,OAILF,EAAM1L,MAAyE,QAApE,cAAoB4L,EAAUhN,EAAMmL,KAAM,KAAM,8BAAoB,eAAG,KAAM,KAHtFsB,GAAY,GACL,KAOX,gBAAC,2BAAwB,CACvB/I,MAAOA,EACPd,KAAMkK,EACN/F,MAAOgG,EACPN,UAAWA,EACXZ,cAAeA,EACfC,aAAcA,EACd7K,QAASA,EACT2L,oBAAqBA,MAMvBM,EAAsE,EAC1EC,qBACAC,eACAC,oBAEA,MAAM,EAAEpJ,GAAM,4BACPC,EAAQoJ,GAAa,YAAwB,GAiB9CC,EAhBaJ,EAAmBK,KAAK,CAACC,EAAGC,KAC7C,MAAMC,EAAQ,CAAC,SAAU,UACnBC,EAASD,EAAME,QAAQJ,EAAEK,SAAShF,MAClCiF,EAASJ,EAAME,QAAQH,EAAEI,SAAShF,MACxC,OAAgB,IAAZ8E,IAA6B,IAAZG,EACZN,EAAEK,SAAShF,KAAKkF,cAAcN,EAAEI,SAAShF,OAElC,IAAZ8E,EACK,GAEO,IAAZG,GACM,EAEHH,EAASG,IAGezF,IAAK2F,IACpC,MAAMC,EAAgC,WAAtBD,EAAIH,SAAShF,KAAoB,gBAAkBmF,EAAIH,SAAShF,KAChF,OACE,gBAAC,IAAY,CACXqF,aAAW,EACX/K,IAAK6K,EAAIH,SAAShF,KAClBrD,MAAOyI,EACPE,WAAYf,EAAcgB,SAASJ,EAAIH,SAAShF,OAE/CoF,KAgBP,OACE,gBAAC,IAAM,CACLI,KAAK,OAAM,aACCrK,EAAE,8BACdsK,SAAUnB,EACVlJ,OAAQA,EACRsK,SAAUnB,EACVoB,aAAeC,GAASpB,EAAUoB,GAClCC,OAnBYC,GACd,gBAAC,IAAU,CAACC,IAAKD,EAAWE,QAAUJ,GAASpB,EAAUoB,GAAO/J,QAAQ,aACrEV,EAAE,8BACFoJ,EAAclK,OAAS,GACtB,gBAAC,IAAK,CAACqC,UAAU,gBAAgBuJ,QAAM,GACpC1B,EAAclK,UAgBnB,gBAAC,IAAU,KAAEoK,KAKNyB,EAAkB,KAC7B,MAAM,EAAE/K,GAAM,4BACPkJ,EAAoB8B,GAA4B,YAErD,CACA1I,QAAQ,EACRC,KAAM,aAAkB,6BAGnB6G,EAAe6B,GAAoB,WAAyB,KAE5DC,GAAyB,aAC9B,MAEKC,GAAkC,aAEvC,KAYIlE,EAAW,IAAUmC,GAAiB,KAAOA,EAAcgC,KAAK,MAC/DC,EAAoBC,GAAoB,UAC7C,IAAM,CAAC,YAAsBrE,GAAW,YAAoBA,IAC5D,CAACA,IAEH,OACE+D,GACE,gBAAC,IAAI,gBAAc,mBAAmBO,aAAW,EAACC,cAAY,GAC5D,gBAAC,IAAU,CACTC,QAAS,CACPA,QACE,gCACE,gBAAC,IAAK,KACJ,gBAAC,IAAS,KACR,gBAACxC,EAAyB,CACxBC,mBAAoBA,EACpBC,aAzBC,CAACuC,EAAyBC,KAC7C,MAAMC,EAAiC,kBAAdD,EAAgC,SAAWA,EAChEvC,EAAcgB,SAASwB,GACzBX,EAAiB7B,EAAc9L,OAAQgH,GAASA,IAASsH,IAEzDX,EAAiB,IAAI7B,EAAewC,KAqBpBxC,cAAeA,KAGnB,gBAAC,IAAS,KACR,gBAAC,8BAA2B,SAKpCyC,aAAa,EACbtK,eAAWuK,IAGb,gBAAC,IAAS,aAAW,2BAClB9L,EAAE,gCAGP,gBAAC,UAAe,KACd,gBAAC,IAA0B+L,SAAQ,CAACvK,MAAOyF,GACzC,gBAACO,EAAyB,CACxB/H,MAAOO,EAAE,cACTyH,iBAAkB4D,EAAmB,IAAc7E,iBAAiBa,YACpEK,WAAY2D,EAAmB,IAAc7E,iBAAiBtF,MAC9D8G,aAAcqD,EAAmB,IAAc7E,iBAAiBc,SAChEK,mBAAoB,IACpBC,cAAe,MAEjB,gBAACJ,EAAyB,CACxB/H,MAAOO,EAAE,iBACTyH,iBAAkB4D,EAAmB,IAAchF,oBAAoBgB,YACvEK,WAAY2D,EAAmB,IAAchF,oBAAoBnF,MACjE8G,aAAcqD,EAAmB,IAAchF,oBAAoBiB,SACnEK,mBAAoB,IACpBC,cAAe,IACfC,aAAc,IAAcmE,cAE9B,gBAACxE,EAAyB,CACxB/H,MAAOO,EAAE,qBACTyH,iBAAkB4D,EAAmB,IAAc1E,qBAAqBU,YACxEK,WAAY2D,EAAmB,IAAc1E,qBAAqBzF,MAClEyG,mBAAoB,IACpBC,cAAe,IACfC,aAAc,IAAcmE,cAE9B,gBAACtD,EAAkC,CACjCjJ,MAAOO,EAAE,2BACThD,QAASsO,EAAiB,IAAc/E,qBACxCqB,cAAe,IACfe,oBAAqBpB,IAEvB,gBAACC,EAAyB,CACxB/H,MAAOO,EAAE,oBACTyH,iBAAkB4D,EAAmB,IAAcxE,iBAAiBQ,YACpEM,mBAAoB,IACpBC,cAAe,MAEhBsD,EAAsB7G,IAAI,EAAG4H,MAAKC,iB,UAAiB,OAClD,gBAAC1E,EAAyB,CACxBrI,IAAK8M,EACLxM,MAAOyM,EAAWzM,MAClBgI,iBAAkByE,EAAWC,oBAAoB/C,GACjD1B,WAAoC,QAAxB,EAAAwE,EAAWE,qBAAa,oBAAxBF,EAA2B9C,GACvCxB,cAAesE,EAAWxM,SAC1BiI,mBAAoBuE,EAAWvE,mBAC/BK,aAAwC,QAA1B,EAAAkE,EAAWG,uBAAe,oBAA1BH,EAA6B9C,GAC3CrB,WAAoC,QAAxB,EAAAmE,EAAWI,qBAAa,oBAAxBJ,EAA2B9C,OAG1C+B,EAA+B9G,IAAI,EAAG4H,MAAKC,gBAC1C,gBAACxD,EAAkC,CACjCvJ,IAAK8M,EACLxM,MAAOyM,EAAWzM,MAClBzC,QAASkP,EAAW9E,sBAAsBgC,GAC1CxB,cAAesE,EAAWxM,SAC1BiJ,oBAAqBuD,EAAWvD,4B,yDC7YhD,mSAgBO,MAAM4D,EAA4B,gBAAoB,MAEvDC,EAAe,CACnBC,EACAC,EACAC,KAEA,MAAM1F,EAAW,aAAiBsF,GAClC,OAAO,UAAc,KACnB,MAAMK,EAAkB,YAAwB3F,GAChD,MAAO,CACL,CACElL,MAAO6Q,EAAgBH,GACvBvK,MAAO,eACPC,OAAQ,aAEV,CACEpG,MAAO6Q,EAAgBF,GACvBxK,MAAO,WACPC,OAAQ,OAEV,CACEpG,MAAO6Q,EAAgBD,GACvBzK,MAAO,YACPC,OAAQ,cAGX,CAACwK,EAAW1F,EAAUwF,EAASC,KAGvBG,EAAgD,EAAGrN,cAC9D,MAAM,EAAEQ,GAAM,2BACRL,EAAY6M,EAChB,IAAc3G,gBACd,IAAcX,YACd,IAAcK,cAEhB,OACE,gBAAC,IAAe,CACd9F,MAAOO,EAAE,cACTR,QAASA,EACTG,UAAWA,EACXD,SAAU,QAKHoN,EAAmD,EAAGtN,cACjE,MAAM,EAAEQ,GAAM,2BACRL,EAAY6M,EAChB,IAAc1G,mBACd,IAAcX,eACd,IAAcK,iBAEhB,OACE,gBAAC,IAAe,CACd/F,MAAOO,EAAE,iBACTR,QAASA,EACTG,UAAWA,EACXD,SAAU,QAKHqN,EAAoD,EAAGvN,cAClE,MAAM,EAAEQ,GAAM,2BACRL,EAAY6M,EAChB,IAAczG,oBACd,IAAcX,gBACd,IAAcK,kBAEhB,OACE,gBAAC,IAAe,CACdhG,MAAOO,EAAE,qBACTR,QAASA,EACTG,UAAWA,EACXD,SAAU,QAKHsN,EAAgD,EAAGxN,cAC9D,MAAM,EAAEQ,GAAM,2BACRiH,EAAW,aAAiBsF,GAC5B5M,EAAY,UAAc,KAC9B,MAAMiN,EAAkB,YAAwB3F,GAChD,MAAO,CACL,CACElL,MAAO6Q,EAAgB,IAAc5G,kBACrC9D,MAAO,eACPC,OAAQ,aAEV,CACEpG,MAAO6Q,EAAgB,IAAclH,eACrCxD,MAAO,YACPC,OAAQ,UAGX,CAAC8E,IACJ,OACE,gBAAC,IAAe,CACdxH,MAAOO,EAAE,oBACTR,QAASA,EACTG,UAAWA,EACXD,SAAU,QAKHuN,EAAsD,EAAGzN,cACpE,MAAM,EAAEQ,GAAM,2BACRL,EAAY6M,EAChB,IAAcvG,uBACd,IAAcZ,mBACd,IAAcM,qBAEhB,OACE,gBAAC,IAAe,CACdlG,MAAOO,EAAE,qBACTR,QAASA,EACTG,UAAWA,EACXD,SAAU,QAKHwN,EAAuD,EAAG1N,cACrE,MAAM,EAAEQ,GAAM,2BACRL,EAAY6M,EAChB,IAActG,wBACd,IAAcZ,oBACd,IAAcM,sBAEhB,OACE,gBAAC,IAAe,CACdnG,MAAOO,EAAE,sBACTR,QAASA,EACTG,UAAWA,EACXD,SAAU","file":"dashboards~metal3-baremetalhost~namespace~node-detail-chunk-399b814bb93a3f2715f9.min.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\n\nimport { RESULTS_TYPE } from '../../reducers/dashboards';\nimport { NotificationAlerts } from '../../reducers/observe';\nimport {\n  StopWatchPrometheusAction,\n  stopWatchPrometheusQuery,\n  stopWatchURL,\n  StopWatchURLAction,\n  watchPrometheusQuery,\n  WatchPrometheusQueryAction,\n  watchURL,\n  WatchURLAction,\n  getQueryKey,\n} from '../../actions/dashboards';\nimport { RootState } from '../../redux';\nimport { Firehose, FirehoseResource, FirehoseResult } from '../utils';\nimport { K8sResourceKind, AppliedClusterResourceQuotaKind } from '../../module/k8s';\nimport { PrometheusResponse } from '../graphs';\nimport { Fetch, RequestMap } from '@console/dynamic-plugin-sdk/src/api/internal-types';\n\nconst mapDispatchToProps: DispatchToProps = (dispatch) => ({\n  watchURL: (url, fetch) => dispatch(watchURL(url, fetch)),\n  stopWatchURL: (url) => dispatch(stopWatchURL(url)),\n  watchPrometheusQuery: (query, namespace, timespan) =>\n    dispatch(watchPrometheusQuery(query, namespace, timespan)),\n  stopWatchPrometheusQuery: (query, timespan) =>\n    dispatch(stopWatchPrometheusQuery(query, timespan)),\n});\n\nconst mapStateToProps = (state: RootState) => ({\n  [RESULTS_TYPE.URL]: state.dashboards.get(RESULTS_TYPE.URL),\n  [RESULTS_TYPE.PROMETHEUS]: state.dashboards.get(RESULTS_TYPE.PROMETHEUS) as RequestMap<\n    PrometheusResponse\n  >,\n  notificationAlerts: state.observe.get('notificationAlerts'),\n});\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\n\nexport const withDashboardResources = <P extends DashboardItemProps>(\n  WrappedComponent: React.ComponentType<P>,\n) =>\n  connect<StateProps, DispatchProps, Diff<P, DashboardItemProps>>(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(\n    class WithDashboardResources extends React.Component<\n      WithDashboardResourcesProps,\n      WithDashboardResourcesState\n    > {\n      private urls: Array<string> = [];\n      private queries: Array<string> = [];\n      private watchingAlerts: boolean = false;\n\n      constructor(props) {\n        super(props);\n        this.state = {\n          k8sResources: [],\n        };\n      }\n\n      shouldComponentUpdate(\n        nextProps: WithDashboardResourcesProps,\n        nextState: WithDashboardResourcesState,\n      ) {\n        const urlResultChanged = this.urls.some(\n          (urlKey) =>\n            this.props[RESULTS_TYPE.URL].getIn([urlKey, 'data']) !==\n              nextProps[RESULTS_TYPE.URL].getIn([urlKey, 'data']) ||\n            this.props[RESULTS_TYPE.URL].getIn([urlKey, 'loadError']) !==\n              nextProps[RESULTS_TYPE.URL].getIn([urlKey, 'loadError']),\n        );\n        const queryResultChanged = this.queries.some(\n          (query) =>\n            this.props[RESULTS_TYPE.PROMETHEUS].getIn([query, 'data']) !==\n              nextProps[RESULTS_TYPE.PROMETHEUS].getIn([query, 'data']) ||\n            this.props[RESULTS_TYPE.PROMETHEUS].getIn([query, 'loadError']) !==\n              nextProps[RESULTS_TYPE.PROMETHEUS].getIn([query, 'loadError']),\n        );\n        const alertsResultChanged =\n          this.props?.notificationAlerts?.data !== nextProps?.notificationAlerts?.data ||\n          this.props?.notificationAlerts?.loadError !== nextProps?.notificationAlerts?.loadError;\n        const k8sResourcesChanged = this.state.k8sResources !== nextState.k8sResources;\n\n        const nextExternalProps = this.getExternalProps(nextProps);\n        const externalProps = this.getExternalProps(this.props);\n\n        return (\n          urlResultChanged ||\n          queryResultChanged ||\n          k8sResourcesChanged ||\n          (this.watchingAlerts && alertsResultChanged) ||\n          Object.keys(nextExternalProps).length !== Object.keys(externalProps).length ||\n          Object.keys(nextExternalProps).some(\n            (key) => nextExternalProps[key] !== externalProps[key],\n          )\n        );\n      }\n\n      watchURL: WatchURL = (url, fetch) => {\n        this.urls.push(url);\n        this.props.watchURL(url, fetch);\n      };\n\n      watchPrometheus: WatchPrometheus = (query, namespace, timespan) => {\n        this.queries.push(getQueryKey(query, timespan));\n        this.props.watchPrometheusQuery(query, namespace, timespan);\n      };\n\n      stopWatchPrometheusQuery: StopWatchPrometheus = (query, timespan) => {\n        const queryKey = getQueryKey(query, timespan);\n        this.queries = this.queries.filter((q) => q !== queryKey);\n        this.props.stopWatchPrometheusQuery(query, timespan);\n      };\n\n      watchAlerts: WatchAlerts = () => {\n        this.watchingAlerts = true;\n      };\n\n      stopWatchAlerts: StopWatchAlerts = () => {\n        this.watchingAlerts = false;\n      };\n\n      watchK8sResource: WatchK8sResource = (resource) => {\n        this.setState((state: WithDashboardResourcesState) => ({\n          k8sResources: [...state.k8sResources, { ...resource, optional: true }],\n        }));\n      };\n\n      stopWatchK8sResource: StopWatchK8sResource = (resource) => {\n        this.setState((state: WithDashboardResourcesState) => ({\n          k8sResources: state.k8sResources.filter((r) => r.prop !== resource.prop),\n        }));\n      };\n\n      getExternalProps = (props) => {\n        return _.omit(\n          props,\n          'watchURL',\n          'stopWatchURL',\n          'watchPrometheusQuery',\n          'stopWatchPrometheusQuery',\n          'watchAlerts',\n          'stopWatchAlerts',\n          RESULTS_TYPE.URL,\n          RESULTS_TYPE.PROMETHEUS,\n          'notificationAlerts',\n        );\n      };\n\n      render() {\n        return (\n          <Firehose resources={this.state.k8sResources}>\n            <WrappedComponent\n              watchURL={this.watchURL}\n              stopWatchURL={this.props.stopWatchURL}\n              watchPrometheus={this.watchPrometheus}\n              stopWatchPrometheusQuery={this.stopWatchPrometheusQuery}\n              watchAlerts={this.watchAlerts}\n              stopWatchAlerts={this.stopWatchAlerts}\n              urlResults={this.props[RESULTS_TYPE.URL]}\n              prometheusResults={this.props[RESULTS_TYPE.PROMETHEUS]}\n              notificationAlerts={this.props.notificationAlerts}\n              watchK8sResource={this.watchK8sResource}\n              stopWatchK8sResource={this.stopWatchK8sResource}\n              {...this.getExternalProps(this.props)}\n            />\n          </Firehose>\n        );\n      }\n    },\n  );\n\ntype DispatchToProps = (\n  dispatch: any,\n) => {\n  watchURL: WatchURL;\n  stopWatchURL: StopWatchURL;\n  watchPrometheusQuery: WatchPrometheus;\n  stopWatchPrometheusQuery: StopWatchPrometheus;\n};\n\ntype WatchURL = (url: string, fetch?: Fetch) => void;\ntype StopWatchURL = (url: string) => void;\ntype WatchPrometheus = (query: string, namespace?: string, timespan?: number) => void;\ntype StopWatchPrometheus = (query: string, timespan?: number) => void;\ntype WatchAlerts = () => void;\ntype StopWatchAlerts = () => void;\n\ntype WithDashboardResourcesState = {\n  k8sResources: FirehoseResource[];\n};\n\ntype WithDashboardResourcesProps = {\n  watchURL: WatchURLAction;\n  watchPrometheusQuery: WatchPrometheusQueryAction;\n  stopWatchURL: StopWatchURLAction;\n  stopWatchPrometheusQuery: StopWatchPrometheusAction;\n  [RESULTS_TYPE.PROMETHEUS]: RequestMap<PrometheusResponse>;\n  [RESULTS_TYPE.URL]: RequestMap<any>;\n  notificationAlerts: any;\n};\n\nexport type WatchK8sResource = (resource: FirehoseResource) => void;\nexport type StopWatchK8sResource = (resource: FirehoseResource) => void;\n\nexport type DashboardItemProps = {\n  watchURL: WatchURL;\n  stopWatchURL: StopWatchURL;\n  watchPrometheus: WatchPrometheus;\n  stopWatchPrometheusQuery: StopWatchPrometheus;\n  watchAlerts: WatchAlerts;\n  stopWatchAlerts: StopWatchAlerts;\n  urlResults: RequestMap<any>;\n  prometheusResults: RequestMap<PrometheusResponse>;\n  notificationAlerts: NotificationAlerts;\n  watchK8sResource: WatchK8sResource;\n  stopWatchK8sResource: StopWatchK8sResource;\n  resources?: {\n    [key: string]:\n      | FirehoseResult\n      | FirehoseResult<K8sResourceKind>\n      | FirehoseResult<AppliedClusterResourceQuotaKind>;\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useActivePerspective, LIMIT_STATE, Humanize } from '@console/dynamic-plugin-sdk';\nimport { getPrometheusQueryResponse } from '@console/internal/actions/dashboards';\nimport {\n  withDashboardResources,\n  DashboardItemProps,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { Dropdown } from '@console/internal/components/utils/dropdown';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sKind, referenceForModel, K8sResourceCommon } from '@console/internal/module/k8s';\nimport { getName, getNamespace, useFlag } from '../../..';\nimport { FLAGS } from '../../../constants';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status';\nimport Status from '../status-card/StatusPopup';\n\nimport './top-consumer-popover.scss';\n\nconst ConsumerPopover: React.FC<ConsumerPopoverProps> = React.memo(\n  ({\n    current,\n    title,\n    humanize,\n    consumers,\n    namespace,\n    position = PopoverPosition.top,\n    description,\n    children,\n  }) => {\n    const { t } = useTranslation();\n    const [isOpen, setOpen] = React.useState(false);\n    const onShow = React.useCallback(() => setOpen(true), []);\n    const onHide = React.useCallback(() => setOpen(false), []);\n    if (!current) {\n      return null;\n    }\n    return (\n      <Popover\n        position={position}\n        headerContent={t('console-shared~{{title}} breakdown', { title })}\n        bodyContent={\n          <PopoverBody\n            humanize={humanize}\n            consumers={consumers}\n            namespace={namespace}\n            isOpen={isOpen}\n            description={description}\n          >\n            {children}\n          </PopoverBody>\n        }\n        enableFlip\n        onShow={onShow}\n        onHide={onHide}\n        maxWidth=\"21rem\"\n      >\n        <Button variant=\"link\" isInline>\n          {current}\n        </Button>\n      </Popover>\n    );\n  },\n);\n\nexport default ConsumerPopover;\n\nconst getLimitIcon = (state: LIMIT_STATE): React.ReactNode => {\n  switch (state) {\n    case LIMIT_STATE.ERROR:\n      return <RedExclamationCircleIcon />;\n    case LIMIT_STATE.WARN:\n      return <YellowExclamationTriangleIcon />;\n    default:\n      return null;\n  }\n};\n\nconst getResourceToWatch = (model: K8sKind, namespace: string, fieldSelector: string) => ({\n  isList: true,\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  fieldSelector,\n  namespace,\n});\n\nexport const LimitsBody: React.FC<LimitsBodyProps> = ({\n  limitState,\n  requestedState,\n  total,\n  limit,\n  current,\n  available,\n  requested,\n}) => {\n  const { t } = useTranslation();\n  return (\n    ((!!limitState && limitState !== LIMIT_STATE.OK) ||\n      (!!requestedState && requestedState !== LIMIT_STATE.OK)) && (\n      <ul className=\"co-utilization-card-popover__consumer-list\">\n        <Status value={total}>{t('console-shared~Total capacity')}</Status>\n        <Status value={limit} icon={getLimitIcon(limitState)}>\n          {t('console-shared~Total limit')}\n        </Status>\n        <Status value={current}>{t('console-shared~Current utilization')}</Status>\n        <Status value={available}>{t('console-shared~Current available capacity')}</Status>\n        <Status value={requested} icon={getLimitIcon(requestedState)}>\n          {t('console-shared~Total requested')}\n        </Status>\n      </ul>\n    )\n  );\n};\n\nexport const PopoverBody = withDashboardResources<DashboardItemProps & PopoverBodyProps>(\n  React.memo(\n    ({\n      humanize,\n      consumers,\n      namespace,\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      prometheusResults,\n      isOpen,\n      description,\n      children,\n    }) => {\n      const { t } = useTranslation();\n      const [currentConsumer, setCurrentConsumer] = React.useState(consumers[0]);\n      const activePerspective = useActivePerspective()[0];\n      const canAccessMonitoring =\n        useFlag(FLAGS.CAN_GET_NS) && !!window.SERVER_FLAGS.prometheusBaseURL;\n      const { query, model, metric, fieldSelector } = currentConsumer;\n      const k8sResource = React.useMemo(\n        () => (isOpen ? getResourceToWatch(model, namespace, fieldSelector) : null),\n        [fieldSelector, isOpen, model, namespace],\n      );\n      const [consumerData, consumerLoaded, consumersLoadError] = useK8sWatchResource<\n        K8sResourceCommon[]\n      >(k8sResource);\n      React.useEffect(() => {\n        if (!isOpen) {\n          return () => {};\n        }\n        watchPrometheus(query, namespace);\n        return () => {\n          stopWatchPrometheusQuery(query);\n        };\n      }, [query, stopWatchPrometheusQuery, watchPrometheus, namespace, isOpen]);\n\n      const top5Data = [];\n\n      const [data, error] = getPrometheusQueryResponse(prometheusResults, query);\n      const bodyData = getInstantVectorStats(data, metric);\n\n      if (k8sResource && consumerLoaded && !consumersLoadError) {\n        for (const d of bodyData) {\n          const consumerExists = consumerData.some(\n            (consumer) =>\n              getName(consumer) === d.metric[metric] &&\n              (model.namespaced ? getNamespace(consumer) === d.metric.namespace : true),\n          );\n          if (consumerExists) {\n            top5Data.push({ ...d, y: humanize(d.y).string });\n          }\n          if (top5Data.length === 5) {\n            break;\n          }\n        }\n      }\n\n      const monitoringParams = React.useMemo(() => {\n        const params = new URLSearchParams();\n        params.set('query0', currentConsumer.query);\n        return params;\n      }, [currentConsumer.query]);\n\n      const dropdownItems = React.useMemo(\n        () =>\n          consumers.reduce((items, curr) => {\n            items[referenceForModel(curr.model)] = t('console-shared~By {{label}}', {\n              label: curr.model.labelKey ? t(curr.model.labelKey) : curr.model.label,\n            });\n            return items;\n          }, {}),\n        [consumers, t],\n      );\n\n      const onDropdownChange = React.useCallback(\n        (key) => setCurrentConsumer(consumers.find((c) => referenceForModel(c.model) === key)),\n        [consumers],\n      );\n\n      const monitoringURL =\n        canAccessMonitoring && activePerspective === 'admin'\n          ? `/monitoring/query-browser?${monitoringParams.toString()}`\n          : `/dev-monitoring/ns/${namespace}/metrics?${monitoringParams.toString()}`;\n\n      let body: React.ReactNode;\n      if (error || consumersLoadError) {\n        body = <div className=\"text-secondary\">{t('console-shared~Not available')}</div>;\n      } else if (!consumerLoaded || !data) {\n        body = (\n          <ul className=\"co-utilization-card-popover__consumer-list\">\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n          </ul>\n        );\n      } else {\n        body = (\n          <>\n            <ul\n              className=\"co-utilization-card-popover__consumer-list\"\n              aria-label={t('console-shared~Top consumer by {{label}}', { label: model.label })}\n            >\n              {top5Data &&\n                top5Data.map((item) => {\n                  const title = String(item.x);\n                  return (\n                    <ListItem key={title} value={item.y}>\n                      <Link\n                        className=\"co-utilization-card-popover__consumer-name\"\n                        to={resourcePathFromModel(model, title, item.metric.namespace)}\n                      >\n                        {title}\n                      </Link>\n                    </ListItem>\n                  );\n                })}\n            </ul>\n            <Link to={monitoringURL}>{t('console-shared~View more')}</Link>\n          </>\n        );\n      }\n\n      return (\n        <div className=\"co-utilization-card-popover__body\">\n          {description && (\n            <div className=\"co-utilization-card-popover__description\">{description}</div>\n          )}\n          {children}\n          <div className=\"co-utilization-card-popover__title\">\n            {consumers.length === 1\n              ? t('console-shared~Top {{label}} consumers', {\n                  label: currentConsumer.model.label.toLowerCase(),\n                })\n              : t('console-shared~Top consumers')}\n          </div>\n          {consumers.length > 1 && (\n            <Dropdown\n              className=\"co-utilization-card-popover__dropdown\"\n              id=\"consumer-select\"\n              name=\"selectConsumerType\"\n              aria-label={t('console-shared~Select consumer type')}\n              items={dropdownItems}\n              onChange={onDropdownChange}\n              selectedKey={referenceForModel(model)}\n            />\n          )}\n          {body}\n        </div>\n      );\n    },\n  ),\n);\n\nconst ListItem: React.FC<ListItemProps> = ({ children, value }) => (\n  <li className=\"co-utilization-card-popover__consumer-item\">\n    {children}\n    <div className=\"co-utilization-card-popover__consumer-value\">{value}</div>\n  </li>\n);\n\ntype ListItemProps = {\n  value: React.ReactText;\n};\n\ntype LimitsBodyProps = {\n  limitState?: LIMIT_STATE;\n  requestedState?: LIMIT_STATE;\n  limit?: string;\n  requested?: string;\n  available?: string;\n  total?: string;\n  current: string;\n};\n\ntype PopoverProps = {\n  humanize: Humanize;\n  consumers: { model: K8sKind; query: string; metric: string; fieldSelector?: string }[];\n  namespace?: string;\n  description?: string;\n};\n\ntype PopoverBodyProps = PopoverProps & {\n  topConsumers?: DataPoint[][];\n  error?: boolean;\n  isOpen: boolean;\n};\n\nexport type ConsumerPopoverProps = PopoverProps & {\n  position?: PopoverPosition;\n  title: string;\n  current: string;\n};\n","import * as _ from 'lodash';\nimport { QueryWithDescription } from '../components/dashboard/utilization-card/UtilizationItem';\n\nexport enum OverviewQuery {\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  MEMORY_UTILIZATION = 'MEMORY_UTILIZATION',\n  MEMORY_REQUESTS = 'MEMORY_REQUESTS',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  CPU_UTILIZATION = 'CPU_UTILIZATION',\n  CPU_TOTAL = 'CPU_TOTAL',\n  CPU_REQUESTS = 'CPU_REQUESTS',\n  STORAGE_UTILIZATION = 'STORAGE_UTILIZATION',\n  STORAGE_TOTAL = 'STORAGE_TOTAL',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_STORAGE = 'PODS_BY_STORAGE',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  NODES_BY_CPU = 'NODES_BY_CPU',\n  NODES_BY_MEMORY = 'NODES_BY_MEMORY',\n  NODES_BY_STORAGE = 'NODES_BY_STORAGE',\n  NODES_BY_NETWORK_IN = 'NODES_BY_NETWORK_IN',\n  NODES_BY_NETWORK_OUT = 'NODES_BY_NETWORK_OUT',\n  NODES_BY_PODS = 'NODES_BY_PODS',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_STORAGE = 'PROJECTS_BY_STORAGE',\n  PROJECTS_BY_NETWORK_IN = 'PROJECTS_BY_NETWORK_IN',\n  PROJECTS_BY_NETWORK_OUT = 'PROJECTS_BY_NETWORK_OUT',\n  PROJECTS_BY_PODS = 'PROJECTS_BY_PODS',\n  POD_UTILIZATION = 'POD_UTILIZATION',\n}\n\nconst top25Queries = {\n  [OverviewQuery.PODS_BY_CPU]: _.template(\n    `\n      topk(25, sort_desc(\n        (\n          sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\"}[5m])) BY (pod, namespace)\n          *\n          on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n        )\n        *\n        on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n      ))\n    `,\n  ),\n  [OverviewQuery.PODS_BY_MEMORY]: _.template(\n    `\n      topk(25, sort_desc(\n        (\n          sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\"}[5m])) BY (pod, namespace)\n          *\n          on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n        )\n        *\n        on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n      ))\n    `,\n  ),\n  [OverviewQuery.PODS_BY_STORAGE]: _.template(\n    `\n      topk(25, sort_desc(\n        (\n          sum(avg_over_time(pod:container_fs_usage_bytes:sum{container=\"\", pod!=\"\"}[5m])) BY (pod, namespace)\n          *\n          on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n        )\n        *\n        on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n      ))\n    `,\n  ),\n  [OverviewQuery.PODS_BY_NETWORK_IN]: _.template(\n    `\n      topk(25, sort_desc(\n        (\n          sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace, pod)\n          *\n          on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n        )\n        *\n        on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n      ))\n    `,\n  ),\n  [OverviewQuery.PODS_BY_NETWORK_OUT]: _.template(\n    `\n      topk(25, sort_desc(\n        (\n          sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace, pod)\n          *\n          on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n        )\n        *\n        on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n      ))\n    `,\n  ),\n  [OverviewQuery.NODES_BY_CPU]: _.template(\n    `\n      topk(25, sort_desc(\n        avg_over_time(instance:node_cpu:rate:sum[5m])\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.NODES_BY_MEMORY]: _.template(\n    `\n      topk(25, sort_desc(\n        (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.NODES_BY_STORAGE]: _.template(\n    `\n      topk(25, sort_desc(\n        (\n          sum by (instance) (max by (device, instance) (node_filesystem_size_bytes{device=~\"/.*\"}))\n          -\n          sum by (instance) (max by (device, instance) (node_filesystem_avail_bytes{device=~\"/.*\"}))\n        )\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.NODES_BY_PODS]: _.template(\n    `\n      topk(25, sort_desc(\n        sum(avg_over_time(kubelet_running_pods[5m])) BY (node)\n        *\n        on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n      ))\n    `,\n  ),\n  [OverviewQuery.NODES_BY_NETWORK_IN]: _.template(\n    `\n      topk(25, sort_desc(\n        sum(instance:node_network_receive_bytes_excluding_lo:rate1m) BY (instance)\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.NODES_BY_NETWORK_OUT]: _.template(\n    `\n      topk(25, sort_desc(\n        sum(instance:node_network_transmit_bytes_excluding_lo:rate1m) BY (instance)\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      ))\n    `,\n  ),\n\n  [OverviewQuery.PROJECTS_BY_CPU]: _.template(\n    `\n      topk(25, sort_desc(\n        sum by (namespace) (\n          (\n            sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\"}[5m])) BY (namespace, pod)\n            *\n            on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n          )\n          *\n          on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.PROJECTS_BY_MEMORY]: _.template(\n    `\n      topk(25, sort_desc(\n        sum by (namespace) (\n          (\n            sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\"}[5m])) BY (namespace, pod)\n            *\n            on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n          )\n          *\n          on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.PROJECTS_BY_STORAGE]: _.template(\n    `\n      topk(25, sort_desc(\n        sum by (namespace) (\n          (\n            sum(avg_over_time(pod:container_fs_usage_bytes:sum{container=\"\", pod!=\"\"}[5m])) BY (namespace, pod)\n            *\n            on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n          )\n          *\n          on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.PROJECTS_BY_PODS]: _.template(\n    `\n      topk(25, sort_desc(\n        count by (namespace) (\n            topk without(uid) (1, kube_running_pod_ready)\n            *\n            ignoring(node,uid) group_right node_namespace_pod:kube_pod_info:\n          *\n          on(node) group_left() (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"})))\n        ))\n    `,\n  ),\n  [OverviewQuery.PROJECTS_BY_NETWORK_IN]: _.template(\n    `\n      topk(25, sort_desc(\n        sum by (namespace) (\n          (\n            sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace, pod)\n            *\n            on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n          )\n          *\n          on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n        )\n      ))\n    `,\n  ),\n  [OverviewQuery.PROJECTS_BY_NETWORK_OUT]: _.template(\n    `\n      topk(25, sort_desc(\n        sum by (namespace) (\n          (\n            sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\"}[5m])) BY (namespace, pod)\n            *\n            on(pod,namespace) group_left(node) (node_namespace_pod:kube_pod_info:)\n          )\n          *\n          on(node) group_left(role) (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n        )\n      ))\n    `,\n  ),\n};\n\nconst overviewQueries = {\n  [OverviewQuery.MEMORY_TOTAL]: _.template(\n    `\n      sum(\n        node_memory_MemTotal_bytes\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.MEMORY_UTILIZATION]: _.template(\n    `\n      sum(\n        (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.MEMORY_REQUESTS]: _.template(\n    `\n      sum(\n        kube_pod_resource_request{resource=\"memory\"}\n        *\n        on(node) group_left(role) (\n          max by (node) (kube_node_role{role=~\"<%= nodeType %>\"})\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.NETWORK_UTILIZATION]: _.template(\n    `\n      sum(\n        (\n          instance:node_network_transmit_bytes_excluding_lo:rate1m\n          +\n          instance:node_network_receive_bytes_excluding_lo:rate1m\n        )\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.CPU_UTILIZATION]: _.template(\n    `\n      sum(\n        1 - sum without (mode) (rate(node_cpu_seconds_total{mode=~\"idle|iowait|steal\"}[2m]))\n        *\n        on(instance) group_left() (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\",\"(.*)\")\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.CPU_TOTAL]: _.template(\n    `\n      sum(\n        kube_node_status_capacity{resource=\"cpu\",unit=\"core\"}\n        *\n        on(node) group_left(role) (\n          max by (node) (kube_node_role{role=~\"<%= nodeType %>\"})\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.CPU_REQUESTS]: _.template(\n    `\n      sum(\n        kube_pod_resource_request{resource=\"cpu\"}\n        *\n        on(node) group_left(role) (\n          max by (node) (kube_node_role{role=~\"<%= nodeType %>\"})\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.STORAGE_UTILIZATION]: _.template(\n    `\n      sum(\n        (\n          max by (device, instance) (node_filesystem_size_bytes{device=~\"/.*\"})\n          -\n          max by (device, instance) (node_filesystem_free_bytes{device=~\"/.*\"})\n        )\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.STORAGE_TOTAL]: _.template(\n    `\n      sum(\n        max by (device, instance) (node_filesystem_size_bytes{device=~\"/.*\"})\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.POD_UTILIZATION]: _.template(\n    `\n      count(\n        (\n          topk without(uid) (1, kube_running_pod_ready)\n          *\n          ignoring(node,uid) group_right node_namespace_pod:kube_pod_info:\n        )\n        *\n        on(node) group_left() (max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}))\n      )\n    `,\n  ),\n  [OverviewQuery.NETWORK_IN_UTILIZATION]: _.template(\n    `\n      sum(\n        instance:node_network_receive_bytes_excluding_lo:rate1m\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      )\n    `,\n  ),\n  [OverviewQuery.NETWORK_OUT_UTILIZATION]: _.template(\n    `\n      sum(\n        instance:node_network_transmit_bytes_excluding_lo:rate1m\n        *\n        on(instance) group_left(role) (\n          label_replace(max by (node) (kube_node_role{role=~\"<%= nodeType %>\"}), \"instance\", \"$1\", \"node\", \"(.*)\")\n        )\n      )\n    `,\n  ),\n};\n\nexport const getMultilineQueries = (\n  nodeType: string,\n): { [key: string]: QueryWithDescription[] } => ({\n  [OverviewQuery.NETWORK_UTILIZATION]: [\n    {\n      query: overviewQueries[OverviewQuery.NETWORK_IN_UTILIZATION]({ nodeType }),\n      desc: 'in',\n    },\n    {\n      query: overviewQueries[OverviewQuery.NETWORK_OUT_UTILIZATION]({ nodeType }),\n      desc: 'out',\n    },\n  ],\n});\n\nexport const getTop25ConsumerQueries = (nodeType: string) => ({\n  [OverviewQuery.PODS_BY_CPU]: top25Queries[OverviewQuery.PODS_BY_CPU]({ nodeType }),\n  [OverviewQuery.PODS_BY_MEMORY]: top25Queries[OverviewQuery.PODS_BY_MEMORY]({ nodeType }),\n  [OverviewQuery.PODS_BY_STORAGE]: top25Queries[OverviewQuery.PODS_BY_STORAGE]({ nodeType }),\n  [OverviewQuery.PODS_BY_NETWORK_IN]: top25Queries[OverviewQuery.PODS_BY_NETWORK_IN]({ nodeType }),\n  [OverviewQuery.PODS_BY_NETWORK_OUT]: top25Queries[OverviewQuery.PODS_BY_NETWORK_OUT]({\n    nodeType,\n  }),\n  [OverviewQuery.NODES_BY_CPU]: top25Queries[OverviewQuery.NODES_BY_CPU]({ nodeType }),\n  [OverviewQuery.NODES_BY_MEMORY]: top25Queries[OverviewQuery.NODES_BY_MEMORY]({ nodeType }),\n  [OverviewQuery.NODES_BY_STORAGE]: top25Queries[OverviewQuery.NODES_BY_STORAGE]({ nodeType }),\n  [OverviewQuery.NODES_BY_PODS]: top25Queries[OverviewQuery.NODES_BY_PODS]({ nodeType }),\n  [OverviewQuery.NODES_BY_NETWORK_IN]: top25Queries[OverviewQuery.NODES_BY_NETWORK_IN]({\n    nodeType,\n  }),\n  [OverviewQuery.NODES_BY_NETWORK_OUT]: top25Queries[OverviewQuery.NODES_BY_NETWORK_OUT]({\n    nodeType,\n  }),\n  [OverviewQuery.PROJECTS_BY_CPU]: top25Queries[OverviewQuery.PROJECTS_BY_CPU]({ nodeType }),\n  [OverviewQuery.PROJECTS_BY_MEMORY]: top25Queries[OverviewQuery.PROJECTS_BY_MEMORY]({ nodeType }),\n  [OverviewQuery.PROJECTS_BY_STORAGE]: top25Queries[OverviewQuery.PROJECTS_BY_STORAGE]({\n    nodeType,\n  }),\n  [OverviewQuery.PROJECTS_BY_PODS]: top25Queries[OverviewQuery.PROJECTS_BY_PODS]({ nodeType }),\n  [OverviewQuery.PROJECTS_BY_NETWORK_IN]: top25Queries[OverviewQuery.PROJECTS_BY_NETWORK_IN]({\n    nodeType,\n  }),\n  [OverviewQuery.PROJECTS_BY_NETWORK_OUT]: top25Queries[OverviewQuery.PROJECTS_BY_NETWORK_OUT]({\n    nodeType,\n  }),\n});\n\nexport const getUtilizationQueries = (nodeType: string) => ({\n  [OverviewQuery.CPU_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.CPU_UTILIZATION]({ nodeType }),\n    total: overviewQueries[OverviewQuery.CPU_TOTAL]({ nodeType }),\n    requests: overviewQueries[OverviewQuery.CPU_REQUESTS]({ nodeType }),\n  },\n  [OverviewQuery.MEMORY_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.MEMORY_UTILIZATION]({ nodeType }),\n    total: overviewQueries[OverviewQuery.MEMORY_TOTAL]({ nodeType }),\n    requests: overviewQueries[OverviewQuery.MEMORY_REQUESTS]({ nodeType }),\n  },\n  [OverviewQuery.STORAGE_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.STORAGE_UTILIZATION]({ nodeType }),\n    total: overviewQueries[OverviewQuery.STORAGE_TOTAL]({ nodeType }),\n  },\n  [OverviewQuery.POD_UTILIZATION]: {\n    utilization: overviewQueries[OverviewQuery.POD_UTILIZATION]({ nodeType }),\n  },\n});\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Badge,\n  Card,\n  CardHeader,\n  CardTitle,\n  MenuToggle,\n  MenuToggleElement,\n  Select,\n  SelectList,\n  SelectOption,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport {\n  ClusterOverviewUtilizationItem,\n  isClusterOverviewUtilizationItem,\n  ClusterOverviewMultilineUtilizationItem,\n  isClusterOverviewMultilineUtilizationItem,\n  useResolvedExtensions,\n  Humanize,\n  TopConsumerPopoverProps,\n} from '@console/dynamic-plugin-sdk';\nimport UtilizationItem, {\n  MultilineUtilizationItem,\n  QueryWithDescription,\n  LimitRequested,\n  trimSecondsXMutator,\n} from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\n\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport {\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeNumber,\n  humanizeDecimalBytesPerSec,\n} from '../../../utils/units';\nimport { getRangeVectorStats, getInstantVectorStats } from '../../../graphs/utils';\nimport {\n  getMultilineQueries,\n  getUtilizationQueries,\n  OverviewQuery,\n} from '@console/shared/src/promql/cluster-dashboard';\nimport { MachineConfigPoolModel } from '../../../../models';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { DataPoint, PrometheusResponse } from '../../../graphs';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { MachineConfigPoolKind, referenceForModel } from '@console/internal/module/k8s';\nimport { UtilizationDurationDropdown } from '@console/shared/src/components/dashboard/utilization-card/UtilizationDurationDropdown';\nimport { useUtilizationDuration } from '@console/shared/src/hooks/useUtilizationDuration';\nimport {\n  ClusterUtilizationContext,\n  CPUPopover,\n  MemoryPopover,\n  StoragePopover,\n  NetworkInPopover,\n  NetworkOutPopover,\n  PodPopover,\n} from './utilization-popovers';\n\nconst networkPopovers = [NetworkInPopover, NetworkOutPopover];\n\nexport const PrometheusUtilizationItem = withDashboardResources<PrometheusUtilizationItemProps>(\n  ({\n    watchPrometheus,\n    stopWatchPrometheusQuery,\n    prometheusResults,\n    utilizationQuery,\n    totalQuery,\n    title,\n    TopConsumerPopover,\n    humanizeValue,\n    byteDataType,\n    namespace,\n    isDisabled = false,\n    limitQuery,\n    requestQuery,\n    setLimitReqState,\n  }) => {\n    let utilization: PrometheusResponse, utilizationError: any;\n    let total: PrometheusResponse, totalError: any;\n    let max: DataPoint<number>[];\n    let limit: PrometheusResponse, limitError: any;\n    let request: PrometheusResponse, requestError: any;\n    let isLoading = false;\n    const { duration } = useUtilizationDuration();\n\n    React.useEffect(() => {\n      if (!isDisabled) {\n        watchPrometheus(utilizationQuery, namespace, duration);\n        totalQuery && watchPrometheus(totalQuery, namespace);\n        limitQuery && watchPrometheus(limitQuery, namespace, duration);\n        requestQuery && watchPrometheus(requestQuery, namespace, duration);\n        return () => {\n          stopWatchPrometheusQuery(utilizationQuery, duration);\n          totalQuery && stopWatchPrometheusQuery(totalQuery);\n          limitQuery && stopWatchPrometheusQuery(limitQuery, duration);\n          requestQuery && stopWatchPrometheusQuery(requestQuery, duration);\n        };\n      }\n    }, [\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      duration,\n      utilizationQuery,\n      totalQuery,\n      namespace,\n      isDisabled,\n      limitQuery,\n      requestQuery,\n    ]);\n\n    if (!isDisabled) {\n      [utilization, utilizationError] = getPrometheusQueryResponse(\n        prometheusResults,\n        utilizationQuery,\n        duration,\n      );\n      [total, totalError] = getPrometheusQueryResponse(prometheusResults, totalQuery);\n      [limit, limitError] = getPrometheusQueryResponse(prometheusResults, limitQuery, duration);\n      [request, requestError] = getPrometheusQueryResponse(\n        prometheusResults,\n        requestQuery,\n        duration,\n      );\n\n      max = getInstantVectorStats(total);\n      isLoading = !utilization || (totalQuery && !total) || (limitQuery && !limit);\n    }\n\n    return (\n      <UtilizationItem\n        title={title}\n        utilization={utilization}\n        limit={limit}\n        requested={request}\n        error={utilizationError || totalError || limitError || requestError}\n        isLoading={isLoading}\n        humanizeValue={humanizeValue}\n        byteDataType={byteDataType}\n        query={[utilizationQuery, limitQuery, requestQuery]}\n        max={max && max.length ? max[0].y : null}\n        TopConsumerPopover={TopConsumerPopover}\n        setLimitReqState={setLimitReqState}\n      />\n    );\n  },\n);\n\nexport const PrometheusMultilineUtilizationItem = withDashboardResources<\n  PrometheusMultilineUtilizationItemProps\n>(\n  ({\n    watchPrometheus,\n    stopWatchPrometheusQuery,\n    prometheusResults,\n    queries,\n    title,\n    TopConsumerPopovers,\n    humanizeValue,\n    byteDataType,\n    namespace,\n    isDisabled = false,\n  }) => {\n    const { duration } = useUtilizationDuration();\n    React.useEffect(() => {\n      if (!isDisabled) {\n        queries.forEach((q) => watchPrometheus(q.query, namespace, duration));\n        return () => {\n          queries.forEach((q) => stopWatchPrometheusQuery(q.query, duration));\n        };\n      }\n    }, [watchPrometheus, stopWatchPrometheusQuery, duration, queries, namespace, isDisabled]);\n\n    const stats = [];\n    let hasError = false;\n    let isLoading = false;\n    if (!isDisabled) {\n      queries.forEach((query) => {\n        const [response, responseError] = getPrometheusQueryResponse(\n          prometheusResults,\n          query.query,\n          duration,\n        );\n        if (responseError) {\n          hasError = true;\n          return false;\n        }\n        if (!response) {\n          isLoading = true;\n          return false;\n        }\n        stats.push(getRangeVectorStats(response, query.desc, null, trimSecondsXMutator)?.[0] || []);\n      });\n    }\n\n    return (\n      <MultilineUtilizationItem\n        title={title}\n        data={stats}\n        error={hasError}\n        isLoading={isLoading}\n        humanizeValue={humanizeValue}\n        byteDataType={byteDataType}\n        queries={queries}\n        TopConsumerPopovers={TopConsumerPopovers}\n      />\n    );\n  },\n);\n\nconst UtilizationCardNodeFilter: React.FC<UtilizationCardNodeFilterProps> = ({\n  machineConfigPools,\n  onNodeSelect,\n  selectedNodes,\n}) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const sortedMCPs = machineConfigPools.sort((a, b) => {\n    const order = ['worker', 'master'];\n    const indexA = order.indexOf(a.metadata.name);\n    const indexB = order.indexOf(b.metadata.name);\n    if (indexA === -1 && indexB === -1) {\n      return a.metadata.name.localeCompare(b.metadata.name);\n    }\n    if (indexA === -1) {\n      return 1;\n    }\n    if (indexB === -1) {\n      return -1;\n    }\n    return indexA - indexB;\n  });\n\n  const selectOptions = sortedMCPs.map((mcp) => {\n    const mcpName = mcp.metadata.name === 'master' ? 'control plane' : mcp.metadata.name;\n    return (\n      <SelectOption\n        hasCheckbox\n        key={mcp.metadata.name}\n        value={mcpName}\n        isSelected={selectedNodes.includes(mcp.metadata.name)}\n      >\n        {mcpName}\n      </SelectOption>\n    );\n  });\n\n  const toggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle ref={toggleRef} onClick={(open) => setIsOpen(open)} variant=\"plainText\">\n      {t('public~Filter by Node type')}\n      {selectedNodes.length > 0 && (\n        <Badge className=\"pf-v5-u-ml-sm\" isRead>\n          {selectedNodes.length}\n        </Badge>\n      )}\n    </MenuToggle>\n  );\n\n  return (\n    <Select\n      role=\"menu\"\n      aria-label={t('public~Filter by Node type')}\n      onSelect={onNodeSelect}\n      isOpen={isOpen}\n      selected={selectedNodes}\n      onOpenChange={(open) => setIsOpen(open)}\n      toggle={toggle}\n    >\n      <SelectList>{selectOptions}</SelectList>\n    </Select>\n  );\n};\n\nexport const UtilizationCard = () => {\n  const { t } = useTranslation();\n  const [machineConfigPools, machineConfigPoolsLoaded] = useK8sWatchResource<\n    MachineConfigPoolKind[]\n  >({\n    isList: true,\n    kind: referenceForModel(MachineConfigPoolModel),\n  });\n  // TODO: add `useUserSettings` to get default selected\n  const [selectedNodes, setSelectedNodes] = React.useState<string[]>([]);\n\n  const [dynamicItemExtensions] = useResolvedExtensions<ClusterOverviewUtilizationItem>(\n    isClusterOverviewUtilizationItem,\n  );\n  const [dynamicMultilineItemExtensions] = useResolvedExtensions<\n    ClusterOverviewMultilineUtilizationItem\n  >(isClusterOverviewMultilineUtilizationItem);\n\n  // TODO: add `useUserSettingsCompatibility` to store selectedNodes\n  const onNodeSelect = (event: React.MouseEvent, selection: string) => {\n    const selectionUpdated = selection === 'control plane' ? 'master' : selection;\n    if (selectedNodes.includes(selectionUpdated)) {\n      setSelectedNodes(selectedNodes.filter((item) => item !== selectionUpdated));\n    } else {\n      setSelectedNodes([...selectedNodes, selectionUpdated]);\n    }\n  };\n  // if no filter is applied, show all nodes using regex\n  const nodeType = _.isEmpty(selectedNodes) ? '.+' : selectedNodes.join('|');\n  const [utilizationQueries, multilineQueries] = React.useMemo(\n    () => [getUtilizationQueries(nodeType), getMultilineQueries(nodeType)],\n    [nodeType],\n  );\n  return (\n    machineConfigPoolsLoaded && (\n      <Card data-test-id=\"utilization-card\" isClickable isSelectable>\n        <CardHeader\n          actions={{\n            actions: (\n              <>\n                <Split>\n                  <SplitItem>\n                    <UtilizationCardNodeFilter\n                      machineConfigPools={machineConfigPools}\n                      onNodeSelect={onNodeSelect}\n                      selectedNodes={selectedNodes}\n                    />\n                  </SplitItem>\n                  <SplitItem>\n                    <UtilizationDurationDropdown />\n                  </SplitItem>\n                </Split>\n              </>\n            ),\n            hasNoOffset: false,\n            className: undefined,\n          }}\n        >\n          <CardTitle data-test=\"utilization-card__title\">\n            {t('public~Cluster utilization')}\n          </CardTitle>\n        </CardHeader>\n        <UtilizationBody>\n          <ClusterUtilizationContext.Provider value={nodeType}>\n            <PrometheusUtilizationItem\n              title={t('public~CPU')}\n              utilizationQuery={utilizationQueries[OverviewQuery.CPU_UTILIZATION].utilization}\n              totalQuery={utilizationQueries[OverviewQuery.CPU_UTILIZATION].total}\n              requestQuery={utilizationQueries[OverviewQuery.CPU_UTILIZATION].requests}\n              TopConsumerPopover={CPUPopover}\n              humanizeValue={humanizeCpuCores}\n            />\n            <PrometheusUtilizationItem\n              title={t('public~Memory')}\n              utilizationQuery={utilizationQueries[OverviewQuery.MEMORY_UTILIZATION].utilization}\n              totalQuery={utilizationQueries[OverviewQuery.MEMORY_UTILIZATION].total}\n              requestQuery={utilizationQueries[OverviewQuery.MEMORY_UTILIZATION].requests}\n              TopConsumerPopover={MemoryPopover}\n              humanizeValue={humanizeBinaryBytes}\n              byteDataType={ByteDataTypes.BinaryBytes}\n            />\n            <PrometheusUtilizationItem\n              title={t('public~Filesystem')}\n              utilizationQuery={utilizationQueries[OverviewQuery.STORAGE_UTILIZATION].utilization}\n              totalQuery={utilizationQueries[OverviewQuery.STORAGE_UTILIZATION].total}\n              TopConsumerPopover={StoragePopover}\n              humanizeValue={humanizeBinaryBytes}\n              byteDataType={ByteDataTypes.BinaryBytes}\n            />\n            <PrometheusMultilineUtilizationItem\n              title={t('public~Network transfer')}\n              queries={multilineQueries[OverviewQuery.NETWORK_UTILIZATION]}\n              humanizeValue={humanizeDecimalBytesPerSec}\n              TopConsumerPopovers={networkPopovers}\n            />\n            <PrometheusUtilizationItem\n              title={t('public~Pod count')}\n              utilizationQuery={utilizationQueries[OverviewQuery.POD_UTILIZATION].utilization}\n              TopConsumerPopover={PodPopover}\n              humanizeValue={humanizeNumber}\n            />\n            {dynamicItemExtensions.map(({ uid, properties }) => (\n              <PrometheusUtilizationItem\n                key={uid}\n                title={properties.title}\n                utilizationQuery={properties.getUtilizationQuery(selectedNodes)}\n                totalQuery={properties.getTotalQuery?.(selectedNodes)}\n                humanizeValue={properties.humanize}\n                TopConsumerPopover={properties.TopConsumerPopover}\n                requestQuery={properties.getRequestQuery?.(selectedNodes)}\n                limitQuery={properties.getLimitQuery?.(selectedNodes)}\n              />\n            ))}\n            {dynamicMultilineItemExtensions.map(({ uid, properties }) => (\n              <PrometheusMultilineUtilizationItem\n                key={uid}\n                title={properties.title}\n                queries={properties.getUtilizationQueries(selectedNodes)}\n                humanizeValue={properties.humanize}\n                TopConsumerPopovers={properties.TopConsumerPopovers}\n              />\n            ))}\n          </ClusterUtilizationContext.Provider>\n        </UtilizationBody>\n      </Card>\n    )\n  );\n};\n\ntype PrometheusCommonProps = {\n  title: string;\n  humanizeValue: Humanize;\n  byteDataType?: ByteDataTypes;\n  namespace?: string;\n  isDisabled?: boolean;\n};\n\ntype PrometheusUtilizationItemProps = DashboardItemProps &\n  PrometheusCommonProps & {\n    utilizationQuery: string;\n    totalQuery?: string;\n    limitQuery?: string;\n    requestQuery?: string;\n    TopConsumerPopover?: React.ComponentType<TopConsumerPopoverProps>;\n    setLimitReqState?: (state: LimitRequested) => void;\n  };\n\ntype PrometheusMultilineUtilizationItemProps = DashboardItemProps &\n  PrometheusCommonProps & {\n    queries: QueryWithDescription[];\n    TopConsumerPopovers?: React.ComponentType<TopConsumerPopoverProps>[];\n  };\n\ntype UtilizationCardNodeFilterProps = {\n  machineConfigPools: MachineConfigPoolKind[];\n  onNodeSelect: (event: React.MouseEvent, selection: string) => void;\n  selectedNodes: string[];\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TopConsumerPopoverProps } from '@console/dynamic-plugin-sdk';\nimport {\n  getTop25ConsumerQueries,\n  OverviewQuery,\n} from '@console/shared/src/promql/cluster-dashboard';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { ProjectModel, PodModel, NodeModel } from '../../../../models';\nimport {\n  humanizeCpuCores,\n  humanizeBinaryBytes,\n  humanizeNumber,\n  humanizeDecimalBytesPerSec,\n} from '../../../utils';\n\nexport const ClusterUtilizationContext = React.createContext('.+');\n\nconst useConsumers = (\n  nsQuery: OverviewQuery,\n  podQuery: OverviewQuery,\n  nodeQuery: OverviewQuery,\n) => {\n  const nodeType = React.useContext(ClusterUtilizationContext);\n  return React.useMemo(() => {\n    const consumerQueries = getTop25ConsumerQueries(nodeType);\n    return [\n      {\n        query: consumerQueries[nsQuery],\n        model: ProjectModel,\n        metric: 'namespace',\n      },\n      {\n        query: consumerQueries[podQuery],\n        model: PodModel,\n        metric: 'pod',\n      },\n      {\n        query: consumerQueries[nodeQuery],\n        model: NodeModel,\n        metric: 'instance',\n      },\n    ];\n  }, [nodeQuery, nodeType, nsQuery, podQuery]);\n};\n\nexport const CPUPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    OverviewQuery.PROJECTS_BY_CPU,\n    OverviewQuery.PODS_BY_CPU,\n    OverviewQuery.NODES_BY_CPU,\n  );\n  return (\n    <ConsumerPopover\n      title={t('public~CPU')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeCpuCores}\n    />\n  );\n};\n\nexport const MemoryPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    OverviewQuery.PROJECTS_BY_MEMORY,\n    OverviewQuery.PODS_BY_MEMORY,\n    OverviewQuery.NODES_BY_MEMORY,\n  );\n  return (\n    <ConsumerPopover\n      title={t('public~Memory')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeBinaryBytes}\n    />\n  );\n};\n\nexport const StoragePopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    OverviewQuery.PROJECTS_BY_STORAGE,\n    OverviewQuery.PODS_BY_STORAGE,\n    OverviewQuery.NODES_BY_STORAGE,\n  );\n  return (\n    <ConsumerPopover\n      title={t('public~Filesystem')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeBinaryBytes}\n    />\n  );\n};\n\nexport const PodPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const nodeType = React.useContext(ClusterUtilizationContext);\n  const consumers = React.useMemo(() => {\n    const consumerQueries = getTop25ConsumerQueries(nodeType);\n    return [\n      {\n        query: consumerQueries[OverviewQuery.PROJECTS_BY_PODS],\n        model: ProjectModel,\n        metric: 'namespace',\n      },\n      {\n        query: consumerQueries[OverviewQuery.NODES_BY_PODS],\n        model: NodeModel,\n        metric: 'node',\n      },\n    ];\n  }, [nodeType]);\n  return (\n    <ConsumerPopover\n      title={t('public~Pod count')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeNumber}\n    />\n  );\n};\n\nexport const NetworkInPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    OverviewQuery.PROJECTS_BY_NETWORK_IN,\n    OverviewQuery.PODS_BY_NETWORK_IN,\n    OverviewQuery.NODES_BY_NETWORK_IN,\n  );\n  return (\n    <ConsumerPopover\n      title={t('public~Network in')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeDecimalBytesPerSec}\n    />\n  );\n};\n\nexport const NetworkOutPopover: React.FC<TopConsumerPopoverProps> = ({ current }) => {\n  const { t } = useTranslation();\n  const consumers = useConsumers(\n    OverviewQuery.PROJECTS_BY_NETWORK_OUT,\n    OverviewQuery.PODS_BY_NETWORK_OUT,\n    OverviewQuery.NODES_BY_NETWORK_OUT,\n  );\n  return (\n    <ConsumerPopover\n      title={t('public~Network out')}\n      current={current}\n      consumers={consumers}\n      humanize={humanizeDecimalBytesPerSec}\n    />\n  );\n};\n"],"sourceRoot":""}