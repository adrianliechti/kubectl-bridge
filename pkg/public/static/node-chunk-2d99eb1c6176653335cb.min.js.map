{"version":3,"sources":["webpack:///./packages/metal3-plugin/src/selectors/csr.ts","webpack:///./packages/metal3-plugin/src/status/baremetal-node-status.ts","webpack:///./packages/console-app/src/components/nodes/menu-actions.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/dashboard/utils.ts","webpack:///./packages/console-app/src/components/nodes/NodesPage.tsx","webpack:///./public/components/dashboard/with-dashboard-resources.tsx","webpack:///./packages/console-app/src/actions/creators/common-factory.ts","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/TopConsumerPopover.tsx","webpack:///./packages/console-app/src/k8s/requests/nodes.ts","webpack:///./packages/console-app/src/components/nodes/modals/index.ts","webpack:///./packages/console-app/src/components/nodes/status/CSRStatus.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeUptime.tsx","webpack:///./packages/console-app/src/components/nodes/NodeStatus.tsx","webpack:///./packages/console-app/src/components/nodes/useNodeStatusExtensions.tsx","webpack:///./packages/metal3-plugin/src/status/node-maintenance-status.ts","webpack:///./packages/console-app/src/components/nodes/NodeRoles.tsx"],"names":["getNodeCSRs","csrs","username","filter","csr","spec","sort","a","b","Date","metadata","creationTimestamp","getTime","isCSRPending","status","conditions","some","c","includes","type","getNodeServerCSR","node","nodeCSRs","name","length","NODE_STATUS_SERVER_CSR","bareMetalNodeStatus","nodeMaintenance","title","getCSRStatus","updateCSR","approvedCSR","lastUpdateTime","toISOString","message","toLowerCase","reason","data","model","path","approveCSR","denyCSR","useNodeActions","obj","kindObj","inFlight","t","actions","push","id","label","cta","accessReview","resource","undefined","BMN_STATUS_GROUP_MAPPER","PROGRESS","NOT_MAPPED","Object","keys","getBMNStatusGroups","nodes","maintenances","kvAlphaMaintenances","kvBetaMaintenances","groups","statusIDs","count","filterType","maintenancesByNodeName","kvAlphaMaintenancesByNodeName","kvBetaMaintenancesByNodeName","forEach","nodeName","group","find","key","nodeColumnInfo","freeze","classes","role","pods","memory","cpu","architecture","filesystem","created","instanceType","machine","labels","zone","uptime","columnManagementID","getColumns","transforms","props","className","additional","columnClass","NodesTableRow","activeColumnIDs","rowData","metrics","UI","getIn","nodeUID","usedMem","usedMemory","totalMem","totalMemory","Number","isFinite","string","cores","totalCores","totalCPU","formattedCores","usedStrg","usedStorage","totalStrg","totalStorage","storage","machineName","machineNamespace","context","groupVersionKind","kind","version","apiVersion","statusExtensions","timestamp","apiGroup","namespace","showMetrics","window","innerWidth","CSRTableRow","csrObj","originalName","TableRow","rest","NodeList","columns","activeColumns","userSettingsLoaded","showNamespaceOverride","Row","selector","dispatch","selectedColumns","nodesLoaded","nodesLoadError","isList","csrsLoaded","csrsLoadError","updateMetrics","promises","query","map","url","endpoint","QUERY","then","result","reduce","acc","value","metric","instance","Promise","all","fetchNodeMetrics","e","console","error","setInterval","clearInterval","n","filters","filterGroupName","reducer","items","input","selected","isMatch","nodeRoles","r","getFilters","allData","filteredData","onFilterChange","loaded","loadError","rowFilters","columnLayout","column","Set","unfilteredData","mapDispatchToProps","watchURL","fetch","stopWatchURL","watchPrometheusQuery","timespan","stopWatchPrometheusQuery","mapStateToProps","state","URL","dashboards","get","PROMETHEUS","notificationAlerts","observe","withDashboardResources","WrappedComponent","super","urls","queries","watchingAlerts","this","watchPrometheus","queryKey","q","watchAlerts","stopWatchAlerts","watchK8sResource","setState","k8sResources","optional","stopWatchK8sResource","prop","getExternalProps","nextProps","nextState","urlResultChanged","urlKey","queryResultChanged","alertsResultChanged","k8sResourcesChanged","nextExternalProps","externalProps","resources","urlResults","prometheusResults","CommonActionFactory","Delete","relatedResource","Edit","href","crd","ModifyLabels","blocking","ModifyAnnotations","ModifyCount","resourceKind","ModifyPodSelector","ModifyTolerations","modalClassName","AddStorage","getCommonResourceActions","ConsumerPopover","current","humanize","consumers","position","top","description","children","isOpen","setOpen","onShow","onHide","headerContent","bodyContent","PopoverBody","enableFlip","maxWidth","variant","isInline","getLimitIcon","ERROR","WARN","LimitsBody","limitState","requestedState","total","limit","available","requested","OK","icon","currentConsumer","setCurrentConsumer","activePerspective","canAccessMonitoring","CAN_GET_NS","SERVER_FLAGS","prometheusBaseURL","fieldSelector","k8sResource","getResourceToWatch","consumerData","consumerLoaded","consumersLoadError","top5Data","bodyData","d","consumer","namespaced","y","monitoringParams","params","URLSearchParams","set","dropdownItems","curr","labelKey","onDropdownChange","monitoringURL","toString","body","item","String","x","ListItem","to","onChange","selectedKey","makeNodeUnschedulable","op","makeNodeSchedulable","createConfigureUnschedulableModal","m","default","isCSRActive","CSRPopoverContent","serverCSR","onPatch","inProgress","setInProgress","setError","approve","err","clientCSRDesc","ServerCSRDesc","hasGutter","onMouseUp","isDisabled","StatusTitle","ServerCSRPopoverContent","isExpanded","setExpanded","onToggle","_","expanded","toggleContent","setIsOpen","statusBody","isVisible","shouldClose","shouldOpen","conditionDescriptionMap","DISK_PRESSURE","MEM_PRESSURE","PID_PRESSURE","humanizeMap","getDegradedStates","condition","NodeStatusWithExtensions","popoverContent","secondaryStatuses","mainStatus","content","uid","conditionDescription","useNodeStatusExtensions","nodeStatusExtensions","pluginResources","properties","extraResources","statuses","PopoverContent","isActive","pluginID","pResources","getNodeMaintenanceStatus","maintenance","titleKey","join"],"mappings":"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","file":"node-chunk-2d99eb1c6176653335cb.min.js","sourcesContent":["import { fromBER } from 'asn1js';\nimport { Base64 } from 'js-base64';\nimport * as _ from 'lodash';\nimport { CertificationRequest } from 'pkijs';\nimport { stringToArrayBuffer, fromBase64 } from 'pvutils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { CSRBundle } from '../components/types';\nimport { CertificateSigningRequestKind } from '../types';\n\nconst getNodeCSRs = (\n  csrs: CertificateSigningRequestKind[],\n  username: string,\n): CertificateSigningRequestKind[] =>\n  csrs\n    .filter((csr) => csr.spec.username === username)\n    .sort(\n      (a, b) =>\n        new Date(b.metadata.creationTimestamp).getTime() -\n        new Date(a.metadata.creationTimestamp).getTime(),\n    );\n\nconst isCSRPending = (csr: CertificateSigningRequestKind): boolean =>\n  !csr.status?.conditions?.some((c) => ['Approved', 'Denied'].includes(c.type));\n\nexport const getNodeClientCSRs = (csrs: CertificateSigningRequestKind[] = []): CSRBundle[] => {\n  const nodeCSRs = getNodeCSRs(\n    csrs,\n    'system:serviceaccount:openshift-machine-config-operator:node-bootstrapper',\n  )\n    .map((csr) => {\n      const request = Base64.decode(csr.spec.request);\n      const req = request.replace(/(-----(BEGIN|END) CERTIFICATE REQUEST-----|\\n)/g, '');\n      const asn1 = fromBER(stringToArrayBuffer(fromBase64(req)));\n      const pkcs10 = new CertificationRequest({ schema: asn1.result });\n      // '2.5.4.3' is commonName code\n      const commonName = pkcs10.subject.typesAndValues.find(({ type }) => type === '2.5.4.3');\n      return {\n        metadata: {\n          name: commonName.value.valueBlock.value.replace('system:node:', ''),\n          creationTimestamp: csr.metadata.creationTimestamp,\n        },\n        csr,\n        status: { status: 'Discovered' },\n      };\n    })\n    .sort(\n      (a, b) =>\n        new Date(b.metadata.creationTimestamp).getTime() -\n        new Date(a.metadata.creationTimestamp).getTime(),\n    );\n\n  const groupped = _.groupBy<CSRBundle>(nodeCSRs, (csr) => csr.metadata.name);\n\n  return Object.keys(groupped).reduce((acc, key) => {\n    const { csr, status } = groupped[key][0];\n    if (isCSRPending(csr)) {\n      acc.push({\n        metadata: { name: key },\n        status,\n        csr,\n      });\n    }\n    return acc;\n  }, []);\n};\n\nexport const getNodeServerCSR = (\n  csrs: CertificateSigningRequestKind[] = [],\n  node: NodeKind,\n): CertificateSigningRequestKind => {\n  const nodeCSRs = getNodeCSRs(csrs, `system:node:${node.metadata.name}`);\n  if (!nodeCSRs.length || !isCSRPending(nodeCSRs[0])) {\n    return null;\n  }\n  return nodeCSRs[0];\n};\n","import { nodeStatus } from '@console/app/src/status/node';\nimport { NodeKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { isNodeUnschedulable } from '@console/shared/src/selectors/node';\nimport { StatusProps } from '../components/types';\nimport { isHostPoweredOn, hasPowerManagement } from '../selectors';\nimport { BareMetalHostKind, CertificateSigningRequestKind } from '../types';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\n\nexport const NODE_STATUS_SERVER_CSR = 'serverCSR';\n\ntype BareMetalNodeStatusProps = {\n  node: NodeKind;\n  nodeMaintenance?: K8sResourceKind;\n  csr: CertificateSigningRequestKind;\n};\n\nconst getCSRStatus = (csr: CertificateSigningRequestKind, node: NodeKind) =>\n  csr\n    ? {\n        status: NODE_STATUS_SERVER_CSR,\n        title: nodeStatus(node),\n      }\n    : null;\n\nexport const bareMetalNodeStatus = ({\n  node,\n  nodeMaintenance,\n  csr,\n}: BareMetalNodeStatusProps): StatusProps =>\n  getCSRStatus(csr, node) ||\n  getNodeMaintenanceStatus(nodeMaintenance) || { status: nodeStatus(node) };\n\ntype BareMetalNodeSecondaryStatusProps = {\n  node: NodeKind;\n  host?: BareMetalHostKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const baremetalNodeSecondaryStatus = ({\n  node,\n  host,\n  nodeMaintenance,\n}: BareMetalNodeSecondaryStatusProps): string[] => {\n  const states = [];\n  if (!nodeMaintenance && isNodeUnschedulable(node)) {\n    states.push('Scheduling disabled');\n  }\n  // show host power status only if there is actual host associated to node\n  if (host && hasPowerManagement(host) && !isHostPoweredOn(host)) {\n    states.push('Host is powered off');\n  }\n  return states;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Action } from '@console/dynamic-plugin-sdk';\nimport { useK8sModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { k8sUpdateResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { asAccessReview } from '@console/internal/components/utils';\nimport { CertificateSigningRequestModel } from '@console/internal/models';\nimport {\n  CertificateSigningRequestKind,\n  ExtensionHook,\n  NodeKind,\n  referenceFor,\n} from '@console/internal/module/k8s';\nimport { isNodeUnschedulable } from '@console/shared';\nimport { getCommonResourceActions } from '../../actions/creators/common-factory';\nimport { makeNodeSchedulable } from '../../k8s/requests/nodes';\nimport { createConfigureUnschedulableModal } from './modals';\n\nconst updateCSR = (csr: CertificateSigningRequestKind, type: 'Approved' | 'Denied') => {\n  const approvedCSR = {\n    ...csr,\n    status: {\n      ...(csr.status || {}),\n      conditions: [\n        {\n          lastUpdateTime: new Date().toISOString(),\n          message: `This CSR was ${type.toLowerCase()} via OpenShift Console`,\n          reason: 'OpenShiftConsoleCSRApprove',\n          status: 'True',\n          type,\n        },\n        ...(csr.status?.conditions || []),\n      ],\n    },\n  };\n  return k8sUpdateResource<CertificateSigningRequestKind>({\n    data: approvedCSR,\n    model: CertificateSigningRequestModel,\n    path: 'approval',\n  });\n};\n\nexport const approveCSR = (csr: CertificateSigningRequestKind) => updateCSR(csr, 'Approved');\n\nexport const denyCSR = (csr: CertificateSigningRequestKind) => updateCSR(csr, 'Denied');\n\nexport const useNodeActions: ExtensionHook<Action[], NodeKind> = (obj) => {\n  const [kindObj, inFlight] = useK8sModel(referenceFor(obj));\n  const { t } = useTranslation();\n  const nodeActions = React.useMemo<Action[]>(() => {\n    const actions: Action[] = [];\n    if (isNodeUnschedulable(obj)) {\n      actions.push({\n        id: 'mark-as-schedulable',\n        label: t('console-app~Mark as schedulable'),\n        cta: () => makeNodeSchedulable(obj),\n        accessReview: asAccessReview(kindObj, obj, 'patch'),\n      });\n    } else {\n      actions.push({\n        id: 'mark-as-unschedulable',\n        label: t('console-app~Mark as unschedulable'),\n        cta: () => createConfigureUnschedulableModal({ resource: obj }),\n        accessReview: asAccessReview(kindObj, obj, 'patch'),\n      });\n    }\n\n    const message = (\n      <p>\n        {t(\n          'console-app~This action cannot be undone. Deleting a node will instruct Kubernetes that the node is down or unrecoverable and delete all pods scheduled to that node. If the node is still running but unresponsive and the node is deleted, stateful workloads and persistent volumes may suffer corruption or data loss. Only delete a node that you have confirmed is completely stopped and cannot be restored.',\n        )}\n      </p>\n    );\n\n    actions.push(...getCommonResourceActions(kindObj, obj, message));\n    return actions;\n  }, [kindObj, obj, t]);\n\n  return [nodeActions, !inFlight, undefined];\n};\n","import { NodeKind } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { NODE_STATUS_TITLE_KEYS } from '../../../constants';\nimport { getNodeMaintenanceNodeName } from '../../../selectors';\nimport { getNodeServerCSR } from '../../../selectors/csr';\nimport { bareMetalNodeStatus, NODE_STATUS_SERVER_CSR } from '../../../status/baremetal-node-status';\nimport { CertificateSigningRequestKind } from '../../../types';\n\nconst BMN_STATUS_GROUP_MAPPER = {\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready', NODE_STATUS_SERVER_CSR],\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  'node-maintenance': Object.keys(NODE_STATUS_TITLE_KEYS),\n};\n\nexport const getBMNStatusGroups: StatusGroupMapper = (\n  nodes: NodeKind[],\n  { maintenances, csrs, kvAlphaMaintenances, kvBetaMaintenances },\n) => {\n  const groups = {\n    [InventoryStatusGroup.NOT_MAPPED]: {\n      statusIDs: ['ready'],\n      count: 0,\n      filterType: 'bare-metal-node-status',\n    },\n    [InventoryStatusGroup.PROGRESS]: {\n      statusIDs: ['notReady', 'approval'],\n      count: 0,\n      filterType: 'bare-metal-node-status',\n    },\n    'node-maintenance': {\n      statusIDs: ['maintenance'],\n      count: 0,\n      filterType: 'bare-metal-node-status',\n    },\n  };\n  const maintenancesByNodeName = createBasicLookup(maintenances, getNodeMaintenanceNodeName);\n  const kvAlphaMaintenancesByNodeName = createBasicLookup(\n    kvAlphaMaintenances,\n    getNodeMaintenanceNodeName,\n  );\n  const kvBetaMaintenancesByNodeName = createBasicLookup(\n    kvBetaMaintenances,\n    getNodeMaintenanceNodeName,\n  );\n  nodes.forEach((node) => {\n    const nodeName = getName(node);\n    const nodeMaintenance =\n      maintenancesByNodeName[nodeName] ||\n      kvBetaMaintenancesByNodeName[nodeName] ||\n      kvAlphaMaintenancesByNodeName[nodeName];\n    const csr = getNodeServerCSR(csrs as CertificateSigningRequestKind[], node);\n    const { status } = bareMetalNodeStatus({ node, nodeMaintenance, csr });\n    const group =\n      Object.keys(BMN_STATUS_GROUP_MAPPER).find((key) =>\n        BMN_STATUS_GROUP_MAPPER[key].includes(status),\n      ) || InventoryStatusGroup.NOT_MAPPED;\n    groups[group].count++;\n  });\n  return groups;\n};\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n// FIXME upgrading redux types is causing many errors at this time\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ListPageBody } from '@console/dynamic-plugin-sdk/src/api/dynamic-core-api';\nimport {\n  NodeCertificateSigningRequestKind,\n  RowFilter,\n  RowProps,\n  TableColumn,\n  VirtualizedTableProps,\n} from '@console/dynamic-plugin-sdk/src/extensions/console-types';\nimport { NodeMetrics, setNodeMetrics } from '@console/internal/actions/ui';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { useListPageFilter } from '@console/internal/components/factory/ListPage/filter-hook';\nimport ListPageFilter from '@console/internal/components/factory/ListPage/ListPageFilter';\nimport ListPageHeader from '@console/internal/components/factory/ListPage/ListPageHeader';\nimport { useActiveColumns } from '@console/internal/components/factory/Table/active-columns-hook';\nimport VirtualizedTable, {\n  TableData,\n} from '@console/internal/components/factory/Table/VirtualizedTable';\nimport { PROMETHEUS_BASE_PATH } from '@console/internal/components/graphs';\nimport { getPrometheusURL, PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport {\n  Kebab,\n  ResourceLink,\n  Timestamp,\n  humanizeBinaryBytes,\n  formatCores,\n  LabelList,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { NodeModel, MachineModel } from '@console/internal/models';\nimport {\n  NodeKind,\n  referenceForModel,\n  CertificateSigningRequestKind,\n  referenceFor,\n  Selector,\n} from '@console/internal/module/k8s';\nimport {\n  getName,\n  getUID,\n  getLabels,\n  getNodeMachineNameAndNamespace,\n  TableColumnsType,\n  COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n  COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n  getNodeArchitecture,\n  getNodeRoleMatch,\n  getNodeRoles,\n  useUserSettingsCompatibility,\n  nodeUptime,\n  nodeZone,\n  nodeMachine,\n  nodeInstanceType,\n  nodeFS,\n  nodeCPU,\n  nodeArch,\n  nodeMemory,\n  nodePods,\n  nodeReadiness,\n  nodeRoles as nodeRolesSort,\n  sortWithCSRResource,\n  LazyActionMenu,\n} from '@console/shared';\nimport { nodeStatus } from '../../status';\nimport { getNodeClientCSRs, isCSRResource } from './csr';\nimport NodeUptime from './node-dashboard/NodeUptime';\nimport NodeRoles from './NodeRoles';\nimport { NodeStatusWithExtensions } from './NodeStatus';\nimport ClientCSRStatus from './status/CSRStatus';\nimport { GetNodeStatusExtensions, useNodeStatusExtensions } from './useNodeStatusExtensions';\n\nconst nodeColumnInfo = Object.freeze({\n  name: {\n    classes: '',\n    id: 'name',\n  },\n  status: {\n    classes: '',\n    id: 'status',\n  },\n  role: {\n    classes: '',\n    id: 'role',\n  },\n  pods: {\n    classes: '',\n    id: 'pods',\n  },\n  memory: {\n    classes: '',\n    id: 'memory',\n  },\n  cpu: {\n    classes: '',\n    id: 'cpu',\n  },\n  architecture: {\n    classes: '',\n    id: 'architecture',\n  },\n  filesystem: {\n    classes: '',\n    id: 'filesystem',\n  },\n  created: {\n    classes: '',\n    id: 'created',\n  },\n  instanceType: {\n    classes: '',\n    id: 'instanceType',\n  },\n  machine: {\n    classes: '',\n    id: 'machine',\n  },\n  labels: {\n    classes: '',\n    id: 'labels',\n  },\n  zone: {\n    classes: '',\n    id: 'zone',\n  },\n  uptime: {\n    classes: '',\n    id: 'uptime',\n  },\n});\n\nconst columnManagementID = referenceForModel(NodeModel);\nconst kind = 'Node';\n\nconst getColumns = (t: TFunction): TableColumn<NodeRowItem>[] => [\n  {\n    title: t('console-app~Name'),\n    id: nodeColumnInfo.name.id,\n    sort: 'metadata.name',\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.name.classes },\n  },\n  {\n    title: t('console-app~Status'),\n    id: nodeColumnInfo.status.id,\n    sort: sortWithCSRResource(nodeReadiness, 'False'),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.status.classes },\n  },\n  {\n    title: t('console-app~Roles'),\n    id: nodeColumnInfo.role.id,\n    sort: sortWithCSRResource(nodeRolesSort, ''),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.role.classes },\n  },\n  {\n    title: t('console-app~Pods'),\n    id: nodeColumnInfo.pods.id,\n    sort: sortWithCSRResource(nodePods, 0),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.pods.classes },\n  },\n  {\n    title: t('console-app~Memory'),\n    id: nodeColumnInfo.memory.id,\n    sort: sortWithCSRResource(nodeMemory, 0),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.memory.classes },\n  },\n  {\n    title: t('console-app~CPU'),\n    id: nodeColumnInfo.cpu.id,\n    sort: sortWithCSRResource(nodeCPU, 0),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.cpu.classes },\n  },\n  {\n    title: t('console-app~Architecture'),\n    id: nodeColumnInfo.architecture.id,\n    sort: sortWithCSRResource(nodeArch, ''),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.architecture.classes },\n    additional: true,\n  },\n  {\n    title: t('console-app~Filesystem'),\n    id: nodeColumnInfo.filesystem.id,\n    sort: sortWithCSRResource(nodeFS, 0),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.filesystem.classes },\n  },\n  {\n    title: t('console-app~Created'),\n    id: nodeColumnInfo.created.id,\n    sort: 'metadata.creationTimestamp',\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.created.classes },\n  },\n  {\n    title: t('console-app~Instance type'),\n    id: nodeColumnInfo.instanceType.id,\n    sort: sortWithCSRResource(nodeInstanceType, ''),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.instanceType.classes },\n  },\n  {\n    title: t('console-app~Machine'),\n    id: nodeColumnInfo.machine.id,\n    sort: sortWithCSRResource(nodeMachine, ''),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.machine.classes },\n    additional: true,\n  },\n  {\n    title: t('console-app~Labels'),\n    id: nodeColumnInfo.labels.id,\n    sort: 'metadata.labels',\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.labels.classes },\n    additional: true,\n  },\n  {\n    title: t('console-app~Zone'),\n    id: nodeColumnInfo.zone.id,\n    sort: sortWithCSRResource(nodeZone, ''),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.zone.classes },\n    additional: true,\n  },\n  {\n    title: t('console-app~Uptime'),\n    id: nodeColumnInfo.uptime.id,\n    sort: sortWithCSRResource(nodeUptime, ''),\n    transforms: [sortable],\n    props: { className: nodeColumnInfo.uptime.classes },\n    additional: true,\n  },\n  {\n    title: '',\n    id: '',\n    props: { className: Kebab.columnClass },\n  },\n];\n\nconst NodesTableRow: React.FC<RowProps<NodeKind, GetNodeStatusExtensions>> = ({\n  obj: node,\n  activeColumnIDs,\n  rowData,\n}) => {\n  const { t } = useTranslation();\n  const metrics = useSelector(({ UI }) => UI.getIn(['metrics', 'node']));\n  const nodeName = getName(node);\n  const nodeUID = getUID(node);\n  const usedMem = metrics?.usedMemory?.[nodeName];\n  const totalMem = metrics?.totalMemory?.[nodeName];\n  const memory =\n    Number.isFinite(usedMem) && Number.isFinite(totalMem)\n      ? `${humanizeBinaryBytes(usedMem).string} / ${humanizeBinaryBytes(totalMem).string}`\n      : '-';\n  const cores = metrics?.cpu?.[nodeName];\n  const totalCores = metrics?.totalCPU?.[nodeName];\n  const cpu =\n    Number.isFinite(cores) && Number.isFinite(totalCores)\n      ? t('console-app~{{formattedCores}} cores / {{totalCores}} cores', {\n          formattedCores: formatCores(cores),\n          totalCores,\n        })\n      : '-';\n  const usedStrg = metrics?.usedStorage?.[nodeName];\n  const architecture = getNodeArchitecture(node);\n  const totalStrg = metrics?.totalStorage?.[nodeName];\n  const storage =\n    Number.isFinite(usedStrg) && Number.isFinite(totalStrg)\n      ? `${humanizeBinaryBytes(usedStrg).string} / ${humanizeBinaryBytes(totalStrg).string}`\n      : '-';\n  const pods = metrics?.pods?.[nodeName] ?? '-';\n  const [machineName, machineNamespace] = getNodeMachineNameAndNamespace(node);\n  const instanceType = node.metadata.labels?.['beta.kubernetes.io/instance-type'];\n  const labels = getLabels(node);\n  const zone = node.metadata.labels?.['topology.kubernetes.io/zone'];\n  const resourceKind = referenceFor(node);\n  const context = { [resourceKind]: node };\n  return (\n    <>\n      <TableData\n        className={nodeColumnInfo.name.classes}\n        id={nodeColumnInfo.name.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <ResourceLink\n          groupVersionKind={{\n            kind: NodeModel.kind,\n            version: NodeModel.apiVersion,\n          }}\n          name={nodeName}\n          title={nodeUID}\n        />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.status.classes}\n        id={nodeColumnInfo.status.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <NodeStatusWithExtensions node={node} statusExtensions={rowData} />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.role.classes}\n        id={nodeColumnInfo.role.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <NodeRoles node={node} />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.pods.classes}\n        id={nodeColumnInfo.pods.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {pods}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.memory.classes}\n        id={nodeColumnInfo.memory.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {memory}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.cpu.classes}\n        id={nodeColumnInfo.cpu.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {cpu}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.architecture.classes}\n        id={nodeColumnInfo.architecture.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {architecture}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.filesystem.classes}\n        id={nodeColumnInfo.filesystem.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {storage}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.created.classes}\n        id={nodeColumnInfo.created.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <Timestamp timestamp={node.metadata.creationTimestamp} />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.instanceType.classes}\n        id={nodeColumnInfo.instanceType.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {instanceType || '-'}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.machine.classes}\n        id={nodeColumnInfo.machine.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {machineName && machineNamespace ? (\n          <ResourceLink\n            groupVersionKind={{\n              kind: MachineModel.kind,\n              version: MachineModel.apiVersion,\n              group: MachineModel.apiGroup,\n            }}\n            name={machineName}\n            namespace={machineNamespace}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.labels.classes}\n        id={nodeColumnInfo.labels.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <LabelList kind={kind} labels={labels} />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.zone.classes}\n        id={nodeColumnInfo.zone.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {zone}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.uptime.classes}\n        id={nodeColumnInfo.uptime.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <NodeUptime obj={node} />\n      </TableData>\n      <TableData className={Kebab.columnClass} activeColumnIDs={activeColumnIDs} id=\"\">\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nconst fetchNodeMetrics = (): Promise<NodeMetrics> => {\n  const metrics = [\n    {\n      key: 'usedMemory',\n      query: 'sum by (instance) (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)',\n    },\n    {\n      key: 'totalMemory',\n      query: 'sum by (instance) (node_memory_MemTotal_bytes)',\n    },\n    {\n      key: 'usedStorage',\n      query:\n        'sum by (instance) ((max by (device, instance) (node_filesystem_size_bytes{device=~\"/.*\"})) - (max by (device, instance) (node_filesystem_free_bytes{device=~\"/.*\"}))) or ' +\n        'sum by (instance) ((max by (volume, instance) (windows_logical_disk_size_bytes)) - (max by (volume, instance) (windows_logical_disk_free_bytes)))',\n    },\n    {\n      key: 'totalStorage',\n      query:\n        'sum by (instance) (max by (device, instance) (node_filesystem_size_bytes{device=~\"/.*\"})) or ' +\n        'sum by (instance) (max by (volume, instance) (windows_logical_disk_size_bytes))',\n    },\n    {\n      key: 'cpu',\n      query: 'sum by(instance) (instance:node_cpu:rate:sum)',\n    },\n    {\n      key: 'totalCPU',\n      query: 'sum by(instance) (instance:node_num_cpu:sum)',\n    },\n    {\n      key: 'pods',\n      query: 'sum by(node)(kubelet_running_pods)',\n    },\n  ];\n  const promises = metrics.map(({ key, query }) => {\n    const url = getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query });\n    return coFetchJSON(url).then(({ data: { result } }) => {\n      return result.reduce((acc, data) => {\n        const value = Number(data.value[1]);\n        return _.set(acc, [key, data.metric.instance || data.metric.node], value);\n      }, {});\n    });\n  });\n  return Promise.all(promises).then((data: any[]) => _.assign({}, ...data));\n};\n\nconst showMetrics = PROMETHEUS_BASE_PATH && window.innerWidth > 1200;\n\nconst CSRTableRow: React.FC<RowProps<NodeCertificateSigningRequestKind>> = ({\n  obj: csr,\n  activeColumnIDs,\n}) => {\n  const csrObj = _.omit(csr, ['metadata.originalName']);\n  csrObj.metadata.name = csr.metadata.originalName;\n\n  return (\n    <>\n      <TableData\n        className={nodeColumnInfo.name.classes}\n        id={nodeColumnInfo.name.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        {csr.metadata.name}\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.status.classes}\n        id={nodeColumnInfo.status.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <ClientCSRStatus\n          csr={{ ...csrObj, metadata: { ...csrObj.metadata, name: csr.metadata.originalName } }}\n          title=\"Discovered\"\n        />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.role.classes}\n        id={nodeColumnInfo.role.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.pods.classes}\n        id={nodeColumnInfo.pods.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.memory.classes}\n        id={nodeColumnInfo.memory.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.cpu.classes}\n        id={nodeColumnInfo.cpu.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.architecture.classes}\n        id={nodeColumnInfo.architecture.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.filesystem.classes}\n        id={nodeColumnInfo.filesystem.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.created.classes}\n        id={nodeColumnInfo.created.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <Timestamp timestamp={csr.metadata.creationTimestamp} />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.instanceType.classes}\n        id={nodeColumnInfo.instanceType.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.machine.classes}\n        id={nodeColumnInfo.machine.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.labels.classes}\n        id={nodeColumnInfo.labels.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        <LabelList kind={kind} labels={getLabels(csr)} />\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.zone.classes}\n        id={nodeColumnInfo.zone.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData\n        className={nodeColumnInfo.uptime.classes}\n        id={nodeColumnInfo.uptime.id}\n        activeColumnIDs={activeColumnIDs}\n      >\n        -\n      </TableData>\n      <TableData className={Kebab.columnClass} activeColumnIDs={activeColumnIDs} id=\"\" />\n    </>\n  );\n};\n\nconst TableRow: React.FC<RowProps<NodeRowItem, GetNodeStatusExtensions>> = ({ obj, ...rest }) =>\n  isCSRResource(obj) ? <CSRTableRow obj={obj} {...rest} /> : <NodesTableRow obj={obj} {...rest} />;\n\ntype NodeListProps = Pick<\n  VirtualizedTableProps<NodeRowItem>,\n  'data' | 'unfilteredData' | 'loaded' | 'loadError'\n>;\n\nconst NodeList: React.FC<NodeListProps> = (props) => {\n  const { t } = useTranslation();\n  const columns = React.useMemo(() => getColumns(t), [t]);\n  const [activeColumns, userSettingsLoaded] = useActiveColumns({\n    columns,\n    showNamespaceOverride: false,\n    columnManagementID,\n  });\n\n  const statusExtensions = useNodeStatusExtensions();\n  return (\n    userSettingsLoaded && (\n      <VirtualizedTable<NodeRowItem, GetNodeStatusExtensions>\n        {...props}\n        aria-label={t('public~Nodes')}\n        label={t('public~Nodes')}\n        columns={activeColumns}\n        Row={TableRow}\n        rowData={statusExtensions}\n      />\n    )\n  );\n};\n\ntype NodeRowItem = NodeKind | NodeCertificateSigningRequestKind;\n\nconst getFilters = (t: TFunction): RowFilter<NodeRowItem>[] => [\n  {\n    filterGroupName: t('console-app~Status'),\n    type: 'node-status',\n    reducer: (obj) => (isCSRResource(obj) ? 'Discovered' : nodeStatus(obj)),\n    items: [\n      { id: 'Ready', title: t('console-app~Ready') },\n      { id: 'Not Ready', title: t('console-app~Not Ready') },\n      { id: 'Discovered', title: t('console-app~Discovered') },\n    ],\n    filter: (input, obj) => {\n      if (!input.selected?.length) {\n        return true;\n      }\n      if (isCSRResource(obj)) {\n        return input.selected?.includes('Discovered');\n      }\n      return input.selected?.includes(nodeStatus(obj));\n    },\n  },\n  {\n    filterGroupName: t('console-app~Roles'),\n    type: 'node-role',\n    isMatch: (obj, role) => (isCSRResource(obj) ? false : getNodeRoleMatch(obj, role)),\n    items: [\n      {\n        id: 'control-plane',\n        title: t('console-app~control-plane'),\n      },\n      {\n        id: 'worker',\n        title: t('console-app~worker'),\n      },\n    ],\n    filter: (input, obj) => {\n      if (!input.selected?.length) {\n        return true;\n      }\n      if (isCSRResource(obj)) {\n        return false;\n      }\n      const nodeRoles = getNodeRoles(obj);\n      return input.selected?.some((r) => nodeRoles.includes(r));\n    },\n  },\n  {\n    filterGroupName: t('console-app~Architecture'),\n    type: 'cpu-arch',\n    reducer: (obj) => (isCSRResource(obj) ? '' : getNodeArchitecture(obj)),\n    items: [\n      { id: 'amd64', title: 'amd64' },\n      { id: 'ppc64le', title: 'ppc64le' },\n      { id: 'arm64', title: 'arm64' },\n      { id: 's390x', title: 's390x' },\n    ],\n    filter: (input, obj) => {\n      if (!input.selected?.length) {\n        return true;\n      }\n      if (isCSRResource(obj)) {\n        return false;\n      }\n      return input.selected?.includes(getNodeArchitecture(obj));\n    },\n  },\n];\n\nconst NodesPage: React.FC<NodesPageProps> = ({ selector }) => {\n  const dispatch = useDispatch();\n\n  const [selectedColumns, , userSettingsLoaded] = useUserSettingsCompatibility<TableColumnsType>(\n    COLUMN_MANAGEMENT_CONFIGMAP_KEY,\n    COLUMN_MANAGEMENT_LOCAL_STORAGE_KEY,\n    undefined,\n    true,\n  );\n\n  const [nodes, nodesLoaded, nodesLoadError] = useK8sWatchResource<NodeKind[]>({\n    groupVersionKind: {\n      kind: 'Node',\n      version: 'v1',\n    },\n    isList: true,\n    selector,\n  });\n\n  const [csrs, csrsLoaded, csrsLoadError] = useK8sWatchResource<CertificateSigningRequestKind[]>({\n    groupVersionKind: {\n      group: 'certificates.k8s.io',\n      kind: 'CertificateSigningRequest',\n      version: 'v1',\n    },\n    isList: true,\n  });\n\n  React.useEffect(() => {\n    const updateMetrics = async () => {\n      try {\n        const metrics = await fetchNodeMetrics();\n        dispatch(setNodeMetrics(metrics));\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Error fetching node metrics: ', e);\n      }\n    };\n    updateMetrics();\n    if (showMetrics) {\n      const id = setInterval(updateMetrics, 30 * 1000);\n      return () => clearInterval(id);\n    }\n    return () => {};\n  }, [dispatch]);\n  const { t } = useTranslation();\n\n  const data = React.useMemo(() => {\n    const csrBundle = getNodeClientCSRs(csrs).filter(\n      (csr) => !nodes.some((n) => n.metadata.name === csr.metadata.name),\n    );\n    return [...csrBundle, ...nodes];\n  }, [csrs, nodes]);\n\n  const filters = React.useMemo(() => getFilters(t), [t]);\n\n  const [allData, filteredData, onFilterChange] = useListPageFilter(data, filters);\n\n  const loaded = nodesLoaded && csrsLoaded;\n  const loadError = nodesLoadError || csrsLoadError;\n\n  const columns = React.useMemo(() => getColumns(t), [t]);\n\n  return (\n    userSettingsLoaded && (\n      <>\n        <ListPageHeader title={t('public~Nodes')} />\n        <ListPageBody>\n          <ListPageFilter\n            data={allData}\n            loaded={loaded}\n            rowFilters={filters}\n            onFilterChange={onFilterChange}\n            columnLayout={{\n              columns: columns.map((column) => _.pick(column, ['title', 'additional', 'id'])),\n              id: columnManagementID,\n              selectedColumns:\n                selectedColumns?.[columnManagementID]?.length > 0\n                  ? new Set(selectedColumns[columnManagementID])\n                  : null,\n              type: 'Node',\n            }}\n          />\n          <NodeList\n            data={filteredData}\n            unfilteredData={allData}\n            loaded={loaded}\n            loadError={loadError}\n          />\n        </ListPageBody>\n      </>\n    )\n  );\n};\n\ntype NodesPageProps = {\n  selector?: Selector;\n};\n\nexport default NodesPage;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\n\nimport { RESULTS_TYPE } from '../../reducers/dashboards';\nimport { NotificationAlerts } from '../../reducers/observe';\nimport {\n  StopWatchPrometheusAction,\n  stopWatchPrometheusQuery,\n  stopWatchURL,\n  StopWatchURLAction,\n  watchPrometheusQuery,\n  WatchPrometheusQueryAction,\n  watchURL,\n  WatchURLAction,\n  getQueryKey,\n} from '../../actions/dashboards';\nimport { RootState } from '../../redux';\nimport { Firehose, FirehoseResource, FirehoseResult } from '../utils';\nimport { K8sResourceKind, AppliedClusterResourceQuotaKind } from '../../module/k8s';\nimport { PrometheusResponse } from '../graphs';\nimport { Fetch, RequestMap } from '@console/dynamic-plugin-sdk/src/api/internal-types';\n\nconst mapDispatchToProps: DispatchToProps = (dispatch) => ({\n  watchURL: (url, fetch) => dispatch(watchURL(url, fetch)),\n  stopWatchURL: (url) => dispatch(stopWatchURL(url)),\n  watchPrometheusQuery: (query, namespace, timespan) =>\n    dispatch(watchPrometheusQuery(query, namespace, timespan)),\n  stopWatchPrometheusQuery: (query, timespan) =>\n    dispatch(stopWatchPrometheusQuery(query, timespan)),\n});\n\nconst mapStateToProps = (state: RootState) => ({\n  [RESULTS_TYPE.URL]: state.dashboards.get(RESULTS_TYPE.URL),\n  [RESULTS_TYPE.PROMETHEUS]: state.dashboards.get(RESULTS_TYPE.PROMETHEUS) as RequestMap<\n    PrometheusResponse\n  >,\n  notificationAlerts: state.observe.get('notificationAlerts'),\n});\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\n\nexport const withDashboardResources = <P extends DashboardItemProps>(\n  WrappedComponent: React.ComponentType<P>,\n) =>\n  connect<StateProps, DispatchProps, Diff<P, DashboardItemProps>>(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(\n    class WithDashboardResources extends React.Component<\n      WithDashboardResourcesProps,\n      WithDashboardResourcesState\n    > {\n      private urls: Array<string> = [];\n      private queries: Array<string> = [];\n      private watchingAlerts: boolean = false;\n\n      constructor(props) {\n        super(props);\n        this.state = {\n          k8sResources: [],\n        };\n      }\n\n      shouldComponentUpdate(\n        nextProps: WithDashboardResourcesProps,\n        nextState: WithDashboardResourcesState,\n      ) {\n        const urlResultChanged = this.urls.some(\n          (urlKey) =>\n            this.props[RESULTS_TYPE.URL].getIn([urlKey, 'data']) !==\n              nextProps[RESULTS_TYPE.URL].getIn([urlKey, 'data']) ||\n            this.props[RESULTS_TYPE.URL].getIn([urlKey, 'loadError']) !==\n              nextProps[RESULTS_TYPE.URL].getIn([urlKey, 'loadError']),\n        );\n        const queryResultChanged = this.queries.some(\n          (query) =>\n            this.props[RESULTS_TYPE.PROMETHEUS].getIn([query, 'data']) !==\n              nextProps[RESULTS_TYPE.PROMETHEUS].getIn([query, 'data']) ||\n            this.props[RESULTS_TYPE.PROMETHEUS].getIn([query, 'loadError']) !==\n              nextProps[RESULTS_TYPE.PROMETHEUS].getIn([query, 'loadError']),\n        );\n        const alertsResultChanged =\n          this.props?.notificationAlerts?.data !== nextProps?.notificationAlerts?.data ||\n          this.props?.notificationAlerts?.loadError !== nextProps?.notificationAlerts?.loadError;\n        const k8sResourcesChanged = this.state.k8sResources !== nextState.k8sResources;\n\n        const nextExternalProps = this.getExternalProps(nextProps);\n        const externalProps = this.getExternalProps(this.props);\n\n        return (\n          urlResultChanged ||\n          queryResultChanged ||\n          k8sResourcesChanged ||\n          (this.watchingAlerts && alertsResultChanged) ||\n          Object.keys(nextExternalProps).length !== Object.keys(externalProps).length ||\n          Object.keys(nextExternalProps).some(\n            (key) => nextExternalProps[key] !== externalProps[key],\n          )\n        );\n      }\n\n      watchURL: WatchURL = (url, fetch) => {\n        this.urls.push(url);\n        this.props.watchURL(url, fetch);\n      };\n\n      watchPrometheus: WatchPrometheus = (query, namespace, timespan) => {\n        this.queries.push(getQueryKey(query, timespan));\n        this.props.watchPrometheusQuery(query, namespace, timespan);\n      };\n\n      stopWatchPrometheusQuery: StopWatchPrometheus = (query, timespan) => {\n        const queryKey = getQueryKey(query, timespan);\n        this.queries = this.queries.filter((q) => q !== queryKey);\n        this.props.stopWatchPrometheusQuery(query, timespan);\n      };\n\n      watchAlerts: WatchAlerts = () => {\n        this.watchingAlerts = true;\n      };\n\n      stopWatchAlerts: StopWatchAlerts = () => {\n        this.watchingAlerts = false;\n      };\n\n      watchK8sResource: WatchK8sResource = (resource) => {\n        this.setState((state: WithDashboardResourcesState) => ({\n          k8sResources: [...state.k8sResources, { ...resource, optional: true }],\n        }));\n      };\n\n      stopWatchK8sResource: StopWatchK8sResource = (resource) => {\n        this.setState((state: WithDashboardResourcesState) => ({\n          k8sResources: state.k8sResources.filter((r) => r.prop !== resource.prop),\n        }));\n      };\n\n      getExternalProps = (props) => {\n        return _.omit(\n          props,\n          'watchURL',\n          'stopWatchURL',\n          'watchPrometheusQuery',\n          'stopWatchPrometheusQuery',\n          'watchAlerts',\n          'stopWatchAlerts',\n          RESULTS_TYPE.URL,\n          RESULTS_TYPE.PROMETHEUS,\n          'notificationAlerts',\n        );\n      };\n\n      render() {\n        return (\n          <Firehose resources={this.state.k8sResources}>\n            <WrappedComponent\n              watchURL={this.watchURL}\n              stopWatchURL={this.props.stopWatchURL}\n              watchPrometheus={this.watchPrometheus}\n              stopWatchPrometheusQuery={this.stopWatchPrometheusQuery}\n              watchAlerts={this.watchAlerts}\n              stopWatchAlerts={this.stopWatchAlerts}\n              urlResults={this.props[RESULTS_TYPE.URL]}\n              prometheusResults={this.props[RESULTS_TYPE.PROMETHEUS]}\n              notificationAlerts={this.props.notificationAlerts}\n              watchK8sResource={this.watchK8sResource}\n              stopWatchK8sResource={this.stopWatchK8sResource}\n              {...this.getExternalProps(this.props)}\n            />\n          </Firehose>\n        );\n      }\n    },\n  );\n\ntype DispatchToProps = (\n  dispatch: any,\n) => {\n  watchURL: WatchURL;\n  stopWatchURL: StopWatchURL;\n  watchPrometheusQuery: WatchPrometheus;\n  stopWatchPrometheusQuery: StopWatchPrometheus;\n};\n\ntype WatchURL = (url: string, fetch?: Fetch) => void;\ntype StopWatchURL = (url: string) => void;\ntype WatchPrometheus = (query: string, namespace?: string, timespan?: number) => void;\ntype StopWatchPrometheus = (query: string, timespan?: number) => void;\ntype WatchAlerts = () => void;\ntype StopWatchAlerts = () => void;\n\ntype WithDashboardResourcesState = {\n  k8sResources: FirehoseResource[];\n};\n\ntype WithDashboardResourcesProps = {\n  watchURL: WatchURLAction;\n  watchPrometheusQuery: WatchPrometheusQueryAction;\n  stopWatchURL: StopWatchURLAction;\n  stopWatchPrometheusQuery: StopWatchPrometheusAction;\n  [RESULTS_TYPE.PROMETHEUS]: RequestMap<PrometheusResponse>;\n  [RESULTS_TYPE.URL]: RequestMap<any>;\n  notificationAlerts: any;\n};\n\nexport type WatchK8sResource = (resource: FirehoseResource) => void;\nexport type StopWatchK8sResource = (resource: FirehoseResource) => void;\n\nexport type DashboardItemProps = {\n  watchURL: WatchURL;\n  stopWatchURL: StopWatchURL;\n  watchPrometheus: WatchPrometheus;\n  stopWatchPrometheusQuery: StopWatchPrometheus;\n  watchAlerts: WatchAlerts;\n  stopWatchAlerts: StopWatchAlerts;\n  urlResults: RequestMap<any>;\n  prometheusResults: RequestMap<PrometheusResponse>;\n  notificationAlerts: NotificationAlerts;\n  watchK8sResource: WatchK8sResource;\n  stopWatchK8sResource: StopWatchK8sResource;\n  resources?: {\n    [key: string]:\n      | FirehoseResult\n      | FirehoseResult<K8sResourceKind>\n      | FirehoseResult<AppliedClusterResourceQuotaKind>;\n  };\n};\n","import i18next from 'i18next';\nimport { Action } from '@console/dynamic-plugin-sdk';\nimport {\n  annotationsModalLauncher,\n  deleteModal,\n  labelsModalLauncher,\n  configureReplicaCountModal,\n  podSelectorModal,\n  tolerationsModal,\n} from '@console/internal/components/modals';\nimport { resourceObjPath, asAccessReview } from '@console/internal/components/utils';\nimport { referenceForModel, K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nexport type ResourceActionCreator = (\n  kind: K8sKind,\n  obj: K8sResourceKind,\n  relatedResource?: K8sResourceKind,\n  message?: JSX.Element,\n) => Action;\n\nexport type ResourceActionFactory = { [name: string]: ResourceActionCreator };\n\nexport const CommonActionFactory: ResourceActionFactory = {\n  Delete: (\n    kind: K8sKind,\n    obj: K8sResourceKind,\n    relatedResource?: K8sResourceKind,\n    message?: JSX.Element,\n  ): Action => ({\n    id: `delete-resource`,\n    label: i18next.t('console-app~Delete {{kind}}', { kind: kind.kind }),\n    cta: () =>\n      deleteModal({\n        kind,\n        resource: obj,\n        message,\n      }),\n    accessReview: asAccessReview(kind, obj, 'delete'),\n  }),\n  Edit: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: `edit-resource`,\n    label: i18next.t('console-app~Edit {{kind}}', { kind: kind.kind }),\n    cta: {\n      href: `${resourceObjPath(obj, kind.crd ? referenceForModel(kind) : kind.kind)}/yaml`,\n    },\n    // TODO: Fallback to \"View YAML\"? We might want a similar fallback for annotations, labels, etc.\n    accessReview: asAccessReview(kind, obj, 'update'),\n  }),\n  ModifyLabels: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-labels',\n    label: i18next.t('console-app~Edit labels'),\n    cta: () =>\n      labelsModalLauncher({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyAnnotations: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-annotations',\n    label: i18next.t('console-app~Edit annotations'),\n    cta: () =>\n      annotationsModalLauncher({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyCount: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-pod-count',\n    label: i18next.t('console-app~Edit Pod count'),\n    cta: () =>\n      configureReplicaCountModal({\n        resourceKind: kind,\n        resource: obj,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch', 'scale'),\n  }),\n  ModifyPodSelector: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-pod-selector',\n    label: i18next.t('console-app~Edit Pod selector'),\n    cta: () =>\n      podSelectorModal({\n        kind,\n        resource: obj,\n        blocking: true,\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  ModifyTolerations: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'edit-toleration',\n    label: i18next.t('console-app~Edit tolerations'),\n    cta: () =>\n      tolerationsModal({\n        resourceKind: kind,\n        resource: obj,\n        modalClassName: 'modal-lg',\n      }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n  AddStorage: (kind: K8sKind, obj: K8sResourceKind): Action => ({\n    id: 'add-storage',\n    label: i18next.t('console-app~Add storage'),\n    cta: {\n      href: `${resourceObjPath(\n        obj,\n        kind.crd ? referenceForModel(kind) : kind.kind,\n      )}/attach-storage`,\n    },\n    accessReview: asAccessReview(kind, obj, 'patch'),\n  }),\n};\n\nexport const getCommonResourceActions = (\n  kind: K8sKind,\n  obj: K8sResourceKind,\n  message?: JSX.Element,\n): Action[] => {\n  return [\n    CommonActionFactory.ModifyLabels(kind, obj),\n    CommonActionFactory.ModifyAnnotations(kind, obj),\n    CommonActionFactory.Edit(kind, obj),\n    CommonActionFactory.Delete(kind, obj, undefined, message),\n  ];\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { useActivePerspective, LIMIT_STATE, Humanize } from '@console/dynamic-plugin-sdk';\nimport { getPrometheusQueryResponse } from '@console/internal/actions/dashboards';\nimport {\n  withDashboardResources,\n  DashboardItemProps,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { Dropdown } from '@console/internal/components/utils/dropdown';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sKind, referenceForModel, K8sResourceCommon } from '@console/internal/module/k8s';\nimport { getName, getNamespace, useFlag } from '../../..';\nimport { FLAGS } from '../../../constants';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status';\nimport Status from '../status-card/StatusPopup';\n\nimport './top-consumer-popover.scss';\n\nconst ConsumerPopover: React.FC<ConsumerPopoverProps> = React.memo(\n  ({\n    current,\n    title,\n    humanize,\n    consumers,\n    namespace,\n    position = PopoverPosition.top,\n    description,\n    children,\n  }) => {\n    const { t } = useTranslation();\n    const [isOpen, setOpen] = React.useState(false);\n    const onShow = React.useCallback(() => setOpen(true), []);\n    const onHide = React.useCallback(() => setOpen(false), []);\n    if (!current) {\n      return null;\n    }\n    return (\n      <Popover\n        position={position}\n        headerContent={t('console-shared~{{title}} breakdown', { title })}\n        bodyContent={\n          <PopoverBody\n            humanize={humanize}\n            consumers={consumers}\n            namespace={namespace}\n            isOpen={isOpen}\n            description={description}\n          >\n            {children}\n          </PopoverBody>\n        }\n        enableFlip\n        onShow={onShow}\n        onHide={onHide}\n        maxWidth=\"21rem\"\n      >\n        <Button variant=\"link\" isInline>\n          {current}\n        </Button>\n      </Popover>\n    );\n  },\n);\n\nexport default ConsumerPopover;\n\nconst getLimitIcon = (state: LIMIT_STATE): React.ReactNode => {\n  switch (state) {\n    case LIMIT_STATE.ERROR:\n      return <RedExclamationCircleIcon />;\n    case LIMIT_STATE.WARN:\n      return <YellowExclamationTriangleIcon />;\n    default:\n      return null;\n  }\n};\n\nconst getResourceToWatch = (model: K8sKind, namespace: string, fieldSelector: string) => ({\n  isList: true,\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  fieldSelector,\n  namespace,\n});\n\nexport const LimitsBody: React.FC<LimitsBodyProps> = ({\n  limitState,\n  requestedState,\n  total,\n  limit,\n  current,\n  available,\n  requested,\n}) => {\n  const { t } = useTranslation();\n  return (\n    ((!!limitState && limitState !== LIMIT_STATE.OK) ||\n      (!!requestedState && requestedState !== LIMIT_STATE.OK)) && (\n      <ul className=\"co-utilization-card-popover__consumer-list\">\n        <Status value={total}>{t('console-shared~Total capacity')}</Status>\n        <Status value={limit} icon={getLimitIcon(limitState)}>\n          {t('console-shared~Total limit')}\n        </Status>\n        <Status value={current}>{t('console-shared~Current utilization')}</Status>\n        <Status value={available}>{t('console-shared~Current available capacity')}</Status>\n        <Status value={requested} icon={getLimitIcon(requestedState)}>\n          {t('console-shared~Total requested')}\n        </Status>\n      </ul>\n    )\n  );\n};\n\nexport const PopoverBody = withDashboardResources<DashboardItemProps & PopoverBodyProps>(\n  React.memo(\n    ({\n      humanize,\n      consumers,\n      namespace,\n      watchPrometheus,\n      stopWatchPrometheusQuery,\n      prometheusResults,\n      isOpen,\n      description,\n      children,\n    }) => {\n      const { t } = useTranslation();\n      const [currentConsumer, setCurrentConsumer] = React.useState(consumers[0]);\n      const activePerspective = useActivePerspective()[0];\n      const canAccessMonitoring =\n        useFlag(FLAGS.CAN_GET_NS) && !!window.SERVER_FLAGS.prometheusBaseURL;\n      const { query, model, metric, fieldSelector } = currentConsumer;\n      const k8sResource = React.useMemo(\n        () => (isOpen ? getResourceToWatch(model, namespace, fieldSelector) : null),\n        [fieldSelector, isOpen, model, namespace],\n      );\n      const [consumerData, consumerLoaded, consumersLoadError] = useK8sWatchResource<\n        K8sResourceCommon[]\n      >(k8sResource);\n      React.useEffect(() => {\n        if (!isOpen) {\n          return () => {};\n        }\n        watchPrometheus(query, namespace);\n        return () => {\n          stopWatchPrometheusQuery(query);\n        };\n      }, [query, stopWatchPrometheusQuery, watchPrometheus, namespace, isOpen]);\n\n      const top5Data = [];\n\n      const [data, error] = getPrometheusQueryResponse(prometheusResults, query);\n      const bodyData = getInstantVectorStats(data, metric);\n\n      if (k8sResource && consumerLoaded && !consumersLoadError) {\n        for (const d of bodyData) {\n          const consumerExists = consumerData.some(\n            (consumer) =>\n              getName(consumer) === d.metric[metric] &&\n              (model.namespaced ? getNamespace(consumer) === d.metric.namespace : true),\n          );\n          if (consumerExists) {\n            top5Data.push({ ...d, y: humanize(d.y).string });\n          }\n          if (top5Data.length === 5) {\n            break;\n          }\n        }\n      }\n\n      const monitoringParams = React.useMemo(() => {\n        const params = new URLSearchParams();\n        params.set('query0', currentConsumer.query);\n        return params;\n      }, [currentConsumer.query]);\n\n      const dropdownItems = React.useMemo(\n        () =>\n          consumers.reduce((items, curr) => {\n            items[referenceForModel(curr.model)] = t('console-shared~By {{label}}', {\n              label: curr.model.labelKey ? t(curr.model.labelKey) : curr.model.label,\n            });\n            return items;\n          }, {}),\n        [consumers, t],\n      );\n\n      const onDropdownChange = React.useCallback(\n        (key) => setCurrentConsumer(consumers.find((c) => referenceForModel(c.model) === key)),\n        [consumers],\n      );\n\n      const monitoringURL =\n        canAccessMonitoring && activePerspective === 'admin'\n          ? `/monitoring/query-browser?${monitoringParams.toString()}`\n          : `/dev-monitoring/ns/${namespace}/metrics?${monitoringParams.toString()}`;\n\n      let body: React.ReactNode;\n      if (error || consumersLoadError) {\n        body = <div className=\"text-secondary\">{t('console-shared~Not available')}</div>;\n      } else if (!consumerLoaded || !data) {\n        body = (\n          <ul className=\"co-utilization-card-popover__consumer-list\">\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n            <li className=\"skeleton-consumer\" />\n          </ul>\n        );\n      } else {\n        body = (\n          <>\n            <ul\n              className=\"co-utilization-card-popover__consumer-list\"\n              aria-label={t('console-shared~Top consumer by {{label}}', { label: model.label })}\n            >\n              {top5Data &&\n                top5Data.map((item) => {\n                  const title = String(item.x);\n                  return (\n                    <ListItem key={title} value={item.y}>\n                      <Link\n                        className=\"co-utilization-card-popover__consumer-name\"\n                        to={resourcePathFromModel(model, title, item.metric.namespace)}\n                      >\n                        {title}\n                      </Link>\n                    </ListItem>\n                  );\n                })}\n            </ul>\n            <Link to={monitoringURL}>{t('console-shared~View more')}</Link>\n          </>\n        );\n      }\n\n      return (\n        <div className=\"co-utilization-card-popover__body\">\n          {description && (\n            <div className=\"co-utilization-card-popover__description\">{description}</div>\n          )}\n          {children}\n          <div className=\"co-utilization-card-popover__title\">\n            {consumers.length === 1\n              ? t('console-shared~Top {{label}} consumers', {\n                  label: currentConsumer.model.label.toLowerCase(),\n                })\n              : t('console-shared~Top consumers')}\n          </div>\n          {consumers.length > 1 && (\n            <Dropdown\n              className=\"co-utilization-card-popover__dropdown\"\n              id=\"consumer-select\"\n              name=\"selectConsumerType\"\n              aria-label={t('console-shared~Select consumer type')}\n              items={dropdownItems}\n              onChange={onDropdownChange}\n              selectedKey={referenceForModel(model)}\n            />\n          )}\n          {body}\n        </div>\n      );\n    },\n  ),\n);\n\nconst ListItem: React.FC<ListItemProps> = ({ children, value }) => (\n  <li className=\"co-utilization-card-popover__consumer-item\">\n    {children}\n    <div className=\"co-utilization-card-popover__consumer-value\">{value}</div>\n  </li>\n);\n\ntype ListItemProps = {\n  value: React.ReactText;\n};\n\ntype LimitsBodyProps = {\n  limitState?: LIMIT_STATE;\n  requestedState?: LIMIT_STATE;\n  limit?: string;\n  requested?: string;\n  available?: string;\n  total?: string;\n  current: string;\n};\n\ntype PopoverProps = {\n  humanize: Humanize;\n  consumers: { model: K8sKind; query: string; metric: string; fieldSelector?: string }[];\n  namespace?: string;\n  description?: string;\n};\n\ntype PopoverBodyProps = PopoverProps & {\n  topConsumers?: DataPoint[][];\n  error?: boolean;\n  isOpen: boolean;\n};\n\nexport type ConsumerPopoverProps = PopoverProps & {\n  position?: PopoverPosition;\n  title: string;\n  current: string;\n};\n","import * as _ from 'lodash';\nimport { NodeModel } from '@console/internal/models';\nimport { k8sPatch, K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const makeNodeUnschedulable = (resource: K8sResourceKind): Promise<K8sResourceKind> => {\n  const op = _.has(resource, 'spec.unschedulable') ? 'replace' : 'add';\n  return k8sPatch(NodeModel, resource, [{ op, path: '/spec/unschedulable', value: true }]);\n};\n\nexport const makeNodeSchedulable = (resource: K8sResourceKind): Promise<K8sResourceKind> => {\n  const op = _.has(resource, 'spec.unschedulable') ? 'replace' : 'add';\n  return k8sPatch(NodeModel, resource, [{ op, path: '/spec/unschedulable', value: false }]);\n};\n","import { NodeKind } from '@console/internal/module/k8s';\n\nexport const createConfigureUnschedulableModal = (props: { resource: NodeKind }) =>\n  import(\n    './ConfigureUnschedulableModal' /* webpackChunkName: \"configure-unschedulable-modal\" */\n  ).then((m) => m.default(props));\n","import * as React from 'react';\nimport {\n  Button,\n  Alert,\n  Stack,\n  StackItem,\n  Split,\n  SplitItem,\n  ExpandableSection,\n} from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons/dist/esm/icons/add-circle-o-icon';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CertificateSigningRequestKind,\n  IsNodeStatusActive,\n  NodePopoverContentProps,\n  PopoverStatus,\n  StatusIconAndText,\n} from '@console/dynamic-plugin-sdk';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { CertificateSigningRequestModel } from '@console/internal/models';\nimport { SecondaryStatus } from '@console/shared';\nimport { getNodeServerCSR } from '../csr';\nimport { approveCSR, denyCSR } from '../menu-actions';\n\ntype NodeStatusResources = { csrs: CertificateSigningRequestKind[] };\n\nexport const isCSRActive: IsNodeStatusActive<NodeStatusResources> = (node, resources) => {\n  if (resources.csrs?.loaded && !resources.csrs?.loadError) {\n    return !!getNodeServerCSR(resources.csrs.data, node);\n  }\n  return false;\n};\n\ntype CSRPopoverContentProps = {\n  csr: CertificateSigningRequestKind;\n  serverCSR?: boolean;\n  onPatch?: VoidFunction;\n};\n\nexport const CSRPopoverContent: React.FC<CSRPopoverContentProps> = ({\n  csr,\n  serverCSR,\n  onPatch,\n}) => {\n  const { t } = useTranslation();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n  const updateCSR = async (approve: boolean) => {\n    setError(null);\n    setInProgress(true);\n    try {\n      await (approve ? approveCSR(csr) : denyCSR(csr));\n      onPatch?.();\n    } catch (err) {\n      setError(`${csr.metadata.name} ${approve ? 'approval' : 'denial'} failed - ${err}`);\n    } finally {\n      setInProgress(false);\n    }\n  };\n\n  const clientCSRDesc = t(\n    'console-app~This node has requested to join the cluster. After approving its certificate signing request the node will begin running workloads.',\n  );\n\n  const ServerCSRDesc = t(\n    'console-app~This node has a pending server certificate signing request. Approve the request to enable all networking functionality on this node.',\n  );\n\n  return (\n    <Stack hasGutter>\n      <StackItem>{serverCSR ? ServerCSRDesc : clientCSRDesc}</StackItem>\n      <StackItem>\n        <div>\n          <b>{t('console-app~Request')}</b>\n        </div>\n        <div>\n          <ResourceLink\n            name={csr.metadata.name}\n            groupVersionKind={{\n              kind: CertificateSigningRequestModel.kind,\n              version: CertificateSigningRequestModel.apiVersion,\n              group: CertificateSigningRequestModel.apiGroup,\n            }}\n          />\n        </div>\n      </StackItem>\n      <StackItem>\n        <div>\n          <b>{t('console-app~Created')}</b>\n        </div>\n        <div>\n          <Timestamp timestamp={csr.metadata.creationTimestamp} />\n        </div>\n      </StackItem>\n      <StackItem>\n        <Split hasGutter>\n          <SplitItem>\n            <Button\n              variant=\"link\"\n              onMouseUp={() => updateCSR(true)}\n              isDisabled={inProgress}\n              isInline\n            >\n              {t('console-app~Approve')}\n            </Button>\n          </SplitItem>\n          <SplitItem>\n            <Button\n              variant=\"link\"\n              onMouseUp={() => updateCSR(false)}\n              isDisabled={inProgress}\n              isInline\n            >\n              {t('console-app~Deny')}\n            </Button>\n          </SplitItem>\n        </Split>\n      </StackItem>\n      {error && (\n        <StackItem>\n          <Alert variant=\"danger\" isInline title={error} />\n        </StackItem>\n      )}\n    </Stack>\n  );\n};\n\ntype StatusTitleProps = {\n  title?: string;\n};\n\nconst StatusTitle: React.FC<StatusTitleProps> = ({ title }) => {\n  const { t } = useTranslation();\n  return (\n    <StatusIconAndText\n      title={title || t('console-app~Approval required')}\n      icon={<AddCircleOIcon />}\n    />\n  );\n};\n\nexport const ServerCSRPopoverContent: React.FC<NodePopoverContentProps<NodeStatusResources>> = ({\n  node,\n  resources,\n}) => {\n  const [isExpanded, setExpanded] = React.useState(true);\n  const serverCSR = getNodeServerCSR(resources.csrs.data, node);\n  return (\n    <ExpandableSection\n      isExpanded={isExpanded}\n      onToggle={(_, expanded) => setExpanded(expanded)}\n      toggleContent={<StatusTitle />}\n    >\n      <CSRPopoverContent csr={serverCSR} serverCSR />\n    </ExpandableSection>\n  );\n};\n\ntype ClientCSRStatusProps = CSRPopoverContentProps & {\n  title: string;\n};\n\nconst ClientCSRStatus: React.FC<ClientCSRStatusProps> = ({ title, ...rest }) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <>\n      <PopoverStatus\n        title={t('console-app~Certificate approval required')}\n        statusBody={<StatusTitle title={title} />}\n        isVisible={isOpen}\n        shouldClose={() => setIsOpen(false)}\n        shouldOpen={() => setIsOpen(true)}\n      >\n        <CSRPopoverContent {...rest} onPatch={() => setIsOpen(false)} />\n      </PopoverStatus>\n      <SecondaryStatus status={t('console-app~Approval required')} />\n    </>\n  );\n};\n\nexport default ClientCSRStatus;\n","import * as React from 'react';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getNodeUptime } from '@console/shared/src';\n\ntype NodeUptimeProps = {\n  obj: NodeKind;\n};\n\nconst NodeUptime: React.FC<NodeUptimeProps> = ({ obj }) => (\n  <Timestamp timestamp={getNodeUptime(obj)} />\n);\n\nexport default NodeUptime;\n","import * as React from 'react';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { PopoverStatus, NodeStatus } from '@console/dynamic-plugin-sdk';\nimport { humanizeBinaryBytes, humanizeNumber } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { Status, SecondaryStatus } from '@console/shared';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { ErrorBoundary } from '@console/shared/src/components/error';\nimport { PressureQueries, Condition } from '../../queries';\nimport { nodeStatus } from '../../status/node';\nimport { GetNodeStatusExtensions, useNodeStatusExtensions } from './useNodeStatusExtensions';\n\nconst conditionDescriptionMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: 'available disk capacity is low',\n  [Condition.MEM_PRESSURE]: 'available memory is low',\n  [Condition.PID_PRESSURE]: 'CPU is running a large number of processes',\n});\n\nconst humanizeMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: humanizeBinaryBytes,\n  [Condition.MEM_PRESSURE]: humanizeBinaryBytes,\n  [Condition.PID_PRESSURE]: humanizeNumber,\n});\n\nconst isMonitoredCondition = (condition: Condition): boolean =>\n  [Condition.DISK_PRESSURE, Condition.MEM_PRESSURE, Condition.PID_PRESSURE].includes(condition);\n\nconst getDegradedStates = (node: NodeKind): Condition[] => {\n  return node.status.conditions\n    .filter(({ status, type }) => status === 'True' && isMonitoredCondition(type as Condition))\n    .map(({ type }) => type as Condition);\n};\n\ntype NodeStatusWithExtensionsProps = {\n  node: NodeKind;\n  statusExtensions: GetNodeStatusExtensions;\n  className?: string;\n};\n\nexport const NodeStatusWithExtensions: React.FC<NodeStatusWithExtensionsProps> = ({\n  node,\n  className,\n  statusExtensions,\n}) => {\n  const { t } = useTranslation();\n\n  const { popoverContent, secondaryStatuses } = React.useMemo(() => statusExtensions(node), [\n    statusExtensions,\n    node,\n  ]);\n\n  const mainStatus = <Status status={nodeStatus(node)} className={className} />;\n\n  return (\n    <>\n      {popoverContent.length ? (\n        <PopoverStatus title={t('console-app~Node status')} statusBody={mainStatus}>\n          <Stack>\n            {popoverContent.map(({ content, uid }) => (\n              <ErrorBoundary key={uid}>\n                <StackItem>{content}</StackItem>\n              </ErrorBoundary>\n            ))}\n          </Stack>\n        </PopoverStatus>\n      ) : (\n        mainStatus\n      )}\n      <SecondaryStatus status={secondaryStatuses} />\n      {getDegradedStates(node)?.map((item) => (\n        <div key={item}>\n          <ConsumerPopover\n            title={_.startCase(item)}\n            current={_.startCase(item)}\n            consumers={PressureQueries[item](node.metadata.name)}\n            humanize={humanizeMap[item]}\n            description={t(\n              \"console-app~This node's {{conditionDescription}}. Performance may be degraded.\",\n              { conditionDescription: conditionDescriptionMap[item] },\n            )}\n          />\n        </div>\n      ))}\n    </>\n  );\n};\n\ntype NodeStatusProps = {\n  node: NodeKind;\n  className?: string;\n};\n\nconst NodeStatus: React.FC<NodeStatusProps> = ({ node, className }) => {\n  const statusExtensions = useNodeStatusExtensions();\n\n  return (\n    <NodeStatusWithExtensions\n      node={node}\n      className={className}\n      statusExtensions={statusExtensions}\n    />\n  );\n};\n\nexport default NodeStatus;\n","import * as React from 'react';\nimport {\n  useResolvedExtensions,\n  NodeStatus,\n  isNodeStatus,\n  WatchK8sResource,\n  WatchK8sResults,\n  NodeKind,\n} from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\n\ntype PopoverContent = {\n  content: React.ReactNode;\n  uid: string;\n};\n\nexport type GetNodeStatusExtensions = (\n  node: NodeKind,\n) => {\n  popoverContent: PopoverContent[];\n  secondaryStatuses: string[];\n};\n\nexport const useNodeStatusExtensions = () => {\n  const [nodeStatusExtensions] = useResolvedExtensions<NodeStatus>(isNodeStatus);\n\n  const pluginResources = React.useMemo(() => {\n    const resources: { [key: string]: WatchK8sResource } = {};\n\n    nodeStatusExtensions.forEach(({ properties, uid }) => {\n      if (properties.resources) {\n        Object.keys(properties.resources).forEach((key) => {\n          resources[`${uid}-${key}`] = properties.resources[key];\n        });\n      }\n    });\n    return resources;\n  }, [nodeStatusExtensions]);\n\n  const extraResources = useK8sWatchResources(pluginResources);\n\n  return React.useCallback<GetNodeStatusExtensions>(\n    (node: NodeKind) => {\n      const content: PopoverContent[] = [];\n      const statuses: string[] = [];\n      nodeStatusExtensions.forEach(\n        ({ properties: { PopoverContent, title, isActive, resources }, uid, pluginID, type }) => {\n          const pResources: WatchK8sResults<any> = {};\n          if (resources) {\n            Object.keys(resources).forEach((key) => {\n              pResources[key] = extraResources[`${uid}-${key}`];\n            });\n          }\n          try {\n            if (isActive(node, pResources)) {\n              content.push({\n                content: <PopoverContent node={node} resources={pResources} />,\n                uid,\n              });\n              statuses.push(title);\n            }\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(`Extension ${pluginID}, ${type} failed:`, err);\n          }\n        },\n      );\n      return { popoverContent: content, secondaryStatuses: statuses };\n    },\n    [extraResources, nodeStatusExtensions],\n  );\n};\n","import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getDeletetionTimestamp } from '@console/shared/src/selectors';\nimport { StatusProps } from '../components/types';\nimport {\n  NODE_STATUS_TITLE_KEYS,\n  NODE_STATUS_UNDER_MAINTENANCE,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n  NODE_STATUS_STARTING_MAINTENANCE,\n} from '../constants';\nimport { getNodeMaintenancePhase } from '../selectors';\n\nexport const getNodeMaintenanceStatus = (maintenance: K8sResourceKind): StatusProps => {\n  if (!maintenance) return null;\n\n  if (getDeletetionTimestamp(maintenance)) {\n    return {\n      status: NODE_STATUS_STOPPING_MAINTENANCE,\n      titleKey: NODE_STATUS_TITLE_KEYS[NODE_STATUS_STOPPING_MAINTENANCE],\n    };\n  }\n  if (getNodeMaintenancePhase(maintenance) === 'Succeeded') {\n    return {\n      status: NODE_STATUS_UNDER_MAINTENANCE,\n      titleKey: NODE_STATUS_TITLE_KEYS[NODE_STATUS_UNDER_MAINTENANCE],\n    };\n  }\n  return {\n    status: NODE_STATUS_STARTING_MAINTENANCE,\n    titleKey: NODE_STATUS_TITLE_KEYS[NODE_STATUS_STARTING_MAINTENANCE],\n  };\n};\n","import * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { DASH, getNodeRoles } from '@console/shared';\n\ntype NodeRolesProps = {\n  node?: NodeKind;\n};\n\nconst NodeRoles: React.FC<NodeRolesProps> = ({ node }) => (\n  <>{getNodeRoles(node).sort().join(', ') || DASH}</>\n);\n\nexport default NodeRoles;\n"],"sourceRoot":""}