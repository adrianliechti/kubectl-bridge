{"version":3,"sources":["webpack:///./public/components/api-explorer.tsx","webpack:///./public/components/sidebars/explore-type-sidebar.tsx"],"names":["APIResourceLink","state","activeNamespace","UI","get","model","t","to","ref","namespaced","getAPIResourceLink","className","kind","labelKey","EmptyAPIResourcesMsg","label","Group","value","first","rest","split","join","tableClasses","APIResourceRows","componentProps","data","title","props","apiGroup","apiVersion","APIResourcesList","k8s","models","getIn","location","ALL","search","URLSearchParams","groupFilter","has","versionFilter","textFilter","scopeFilter","sortedGroups","reduce","result","add","Set","sort","groupOptions","group","isExactSearch","matchFn","groupSpacer","length","sortedVersions","versionOptions","version","versionSpacer","scopeOptions","cluster","namespace","scopeSpacer","filteredResources","filter","sortedResources","toArray","updateURL","k","v","toggleIcon","breakpoint","autocompleteFilter","text","_item","key","items","onChange","selectedKey","spacerBefore","dropDownClassName","scope","_event","EmptyMsg","Header","sortField","transforms","Rows","loaded","size","virtualize","displayName","APIExplorerPage","APIResourceDetails","customData","kindObj","verbs","shortNames","description","content","scrollTop","document","getElementById","APIResourceSchema","APIResourceInstances","resourceListPageExtensions","dynamicResourceListPageExtensions","componentLoader","Promise","resolve","ns","undefined","loader","crd","showTitle","autoFocus","Subject","EmptyAccessReviewMsg","APIResourceAccessReview","plural","verb","setVerb","setFilter","showUsers","setShowUsers","showGroups","setShowGroups","showServiceAccounts","setShowServiceAccounts","accessResponse","setAccessResponse","error","setError","accessReviewModel","req","resourceAPIVersion","resourceAPIGroup","resource","then","catch","message","users","serviceAccounts","name","startsWith","push","type","groups","verbOptions","allSelected","itemCount","selectedCount","filteredData","sortedData","getSubjectTypeLabel","titlePrefix","defaultValue","val","onSelectAll","e","preventDefault","active","number","toggle","subject","APIResourcePage","OPENSHIFT","params","kindsInFlight","canCreateResourceAccessReview","centerText","breadcrumbs","path","pathname","pages","href","nameKey","component","includes","flags","titleProviderValues","telemetryPrefix","Provider","detail","noStatusBox","ExploreType","drilldownHistory","setDrilldownHistory","schema","allDefinitions","setAllDefinitions","response","err","console","currentSelection","currentPath","currentDefinition","currentProperties","properties","definitions","required","kindLabel","map","crumb","i","isLast","isActive","onClick","breadcrumbClicked","isInline","variant","definition","child","getDrilldownPath","definitionType","getTypeForRef","$ref","re","test","replace","getRef","definitionTypeStr","Array","isArray","desc","drilldown"],"mappings":"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","file":"api-explorer-chunk-0b721cf44d9603080854.min.js","sourcesContent":["import * as React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useLocation, useParams, Link } from 'react-router-dom-v5-compat';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Map as ImmutableMap } from 'immutable';\nimport * as fuzzy from 'fuzzysearch';\nimport {\n  Tooltip,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\n\nimport { ALL_NAMESPACES_KEY, FLAGS, APIError, getTitleForNodeKind } from '@console/shared';\nimport { useExactSearch } from '@console/app/src/components/user-preferences/search';\nimport { PageTitleContext } from '@console/shared/src/components/pagetitle/PageTitleContext';\nimport { Page, PageHeading, useAccessReview } from '@console/internal/components/utils';\n\nimport { LocalResourceAccessReviewsModel, ResourceAccessReviewsModel } from '../models';\nimport {\n  apiVersionForModel,\n  k8sCreate,\n  K8sKind,\n  K8sResourceKindReference,\n  K8sVerb,\n  getResourceDescription,\n  referenceForModel,\n  ResourceAccessReviewRequest,\n  ResourceAccessReviewResponse,\n} from '../module/k8s';\nimport { connectToFlags } from '../reducers/connectToFlags';\nimport { RootState } from '../redux';\nimport { CheckBox, CheckBoxControls } from './row-filter';\nimport { DefaultPage } from './default-resource';\nimport { Table, TextFilter } from './factory';\nimport { exactMatch, fuzzyCaseInsensitive } from './factory/table-filters';\nimport { getResourceListPages } from './resource-pages';\nimport { ExploreType } from './sidebars/explore-type-sidebar';\nimport {\n  AsyncComponent,\n  Dropdown,\n  EmptyBox,\n  HorizontalNav,\n  LinkifyExternal,\n  LoadError,\n  LoadingBox,\n  removeQueryArgument,\n  ResourceIcon,\n  ScrollToTopOnMount,\n  setQueryArgument,\n} from './utils';\nimport { isResourceListPage, useExtensions, ResourceListPage } from '@console/plugin-sdk';\nimport {\n  ResourceListPage as DynamicResourceListPage,\n  isResourceListPage as isDynamicResourceListPage,\n} from '@console/dynamic-plugin-sdk';\nimport { getK8sModel } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sModel';\n\nconst mapStateToProps = (state: RootState): APIResourceLinkStateProps => {\n  return {\n    activeNamespace: state.UI.get('activeNamespace'),\n  };\n};\n\nconst getAPIResourceLink = (activeNamespace: string, model: K8sKind) => {\n  const ref = referenceForModel(model);\n  if (!model.namespaced) {\n    return `/api-resource/cluster/${ref}`;\n  }\n\n  if (activeNamespace === ALL_NAMESPACES_KEY) {\n    return `/api-resource/all-namespaces/${ref}`;\n  }\n\n  return `/api-resource/ns/${activeNamespace}/${ref}`;\n};\n\nconst APIResourceLink_: React.FC<APIResourceLinkStateProps & APIResourceLinkOwnProps> = ({\n  activeNamespace,\n  model,\n}) => {\n  const { t } = useTranslation();\n  const to = getAPIResourceLink(activeNamespace, model);\n  return (\n    <span className=\"co-resource-item\">\n      <span className=\"co-resource-icon--fixed-width hidden-xs\">\n        <ResourceIcon kind={referenceForModel(model)} />\n      </span>\n      <Link to={to} className=\"co-resource-item__resource-name\">\n        {model.labelKey ? t(model.labelKey) : model.kind}\n      </Link>\n    </span>\n  );\n};\nconst APIResourceLink = connect<APIResourceLinkStateProps, {}, APIResourceLinkOwnProps>(\n  mapStateToProps,\n)(APIResourceLink_);\n\nconst EmptyAPIResourcesMsg: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  return <EmptyBox label={t('public~API resources')} />;\n};\n\nconst Group: React.FC<{ value: string }> = ({ value }) => {\n  if (!value) {\n    return <>-</>;\n  }\n\n  const [first, ...rest] = value.split('.');\n  return _.isEmpty(rest) ? (\n    <>{value}</>\n  ) : (\n    <span className=\"co-break-word\">\n      {first}\n      <span className=\"text-muted\">.{rest.join('.')}</span>\n    </span>\n  );\n};\n\nconst tableClasses = [\n  'pf-v5-u-w-25-on-2xl',\n  'pf-v5-u-w-16-on-2xl',\n  'pf-v5-u-w-16-on-lg pf-v5-u-w-10-on-2xl',\n  'pf-m-hidden pf-m-visible-on-xl pf-v5-u-w-16-on-lg',\n  'pf-m-hidden pf-m-visible-on-lg',\n];\n\nconst APIResourceRows = ({ componentProps: { data } }) =>\n  _.map(data, (model: K8sKind) => [\n    {\n      title: <APIResourceLink model={model} />,\n      props: { className: tableClasses[0] },\n    },\n    {\n      title: (\n        <span className=\"co-select-to-copy\">\n          <Group value={model.apiGroup} />\n        </span>\n      ),\n      props: { className: tableClasses[1] },\n    },\n    {\n      title: model.apiVersion,\n      props: { className: tableClasses[2] },\n    },\n    {\n      title: model.namespaced ? i18next.t('public~true') : i18next.t('public~false'),\n      props: { className: tableClasses[3] },\n    },\n    {\n      title: <div className=\"co-line-clamp\">{getResourceDescription(model)}</div>,\n      props: { className: tableClasses[4] },\n    },\n  ]);\n\nconst stateToProps = ({ k8s }) => ({\n  models: k8s.getIn(['RESOURCES', 'models']),\n});\n\nconst APIResourcesList = compose(\n  withRouter,\n  connect<APIResourcesListPropsFromState>(stateToProps),\n)(({ models, location }) => {\n  const ALL = '#all#';\n  const GROUP_PARAM = 'g';\n  const VERSION_PARAM = 'v';\n  const TEXT_FILTER_PARAM = 'q';\n  const SCOPE_PARAM = 's';\n  const search = new URLSearchParams(location.search);\n  // Differentiate between an empty group and an unspecified param.\n  const groupFilter = search.has(GROUP_PARAM) ? search.get(GROUP_PARAM) : ALL;\n  const versionFilter = search.get(VERSION_PARAM) || ALL;\n  const textFilter = search.get(TEXT_FILTER_PARAM) || '';\n  const scopeFilter = search.get(SCOPE_PARAM) || ALL;\n  const { t } = useTranslation();\n  // group options\n  const groups: Set<string> = models.reduce((result: Set<string>, { apiGroup }) => {\n    return apiGroup ? result.add(apiGroup) : result;\n  }, new Set<string>());\n  const sortedGroups: string[] = [...groups].sort();\n  const groupOptions = sortedGroups.reduce(\n    (result, group: string) => {\n      result[group] = <Group value={group} />;\n      return result;\n    },\n    { [ALL]: t('public~All groups'), '': t('public~No group') },\n  );\n  const [isExactSearch] = useExactSearch();\n  const matchFn: Function = isExactSearch ? exactMatch : fuzzyCaseInsensitive;\n\n  const groupSpacer = new Set<string>();\n  if (sortedGroups.length) {\n    groupSpacer.add(sortedGroups[0]);\n  }\n\n  const autocompleteGroups = (text: string, _item: string, key: string): boolean => {\n    return key !== ALL && fuzzy(text, key);\n  };\n\n  // version options\n  const versions: Set<string> = models.reduce((result: Set<string>, { apiVersion }) => {\n    return result.add(apiVersion);\n  }, new Set<string>());\n  const sortedVersions: string[] = [...versions].sort();\n  const versionOptions = sortedVersions.reduce(\n    (result, version: string) => {\n      result[version] = version;\n      return result;\n    },\n    { [ALL]: t('public~All versions') },\n  );\n\n  const versionSpacer = new Set<string>();\n  if (sortedVersions.length) {\n    versionSpacer.add(sortedVersions[0]);\n  }\n\n  const scopeOptions = {\n    [ALL]: t('public~All scopes'),\n    cluster: t('public~Cluster'),\n    namespace: t('public~Namespace'),\n  };\n  const scopeSpacer = new Set<string>(['cluster']);\n\n  // filter by group, version, or text\n  const filteredResources = models.filter(({ kind, apiGroup, apiVersion, namespaced }) => {\n    if (groupFilter !== ALL && (apiGroup || '') !== groupFilter) {\n      return false;\n    }\n\n    if (versionFilter !== ALL && apiVersion !== versionFilter) {\n      return false;\n    }\n\n    if (scopeFilter === 'cluster' && namespaced) {\n      return false;\n    }\n\n    if (scopeFilter === 'namespace' && !namespaced) {\n      return false;\n    }\n\n    if (textFilter) {\n      return matchFn(textFilter, kind);\n    }\n\n    return true;\n  });\n\n  // Put models with no API group (core k8s resources) at the top.\n  const sortedResources = _.sortBy(filteredResources.toArray(), [\n    ({ apiGroup }) => apiGroup || '1',\n    'apiVersion',\n    'kind',\n  ]);\n\n  const updateURL = (k: string, v: string) => {\n    if (v === ALL) {\n      removeQueryArgument(k);\n    } else {\n      setQueryArgument(k, v);\n    }\n  };\n  const onGroupSelected = (group: string) => updateURL(GROUP_PARAM, group);\n  const onVersionSelected = (version: string) => updateURL(VERSION_PARAM, version);\n  const onScopeSelected = (scope: string) => updateURL(SCOPE_PARAM, scope);\n  const setTextFilter = (text: string) => {\n    if (!text) {\n      removeQueryArgument(TEXT_FILTER_PARAM);\n    } else {\n      setQueryArgument(TEXT_FILTER_PARAM, text);\n    }\n  };\n\n  const APIResourceHeader = () => [\n    {\n      title: t('public~Kind'),\n      sortField: 'kind',\n      transforms: [sortable],\n      props: { className: tableClasses[0] },\n    },\n    {\n      title: t('public~Group'),\n      sortField: 'apiGroup',\n      transforms: [sortable],\n      props: { className: tableClasses[1] },\n    },\n    {\n      title: t('public~Version'),\n      sortField: 'apiVersion',\n      transforms: [sortable],\n      props: { className: tableClasses[2] },\n    },\n    {\n      title: t('public~Namespaced'),\n      sortField: 'namespaced',\n      transforms: [sortable],\n      props: { className: tableClasses[3] },\n    },\n    {\n      title: t('public~Description'),\n      props: { className: tableClasses[4] },\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"co-m-pane__body co-m-pane__body--no-top-margin\">\n        <Toolbar className=\"co-toolbar-no-padding pf-m-toggle-group-container\">\n          <ToolbarContent>\n            <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n              <ToolbarItem>\n                <Dropdown\n                  autocompleteFilter={autocompleteGroups}\n                  items={groupOptions}\n                  onChange={onGroupSelected}\n                  selectedKey={groupFilter}\n                  spacerBefore={groupSpacer}\n                  title={groupOptions[groupFilter]}\n                  dropDownClassName=\"dropdown--full-width\"\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  items={versionOptions}\n                  onChange={onVersionSelected}\n                  selectedKey={versionFilter}\n                  spacerBefore={versionSpacer}\n                  title={versionOptions[versionFilter]}\n                  dropDownClassName=\"dropdown--full-width\"\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  items={scopeOptions}\n                  onChange={onScopeSelected}\n                  selectedKey={scopeFilter}\n                  spacerBefore={scopeSpacer}\n                  title={scopeOptions[scopeFilter]}\n                  dropDownClassName=\"dropdown--full-width\"\n                />\n              </ToolbarItem>\n            </ToolbarToggleGroup>\n            <ToolbarItem>\n              <TextFilter\n                value={textFilter}\n                label={t('public~by kind')}\n                onChange={(_event, value) => setTextFilter(value)}\n              />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n        <Table\n          EmptyMsg={EmptyAPIResourcesMsg}\n          Header={APIResourceHeader}\n          Rows={APIResourceRows}\n          aria-label={t('public~API resources')}\n          data={sortedResources}\n          loaded={!!models.size}\n          virtualize={false}\n        />\n      </div>\n    </>\n  );\n});\nAPIResourcesList.displayName = 'APIResourcesList';\n\nexport const APIExplorerPage: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  const title = t('public~API Explorer');\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading title={title} />\n      <APIResourcesList />\n    </>\n  );\n};\nAPIExplorerPage.displayName = 'APIExplorerPage';\n\nconst APIResourceDetails: React.FC<APIResourceTabProps> = ({ customData: { kindObj } }) => {\n  const { kind, apiGroup, apiVersion, namespaced, verbs, shortNames } = kindObj;\n  const description = getResourceDescription(kindObj);\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <dl className=\"co-m-pane__details\">\n        <dt>{t('public~Kind')}</dt>\n        <dd>{kind}</dd>\n        <dt>{t('public~API group')}</dt>\n        <dd className=\"co-select-to-copy\">{apiGroup || '-'}</dd>\n        <dt>{t('public~API version')}</dt>\n        <dd>{apiVersion}</dd>\n        <dt>{t('public~Namespaced')}</dt>\n        <dd>{namespaced ? t('public~true') : t('public~false')}</dd>\n        <dt>{t('public~Verbs')}</dt>\n        <dd>{verbs.join(', ')}</dd>\n        {shortNames && (\n          <>\n            <dt>\n              <Tooltip\n                content={t('public~Short names can be used to match this resource on the CLI.')}\n              >\n                <span>{t('public~Short names')}</span>\n              </Tooltip>\n            </dt>\n            <dd>{shortNames.join(', ')}</dd>\n          </>\n        )}\n        {description && (\n          <>\n            <dt>{t('public~Description')}</dt>\n            <dd className=\"co-break-word co-pre-wrap\">\n              <LinkifyExternal>{description}</LinkifyExternal>\n            </dd>\n          </>\n        )}\n      </dl>\n    </div>\n  );\n};\n\nconst scrollTop = () => (document.getElementById('content-scrollable').scrollTop = 0);\nconst APIResourceSchema: React.FC<APIResourceTabProps> = ({ customData: { kindObj } }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <ExploreType kindObj={kindObj} scrollTop={scrollTop} />\n    </div>\n  );\n};\n\nconst APIResourceInstances: React.FC<APIResourceTabProps> = ({\n  customData: { kindObj, namespace },\n}) => {\n  const resourceListPageExtensions = useExtensions<ResourceListPage>(isResourceListPage);\n  const dynamicResourceListPageExtensions = useExtensions<DynamicResourceListPage>(\n    isDynamicResourceListPage,\n  );\n  const componentLoader = getResourceListPages(\n    resourceListPageExtensions,\n    dynamicResourceListPageExtensions,\n  ).get(referenceForModel(kindObj), () => Promise.resolve(DefaultPage));\n  const ns = kindObj.namespaced ? namespace : undefined;\n\n  return (\n    <AsyncComponent\n      loader={componentLoader}\n      namespace={ns}\n      kind={kindObj.crd ? referenceForModel(kindObj) : kindObj.kind}\n      showTitle={false}\n      autoFocus={false}\n    />\n  );\n};\n\nconst Subject: React.FC<{ value: string }> = ({ value }) => {\n  const [first, ...rest] = value.split(':');\n  return first === 'system' && !_.isEmpty(rest) ? (\n    <>\n      <span className=\"text-muted\">{first}:</span>\n      {rest.join(':')}\n    </>\n  ) : (\n    <>{value}</>\n  );\n};\n\nconst EmptyAccessReviewMsg: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  return <EmptyBox label={t('public~Subjects')} />;\n};\n\nconst APIResourceAccessReview: React.FC<APIResourceTabProps> = ({\n  customData: { kindObj, namespace },\n}) => {\n  const { apiGroup, apiVersion, namespaced, plural, verbs } = kindObj;\n\n  // state\n  const [verb, setVerb] = React.useState(_.first(verbs));\n  const [filter, setFilter] = React.useState('');\n  const [showUsers, setShowUsers] = React.useState(true);\n  const [showGroups, setShowGroups] = React.useState(true);\n  const [showServiceAccounts, setShowServiceAccounts] = React.useState(false);\n  const [accessResponse, setAccessResponse] = React.useState<ResourceAccessReviewResponse>();\n  const [error, setError] = React.useState<APIError>();\n  const { t } = useTranslation();\n\n  // perform the access review\n  React.useEffect(() => {\n    setError(null);\n    const accessReviewModel = namespace\n      ? LocalResourceAccessReviewsModel\n      : ResourceAccessReviewsModel;\n    const req: ResourceAccessReviewRequest = {\n      apiVersion: apiVersionForModel(accessReviewModel),\n      kind: accessReviewModel.kind,\n      namespace,\n      resourceAPIVersion: apiVersion,\n      resourceAPIGroup: apiGroup,\n      resource: plural,\n      verb,\n    };\n    k8sCreate(accessReviewModel, req, { ns: namespace }).then(setAccessResponse).catch(setError);\n  }, [apiGroup, apiVersion, plural, namespace, verb]);\n\n  if (error) {\n    return <LoadError label={t('public~Access review')}>{error.message}</LoadError>;\n  }\n\n  if (!accessResponse) {\n    return <LoadingBox />;\n  }\n\n  // break into users, groups, and service accounts\n  const users = [];\n  const serviceAccounts = [];\n  _.each(accessResponse.users, (name: string) => {\n    if (name.startsWith('system:serviceaccount:')) {\n      serviceAccounts.push({ name, type: 'ServiceAccount' });\n    } else {\n      users.push({ name, type: 'User' });\n    }\n  });\n  const groups = _.map(accessResponse.groups, (name: string) => ({ name, type: 'Group' }));\n\n  // filter and sort\n  const verbOptions = _.zipObject(verbs, verbs);\n  const data = [\n    ...(showUsers ? users : []),\n    ...(showGroups ? groups : []),\n    ...(showServiceAccounts ? serviceAccounts : []),\n  ];\n  const allSelected = showUsers && showGroups && showServiceAccounts;\n  const itemCount = accessResponse.users.length + accessResponse.groups.length;\n  const selectedCount = data.length;\n  const filteredData = data.filter(({ name }: { name: string }) => fuzzy(filter, name));\n  const sortedData = _.orderBy(filteredData, ['type', 'name'], ['asc', 'asc']);\n  const AccessTableHeader = () => [\n    {\n      title: t('public~Subject'),\n      sortField: 'name',\n      transforms: [sortable],\n    },\n    {\n      title: t('public~Type'),\n      sortField: 'type',\n      transforms: [sortable],\n    },\n  ];\n\n  const getSubjectTypeLabel = (type: string) => {\n    switch (type) {\n      case 'User':\n        return t('public~User');\n      case 'Group':\n        return t('public~Group');\n      case 'ServiceAccount':\n        return t('public~ServiceAccount');\n      default:\n        return type;\n    }\n  };\n\n  const AccessTableRows = () =>\n    _.map(data, (subject) => [\n      {\n        title: (\n          <span className=\"co-break-word co-select-to-copy\">\n            <Subject value={subject.name} />\n          </span>\n        ),\n      },\n      {\n        title: getSubjectTypeLabel(subject.type),\n      },\n    ]);\n\n  // event handlers\n  const toggleShowUsers = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    setShowUsers(!showUsers);\n  };\n  const toggleShowGroups = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    setShowGroups(!showGroups);\n  };\n  const toggleShowServiceAccounts = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    setShowServiceAccounts(!showServiceAccounts);\n  };\n  const onSelectAll = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setShowUsers(true);\n    setShowGroups(true);\n    setShowServiceAccounts(true);\n  };\n\n  return (\n    <>\n      <div className=\"co-m-pane__filter-bar\">\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Dropdown\n            items={verbOptions}\n            onChange={(v: K8sVerb) => setVerb(v)}\n            selectedKey={verb}\n            titlePrefix={t('public~Verb')}\n          />\n        </div>\n        <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n          <TextFilter\n            defaultValue={filter}\n            label={t('public~by subject')}\n            onChange={(_event, val) => setFilter(val)}\n          />\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <CheckBoxControls\n          allSelected={allSelected}\n          itemCount={itemCount}\n          selectedCount={selectedCount}\n          onSelectAll={onSelectAll}\n        >\n          <CheckBox\n            title={t('public~User')}\n            active={showUsers}\n            number={users.length}\n            toggle={toggleShowUsers}\n          />\n          <CheckBox\n            title={t('public~Group')}\n            active={showGroups}\n            number={groups.length}\n            toggle={toggleShowGroups}\n          />\n          <CheckBox\n            title={t('public~ServiceAccount')}\n            active={showServiceAccounts}\n            number={serviceAccounts.length}\n            toggle={toggleShowServiceAccounts}\n          />\n        </CheckBoxControls>\n        <p className=\"co-m-pane__explanation\">\n          {namespaced &&\n            namespace &&\n            t(\n              'public~The following subjects can {{verb}} {{plural}} in namespace {{ namespace }}',\n              { verb, plural, namespace },\n            )}\n          {namespaced &&\n            !namespace &&\n            t('public~The following subjects can {{verb}} {{plural}} in all namespaces', {\n              verb,\n              plural,\n            })}\n          {!namespaced &&\n            t('public~The following subjects can {{verb}} {{plural}} at the cluster scope', {\n              verb,\n              plural,\n            })}\n        </p>\n        <Table\n          EmptyMsg={EmptyAccessReviewMsg}\n          Header={AccessTableHeader}\n          Rows={AccessTableRows}\n          aria-label={t('public~API resources')}\n          data={sortedData}\n          loaded\n          virtualize={false}\n        />\n      </div>\n    </>\n  );\n};\n\nconst APIResourcePage_ = (props) => {\n  const params = useParams();\n  const location = useLocation();\n\n  const kind: string = props.kind || params?.plural;\n  const kindObj = getK8sModel(props.k8s, kind);\n  const kindsInFlight = props.k8s.getIn(['RESOURCES', 'inFlight']);\n\n  const namespace = kindObj?.namespaced ? params.ns : undefined;\n  const { t } = useTranslation();\n\n  const canCreateResourceAccessReview = useAccessReview({\n    group: namespace\n      ? LocalResourceAccessReviewsModel.apiGroup\n      : ResourceAccessReviewsModel.apiGroup,\n    resource: namespace\n      ? LocalResourceAccessReviewsModel.plural\n      : ResourceAccessReviewsModel.plural,\n    namespace,\n    verb: 'create',\n  });\n\n  if (!kindObj) {\n    return kindsInFlight ? (\n      <LoadingBox />\n    ) : (\n      <div className=\"co-m-pane__body\">\n        <PageHeading title={t('public~404: Not found')} centerText />\n      </div>\n    );\n  }\n\n  const breadcrumbs = [\n    {\n      name: t('public~Explore'),\n      path: '/api-explorer',\n    },\n    {\n      name: t('public~Resource details'),\n      path: location.pathname,\n    },\n  ];\n\n  const pages: Page[] = [\n    {\n      href: '',\n      // t('public~Details')\n      nameKey: 'public~Details',\n      component: APIResourceDetails,\n    },\n    {\n      href: 'schema',\n      // t('public~Schema')\n      nameKey: 'public~Schema',\n      component: APIResourceSchema,\n    },\n  ];\n\n  if (_.isEmpty(kindObj.verbs) || kindObj.verbs.includes('list')) {\n    pages.push({\n      href: 'instances',\n      // t('public~Instances')\n      nameKey: 'public~Instances',\n      component: APIResourceInstances,\n    });\n  }\n\n  if (props.flags[FLAGS.OPENSHIFT] && canCreateResourceAccessReview) {\n    pages.push({\n      href: 'access',\n      // t('public~Access review')\n      nameKey: 'public~Access review',\n      component: APIResourceAccessReview,\n    });\n  }\n\n  const titleProviderValues = {\n    telemetryPrefix: kindObj?.kind,\n    titlePrefix: getTitleForNodeKind(kindObj?.kind),\n  };\n\n  return (\n    <>\n      <PageTitleContext.Provider value={titleProviderValues}>\n        <ScrollToTopOnMount />\n        <PageHeading\n          title={<div data-test-id=\"api-explorer-resource-title\">{kindObj.label}</div>}\n          breadcrumbs={breadcrumbs}\n          detail\n        />\n        <HorizontalNav pages={pages} customData={{ kindObj, namespace }} noStatusBox />\n      </PageTitleContext.Provider>\n    </>\n  );\n};\n\nconst k8StateToProps = ({ k8s }) => ({\n  k8s,\n});\n\nexport const APIResourcePage = connect(k8StateToProps)(\n  connectToFlags(FLAGS.OPENSHIFT)(APIResourcePage_),\n);\n\ntype APIResourceLinkStateProps = {\n  activeNamespace: string;\n};\n\ntype APIResourcesListPropsFromState = {\n  models: ImmutableMap<K8sResourceKindReference, K8sKind>;\n};\n\ntype APIResourceLinkOwnProps = {\n  model: K8sKind;\n};\n\ntype APIResourceTabProps = {\n  customData: {\n    kindObj: K8sKind;\n    namespace?: string;\n  };\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Breadcrumb, BreadcrumbItem, Button, TextContent } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { CamelCaseWrap } from '@console/dynamic-plugin-sdk';\nimport {\n  getDefinitionKey,\n  getSwaggerPath,\n  K8sKind,\n  SwaggerDefinition,\n  SwaggerDefinitions,\n  fetchSwagger,\n} from '../../module/k8s';\nimport { EmptyBox, LinkifyExternal } from '../utils';\n\nconst getRef = (definition: SwaggerDefinition): string => {\n  const ref = definition.$ref || _.get(definition, 'items.$ref');\n  const re = /^#\\/definitions\\//;\n  // Only follow JSON pointers, not external URI references.\n  return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n\nexport const ExploreType: React.FC<ExploreTypeProps> = (props) => {\n  // Track the previously selected items to build breadcrumbs. Each history\n  // entry contains the name, description, and path to the definition in the\n  // OpenAPI document.\n  const [drilldownHistory, setDrilldownHistory] = React.useState([]);\n  const { kindObj, schema } = props;\n  const { t } = useTranslation();\n  const [allDefinitions, setAllDefinitions] = React.useState<SwaggerDefinitions>(null);\n\n  React.useEffect(() => {\n    if (kindObj) {\n      fetchSwagger()\n        .then((response) => {\n          setAllDefinitions(response);\n        })\n        .catch((err) => {\n          // eslint-disable-next-line no-console\n          console.error('Could not fetch swagger definitions', err);\n        });\n    } else if (schema) {\n      setAllDefinitions({ 'custom-schema': schema });\n    }\n  }, [kindObj, schema]);\n\n  if (!kindObj && !schema) {\n    return null;\n  }\n\n  if (!allDefinitions) {\n    return null;\n  }\n  const currentSelection = _.last(drilldownHistory);\n  // Show the current selected property or the top-level definition for the kind.\n  const currentPath = currentSelection\n    ? currentSelection.path\n    : [kindObj ? getDefinitionKey(kindObj, allDefinitions) : 'custom-schema'];\n  const currentDefinition: SwaggerDefinition = _.get(allDefinitions, currentPath);\n  const currentProperties =\n    currentDefinition?.properties ||\n    currentDefinition?.items?.properties ||\n    currentDefinition?.definitions;\n\n  // Prefer the description saved in `currentSelection`. It won't always be defined in the definition itself.\n  const description = currentSelection\n    ? currentSelection?.description\n    : currentDefinition?.description;\n  const required = new Set(currentDefinition?.required || []);\n  const kindLabel = kindObj?.labelKey ? t(kindObj.labelKey) : kindObj?.kind;\n  const breadcrumbs = drilldownHistory.length\n    ? [kindObj ? kindLabel : t('public~Schema'), ..._.map(drilldownHistory, 'name')]\n    : [];\n\n  const drilldown = (\n    e: React.MouseEvent<HTMLButtonElement>,\n    name: string,\n    desc: string,\n    path: string[],\n  ) => {\n    e.preventDefault();\n    setDrilldownHistory([...drilldownHistory, { name, description: desc, path }]);\n    if (props.scrollTop) {\n      props.scrollTop();\n    }\n  };\n\n  const breadcrumbClicked = (e: React.MouseEvent<HTMLButtonElement>, i: number) => {\n    e.preventDefault();\n    setDrilldownHistory(_.take(drilldownHistory, i));\n  };\n\n  // Get the path in the swagger document to additional property details for drilldown.\n  // This can be\n  // - A reference to another top-level definition\n  // - Inline property declartions\n  // - Inline property declartions for array items\n  const getDrilldownPath = (name: string): string[] => {\n    const path = kindObj\n      ? currentDefinition.items\n        ? getSwaggerPath(allDefinitions, [...currentPath, 'items'], name, true)\n        : getSwaggerPath(allDefinitions, currentPath, name, true)\n      : [...currentPath, 'properties', name];\n\n    // Only allow drilldown if the reference has additional properties to explore.\n    const child = _.get(allDefinitions, path) as SwaggerDefinition;\n    return _.has(child, 'properties') || _.has(child, 'items.properties') ? path : null;\n  };\n\n  // Get the type to display for a property reference.\n  const getTypeForRef = (ref: string): string =>\n    _.get(allDefinitions, [ref, 'format']) || _.get(allDefinitions, [ref, 'type']);\n\n  return (\n    <>\n      {!_.isEmpty(breadcrumbs) && (\n        <Breadcrumb className=\"co-breadcrumb co-break-word\">\n          {breadcrumbs.map((crumb, i) => {\n            const isLast = i === breadcrumbs.length - 1;\n            return (\n              <BreadcrumbItem key={i} isActive={isLast}>\n                {isLast ? (\n                  crumb\n                ) : (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => breadcrumbClicked(e, i)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    {crumb}\n                  </Button>\n                )}\n              </BreadcrumbItem>\n            );\n          })}\n        </Breadcrumb>\n      )}\n      <TextContent>\n        {description && (\n          <p className=\"co-break-word co-pre-wrap\">\n            <LinkifyExternal>{description}</LinkifyExternal>\n          </p>\n        )}\n        {_.isEmpty(currentProperties) ? (\n          <EmptyBox label={t('public~Properties')} />\n        ) : (\n          <ul className=\"co-resource-sidebar-list pf-v5-c-list\">\n            {_.map(currentProperties, (definition: SwaggerDefinition, name: string) => {\n              const path = getDrilldownPath(name);\n              const definitionType = definition.type || getTypeForRef(getRef(definition));\n              const definitionTypeStr = Array.isArray(definitionType)\n                ? definitionType.join(' ')\n                : definitionType;\n\n              return (\n                <li key={name} className=\"co-resource-sidebar-item\">\n                  <h5 className=\"co-resource-sidebar-item__header co-break-word\">\n                    <CamelCaseWrap value={name} />\n                    &nbsp;\n                    <small>\n                      <span className=\"co-break-word\">{definitionTypeStr}</span>\n                      {required.has(name) && <> &ndash; required</>}\n                    </small>\n                  </h5>\n                  {definition.description && (\n                    <p className=\"co-break-word co-pre-wrap\">\n                      <LinkifyExternal>{definition.description}</LinkifyExternal>\n                    </p>\n                  )}\n                  {path && (\n                    <Button\n                      type=\"button\"\n                      onClick={(e) => drilldown(e, name, definition.description, path)}\n                      isInline\n                      variant=\"link\"\n                    >\n                      {t('public~View details')}\n                    </Button>\n                  )}\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </TextContent>\n    </>\n  );\n};\n\ntype ExploreTypeProps = {\n  kindObj: K8sKind;\n  schema?: any;\n  scrollTop?: () => void;\n};\n"],"sourceRoot":""}