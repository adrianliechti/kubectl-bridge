{"version":3,"sources":["webpack:///./public/components/cluster-settings/htpasswd-idp-form.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/idp-name-input.tsx"],"names":["DroppableFileInput","props","loader","then","c","AddHTPasswdPage","navigate","inProgress","setInProgress","errorMessage","setErrorMessage","name","setName","htpasswdFileContent","setHtpasswdFileContent","t","handlePromise","promise","res","thenPromise","error","err","message","Promise","reject","catchError","addHTPasswdIDP","oauth","secretName","dryRun","idp","type","mappingMethod","htpasswd","fileData","title","className","helpText","onSubmit","e","preventDefault","secret","apiVersion","kind","metadata","generateName","namespace","stringData","createHTPasswdSecret","catch","value","onChange","currentTarget","inputFileData","id","label","inputFieldHelpText","isRequired","hideContents","variant","onClick","getOAuthResource","addIDP","patch","spec","identityProviders","op","path","queryParams","redirectToOAuthPage","mockNames","ca","IDPNameInput","htmlFor","required"],"mappings":"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","file":"htpasswd-idp-form-chunk-e5d04cd42842f316139d.min.js","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { AsyncComponent, ButtonBar, PageHeading } from '../utils';\nimport { addIDP, getOAuthResource as getOAuth, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\n\nexport const DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const AddHTPasswdPage = () => {\n  const navigate = useNavigate();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [name, setName] = React.useState('htpasswd');\n  const [htpasswdFileContent, setHtpasswdFileContent] = React.useState('');\n\n  const { t } = useTranslation();\n\n  const thenPromise = (res) => {\n    setInProgress(false);\n    setErrorMessage('');\n    return res;\n  };\n\n  const catchError = (error) => {\n    const err = error.message || t('public~An error occurred. Please try again.');\n    setInProgress(false);\n    setErrorMessage(err);\n    return Promise.reject(err);\n  };\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n\n    return promise.then(\n      (res) => thenPromise(res),\n      (error) => catchError(error),\n    );\n  };\n\n  const getOAuthResource = () => {\n    return handlePromise(getOAuth());\n  };\n\n  const createHTPasswdSecret = () => {\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'htpasswd-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        htpasswd: htpasswdFileContent,\n      },\n    };\n\n    return handlePromise(k8sCreate(SecretModel, secret));\n  };\n\n  const addHTPasswdIDP = (oauth: OAuthKind, secretName: string, dryRun?: boolean) => {\n    const idp: IdentityProvider = {\n      name,\n      type: 'HTPasswd',\n      mappingMethod: 'claim',\n      htpasswd: {\n        fileData: {\n          name: secretName,\n        },\n      },\n    };\n\n    return handlePromise(addIDP(oauth, idp, dryRun));\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    if (!htpasswdFileContent) {\n      setErrorMessage(t('public~You must specify an HTPasswd file.'));\n      return;\n    }\n\n    // Clear any previous errors.\n    setErrorMessage('');\n    getOAuthResource().then((oauth: OAuthKind) => {\n      addHTPasswdIDP(oauth, mockNames.secret, true)\n        .then(() => {\n          return createHTPasswdSecret()\n            .then((secret: K8sResourceKind) => addHTPasswdIDP(oauth, secret.metadata.name))\n            .then(() => {\n              redirectToOAuthPage(navigate);\n            });\n        })\n        .catch((err) => {\n          setErrorMessage(err);\n        });\n    });\n  };\n\n  const title = t('public~Add Identity Provider: HTPasswd');\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading\n        title={title}\n        helpText={t(\n          'public~HTPasswd validates usernames and passwords against a flat file generated using the htpasswd command.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={submit} name=\"form\" className=\"co-m-pane__body-group\">\n          <IDPNameInput value={name} onChange={(e) => setName(e.currentTarget.value)} />\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={(c: string) => setHtpasswdFileContent(c)}\n              inputFileData={htpasswdFileContent}\n              id=\"htpasswd-file\"\n              label={t('public~HTPasswd file')}\n              inputFieldHelpText={t(\n                'public~Upload an HTPasswd file created using the htpasswd command.',\n              )}\n              isRequired\n              hideContents\n            />\n          </div>\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\">\n                {t('public~Add')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport type AddHTPasswdPageState = {\n  name: string;\n  htpasswdFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { resourcePathFromModel } from '../utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? { queryParams: { dryRun: 'All' } } : {});\n};\n\nexport const redirectToOAuthPage = (navigate) => {\n  const path = `${resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME)}?idpAdded=true`;\n  navigate(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n        {t('public~Name')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        onChange={onChange}\n        value={value}\n        aria-describedby=\"idp-name-help\"\n        id=\"idp-name\"\n        required\n      />\n      <p className=\"help-block\" id=\"idp-name-help\">\n        {t('public~Unique name of the new identity provider. This cannot be changed later.')}\n      </p>\n    </div>\n  );\n};\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n"],"sourceRoot":""}