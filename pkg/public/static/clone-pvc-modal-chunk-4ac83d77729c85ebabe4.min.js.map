{"version":3,"sources":["webpack:///./public/components/storage-class.tsx","webpack:///./packages/console-app/src/components/modals/clone/clone-pvc-modal.tsx","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./public/components/storage/shared.ts","webpack:///./packages/console-app/src/components/access-modes/access-mode.tsx","webpack:///./public/components/utils/storage-class-dropdown.tsx"],"names":["StorageClassReference","common","factory","menuActions","getExtensionsActionsForKind","isDefaultClass","storageClass","annotations","tableColumnClasses","columnClass","StorageClassDetails","obj","t","className","text","resource","label","path","StorageClassTableRow","kind","name","metadata","provisioner","reclaimPolicy","actions","StorageClassList","props","Header","title","sortField","transforms","Row","virtualize","displayName","StorageClassPage","ListComponent","canCreate","filterLabel","createProps","to","createButtonText","StorageClassDetailsPage","pages","details","editYaml","ClonePVCModal","close","cancel","handlePromise","errorMessage","inProgress","pvcName","namespace","baseValue","defaultSize","split","string","pvcRequestedSize","clonePVCName","setClonePVCName","requestedSize","setRequestedSize","cloneAccessMode","setCloneAccessMode","spec","accessModes","requestedUnit","setRequestedUnit","validSize","setValidSize","pvcAccessMode","pvcSC","setPVCStorageClass","updatedProvisioner","setUpdatedProvisioner","scResource","scResourceLoaded","scResourceLoadError","storageClassName","pvcUsedCapacityQuery","response","error","loading","endpoint","QUERY","query","pvcUsedCapacityQueryResult","pvcUsedCapacity","onSubmit","event","preventDefault","pvcCloneObj","apiVersion","dataSource","apiGroup","resources","requests","storage","volumeMode","cloneResource","push","isRequired","fieldId","type","value","onChange","_event","pvcResource","loaded","loadError","filterByVolumeMode","testID","unit","cloneSizeInBytes","pvcSizeInBytes","defaultRequestSizeUnit","defaultRequestSizeValue","dropdownUnits","isInputDisabled","required","variant","icon","updatedStorageClass","filter","scObj","id","selectedKey","join","submitDisabled","submitText","useK8sGet","opts","data","setData","setLoaded","setLoadError","snapshotPVCStorageClassAnnotation","snapshotPVCAccessModeAnnotation","snapshotPVCVolumeModeAnnotation","initialAccessModes","initialVolumeModes","provisionerAccessModeMapping","Object","freeze","Filesystem","Block","partialMatch","getAccessModeOptions","getVolumeModeRadios","i","Ki","Mi","Gi","Ti","Pi","Ei","getProvisionerModeMapping","key","includes","getAccessModeForProvisioner","ignoreReadOnly","modeMapping","keys","map","mode","flat","Set","modes","getVolumeModeForProvisioner","accessMode","getPVCAccessModes","res","find","AccessModeSelector","availableAccessModes","description","pvcInitialAccessMode","allowedAccessModes","setAllowedAccessModes","setAccessMode","changeAccessMode","isOpen","setIsOpen","selected","setSelected","onToggleClick","selectOptions","option","disabled","val","isDisabled","isSelected","onSelect","onOpenChange","open","toggle","toggleRef","ref","onClick","isExpanded","style","width","shouldFocusToggleOnSelect","StorageClassDropdownInnerWithTranslation","state","items","this","defaultClass","autocompleteFilter","item","getTitle","kindLabel","setState","UNSAFE_componentWillReceiveProps","nextProps","desc","unorderedItems","noStorageClass","StorageClass","default","parameters","zone","sc","reduce","acc","selectedItem","sort","forEach","nextState","describedBy","noSelection","StorageClassDropdownEntry","StorageClassDropdownNoStorageClassOption","itemsAvailableToShow","hideClassName","htmlFor","dropDownClassName","autocompletePlaceholder","dataTest","menuClassName","StorageClassDropdownInner","StorageClassDropdown","prop","isList","storageClassProperties","storageClassDescriptionLine"],"mappings":"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","file":"clone-pvc-modal-chunk-4ac83d77729c85ebabe4.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport * as classNames from 'classnames';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport {\n  DetailsItem,\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  detailsPage,\n  navFactory,\n} from './utils';\nimport { StorageClassResourceKind, K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { StorageClassModel } from '../models';\n\nexport const StorageClassReference: K8sResourceKindReference = 'StorageClass';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(StorageClassModel), ...common];\n\nconst defaultClassAnnotation = 'storageclass.kubernetes.io/is-default-class';\nconst betaDefaultStorageClassAnnotation = 'storageclass.beta.kubernetes.io/is-default-class';\nexport const isDefaultClass = (storageClass: K8sResourceKind) => {\n  const annotations = _.get(storageClass, 'metadata.annotations') || {};\n  return (\n    annotations[defaultClassAnnotation] === 'true' ||\n    annotations[betaDefaultStorageClassAnnotation] === 'true'\n  );\n};\n\nconst tableColumnClasses = [\n  'pf-v5-u-w-42-on-md',\n  'pf-v5-u-w-42-on-md',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-16-on-md',\n  Kebab.columnClass,\n];\n\nconst StorageClassDetails: React.FC<StorageClassDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~StorageClass details')} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj}>\n              <DetailsItem label={t('public~Provisioner')} obj={obj} path=\"provisioner\" />\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <DetailsItem label={t('public~Reclaim policy')} obj={obj} path=\"reclaimPolicy\" />\n              <dt>{t('public~Default class')}</dt>\n              <dd>{isDefaultClass(obj) ? t('public~True') : t('public~False')}</dd>\n              <DetailsItem\n                label={t('public~Volume binding mode')}\n                obj={obj}\n                path=\"volumeBindingMode\"\n              />\n            </dl>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst StorageClassTableRow: React.FC<RowFunctionArgs<StorageClassResourceKind>> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink kind={StorageClassReference} name={obj.metadata.name}>\n          {isDefaultClass(obj) && (\n            <span className=\"small text-muted co-resource-item__help-text\">\n              &ndash; {t('public~Default')}\n            </span>\n          )}\n        </ResourceLink>\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        {obj.provisioner}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{obj.reclaimPolicy || '-'}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={StorageClassReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const StorageClassList: React.FC = (props) => {\n  const { t } = useTranslation();\n  const StorageClassTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Provisioner'),\n        sortField: 'provisioner',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Reclaim policy'),\n        sortField: 'reclaimPolicy',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~StorageClasses')}\n      Header={StorageClassTableHeader}\n      Row={StorageClassTableRow}\n      virtualize\n    />\n  );\n};\nStorageClassList.displayName = 'StorageClassList';\n\nexport const StorageClassPage: React.FC<StorageClassPageProps> = (props) => {\n  const createProps = {\n    to: '/k8s/cluster/storageclasses/~new/form',\n  };\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {..._.omit(props, 'mock')}\n      title={t('public~StorageClasses')}\n      kind={StorageClassReference}\n      ListComponent={StorageClassList}\n      canCreate={true}\n      filterLabel={props.filterLabel}\n      createProps={createProps}\n      createButtonText={t('public~Create StorageClass')}\n    />\n  );\n};\nexport const StorageClassDetailsPage: React.FC = (props) => {\n  const pages = [navFactory.details(detailsPage(StorageClassDetails)), navFactory.editYaml()];\n  return (\n    <DetailsPage {...props} kind={StorageClassReference} menuActions={menuActions} pages={pages} />\n  );\n};\nStorageClassDetailsPage.displayName = 'StorageClassDetailsPage';\n\nexport type StorageClassDetailsProps = {\n  obj: any;\n};\n\nexport type StorageClassPageProps = {\n  filterLabel: string;\n  namespace: string;\n};\n","import * as React from 'react';\nimport {\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  TextInput,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '@console/internal/components/factory';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { usePrometheusPoll } from '@console/internal/components/graphs/prometheus-poll-hook';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { dropdownUnits } from '@console/internal/components/storage/shared';\nimport {\n  LoadingInline,\n  ResourceIcon,\n  humanizeBinaryBytes,\n  history,\n  withHandlePromise,\n  RequestSizeInput,\n  validate,\n  resourceObjPath,\n  convertToBaseValue,\n  humanizeBinaryBytesWithoutB,\n} from '@console/internal/components/utils';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { HandlePromiseProps } from '@console/internal/components/utils/promise-component';\nimport { StorageClassDropdown } from '@console/internal/components/utils/storage-class-dropdown';\nimport {\n  NamespaceModel,\n  PersistentVolumeClaimModel,\n  StorageClassModel,\n} from '@console/internal/models';\nimport {\n  k8sCreate,\n  referenceFor,\n  PersistentVolumeClaimKind,\n  StorageClassResourceKind,\n} from '@console/internal/module/k8s';\nimport { RedExclamationCircleIcon, isCephProvisioner } from '@console/shared';\nimport { getName, getRequestedPVCSize, onlyPvcSCs } from '@console/shared/src/selectors';\nimport { getPVCAccessModes, AccessModeSelector } from '../../access-modes/access-mode';\n\nimport './_clone-pvc-modal.scss';\n\nconst ClonePVCModal = withHandlePromise((props: ClonePVCModalProps) => {\n  const { t } = useTranslation();\n  const { close, cancel, resource, handlePromise, errorMessage, inProgress } = props;\n  const { name: pvcName, namespace } = resource?.metadata;\n  const baseValue = convertToBaseValue(getRequestedPVCSize(resource));\n  const defaultSize: string[] = validate.split(humanizeBinaryBytesWithoutB(baseValue).string);\n  const pvcRequestedSize = humanizeBinaryBytes(baseValue).string;\n\n  const [clonePVCName, setClonePVCName] = React.useState(`${pvcName}-clone`);\n  const [requestedSize, setRequestedSize] = React.useState(defaultSize[0] || '');\n  const [cloneAccessMode, setCloneAccessMode] = React.useState(resource?.spec?.accessModes?.[0]);\n  const [requestedUnit, setRequestedUnit] = React.useState(defaultSize[1] || 'Ti');\n  const [validSize, setValidSize] = React.useState(true);\n  const pvcAccessMode = getPVCAccessModes(resource, 'title');\n  const [pvcSC, setPVCStorageClass] = React.useState('');\n  const [updatedProvisioner, setUpdatedProvisioner] = React.useState('');\n  const handleStorageClass = (updatedStorageClass: StorageClassResourceKind) => {\n    setPVCStorageClass(getName(updatedStorageClass) || '');\n    setUpdatedProvisioner(updatedStorageClass?.provisioner);\n  };\n\n  const [scResource, scResourceLoaded, scResourceLoadError] = useK8sGet<StorageClassResourceKind>(\n    StorageClassModel,\n    resource?.spec?.storageClassName,\n  );\n\n  const pvcUsedCapacityQuery: string = `kubelet_volume_stats_used_bytes{persistentvolumeclaim='${pvcName}'}`;\n  const [response, error, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    query: pvcUsedCapacityQuery,\n    namespace,\n  });\n  const pvcUsedCapacityQueryResult: DataPoint[] = getInstantVectorStats(\n    response,\n    null,\n    humanizeBinaryBytes,\n  );\n  const pvcUsedCapacity = pvcUsedCapacityQueryResult?.[0]?.label || '-';\n  const requestedSizeInputChange = ({ value, unit }) => {\n    setRequestedSize(value);\n    setRequestedUnit(unit);\n    const cloneSizeInBytes = convertToBaseValue(value + unit);\n    const pvcSizeInBytes = convertToBaseValue(getRequestedPVCSize(resource));\n    const isValid = cloneSizeInBytes >= pvcSizeInBytes;\n    setValidSize(isValid);\n  };\n\n  const submit = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n\n    const pvcCloneObj: PersistentVolumeClaimKind = {\n      apiVersion: PersistentVolumeClaimModel.apiVersion,\n      kind: PersistentVolumeClaimModel.kind,\n      metadata: {\n        name: clonePVCName,\n        namespace: resource.metadata.namespace,\n      },\n      spec: {\n        storageClassName: pvcSC,\n        dataSource: {\n          name: pvcName,\n          kind: PersistentVolumeClaimModel.kind,\n          apiGroup: '',\n        },\n        resources: {\n          requests: {\n            storage: `${requestedSize}${requestedUnit}`,\n          },\n        },\n        volumeMode: resource.spec.volumeMode,\n        accessModes: [cloneAccessMode],\n      },\n    };\n\n    return handlePromise(k8sCreate(PersistentVolumeClaimModel, pvcCloneObj), (cloneResource) => {\n      close();\n      history.push(resourceObjPath(cloneResource, referenceFor(cloneResource)));\n    });\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{t('console-app~Clone')}</ModalTitle>\n      <ModalBody>\n        <FormGroup\n          label={t('console-app~Name')}\n          isRequired\n          fieldId=\"clone-pvc-modal__name\"\n          className=\"co-clone-pvc-modal__form--space\"\n        >\n          <TextInput\n            type=\"text\"\n            className=\"co-clone-pvc-modal__name--margin\"\n            data-test=\"pvc-name\"\n            value={clonePVCName}\n            onChange={(_event, value) => setClonePVCName(value)}\n            aria-label={t('console-app~Clone PVC')}\n          />\n        </FormGroup>\n        <AccessModeSelector\n          onChange={setCloneAccessMode}\n          className=\"co-clone-pvc-modal__form--space\"\n          pvcResource={resource}\n          provisioner={updatedProvisioner}\n          loaded={scResourceLoaded}\n          loadError={scResourceLoadError}\n          filterByVolumeMode\n        />\n        <FormGroup\n          label={t('console-app~Size')}\n          isRequired\n          fieldId=\"clone-pvc-modal__size\"\n          className=\"co-clone-pvc-modal__form--space\"\n        >\n          {scResourceLoaded ? (\n            <RequestSizeInput\n              name=\"requestSize\"\n              testID=\"input-request-size\"\n              onChange={requestedSizeInputChange}\n              defaultRequestSizeUnit={requestedUnit}\n              defaultRequestSizeValue={requestedSize}\n              dropdownUnits={dropdownUnits}\n              isInputDisabled={scResourceLoadError || isCephProvisioner(scResource?.provisioner)}\n              required\n            />\n          ) : (\n            <div className=\"skeleton-text\" />\n          )}\n\n          {!validSize && (\n            <FormHelperText>\n              <HelperText>\n                <HelperTextItem variant=\"error\" icon={<RedExclamationCircleIcon />}>\n                  {t('console-app~Size should be equal or greater than the requested size of PVC.')}\n                </HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n        <FormGroup\n          fieldId=\"clone-pvc-modal__storage-class\"\n          className=\"co-clone-pvc-modal__form--space\"\n        >\n          {!scResourceLoaded ? (\n            <div className=\"skeleton-text\" />\n          ) : (\n            <StorageClassDropdown\n              onChange={handleStorageClass}\n              filter={(scObj: StorageClassResourceKind) =>\n                onlyPvcSCs(scObj, scResourceLoadError, scResource)\n              }\n              id=\"clone-storage-class\"\n              data-test=\"storage-class-dropdown\"\n              required\n              selectedKey={getName(scResource)}\n            />\n          )}\n        </FormGroup>\n        <div className=\"co-clone-pvc-modal__details\">\n          <p className=\"text-muted\">{t('console-app~PVC details')}</p>\n          <div className=\"co-clone-pvc-modal__details-section\">\n            <div>\n              <div>\n                <p className=\"co-clone-pvc-modal__pvc-details\">{t('console-app~Namespace')}</p>\n                <p>\n                  <ResourceIcon kind={NamespaceModel.kind} />\n                  {resource.metadata.namespace}\n                </p>\n              </div>\n              <div>\n                <p className=\"co-clone-pvc-modal__pvc-details\">{t('console-app~StorageClass')}</p>\n                <p>\n                  <ResourceIcon kind={StorageClassModel.kind} />\n                  {pvcSC || '-'}\n                </p>\n              </div>\n            </div>\n            <div>\n              <div>\n                <p className=\"co-clone-pvc-modal__pvc-details\">\n                  {t('console-app~Requested capacity')}\n                </p>\n                <p>{pvcRequestedSize}</p>\n              </div>\n              <div>\n                <p className=\"co-clone-pvc-modal__pvc-details\">{t('console-app~Used capacity')}</p>\n                <div>\n                  {!loading && !error && pvcUsedCapacity}\n                  {loading && <LoadingInline />}\n                  {!loading && error && '-'}\n                </div>\n              </div>\n            </div>\n            <div>\n              <div>\n                <p className=\"co-clone-pvc-modal__pvc-details\">{t('console-app~Access mode')}</p>\n                <p>{pvcAccessMode.join(', ') || '-'}</p>\n              </div>\n              <div>\n                <p className=\"co-clone-pvc-modal__pvc-details\">{t('console-app~Volume mode')}</p>\n                <p>{resource.spec.volumeMode}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={inProgress}\n        submitDisabled={!validSize || !pvcSC}\n        errorMessage={errorMessage}\n        submitText={t('console-app~Clone')}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport type ClonePVCModalProps = {\n  resource?: PersistentVolumeClaimKind;\n} & HandlePromiseProps &\n  ModalComponentProps;\n\nexport default createModalLauncher(ClonePVCModal);\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\n\nexport const cephRBDProvisionerSuffix = 'rbd.csi.ceph.com';\n\nexport const snapshotPVCStorageClassAnnotation = 'snapshot.storage.kubernetes.io/pvc-storage-class';\nexport const snapshotPVCAccessModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-access-modes';\nexport const snapshotPVCVolumeModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-volume-mode';\n\ntype AccessMode = 'ReadWriteOnce' | 'ReadWriteMany' | 'ReadOnlyMany' | 'ReadWriteOncePod';\ntype VolumeMode = 'Filesystem' | 'Block';\n\nexport const initialAccessModes: AccessMode[] = [\n  'ReadWriteOnce',\n  'ReadWriteMany',\n  'ReadOnlyMany',\n  'ReadWriteOncePod',\n];\nexport const initialVolumeModes: VolumeMode[] = ['Filesystem', 'Block'];\n\ntype PartialMatch = { partialMatch?: boolean };\ntype ModeMapping = {\n  [volumeMode in VolumeMode]?: AccessMode[];\n};\ntype AccessModeMapping = ModeMapping & PartialMatch;\n\ntype ProvisionerAccessModeMapping = {\n  [provisioner: string]: AccessModeMapping;\n};\n\n// See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes and\n// https://docs.openshift.com/container-platform/4.15/storage/understanding-persistent-storage.html for more details\nexport const provisionerAccessModeMapping: ProvisionerAccessModeMapping = Object.freeze({\n  'kubernetes.io/no-provisioner': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/aws-ebs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/gce-pd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/glusterfs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/cinder': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-file': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-disk': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/quobyte': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/rbd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/vsphere-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/portworx-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/scaleio': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/storageos': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  // Since 4.6 new provisioners names will be without the 'kubernetes.io/' prefix.\n  'manila.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'ebs.csi.aws.com': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'block.csi.ibm.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'csi.ovirt.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'cinder.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'pd.csi.storage.gke.io': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'cephfs.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'rbd.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'file.csi.azure.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n});\n\nexport const getAccessModeOptions = () => [\n  {\n    value: 'ReadWriteOnce',\n    title: i18next.t('public~Single user (RWO)'),\n  },\n  {\n    value: 'ReadWriteMany',\n    title: i18next.t('public~Shared access (RWX)'),\n  },\n  {\n    value: 'ReadOnlyMany',\n    title: i18next.t('public~Read only (ROX)'),\n  },\n  {\n    value: 'ReadWriteOncePod',\n    title: i18next.t('public~Read write once pod (RWOP)'),\n  },\n];\n\nexport const getVolumeModeRadios = () => [\n  {\n    value: 'Filesystem',\n    title: i18next.t('public~Filesystem'),\n  },\n  {\n    value: 'Block',\n    title: i18next.t('public~Block'),\n  },\n];\n\nexport const dropdownUnits = {\n  i: 'B',\n  Ki: 'KiB',\n  Mi: 'MiB',\n  Gi: 'GiB',\n  Ti: 'TiB',\n  Pi: 'PiB',\n  Ei: 'EiB',\n};\n\nexport const getProvisionerModeMapping = (provisioner: string): ModeMapping =>\n  _.omit(\n    _.find(provisionerAccessModeMapping, (value: AccessModeMapping, key: string) => {\n      if (value?.partialMatch && provisioner?.includes(key)) {\n        return true;\n      }\n      if (key === provisioner) {\n        return true;\n      }\n      return false;\n    }) || {},\n    'partialMatch',\n  );\n\nexport const getAccessModeForProvisioner = (\n  provisioner: string,\n  ignoreReadOnly?: boolean,\n  volumeMode?: string,\n): AccessMode[] => {\n  let accessModes: AccessMode[];\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    accessModes = volumeMode\n      ? modeMapping[volumeMode]\n      : Object.keys(modeMapping)\n          .map((mode) => modeMapping[mode])\n          .flat();\n  } else {\n    accessModes = initialAccessModes;\n  }\n\n  // remove duplicate in accessModes\n  accessModes = [...new Set(accessModes)];\n\n  // Ignore ReadOnly related access for create-pvc\n  return ignoreReadOnly ? accessModes.filter((modes) => modes !== 'ReadOnlyMany') : accessModes;\n};\n\nexport const getVolumeModeForProvisioner = (\n  provisioner: string,\n  accessMode: string,\n): VolumeMode[] => {\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    return accessMode\n      ? (Object.keys(modeMapping).filter((volumeMode) =>\n          modeMapping[volumeMode].includes(accessMode),\n        ) as VolumeMode[])\n      : (Object.keys(modeMapping) as VolumeMode[]);\n  }\n  return initialVolumeModes;\n};\n","import * as React from 'react';\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectList,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  getAccessModeForProvisioner,\n  getAccessModeOptions,\n} from '@console/internal/components/storage/shared';\nimport { PersistentVolumeClaimKind } from '@console/internal/module/k8s';\n\nexport const getPVCAccessModes = (resource: PersistentVolumeClaimKind, key: string) =>\n  _.reduce(\n    resource?.spec?.accessModes,\n    (res, value) => {\n      const mode = getAccessModeOptions().find((accessMode) => accessMode.value === value);\n      if (mode) {\n        res.push(mode[key]);\n      }\n      return res;\n    },\n    [],\n  );\n\nexport const AccessModeSelector: React.FC<AccessModeSelectorProps> = (props) => {\n  const {\n    className,\n    pvcResource,\n    filterByVolumeMode,\n    onChange,\n    loaded,\n    provisioner,\n    availableAccessModes = [],\n    description,\n    ignoreReadOnly,\n  } = props;\n\n  const { t } = useTranslation();\n  const pvcInitialAccessMode = pvcResource\n    ? getPVCAccessModes(pvcResource, 'value')\n    : availableAccessModes;\n  const volumeMode: string = pvcResource?.spec?.volumeMode;\n\n  const [allowedAccessModes, setAllowedAccessModes] = React.useState<string[]>();\n  const [accessMode, setAccessMode] = React.useState<string>();\n\n  const changeAccessMode = React.useCallback(\n    (mode: string) => {\n      setAccessMode(mode);\n      onChange(mode);\n    },\n    [onChange],\n  );\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState<string>(\n    getAccessModeOptions().find((mode) => mode.value === pvcInitialAccessMode[0]).title,\n  );\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (_event: undefined, value: { val: string; label: string }) => {\n    setIsOpen(!isOpen);\n    setSelected(value.label);\n    changeAccessMode(value.val);\n  };\n  const selectOptions = getAccessModeOptions().map((option) => {\n    const disabled = !allowedAccessModes?.includes(option.value);\n    return (\n      <SelectOption\n        key={option.title}\n        value={{ val: option.value, label: option.title }}\n        isDisabled={disabled}\n        isSelected={accessMode === option.value}\n      >\n        {option.title}\n      </SelectOption>\n    );\n  });\n\n  const toggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle\n      ref={toggleRef}\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n      style={\n        {\n          width: '200px',\n        } as React.CSSProperties\n      }\n    >\n      {selected}\n    </MenuToggle>\n  );\n\n  React.useEffect(() => {\n    if (loaded) {\n      setAllowedAccessModes(\n        getAccessModeForProvisioner(\n          provisioner,\n          ignoreReadOnly,\n          filterByVolumeMode ? volumeMode : null,\n        ),\n      );\n    }\n  }, [filterByVolumeMode, ignoreReadOnly, loaded, provisioner, volumeMode]);\n\n  React.useEffect(() => {\n    // Make sure the default or already checked option button value is from any one of allowed the access mode\n    if (allowedAccessModes) {\n      if (!accessMode && allowedAccessModes.includes(pvcInitialAccessMode[0])) {\n        // To view the same access mode value of pvc\n        changeAccessMode(pvcInitialAccessMode[0]);\n      } else if (!allowedAccessModes.includes(accessMode)) {\n        // Old access mode will be disabled\n        changeAccessMode(allowedAccessModes[0]);\n      }\n    }\n  }, [accessMode, allowedAccessModes, changeAccessMode, pvcInitialAccessMode]);\n\n  return (\n    <FormGroup\n      label={t('console-app~Access mode')}\n      isRequired\n      fieldId=\"access-mode\"\n      className={className}\n    >\n      {loaded && allowedAccessModes && (\n        <Select\n          isOpen={isOpen}\n          selected={selected}\n          onSelect={onSelect}\n          onOpenChange={(open) => setIsOpen(open)}\n          toggle={toggle}\n          shouldFocusToggleOnSelect\n        >\n          <SelectList>{selectOptions}</SelectList>\n        </Select>\n      )}\n\n      {allowedAccessModes && allowedAccessModes && description && (\n        <p className=\"help-block\" id=\"access-mode-help\">\n          {description}\n        </p>\n      )}\n      {(!loaded || !allowedAccessModes) && <div className=\"skeleton-text\" />}\n    </FormGroup>\n  );\n};\n\ntype AccessModeSelectorProps = {\n  className?: string;\n  pvcResource?: PersistentVolumeClaimKind;\n  filterByVolumeMode?: boolean;\n  onChange: (accessMode: string) => void;\n  availableAccessModes?: string[];\n  loaded: boolean;\n  loadError?: any;\n  provisioner: string;\n  description?: string;\n  ignoreReadOnly?: boolean;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\n/* eslint-disable import/named */\nimport { WithTranslation, withTranslation } from 'react-i18next';\n\nimport { Firehose, LoadingInline, Dropdown, ResourceName, ResourceIcon } from '.';\nimport { isDefaultClass } from '../storage-class';\nimport * as classNames from 'classnames';\n\n/* Component StorageClassDropdown - creates a dropdown list of storage classes */\n\nexport class StorageClassDropdownInnerWithTranslation extends React.Component<\n  StorageClassDropdownInnerProps,\n  StorageClassDropdownInnerState\n> {\n  readonly state: StorageClassDropdownInnerState = {\n    items: {},\n    name: this.props.name,\n    selectedKey: this.props.selectedKey,\n    title: <LoadingInline />,\n    defaultClass: this.props.defaultClass,\n  };\n\n  UNSAFE_componentWillMount() {\n    this.UNSAFE_componentWillReceiveProps(this.props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { loaded, loadError, resources, t } = nextProps;\n\n    if (loadError) {\n      this.setState({\n        title: (\n          <div className=\"cos-error-title\">\n            {t('public~Error loading {{desc}}', { desc: nextProps.desc })}\n          </div>\n        ),\n      });\n      return;\n    }\n    if (!loaded) {\n      return;\n    }\n\n    const state = {\n      items: {},\n      title: {},\n      defaultClass: '',\n    };\n    let unorderedItems = {};\n    const noStorageClass = t('public~No default StorageClass');\n    _.map(resources.StorageClass.data, (resource) => {\n      unorderedItems[resource.metadata.name] = {\n        kindLabel: 'StorageClass',\n        name: resource.metadata.name,\n        description: _.get(resource, 'metadata.annotations.description', ''),\n        default: isDefaultClass(resource),\n        accessMode: _.get(\n          resource,\n          ['metadata', 'annotations', 'storage.alpha.openshift.io/access-mode'],\n          '',\n        ),\n        provisioner: resource.provisioner,\n        parameters: resource.parameters,\n        type: _.get(resource, 'parameters.type', ''),\n        zone: _.get(resource, 'parameters.zone', ''),\n        resource,\n      };\n    });\n\n    //Filter if user provides a custom function\n    if (nextProps.filter) {\n      unorderedItems = Object.keys(unorderedItems)\n        .filter((sc) => nextProps.filter(unorderedItems[sc]))\n        .reduce((acc, key) => {\n          acc[key] = unorderedItems[key];\n          return acc;\n        }, {});\n    }\n\n    // Determine if there is a default storage class\n    state.defaultClass = _.findKey(unorderedItems, 'default');\n    const { selectedKey } = this.state;\n    if (!state.defaultClass) {\n      // Add No Storage Class option if there is not a default storage class\n      unorderedItems[''] = { kindLabel: '', name: noStorageClass };\n    }\n\n    if (!this.props.loaded || !selectedKey || !unorderedItems[selectedKey || state.defaultClass]) {\n      state.title = <span className=\"text-muted\">{t('public~Select StorageClass')}</span>;\n    }\n\n    const selectedItem = unorderedItems[selectedKey || state.defaultClass];\n    if (selectedItem) {\n      state.title = this.getTitle(selectedItem);\n    }\n\n    Object.keys(unorderedItems)\n      .sort()\n      .forEach((key) => {\n        state.items[key] = unorderedItems[key];\n      });\n    this.setState(state);\n  }\n\n  componentDidMount() {\n    const { defaultClass } = this.state;\n    if (defaultClass) {\n      this.onChange(defaultClass);\n    }\n  }\n\n  componentDidUpdate() {\n    const { defaultClass, selectedKey } = this.state;\n    if (selectedKey) {\n      this.onChange(selectedKey);\n    } else if (defaultClass) {\n      this.onChange(defaultClass);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !_.isEqual(this.state, nextState);\n  }\n\n  autocompleteFilter = (text, item) => fuzzy(text, item.props.name);\n\n  getTitle = (storageClass) => {\n    return storageClass.kindLabel ? (\n      <ResourceName kind=\"StorageClass\" name={storageClass.name} />\n    ) : (\n      <span>{storageClass.name}</span>\n    );\n  };\n\n  onChange = (key) => {\n    const storageClass = _.get(this.state, ['items', key], {});\n    this.setState(\n      {\n        selectedKey: key,\n        title: this.getTitle(storageClass),\n      },\n      () => this.props.onChange(storageClass.resource),\n    );\n  };\n\n  render() {\n    const { id, loaded, describedBy, noSelection, t } = this.props;\n    const items = {};\n    _.each(\n      this.state.items,\n      (props, key) =>\n        (items[key] = key ? (\n          <StorageClassDropdownEntry {...props} />\n        ) : (\n          <StorageClassDropdownNoStorageClassOption {...props} />\n        )),\n    );\n\n    const { selectedKey, defaultClass } = this.state;\n\n    // Only show the dropdown if 'no storage class' is not the only option which depends on defaultClass\n    const itemsAvailableToShow = defaultClass || _.size(items) > 1;\n    return (\n      <>\n        {loaded && itemsAvailableToShow && (\n          <div>\n            <label\n              className={classNames('control-label', this.props.hideClassName, {\n                'co-required': this.props.required,\n              })}\n              htmlFor={id}\n            >\n              {t('public~StorageClass')}\n            </label>\n            <Dropdown\n              className=\"co-storage-class-dropdown\"\n              dropDownClassName=\"dropdown--full-width\"\n              autocompleteFilter={this.autocompleteFilter}\n              autocompletePlaceholder={t('public~Select StorageClass')}\n              items={items}\n              selectedKey={selectedKey}\n              title={this.state.title}\n              onChange={this.onChange}\n              id={id}\n              dataTest={this.props?.['data-test']}\n              noSelection={noSelection}\n              menuClassName=\"dropdown-menu--text-wrap\"\n            />\n            {describedBy && (\n              <p className=\"help-block\" id={describedBy}>\n                {t('public~StorageClass for the new claim')}\n              </p>\n            )}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport const StorageClassDropdownInner = withTranslation()(\n  StorageClassDropdownInnerWithTranslation,\n);\n\nexport const StorageClassDropdown = (props) => {\n  return (\n    <Firehose resources={[{ kind: 'StorageClass', prop: 'StorageClass', isList: true }]}>\n      <StorageClassDropdownInner {...props} />\n    </Firehose>\n  );\n};\n\nconst StorageClassDropdownEntry = (props) => {\n  const storageClassProperties = [\n    props.default ? ' (default)' : '',\n    props.description,\n    props.accessMode,\n    props.provisioner,\n    props.type,\n    props.zone,\n  ];\n  const storageClassDescriptionLine = _.compact(storageClassProperties).join(' | ');\n  return (\n    <span className=\"co-resource-item\">\n      <ResourceIcon kind={props.kindLabel} />\n      <span className=\"co-resource-item__resource-name\">\n        {props.name}\n        <div className=\"text-muted small\"> {storageClassDescriptionLine}</div>\n      </span>\n    </span>\n  );\n};\n\nconst StorageClassDropdownNoStorageClassOption = (props) => {\n  return (\n    <span className=\"co-resource-item\">\n      <span className=\"co-resource-item__resource-name\">{props.name}</span>\n    </span>\n  );\n};\n\nexport type StorageClassDropdownInnerState = {\n  items: any;\n  name: string;\n  selectedKey: string;\n  title: React.ReactNode;\n  defaultClass: string;\n};\n\nexport type StorageClassDropdownInnerProps = WithTranslation & {\n  id?: string;\n  loaded?: boolean;\n  resources?: any;\n  name: string;\n  onChange: (object) => void;\n  describedBy: string;\n  defaultClass: string;\n  required?: boolean;\n  hideClassName?: string;\n  filter?: (param) => boolean;\n  noSelection?: boolean;\n  selectedKey?: string;\n};\n"],"sourceRoot":""}