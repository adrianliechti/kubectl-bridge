{"version":3,"sources":["webpack:///./public/components/persistent-volume-claim.jsx","webpack:///./public/components/modals/delete-pvc-modal.tsx"],"names":["ModifyLabels","ModifyAnnotations","Edit","ExpandPVC","PVCSnapshot","ClonePVC","factory","menuActions","getExtensionsActionsForKind","kind","pvc","label","t","callback","accessReview","PVCStatus","pvcStatusExtensions","resolved","length","priorityStatus","sort","a","b","properties","priority","find","status","predicate","PriorityStatusComponent","metadata","deletionTimestamp","phase","tableColumnClasses","columnClass","PVCTableRow","UI","obj","metrics","getIn","usedCapacity","name","namespace","totalCapacityMetric","capacity","storage","totalCapcityHumanized","className","title","columnID","spec","volumeName","string","storageClassName","actions","resource","Details","CAN_LIST_PV","flags","canListPV","labelSelector","selector","requestedStorage","accessModes","volumeMode","conditions","query","response","loadError","loading","endpoint","QUERY","totalRequestMetric","usedMetrics","data","result","value","availableMetrics","totalCapacity","availableCapacity","undefined","unit","podStatusInnerRadius","innerRadius","podStatusOuterRadius","radius","availableCapacityString","Number","toFixed","totalCapacityString","donutData","x","y","pvcAlertExtensions","alertComponents","map","alert","AlertComponent","uid","key","text","ariaDesc","ariaTitle","height","width","size","labels","datum","subTitle","constrainToVisibleArea","join","PersistentVolumeClaimsList","props","Header","sortField","transforms","id","sortFunc","Row","virtualize","PersistentVolumeClaimsPage","createPropExtensions","dispatch","pvcMetrics","reduce","acc","item","metric","persistentvolumeclaim","initPath","createItems","path","i","createProps","to","concat","items","Object","assign","0","createLink","wizardName","toString","filters","filterGroupName","type","reducer","ListComponent","canCreate","rowFilters","customData","PersistentVolumeClaimsDetailsPage","getResourceStatus","pages","details","editYaml","events","DeletePVCModal","inProgress","errorMessage","handlePromise","close","cancel","pvcDeleteExtensions","pvcName","pvcMetadata","navigate","PVCAlert","onSubmit","e","preventDefault","promise","extensionPromises","onPVCKill","Promise","all","hasGutter","ns","submitText","submitDanger"],"mappings":"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","file":"persistent-volume-claim-chunk-a2013586e97cfadfb450.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useDispatch, connect } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport { useExtensions } from '@console/plugin-sdk';\nimport {\n  isPVCAlert,\n  isPVCCreateProp,\n  isPVCStatus,\n} from '@console/dynamic-plugin-sdk/src/extensions/pvc';\nimport { useResolvedExtensions } from '@console/dynamic-plugin-sdk';\nimport {\n  Status,\n  FLAGS,\n  calculateRadius,\n  getNamespace,\n  getName,\n  getRequestedPVCSize,\n} from '@console/shared';\nimport { connectToFlags } from '../reducers/connectToFlags';\nimport { Conditions } from './conditions';\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport {\n  Kebab,\n  navFactory,\n  ResourceKebab,\n  SectionHeading,\n  ResourceLink,\n  ResourceSummary,\n  Selector,\n  humanizeBinaryBytes,\n  convertToBaseValue,\n  asAccessReview,\n} from './utils';\nimport { ResourceEventStream } from './events';\nimport { PersistentVolumeClaimModel } from '../models';\nimport { setPVCMetrics } from '../actions/ui';\nimport { PrometheusEndpoint } from './graphs/helpers';\nimport { usePrometheusPoll } from './graphs/prometheus-poll-hook';\nimport deletePVCModal from './modals/delete-pvc-modal';\nimport i18next from 'i18next';\n\nconst { ModifyLabels, ModifyAnnotations, Edit, ExpandPVC, PVCSnapshot, ClonePVC } = Kebab.factory;\nconst menuActions = [\n  ...Kebab.getExtensionsActionsForKind(PersistentVolumeClaimModel),\n  ExpandPVC,\n  PVCSnapshot,\n  ClonePVC,\n  ModifyLabels,\n  ModifyAnnotations,\n  Edit,\n  (kind, pvc) => ({\n    label: i18next.t('public~Delete PersistentVolumeClaim'),\n    callback: () =>\n      deletePVCModal({\n        pvc,\n      }),\n    accessReview: asAccessReview(kind, pvc, 'delete'),\n  }),\n];\n\nexport const PVCStatus = ({ pvc }) => {\n  const { t } = useTranslation();\n  const [pvcStatusExtensions, resolved] = useResolvedExtensions(isPVCStatus);\n  if (resolved && pvcStatusExtensions.length > 0) {\n    const sortedByPriority = pvcStatusExtensions.sort(\n      (a, b) => b.properties.priority - a.properties.priority,\n    );\n    const priorityStatus = sortedByPriority.find((status) => status.properties.predicate(pvc));\n    const PriorityStatusComponent = priorityStatus?.properties?.status;\n\n    return PriorityStatusComponent ? (\n      <PriorityStatusComponent pvc={pvc} />\n    ) : (\n      <Status\n        status={pvc.metadata.deletionTimestamp ? t('public~Terminating') : pvc.status.phase}\n      />\n    );\n  }\n\n  return (\n    <Status status={pvc.metadata.deletionTimestamp ? t('public~Terminating') : pvc.status.phase} />\n  );\n};\n\nconst tableColumnClasses = [\n  '', // name\n  '', // namespace\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // status\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // persistence volume\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // capacity\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), // used capacity\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), // storage class\n  Kebab.columnClass,\n];\n\nconst kind = 'PersistentVolumeClaim';\n\nconst mapStateToProps = ({ UI }, { obj }) => ({\n  metrics: UI.getIn(['metrics', 'pvc'])?.usedCapacity?.[getNamespace(obj)]?.[getName(obj)],\n});\n\nconst PVCTableRow = connect(mapStateToProps)(({ obj, metrics }) => {\n  const [name, namespace] = [getName(obj), getNamespace(obj)];\n  const totalCapacityMetric = convertToBaseValue(obj?.status?.capacity?.storage);\n  const totalCapcityHumanized = humanizeBinaryBytes(totalCapacityMetric);\n  const usedCapacity = humanizeBinaryBytes(metrics);\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={name} namespace={namespace} title={name} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={namespace} title={namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <PVCStatus pvc={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {_.get(obj, 'spec.volumeName') ? (\n          <ResourceLink\n            kind=\"PersistentVolume\"\n            name={obj.spec.volumeName}\n            title={obj.spec.volumeName}\n          />\n        ) : (\n          <div className=\"text-muted\">{t('public~No PersistentVolume')}</div>\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {totalCapacityMetric ? totalCapcityHumanized.string : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>{metrics ? usedCapacity.string : '-'}</TableData>\n      <TableData className={classNames(tableColumnClasses[6])}>\n        {obj?.spec?.storageClassName ? (\n          <ResourceLink\n            kind=\"StorageClass\"\n            name={obj.spec.storageClassName}\n            title={obj.spec.storageClassName}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </>\n  );\n});\n\nconst Details_ = ({ flags, obj: pvc }) => {\n  const canListPV = flags[FLAGS.CAN_LIST_PV];\n  const name = pvc?.metadata?.name;\n  const namespace = pvc?.metadata?.namespace;\n  const labelSelector = pvc?.spec?.selector;\n  const storageClassName = pvc?.spec?.storageClassName;\n  const volumeName = pvc?.spec?.volumeName;\n  const storage = pvc?.status?.capacity?.storage;\n  const requestedStorage = getRequestedPVCSize(pvc);\n  const accessModes = pvc?.status?.accessModes;\n  const volumeMode = pvc?.spec?.volumeMode;\n  const conditions = pvc?.status?.conditions;\n  const query =\n    name && namespace\n      ? `kubelet_volume_stats_used_bytes{persistentvolumeclaim='${name}',namespace='${namespace}'}`\n      : '';\n  const [response, loadError, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query,\n  });\n\n  const totalCapacityMetric = convertToBaseValue(storage);\n  const totalRequestMetric = convertToBaseValue(requestedStorage);\n  const usedMetrics = response?.data?.result?.[0]?.value?.[1];\n  const availableMetrics = usedMetrics ? totalCapacityMetric - usedMetrics : null;\n  const totalCapacity = humanizeBinaryBytes(totalCapacityMetric);\n  const availableCapacity = humanizeBinaryBytes(availableMetrics, undefined, totalCapacity.unit);\n  const usedCapacity = humanizeBinaryBytes(usedMetrics, undefined, totalCapacity.unit);\n  const { podStatusInnerRadius: innerRadius, podStatusOuterRadius: radius } = calculateRadius(130);\n  const availableCapacityString = `${Number(availableCapacity.value.toFixed(1))} ${\n    availableCapacity.unit\n  }`;\n  const totalCapacityString = `${Number(totalCapacity.value.toFixed(1))} ${totalCapacity.unit}`;\n\n  const donutData = usedMetrics\n    ? [\n        { x: i18next.t('public~Used'), y: usedCapacity.value },\n        { x: i18next.t('public~Available'), y: availableCapacity.value },\n      ]\n    : [{ x: i18next.t('public~Total'), y: totalCapacity.value }];\n\n  const [pvcAlertExtensions] = useResolvedExtensions(isPVCAlert);\n  const alertComponents = pvcAlertExtensions?.map(\n    ({ properties: { alert: AlertComponent }, uid }) => <AlertComponent key={uid} pvc={pvc} />,\n  );\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        {alertComponents}\n        <SectionHeading text={t('public~PersistentVolumeClaim details')} />\n        {totalCapacityMetric && !loading && (\n          <div className=\"co-pvc-donut\">\n            <ChartDonut\n              ariaDesc={\n                availableMetrics\n                  ? t('public~Available versus used capacity')\n                  : t('public~Total capacity')\n              }\n              ariaTitle={\n                availableMetrics\n                  ? t('public~Available versus used capacity')\n                  : t('public~Total capacity')\n              }\n              height={130}\n              width={130}\n              size={130}\n              innerRadius={innerRadius}\n              radius={radius}\n              data={donutData}\n              labels={({ datum }) => `${datum.y} ${totalCapacity.unit} ${datum.x}`}\n              subTitle={availableMetrics ? t('public~Available') : t('public~Total')}\n              title={availableMetrics ? availableCapacityString : totalCapacityString}\n              constrainToVisibleArea={true}\n            />\n          </div>\n        )}\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={pvc}>\n              <dt>{t('public~Label selector')}</dt>\n              <dd data-test-id=\"pvc-name\">\n                <Selector selector={labelSelector} kind=\"PersistentVolume\" />\n              </dd>\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              <dt>{t('public~Status')}</dt>\n              <dd data-test-id=\"pvc-status\">\n                <PVCStatus pvc={pvc} />\n              </dd>\n              <dt>{t('public~Requested capacity')}</dt>\n              <dd data-test=\"pvc-requested-capacity\">\n                {humanizeBinaryBytes(totalRequestMetric).string}\n              </dd>\n              {storage && (\n                <>\n                  <dt>{t('public~Capacity')}</dt>\n                  <dd data-test-id=\"pvc-capacity\">{totalCapacity.string}</dd>\n                </>\n              )}\n              {usedMetrics && _.isEmpty(loadError) && !loading && (\n                <>\n                  <dt>{t('public~Used')}</dt>\n                  <dd>{humanizeBinaryBytes(usedMetrics).string}</dd>\n                </>\n              )}\n              {!_.isEmpty(accessModes) && (\n                <>\n                  <dt>{t('public~Access modes')}</dt>\n                  <dd data-test-id=\"pvc-access-mode\">{accessModes.join(', ')}</dd>\n                </>\n              )}\n              <dt>{t('public~Volume mode')}</dt>\n              <dd data-test-id=\"pvc-volume-mode\">{volumeMode || 'Filesystem'}</dd>\n              <dt>{t('public~StorageClasses')}</dt>\n              <dd data-test-id=\"pvc-storageclass\">\n                {storageClassName ? (\n                  <ResourceLink kind=\"StorageClass\" name={storageClassName} />\n                ) : (\n                  '-'\n                )}\n              </dd>\n              {volumeName && canListPV && (\n                <>\n                  <dt>{t('public~PersistentVolumes')}</dt>\n                  <dd data-test-id=\"persistent-volume\">\n                    <ResourceLink kind=\"PersistentVolume\" name={volumeName} />\n                  </dd>\n                </>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={conditions} />\n      </div>\n    </>\n  );\n};\n\nconst Details = connectToFlags(FLAGS.CAN_LIST_PV)(Details_);\n\nexport const PersistentVolumeClaimsList = (props) => {\n  const { t } = useTranslation();\n  const PVCTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Status'),\n        sortField: 'status.phase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~PersistentVolumes'),\n        sortField: 'spec.volumeName',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('public~Capacity'),\n        sortFunc: 'pvcStorage',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: t('public~Used'),\n        sortFunc: 'pvcUsed',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[5] },\n      },\n      {\n        sortField: 'spec.storageClassName',\n        title: t('public~StorageClass'),\n        transforms: [sortable],\n        props: { className: tableColumnClasses[6] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[7] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~PersistentVolumeClaims')}\n      Header={PVCTableHeader}\n      Row={PVCTableRow}\n      virtualize\n    />\n  );\n};\n\nexport const PersistentVolumeClaimsPage = (props) => {\n  const { t } = useTranslation();\n  const createPropExtensions = useExtensions(isPVCCreateProp);\n  const { namespace = undefined } = props;\n  const dispatch = useDispatch();\n  const [response, loadError, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query: 'kubelet_volume_stats_used_bytes',\n  });\n  const pvcMetrics =\n    _.isEmpty(loadError) && !loading\n      ? response?.data?.result?.reduce((acc, item) => {\n          _.set(\n            acc,\n            ['usedCapacity', item?.metric?.namespace, item?.metric?.persistentvolumeclaim],\n            Number(item?.value?.[1]),\n          );\n          return acc;\n        }, {})\n      : {};\n  dispatch(setPVCMetrics(pvcMetrics));\n  const initPath = `/k8s/ns/${props.namespace || 'default'}/persistentvolumeclaims/`;\n\n  const createItems = createPropExtensions.map(({ properties: { label, path } }, i) => ({\n    key: i + 1,\n    label,\n    path,\n  }));\n\n  const createProps =\n    createPropExtensions.length === 0\n      ? { to: initPath.concat('~new/form') }\n      : {\n          items: Object.assign(\n            { 0: 'With Form' },\n            ...createItems.map(({ key, label }) => ({ [key]: label })),\n          ),\n          createLink: (wizardName) => {\n            if (wizardName === '0') {\n              return initPath.concat('~new/form');\n            }\n            const item = createItems.find(({ key }) => key.toString() === wizardName);\n            return initPath.concat(item.path);\n          },\n        };\n\n  const allPhases = ['Pending', 'Bound', 'Lost'];\n\n  const filters = [\n    {\n      filterGroupName: t('public~Status'),\n      type: 'pvc-status',\n      reducer: (pvc) => pvc.status.phase,\n      items: _.map(allPhases, (phase) => ({\n        id: phase,\n        title: phase,\n      })),\n    },\n  ];\n\n  return (\n    <ListPage\n      {...props}\n      ListComponent={PersistentVolumeClaimsList}\n      kind={kind}\n      canCreate={true}\n      rowFilters={filters}\n      createProps={createProps}\n      customData={pvcMetrics}\n    />\n  );\n};\n\nexport const PersistentVolumeClaimsDetailsPage = (props) => {\n  const { t } = useTranslation();\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={(pvc) =>\n        pvc.metadata.deletionTimestamp ? t('public~Terminating') : pvc.status.phase\n      }\n      menuActions={menuActions}\n      pages={[\n        navFactory.details(Details),\n        navFactory.editYaml(),\n        navFactory.events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { HandlePromiseProps, withHandlePromise, resourceListPathFromModel } from '../utils';\nimport { getName, YellowExclamationTriangleIcon } from '@console/shared';\nimport { useResolvedExtensions } from '@console/dynamic-plugin-sdk/src/api/useResolvedExtensions';\nimport { isPVCDelete, PVCDelete } from '@console/dynamic-plugin-sdk/src/extensions/pvc';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  ModalComponentProps,\n} from '../factory';\nimport { k8sKill, PersistentVolumeClaimKind } from '@console/internal/module/k8s';\nimport { PersistentVolumeClaimModel } from '../../models';\n\nconst DeletePVCModal = withHandlePromise<DeletePVCModalProps>((props) => {\n  const { pvc, inProgress, errorMessage, handlePromise, close, cancel } = props;\n  const [pvcDeleteExtensions] = useResolvedExtensions<PVCDelete>(isPVCDelete);\n  const pvcName = getName(pvc);\n  const { t } = useTranslation();\n  const pvcMetadata = { metadata: { ...pvc?.metadata } };\n  const navigate = useNavigate();\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    const promise = k8sKill(PersistentVolumeClaimModel, pvc);\n    const extensionPromises = pvcDeleteExtensions.map(\n      ({ properties: { predicate, onPVCKill } }) =>\n        predicate(pvcMetadata) && onPVCKill(pvcMetadata),\n    );\n\n    handlePromise(Promise.all([promise, ...extensionPromises]), () => {\n      close();\n      // Redirect to resourcce list page if the resouce is deleted.\n      navigate(resourceListPathFromModel(PersistentVolumeClaimModel, pvc.metadata.namespace));\n    });\n  };\n\n  const alertComponents = pvcDeleteExtensions.map(\n    ({ properties: { predicate, alert: PVCAlert }, uid }) =>\n      predicate(pvcMetadata) && (\n        <StackItem key={uid}>\n          <PVCAlert pvc={pvcMetadata} />\n        </StackItem>\n      ),\n  );\n\n  return (\n    <form onSubmit={submit} className=\"modal-content\">\n      <ModalTitle>\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" />{' '}\n        {t('public~Delete PersistentVolumeClaim')}\n      </ModalTitle>\n      <ModalBody>\n        <Stack hasGutter>\n          {alertComponents}\n          <StackItem>\n            <Trans t={t} ns=\"public\">\n              Are you sure you want to delete{' '}\n              <strong className=\"co-break-word\">{{ pvcName }}</strong> PersistentVolumeClaim?\n            </Trans>\n          </StackItem>\n        </Stack>\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={t('public~Delete')}\n        submitDanger\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport type DeletePVCModalProps = {\n  pvc: PersistentVolumeClaimKind;\n} & ModalComponentProps &\n  HandlePromiseProps;\n\nexport default createModalLauncher(DeletePVCModal);\n"],"sourceRoot":""}