{"version":3,"sources":["webpack:///./public/components/stateful-set.tsx","webpack:///./packages/console-shared/src/components/pod/PodRingSet.tsx","webpack:///./packages/console-app/src/actions/modify-health-checks.ts","webpack:///./public/components/workload-table.tsx"],"names":["AddStorage","common","ModifyCount","factory","menuActions","getExtensionsActionsForKind","kind","StatefulSetTableRow","obj","context","customActionMenu","StatefulSetTableHeader","displayName","StatefulSetDetails","ss","t","className","text","key","metadata","uid","path","resource","showPodSelector","showNodeSelector","showTolerations","containers","spec","template","heading","EnvironmentPage","props","loader","then","c","envPath","EnvironmentTab","rawEnvData","readOnly","StatefulSetsList","Header","Row","virtualize","StatefulSetsPage","ListComponent","canCreate","StatefulSetPods","showNodes","StatefulSetsDetailsPage","prometheusIsAvailable","kindObj","actions","options","loaded","variant","DROPDOWN","pages","details","metrics","editYaml","pods","envEditor","events","podData","loadError","resourceKind","deploymentData","inProgressDeploymentData","completedDeploymentData","current","previous","progressRC","completedRC","hasGutter","rc","isRollingOut","enableScaling","size","color","value","healthChecksAdded","container","readinessProbe","livenessProbe","startupProbe","healthChecksUrl","model","name","namespace","crd","AddHealthChecks","labelKey","hidden","href","accessReview","group","apiGroup","plural","verb","EditHealthChecks","tableColumnClasses","columnClass","WorkloadTableRow","customData","columnID","to","title","statusReplicas","status","replicas","specReplicas","labels","selector","WorkloadTableHeader","sortField","transforms","id","sortFunc"],"mappings":"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","file":"stateful-set-chunk-52e8bbaf3cbf9bd17fe8.min.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport PodRingSet from '@console/shared/src/components/pod/PodRingSet';\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport {\n  ActionServiceProvider,\n  ActionMenu,\n  ActionMenuVariant,\n  LazyActionMenu,\n  usePrometheusGate,\n} from '@console/shared';\nimport { DeploymentKind, K8sResourceKind, referenceForModel, referenceFor } from '../module/k8s';\nimport { ResourceEventStream } from './events';\nimport { DetailsPage, ListPage, Table, RowFunctionArgs } from './factory';\n\nimport { WorkloadTableRow, WorkloadTableHeader } from './workload-table';\n\nimport {\n  AsyncComponent,\n  Kebab,\n  KebabAction,\n  ContainerTable,\n  ResourceSummary,\n  SectionHeading,\n  navFactory,\n  PodsComponent,\n  RuntimeClass,\n} from './utils';\nimport { VolumesTable } from './volumes-table';\nimport { StatefulSetModel } from '../models';\nimport { PodDisruptionBudgetField } from '@console/app/src/components/pdb/PodDisruptionBudgetField';\n\nconst { AddStorage, common, ModifyCount } = Kebab.factory;\nexport const menuActions: KebabAction[] = [\n  AddHealthChecks,\n  ModifyCount,\n  AddStorage,\n  ...Kebab.getExtensionsActionsForKind(StatefulSetModel),\n  EditHealthChecks,\n  ...common,\n];\n\nconst kind = 'StatefulSet';\n\nconst StatefulSetTableRow: React.FC<RowFunctionArgs<K8sResourceKind>> = ({ obj }) => {\n  const resourceKind = referenceFor(obj);\n  const context = { [resourceKind]: obj };\n  const customActionMenu = <LazyActionMenu context={context} />;\n  return <WorkloadTableRow obj={obj} customActionMenu={customActionMenu} kind={kind} />;\n};\n\nconst StatefulSetTableHeader = () => {\n  return WorkloadTableHeader();\n};\nStatefulSetTableHeader.displayName = 'StatefulSetTableHeader';\n\nconst StatefulSetDetails: React.FC<StatefulSetDetailsProps> = ({ obj: ss }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~StatefulSet details')} />\n        <PodRingSet key={ss.metadata.uid} obj={ss} path=\"/spec/replicas\" />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={ss} showPodSelector showNodeSelector showTolerations>\n              <RuntimeClass obj={ss} />\n            </ResourceSummary>\n          </div>\n          <dl className=\"co-m-pane__details\">\n            <PodDisruptionBudgetField obj={ss} />\n          </dl>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Containers')} />\n        <ContainerTable containers={ss.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={ss} heading={t('public~Volumes')} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage: React.FC<EnvironmentPageProps> = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst EnvironmentTab: React.FC<EnvironmentTabProps> = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nexport const StatefulSetsList: React.FC = (props) => {\n  const { t } = useTranslation();\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~StatefulSets')}\n      Header={StatefulSetTableHeader}\n      Row={StatefulSetTableRow}\n      virtualize\n    />\n  );\n};\nexport const StatefulSetsPage: React.FC<StatefulSetsPageProps> = (props) => (\n  <ListPage {...props} ListComponent={StatefulSetsList} kind={kind} canCreate={true} />\n);\n\nconst StatefulSetPods: React.FC<StatefulSetPodsProps> = (props) => (\n  <PodsComponent {...props} showNodes />\n);\n\nexport const StatefulSetsDetailsPage: React.FC = (props) => {\n  const prometheusIsAvailable = usePrometheusGate();\n  const customActionMenu = (kindObj, obj) => {\n    const resourceKind = referenceForModel(kindObj);\n    const context = { [resourceKind]: obj };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n  return (\n    <DetailsPage\n      {...props}\n      kind={kind}\n      customActionMenu={customActionMenu}\n      pages={[\n        navFactory.details(StatefulSetDetails),\n        ...(prometheusIsAvailable ? [navFactory.metrics()] : []),\n        navFactory.editYaml(),\n        navFactory.pods(StatefulSetPods),\n        navFactory.envEditor(EnvironmentTab),\n        navFactory.events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n\ntype EnvironmentPageProps = {\n  obj: K8sResourceKind;\n  rawEnvData: any;\n  envPath: string[];\n  readOnly: boolean;\n};\n\ntype EnvironmentTabProps = {\n  obj: K8sResourceKind;\n};\n\ntype StatefulSetDetailsProps = {\n  obj: DeploymentKind;\n};\n\ntype StatefulSetsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype StatefulSetPodsProps = {\n  obj: K8sResourceKind;\n};\n","import * as React from 'react';\nimport { Split, SplitItem, Bullseye, Icon } from '@patternfly/react-core';\nimport { LongArrowAltRightIcon } from '@patternfly/react-icons/dist/esm/icons/long-arrow-alt-right-icon';\nimport { global_Color_200 as color200 } from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { K8sResourceKind, modelFor } from '@console/internal/module/k8s';\nimport { usePodsWatcher } from '../../hooks';\nimport { getPodData } from '../../utils';\nimport PodRing from './PodRing';\n\ninterface PodRingSetProps {\n  obj: K8sResourceKind;\n  path: string;\n  impersonate?: string;\n}\n\nconst PodRingSet: React.FC<PodRingSetProps> = ({ obj, path }) => {\n  const { podData, loadError, loaded } = usePodsWatcher(obj);\n  const resourceKind = modelFor(obj?.kind);\n\n  const deploymentData = React.useMemo(() => {\n    return loaded && !loadError\n      ? getPodData({ ...podData, obj })\n      : { inProgressDeploymentData: null, completedDeploymentData: null };\n  }, [loadError, loaded, podData, obj]);\n\n  const current = podData?.current && podData?.current.obj;\n  const previous = podData?.previous && podData?.previous.obj;\n  const { inProgressDeploymentData, completedDeploymentData } = deploymentData;\n  const progressRC = inProgressDeploymentData && current;\n  const completedRC = !!inProgressDeploymentData && completedDeploymentData ? previous : current;\n\n  return loaded ? (\n    <Split hasGutter>\n      <SplitItem>\n        <PodRing\n          key={inProgressDeploymentData ? 'deploy' : 'notDeploy'}\n          pods={completedDeploymentData}\n          rc={podData?.isRollingOut ? completedRC : podData?.current?.obj}\n          resourceKind={resourceKind}\n          obj={obj}\n          path={path}\n          enableScaling={!podData?.isRollingOut}\n        />\n      </SplitItem>\n      {inProgressDeploymentData && (\n        <>\n          <SplitItem>\n            <Bullseye>\n              <Icon size=\"xl\">\n                <LongArrowAltRightIcon color={color200.value} />\n              </Icon>\n            </Bullseye>\n          </SplitItem>\n          <SplitItem>\n            <PodRing\n              pods={inProgressDeploymentData}\n              rc={progressRC}\n              resourceKind={resourceKind}\n              obj={obj}\n              path={path}\n              enableScaling={false}\n            />\n          </SplitItem>\n        </>\n      )}\n    </Split>\n  ) : (\n    <LoadingInline />\n  );\n};\n\nexport default PodRingSet;\n","import * as _ from 'lodash';\nimport { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nconst healthChecksAdded = (resource: K8sResourceKind): boolean => {\n  const containers = resource?.spec?.template?.spec?.containers;\n  return _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n};\n\nconst healthChecksUrl = (model: K8sKind, obj: K8sResourceKind): string => {\n  const {\n    kind,\n    metadata: { name, namespace },\n  } = obj;\n  const resourceKind = model.crd ? referenceFor(obj) : kind;\n  const containers = obj?.spec?.template?.spec?.containers;\n  const containerName = containers?.[0]?.name;\n  return `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containerName}/health-checks`;\n};\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const AddHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    // t('console-app~Add Health Checks')\n    labelKey: 'console-app~Add Health Checks',\n    hidden: healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'update',\n    },\n  };\n};\n\n/** @deprecated - Moving to Extensible Action for Deployment resource, see @console/app/src/actions */\nexport const EditHealthChecks = (model: K8sKind, obj: K8sResourceKind): KebabOption => {\n  return {\n    // t('console-app~Edit Health Checks')\n    labelKey: 'console-app~Edit Health Checks',\n    hidden: !healthChecksAdded(obj),\n    href: healthChecksUrl(model, obj),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'get',\n    },\n  };\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { K8sResourceKind } from '../module/k8s';\nimport { TableData } from './factory';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\nimport {\n  Kebab,\n  KebabAction,\n  LabelList,\n  ResourceKebab,\n  ResourceLink,\n  resourcePath,\n  Selector,\n} from './utils';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  Kebab.columnClass,\n];\n\nexport const WorkloadTableRow: React.FC<WorkloadTableRowProps> = ({\n  obj,\n  kind,\n  menuActions,\n  customActionMenu,\n  customData,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`}\n          title=\"pods\"\n        >\n          {t('public~{{statusReplicas}} of {{specReplicas}} pods', {\n            statusReplicas: obj.status.replicas || 0,\n            specReplicas: obj.spec.replicas,\n          })}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={obj.spec.selector} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {customActionMenu || (\n          <ResourceKebab actions={menuActions} kind={kind} resource={obj} customData={customData} />\n        )}\n      </TableData>\n    </>\n  );\n};\nWorkloadTableRow.displayName = 'WorkloadTableRow';\ntype WorkloadTableRowProps = {\n  obj: K8sResourceKind;\n  kind: string;\n  menuActions?: KebabAction[];\n  customActionMenu?: React.ReactNode; // Renders a custom action menu.\n  customData?: { [key: string]: any };\n};\n\nexport const WorkloadTableHeader = () => {\n  return [\n    {\n      title: i18next.t('public~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: i18next.t('public~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      id: 'namespace',\n    },\n    {\n      title: i18next.t('public~Status'),\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: i18next.t('public~Labels'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: i18next.t('public~Pod selector'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nWorkloadTableHeader.displayName = 'WorkloadTableHeader';\n"],"sourceRoot":""}