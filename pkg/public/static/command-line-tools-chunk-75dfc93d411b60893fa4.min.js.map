{"version":3,"sources":["webpack:///./public/components/command-line-tools.tsx"],"names":["CommandLineTools","obj","t","requestTokenURL","externalLoginCommand","launchCopyLoginCommandModal","showCopyLoginCommand","data","cliData","item","metadata","name","additionalCommandLineTools","concat","tool","displayName","spec","defaultLinkText","key","uid","className","content","description","exactHeight","links","length","href","text","link","i","variant","onClick","CommandLineToolsPage","CONSOLE_CLI_DOWNLOAD","flags","props","resources","kind","isList","prop"],"mappings":"gqBAcO,MAAMA,EAAoD,EAAGC,UAClE,MAAM,EAAEC,GAAM,4BACPC,EAAiBC,GAAwB,eAC1CC,EAA8B,YAClCH,EAAE,kCACFE,GAEIE,EAAuBH,GAAmBC,EAC1CG,EAAO,IAAS,IAAMN,EAAK,QAAS,oBACpCO,EAAU,IAASD,EAAOE,GAAgC,qBAAvBA,EAAKC,SAASC,MAEjDC,EAA6B,IAAMJ,EAAQK,OAAON,GAAQO,IAC9D,MAAMC,EAAcD,EAAKE,KAAKD,YACxBE,EAAkBf,EAAE,2BAA4B,CAAEa,gBACxD,OACE,gBAAC,WAAc,CAACG,IAAKJ,EAAKJ,SAASS,KACjC,gBAAC,IAAO,CAACC,UAAU,eACnB,sBAAIA,UAAU,qBAAoB,eAAeL,GAC9CA,GAEH,gBAAC,mBAAgB,CAACM,QAASP,EAAKE,KAAKM,YAAaC,aAAW,IACjC,IAA3BT,EAAKE,KAAKQ,MAAMC,QACf,yBACE,gBAAC,IAAY,CACXC,KAAMZ,EAAKE,KAAKQ,MAAM,GAAGE,KACzBC,KAAMb,EAAKE,KAAKQ,MAAM,GAAGG,MAAQV,KAItCH,EAAKE,KAAKQ,MAAMC,OAAS,GACxB,0BACG,IAAMX,EAAKE,KAAKQ,MAAO,CAACI,EAAMC,IAC7B,sBAAIX,IAAKW,GACP,gBAAC,IAAY,CAACH,KAAME,EAAKF,KAAMC,KAAMC,EAAKD,MAAQV,UAShE,OACE,gCACE,gBAAC,IAAM,KACL,6BAAQf,EAAE,+BAEZ,uBAAKkB,UAAU,mBACb,sBAAIA,UAAU,sBACZ,uBAAKA,UAAU,mBAAmBlB,EAAE,+BAErCI,GACC,gCACE,gBAAC,IAAO,CAACc,UAAU,eAClBjB,EACC,gBAAC,IAAY,CAACuB,KAAMvB,EAAiBwB,KAAMzB,EAAE,+BAE7C,gBAAC,IAAM,CAAC4B,QAAQ,OAAOC,QAAS1B,GAC7BH,EAAE,+BAKVU,KAMIoB,EAAuB,YAAe,IAAMC,qBAArB,CACjC,I,IAAA,MAAEC,GAAK,EAAKC,EAAK,IAAjB,WACC,MAAMC,EAAYF,EAAM,IAAMD,sBAC1B,CACE,CACEI,KAAM,aAAkB,2BACxBC,QAAQ,EACRC,KAAM,QAGV,GAEJ,OACE,gBAAC,IAAQ,CAACH,UAAWA,GACnB,gBAACpC,EAAgB,iBAAMmC","file":"command-line-tools-chunk-75dfc93d411b60893fa4.min.js","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Divider } from '@patternfly/react-core';\n\nimport { FLAGS, useCopyLoginCommands } from '@console/shared';\nimport { ExternalLink, Firehose, FirehoseResult } from './utils';\nimport { connectToFlags } from '../reducers/connectToFlags';\nimport { ConsoleCLIDownloadModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\nimport { SyncMarkdownView } from './markdown-view';\nimport { useCopyCodeModal } from '@console/shared/src/hooks/useCopyCodeModal';\n\nexport const CommandLineTools: React.FC<CommandLineToolsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const [requestTokenURL, externalLoginCommand] = useCopyLoginCommands();\n  const launchCopyLoginCommandModal = useCopyCodeModal(\n    t('public~Login with this command'),\n    externalLoginCommand,\n  );\n  const showCopyLoginCommand = requestTokenURL || externalLoginCommand;\n  const data = _.sortBy(_.get(obj, 'data'), 'spec.displayName');\n  const cliData = _.remove(data, (item) => item.metadata.name === 'oc-cli-downloads');\n\n  const additionalCommandLineTools = _.map(cliData.concat(data), (tool) => {\n    const displayName = tool.spec.displayName;\n    const defaultLinkText = t('Download {{displayName}}', { displayName });\n    return (\n      <React.Fragment key={tool.metadata.uid}>\n        <Divider className=\"co-divider\" />\n        <h2 className=\"co-section-heading\" data-test-id={displayName}>\n          {displayName}\n        </h2>\n        <SyncMarkdownView content={tool.spec.description} exactHeight />\n        {tool.spec.links.length === 1 && (\n          <p>\n            <ExternalLink\n              href={tool.spec.links[0].href}\n              text={tool.spec.links[0].text || defaultLinkText}\n            />\n          </p>\n        )}\n        {tool.spec.links.length > 1 && (\n          <ul>\n            {_.map(tool.spec.links, (link, i) => (\n              <li key={i}>\n                <ExternalLink href={link.href} text={link.text || defaultLinkText} />\n              </li>\n            ))}\n          </ul>\n        )}\n      </React.Fragment>\n    );\n  });\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('public~Command Line Tools')}</title>\n      </Helmet>\n      <div className=\"co-m-pane__body\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name\">{t('public~Command Line Tools')}</div>\n        </h1>\n        {showCopyLoginCommand && (\n          <>\n            <Divider className=\"co-divider\" />\n            {requestTokenURL ? (\n              <ExternalLink href={requestTokenURL} text={t('public~Copy login command')} />\n            ) : (\n              <Button variant=\"link\" onClick={launchCopyLoginCommandModal}>\n                {t('public~Copy login command')}\n              </Button>\n            )}\n          </>\n        )}\n        {additionalCommandLineTools}\n      </div>\n    </>\n  );\n};\n\nexport const CommandLineToolsPage = connectToFlags(FLAGS.CONSOLE_CLI_DOWNLOAD)(\n  ({ flags, ...props }) => {\n    const resources = flags[FLAGS.CONSOLE_CLI_DOWNLOAD]\n      ? [\n          {\n            kind: referenceForModel(ConsoleCLIDownloadModel),\n            isList: true,\n            prop: 'obj',\n          },\n        ]\n      : [];\n\n    return (\n      <Firehose resources={resources}>\n        <CommandLineTools {...(props as any)} />\n      </Firehose>\n    );\n  },\n);\n\ntype CommandLineToolsProps = {\n  obj: FirehoseResult;\n};\n"],"sourceRoot":""}