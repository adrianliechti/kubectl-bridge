{"version":3,"sources":["webpack:///./public/components/group.tsx"],"names":["removeUser","group","user","label","t","callback","accessReview","menuActions","kind","factory","common","tableColumnClasses","columnClass","getImpersonateAction","startImpersonate","navigate","metadata","name","window","SERVER_FLAGS","basePath","resource","verb","GroupKebab","actions","GroupTableRow","obj","className","users","timestamp","creationTimestamp","GroupList","props","GroupTableHeader","title","sortField","transforms","displayName","Header","Row","virtualize","GroupPage","ListComponent","canCreate","UserKebab","options","UsersTable","map","key","GroupDetails","sort","text","RoleBindingsTab","showTitle","staticFilters","GroupDetailsPage","pages","details","editYaml","roles"],"mappings":"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","file":"group-chunk-908d668e9f09120298b7.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { sortable } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { NavigateFunction, useNavigate } from 'react-router-dom-v5-compat';\n\nimport * as UIActions from '../actions/ui';\nimport { GroupModel, UserModel } from '../models';\nimport { referenceForModel, GroupKind, K8sKind } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport { addUsersModal, removeUserModal } from './modals';\nimport { RoleBindingsPage } from './RBAC';\nimport {\n  asAccessReview,\n  EmptyBox,\n  Kebab,\n  KebabAction,\n  KebabOption,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n} from './utils';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\n\nconst addUsers: KebabAction = (kind: K8sKind, group: GroupKind) => ({\n  label: i18next.t('public~Add Users'),\n  callback: () =>\n    addUsersModal({\n      group,\n    }),\n  accessReview: asAccessReview(kind, group, 'patch'),\n});\n\nconst removeUser = (group: GroupKind, user: string): KebabOption => {\n  return {\n    label: i18next.t('public~Remove User'),\n    callback: () =>\n      removeUserModal({\n        group,\n        user,\n      }),\n    accessReview: asAccessReview(GroupModel, group, 'patch'),\n  };\n};\n\nconst menuActions = [addUsers, ...Kebab.factory.common];\n\nconst tableColumnClasses = ['', '', 'pf-m-hidden pf-m-visible-on-md', Kebab.columnClass];\n\nconst getImpersonateAction = (\n  startImpersonate: StartImpersonate,\n  navigate: NavigateFunction,\n): KebabAction => (kind: K8sKind, group: GroupKind) => ({\n  label: i18next.t('public~Impersonate Group {{name}}', group.metadata),\n  callback: () => {\n    startImpersonate('Group', group.metadata.name);\n    navigate(window.SERVER_FLAGS.basePath);\n  },\n  // Must use API group authorization.k8s.io, NOT user.openshift.io\n  // See https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation\n  accessReview: {\n    group: 'authorization.k8s.io',\n    resource: 'groups',\n    name: group.metadata.name,\n    verb: 'impersonate',\n  },\n});\n\nconst GroupKebab_: React.FC<GroupKebabProps & GroupKebabDispatchProps> = ({\n  group,\n  startImpersonate,\n}) => {\n  const navigate = useNavigate();\n  return (\n    <ResourceKebab\n      actions={[getImpersonateAction(startImpersonate, navigate), ...menuActions]}\n      kind={referenceForModel(GroupModel)}\n      resource={group}\n    />\n  );\n};\n\nconst GroupKebab = connect<{}, GroupKebabDispatchProps, GroupKebabProps>(null, {\n  startImpersonate: UIActions.startImpersonate,\n})(GroupKebab_);\n\nconst GroupTableRow: React.FC<RowFunctionArgs<GroupKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={referenceForModel(GroupModel)} name={obj.metadata.name} />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>{_.size(obj.users)}</TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <GroupKebab group={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const GroupList: React.FC = (props) => {\n  const { t } = useTranslation();\n  const GroupTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Users'),\n        sortField: 'users.length',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Created'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n  GroupTableHeader.displayName = 'GroupTableHeader';\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~Groups')}\n      Header={GroupTableHeader}\n      Row={GroupTableRow}\n      virtualize\n    />\n  );\n};\n\nexport const GroupPage: React.FC<GroupPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      title={t('public~Groups')}\n      kind={referenceForModel(GroupModel)}\n      ListComponent={GroupList}\n      canCreate\n    />\n  );\n};\n\nconst UserKebab: React.FC<UserKebabProps> = ({ group, user }) => {\n  const options: KebabOption[] = [removeUser(group, user)];\n  return <Kebab options={options} />;\n};\n\nconst UsersTable: React.FC<UsersTableProps> = ({ group, users }) => {\n  const { t } = useTranslation();\n  return _.isEmpty(users) ? (\n    <EmptyBox label={t('public~Users')} />\n  ) : (\n    <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n      <thead className=\"pf-v5-c-table__thead\">\n        <tr className=\"pf-v5-c-table__tr\">\n          <th className=\"pf-v5-c-table__th\">{t('public~Name')}</th>\n          <th className=\"pf-v5-c-table__th\" />\n        </tr>\n      </thead>\n      <tbody className=\"pf-v5-c-table__tbody\">\n        {users.map((user: string) => (\n          <tr className=\"pf-v5-c-table__tr\" key={user}>\n            <td className=\"pf-v5-c-table__td\">\n              <ResourceLink kind={referenceForModel(UserModel)} name={user} />\n            </td>\n            <td className=\"pf-v5-c-table__td dropdown-kebab-pf pf-v5-c-table__action\">\n              <UserKebab group={group} user={user} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst GroupDetails: React.FC<GroupDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const users: string[] = obj.users ? [...obj.users].sort() : [];\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Group details')} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={obj} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Users')} />\n        <UsersTable group={obj} users={users} />\n      </div>\n    </>\n  );\n};\n\nconst RoleBindingsTab: React.FC<RoleBindingsTabProps> = ({ obj }) => (\n  <RoleBindingsPage\n    showTitle={false}\n    staticFilters={{ 'role-binding-group': obj.metadata.name }}\n    name={obj.metadata.name}\n    kind={obj.kind}\n  />\n);\n\nconst GroupDetailsPage_: React.FC<GroupKebabDispatchProps> = ({ startImpersonate, ...props }) => {\n  const navigate = useNavigate();\n\n  return (\n    <DetailsPage\n      {...props}\n      kind={referenceForModel(GroupModel)}\n      menuActions={[getImpersonateAction(startImpersonate, navigate), ...menuActions]}\n      pages={[\n        navFactory.details(GroupDetails),\n        navFactory.editYaml(),\n        navFactory.roles(RoleBindingsTab),\n      ]}\n    />\n  );\n};\n\nexport const GroupDetailsPage = connect<{}, GroupKebabDispatchProps>(null, {\n  startImpersonate: UIActions.startImpersonate,\n})(GroupDetailsPage_);\n\ntype StartImpersonate = (kind: string, name: string) => (dispatch, store) => Promise<void>;\n\ntype GroupKebabDispatchProps = {\n  startImpersonate: StartImpersonate;\n};\n\ntype GroupKebabProps = {\n  group: GroupKind;\n};\n\ntype UserKebabProps = {\n  group: GroupKind;\n  user: string;\n};\n\ntype UsersTableProps = {\n  group: GroupKind;\n  users: string[];\n};\n\ntype GroupPageProps = {\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype GroupDetailsProps = {\n  obj: GroupKind;\n};\n\ntype RoleBindingsTabProps = {\n  obj: GroupKind;\n};\n"],"sourceRoot":""}