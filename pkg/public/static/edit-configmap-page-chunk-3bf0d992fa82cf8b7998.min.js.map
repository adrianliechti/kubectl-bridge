{"version":3,"sources":["webpack:///./public/components/configmaps/ConfigMapForm.tsx","webpack:///./public/components/configmaps/ConfigMapFormEditor.tsx","webpack:///./public/components/configmaps/ConfigMapFormFields.tsx","webpack:///./packages/console-shared/src/components/formik-fields/key-value-file-input-field/KeyValueFileInputField.tsx","webpack:///./public/components/configmaps/ConfigMapPage.tsx","webpack:///./packages/console-shared/src/components/editor/yaml-download-utils.ts","webpack:///./public/components/configmaps/configmap-utils.ts"],"names":["name","namespace","title","configMap","isCreateFlow","navigate","initialValues","handleCancel","enableReinitialize","onSubmit","values","actions","resourceCall","configMapYaml","yamlData","metadata","configmap","editorType","Form","model","data","editConfigMapData","binaryData","immutable","ns","then","catch","e","setStatus","submitError","message","validationSchema","formikProps","ConfigMapFormEditor","status","handleSubmit","isSubmitting","dirty","setErrors","errors","t","setFieldValue","isStale","resourceVersion","immutableCfg","immutableCfgError","disableSubmit","YAML","formEditor","className","yamlEditor","showSamples","onSave","onReload","submitSuccess","formData","skipInvalid","formReloadCount","flexLayout","helpText","formContext","editor","sanitizeTo","yamlConfigMap","yamlContext","lastViewUserSettingKey","noMargin","handleReset","errorMessage","successMessage","showAlert","infoTitle","infoMessage","submitLabel","handleDownload","sticky","type","text","required","isDisabled","label","entries","key","value","onChange","keyIndex","disableRemoveAction","field","rowValues","fieldId","fieldValues","uniqId","setUniqId","render","arrayHelpers","map","v","idx","toString","direction","default","onClick","remove","variant","fileData","push","watchedConfigMap","loaded","loadError","kind","configMapForm","downloadYaml","blob","Blob","filename","obj","toLowerCase","console","error","initialConfigmapData","apiVersion","initialFormData","isBase64","str","trim","btoa","atob","err","getConfigMapKeyValues","path","keyValuePairs","getInitialConfigMapFormData","undefined","getConfigmapData","existingConfigMap","dataMap","reduce","acc","binaryDataMap","isEncoded","encode","sanitizeToYaml","configmapObj","sanitizeToForm","newFormData","bData","formBinaryData","find","fbData","decode","getConfigmapFormData","getConfigMapInitialValues","initialConfigMapFormData","initialYamData","keyValueValidation","of","test","found","filter","d","length","formDataSchema","oneOf","Object","when","is","validate","abortEarly"],"mappings":"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","file":"edit-configmap-page-chunk-3bf0d992fa82cf8b7998.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { k8sCreateResource, k8sUpdateResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { ConfigMapModel } from '../../models';\nimport { ConfigMapFormEditor } from './ConfigMapFormEditor';\nimport { ConfigMap, ConfigMapFormInitialValues } from './types';\nimport { getConfigmapData, getConfigMapInitialValues, validationSchema } from './configmap-utils';\n\nexport interface ConfigMapProps {\n  title: string;\n  namespace: string;\n  name: string;\n  configMap: ConfigMap;\n  isCreateFlow: boolean;\n}\n\nconst ConfigmapForm: React.FC<ConfigMapProps> = ({\n  name,\n  namespace,\n  title,\n  configMap,\n  isCreateFlow,\n}) => {\n  const navigate = useNavigate();\n  const [initialValues] = React.useState(\n    getConfigMapInitialValues(namespace, configMap, isCreateFlow),\n  );\n  const handleSubmit = (\n    values: ConfigMapFormInitialValues,\n    actions: FormikHelpers<ConfigMapFormInitialValues>,\n  ) => {\n    let resourceCall;\n\n    const configMapYaml: ConfigMap = safeYAMLToJS(values.yamlData);\n    if (configMapYaml?.metadata && !configMapYaml?.metadata?.namespace) {\n      configMapYaml.metadata.namespace = namespace;\n    }\n    const configmap: ConfigMap =\n      values.editorType === EditorType.Form\n        ? getConfigmapData(values, configMapYaml)\n        : configMapYaml;\n    if (isCreateFlow) {\n      resourceCall = k8sCreateResource({ model: ConfigMapModel, data: configmap });\n    } else {\n      const editConfigMapData = _.cloneDeep(configMap);\n      editConfigMapData.metadata = configmap?.metadata;\n      editConfigMapData.data = configmap.data;\n      editConfigMapData.binaryData = configmap.binaryData;\n      editConfigMapData.immutable = configmap.immutable;\n\n      resourceCall = k8sUpdateResource({\n        model: ConfigMapModel,\n        data: editConfigMapData,\n        ns: namespace,\n        name,\n      });\n    }\n    resourceCall\n      .then(() => {\n        navigate(`/k8s/ns/${namespace}/configmaps/${configmap.metadata.name}`);\n      })\n      .catch((e) => {\n        actions.setStatus({ submitError: e.message });\n      });\n  };\n\n  const handleCancel = () => navigate(-1);\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={validationSchema()}\n    >\n      {(formikProps) => (\n        <ConfigMapFormEditor\n          title={title}\n          configMap={configMap}\n          handleCancel={handleCancel}\n          {...formikProps}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default ConfigmapForm;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FlexForm,\n  FormBody,\n  FormFooter,\n  FormHeader,\n  SyncedEditorField,\n  CodeEditorField,\n} from '@console/shared';\nimport { downloadYaml } from '@console/shared/src/components/editor/yaml-download-utils';\nimport { ConfigMapModel } from '@console/internal/models';\nimport { safeJSToYAML, safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport ConfigMapFormFields from './ConfigMapFormFields';\nimport { ConfigMap, ConfigMapFormInitialValues } from './types';\nimport { getInitialConfigMapFormData, sanitizeToForm, sanitizeToYaml } from './configmap-utils';\n\ninterface ConfigMapFormEditorProps {\n  configMap: ConfigMap;\n  title: string;\n  handleCancel: () => void;\n}\n\nexport const ConfigMapFormEditor: React.FC<FormikProps<any> & ConfigMapFormEditorProps> = ({\n  values,\n  status,\n  handleSubmit,\n  configMap,\n  title,\n  isSubmitting,\n  dirty,\n  handleCancel,\n  setStatus,\n  setErrors,\n  errors,\n}) => {\n  const { t } = useTranslation();\n  const { setFieldValue } = useFormikContext<ConfigMapFormInitialValues>();\n  const LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY = 'console.configMapForm.editor.lastView';\n  const isStale = !!configMap && configMap?.metadata?.resourceVersion !== values.resourceVersion;\n  const immutableCfg = !!configMap && configMap.immutable;\n  const immutableCfgError = t(\n    'public~Cannot update the object when immutable field is set to true',\n  );\n  const disableSubmit =\n    immutableCfg ||\n    (values.editorType === EditorType.YAML ? !dirty : !dirty || !_.isEmpty(errors)) ||\n    isSubmitting;\n\n  const formEditor = (\n    <div className=\"co-m-pane__form\">\n      <ConfigMapFormFields />\n    </div>\n  );\n\n  const yamlEditor = (\n    <CodeEditorField\n      name=\"yamlData\"\n      model={ConfigMapModel}\n      showSamples={!configMap?.metadata?.name}\n      onSave={() => handleSubmit()}\n    />\n  );\n\n  const onReload = React.useCallback(() => {\n    setStatus({ submitSuccess: '', submitError: '' });\n    setErrors({});\n    if (values.editorType === EditorType.Form) {\n      setFieldValue(\n        'formData',\n        getInitialConfigMapFormData(configMap, values.formData.namespace),\n        false,\n      );\n    }\n    setFieldValue('yamlData', safeJSToYAML(configMap, '', { skipInvalid: true }), false);\n    setFieldValue('resourceVersion', configMap?.metadata?.resourceVersion, true);\n    setFieldValue('formReloadCount', values.formReloadCount + 1);\n  }, [setErrors, setFieldValue, setStatus, values, configMap]);\n\n  React.useEffect(() => {\n    setStatus({ submitError: null });\n  }, [setStatus, values.editorType]);\n\n  return (\n    <FlexForm onSubmit={handleSubmit} className=\"configmap-form\">\n      <FormBody flexLayout>\n        <FormHeader\n          title={title}\n          helpText={t(\n            'public~Config maps hold key-value pairs that can be used in pods to read application configuration.',\n          )}\n        />\n        <SyncedEditorField\n          name=\"editorType\"\n          formContext={{\n            name: 'formData',\n            editor: formEditor,\n            sanitizeTo: (yamlConfigMap: ConfigMap) =>\n              sanitizeToForm(values.formData, yamlConfigMap),\n          }}\n          yamlContext={{\n            name: 'yamlData',\n            editor: yamlEditor,\n            sanitizeTo: () =>\n              sanitizeToYaml(\n                values.formData,\n                _.merge({}, configMap, safeYAMLToJS(values.yamlData)),\n              ),\n          }}\n          lastViewUserSettingKey={LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY}\n          noMargin\n        />\n      </FormBody>\n      <FormFooter\n        handleSubmit={handleSubmit}\n        handleReset={values.isCreateFlow ? null : onReload}\n        errorMessage={status?.submitError || (immutableCfg && immutableCfgError)}\n        successMessage={status?.submitSuccess}\n        showAlert={isStale}\n        infoTitle={t('public~This object has been updated.')}\n        infoMessage={t('public~Click reload to see the new version.')}\n        isSubmitting={isSubmitting}\n        submitLabel={values.isCreateFlow ? t('public~Create') : t('public~Save')}\n        disableSubmit={disableSubmit}\n        handleCancel={handleCancel}\n        handleDownload={\n          values.editorType === EditorType.YAML && (() => downloadYaml(values.yamlData))\n        }\n        sticky\n      />\n    </FlexForm>\n  );\n};\n","import * as React from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { FormSection, TextInputTypes } from '@patternfly/react-core';\nimport { CheckboxField, InputField } from '@console/shared/src/components/formik-fields';\nimport KeyValueFileInputField from '@console/shared/src/components/formik-fields/key-value-file-input-field/KeyValueFileInputField';\nimport { isBase64 } from './configmap-utils';\n\nconst ConfigMapFormFields: React.FC = () => {\n  const { t } = useTranslation();\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const onChange = (value: string, keyIndex: string) => {\n    setFieldValue(`${keyIndex}.isBase64`, isBase64(value));\n  };\n\n  return (\n    <FormSection>\n      <InputField\n        type={TextInputTypes.text}\n        required\n        isDisabled={!values.isCreateFlow}\n        name=\"formData.name\"\n        label={t('public~Name')}\n        data-test=\"configmap-name\"\n        helpText={t('public~A unique name for the ConfigMap within the project')}\n      />\n\n      <CheckboxField\n        name=\"formData.immutable\"\n        label={t('public~Immutable')}\n        data-test=\"configmap-immutable\"\n        helpText={t(\n          'public~Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated',\n        )}\n      />\n\n      <KeyValueFileInputField\n        label={t('public~Data')}\n        helpText={t('public~Data contains the configuration data that is in UTF-8 range')}\n        name=\"formData.data\"\n        data-test=\"configmap-key-value-pair\"\n        entries={[{ key: '', value: '' }]}\n        onChange={onChange}\n      />\n\n      <KeyValueFileInputField\n        label={t('public~Binary Data')}\n        helpText={t('public~BinaryData contains the binary data that is not in UTF-8 range')}\n        name=\"formData.binaryData\"\n        data-test=\"configmap-key-value-pair\"\n        entries={[{ key: '', value: '' }]}\n      />\n    </FormSection>\n  );\n};\n\nexport default ConfigMapFormFields;\n","import * as React from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Button,\n  FormGroup,\n  TextInputTypes,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n} from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { FieldArray, FormikValues, useField, useFormikContext } from 'formik';\nimport { get, uniqueId } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DroppableFileInputField, InputField, useFormikValidationFix } from '@console/shared/src';\nimport { FieldProps } from '../field-types';\nimport { getFieldId } from '../field-utils';\n\nimport './KeyValueFileInputField.scss';\n\ntype KeyValueEntry = {\n  key: string;\n  value: string;\n};\n\ntype KeyValueEntryFormProps = {\n  label?: string;\n  helpText?: string;\n  disableRemoveAction?: boolean;\n  entries: KeyValueEntry[];\n  onChange?: (value: string, keyIndex: string) => void;\n};\n\nconst KeyValueFileInputField: React.FC<KeyValueEntryFormProps & FieldProps> = ({\n  name,\n  label = '',\n  helpText = '',\n  disableRemoveAction = false,\n  entries = [{ key: '', value: '' }],\n  onChange,\n}) => {\n  const [field] = useField<KeyValueEntry[]>(name);\n  const { t } = useTranslation();\n  const { values } = useFormikContext<FormikValues>();\n  const rowValues = field.value ?? entries;\n  const fieldId = getFieldId(name, 'key-value--input');\n  const fieldValues = get(values, name, rowValues);\n  const [uniqId, setUniqId] = React.useState(uniqueId());\n  useFormikValidationFix(field.value);\n\n  return (\n    <FieldArray\n      key={`${name}-${values.formReloadCount}`}\n      name={name}\n      render={(arrayHelpers) => (\n        <FormGroup fieldId={fieldId} label={label}>\n          {fieldValues?.map((v, idx) => {\n            return (\n              <Flex\n                className=\"key-value--wrapper\"\n                data-test={'key-value-pair'}\n                key={`${idx.toString()}-${uniqId}`}\n                direction={{ default: 'column' }}\n              >\n                {!disableRemoveAction && (\n                  <FlexItem className=\"key-value--remove-button\">\n                    <Button\n                      type=\"button\"\n                      data-test=\"remove-key-value-button\"\n                      onClick={() => {\n                        setUniqId(uniqueId());\n                        arrayHelpers.remove(idx);\n                      }}\n                      variant=\"link\"\n                    >\n                      <MinusCircleIcon className=\"co-icon-space-r\" />\n                      {t('console-shared~Remove key/value')}\n                    </Button>\n                  </FlexItem>\n                )}\n\n                <FlexItem>\n                  <InputField\n                    data-test={`key-${idx.toString()}`}\n                    type={TextInputTypes.text}\n                    name={`${name}.${idx.toString()}.key`}\n                    label={t('console-shared~Key')}\n                    required\n                  />\n                </FlexItem>\n                <FlexItem>\n                  <DroppableFileInputField\n                    data-test={`value-${idx.toString()}`}\n                    name={`${name}.${idx.toString()}.value`}\n                    label={t('console-shared~Value')}\n                    helpText={t(\n                      'console-shared~Drag and drop file with your value here or browse to upload it.',\n                    )}\n                    onChange={(fileData: string) => {\n                      onChange && onChange(fileData, `${name}.${idx.toString()}`);\n                    }}\n                  />\n                </FlexItem>\n              </Flex>\n            );\n          })}\n          <Button\n            className=\"pf-m-link--align-left\"\n            onClick={() => arrayHelpers.push({ key: '', value: '' })}\n            type=\"button\"\n            data-test=\"add-key-value-button\"\n            variant=\"link\"\n          >\n            <PlusCircleIcon className=\"co-icon-space-r\" />\n            {t('console-shared~Add key/value')}\n          </Button>\n\n          <FormHelperText>\n            <HelperText>\n              <HelperTextItem>{helpText}</HelperTextItem>\n            </HelperText>\n          </FormHelperText>\n        </FormGroup>\n      )}\n    />\n  );\n};\n\nexport default KeyValueFileInputField;\n","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { ConfigMapModel } from '@console/internal/models';\nimport { useK8sWatchResource } from '../utils/k8s-watch-hook';\nimport { StatusBox } from '../utils/status-box';\nimport ConfigMapForm from './ConfigMapForm';\nimport { ConfigMap } from './types';\n\nconst ConfigMapPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { ns: namespace, name } = useParams();\n  const isCreateFlow: boolean = !name;\n\n  const [watchedConfigMap, loaded, loadError] = useK8sWatchResource<ConfigMap>(\n    isCreateFlow\n      ? null\n      : {\n          kind: ConfigMapModel.kind,\n          name,\n          namespace,\n        },\n  );\n  const title = isCreateFlow ? t('public~Create ConfigMap') : t('public~Edit ConfigMap');\n  const configMap: ConfigMap = isCreateFlow ? null : watchedConfigMap;\n\n  const configMapForm = (\n    <ConfigMapForm\n      name={name}\n      namespace={namespace}\n      configMap={configMap}\n      title={title}\n      isCreateFlow={isCreateFlow}\n    />\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {isCreateFlow ? (\n        configMapForm\n      ) : (\n        <StatusBox loaded={loaded} loadError={loadError} label={title} data={configMap}>\n          {configMapForm}\n        </StatusBox>\n      )}\n    </>\n  );\n};\n\nexport default ConfigMapPage;\n","import { saveAs } from 'file-saver';\nimport { safeLoad } from 'js-yaml';\n\nexport const downloadYaml = (data: BlobPart) => {\n  const blob = new Blob([data], { type: 'text/yaml;charset=utf-8' });\n  let filename = 'k8s-object.yaml';\n  try {\n    const obj = safeLoad(data);\n    if (obj.kind) {\n      filename = `${obj.kind.toLowerCase()}-${obj.metadata.name}.yaml`;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not parse YAML file:', e);\n  }\n  saveAs(blob, filename);\n};\n","import * as _ from 'lodash';\nimport { Base64 } from 'js-base64';\nimport * as yup from 'yup';\nimport { FormikValues } from 'formik';\nimport i18next from 'i18next';\nimport { safeJSToYAML } from '@console/shared/src/utils/yaml';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { ConfigMap, ConfigMapFormData, ConfigMapFormInitialValues, KeyValuePair } from './types';\n\nexport const initialConfigmapData: ConfigMap = {\n  apiVersion: 'v1',\n  kind: 'ConfigMap',\n  metadata: {\n    name: '',\n  },\n  data: {},\n  binaryData: {},\n};\n\nexport const initialFormData: ConfigMapFormData = {\n  name: '',\n  namespace: '',\n  data: [{ key: '', value: '' }],\n  binaryData: [],\n  immutable: false,\n};\n\nexport const isBase64 = (str: string): boolean => {\n  if (str === '' || str?.trim() === '') {\n    return false;\n  }\n  try {\n    return btoa(atob(str)) === str;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const getConfigMapKeyValues = (configMap: ConfigMap, path: string): KeyValuePair[] => {\n  if (!configMap) {\n    return [];\n  }\n  const keyValuePairs: KeyValuePair[] = [];\n  if (configMap[path]) {\n    _.forIn(configMap[path], (value, key) => {\n      keyValuePairs.push({\n        key,\n        value,\n      });\n    });\n  }\n  return keyValuePairs;\n};\n\nexport const getInitialConfigMapFormData = (\n  configMap: ConfigMap,\n  namespace: string,\n): ConfigMapFormData => {\n  if (!configMap) {\n    return { ...initialFormData, namespace };\n  }\n  const name = configMap.metadata?.name ?? '';\n  const immutable = configMap?.immutable ?? undefined;\n  const data = getConfigMapKeyValues(configMap, 'data');\n  const binaryData = getConfigMapKeyValues(configMap, 'binaryData');\n  return { ...initialFormData, namespace, name, data, binaryData, immutable };\n};\n\nexport const getConfigmapFormData = (\n  formData: ConfigMapFormData,\n  yamlData: ConfigMap,\n): ConfigMapFormData => {\n  if (!yamlData) {\n    return { ...initialFormData, namespace: formData?.namespace };\n  }\n  let data;\n  let binaryData;\n  if (_.isObject(yamlData.data)) {\n    data = getConfigMapKeyValues(yamlData, 'data');\n  } else {\n    data = {};\n  }\n  if (_.isObject(yamlData.binaryData)) {\n    binaryData = getConfigMapKeyValues(yamlData, 'binaryData');\n    binaryData = binaryData.map((bData) => {\n      const formBinaryData = formData.binaryData.find((fbData) => fbData.key === bData.key);\n      if (formBinaryData && formBinaryData.value === bData.value) {\n        return bData;\n      }\n\n      return {\n        ...bData,\n        value: isBase64(bData.value) ? Base64.decode(bData.value) : bData.value,\n      };\n    });\n  } else {\n    binaryData = {};\n  }\n\n  return {\n    ...formData,\n    name: _.isString(yamlData?.metadata?.name) ? yamlData?.metadata?.name : '',\n    immutable: yamlData?.immutable ?? undefined,\n    data,\n    binaryData,\n  };\n};\n\nexport const getConfigmapData = (values: FormikValues, existingConfigMap: ConfigMap): ConfigMap => {\n  const { name, namespace, immutable, data, binaryData } = values.formData;\n\n  const dataMap = data.reduce((acc, { key, value }) => {\n    if (!key) {\n      return acc;\n    }\n    acc[key] = value;\n    return acc;\n  }, {});\n\n  const binaryDataMap = binaryData.reduce((acc, { key, value }) => {\n    if (!key) {\n      return acc;\n    }\n    const isEncoded = isBase64(value);\n    acc[key] = isEncoded ? value : Base64.encode(value);\n    return acc;\n  }, {});\n\n  return _.merge({}, initialConfigmapData, {\n    ...existingConfigMap,\n    metadata: {\n      ...existingConfigMap?.metadata,\n      name,\n      namespace,\n    },\n    immutable,\n    data: dataMap ?? {},\n    binaryData: binaryDataMap ?? {},\n  });\n};\nexport const sanitizeToYaml = (formData: ConfigMapFormData, configMap?: ConfigMap): string => {\n  const configmapObj = getConfigmapData({ formData }, configMap);\n  return safeJSToYAML(configmapObj, 'yamlData', {\n    skipInvalid: true,\n  });\n};\n\nexport const sanitizeToForm = (\n  formData: ConfigMapFormData,\n  yamlData?: ConfigMap,\n): ConfigMapFormData => {\n  const newFormData = getConfigmapFormData(formData, yamlData);\n  return _.merge({}, initialFormData, newFormData);\n};\n\nexport const getConfigMapInitialValues = (\n  namespace: string,\n  configMap: ConfigMap,\n  isCreateFlow: boolean,\n): ConfigMapFormInitialValues => {\n  const initialConfigMapFormData = getInitialConfigMapFormData(configMap, namespace);\n  const initialYamData = sanitizeToYaml(initialConfigMapFormData, configMap);\n  return {\n    isCreateFlow,\n    editorType: EditorType.Form,\n    yamlData: initialYamData,\n    formData: {\n      ...initialConfigMapFormData,\n    },\n    resourceVersion: configMap?.metadata?.resourceVersion ?? null,\n    formReloadCount: 0,\n  };\n};\n\nconst keyValueValidation = (values) =>\n  yup.array().of(\n    yup.object({\n      key: yup\n        .string()\n        .required(i18next.t('public~Required'))\n        .test('unique', i18next.t('public~Key must be unique'), function (value) {\n          const { data, binaryData } = values.formData;\n          const existingPairs = [...data, ...binaryData].filter((d) => d);\n          const found = existingPairs.filter((v) => v.key === value);\n          return found?.length <= 1;\n        }),\n      value: yup.string(),\n    }),\n  );\n\nconst formDataSchema = (values: ConfigMapFormInitialValues) =>\n  yup.object({\n    name: yup.string().required(i18next.t('public~Required')),\n    data: keyValueValidation(values),\n    binaryData: keyValueValidation(values),\n  });\n\nexport const validationSchema = () =>\n  yup.mixed().test({\n    test(values: ConfigMapFormInitialValues) {\n      const formYamlDefinition = yup.object({\n        editorType: yup\n          .string()\n          .oneOf(Object.values(EditorType))\n          .required(i18next.t('public~Required')),\n        formData: yup.mixed().when('editorType', {\n          is: EditorType.Form,\n          then: formDataSchema(values),\n        }),\n        yamlData: yup.mixed().when('editorType', {\n          is: EditorType.YAML,\n          then: yup.string().required(i18next.t('public~Required')),\n        }),\n      });\n\n      return formYamlDefinition.validate(values, { abortEarly: false });\n    },\n  });\n"],"sourceRoot":""}