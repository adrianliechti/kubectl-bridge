{"version":3,"sources":["webpack:///./public/components/cluster-settings/keystone-idp-form.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/idp-cafile-input.tsx"],"names":["DroppableFileInput","props","loader","then","c","AddKeystonePage","navigate","inProgress","setInProgress","errorMessage","setErrorMessage","name","setName","domainName","setDomainName","url","setUrl","caFileContent","setCaFileContent","certFileContent","setCertFileContent","keyFileContent","setKeyFileContent","t","handlePromise","promise","res","thenPromise","error","err","message","Promise","reject","catchError","createTLSSecret","resolve","secret","apiVersion","kind","metadata","generateName","namespace","stringData","createCAConfigMap","ca","data","addKeystoneIDP","oauth","secretName","caName","dryRun","idp","type","mappingMethod","keystone","tlsClientCert","tlsClientKey","title","className","helpText","onSubmit","e","preventDefault","mockSecret","mockCA","promises","all","tlsSecret","configMap","catch","value","onChange","currentTarget","htmlFor","id","required","inputFileData","label","hideContents","inputFieldHelpText","variant","onClick","getOAuthResource","addIDP","patch","spec","identityProviders","op","path","queryParams","redirectToOAuthPage","mockNames","IDPNameInput","IDPCAFileInput","isRequired"],"mappings":"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","file":"keystone-idp-form-chunk-335788ec141ef014c9e1.min.js","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as _ from 'lodash-es';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { SecretModel, ConfigMapModel } from '../../models';\nimport { IdentityProvider, k8sCreate, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, AsyncComponent, PageHeading } from '../utils';\nimport { addIDP, getOAuthResource as getOAuth, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport const DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const AddKeystonePage = () => {\n  const navigate = useNavigate();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [name, setName] = React.useState('keystone');\n  const [domainName, setDomainName] = React.useState('');\n  const [url, setUrl] = React.useState('');\n  const [caFileContent, setCaFileContent] = React.useState('');\n  const [certFileContent, setCertFileContent] = React.useState('');\n  const [keyFileContent, setKeyFileContent] = React.useState('');\n\n  const { t } = useTranslation();\n\n  const thenPromise = (res) => {\n    setInProgress(false);\n    setErrorMessage('');\n    return res;\n  };\n\n  const catchError = (error) => {\n    const err = error.message || t('public~An error occurred. Please try again.');\n    setInProgress(false);\n    setErrorMessage(err);\n    return Promise.reject(err);\n  };\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n\n    return promise.then(\n      (res) => thenPromise(res),\n      (error) => catchError(error),\n    );\n  };\n\n  const getOAuthResource = () => {\n    return handlePromise(getOAuth());\n  };\n\n  const createTLSSecret = () => {\n    if (!certFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'keystone-tls-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        'tls.crt': certFileContent,\n        'tls.key': keyFileContent,\n      },\n    };\n\n    return handlePromise(k8sCreate(SecretModel, secret));\n  };\n\n  const createCAConfigMap = () => {\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'keystone-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return handlePromise(k8sCreate(ConfigMapModel, ca));\n  };\n\n  const addKeystoneIDP = (\n    oauth: OAuthKind,\n    secretName: string,\n    caName: string,\n    dryRun?: boolean,\n  ) => {\n    const idp: IdentityProvider = {\n      name,\n      type: 'Keystone',\n      mappingMethod: 'claim',\n      keystone: {\n        domainName,\n        url,\n      },\n    };\n\n    if (caName) {\n      idp.keystone.ca = {\n        name: caName,\n      };\n    }\n\n    if (secretName) {\n      idp.keystone.tlsClientCert = {\n        name: secretName,\n      };\n      idp.keystone.tlsClientKey = {\n        name: secretName,\n      };\n    }\n\n    return handlePromise(addIDP(oauth, idp, dryRun));\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    if (_.isEmpty(keyFileContent) !== _.isEmpty(certFileContent)) {\n      setErrorMessage(\n        t('public~Values for certificate and key should both be either excluded or provided.'),\n      );\n      return;\n    }\n    // Clear any previous errors.\n    setErrorMessage('');\n    getOAuthResource().then((oauth: OAuthKind) => {\n      const mockSecret = certFileContent ? mockNames.secret : '';\n      const mockCA = caFileContent ? mockNames.ca : '';\n      addKeystoneIDP(oauth, mockSecret, mockCA, true)\n        .then(() => {\n          const promises = [createTLSSecret(), createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([tlsSecret, configMap]) => {\n              const caName = configMap ? configMap.metadata.name : '';\n              const secretName = tlsSecret ? tlsSecret.metadata.name : '';\n              return addKeystoneIDP(oauth, secretName, caName);\n            })\n            .then(() => {\n              redirectToOAuthPage(navigate);\n            });\n        })\n        .catch((err) => {\n          setErrorMessage(err);\n        });\n    });\n  };\n\n  const title = t('public~Add Identity Provider: Keystone Authentication');\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading\n        title={title}\n        helpText={t(\n          'public~Adding Keystone enables shared authentication with an OpenStack server configured to store users in an internal Keystone database.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={submit} name=\"form\" className=\"co-m-pane__body-group\">\n          <IDPNameInput value={name} onChange={(e) => setName(e.currentTarget.value)} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"domain-name\">\n              {t('public~Domain name')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={(e) => setDomainName(e.currentTarget.value)}\n              value={domainName}\n              id=\"domain-name\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"url\">\n              {t('public~URL')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"url\"\n              onChange={(e) => setUrl(e.currentTarget.value)}\n              value={url}\n              id=\"url\"\n              aria-describedby=\"idp-url-help\"\n              required\n            />\n            <p className=\"help-block\" id=\"idp-url-help\">\n              {t('public~The remote URL to connect to.')}\n            </p>\n          </div>\n          <IDPCAFileInput value={caFileContent} onChange={(c: string) => setCaFileContent(c)} />\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={(c: string) => setCertFileContent(c)}\n              inputFileData={certFileContent}\n              id=\"cert-file-input\"\n              label={t('public~Certificate')}\n              hideContents\n              inputFieldHelpText={t(\n                'public~PEM-encoded TLS client certificate to present when connecting to the server.',\n              )}\n            />\n          </div>\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={(c: string) => setKeyFileContent(c)}\n              inputFileData={keyFileContent}\n              id=\"key-file-input\"\n              label={t('public~Key')}\n              hideContents\n              inputFieldHelpText={t(\n                'public~PEM-encoded TLS private key for the client certificate. Required if certificate is specified.',\n              )}\n            />\n          </div>\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                {t('public~Add')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport type AddKeystonePageState = {\n  name: string;\n  domainName: string;\n  url: string;\n  caFileContent: string;\n  certFileContent: string;\n  keyFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { resourcePathFromModel } from '../utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? { queryParams: { dryRun: 'All' } } : {});\n};\n\nexport const redirectToOAuthPage = (navigate) => {\n  const path = `${resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME)}?idpAdded=true`;\n  navigate(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n        {t('public~Name')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        onChange={onChange}\n        value={value}\n        aria-describedby=\"idp-name-help\"\n        id=\"idp-name\"\n        required\n      />\n      <p className=\"help-block\" id=\"idp-name-help\">\n        {t('public~Unique name of the new identity provider. This cannot be changed later.')}\n      </p>\n    </div>\n  );\n};\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <DroppableFileInput\n        onChange={onChange}\n        inputFileData={value}\n        id=\"idp-file-input\"\n        label={t('public~CA file')}\n        isRequired={isRequired}\n        hideContents\n      />\n    </div>\n  );\n};\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n"],"sourceRoot":""}