{"version":3,"sources":["webpack:///./public/components/build-config.tsx"],"names":["startBuildAction","kind","buildConfig","labelKey","callback","then","build","catch","err","error","message","accessReview","group","apiGroup","resource","plural","subresource","name","metadata","namespace","verb","getBuildConfigKebabActions","latestBuild","model","clone","hidden","startLastBuildAction","getExtensionsActionsForKind","factory","common","BuildConfigsDetails","obj","hasPipeline","spec","strategy","type","JenkinsPipeline","t","className","text","pages","details","editYaml","builds","showTitle","selector","envEditor","events","BuildConfigsDetailsPage","props","buildModel","buildsLoaded","buildsLoadError","matchLabels","isList","reduce","currentBuild","latestBuildTime","Date","creationTimestamp","getTime","getLatestBuild","menuActions","customData","displayName","tableColumnClasses","columnClass","BuildConfigsTableRow","columnID","status","phase","timestamp","startTimestamp","completionTimestamp","actions","buildStrategy","getBuildStatus","BuildConfigsList","BuildConfigsTableHeader","title","sortField","transforms","id","sortFunc","data","latestByBuildName","acc","labels","newBuild","prevBuild","prevCreationTime","isBuildNewerThen","loaded","buildResource","map","Header","Row","customSorts","latestRunDuration","virtualize","BuildConfigsPage","params","allStrategies","Docker","Devfile","Source","Custom","statusFilters","filters","filterGroupName","reducer","items","filter","filterValue","selected","length","includes","createProps","to","ns","ListComponent","canCreate","filterLabel","rowFilters"],"mappings":"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","file":"build-config-chunk-4ba9dacb050e98b99c8d.min.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, redirect } from 'react-router-dom-v5-compat';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  K8sResourceKind,\n  K8sResourceKindReference,\n  referenceFor,\n  referenceForModel,\n} from '../module/k8s';\nimport { cloneBuild, startBuild } from '../module/k8s/builds';\nimport {\n  DetailsPage,\n  ListPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n  TableProps,\n  DetailsPageProps,\n} from './factory';\nimport { errorModal } from './modals';\nimport {\n  BuildHooks,\n  BuildStrategy,\n  Kebab,\n  KebabAction,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  resourceObjPath,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n  WebhookTriggers,\n} from './utils';\nimport {\n  BuildsPage,\n  BuildEnvironmentComponent,\n  BuildStrategyType,\n  PipelineBuildStrategyAlert,\n} from './build';\nimport { ResourceEventStream } from './events';\nimport { BuildConfigModel, BuildModel } from '../models';\nimport Helmet from 'react-helmet';\nimport { useK8sWatchResource } from './utils/k8s-watch-hook';\nimport { Status } from '@console/shared';\nimport { displayDurationInWords } from './utils/build-utils';\n\nconst BuildConfigsReference: K8sResourceKindReference = 'BuildConfig';\nconst BuildsReference: K8sResourceKindReference = 'Build';\n\nconst startBuildAction: KebabAction = (kind, buildConfig) => ({\n  // t('public~Start build')\n  labelKey: 'public~Start build',\n  callback: () =>\n    startBuild(buildConfig)\n      .then((build) => {\n        return redirect(resourceObjPath(build, referenceFor(build)));\n      })\n      .catch((err) => {\n        const error = err.message;\n        errorModal({ error });\n      }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    subresource: 'instantiate',\n    name: buildConfig.metadata.name,\n    namespace: buildConfig.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst startLastBuildAction: KebabAction = (kind, buildConfig: BuildConfig, latestBuild) => {\n  return {\n    // t('public~Start last run')\n    labelKey: 'public~Start last run',\n    callback: () =>\n      cloneBuild(latestBuild)\n        .then((clone) => {\n          return redirect(resourceObjPath(clone, referenceFor(clone)));\n        })\n        .catch((err) => {\n          const error = err.message;\n          errorModal({ error });\n        }),\n    hidden: !latestBuild,\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      subresource: 'instantiate',\n      name: buildConfig.metadata.name,\n      namespace: buildConfig.metadata.namespace,\n      verb: 'create',\n    },\n  };\n};\n\nconst getBuildConfigKebabActions = (latestBuild?: K8sResourceKind): KebabAction[] => [\n  startBuildAction,\n  (model, resource) => startLastBuildAction(model, resource, latestBuild),\n  ...Kebab.getExtensionsActionsForKind(BuildConfigModel),\n  ...Kebab.factory.common,\n];\n\nexport const BuildConfigsDetails: React.SFC<BuildConfigsDetailsProps> = ({ obj: buildConfig }) => {\n  const hasPipeline = buildConfig.spec.strategy.type === BuildStrategyType.JenkinsPipeline;\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        {hasPipeline && <PipelineBuildStrategyAlert obj={buildConfig} />}\n        <SectionHeading text={t('public~BuildConfig details')} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={buildConfig} />\n          </div>\n          <div className=\"col-sm-6\">\n            <BuildStrategy resource={buildConfig} />\n          </div>\n        </div>\n      </div>\n      <WebhookTriggers resource={buildConfig} />\n      <BuildHooks resource={buildConfig} />\n    </>\n  );\n};\n\nconst BuildsTabPage = ({ obj: buildConfig }) => (\n  <BuildsPage\n    namespace={buildConfig.metadata.namespace}\n    showTitle={false}\n    selector={{ 'openshift.io/build-config.name': buildConfig.metadata.name }}\n  />\n);\n\nconst pages = [\n  navFactory.details(BuildConfigsDetails),\n  navFactory.editYaml(),\n  navFactory.builds(BuildsTabPage),\n  navFactory.envEditor(BuildEnvironmentComponent),\n  navFactory.events(ResourceEventStream),\n];\n\nconst getLatestBuild = (builds) => {\n  return builds.reduce((latestBuild, currentBuild) => {\n    const latestBuildTime = new Date(latestBuild?.metadata?.creationTimestamp).getTime();\n    const currentBuildTime = new Date(currentBuild.metadata.creationTimestamp).getTime();\n\n    return currentBuildTime > latestBuildTime ? currentBuild : latestBuild;\n  }, builds[0]);\n};\n\nexport const BuildConfigsDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const buildModel = referenceForModel(BuildModel);\n  const [builds, buildsLoaded, buildsLoadError] = useK8sWatchResource<K8sResourceKind[]>({\n    kind: buildModel,\n    namespace: props.namespace,\n    selector: {\n      matchLabels: {\n        'openshift.io/build-config.name': props.name,\n      },\n    },\n    isList: true,\n  });\n  const latestBuild = buildsLoaded && !buildsLoadError ? getLatestBuild(builds) : null;\n  const menuActions: KebabAction[] = getBuildConfigKebabActions(latestBuild);\n  return (\n    <DetailsPage\n      {...props}\n      kind={BuildConfigsReference}\n      menuActions={menuActions}\n      pages={pages}\n      customData={latestBuild}\n    />\n  );\n};\nBuildConfigsDetailsPage.displayName = 'BuildConfigsDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-lg',\n  Kebab.columnClass,\n];\n\nconst BuildConfigsTableRow: React.FC<RowFunctionArgs<BuildConfig>> = ({ obj }) => {\n  const latestBuild = obj?.latestBuild;\n  const menuActions: KebabAction[] = getBuildConfigKebabActions(latestBuild);\n\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={BuildConfigsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {latestBuild ? (\n          <ResourceLink\n            kind={BuildsReference}\n            name={latestBuild.metadata?.name}\n            namespace={latestBuild.metadata?.namespace}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {latestBuild ? <Status status={latestBuild.status?.phase} /> : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {latestBuild ? <Timestamp timestamp={latestBuild.metadata?.creationTimestamp} /> : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {displayDurationInWords(\n          latestBuild?.status?.startTimestamp,\n          latestBuild?.status?.completionTimestamp,\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={menuActions} kind={BuildConfigsReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nconst isBuildNewerThen = (newBuild: K8sResourceKind, prevBuild: K8sResourceKind | undefined) => {\n  const prevCreationTime = new Date(prevBuild?.metadata?.creationTimestamp);\n  const newCreationTime = new Date(newBuild?.metadata?.creationTimestamp);\n  const timeDifference = newCreationTime.getTime() - prevCreationTime.getTime();\n  return timeDifference > 0;\n};\n\nconst buildStrategy = (buildConfig: K8sResourceKind): BuildStrategyType =>\n  buildConfig.spec.strategy.type;\n\nconst getBuildStatus = (buildConfig: BuildConfig) => {\n  return buildConfig?.latestBuild?.status?.phase || 'Unknown';\n};\n\nexport const BuildConfigsList: React.SFC<BuildConfigsListProps> = (props) => {\n  const { t } = useTranslation();\n  const BuildConfigsTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Last run'),\n        transforms: [sortable],\n        sortField: 'latestBuild.metadata.name',\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Last run status'),\n        transforms: [sortable],\n        sortField: 'latestBuild.status.phase',\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('public~Last run time'),\n        transforms: [sortable],\n        sortField: 'latestBuild.status.completionTimestamp',\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: t('public~Last run duration'),\n        transforms: [sortable],\n        sortFunc: 'latestRunDuration',\n        props: { className: tableColumnClasses[5] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[6] },\n      },\n    ];\n  };\n  BuildConfigsTableHeader.displayName = 'BuildConfigsTableHeader';\n  const buildModel = referenceForModel(BuildModel);\n  const BUILDCONFIG_TO_BUILD_REFERENCE_LABEL = 'openshift.io/build-config.name';\n  const [builds, buildsLoaded, buildsLoadError] = useK8sWatchResource<K8sResourceKind[]>({\n    kind: buildModel,\n    namespace: props.namespace,\n    isList: true,\n  });\n  const data = React.useMemo<CustomData>(\n    () => ({\n      builds: {\n        latestByBuildName: builds.reduce<Record<string, K8sResourceKind>>((acc, build) => {\n          const name = build.metadata.labels?.[BUILDCONFIG_TO_BUILD_REFERENCE_LABEL];\n          if (\n            !acc[`${name}-${build.metadata.namespace}`] ||\n            isBuildNewerThen(build, acc[`${name}-${build.metadata.namespace}`])\n          ) {\n            acc[`${name}-${build.metadata.namespace}`] = build;\n          }\n          return acc;\n        }, {}),\n        loaded: buildsLoaded,\n        error: buildsLoadError,\n      },\n    }),\n    [builds, buildsLoaded, buildsLoadError],\n  );\n\n  const buildResource = props.data\n    ? props.data.map((buildConfig) => {\n        buildConfig.latestBuild =\n          data.builds.latestByBuildName[\n            `${buildConfig.metadata.name}-${buildConfig.metadata.namespace}`\n          ];\n        return buildConfig;\n      })\n    : [];\n\n  return (\n    <Table\n      {...props}\n      data={buildResource}\n      aria-label={t('public~BuildConfigs')}\n      Header={BuildConfigsTableHeader}\n      Row={BuildConfigsTableRow}\n      customSorts={{\n        latestRunDuration: (obj) =>\n          displayDurationInWords(\n            obj?.latestBuild?.status?.startTimestamp,\n            obj?.latestBuild?.status?.completionTimestamp,\n          ),\n      }}\n      virtualize\n    />\n  );\n};\n\nBuildConfigsList.displayName = 'BuildConfigsList';\n\nexport const BuildConfigsPage: React.FC<BuildConfigsPageProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const allStrategies = [\n    { id: BuildStrategyType.Docker, title: t('public~Docker') },\n    { id: BuildStrategyType.Devfile, title: t('public~Devfile') },\n    { id: BuildStrategyType.JenkinsPipeline, title: t('public~JenkinsPipeline') },\n    { id: BuildStrategyType.Source, title: t('public~Source') },\n    { id: BuildStrategyType.Custom, title: t('public~Custom') },\n  ];\n\n  const statusFilters = [\n    { id: 'New', title: t('public~New') },\n    { id: 'Pending', title: t('public~Pending') },\n    { id: 'Running', title: t('public~Running') },\n    { id: 'Complete', title: t('public~Complete') },\n    { id: 'Failed', title: t('public~Failed') },\n    { id: 'Error', title: t('public~Error') },\n    { id: 'Cancelled', title: t('public~Cancelled') },\n    { id: 'Unknown', title: t('public~Unknown') },\n  ];\n\n  const filters = [\n    {\n      filterGroupName: t('public~Build strategy'),\n      type: 'build-strategy',\n      reducer: buildStrategy,\n      items: allStrategies,\n    },\n    {\n      filterGroupName: t('public~Build status'),\n      type: 'build-run-status',\n      reducer: getBuildStatus,\n      items: statusFilters,\n      filter: (filterValue, build: BuildConfig): boolean => {\n        const status = build?.latestBuild?.status?.phase ?? 'Unknown';\n        return !filterValue.selected?.length || (status && filterValue.selected.includes(status));\n      },\n    },\n  ];\n\n  const namespace = props.namespace ?? params?.ns;\n  const createProps = {\n    to: `/k8s/ns/${namespace || 'default'}/buildconfigs/~new/form`,\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('public~BuildConfigs')}</title>\n      </Helmet>\n      <ListPage\n        {...props}\n        title={t('public~BuildConfigs')}\n        kind={BuildConfigsReference}\n        ListComponent={BuildConfigsList}\n        canCreate={props.canCreate ?? true}\n        createProps={createProps}\n        filterLabel={props.filterLabel}\n        rowFilters={filters}\n      />\n    </>\n  );\n};\nBuildConfigsPage.displayName = 'BuildConfigsListPage';\n\ntype BuildConfigsListProps = TableProps & {\n  namespace: string;\n};\n\nexport type BuildConfigsDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type BuildConfigsPageProps = {\n  namespace: string;\n  canCreate?: boolean;\n  filterLabel?: string;\n  mock?: boolean;\n};\n\ntype CustomData = {\n  builds: {\n    latestByBuildName: Record<string, K8sResourceKind>;\n    loaded: boolean;\n    error: Error | undefined;\n  };\n};\n\ntype BuildConfig = K8sResourceKind & {\n  latestBuild?: K8sResourceKind;\n};\n"],"sourceRoot":""}