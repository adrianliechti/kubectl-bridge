{"version":3,"sources":["webpack:///./packages/console-app/src/components/network-policies/network-policy-form.tsx","webpack:///./packages/console-app/src/components/network-policies/NADsSelector.tsx","webpack:///./packages/network-attachment-definition-plugin/src/index.ts","webpack:///./packages/console-app/src/components/network-policies/SelectMultiTypeahead/SelectMultiTypeahead.tsx","webpack:///./packages/console-app/src/components/network-policies/SelectMultiTypeahead/Toggle.tsx","webpack:///./packages/console-app/src/components/network-policies/network-policy-rule-config.tsx","webpack:///./packages/console-app/src/components/network-policies/network-policy-add-peer-dropdown.tsx","webpack:///./packages/console-app/src/components/network-policies/network-policy-peer-ipblock.tsx","webpack:///./packages/console-app/src/components/network-policies/network-policy-peer-selectors.tsx","webpack:///./packages/console-app/src/components/network-policies/network-policy-ports.tsx","webpack:///./packages/console-app/src/components/network-policies/create-network-policy.tsx","webpack:///./public/components/modals/confirm-modal.jsx","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./packages/console-shared/src/components/synced-editor/index.tsx","webpack:///./packages/console-app/src/components/network-policies/SelectMultiTypeahead/constants.ts","webpack:///./packages/console-app/src/components/network-policies/network-policy-model.ts","webpack:///./public/module/k8s/network.ts","webpack:///./packages/network-attachment-definition-plugin/src/models/index.ts","webpack:///./packages/console-app/src/components/network-policies/SelectMultiTypeahead/utils.ts","webpack:///./packages/console-app/src/components/network-policies/network-policy-conditional-selector.tsx","webpack:///./packages/console-app/src/components/network-policies/network-policy-selector-preview.tsx","webpack:///./packages/console-app/src/components/network-policies/useIsMultiNetworkPolicy.tsx"],"names":["emptyRule","key","peers","ports","NetworkPolicyForm","formData","onChange","t","isOpenShift","OPENSHIFT","ns","namespace","normalizedK8S","converted","networkPolicy","setNetworkPolicy","inProgress","setInProgress","error","setError","showSDNAlert","setShowSDNAlert","networkFeatures","networkFeaturesLoaded","podsPreviewPopoverRef","isMulti","model","className","variant","danger","title","onPolicyChange","policy","updateIngressRules","rules","ingress","updateEgressRules","egress","removeAll","msg","execute","message","btnText","executeFn","Promise","resolve","onSubmit","event","preventDefault","invalid","then","push","name","catch","err","undefined","PolicyEgress","PolicyPeerIPBlockExceptions","actionClose","onClose","href","text","htmlFor","type","currentTarget","value","placeholder","id","required","selectorType","helpText","values","podSelector","updated","dataTest","ref","isInline","policyNamespace","popoverRef","headingLevel","role","label","denyAll","checked","isChecked","toggleAriaLabel","isExpanded","header","titleText","titleDescription","actions","isDisabled","length","onClick","map","rule","idx","direction","r","newRules","onRemove","slice","removeIngressRule","removeEgressRule","errorMessage","goBack","NetworkAttachmentDefinitionModelGroupVersionKind","nads","loaded","loadError","groupVersionKind","isList","nadsDefault","loadedDefaultNads","loadErrorDefaultNads","nadsOptions","nad","fieldId","isRequired","options","selected","policyFor","setSelected","newNADs","isOpen","setIsOpen","inputValue","setInputValue","focusedItemIndex","setFocusedItemIndex","textInputRef","selectOptions","onSelect","includes","filter","selection","current","focus","onOpenChange","toggle","toggleRef","isAriaMultiselectable","option","index","replace","isFocused","children","onToggleClick","innerRef","isFullWidth","isPlain","autoComplete","_event","onKeyDown","enabledMenuItems","menuItem","firstMenuItem","focusedItem","prevIsOpen","indexToFocus","ev","stopPropagation","plain","getPeerRuleTitle","peer","ipBlock","namespaceSelector","emptyPeer","cidr","except","NetworkPolicyRuleConfigPanel","props","peersHelp","component","peerPanel","podSel","nsSel","removePeer","NetworkPolicyAddPeerDropdown","dropDownClassName","items","sameNS","anyNS","ipblock","noSelection","buttonClassName","NetworkPolicyPeerIPBlock","exc","handleExceptionsChange","NetworkPolicyPeerSelectors","helpTextPodSelector","NetworkPolicyPorts","onSingleChange","port","TCP","UDP","SCTP","protocol","CreateNetworkPolicy","initialPolicy","formHelpText","yamlHelpText","setHelpText","k8sObj","kind","context","formContext","yamlContext","FormEditor","initialData","initialType","Form","onChangeEditorType","obj","reconverted","Error","YAMLEditor","initialYAML","create","hideHeader","initialResource","lastViewUserSettingKey","displayConversionError","ConfirmModal","super","this","_submit","bind","_cancel","cancel","handlePromise","supressNotifications","close","titleKey","messageKey","btnTextKey","cancelText","cancelTextKey","submitDanger","state","submitText","propTypes","confirmModal","useK8sGet","opts","data","setData","setLoaded","setLoadError","resource","YAML_KEY_ORDER","YAML_TO_JS_OPTIONS","skipInvalid","sortKeys","a","b","SyncedEditor","prune","setFormData","yaml","setYAML","switchError","setSwitchError","yamlWarning","setYAMLWarning","editorType","setEditorType","handleFormDataChange","newFormData","changeEditorType","newType","YAML","newYAML","js","String","NO_RESULTS_VALUE","isError","result","isNetworkPolicyConversionError","factorOutError","list","find","errors","path","selectorToK8s","selector","filtered","pair","matchLabels","isValidSelector","Object","keys","ruleToK8s","res","p","e","from","to","Number","isNaN","networkPolicyToK8sResource","policyTypes","apiVersion","apiGroup","metadata","spec","annotations","join","checkRulesValidity","checkNetworkPolicyValidity","errIn","errEg","networkPolicyNormalizeK8sResource","clone","forEach","xgress","selectorFromK8s","matchExpressions","val","peerFromK8s","out","ipblockFromK8s","ruleFromK8s","peersKey","portFromK8s","rulePeers","rulesFromK8s","isAffected","networkPolicyFromK8sResource","affectsEgress","affectsIngress","ingressRules","egressRules","split","trim","ClusterNetworkFeature","getFeatureState","hasOwnProperty","useClusterNetworkFeatures","features","setFeatures","featuresLoaded","setFeaturesLoaded","config","configLoaded","NetworkAttachmentDefinitionModel","labelPlural","plural","namespaced","abbr","crd","legacyPluralURL","filterOptions","filteredOptions","toLowerCase","handleMenuArrowKeys","NameValueEditorComponent","loader","c","NameValueEditor","NetworkPolicyConditionalSelector","isVisible","setVisible","addSelectorText","secondHelpText","nameValuePairs","valueString","nameString","addString","readOnly","allowSorting","updateParentData","onLastItemRemoved","NetworkPolicySelectorPreview","allNamespaces","bodyContent","PodsPreview","triggerRef","position","allowedSelector","safeSelector","match","useWatch","watchPods","safeNsSelector","offendingNsSelector","safePodSelector","offendingPodSelector","watchedPods","watchPodLoaded","watchPodError","watchedNs","watchNsLoaded","watchNsError","selectorError","offendingSelector","matchedNs","set","Set","add","preview","pods","total","filteredPods","pod","has","podsByNs","icon","defaultExpanded","labelList","labelBadges","color","podsFilterQuery","Label","encodeURIComponent","hasGuides","target","rel","shown","location","pathname"],"mappings":"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","file":"create-network-policy-chunk-2585afa5f13368d91d81.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  ActionGroup,\n  Alert,\n  Button,\n  Checkbox,\n  Title,\n  Form,\n  FormFieldGroupExpandable,\n  FormFieldGroupHeader,\n  FormGroup,\n  AlertActionCloseButton,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { confirmModal } from '@console/internal/components/modals/confirm-modal';\nimport {\n  ButtonBar,\n  ExternalLink,\n  getNetworkPolicyDocURL,\n  history,\n  isManaged,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport { MultiNetworkPolicyModel, NetworkPolicyModel } from '@console/internal/models';\nimport { k8sCreate, NetworkPolicyKind } from '@console/internal/module/k8s';\nimport { useClusterNetworkFeatures } from '@console/internal/module/k8s/network';\nimport { FLAGS, YellowExclamationTriangleIcon } from '@console/shared';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport NADsSelector from './NADsSelector';\nimport { NetworkPolicyConditionalSelector } from './network-policy-conditional-selector';\nimport {\n  isNetworkPolicyConversionError,\n  NetworkPolicy,\n  networkPolicyFromK8sResource,\n  networkPolicyNormalizeK8sResource,\n  NetworkPolicyRule,\n  networkPolicyToK8sResource,\n  checkNetworkPolicyValidity,\n} from './network-policy-model';\nimport { NetworkPolicyRuleConfigPanel } from './network-policy-rule-config';\nimport { NetworkPolicySelectorPreview } from './network-policy-selector-preview';\nimport useIsMultiNetworkPolicy from './useIsMultiNetworkPolicy';\n\nconst emptyRule = (): NetworkPolicyRule => {\n  return {\n    key: _.uniqueId(),\n    peers: [],\n    ports: [],\n  };\n};\n\ntype NetworkPolicyFormProps = {\n  formData: NetworkPolicyKind;\n  onChange: (newFormData: NetworkPolicyKind) => void;\n};\n\nexport const NetworkPolicyForm: React.FC<NetworkPolicyFormProps> = ({ formData, onChange }) => {\n  const { t } = useTranslation();\n  const isOpenShift = useFlag(FLAGS.OPENSHIFT);\n\n  const { ns: namespace } = useParams();\n\n  const normalizedK8S = networkPolicyNormalizeK8sResource(formData);\n  const converted = networkPolicyFromK8sResource(normalizedK8S, t);\n  const [networkPolicy, setNetworkPolicy] = React.useState(converted);\n\n  const [inProgress, setInProgress] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const [showSDNAlert, setShowSDNAlert] = React.useState(true);\n  const [networkFeatures, networkFeaturesLoaded] = useClusterNetworkFeatures();\n  const podsPreviewPopoverRef = React.useRef();\n\n  const isMulti = useIsMultiNetworkPolicy();\n\n  const model = isMulti ? MultiNetworkPolicyModel : NetworkPolicyModel;\n\n  if (isNetworkPolicyConversionError(networkPolicy)) {\n    // Note, this case is not expected to happen. Validity of the network policy for form should have been checked prior to showing this form.\n    // When used with the SyncedEditor, an error is thrown when the data is invalid, that should prevent the user from opening the form with invalid data, hence not running into this conditional block.\n    return (\n      <div className=\"co-m-pane__body\">\n        <Alert\n          variant={AlertVariant.danger}\n          title={t(\n            'console-app~This NetworkPolicy cannot be displayed in form. Please switch to the YAML editor.',\n          )}\n        >\n          {networkPolicy.error}\n        </Alert>\n      </div>\n    );\n  }\n\n  const onPolicyChange = (policy: NetworkPolicy) => {\n    setNetworkPolicy(policy);\n    onChange(networkPolicyToK8sResource(policy, isMulti));\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    onPolicyChange({ ...networkPolicy, name: event.currentTarget.value });\n\n  const handleMainPodSelectorChange = (updated: string[][]) => {\n    onPolicyChange({ ...networkPolicy, podSelector: updated });\n  };\n\n  const handleDenyAllIngress: React.ReactEventHandler<HTMLInputElement> = (event) =>\n    onPolicyChange({\n      ...networkPolicy,\n      ingress: { ...networkPolicy.ingress, denyAll: event.currentTarget.checked },\n    });\n\n  const handleDenyAllEgress: React.ReactEventHandler<HTMLInputElement> = (event) =>\n    onPolicyChange({\n      ...networkPolicy,\n      egress: { ...networkPolicy.egress, denyAll: event.currentTarget.checked },\n    });\n\n  const updateIngressRules = (rules: NetworkPolicyRule[]) =>\n    onPolicyChange({ ...networkPolicy, ingress: { ...networkPolicy.ingress, rules } });\n\n  const updateEgressRules = (rules: NetworkPolicyRule[]) =>\n    onPolicyChange({ ...networkPolicy, egress: { ...networkPolicy.egress, rules } });\n\n  const addIngressRule = () => {\n    updateIngressRules([emptyRule(), ...networkPolicy.ingress.rules]);\n  };\n\n  const addEgressRule = () => {\n    updateEgressRules([emptyRule(), ...networkPolicy.egress.rules]);\n  };\n\n  const removeAll = (msg: string, execute: () => void) => {\n    confirmModal({\n      title: (\n        <>\n          <YellowExclamationTriangleIcon className=\"co-icon-space-r\" />\n          {t('console-app~Are you sure?')}\n        </>\n      ),\n      message: msg,\n      btnText: t('console-app~Remove all'),\n      executeFn: () => {\n        execute();\n        return Promise.resolve();\n      },\n    });\n  };\n\n  const removeAllIngress = () => {\n    removeAll(\n      t(\n        'console-app~This action will remove all rules within the Ingress section and cannot be undone.',\n      ),\n      () => updateIngressRules([]),\n    );\n  };\n\n  const removeAllEgress = () => {\n    removeAll(\n      t(\n        'console-app~This action will remove all rules within the Egress section and cannot be undone.',\n      ),\n      () => updateEgressRules([]),\n    );\n  };\n\n  const removeIngressRule = (idx: number) => {\n    updateIngressRules([\n      ...networkPolicy.ingress.rules.slice(0, idx),\n      ...networkPolicy.ingress.rules.slice(idx + 1),\n    ]);\n  };\n\n  const removeEgressRule = (idx: number) => {\n    updateEgressRules([\n      ...networkPolicy.egress.rules.slice(0, idx),\n      ...networkPolicy.egress.rules.slice(idx + 1),\n    ]);\n  };\n\n  const save = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const invalid = checkNetworkPolicyValidity(networkPolicy, t);\n    if (invalid) {\n      setError(invalid.error);\n      return;\n    }\n\n    const policy = networkPolicyToK8sResource(networkPolicy, isMulti);\n    setInProgress(true);\n    k8sCreate(model, policy)\n      .then(() => {\n        setInProgress(false);\n        history.push(resourcePathFromModel(model, networkPolicy.name, networkPolicy.namespace));\n      })\n      .catch((err) => {\n        setError(err.message);\n        setInProgress(false);\n      });\n  };\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <Form onSubmit={save} className=\"co-create-networkpolicy\">\n        {showSDNAlert &&\n          networkFeaturesLoaded &&\n          networkFeatures?.PolicyEgress === undefined &&\n          networkFeatures?.PolicyPeerIPBlockExceptions === undefined && (\n            <Alert\n              variant=\"info\"\n              title={t('console-app~When using the OpenShift SDN cluster network provider:')}\n              actionClose={<AlertActionCloseButton onClose={() => setShowSDNAlert(false)} />}\n            >\n              <ul>\n                <li>{t('console-app~Egress network policy is not supported.')}</li>\n                <li>\n                  {t(\n                    'console-app~IP block exceptions are not supported and would cause the entire IP block section to be ignored.',\n                  )}\n                </li>\n              </ul>\n              <p>\n                {t('Refer to your cluster administrator to know which network provider is used.')}\n              </p>\n              {!isManaged() && (\n                <p>\n                  {t('console-app~More information:')}&nbsp;\n                  <ExternalLink\n                    href={getNetworkPolicyDocURL(isOpenShift)}\n                    text={t('console-app~NetworkPolicies documentation')}\n                  />\n                </p>\n              )}\n            </Alert>\n          )}\n        <div className=\"form-group co-create-networkpolicy__name\">\n          <label className=\"co-required\" htmlFor=\"name\">\n            {t('console-app~Policy name')}\n          </label>\n          <input\n            className=\"pf-v5-c-form-control\"\n            type=\"text\"\n            onChange={handleNameChange}\n            value={networkPolicy.name}\n            placeholder=\"my-policy\"\n            id=\"name\"\n            name=\"name\"\n            required\n          />\n        </div>\n        {isMulti && (\n          <NADsSelector\n            namespace={namespace as string}\n            networkPolicy={networkPolicy}\n            onPolicyChange={onPolicyChange}\n          />\n        )}\n        <div className=\"form-group co-create-networkpolicy__podselector\">\n          <NetworkPolicyConditionalSelector\n            selectorType=\"pod\"\n            helpText={t(\n              'console-app~If no pod selector is provided, the policy will apply to all pods in the namespace.',\n            )}\n            values={networkPolicy.podSelector}\n            onChange={handleMainPodSelectorChange}\n            dataTest=\"main-pod-selector\"\n          />\n          <p>\n            <Trans ns=\"console-app\">\n              Show a preview of the{' '}\n              <Button\n                data-test=\"show-affected-pods\"\n                ref={podsPreviewPopoverRef}\n                variant=\"link\"\n                isInline\n              >\n                affected pods\n              </Button>{' '}\n              that this policy will apply to\n            </Trans>\n          </p>\n          <NetworkPolicySelectorPreview\n            policyNamespace={networkPolicy.namespace}\n            podSelector={networkPolicy.podSelector}\n            popoverRef={podsPreviewPopoverRef}\n            dataTest=\"policy-pods-preview\"\n          />\n        </div>\n        <Title headingLevel=\"h2\">{t('console-app~Policy type')}</Title>\n        <FormGroup\n          role=\"group\"\n          isInline\n          label={t('console-app~Select default ingress and egress deny rules')}\n        >\n          <Checkbox\n            label={t('console-app~Deny all ingress traffic')}\n            onChange={handleDenyAllIngress}\n            isChecked={networkPolicy.ingress.denyAll}\n            name=\"denyAllIngress\"\n            id=\"denyAllIngress\"\n          />\n          {networkFeaturesLoaded && networkFeatures.PolicyEgress !== false && (\n            <Checkbox\n              label={t('console-app~Deny all egress traffic')}\n              onChange={handleDenyAllEgress}\n              isChecked={networkPolicy.egress.denyAll}\n              name=\"denyAllEgress\"\n              id=\"denyAllEgress\"\n            />\n          )}\n        </FormGroup>\n        {!networkPolicy.ingress.denyAll && (\n          <FormFieldGroupExpandable\n            toggleAriaLabel=\"Ingress\"\n            className=\"co-create-networkpolicy__expandable-xl\"\n            isExpanded\n            header={\n              <FormFieldGroupHeader\n                titleText={{ text: t('console-app~Ingress'), id: 'ingress-header' }}\n                titleDescription={t(\n                  'console-app~Add ingress rules to be applied to your selected pods. Traffic is allowed from pods if it matches at least one rule.',\n                )}\n                actions={\n                  <>\n                    <Button\n                      variant=\"link\"\n                      isDisabled={networkPolicy.ingress.rules.length === 0}\n                      onClick={removeAllIngress}\n                      data-test=\"remove-all-ingress\"\n                    >\n                      {t('console-app~Remove all')}\n                    </Button>\n                    <Button data-test=\"add-ingress\" variant=\"secondary\" onClick={addIngressRule}>\n                      {t('console-app~Add ingress rule')}\n                    </Button>\n                  </>\n                }\n              />\n            }\n          >\n            {networkPolicy.ingress.rules.map((rule, idx) => (\n              <NetworkPolicyRuleConfigPanel\n                key={rule.key}\n                policyNamespace={networkPolicy.namespace}\n                direction=\"ingress\"\n                rule={rule}\n                onChange={(r) => {\n                  const newRules = [...networkPolicy.ingress.rules];\n                  newRules[idx] = r;\n                  updateIngressRules(newRules);\n                }}\n                onRemove={() => removeIngressRule(idx)}\n              />\n            ))}\n          </FormFieldGroupExpandable>\n        )}\n        {!networkPolicy.egress.denyAll &&\n          networkFeaturesLoaded &&\n          networkFeatures.PolicyEgress !== false && (\n            <FormFieldGroupExpandable\n              toggleAriaLabel=\"Egress\"\n              className=\"co-create-networkpolicy__expandable-xl\"\n              isExpanded\n              header={\n                <FormFieldGroupHeader\n                  titleText={{ text: t('console-app~Egress'), id: 'egress-header' }}\n                  titleDescription={t(\n                    'console-app~Add egress rules to be applied to your selected pods. Traffic is allowed to pods if it matches at least one rule.',\n                  )}\n                  actions={\n                    <>\n                      <Button\n                        variant=\"link\"\n                        isDisabled={networkPolicy.egress.rules.length === 0}\n                        onClick={removeAllEgress}\n                        data-test=\"remove-all-egress\"\n                      >\n                        {t('console-app~Remove all')}\n                      </Button>\n                      <Button data-test=\"add-egress\" variant=\"secondary\" onClick={addEgressRule}>\n                        {t('console-app~Add egress rule')}\n                      </Button>\n                    </>\n                  }\n                />\n              }\n            >\n              {networkPolicy.egress.rules.map((rule, idx) => (\n                <NetworkPolicyRuleConfigPanel\n                  key={rule.key}\n                  policyNamespace={networkPolicy.namespace}\n                  direction=\"egress\"\n                  rule={rule}\n                  onChange={(r) => {\n                    const newRules = [...networkPolicy.egress.rules];\n                    newRules[idx] = r;\n                    updateEgressRules(newRules);\n                  }}\n                  onRemove={() => removeEgressRule(idx)}\n                />\n              ))}\n            </FormFieldGroupExpandable>\n          )}\n        <ButtonBar errorMessage={error} inProgress={inProgress}>\n          <ActionGroup className=\"pf-v5-c-form\">\n            <Button type=\"submit\" id=\"save-changes\" variant=\"primary\">\n              {t('console-app~Create')}\n            </Button>\n            <Button onClick={history.goBack} id=\"cancel\" variant=\"secondary\">\n              {t('console-app~Cancel')}\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </Form>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { Alert, AlertVariant, FormGroup } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  getGroupVersionKindForModel,\n  useK8sWatchResource,\n} from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { Loading } from '@console/internal/components/utils';\nimport { NetworkAttachmentDefinitionModel } from '@console/network-attachment-definition-plugin/src';\nimport { NetworkAttachmentDefinitionKind } from '@console/network-attachment-definition-plugin/src/types';\nimport { getName, getNamespace } from '@console/shared/src';\nimport { NetworkPolicy } from './network-policy-model';\nimport SelectMultiTypeahead from './SelectMultiTypeahead/SelectMultiTypeahead';\n\ntype NADsSelectorProps = {\n  namespace: string;\n  networkPolicy: NetworkPolicy;\n  onPolicyChange: (policy: NetworkPolicy) => void;\n};\n\nconst NetworkAttachmentDefinitionModelGroupVersionKind = getGroupVersionKindForModel(\n  NetworkAttachmentDefinitionModel,\n);\n\nconst NADsSelector: React.FC<NADsSelectorProps> = ({\n  namespace,\n  networkPolicy,\n  onPolicyChange,\n}) => {\n  const { t } = useTranslation();\n\n  const [nads, loaded, loadError] = useK8sWatchResource<NetworkAttachmentDefinitionKind[]>({\n    groupVersionKind: NetworkAttachmentDefinitionModelGroupVersionKind,\n    isList: true,\n    namespace,\n  });\n\n  const [nadsDefault, loadedDefaultNads, loadErrorDefaultNads] = useK8sWatchResource<\n    NetworkAttachmentDefinitionKind[]\n  >(\n    namespace !== 'default'\n      ? {\n          groupVersionKind: NetworkAttachmentDefinitionModelGroupVersionKind,\n          isList: true,\n          namespace: 'default',\n        }\n      : null,\n  );\n\n  const nadsOptions = React.useMemo(() => {\n    const allNads = [...(nads || []), ...(nadsDefault || [])];\n\n    return allNads.map((nad) => ({\n      value: `${getNamespace(nad)}/${getName(nad)}`,\n    }));\n  }, [nads, nadsDefault]);\n\n  const onChange = (newNADs: string[]) => {\n    onPolicyChange({ ...networkPolicy, policyFor: newNADs });\n  };\n\n  if (!loaded || !loadedDefaultNads) return <Loading />;\n\n  if (loadError || loadErrorDefaultNads)\n    return (\n      <Alert title={t('Error')} variant={AlertVariant.danger}>\n        {loadError}\n      </Alert>\n    );\n\n  return (\n    <FormGroup\n      fieldId=\"multi-networkpolicy-policyfor\"\n      isRequired\n      label={t('console-app~Policy for')}\n    >\n      <SelectMultiTypeahead\n        options={nadsOptions}\n        placeholder={t('console-app~Select one or more NetworkAttachmentDefinitions')}\n        selected={networkPolicy.policyFor || []}\n        setSelected={onChange}\n      />\n    </FormGroup>\n  );\n};\n\nexport default NADsSelector;\n","export * from './models';\n","import * as React from 'react';\nimport {\n  MenuToggleElement,\n  Select,\n  SelectList,\n  SelectOption,\n  SelectOptionProps,\n} from '@patternfly/react-core';\nimport { NO_RESULTS_VALUE } from './constants';\nimport Toggle from './Toggle';\nimport { filterOptions } from './utils';\n\ntype SelectMultiTypeaheadProps = {\n  options: SelectOptionProps[];\n  placeholder: string;\n  selected: string[];\n  setSelected: (newSelection: string[]) => void;\n};\n\nconst SelectMultiTypeahead: React.FC<SelectMultiTypeaheadProps> = ({\n  options,\n  placeholder,\n  selected,\n  setSelected,\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [inputValue, setInputValue] = React.useState<string>('');\n  const [focusedItemIndex, setFocusedItemIndex] = React.useState<null | number>(null);\n  const textInputRef = React.useRef<HTMLInputElement>();\n\n  const selectOptions = inputValue ? filterOptions(options, inputValue) : options;\n\n  const onSelect = (value: string) => {\n    if (value && value !== NO_RESULTS_VALUE) {\n      setSelected(\n        selected.includes(value)\n          ? selected.filter((selection) => selection !== value)\n          : [...selected, value],\n      );\n\n      setIsOpen(true);\n    }\n\n    textInputRef.current?.focus();\n  };\n\n  return (\n    <Select\n      id=\"multi-typeahead-select\"\n      isOpen={isOpen}\n      onOpenChange={() => setIsOpen(false)}\n      onSelect={(event?: React.MouseEvent<Element, MouseEvent>, selection?: string | number) =>\n        onSelect(selection as string)\n      }\n      selected={selected}\n      toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n        <Toggle\n          focusedItemIndex={focusedItemIndex}\n          inputValue={inputValue}\n          isOpen={isOpen}\n          onSelect={onSelect}\n          placeholder={placeholder}\n          selected={selected}\n          selectOptions={selectOptions}\n          setFocusedItemIndex={setFocusedItemIndex}\n          setInputValue={setInputValue}\n          setIsOpen={setIsOpen}\n          setSelected={setSelected}\n          textInputRef={textInputRef}\n          toggleRef={toggleRef}\n        />\n      )}\n    >\n      <SelectList id=\"select-multi-typeahead-listbox\" isAriaMultiselectable>\n        {selectOptions.map((option, index) => (\n          <SelectOption\n            className={option.className}\n            id={`select-multi-typeahead-${option.value.replace(' ', '-')}`}\n            isFocused={focusedItemIndex === index}\n            key={option.value || option.children}\n            {...option}\n          >\n            {option.children || option.value}\n          </SelectOption>\n        ))}\n      </SelectList>\n    </Select>\n  );\n};\n\nexport default SelectMultiTypeahead;\n","import * as React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  MenuToggle,\n  MenuToggleElement,\n  SelectOptionProps,\n  TextInputGroup,\n  TextInputGroupMain,\n  TextInputGroupUtilities,\n} from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { isEmpty } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { NO_RESULTS_VALUE } from './constants';\nimport { handleMenuArrowKeys } from './utils';\n\ntype ToggleProps = {\n  focusedItemIndex: null | number;\n  inputValue: string;\n  isOpen: boolean;\n  onSelect: (value: string) => void;\n  placeholder: string;\n  selected: string[];\n  selectOptions: SelectOptionProps[];\n  setFocusedItemIndex: (newValue: null | number) => void;\n  setInputValue: (newInput: string) => void;\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  setSelected: (newSelection: string[]) => void;\n  textInputRef: React.RefObject<any>;\n  toggleRef: React.Ref<MenuToggleElement>;\n};\n\nconst Toggle: React.FC<ToggleProps> = ({\n  focusedItemIndex,\n  inputValue,\n  isOpen,\n  onSelect,\n  placeholder,\n  selected,\n  selectOptions,\n  setFocusedItemIndex,\n  setInputValue,\n  setIsOpen,\n  setSelected,\n  textInputRef,\n  toggleRef,\n}) => {\n  const { t } = useTranslation();\n\n  const onInputKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const enabledMenuItems = selectOptions.filter((menuItem) => !menuItem.isDisabled);\n    const [firstMenuItem] = enabledMenuItems;\n    const focusedItem = focusedItemIndex ? enabledMenuItems?.[focusedItemIndex] : firstMenuItem;\n\n    switch (event.key) {\n      // Select the first available option\n      case 'Enter':\n        if (!isOpen) {\n          setIsOpen((prevIsOpen) => !prevIsOpen);\n          return;\n        }\n\n        if (isOpen && focusedItem.value !== NO_RESULTS_VALUE) {\n          onSelect(focusedItem.value as string);\n        }\n\n        break;\n      case 'Tab':\n      case 'Escape':\n        setIsOpen(false);\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (isOpen) {\n          const indexToFocus = handleMenuArrowKeys(event.key, focusedItemIndex, selectOptions);\n\n          if (indexToFocus !== null) setFocusedItemIndex(indexToFocus);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onTextInputChange = (_event: React.FormEvent<HTMLInputElement>, value: string) => {\n    setInputValue(value);\n    setFocusedItemIndex(null);\n\n    if (value) setIsOpen(true);\n  };\n\n  return (\n    <MenuToggle\n      innerRef={toggleRef}\n      isExpanded={isOpen}\n      isFullWidth\n      onClick={onToggleClick}\n      variant=\"typeahead\"\n    >\n      <TextInputGroup isPlain>\n        <TextInputGroupMain\n          aria-controls=\"select-multi-typeahead-listbox\"\n          autoComplete=\"off\"\n          id=\"multi-typeahead-select-input\"\n          innerRef={textInputRef}\n          isExpanded={isOpen}\n          onChange={onTextInputChange}\n          onClick={onToggleClick}\n          onKeyDown={onInputKeyDown}\n          placeholder={placeholder}\n          role=\"combobox\"\n          value={inputValue}\n        >\n          <ChipGroup aria-label={t('console-app~Current selections')}>\n            {selected.map((selection) => (\n              <Chip\n                key={selection}\n                onClick={(ev) => {\n                  ev.stopPropagation();\n                  onSelect(selection);\n                }}\n              >\n                {selection}\n              </Chip>\n            ))}\n          </ChipGroup>\n        </TextInputGroupMain>\n        <TextInputGroupUtilities>\n          {!isEmpty(selected) && (\n            <Button\n              aria-label={t('console-app~Clear input value')}\n              onClick={() => {\n                setInputValue('');\n                setSelected([]);\n                textInputRef?.current?.focus();\n              }}\n              variant={ButtonVariant.plain}\n            >\n              <TimesIcon aria-hidden />\n            </Button>\n          )}\n        </TextInputGroupUtilities>\n      </TextInputGroup>\n    </MenuToggle>\n  );\n};\n\nexport default Toggle;\n","import * as React from 'react';\nimport {\n  Button,\n  CardBody,\n  CardTitle,\n  Card,\n  Divider,\n  FormFieldGroupExpandable,\n  FormFieldGroupHeader,\n} from '@patternfly/react-core';\nimport { TrashIcon } from '@patternfly/react-icons/dist/esm/icons/trash-icon';\nimport i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  NetworkPolicyAddPeerDropdown,\n  NetworkPolicyPeerType,\n} from './network-policy-add-peer-dropdown';\nimport { NetworkPolicyPeer, NetworkPolicyRule } from './network-policy-model';\nimport { NetworkPolicyPeerIPBlock } from './network-policy-peer-ipblock';\nimport { NetworkPolicyPeerSelectors } from './network-policy-peer-selectors';\nimport { NetworkPolicyPorts } from './network-policy-ports';\n\nconst getPeerRuleTitle = (direction: 'ingress' | 'egress', peer: NetworkPolicyPeer) => {\n  if (peer.ipBlock) {\n    return direction === 'ingress'\n      ? i18next.t('console-app~Allow traffic from peers by IP block')\n      : i18next.t('console-app~Allow traffic to peers by IP block');\n  }\n  if (peer.namespaceSelector) {\n    return direction === 'ingress'\n      ? i18next.t('console-app~Allow traffic from pods inside the cluster')\n      : i18next.t('console-app~Allow traffic to pods inside the cluster');\n  }\n  return direction === 'ingress'\n    ? i18next.t('console-app~Allow traffic from pods in the same namespace')\n    : i18next.t('console-app~Allow traffic to pods in the same namespace');\n};\n\nconst emptyPeer = (type: NetworkPolicyPeerType): NetworkPolicyPeer => {\n  const key = _.uniqueId();\n  switch (type) {\n    case 'sameNS':\n      return {\n        key,\n        podSelector: [],\n      };\n    case 'anyNS':\n      return {\n        key,\n        podSelector: [],\n        namespaceSelector: [],\n      };\n    case 'ipBlock':\n    default:\n      return {\n        key,\n        ipBlock: { cidr: '', except: [] },\n      };\n  }\n};\n\nexport const NetworkPolicyRuleConfigPanel: React.FunctionComponent<RuleConfigProps> = (props) => {\n  const { t } = useTranslation();\n  const { policyNamespace, direction, onChange, onRemove, rule } = props;\n  const peersHelp =\n    direction === 'ingress'\n      ? t(\n          'console-app~Sources added to this rule will allow traffic to the pods defined above. Sources in this list are combined using a logical OR operation.',\n        )\n      : t(\n          'console-app~Destinations added to this rule will allow traffic from the pods defined above. Destinations in this list are combined using a logical OR operation.',\n        );\n\n  const addPeer = (type: NetworkPolicyPeerType) => {\n    rule.peers = [emptyPeer(type), ...rule.peers];\n    onChange(rule);\n  };\n\n  const removePeer = (idx: number) => {\n    rule.peers = [...rule.peers.slice(0, idx), ...rule.peers.slice(idx + 1)];\n    onChange(rule);\n  };\n\n  return (\n    <Card>\n      <CardTitle component=\"h4\">\n        <div className=\"co-create-networkpolicy__rule-header\">\n          <label>\n            {direction === 'ingress' ? t('console-app~Ingress rule') : t('console-app~Egress rule')}\n          </label>\n          <div className=\"co-create-networkpolicy__rule-header-right\">\n            <Button variant=\"link\" onClick={onRemove} data-test={`remove-${direction}-rule`}>\n              {t('console-app~Remove')}\n            </Button>\n          </div>\n          <NetworkPolicyAddPeerDropdown\n            title={\n              direction === 'ingress'\n                ? t('console-app~Add allowed source')\n                : t('console-app~Add allowed destination')\n            }\n            onSelect={addPeer}\n          />\n        </div>\n      </CardTitle>\n      <CardBody>\n        <div className=\"help-block\" id=\"ingress-peers-help\">\n          <p>{peersHelp}</p>\n        </div>\n      </CardBody>\n      <CardBody>\n        {rule.peers.map((peer, idx) => {\n          const peerPanel = peer.ipBlock ? (\n            <NetworkPolicyPeerIPBlock\n              direction={direction}\n              ipBlock={peer.ipBlock}\n              onChange={(ipBlock) => {\n                rule.peers[idx].ipBlock = ipBlock;\n                onChange(rule);\n              }}\n            />\n          ) : (\n            <NetworkPolicyPeerSelectors\n              policyNamespace={policyNamespace}\n              direction={direction}\n              namespaceSelector={peer.namespaceSelector}\n              podSelector={peer.podSelector || []}\n              onChange={(podSel, nsSel) => {\n                rule.peers[idx].podSelector = podSel;\n                rule.peers[idx].namespaceSelector = nsSel;\n                onChange(rule);\n              }}\n            />\n          );\n          return (\n            <div className=\"form-group\" key={peer.key}>\n              <FormFieldGroupExpandable\n                toggleAriaLabel=\"Peer\"\n                isExpanded\n                header={\n                  <FormFieldGroupHeader\n                    titleText={{\n                      text: getPeerRuleTitle(direction, peer),\n                      id: `peer-header-${idx}`,\n                    }}\n                    actions={\n                      <Button\n                        aria-label={t('console-app~Remove peer')}\n                        className=\"co-create-networkpolicy__remove-peer\"\n                        onClick={() => removePeer(idx)}\n                        type=\"button\"\n                        variant=\"plain\"\n                        data-test=\"remove-peer\"\n                      >\n                        <TrashIcon />\n                      </Button>\n                    }\n                  />\n                }\n              >\n                {peerPanel}\n              </FormFieldGroupExpandable>\n              <Divider />\n            </div>\n          );\n        })}\n        <NetworkPolicyPorts\n          ports={rule.ports}\n          onChange={(ports) => {\n            rule.ports = ports;\n            onChange(rule);\n          }}\n        />\n      </CardBody>\n    </Card>\n  );\n};\n\ntype RuleConfigProps = {\n  policyNamespace: string;\n  direction: 'ingress' | 'egress';\n  rule: NetworkPolicyRule;\n  onChange: (rule: NetworkPolicyRule) => void;\n  onRemove: () => void;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dropdown } from '@console/internal/components/utils';\n\nexport type NetworkPolicyPeerType = 'sameNS' | 'anyNS' | 'ipBlock';\n\nexport const NetworkPolicyAddPeerDropdown: React.FunctionComponent<NetworkPolicyAddPeerDropdownProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const { title, onSelect } = props;\n  const options = [\n    t('console-app~Allow pods from the same namespace'),\n    t('console-app~Allow pods from inside the cluster'),\n    t('console-app~Allow peers by IP block'),\n  ];\n  return (\n    <div className=\"form-group co-create-networkpolicy__add-peer\">\n      <Dropdown\n        dropDownClassName=\"dropdown--full-width\"\n        items={{\n          sameNS: <>{options[0]}</>,\n          anyNS: <>{options[1]}</>,\n          ipblock: <>{options[2]}</>,\n        }}\n        title={title}\n        onChange={onSelect}\n        noSelection\n        buttonClassName=\"pf-v5-c-button pf-m-secondary\"\n        data-test=\"add-peer\"\n      />\n    </div>\n  );\n};\n\ntype NetworkPolicyAddPeerDropdownProps = {\n  title: string;\n  onSelect: (type: NetworkPolicyPeerType) => void;\n};\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useClusterNetworkFeatures } from '@console/internal/module/k8s/network';\nimport { NetworkPolicyIPBlock } from './network-policy-model';\n\nexport const NetworkPolicyPeerIPBlock: React.FunctionComponent<PeerIPBlockProps> = (props) => {\n  const { t } = useTranslation();\n  const { onChange, ipBlock, direction } = props;\n  const [networkFeatures, networkFeaturesLoaded] = useClusterNetworkFeatures();\n\n  const handleCIDRChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    ipBlock.cidr = event.currentTarget.value;\n    onChange(ipBlock);\n  };\n\n  const handleExceptionsChange = (idx: number, value: string) => {\n    ipBlock.except[idx].value = value;\n    onChange(ipBlock);\n  };\n\n  return (\n    <>\n      <div className=\"form-group co-create-networkpolicy__ipblock\">\n        <label className=\"co-required\" htmlFor=\"cidr\">\n          {t('console-app~CIDR')}\n        </label>\n        <input\n          className=\"pf-v5-c-form-control\"\n          type=\"text\"\n          onChange={handleCIDRChange}\n          value={ipBlock.cidr}\n          placeholder=\"10.2.1.0/16\"\n          id=\"cidr\"\n          name=\"cidr\"\n          aria-describedby=\"ipblock-help\"\n          data-test=\"ipblock-cidr-input\"\n          required\n        />\n        <div className=\"help-block\">\n          <p>\n            {direction === 'ingress'\n              ? t(\n                  'console-app~If this field is empty, traffic will be allowed from all external sources.',\n                )\n              : t(\n                  'console-app~If this field is empty, traffic will be allowed to all external sources.',\n                )}\n          </p>\n        </div>\n      </div>\n      {networkFeaturesLoaded && networkFeatures.PolicyPeerIPBlockExceptions !== false && (\n        <div className=\"form-group co-create-networkpolicy__exceptions\">\n          <label>{t('console-app~Exceptions')}</label>\n          {ipBlock.except.map((exc, idx) => (\n            <div className=\"pf-v5-c-input-group\" key={exc.key}>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                onChange={(event) => handleExceptionsChange(idx, event.currentTarget.value)}\n                placeholder=\"10.2.1.0/12\"\n                aria-describedby=\"ports-help\"\n                name={`exception-${idx}`}\n                id={`exception-${idx}`}\n                value={exc.value}\n                data-test=\"ipblock-exception-input\"\n              />\n              <Button\n                aria-label={t('console-app~Remove exception')}\n                className=\"co-create-networkpolicy__remove-exception\"\n                onClick={() => {\n                  ipBlock.except = [\n                    ...ipBlock.except.slice(0, idx),\n                    ...ipBlock.except.slice(idx + 1),\n                  ];\n                  onChange(ipBlock);\n                }}\n                type=\"button\"\n                variant=\"plain\"\n                data-test=\"ipblock-remove-exception\"\n              >\n                <MinusCircleIcon />\n              </Button>\n            </div>\n          ))}\n          <div className=\"co-toolbar__group co-toolbar__group--left co-create-networkpolicy__add-exception\">\n            <Button\n              className=\"pf-m-link--align-left\"\n              onClick={() => {\n                ipBlock.except.push({ key: _.uniqueId('exception-'), value: '' });\n                onChange(ipBlock);\n              }}\n              type=\"button\"\n              variant=\"link\"\n              data-test=\"ipblock-add-exception\"\n            >\n              <PlusCircleIcon className=\"co-icon-space-r\" />\n              {t('console-app~Add exception')}\n            </Button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\ntype PeerIPBlockProps = {\n  direction: 'ingress' | 'egress';\n  ipBlock: NetworkPolicyIPBlock;\n  onChange: (ipBlock: NetworkPolicyIPBlock) => void;\n};\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { NetworkPolicyConditionalSelector } from './network-policy-conditional-selector';\nimport { NetworkPolicySelectorPreview } from './network-policy-selector-preview';\n\nexport const NetworkPolicyPeerSelectors: React.FC<PeerSelectorProps> = (props) => {\n  const { t } = useTranslation();\n  const { policyNamespace, direction, onChange, podSelector, namespaceSelector } = props;\n\n  const handlePodSelectorChange = (updated: string[][]) => {\n    onChange(updated, namespaceSelector);\n  };\n\n  const handleNamespaceSelectorChange = (updated: string[][]) => {\n    onChange(podSelector, updated);\n  };\n  const podsPreviewPopoverRef = React.useRef();\n  let helpTextPodSelector;\n  if (direction === 'ingress') {\n    helpTextPodSelector = namespaceSelector\n      ? t(\n          'console-app~If no pod selector is provided, traffic from all pods in eligible namespaces will be allowed.',\n        )\n      : t(\n          'console-app~If no pod selector is provided, traffic from all pods in this namespace will be allowed.',\n        );\n  } else {\n    helpTextPodSelector = namespaceSelector\n      ? t(\n          'console-app~If no pod selector is provided, traffic to all pods in eligible namespaces will be allowed.',\n        )\n      : t(\n          'console-app~If no pod selector is provided, traffic to all pods in this namespace will be allowed.',\n        );\n  }\n\n  return (\n    <>\n      {namespaceSelector && (\n        <div className=\"form-group co-create-networkpolicy__namespaceselector\">\n          <NetworkPolicyConditionalSelector\n            selectorType=\"namespace\"\n            helpText={t(\n              'console-app~If no namespace selector is provided, pods from all namespaces will be eligible.',\n            )}\n            values={namespaceSelector}\n            onChange={handleNamespaceSelectorChange}\n            dataTest=\"peer-namespace-selector\"\n          />\n        </div>\n      )}\n      <div className=\"form-group co-create-networkpolicy__podselector\">\n        <NetworkPolicyConditionalSelector\n          selectorType=\"pod\"\n          helpText={helpTextPodSelector}\n          values={podSelector || []}\n          onChange={handlePodSelectorChange}\n          dataTest=\"peer-pod-selector\"\n        />\n      </div>\n      <p>\n        {props.direction === 'ingress' ? (\n          <Trans ns=\"console-app\">\n            Show a preview of the{' '}\n            <Button\n              data-test=\"show-affected-pods-ingress\"\n              ref={podsPreviewPopoverRef}\n              variant=\"link\"\n              isInline\n            >\n              affected pods\n            </Button>{' '}\n            that this ingress rule will apply to.\n          </Trans>\n        ) : (\n          <Trans ns=\"console-app\">\n            Show a preview of the{' '}\n            <Button\n              data-test=\"show-affected-pods-egress\"\n              ref={podsPreviewPopoverRef}\n              variant=\"link\"\n              isInline\n            >\n              affected pods\n            </Button>{' '}\n            that this egress rule will apply to.\n          </Trans>\n        )}\n      </p>\n      <NetworkPolicySelectorPreview\n        policyNamespace={policyNamespace}\n        podSelector={podSelector}\n        namespaceSelector={namespaceSelector}\n        popoverRef={podsPreviewPopoverRef}\n        dataTest={`pods-preview-${props.direction}`}\n      />\n    </>\n  );\n};\n\ntype PeerSelectorProps = {\n  policyNamespace: string;\n  podSelector: string[][];\n  namespaceSelector?: string[][];\n  direction: 'ingress' | 'egress';\n  onChange: (podSelector: string[][], namespaceSelector?: string[][]) => void;\n};\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Dropdown } from '@console/internal/components/utils';\nimport { NetworkPolicyPort } from './network-policy-model';\n\nexport const NetworkPolicyPorts: React.FunctionComponent<NetworkPolicyPortsProps> = (props) => {\n  const { ports, onChange } = props;\n  const { t } = useTranslation();\n\n  const onSingleChange = (port: NetworkPolicyPort, index: number) => {\n    onChange([...ports.slice(0, index), port, ...ports.slice(index + 1)]);\n  };\n\n  const onRemove = (index: number) => {\n    onChange([...ports.slice(0, index), ...ports.slice(index + 1)]);\n  };\n\n  return (\n    <>\n      {\n        <div className=\"form-group co-create-networkpolicy__ports-list\">\n          <label>{t('console-app~Ports')}</label>\n          <div className=\"help-block\" id=\"ingress-peers-help\">\n            <p>\n              {t(\n                'console-app~Add ports to restrict traffic through them. If no ports are provided, your policy will make all ports accessible to traffic.',\n              )}\n            </p>\n          </div>\n          {ports.map((port, idx) => {\n            const key = `port-${idx}`;\n            return (\n              <div className=\"pf-v5-c-input-group\" key={key}>\n                <Dropdown\n                  items={{\n                    TCP: <>TCP</>,\n                    UDP: <>UDP</>,\n                    SCTP: <>SCTP</>,\n                  }}\n                  title={port.protocol}\n                  name={`${key}-protocol`}\n                  className=\"btn-group\"\n                  onChange={(protocol) => onSingleChange({ ...port, protocol }, idx)}\n                  data-test=\"port-protocol\"\n                />\n                <input\n                  className=\"pf-v5-c-form-control\"\n                  onChange={(event) =>\n                    onSingleChange({ ...port, port: event.currentTarget.value }, idx)\n                  }\n                  placeholder=\"443\"\n                  aria-describedby=\"ports-help\"\n                  name={`${key}-port`}\n                  id={`${key}-port`}\n                  value={port.port}\n                  data-test=\"port-input\"\n                />\n                <Button\n                  aria-label={t('console-app~Remove port')}\n                  className=\"co-create-networkpolicy__remove-port\"\n                  onClick={() => onRemove(idx)}\n                  type=\"button\"\n                  variant=\"plain\"\n                  data-test=\"remove-port\"\n                >\n                  <MinusCircleIcon />\n                </Button>\n              </div>\n            );\n          })}\n          <div className=\"co-toolbar__group co-toolbar__group--left co-create-networkpolicy__add-port\">\n            <Button\n              className=\"pf-m-link--align-left\"\n              onClick={() => {\n                onChange([...ports, { key: _.uniqueId('port-'), port: '', protocol: 'TCP' }]);\n              }}\n              type=\"button\"\n              variant=\"link\"\n              data-test=\"add-port\"\n            >\n              <PlusCircleIcon className=\"co-icon-space-r\" />\n              {t('console-app~Add port')}\n            </Button>\n          </div>\n        </div>\n      }\n    </>\n  );\n};\n\ntype NetworkPolicyPortsProps = {\n  ports: NetworkPolicyPort[];\n  onChange: (ports: NetworkPolicyPort[]) => void;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { AsyncResourceYAMLEditor } from '@console/internal/components/AsyncResourceYAMLEditor';\nimport { PageHeading } from '@console/internal/components/utils';\nimport { MultiNetworkPolicyModel, NetworkPolicyModel } from '@console/internal/models';\nimport { NetworkPolicyKind } from '@console/internal/module/k8s';\nimport { SyncedEditor } from '@console/shared/src/components/synced-editor';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { NetworkPolicyForm } from './network-policy-form';\nimport {\n  isNetworkPolicyConversionError,\n  NetworkPolicy,\n  networkPolicyFromK8sResource,\n  networkPolicyNormalizeK8sResource,\n  networkPolicyToK8sResource,\n} from './network-policy-model';\nimport './_create-network-policy.scss';\nimport useIsMultiNetworkPolicy from './useIsMultiNetworkPolicy';\n\nconst LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY = 'console.createNetworkPolicy.editor.lastView';\n\nexport const CreateNetworkPolicy: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  const isMulti = useIsMultiNetworkPolicy();\n  const params = useParams();\n\n  const initialPolicy: NetworkPolicy = {\n    name: '',\n    namespace: params.ns,\n    podSelector: [['', '']],\n    ingress: {\n      denyAll: false,\n      rules: [],\n    },\n    egress: {\n      denyAll: false,\n      rules: [],\n    },\n  };\n\n  const formHelpText = t('console-app~Create by completing the form.');\n  const yamlHelpText = t(\n    'console-app~Create by manually entering YAML or JSON definitions, or by dragging and dropping a file into the editor.',\n  );\n\n  const [helpText, setHelpText] = React.useState(formHelpText);\n\n  const k8sObj = networkPolicyToK8sResource(initialPolicy, isMulti);\n\n  const YAMLEditor: React.FC<YAMLEditorProps> = ({ onChange, initialYAML = '' }) => {\n    return (\n      <AsyncResourceYAMLEditor\n        create\n        hideHeader\n        initialResource={safeYAMLToJS(initialYAML)}\n        onChange={onChange}\n      />\n    );\n  };\n\n  const checkPolicyValidForForm = (obj: NetworkPolicyKind) => {\n    const normalizedK8S = networkPolicyNormalizeK8sResource(obj);\n    const converted = networkPolicyFromK8sResource(normalizedK8S, t);\n    if (isNetworkPolicyConversionError(converted)) {\n      throw converted.error;\n    } else {\n      // Convert back to check for unsupported fields (check isomorphism)\n      const reconverted = networkPolicyToK8sResource(converted, isMulti);\n      if (!_.isEqual(normalizedK8S, reconverted)) {\n        throw new Error(\n          t(\n            'console-app~Not all YAML property values are supported in the form editor. Some data would be lost.',\n          ),\n        );\n      }\n    }\n  };\n\n  type YAMLEditorProps = {\n    initialYAML?: string;\n    onChange?: (yaml: string) => void;\n  };\n\n  return (\n    <>\n      <PageHeading\n        className=\"create-network-policy__page-heading\"\n        title={t('console-app~Create {{kind}}', {\n          kind: isMulti ? MultiNetworkPolicyModel.kind : NetworkPolicyModel.kind,\n        })}\n        helpText={helpText}\n      />\n      <SyncedEditor\n        context={{\n          formContext: { networkPolicy: initialPolicy },\n          yamlContext: {},\n        }}\n        FormEditor={NetworkPolicyForm}\n        initialData={k8sObj}\n        initialType={EditorType.Form}\n        onChangeEditorType={(type) =>\n          setHelpText(type === EditorType.Form ? formHelpText : yamlHelpText)\n        }\n        onChange={checkPolicyValidForForm}\n        YAMLEditor={YAMLEditor}\n        lastViewUserSettingKey={LAST_VIEWED_EDITOR_TYPE_USERSETTING_KEY}\n        displayConversionError\n      />\n    </>\n  );\n};\n","import * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport * as PropTypes from 'prop-types';\n\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent } from '../utils';\n\nclass ConfirmModal extends PromiseComponent {\n  constructor(props) {\n    super(props);\n    this._submit = this._submit.bind(this);\n    this._cancel = this.props.cancel.bind(this);\n  }\n\n  _submit(event) {\n    event.preventDefault();\n\n    this.handlePromise(\n      this.props.executeFn(null, {\n        supressNotifications: true,\n      }),\n    ).then(this.props.close);\n  }\n\n  render() {\n    const {\n      title,\n      titleKey,\n      message,\n      messageKey,\n      btnText,\n      btnTextKey,\n      cancelText,\n      cancelTextKey,\n      submitDanger,\n    } = this.props;\n\n    return (\n      <Translation>\n        {(t) => (\n          <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n            <ModalTitle>{titleKey ? t(titleKey) : title}</ModalTitle>\n            <ModalBody>{messageKey ? t(messageKey) : message}</ModalBody>\n            <ModalSubmitFooter\n              errorMessage={this.state.errorMessage}\n              inProgress={this.state.inProgress}\n              submitText={btnTextKey ? t(btnTextKey) : btnText || t('Confirm')}\n              cancel={this._cancel}\n              cancelText={cancelTextKey ? t(cancelTextKey) : cancelText || t('Cancel')}\n              submitDanger={submitDanger}\n            />\n          </form>\n        )}\n      </Translation>\n    );\n  }\n}\nConfirmModal.propTypes = {\n  btnText: PropTypes.node,\n  btnTextKey: PropTypes.string,\n  cancel: PropTypes.func.isRequired,\n  cancelText: PropTypes.node,\n  cancelTextKey: PropTypes.string,\n  close: PropTypes.func.isRequired,\n  executeFn: PropTypes.func.isRequired,\n  message: PropTypes.node,\n  messageKey: PropTypes.string,\n  title: PropTypes.node,\n  titleKey: PropTypes.string,\n  submitDanger: PropTypes.bool,\n};\n\nexport const confirmModal = createModalLauncher(ConfirmModal);\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","import * as React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { LoadingBox } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { safeJSToYAML, asyncYAMLToJS } from '../../utils/yaml';\nimport { EditorType, EditorToggle } from './editor-toggle';\nimport { useEditorType } from './useEditorType';\n\nconst YAML_KEY_ORDER = ['apiVerion', 'kind', 'metadata', 'spec', 'status'];\nexport const YAML_TO_JS_OPTIONS = {\n  skipInvalid: true,\n  sortKeys: (a, b) => _.indexOf(YAML_KEY_ORDER, a) - _.indexOf(YAML_KEY_ORDER, b),\n};\n\n// Provides toggling and syncing between a form and yaml editor. The formData state is the source\n// of truth. Both the form editor and the yaml editor update the formData state. Here's the basic logic of this component:\n// In the form view:\n//   - formData is both rendered and updated by the form component\n//   - on toggle to YAML editor, yaml is parsed from current formData state.\n// In the YAML view:\n//   - on each yaml change, attempt to parse yaml to js:\n//       - If it fails, nothing happens. formData remains unchanged.\n//       - If successful, formData is updated to resulting js\n//   - on toggle to form view, no action needs to be taken to sync because formData has remained up to date with each yaml change\n//\n//  This means that when switching from YAML to Form, you can lose changes if the YAML editor contains unparsable YAML\n//  TODO Add an extra step when switching from yaml to form to warn user if they are about to lose changes.\nexport const SyncedEditor: React.FC<SyncedEditorProps> = ({\n  context = {},\n  FormEditor,\n  initialType = EditorType.Form,\n  initialData = {},\n  onChangeEditorType = _.noop,\n  onChange = _.noop,\n  prune,\n  YAMLEditor,\n  lastViewUserSettingKey,\n  displayConversionError,\n}) => {\n  const { formContext, yamlContext } = context;\n  const { t } = useTranslation();\n  const [formData, setFormData] = React.useState<K8sResourceKind>(initialData);\n  const [yaml, setYAML] = React.useState(\n    safeJSToYAML(initialData, 'yamlData', {\n      skipInvalid: true,\n    }),\n  );\n  const [switchError, setSwitchError] = React.useState<string | undefined>();\n  const [yamlWarning, setYAMLWarning] = React.useState<boolean>(false);\n  const [editorType, setEditorType, loaded] = useEditorType(lastViewUserSettingKey, initialType);\n\n  const handleFormDataChange = (newFormData: K8sResourceKind = {}) => {\n    if (!_.isEqual(newFormData, formData)) {\n      setFormData(newFormData);\n      onChange(newFormData);\n    }\n  };\n\n  const handleYAMLChange = (newYAML: string = '') => {\n    asyncYAMLToJS(newYAML)\n      .then((js) => {\n        setSwitchError(undefined);\n        handleFormDataChange(js);\n        setYAML(safeJSToYAML(prune?.(formData) ?? formData, yaml, YAML_TO_JS_OPTIONS));\n      })\n      .catch((err) => setSwitchError(String(err)));\n  };\n\n  const changeEditorType = (newType: EditorType): void => {\n    setEditorType(newType);\n    onChangeEditorType(newType);\n  };\n\n  const handleToggleToForm = () => {\n    if (switchError === undefined) {\n      changeEditorType(EditorType.Form);\n    } else {\n      setYAMLWarning(true);\n    }\n  };\n\n  const handleToggleToYAML = () => {\n    setYAML(safeJSToYAML(prune?.(formData) ?? formData, yaml, YAML_TO_JS_OPTIONS));\n    changeEditorType(EditorType.YAML);\n  };\n\n  const onClickYAMLWarningConfirm = () => {\n    setSwitchError(undefined);\n    setYAMLWarning(false);\n    changeEditorType(EditorType.Form);\n  };\n\n  const onClickYAMLWarningCancel = () => {\n    setYAMLWarning(false);\n  };\n\n  const onChangeType = (newType) => {\n    switch (newType) {\n      case EditorType.YAML:\n        handleToggleToYAML();\n        break;\n      case EditorType.Form:\n        handleToggleToForm();\n        break;\n      default:\n        break;\n    }\n  };\n\n  return loaded ? (\n    <>\n      <EditorToggle value={editorType} onChange={onChangeType} />\n      {yamlWarning && (\n        <Alert\n          className=\"co-synced-editor__yaml-warning\"\n          variant=\"danger\"\n          isInline\n          title={t('console-shared~Invalid YAML cannot be persisted')}\n        >\n          {displayConversionError && <p>{switchError}</p>}\n          <p>{t('console-shared~Switching to form view will delete any invalid YAML.')}</p>\n          <Button variant=\"danger\" onClick={onClickYAMLWarningConfirm}>\n            {t('console-shared~Switch and delete')}\n          </Button>\n          &nbsp;\n          <Button variant=\"secondary\" onClick={onClickYAMLWarningCancel}>\n            {t('console-shared~Cancel')}\n          </Button>\n        </Alert>\n      )}\n      {editorType === EditorType.Form ? (\n        <FormEditor\n          formData={formData}\n          onChange={handleFormDataChange}\n          prune={prune}\n          {...formContext}\n        />\n      ) : (\n        <YAMLEditor initialYAML={yaml} onChange={handleYAMLChange} {...yamlContext} />\n      )}\n    </>\n  ) : (\n    <LoadingBox />\n  );\n};\n\ntype FormEditorProps = {\n  formData?: K8sResourceKind;\n  onChange?: (data: K8sResourceKind) => void;\n  prune?: (data: K8sResourceKind) => any;\n};\n\ntype YAMLEditorProps = {\n  initialYAML?: string;\n  onChange?: (yaml: string) => void;\n};\n\ntype SyncedEditorProps = {\n  context: {\n    formContext: { [key: string]: any };\n    yamlContext: { [key: string]: any };\n  };\n  FormEditor: React.ComponentType<FormEditorProps>;\n  initialType?: EditorType;\n  initialData?: K8sResourceKind;\n  onChangeEditorType?: (newType: EditorType) => void;\n  onChange?: (data: K8sResourceKind) => void;\n  prune?: (data: K8sResourceKind) => any;\n  YAMLEditor: React.ComponentType<YAMLEditorProps>;\n  lastViewUserSettingKey: string;\n  displayConversionError?: boolean;\n};\n","export const NO_RESULTS_VALUE = 'no results';\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { MultiNetworkPolicyModel } from '@console/internal/models';\nimport {\n  NetworkPolicyKind,\n  NetworkPolicyPort as K8SPort,\n  NetworkPolicyPeer as K8SPeer,\n  Selector,\n} from '@console/internal/module/k8s';\n\n// Reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#networkpolicyspec-v1-networking-k8s-io\n\nexport interface NetworkPolicy {\n  name: string;\n  namespace?: string;\n  podSelector: string[][];\n  ingress: NetworkPolicyRules;\n  egress: NetworkPolicyRules;\n  policyFor?: string[];\n}\n\nexport interface NetworkPolicyRules {\n  rules: NetworkPolicyRule[];\n  denyAll: boolean;\n}\n\nexport interface NetworkPolicyRule {\n  key: string;\n  peers: NetworkPolicyPeer[];\n  ports: NetworkPolicyPort[];\n}\n\nexport interface NetworkPolicyPeer {\n  key: string;\n  podSelector?: string[][];\n  namespaceSelector?: string[][];\n  ipBlock?: NetworkPolicyIPBlock;\n}\n\nexport interface NetworkPolicyIPBlock {\n  cidr: string;\n  except: { key: string; value: string }[];\n}\n\nexport type NetworkPolicyPort = {\n  key: string;\n  protocol: string;\n  port: string;\n};\n\nconst networkPolicyTypeIngress = 'Ingress';\nconst networkPolicyTypeEgress = 'Egress';\nconst POLICY_FOR_LABEL = 'k8s.v1.cni.cncf.io/policy-for';\n\ninterface ConversionError {\n  kind: 'invalid' | 'unsupported';\n  error: string;\n}\n\nconst isError = <T>(result: T | ConversionError): result is ConversionError => {\n  return result && (result as ConversionError).error !== undefined;\n};\nexport const isNetworkPolicyConversionError = isError;\n\nconst factorOutError = <T>(list: (T | ConversionError)[]): T[] | ConversionError => {\n  const err = list.find((r) => isError(r)) as ConversionError | undefined;\n  if (err) {\n    return err;\n  }\n  return list as T[];\n};\n\nconst errors = {\n  isMissing: (t: TFunction, path: string): ConversionError => ({\n    kind: 'invalid',\n    error: t('console-app~{{path}} is missing.', { path }),\n  }),\n  shouldBeAnArray: (t: TFunction, path: string): ConversionError => ({\n    kind: 'invalid',\n    error: t('console-app~{{path}} should be an Array.', { path }),\n  }),\n  shouldNotBeEmpty: (t: TFunction, path: string): ConversionError => ({\n    kind: 'invalid',\n    error: t('console-app~{{path}} should not be empty.', { path }),\n  }),\n  notSupported: (t: TFunction, path: string): ConversionError => ({\n    kind: 'unsupported',\n    error: t('console-app~{{path}} found in resource, but is not supported in form.', { path }),\n  }),\n};\n\nexport const selectorToK8s = (selector: string[][]): Selector => {\n  const filtered = selector.filter((pair) => pair.length >= 2 && pair[0] !== '');\n  if (filtered.length > 0) {\n    return { matchLabels: _.fromPairs(filtered) };\n  }\n  return {};\n};\n\nconst isValidSelector = (selector: string[][]): boolean => {\n  const filtered = selector.filter((pair) => pair.length >= 2 && pair[0] !== '');\n  if (filtered.length > 0) {\n    const obj = _.fromPairs(filtered);\n    return Object.keys(obj).length === filtered.length;\n  }\n  return true;\n};\n\ntype Rule = { from?: K8SPeer[]; to?: K8SPeer[]; ports?: K8SPort[] };\n\nconst ruleToK8s = (rule: NetworkPolicyRule, direction: 'ingress' | 'egress'): Rule => {\n  const res: Rule = {};\n  if (rule.peers.length > 0) {\n    const peers = rule.peers.map((p) => {\n      const peer: K8SPeer = {};\n      if (p.ipBlock) {\n        peer.ipBlock = {\n          cidr: p.ipBlock.cidr,\n          ...(p.ipBlock.except && { except: p.ipBlock.except.map((e) => e.value) }),\n        };\n      } else {\n        if (p.podSelector) {\n          peer.podSelector = selectorToK8s(p.podSelector);\n        }\n        if (p.namespaceSelector) {\n          peer.namespaceSelector = selectorToK8s(p.namespaceSelector);\n        }\n      }\n      return peer;\n    });\n    if (direction === 'ingress') {\n      res.from = peers;\n    } else {\n      res.to = peers;\n    }\n  }\n  if (rule.ports.length > 0) {\n    res.ports = rule.ports.map((p) => ({\n      protocol: p.protocol,\n      port: Number.isNaN(Number(p.port)) ? p.port : Number(p.port),\n    }));\n  }\n  return res;\n};\n\nexport const networkPolicyToK8sResource = (\n  from: NetworkPolicy,\n  isMulti = false,\n): NetworkPolicyKind => {\n  const podSelector = selectorToK8s(from.podSelector);\n  const policyTypes: string[] = [];\n  const res: NetworkPolicyKind = {\n    kind: isMulti ? MultiNetworkPolicyModel.kind : 'NetworkPolicy',\n    apiVersion: isMulti\n      ? `${MultiNetworkPolicyModel.apiGroup}/${MultiNetworkPolicyModel.apiVersion}`\n      : 'networking.k8s.io/v1',\n    metadata: {\n      name: from.name,\n      namespace: from.namespace,\n    },\n    spec: {\n      podSelector,\n      policyTypes,\n    },\n  };\n  if (from.ingress.denyAll) {\n    policyTypes.push(networkPolicyTypeIngress);\n    res.spec.ingress = [];\n  } else if (from.ingress.rules.length > 0) {\n    policyTypes.push(networkPolicyTypeIngress);\n    res.spec.ingress = from.ingress.rules.map((r) => ruleToK8s(r, 'ingress'));\n  }\n  if (from.egress.denyAll) {\n    policyTypes.push(networkPolicyTypeEgress);\n    res.spec.egress = [];\n  } else if (from.egress.rules.length > 0) {\n    policyTypes.push(networkPolicyTypeEgress);\n    res.spec.egress = from.egress.rules.map((r) => ruleToK8s(r, 'egress'));\n  }\n  if (from.policyFor) {\n    if (!res.metadata) res.metadata = {};\n\n    res.metadata.annotations = { [POLICY_FOR_LABEL]: from.policyFor.join(',') };\n  }\n  return res;\n};\n\nconst checkRulesValidity = (\n  rules: NetworkPolicyRule[],\n  t: TFunction,\n): ConversionError | undefined => {\n  for (const rule of rules) {\n    for (const peer of rule.peers) {\n      if (peer.podSelector && !isValidSelector(peer.podSelector)) {\n        return {\n          kind: 'invalid',\n          error: t('console-app~Duplicate keys found in peer pod selector'),\n        };\n      }\n      if (peer.namespaceSelector && !isValidSelector(peer.namespaceSelector)) {\n        return {\n          kind: 'invalid',\n          error: t('console-app~Duplicate keys found in peer namespace selector'),\n        };\n      }\n    }\n  }\n  return undefined;\n};\n\nexport const checkNetworkPolicyValidity = (\n  from: NetworkPolicy,\n  t: TFunction,\n): ConversionError | undefined => {\n  if (!isValidSelector(from.podSelector)) {\n    return { kind: 'invalid', error: t('console-app~Duplicate keys found in main pod selector') };\n  }\n  const errIn = checkRulesValidity(from.ingress.rules, t);\n  if (errIn) {\n    return errIn;\n  }\n  const errEg = checkRulesValidity(from.egress.rules, t);\n  if (errEg) {\n    return errEg;\n  }\n  return undefined;\n};\n\nexport const networkPolicyNormalizeK8sResource = (from: NetworkPolicyKind): NetworkPolicyKind => {\n  // This normalization is performed in order to make sure that converting from and to k8s back and forth remains consistent\n  const clone = _.cloneDeep(from);\n  if (clone.spec) {\n    if (_.isEmpty(clone.spec.podSelector)) {\n      clone.spec.podSelector = {};\n    }\n    if (!clone.spec.policyTypes) {\n      clone.spec.policyTypes = [networkPolicyTypeIngress];\n      if (_.has(clone.spec, 'egress')) {\n        clone.spec.policyTypes.push(networkPolicyTypeEgress);\n      }\n    }\n    if (\n      !_.has(clone.spec, 'ingress') &&\n      clone.spec.policyTypes.includes(networkPolicyTypeIngress)\n    ) {\n      clone.spec.ingress = [];\n    }\n    if (!_.has(clone.spec, 'egress') && clone.spec.policyTypes.includes(networkPolicyTypeEgress)) {\n      clone.spec.egress = [];\n    }\n    [clone.spec.ingress, clone.spec.egress].forEach(\n      (xgress) =>\n        xgress &&\n        xgress.forEach(\n          (r) =>\n            r.ports &&\n            r.ports.forEach((p) => {\n              p.port = Number.isNaN(Number(p.port)) ? p.port : Number(p.port);\n            }),\n        ),\n    );\n  }\n  return clone;\n};\n\nconst selectorFromK8s = (\n  selector: Selector | undefined,\n  path: string,\n  t: TFunction,\n): string[][] | ConversionError => {\n  if (!selector) {\n    return [];\n  }\n  if (selector.matchExpressions) {\n    return errors.notSupported(t, `${path}.matchExpressions`);\n  }\n  const matchLabels = selector.matchLabels || {};\n  return _.isEmpty(matchLabels) ? [] : _.map(matchLabels, (key: string, val: string) => [val, key]);\n};\n\nconst portFromK8s = (port: K8SPort): NetworkPolicyPort | ConversionError => {\n  return {\n    key: _.uniqueId('port-'),\n    protocol: port.protocol || 'TCP',\n    port: port.port ? String(port.port) : '',\n  };\n};\n\nconst ipblockFromK8s = (\n  ipblock: { cidr: string; except?: string[] },\n  path: string,\n  t: TFunction,\n): NetworkPolicyIPBlock | ConversionError => {\n  const res: NetworkPolicyIPBlock = {\n    cidr: ipblock.cidr || '',\n    except: [],\n  };\n  if (_.has(ipblock, 'except')) {\n    if (!_.isArray(ipblock.except)) {\n      return errors.shouldBeAnArray(t, `${path}.except`);\n    }\n    res.except = ipblock.except\n      ? ipblock.except.map((e) => ({ key: _.uniqueId('exception-'), value: e }))\n      : [];\n  }\n  return res;\n};\n\nconst peerFromK8s = (\n  peer: K8SPeer,\n  path: string,\n  t: TFunction,\n): NetworkPolicyPeer | ConversionError => {\n  const out: NetworkPolicyPeer = { key: _.uniqueId() };\n  if (peer.ipBlock) {\n    const ipblock = ipblockFromK8s(peer.ipBlock, `${path}.ipBlock`, t);\n    if (isError(ipblock)) {\n      return ipblock;\n    }\n    out.ipBlock = ipblock;\n  } else {\n    if (peer.podSelector) {\n      const podSel = selectorFromK8s(peer.podSelector, `${path}.podSelector`, t);\n      if (isError(podSel)) {\n        return podSel;\n      }\n      out.podSelector = podSel;\n    }\n    if (peer.namespaceSelector) {\n      const nsSel = selectorFromK8s(peer.namespaceSelector, `${path}.namespaceSelector`, t);\n      if (isError(nsSel)) {\n        return nsSel;\n      }\n      out.namespaceSelector = nsSel;\n    }\n  }\n  if (!out.ipBlock && !out.namespaceSelector && !out.podSelector) {\n    return errors.shouldNotBeEmpty(t, path);\n  }\n  return out;\n};\n\nconst ruleFromK8s = (\n  rule: Rule,\n  path: string,\n  peersKey: 'from' | 'to',\n  t: TFunction,\n): NetworkPolicyRule | ConversionError => {\n  const converted: NetworkPolicyRule = {\n    key: _.uniqueId(),\n    ports: [],\n    peers: [],\n  };\n  if (rule.ports) {\n    if (!_.isArray(rule.ports)) {\n      return errors.shouldBeAnArray(t, `${path}.ports`);\n    }\n    const ports = factorOutError(rule.ports.map((p) => portFromK8s(p)));\n    if (isError(ports)) {\n      return ports;\n    }\n    converted.ports = ports;\n  }\n  const rulePeers = rule[peersKey];\n  if (rulePeers) {\n    if (!_.isArray(rule[peersKey])) {\n      return errors.shouldBeAnArray(t, `${path}.${peersKey}`);\n    }\n    const peers = factorOutError(\n      rulePeers.map((p, idx) => peerFromK8s(p, `${path}.${peersKey}[${idx}]`, t)),\n    );\n    if (isError(peers)) {\n      return peers;\n    }\n    converted.peers = peers;\n  }\n  return converted;\n};\n\nconst rulesFromK8s = (\n  rules: Rule[] | undefined,\n  path: string,\n  peersKey: 'from' | 'to',\n  isAffected: boolean,\n  t: TFunction,\n): NetworkPolicyRules | ConversionError => {\n  if (!isAffected) {\n    return { rules: [], denyAll: false };\n  }\n  // Quoted from doc reference: \"If this field is empty then this NetworkPolicy does not allow any traffic\"\n  if (!rules) {\n    return { rules: [], denyAll: true };\n  }\n  if (!_.isArray(rules)) {\n    return errors.shouldBeAnArray(t, path);\n  }\n  if (rules.length === 0) {\n    return { rules: [], denyAll: true };\n  }\n  const converted = factorOutError(\n    rules.map((r, idx) => ruleFromK8s(r, `${path}[${idx}]`, peersKey, t)),\n  );\n  if (isError(converted)) {\n    return converted;\n  }\n  return { rules: converted, denyAll: false };\n};\n\nexport const networkPolicyFromK8sResource = (\n  from: NetworkPolicyKind,\n  t: TFunction,\n): NetworkPolicy | ConversionError => {\n  if (!from.metadata) {\n    return errors.isMissing(t, 'metadata');\n  }\n  if (!from.spec) {\n    return errors.isMissing(t, 'spec');\n  }\n  // per spec, podSelector can be null, but key must be present\n  if (!_.has(from.spec, 'podSelector')) {\n    return errors.isMissing(t, 'spec.podSelector');\n  }\n  const podSelector = selectorFromK8s(from.spec.podSelector, 'spec.podSelector', t);\n  if (isError(podSelector)) {\n    return podSelector;\n  }\n  if (from.spec.policyTypes && !_.isArray(from.spec.policyTypes)) {\n    return errors.shouldBeAnArray(t, 'spec.policyTypes');\n  }\n\n  // Note, the logic differs between ingress and egress, see https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/#networkpolicyspec-v1-networking-k8s-io\n  // A policy affects egress if it is explicitely specified in policyTypes, or if policyTypes isn't set and there is an egress section.\n  // A policy affects ingress if it is explicitely specified in policyTypes, or if policyTypes isn't set, regardless the presence of an ingress sections.\n  const affectsEgress = from.spec.policyTypes\n    ? from.spec.policyTypes.includes(networkPolicyTypeEgress)\n    : !!from.spec.egress;\n  const affectsIngress = from.spec.policyTypes\n    ? from.spec.policyTypes.includes(networkPolicyTypeIngress)\n    : true;\n\n  const ingressRules = rulesFromK8s(from.spec.ingress, 'spec.ingress', 'from', affectsIngress, t);\n  if (isError(ingressRules)) {\n    return ingressRules;\n  }\n\n  const egressRules = rulesFromK8s(from.spec.egress, 'spec.egress', 'to', affectsEgress, t);\n  if (isError(egressRules)) {\n    return egressRules;\n  }\n  const policyFor = from?.metadata?.annotations?.[POLICY_FOR_LABEL]?.split(',')?.map((nad) =>\n    nad.trim(),\n  );\n\n  return {\n    name: from.metadata.name || '',\n    namespace: from.metadata.namespace || '',\n    podSelector,\n    ingress: ingressRules,\n    egress: egressRules,\n    policyFor,\n  };\n};\n","/* eslint-disable tsdoc/syntax */\nimport * as React from 'react';\nimport { useK8sGet } from '../../components/utils/k8s-get-hook';\nimport { K8sResourceKind } from './types';\nimport { ConfigMapModel } from '../../models';\n\nconst networkConfigMapName = 'openshift-network-features';\nconst networkConfigMapNamespace = 'openshift-config-managed';\nconst policyEgressConfigKey = 'policy_egress';\nconst policyPeerIPBlockExceptionsConfigKey = 'policy_peer_ipblock_exceptions';\n\nexport enum ClusterNetworkFeature {\n  PolicyEgress = 'PolicyEgress',\n  PolicyPeerIPBlockExceptions = 'PolicyPeerIPBlockExceptions',\n}\n\nexport type ClusterNetworkFeatures = {\n  [key in ClusterNetworkFeature]?: boolean;\n};\n\nconst getFeatureState = (data: { [key: string]: string }, key: string): boolean | undefined => {\n  // Note: config map data comes as string, not bool\n  return data.hasOwnProperty(key) ? data[key] === 'true' : undefined;\n};\n\n/**\n *  Fetches and returns the features supported by the Cluster Network Type\n *  (Openshift SDN, Kubernetes OVN ...) using a config map provided by the\n *  cluster network operator.\n *\n *  @async\n *  @returns [ClusterNetworkFeatures, boolean, any] - The asynchronously-loaded cluster network\n *  features, plus a boolean that is 'false' until the first value is loaded (or an error is\n *  returned)\n */\nexport const useClusterNetworkFeatures = (): [ClusterNetworkFeatures, boolean] => {\n  const [features, setFeatures] = React.useState<ClusterNetworkFeatures>({});\n  const [featuresLoaded, setFeaturesLoaded] = React.useState(false);\n  const [config, configLoaded] = useK8sGet<K8sResourceKind>(\n    ConfigMapModel,\n    networkConfigMapName,\n    networkConfigMapNamespace,\n  );\n  React.useEffect(() => {\n    if (configLoaded) {\n      if (config?.data) {\n        setFeatures({\n          PolicyEgress: getFeatureState(config.data, policyEgressConfigKey),\n          PolicyPeerIPBlockExceptions: getFeatureState(\n            config.data,\n            policyPeerIPBlockExceptionsConfigKey,\n          ),\n        });\n      }\n      setFeaturesLoaded(true);\n    }\n  }, [config, configLoaded]);\n\n  return [features, featuresLoaded];\n};\n","import { K8sKind } from '@console/internal/module/k8s';\n\nexport const NetworkAttachmentDefinitionModel: K8sKind = {\n  label: 'Network Attachment Definition',\n  labelPlural: 'Network Attachment Definitions',\n  apiVersion: 'v1',\n  apiGroup: 'k8s.cni.cncf.io',\n  plural: 'network-attachment-definitions',\n  namespaced: true,\n  abbr: 'NAD',\n  kind: 'NetworkAttachmentDefinition',\n  id: 'network-attachment-definition',\n  crd: true,\n  legacyPluralURL: true,\n};\n\nexport const SriovNetworkNodePolicyModel: K8sKind = {\n  label: 'SR-IOV Network Node Policy',\n  labelPlural: 'SR-IOV Network Node Policies',\n  apiVersion: 'v1',\n  apiGroup: 'sriovnetwork.openshift.io',\n  plural: 'sriovnetworknodepolicies',\n  namespaced: true,\n  abbr: 'SRNNPM', // TODO check on this\n  kind: 'SriovNetworkNodePolicy',\n  id: 'sriov-network-node-policy',\n  crd: true,\n};\n","import { SelectOptionProps } from '@patternfly/react-core';\nimport { t } from 'i18next';\nimport { isEmpty } from 'lodash';\nimport { NO_RESULTS_VALUE } from './constants';\n\nexport const filterOptions = (options: SelectOptionProps[], inputValue: string) => {\n  const filteredOptions = options.filter((menuItem) =>\n    String(menuItem.children).toLowerCase().includes(inputValue.toLowerCase()),\n  );\n\n  if (isEmpty(filteredOptions)) {\n    return [\n      {\n        children: t(`console-app~No results found for \"{{inputValue}}\"`, { inputValue }),\n        isDisabled: false,\n        value: NO_RESULTS_VALUE,\n      },\n    ];\n  }\n\n  return filteredOptions;\n};\n\nexport const handleMenuArrowKeys = (\n  key: string,\n  focusedItemIndex: null | number,\n  selectOptions: SelectOptionProps[],\n): null | number => {\n  if (key === 'ArrowUp') {\n    // When no index is set or at the first index, focus to the last, otherwise decrement focus index\n    if (focusedItemIndex === null || focusedItemIndex === 0) {\n      return selectOptions.length - 1;\n    }\n\n    return focusedItemIndex - 1;\n  }\n\n  if (key === 'ArrowDown') {\n    // When no index is set or at the last index, focus to the first, otherwise increment focus index\n    if (focusedItemIndex === null || focusedItemIndex === selectOptions.length - 1) {\n      return 0;\n    }\n    return focusedItemIndex + 1;\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncComponent, AsyncComponentProps } from '@console/internal/components/utils/async';\n\nconst NameValueEditorComponent = (props: Omit<AsyncComponentProps, 'loader'>) => (\n  <AsyncComponent\n    loader={() =>\n      import('@console/internal/components/utils/name-value-editor').then((c) => c.NameValueEditor)\n    }\n    {...props}\n  />\n);\n\ntype NetworkPolicyConditionalSelectorProps = {\n  selectorType: 'pod' | 'namespace';\n  helpText: string;\n  values: string[][];\n  onChange: (pairs: string[][]) => void;\n  dataTest?: string;\n};\n\nexport const NetworkPolicyConditionalSelector: React.FunctionComponent<NetworkPolicyConditionalSelectorProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const { selectorType, helpText, values, onChange, dataTest } = props;\n  const [isVisible, setVisible] = React.useState(values.length > 0);\n\n  const handleSelectorChange = (updated: { nameValuePairs: string[][] }) => {\n    onChange(updated.nameValuePairs);\n  };\n\n  const title =\n    selectorType === 'pod' ? t('console-app~Pod selector') : t('console-app~Namespace selector');\n  const addSelectorText =\n    selectorType === 'pod'\n      ? t('console-app~Add pod selector')\n      : t('console-app~Add namespace selector');\n  const secondHelpText =\n    selectorType === 'pod'\n      ? t('console-app~Pods having all the supplied key/value pairs as labels will be selected.')\n      : t(\n          'console-app~Namespaces having all the supplied key/value pairs as labels will be selected.',\n        );\n\n  return (\n    <>\n      <span>\n        <label>{title}</label>\n      </span>\n      <div className=\"help-block\">\n        <p className=\"co-create-networkpolicy__paragraph\">{helpText}</p>\n      </div>\n      {isVisible ? (\n        <>\n          <div className=\"help-block\">\n            <p className=\"co-create-networkpolicy__paragraph\">{secondHelpText}</p>\n          </div>\n          <NameValueEditorComponent\n            nameValuePairs={values.length > 0 ? values : [['', '']]}\n            valueString={t('console-app~Selector')}\n            nameString={t('console-app~Label')}\n            addString={t('console-app~Add label')}\n            readOnly={false}\n            allowSorting={false}\n            updateParentData={handleSelectorChange}\n            onLastItemRemoved={() => setVisible(false)}\n          />\n        </>\n      ) : (\n        <div className=\"co-toolbar__group co-toolbar__group--left co-create-networkpolicy__show-selector\">\n          <Button\n            className=\"pf-m-link--align-left\"\n            onClick={() => setVisible(true)}\n            type=\"button\"\n            variant=\"link\"\n            data-test={dataTest ? `add-${dataTest}` : 'add-labels-selector'}\n          >\n            <PlusCircleIcon className=\"co-icon-space-r\" />\n            {addSelectorText}\n          </Button>\n        </div>\n      )}\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Alert, Label, Popover, TreeView, TreeViewDataItem } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { selectorToK8s } from '@console/app/src/components/network-policies/network-policy-model';\nimport { filterTypeMap } from '@console/internal/components/filter-toolbar';\nimport { ResourceIcon, resourceListPathFromModel } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { NamespaceModel, PodModel } from '@console/internal/models';\nimport { K8sResourceCommon, PodKind, Selector } from '@console/internal/module/k8s';\n\nconst maxPreviewPods = 10;\nconst labelFilterQueryParamSeparator = ',';\n\ntype NetworkPolicySelectorPreviewProps = {\n  podSelector: string[][];\n  namespaceSelector?: string[][];\n  policyNamespace: string;\n  popoverRef: React.MutableRefObject<undefined>;\n  dataTest?: string;\n};\n\nexport const NetworkPolicySelectorPreview: React.FC<NetworkPolicySelectorPreviewProps> = (\n  props,\n) => {\n  const allNamespaces =\n    props.namespaceSelector && props.namespaceSelector.filter((pair) => !!pair[0]).length === 0;\n\n  return (\n    <>\n      <Popover\n        aria-label=\"pods-list\"\n        data-test={props.dataTest ? `${props.dataTest}-popover` : `pods-preview-popover`}\n        bodyContent={\n          props.namespaceSelector ? (\n            allNamespaces ? (\n              <PodsPreview podSelector={props.podSelector} />\n            ) : (\n              <PodsPreview\n                namespaceSelector={props.namespaceSelector}\n                podSelector={props.podSelector}\n              />\n            )\n          ) : (\n            <PodsPreview namespace={props.policyNamespace} podSelector={props.podSelector} />\n          )\n        }\n        triggerRef={props.popoverRef}\n        position={'bottom'}\n      />\n    </>\n  );\n};\n\n// Prevents illegal selectors to crash the system when passed to useK8sWatchResource\nconst allowedSelector = /^([A-Za-z0-9][-A-Za-z0-9_\\\\/.]*)?[A-Za-z0-9]$/;\nconst safeSelector = (selector?: string[][]): [Selector, string?] => {\n  if (!selector || selector?.length === 0) {\n    return [{ matchLabels: {} }, undefined];\n  }\n  for (const label of selector) {\n    if (!label[0].match(allowedSelector)) {\n      return [{ matchLabels: {} }, label[0]];\n    }\n    if (!label[1].match(allowedSelector)) {\n      return [{ matchLabels: {} }, label[1]];\n    }\n  }\n  return [selectorToK8s(selector) as Selector, undefined];\n};\n\nfunction useWatch<T>(kind: string, selector: Selector, namespace?: string) {\n  const watchPods = React.useMemo(\n    () => ({\n      isList: true,\n      kind,\n      selector,\n      namespace,\n    }),\n    [kind, namespace, selector],\n  );\n  return useK8sWatchResource<T[]>(watchPods);\n}\n\n/**\n * `podSelector` must be set (even if empty).\n *\n * If `namespace` is set, it will look for pods within this namespace, otherwise:\n *    - if `namespaceSelector` is not set or empty, if will look for pods in all the namespaces\n *    - if `namespaceSelector` is set, it will look for pods in the namespaces with labels matching this selector\n */\ntype PodsPreviewProps = {\n  namespace?: string;\n  namespaceSelector?: string[][];\n  podSelector: string[][];\n};\n\n/**\n * Instantiates a pods preview tree\n * @param props see {@link PodsPreviewProps}\n * @returns a pods preview tree\n */\nexport const PodsPreview: React.FunctionComponent<PodsPreviewProps> = (props) => {\n  const { namespace, podSelector, namespaceSelector } = props;\n  const { t } = useTranslation();\n\n  const [safeNsSelector, offendingNsSelector] = React.useMemo(\n    () => safeSelector(namespaceSelector),\n    [namespaceSelector],\n  );\n\n  const [safePodSelector, offendingPodSelector] = React.useMemo(() => safeSelector(podSelector), [\n    podSelector,\n  ]);\n\n  const [watchedPods, watchPodLoaded, watchPodError] = useWatch<PodKind>(\n    PodModel.kind,\n    safePodSelector,\n    namespace,\n  );\n\n  const [watchedNs, watchNsLoaded, watchNsError] = useWatch<K8sResourceCommon>(\n    NamespaceModel.kind,\n    safeNsSelector,\n  );\n\n  const selectorError = React.useMemo(() => {\n    if (offendingPodSelector || offendingNsSelector) {\n      return t(\n        'public~Input error: selectors must start and end by a letter ' +\n          'or number, and can only contain -, _, / or . ' +\n          'Offending value: {{offendingSelector}}',\n        {\n          offendingSelector: offendingPodSelector || offendingNsSelector,\n        },\n      );\n    }\n    return undefined;\n  }, [offendingPodSelector, offendingNsSelector, t]);\n\n  // Converts fetched namespaces to a set for faster lookup\n  const matchedNs = React.useMemo(() => {\n    const set = new Set<string>();\n    if (watchNsLoaded && !watchNsError) {\n      for (const ns of watchedNs) {\n        const name = ns.metadata?.name;\n        if (name) {\n          set.add(name);\n        }\n      }\n    }\n    return set;\n  }, [watchNsError, watchNsLoaded, watchedNs]);\n\n  // takes the first 'maxPreviewPods' received pods and groups them by namespace\n  const preview: {\n    pods?: TreeViewDataItem[];\n    total?: number;\n    error?: any;\n  } = React.useMemo(() => {\n    if (selectorError) {\n      return { error: selectorError };\n    }\n    if (watchPodError) {\n      return { error: watchPodError };\n    }\n    if (!watchPodLoaded) {\n      return { pods: [], total: 0 };\n    }\n    // If there is a defined namespace selector, filter pods to remove\n    // those from non-matching namespaces\n    let filteredPods = watchedPods;\n    if (namespaceSelector) {\n      if (watchNsError) {\n        return { error: watchNsError };\n      }\n      filteredPods = filteredPods.filter(\n        (pod) => pod.metadata.namespace && matchedNs.has(pod.metadata.namespace),\n      );\n    }\n    // Group pod TreeViewDataItem by namespace, up to a maximum of maxPreviewedPods entries\n    const podsByNs: { [key: string]: TreeViewDataItem[] } = {};\n    filteredPods.slice(0, maxPreviewPods).forEach((pod) => {\n      const ns = pod?.metadata?.namespace as string;\n      podsByNs[ns] = podsByNs[ns] || [];\n      podsByNs[ns].push({\n        name: pod?.metadata?.name,\n        icon: <ResourceIcon kind={PodModel.kind} />,\n      });\n    });\n    // Then convert the above groups of pod TreeViewDataItems to subchildren of\n    // the namespaces' TreeViewDataItems\n    const podTreeEntries = _.toPairs(podsByNs).map(\n      ([ns, pods]): TreeViewDataItem => ({\n        name: ns,\n        children: pods,\n        defaultExpanded: true,\n        icon: <ResourceIcon kind={NamespaceModel.kind} />,\n      }),\n    );\n    return {\n      pods: podTreeEntries,\n      total: filteredPods.length,\n    };\n  }, [\n    matchedNs,\n    namespaceSelector,\n    selectorError,\n    watchNsError,\n    watchPodError,\n    watchPodLoaded,\n    watchedPods,\n  ]);\n\n  const labelList = _.map(safePodSelector.matchLabels || {}, (value, label) => `${label}=${value}`);\n  const labelBadges = _.map(safePodSelector.matchLabels || {}, (value, label) => (\n    <Label key={label} value={value} color=\"green\">\n      {label}={value}\n    </Label>\n  ));\n  // Filter by labels in the \"View all XXX results\" link, if needed\n  const podsFilterQuery =\n    preview.total && preview.total > maxPreviewPods && labelList.length > 0\n      ? `?${filterTypeMap.Label}=${encodeURIComponent(\n          labelList.join(labelFilterQueryParamSeparator),\n        )}`\n      : '';\n\n  return preview.error ? (\n    <Alert\n      data-test=\"pods-preview-alert\"\n      variant=\"danger\"\n      isInline\n      title={t(\"public~Can't preview pods\")}\n    >\n      <p>{String(preview.error)}</p>\n    </Alert>\n  ) : (\n    <>\n      {watchPodLoaded && preview.pods?.length === 0 && (\n        <div data-test=\"pods-preview-title\">\n          {t('public~No pods matching the provided labels in the current namespace')}\n        </div>\n      )}\n      {preview.pods && preview.pods.length > 0 && (\n        <>\n          <div data-test=\"pods-preview-title\">\n            {labelList?.length > 0 ? (\n              <>\n                {t('public~List of pods matching')} {labelBadges}\n              </>\n            ) : (\n              t('public~List of pods')\n            )}\n          </div>\n          <TreeView\n            data-test=\"pods-preview-tree\"\n            className=\"co-create-networkpolicy__selector-preview\"\n            data={preview.pods}\n            hasGuides\n          />\n          {preview.total && preview.total > maxPreviewPods && (\n            <>\n              {_.size(safeNsSelector.matchLabels) === 0 ? (\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href={`${resourceListPathFromModel(PodModel, namespace)}${podsFilterQuery}`}\n                  data-test=\"pods-preview-footer-link\"\n                >\n                  {t('public~View all {{total}} results', {\n                    total: preview.total,\n                  })}\n                </a>\n              ) : (\n                // The PodsList page allows filtering by pod labels for the current namespace\n                // or for all the namespaces, but does not allow filtering by namespace labels.\n                // So if the namespace selector has labels, we disable the link to avoid\n                // directing the user to incorrect data\n                <p data-test=\"pods-preview-footer\">\n                  {t('public~Showing {{shown}} from {{total}} results', {\n                    shown: maxPreviewPods,\n                    total: preview.total,\n                  })}\n                </p>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import { isEmpty } from 'lodash';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { MultiNetworkPolicyModel } from '@console/internal/models';\n\nconst useIsMultiNetworkPolicy = () => {\n  const location = useLocation();\n\n  return (\n    !isEmpty(location.pathname.match(MultiNetworkPolicyModel.kind)) ||\n    !isEmpty(location.pathname.match(MultiNetworkPolicyModel.plural))\n  );\n};\n\nexport default useIsMultiNetworkPolicy;\n"],"sourceRoot":""}