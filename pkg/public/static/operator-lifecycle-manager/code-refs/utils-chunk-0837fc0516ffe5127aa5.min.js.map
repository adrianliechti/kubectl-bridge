{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager/src/utils/index.ts","webpack:///./packages/operator-lifecycle-manager/src/utils/useClusterServiceVersions.tsx"],"names":["ExpandCollapseDescription","children","t","expanded","setExpanded","textExpanded","textCollapsed","onToggle","isExpanded","normalizeClusterServiceVersions","clusterServiceVersions","namespace","map","csv","desc","reduce","all","cur","find","v","concat","creationTimestamp","metadata","uid","displayName","description","provider","spec","name","operatorName","supportUrl","annotations","markdownDescription","csvDescription","longDescription","documentationUrl","links","linkName","capabilityLevel","toLowerCase","replace","detailsProperties","label","value","operatorDescription","content","detailsDescriptions","type","kind","tags","keywords","attributes","icon","class","url","cta","href","details","properties","descriptions","data","resourceSelector","csvs","isList","namespaced","window","SERVER_FLAGS","copiedCSVsDisabled","includes","globalCsvs","csvsResources","loaded","loadError"],"mappings":"6FAAA,2E,kCCAA,wGAwBO,MAAMA,EAAsE,EACjFC,eAEA,MAAM,EAAEC,GAAM,4BACPC,EAAUC,GAAe,YAAwB,GAIxD,OACE,gBAAC,IAAc,CACbC,aAAcH,EAAE,iCAChBI,cAAeJ,EAAE,iCACjBK,SAPYC,IACdJ,EAAYI,KASTL,EAAWF,EAAW,mCAKvBQ,EAAkC,CACtCC,EACAC,EACAT,IAK4C,IAE1CQ,EAAuBE,IAAKC,GAAQ,YAAmBA,GAAKD,IAAKE,GAAU,OAAD,wBAAMA,GAAI,CAAED,WACrFE,OACC,CAACC,EAAKC,IACJD,EAAIE,KAAMC,GAAM,YAAwBA,KAAO,YAAwBF,IACnED,EACAA,EAAII,OAAO,CAACH,IAClB,IAEDL,IAAkBE,I,UACjB,MAAM,kBAAEO,GAAsBP,EAAKD,IAAIS,SACjCC,EAAM,GAAGT,EAAKD,IAAIS,SAASC,OAAOT,EAAKU,eACvC,YAAEC,GAAgBX,EAClBY,EAAiC,QAAtB,EAAAZ,EAAKD,IAAIc,KAAKD,gBAAQ,eAAEE,KACnCC,EAAef,EAAKD,IAAIc,KAAKH,YAC7BM,EACyB,QAA7B,EAAAhB,EAAKD,IAAIS,SAASS,mBAAW,eAAG,6CAC5BC,GArBqBC,EAqBuBnB,EAAKD,IAAIc,KAAKF,YApBlE,MAAMvB,EAAE,gCAAgC+B,KADZ,IAACA,EAsB3B,MAAMC,EAAkBhC,EACtB,sHACA,CAAE2B,iBAEEM,EAAmB,KACtBrB,EAAKD,IAAIc,KAAKS,OAAS,IAAIlB,KAAK,EAAGmB,cAA4B,kBAAbA,GACnD,OAEIC,EAAkB,IAAMxB,EAAM,CAAC,MAAO,WAAY,cAAe,gBAAiB,IACrFyB,cACAC,QAAQ,MAAO,IAEZC,EAAkD,CACtD,CACEC,MAAOxC,EAAE,wBACTyC,MAAOL,IAILM,EACJ,gBAAC5C,EAAyB,KACxB,gBAAC,mBAAgB,CAAC6C,QAASb,KAIzBc,EAAuD,CAC3D,CACEH,MAAO,yBAAIlB,IAEb,CACEkB,MAAO,yBAAIT,IAEb,CACES,MAAOC,IAIX,MAAO,CAELrB,MACAwB,KAAM,wBACNnB,KAAMd,EAAKU,aAAeV,EAAKkC,KAC/BvB,cACAC,WACAuB,KAAMnC,EAAKD,IAAIc,KAAKuB,SACpB7B,oBACAS,aACAK,mBACAgB,WAAY,CACVtB,gBAEFuB,KAAM,CACJC,MAAO,KACPC,IAAK,aAAqC,QAAlB,EAAAxC,EAAKD,IAAIc,KAAKyB,YAAI,eAAG,KAE/CG,IAAK,CACHb,MAAOxC,EAAE,iBACTsD,KAAM,WAAW7C,4BACfG,EAAKD,IAAIS,SAASM,QAChB,YAAwBd,WAE9B2C,QAAS,CACPC,WAAYjB,EACZkB,aAAcb,GAEhBc,KAAM9C,KAmDC,IA5CiD,EAC9DH,gB,QAEA,MAAM,EAAET,GAAM,2BACR2D,EAAmB,UACvB,IAAO,OAAD,QACJC,KAAM,CACJC,QAAQ,EACRf,KAAM,aAAkB,8BACxBgB,WAAY,6BAA2BA,WACvCrD,cAEEsD,OAAOC,aAAaC,qBAAuB,IAA2BC,SAASzD,GAC/E,CACE0D,WAAY,CACVN,QAAQ,EACRf,KAAM,aAAkB,8BACxBgB,WAAY,6BAA2BA,WACvCrD,UAAW,MAGf,IAEN,CAACA,IAGG2D,EAAgB,YAGnBT,GAYH,MAAO,CAVgB,UACrB,K,YACE,OAAApD,EACE,IAA6B,QAAxB,EAAkB,QAAlB,EAAA6D,EAAcR,YAAI,eAAEF,YAAI,QAAI,MAAuC,QAA9B,EAAwB,QAAxB,EAAAU,EAAcD,kBAAU,eAAET,YAAI,QAAI,IAC5EjD,EACAT,IAEJ,CAACoE,EAAe3D,EAAWT,IAGa,QAAlB,EAAAoE,EAAcR,YAAI,eAAES,OAA0B,QAAlB,EAAAD,EAAcR,YAAI,eAAEU","file":"operator-lifecycle-manager/code-refs/utils-chunk-0837fc0516ffe5127aa5.min.js","sourcesContent":["export { default as catalogCSVProvider } from './useClusterServiceVersions';\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ExtensionHook,\n  CatalogItem,\n  CatalogItemDetailsDescription,\n  CatalogItemDetailsProperty,\n} from '@console/dynamic-plugin-sdk';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { getImageForCSVIcon } from '@console/shared';\nimport { providedAPIsForCSV, referenceForProvidedAPI } from '../components';\nimport { GLOBAL_COPIED_CSV_NAMESPACE, GLOBAL_OPERATOR_NAMESPACES } from '../const';\nimport { ClusterServiceVersionModel } from '../models';\nimport { ProvidedAPI, ClusterServiceVersionKind } from '../types';\n\ntype ExpandCollapseDescriptionProps = {\n  children: React.ReactNode;\n};\n\nexport const ExpandCollapseDescription: React.FC<ExpandCollapseDescriptionProps> = ({\n  children,\n}) => {\n  const { t } = useTranslation();\n  const [expanded, setExpanded] = React.useState<boolean>(false);\n  const toggle = (isExpanded) => {\n    setExpanded(isExpanded);\n  };\n  return (\n    <ExpandCollapse\n      textExpanded={t('olm~Hide operator description')}\n      textCollapsed={t('olm~Show operator description')}\n      onToggle={toggle}\n    >\n      {/** used an empty Fragment here because Expandable always expects a children, using null throws react warning */}\n      {expanded ? children : <></>}\n    </ExpandCollapse>\n  );\n};\n\nconst normalizeClusterServiceVersions = (\n  clusterServiceVersions: ClusterServiceVersionKind[],\n  namespace: string,\n  t: TFunction,\n): CatalogItem[] => {\n  const formatTileDescription = (csvDescription: string): string =>\n    `## ${t('olm~Operator description')}\\n${csvDescription}`;\n\n  const operatorProvidedAPIs: CatalogItem[] = _.flatten<\n    ProvidedAPI & { csv: ClusterServiceVersionKind }\n  >(clusterServiceVersions.map((csv) => providedAPIsForCSV(csv).map((desc) => ({ ...desc, csv }))))\n    .reduce<(ProvidedAPI & { csv: ClusterServiceVersionKind })[]>(\n      (all, cur) =>\n        all.find((v) => referenceForProvidedAPI(v) === referenceForProvidedAPI(cur))\n          ? all\n          : all.concat([cur]),\n      [],\n    )\n    .map<CatalogItem>((desc) => {\n      const { creationTimestamp } = desc.csv.metadata;\n      const uid = `${desc.csv.metadata.uid}-${desc.displayName}`;\n      const { description } = desc;\n      const provider = desc.csv.spec.provider?.name;\n      const operatorName = desc.csv.spec.displayName;\n      const supportUrl =\n        desc.csv.metadata.annotations?.['marketplace.openshift.io/support-workflow'];\n      const markdownDescription = formatTileDescription(desc.csv.spec.description);\n      const longDescription = t(\n        'olm~This resource is provided by {{operatorName}}, a Kubernetes Operator enabled by the Operator Lifecycle Manager.',\n        { operatorName },\n      );\n      const documentationUrl = _.get(\n        (desc.csv.spec.links || []).find(({ linkName }) => linkName === 'Documentation'),\n        'url',\n      );\n      const capabilityLevel = _.get(desc, ['csv', 'metadata', 'annotations', 'capabilities'], '')\n        .toLowerCase()\n        .replace(/\\s/g, '');\n\n      const detailsProperties: CatalogItemDetailsProperty[] = [\n        {\n          label: t('olm~Capability level'),\n          value: capabilityLevel,\n        },\n      ];\n\n      const operatorDescription = (\n        <ExpandCollapseDescription>\n          <SyncMarkdownView content={markdownDescription} />\n        </ExpandCollapseDescription>\n      );\n\n      const detailsDescriptions: CatalogItemDetailsDescription[] = [\n        {\n          value: <p>{description}</p>,\n        },\n        {\n          value: <p>{longDescription}</p>,\n        },\n        {\n          value: operatorDescription,\n        },\n      ];\n\n      return {\n        // NOTE: Faking a real k8s object to avoid fetching all CRDs\n        uid,\n        type: 'OperatorBackedService',\n        name: desc.displayName || desc.kind,\n        description,\n        provider,\n        tags: desc.csv.spec.keywords,\n        creationTimestamp,\n        supportUrl,\n        documentationUrl,\n        attributes: {\n          operatorName,\n        },\n        icon: {\n          class: null,\n          url: getImageForCSVIcon(desc.csv.spec.icon?.[0]),\n        },\n        cta: {\n          label: t('public~Create'),\n          href: `/k8s/ns/${namespace}/clusterserviceversions/${\n            desc.csv.metadata.name\n          }/${referenceForProvidedAPI(desc)}/~new`,\n        },\n        details: {\n          properties: detailsProperties,\n          descriptions: detailsDescriptions,\n        },\n        data: desc,\n      };\n    });\n\n  return operatorProvidedAPIs;\n};\n\nconst useClusterServiceVersions: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n  const resourceSelector = React.useMemo(\n    () => ({\n      csvs: {\n        isList: true,\n        kind: referenceForModel(ClusterServiceVersionModel),\n        namespaced: ClusterServiceVersionModel.namespaced,\n        namespace,\n      },\n      ...(window.SERVER_FLAGS.copiedCSVsDisabled && !GLOBAL_OPERATOR_NAMESPACES.includes(namespace)\n        ? {\n            globalCsvs: {\n              isList: true,\n              kind: referenceForModel(ClusterServiceVersionModel),\n              namespaced: ClusterServiceVersionModel.namespaced,\n              namespace: GLOBAL_COPIED_CSV_NAMESPACE,\n            },\n          }\n        : {}),\n    }),\n    [namespace],\n  );\n\n  const csvsResources = useK8sWatchResources<{\n    csvs: ClusterServiceVersionKind[];\n    globalCsvs?: ClusterServiceVersionKind[];\n  }>(resourceSelector);\n\n  const normalizedCSVs = React.useMemo(\n    () =>\n      normalizeClusterServiceVersions(\n        [...(csvsResources.csvs?.data ?? []), ...(csvsResources.globalCsvs?.data ?? [])],\n        namespace,\n        t,\n      ),\n    [csvsResources, namespace, t],\n  );\n\n  return [normalizedCSVs, csvsResources.csvs?.loaded, csvsResources.csvs?.loadError];\n};\n\nexport default useClusterServiceVersions;\n"],"sourceRoot":""}