{"version":3,"sources":["webpack:///./public/components/cluster-settings/cluster-operator.tsx","webpack:///./public/components/cluster-settings/cluster-status.tsx","webpack:///./public/components/cluster-settings/related-objects.tsx"],"names":["clusterOperatorReference","OperatorStatusIconAndLabel","status","icon","Available","Progressing","Degraded","CannotUpdate","Unavailable","Unknown","getIcon","tableColumnClasses","columnClass","ClusterOperatorTableRow","obj","message","operatorVersion","className","kind","name","metadata","namespace","ClusterOperatorList","props","t","labelPlural","Header","title","sortField","transforms","sortFunc","Row","virtualize","UpdateInProgressAlert","cv","updateCondition","True","isInline","variant","ClusterOperatorPage","filters","filterGroupName","type","reducer","items","id","ListComponent","canCreate","rowFilters","OperandVersions","versions","label","version","i","key","ClusterOperatorDetails","conditions","length","text","resource","ClusterOperatorDetailsPage","location","pages","details","editYaml","href","nameKey","component","breadcrumbsFor","labelPluralKey","path","pathname","ClusterVersionConditionsLink","smooth","to","StatusMessagePopover","bodyContent","children","InvalidMessage","onClick","op","catch","err","error","cancelUpdate","ReleaseNotAcceptedMessage","releaseNotAcceptedCondition","ReleaseAccepted","False","UpdatesAvailableMessage","FailingMessageText","failingCondition","Failing","UpdatingMessageText","UpdatingMessage","isFailing","ErrorRetrievingMessage","retrievedUpdatesCondition","RetrievedUpdates","reason","FailingMessage","UpToDateMessage","UpdateStatus","Invalid","ReleaseNotAccepted","UpdatesAvailable","Updating","UpdatingAndFailing","ErrorRetrieving","ResourceObjectName","gsv","customData","findModel","group","model","EmptyMessage","RelatedObjects","NoDataEmptyMsg","relatedObject","relatedObjects","data","filter"],"mappings":"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","file":"cluster-operator-chunk-ebc97c59cb35eb6d2269.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { SyncAltIcon } from '@patternfly/react-icons/dist/esm/icons/sync-alt-icon';\nimport { UnknownIcon } from '@patternfly/react-icons/dist/esm/icons/unknown-icon';\nimport { useTranslation } from 'react-i18next';\n\nimport { ClusterOperatorModel } from '../../models';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from '../factory';\nimport { Conditions } from '../conditions';\nimport {\n  getClusterOperatorStatus,\n  getClusterOperatorVersion,\n  getClusterVersionCondition,\n  getStatusAndMessage,\n  ClusterOperator,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  K8sResourceConditionStatus,\n  K8sResourceKindReference,\n  OperandVersion,\n  OperatorStatus,\n  referenceForModel,\n} from '../../module/k8s';\nimport {\n  navFactory,\n  EmptyBox,\n  Kebab,\n  LinkifyExternal,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from '../utils';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport RelatedObjectsPage from './related-objects';\nimport { ClusterVersionConditionsLink, UpdatingMessageText } from './cluster-status';\n\nexport const clusterOperatorReference: K8sResourceKindReference = referenceForModel(\n  ClusterOperatorModel,\n);\n\nconst getIcon = (status: OperatorStatus) => {\n  return {\n    [OperatorStatus.Available]: <GreenCheckCircleIcon />,\n    [OperatorStatus.Progressing]: <SyncAltIcon />,\n    [OperatorStatus.Degraded]: <YellowExclamationTriangleIcon />,\n    [OperatorStatus.CannotUpdate]: <YellowExclamationTriangleIcon />,\n    [OperatorStatus.Unavailable]: <RedExclamationCircleIcon />,\n    [OperatorStatus.Unknown]: <UnknownIcon />,\n  }[status];\n};\n\nconst OperatorStatusIconAndLabel: React.FC<OperatorStatusIconAndLabelProps> = ({ status }) => {\n  const icon = getIcon(status);\n  return (\n    <>\n      {icon} {status}\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  '',\n  'pf-v5-u-w-16-on-xl',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-33-on-2xl',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-33-on-2xl',\n  Kebab.columnClass,\n];\n\nconst ClusterOperatorTableRow: React.FC<RowFunctionArgs<ClusterOperator>> = ({ obj }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const operatorVersion = getClusterOperatorVersion(obj);\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={clusterOperatorReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <OperatorStatusIconAndLabel status={status} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{operatorVersion || '-'}</TableData>\n      <TableData\n        className={classNames(\n          tableColumnClasses[3],\n          'co-break-word',\n          'co-line-clamp',\n          'co-pre-line',\n        )}\n      >\n        <LinkifyExternal>{message || '-'}</LinkifyExternal>\n      </TableData>\n    </>\n  );\n};\n\nexport const ClusterOperatorList: React.FC = (props) => {\n  const { t } = useTranslation();\n  const ClusterOperatorTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Status'),\n        sortFunc: 'getClusterOperatorStatus',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Version'),\n        sortFunc: 'getClusterOperatorVersion',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Message'),\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={ClusterOperatorModel.labelPlural}\n      Header={ClusterOperatorTableHeader}\n      Row={ClusterOperatorTableRow}\n      virtualize\n    />\n  );\n};\n\nconst UpdateInProgressAlert: React.FC<UpdateInProgressAlertProps> = ({ cv }) => {\n  const updateCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Progressing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      {updateCondition && (\n        <div className=\"co-m-pane__body co-m-pane__body--section-heading\">\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"info\"\n            title={<UpdatingMessageText cv={cv} />}\n          >\n            <ClusterVersionConditionsLink cv={cv} />\n          </Alert>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const ClusterOperatorPage: React.FC<ClusterOperatorPageProps> = (props) => {\n  const { t } = useTranslation();\n  const filters = [\n    {\n      filterGroupName: t('public~Status'),\n      type: 'cluster-operator-status',\n      reducer: getClusterOperatorStatus,\n      items: [\n        { id: 'Available', title: t('public~Available') },\n        { id: 'Progressing', title: t('public~Progressing') },\n        { id: 'Degraded', title: t('public~Degraded') },\n        { id: 'Cannot update', title: t('public~Cannot update') },\n        { id: 'Unavailable', title: t('public~Unavailable') },\n        { id: 'Unknown', title: t('public~Unknown') },\n      ],\n    },\n  ];\n  return (\n    <>\n      <UpdateInProgressAlert cv={props.cv} />\n      <ListPage\n        {...props}\n        title={ClusterOperatorModel.labelPlural}\n        kind={clusterOperatorReference}\n        ListComponent={ClusterOperatorList}\n        canCreate={false}\n        rowFilters={filters}\n      />\n    </>\n  );\n};\n\nconst OperandVersions: React.FC<OperandVersionsProps> = ({ versions }) => {\n  const { t } = useTranslation();\n  return _.isEmpty(versions) ? (\n    <EmptyBox label={t('public~versions')} />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n        <thead className=\"pf-v5-c-table__thead\">\n          <tr className=\"pf-v5-c-table__tr\">\n            <th className=\"pf-v5-c-table__th\">{t('public~Name')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('public~Version')}</th>\n          </tr>\n        </thead>\n        <tbody className=\"pf-v5-c-table__tbody\">\n          {_.map(versions, ({ name, version }, i) => (\n            <tr className=\"pf-v5-c-table__tr\" key={i}>\n              <td className=\"pf-v5-c-table__td\">{name}</td>\n              <td className=\"pf-v5-c-table__td\">{version}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst ClusterOperatorDetails: React.FC<ClusterOperatorDetailsProps> = ({ obj }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const versions: OperandVersion[] = _.get(obj, 'status.versions', []);\n  const conditions = _.get(obj, 'status.conditions', []);\n  // Show the operator version in the details if it's the only version.\n  const operatorVersion =\n    versions.length === 1 && versions[0].name === 'operator' ? versions[0].version : null;\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~ClusterOperator details')} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              {operatorVersion && (\n                <>\n                  <dt>{t('public~Version')}</dt>\n                  <dd>{operatorVersion}</dd>\n                </>\n              )}\n              <dt>{t('public~Status')}</dt>\n              <dd>\n                <OperatorStatusIconAndLabel status={status} />\n              </dd>\n              <dt>{t('public~Message')}</dt>\n              <dd className=\"co-pre-line\">\n                <LinkifyExternal>{message || '-'}</LinkifyExternal>\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={conditions} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Operand versions')} />\n        <OperandVersions versions={versions} />\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorDetailsPage: React.FC = (props) => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  return (\n    <DetailsPage\n      {...props}\n      kind={clusterOperatorReference}\n      pages={[\n        navFactory.details(ClusterOperatorDetails),\n        navFactory.editYaml(),\n        {\n          href: 'related-objects',\n          // t('public~Related objects')\n          nameKey: 'public~Related objects',\n          component: RelatedObjectsPage,\n        },\n      ]}\n      breadcrumbsFor={() => [\n        {\n          name: t(ClusterOperatorModel.labelPluralKey),\n          path: '/settings/cluster/clusteroperators',\n        },\n        {\n          name: t('public~ClusterOperator details'),\n          path: location.pathname,\n        },\n      ]}\n    />\n  );\n};\n\ntype OperatorStatusIconAndLabelProps = {\n  status: OperatorStatus;\n};\n\ntype ClusterOperatorPageProps = {\n  cv: ClusterVersionKind;\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype OperandVersionsProps = {\n  versions: OperandVersion[];\n};\n\ntype ClusterOperatorDetailsProps = {\n  obj: ClusterOperator;\n};\n\ntype UpdateInProgressAlertProps = {\n  cv: ClusterVersionKind;\n};\n","import { Button, Popover } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { HashLink } from 'react-router-hash-link';\n\nimport { SyncAltIcon } from '@patternfly/react-icons/dist/esm/icons/sync-alt-icon';\n\nimport {\n  BlueArrowCircleUpIcon,\n  BlueInfoCircleIcon,\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n} from '@console/shared';\nimport { ClusterVersionModel } from '../../models';\nimport {\n  ClusterUpdateStatus,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  getClusterUpdateStatus,\n  getClusterVersionCondition,\n  getDesiredClusterVersion,\n  k8sPatch,\n  K8sResourceConditionStatus,\n} from '../../module/k8s';\nimport { errorModal } from '../modals';\nimport { resourcePathFromModel, truncateMiddle } from '../utils';\n\nexport const ClusterVersionConditionsLink: React.FC<ClusterVersionConditionsLinkProps> = ({\n  cv,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <HashLink\n      smooth\n      to={`${resourcePathFromModel(ClusterVersionModel, cv.metadata.name)}#conditions`}\n    >\n      {t('public~View conditions')}\n    </HashLink>\n  );\n};\n\nconst cancelUpdate = (cv: ClusterVersionKind) => {\n  k8sPatch(ClusterVersionModel, cv, [{ path: '/spec/desiredUpdate', op: 'remove' }]).catch(\n    (err) => {\n      const error = err.message;\n      errorModal({ error });\n    },\n  );\n};\n\nconst StatusMessagePopover: React.FC<CVStatusMessagePopoverProps> = ({ bodyContent, children }) => {\n  return (\n    <Popover bodyContent={truncateMiddle(bodyContent, { length: 256 })}>\n      <Button variant=\"link\" isInline>\n        <span>{children}</span>\n      </Button>\n    </Popover>\n  );\n};\n\nconst InvalidMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const { t } = useTranslation();\n  return (\n    <div data-test=\"cv-update-status-invalid\">\n      <div>\n        <RedExclamationCircleIcon /> {t('public~Invalid cluster version')}\n      </div>\n      <Button onClick={() => cancelUpdate(cv)} variant=\"primary\" className=\"pf-v5-u-mt-xs\">\n        {t('public~Cancel update')}\n      </Button>\n    </div>\n  );\n};\n\nconst ReleaseNotAcceptedMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const releaseNotAcceptedCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.ReleaseAccepted,\n    K8sResourceConditionStatus.False,\n  );\n  const { t } = useTranslation();\n  return (\n    <>\n      <div data-test=\"cv-update-status-release-accepted-false\">\n        <StatusMessagePopover bodyContent={releaseNotAcceptedCondition.message}>\n          <RedExclamationCircleIcon /> {t('public~Release not accepted')}\n        </StatusMessagePopover>\n      </div>\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nconst UpdatesAvailableMessage: React.FC<CVStatusMessageProps> = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-update-status\" data-test=\"cv-update-status-available-updates\">\n      <BlueArrowCircleUpIcon /> {t('public~Available updates')}\n    </div>\n  );\n};\n\nconst FailingMessageText: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const failingCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Failing,\n    K8sResourceConditionStatus.True,\n  );\n  const { t } = useTranslation();\n  return (\n    <div data-test=\"cv-update-status-failing\">\n      <StatusMessagePopover bodyContent={failingCondition.message}>\n        <RedExclamationCircleIcon /> {t('public~Failing')}\n      </StatusMessagePopover>\n    </div>\n  );\n};\n\nexport const UpdatingMessageText: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const version = getDesiredClusterVersion(cv);\n  const { t } = useTranslation();\n  return <>{t('public~Update to {{version}} in progress', { version })}</>;\n};\n\nconst UpdatingMessage: React.FC<CVStatusMessageProps> = ({ cv, isFailing }) => {\n  return (\n    <>\n      <div data-test=\"cv-update-status-updating\">\n        <SyncAltIcon className=\"fa-spin co-icon-space-r\" />\n        <UpdatingMessageText cv={cv} />\n      </div>\n      {isFailing && <FailingMessageText cv={cv} />}\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nconst ErrorRetrievingMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  const retrievedUpdatesCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.RetrievedUpdates,\n    K8sResourceConditionStatus.False,\n  );\n  const { t } = useTranslation();\n  return retrievedUpdatesCondition.reason === 'NoChannel' ? (\n    <div data-test=\"cv-update-status-no-channel\">\n      <BlueInfoCircleIcon /> {retrievedUpdatesCondition.message}\n    </div>\n  ) : (\n    <>\n      <div data-test=\"cv-update-status-no-updates\">\n        <StatusMessagePopover bodyContent={retrievedUpdatesCondition.message}>\n          <RedExclamationCircleIcon /> {t('public~Not retrieving updates')}\n        </StatusMessagePopover>\n      </div>\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nconst FailingMessage: React.FC<CVStatusMessageProps> = ({ cv }) => {\n  return (\n    <>\n      <FailingMessageText cv={cv} />\n      <ClusterVersionConditionsLink cv={cv} />\n    </>\n  );\n};\n\nexport const UpToDateMessage: React.FC<{}> = () => {\n  const { t } = useTranslation();\n  return (\n    <span data-test=\"cv-update-status-up-to-date\">\n      <GreenCheckCircleIcon /> {t('public~Up to date')}\n    </span>\n  );\n};\n\nexport const UpdateStatus: React.FC<UpdateStatusProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  switch (status) {\n    case ClusterUpdateStatus.Invalid:\n      return <InvalidMessage cv={cv} />;\n    case ClusterUpdateStatus.ReleaseNotAccepted:\n      return <ReleaseNotAcceptedMessage cv={cv} />;\n    case ClusterUpdateStatus.UpdatesAvailable:\n      return <UpdatesAvailableMessage cv={cv} />;\n    case ClusterUpdateStatus.Updating:\n      return <UpdatingMessage cv={cv} />;\n    case ClusterUpdateStatus.UpdatingAndFailing:\n      return <UpdatingMessage cv={cv} isFailing />;\n    case ClusterUpdateStatus.ErrorRetrieving:\n      return <ErrorRetrievingMessage cv={cv} />;\n    case ClusterUpdateStatus.Failing:\n      return <FailingMessage cv={cv} />;\n    default:\n      return <UpToDateMessage />;\n  }\n};\n\ntype UpdateStatusProps = {\n  cv: ClusterVersionKind;\n};\n\ntype CVStatusMessagePopoverProps = {\n  bodyContent: string;\n  children: React.ReactNode;\n};\n\ntype CVStatusMessageProps = {\n  cv: ClusterVersionKind;\n  isFailing?: boolean;\n};\n\ntype ClusterVersionConditionsLinkProps = {\n  cv: ClusterVersionKind;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableData, RowFunctionArgs } from '../factory';\nimport {\n  referenceForModel,\n  ClusterOperator,\n  ClusterOperatorObjectReference,\n  useModelFinder,\n} from '../../module/k8s';\nimport { ResourceLink, EmptyBox } from '../utils';\n\nconst tableColumnClasses = [\n  '', // Name\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'), // Resource\n  classNames('pf-m-hidden', 'pf-m-visible-on-md'), // Group\n  '', // NS\n];\n\nconst ResourceObjectName: React.FC<ResourceObjectNameProps> = ({ gsv, name, namespace }) => {\n  if (!name) {\n    return <>-</>;\n  }\n  if (gsv) {\n    return <ResourceLink kind={gsv} name={name} namespace={namespace} />;\n  }\n  return <>{name}</>;\n};\n\nconst Row: React.FC<RowFunctionArgs> = ({ obj, customData: { findModel } }) => {\n  const { name, resource, namespace, group } = obj;\n  const model = findModel(group, resource);\n\n  const gsv = model ? referenceForModel(model) : null;\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceObjectName gsv={gsv} name={name} namespace={namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        {resource}\n        {group && <div className=\"pf-v5-u-display-none-on-md text-muted\">{group}</div>}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{group || '-'}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {namespace ? <ResourceLink kind=\"Namespace\" name={namespace} /> : '-'}\n      </TableData>\n    </>\n  );\n};\n\nconst EmptyMessage = () => {\n  const { t } = useTranslation();\n  return <EmptyBox label={t('public~Related objects')} />;\n};\n\nconst RelatedObjects: React.FC<RelatedObjectsProps> = (props) => {\n  const { findModel } = useModelFinder();\n  const { t } = useTranslation();\n  const Header = () => [\n    {\n      title: t('public~Name'),\n      sortField: 'name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('public~Resource'),\n      sortField: 'resource',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('public~Group'),\n      sortField: 'group',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('public~Namespace'),\n      sortField: 'namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n  const customData = React.useMemo(\n    () => ({\n      findModel,\n    }),\n    [findModel],\n  );\n  return (\n    <div className=\"co-m-pane__body\">\n      <Table\n        {...props}\n        Header={Header}\n        Row={Row}\n        customData={customData}\n        aria-label={t('public~Related objects')}\n        NoDataEmptyMsg={EmptyMessage}\n      />\n    </div>\n  );\n};\n\nconst RelatedObjectsPage: React.FC<RelatedObjectsPageProps> = (props) => {\n  const relatedObject: ClusterOperatorObjectReference[] = props.obj?.status?.relatedObjects;\n  const data = relatedObject?.filter(({ resource }) => resource);\n  return <RelatedObjects {...props} data={data} />;\n};\n\nexport default RelatedObjectsPage;\n\ntype ResourceObjectNameProps = {\n  gsv: string;\n  name: string;\n  namespace: string;\n};\n\ntype RelatedObjectsPageProps = {\n  obj: ClusterOperator;\n};\n\ntype RelatedObjectsProps = {\n  data: ClusterOperatorObjectReference[];\n};\n"],"sourceRoot":""}