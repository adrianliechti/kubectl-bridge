{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager/src/components/install-plan.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/clusterserviceversion.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/subscription.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-install-page.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-subscribe.tsx","webpack:///./node_modules/@patternfly/react-tokens/dist/js/chart_color_blue_300.js","webpack:///./node_modules/@patternfly/react-tokens/dist/js/chart_color_blue_100.js","webpack:///./packages/operator-lifecycle-manager/src/components/deprecated-operator-warnings/deprecated-operator-warnings.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/cluster-service-version-logo.tsx","webpack:///./packages/operator-lifecycle-manager/src/operator.svg","webpack:///./public/components/checkbox.tsx","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/add-circle-o-icon.js","webpack:///./packages/operator-lifecycle-manager/src/components/modals/uninstall-operator-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-preview-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/deprecated-operator-warnings/use-deprecated-operator-warnings.ts","webpack:///./packages/console-shared/src/hooks/useOperands.ts","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-approval-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/subscription-channel-modal.tsx","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js","webpack:///./packages/console-shared/src/hooks/redux-selectors.ts","webpack:///./packages/operator-lifecycle-manager/src/utils/useClusterServiceVersionPath.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-channel-version-select.tsx","webpack:///./node_modules/@patternfly/react-tokens/dist/js/chart_color_blue_200.js","webpack:///./packages/operator-lifecycle-manager/src/utils/console-plugin-form-group.tsx","webpack:///./node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/wrappable.js"],"names":["tableColumnClasses","columnClass","componentsTableColumnClasses","InstallPlanTableRow","obj","t","className","kind","namespace","metadata","name","phase","status","spec","clusterServiceVersionNames","map","csvName","key","title","ownerReferences","filter","ref","uid","actions","factory","common","resource","EmptyMsg","InstallPlansList","props","Header","sortField","transforms","Row","InstallPlansPage","params","ns","resources","namespaced","prop","flatten","installPlan","showTitle","ListComponent","updateUser","isOpenShift","user","username","NeedInstallPlanPermissions","OPENSHIFT","setUsername","apiGroup","variant","isInline","InstallPlanDetails","needsApproval","approval","Manual","approved","canPatchInstallPlans","group","plural","verb","to","text","showAnnotations","plan","accumulator","sourceName","sourceNamespace","add","toJS","getCatalogSources","conditions","InstallPlanPreview","hideApprovalBlock","setNeedsApproval","subscription","find","stepsByCSV","reduce","acc","step","update","resolving","steps","concat","toArray","length","isDisabled","onClick","op","path","value","then","catch","error","toString","push","includes","type","stepResource","InstallPlanDetailsPage","pages","details","editYaml","href","nameKey","component","menuActions","getExtensionsActionsForKind","displayName","isCSV","managedNamespacesColumnClass","statusColumnClass","lastUpdatedColumnClass","providedAPIsColumnClass","editSubscription","sub","labelKey","uninstall","csv","callback","k8sKill","k8sGet","k8sPatch","blocking","accessReview","menuActionsForCSV","Delete","SubscriptionStatus","muted","subscriptionStatus","ClusterServiceVersionStatus","deletionTimestamp","CSVPhaseDeleting","ManagedNamespaces","managedNamespaces","split","message","headerContent","bodyContent","count","ConsolePlugins","csvPlugins","trusted","console","isList","consoleOperatorConfig","canPatchConsoleOperatorConfig","csvPluginsCount","pluginName","ConsolePluginStatus","aPluginIsDisabled","plugins","some","plugin","ClusterServiceVersionTableRow","activeNamespace","catalogSourceMissing","provider","version","olmOperatorNamespace","icon","route","providedAPIs","annotations","deprecatedPackage","deprecation","timestamp","lastUpdateTime","desc","numAPIs","SubscriptionTableRow","Edit","lastUpdated","InstalledOperatorTableRow","customData","catalogSources","subscriptions","isPackageServer","CSVListEmptyMsg","CSVListNoDataEmptyMsg","project","noOperatorsInSingleNamespaceMessage","noOperatorsInAllNamespacesMessage","detail","ClusterServiceVersionList","data","rest","nameHeader","namespaceHeader","sortFunc","managedNamespacesHeader","statusHeader","lastUpdatedHeader","providedAPIsHeader","kebabHeader","allNamespaceActive","catalogoperators","operators","operator","window","SERVER_FLAGS","copiedCSVsDisabled","filterOperators","NoDataEmptyMsg","virtualize","customSorts","formatTargetNamespaces","targetNamespaces","getOperatorNamespace","ClusterServiceVersionsPage","canListAllSubscriptions","olmURL","helpText","undefined","optional","globalClusterServiceVersions","clusterServiceVersions","_i","all","currentCSV","startingCSV","textFilter","MarkdownView","loader","c","SyncMarkdownView","CRDCard","crd","required","reference","model","canCreate","verbs","createRoute","linkTo","badgeAlt","content","description","truncateContent","CRDCardRow","InitializationResourceAlert","initializationResource","initializationResourceKind","initializationResourceReference","customResource","customResourceLoaded","canCreateCustomResource","ClusterServiceVersionDetails","marketplaceSupportWorkflow","initializationResourceJSON","JSON","parse","supportWorkflowUrl","url","URL","searchParams","set","permissions","install","deprecatedChannel","deprecatedVersion","CSVPhaseFailed","reason","CSVReasonCopied","hideIcon","inline","dismissible","creationTimestamp","source","links","link","style","display","flexDirection","additionalClassName","maintainers","maintainer","email","maxWidth","deployments","serviceAccountName","ClusterServiceVersion","CSVSubscription","subscriptionsLoaded","subscriptionsLoadError","loaded","loadError","ClusterServiceVersionDetailsPage","location","csvLoaded","csvLoadError","groupVersionKind","canListClusterScopeInstallPlans","s","installedCSV","pagesFor","events","api","pageData","breadcrumbsFor","pathname","createRedirect","catalogSourceForSubscription","installedCSVForSubscription","packageForSubscription","packageManifests","pkg","packageName","catalogSource","catalogSourceNamespace","installPlanForSubscription","installPlans","ip","installPlanRef","SourceMissingStatus","SourceUnhealthyStatus","UpgradeApprovalLink","state","SubscriptionStateUpgradeAvailable","SubscriptionStateUpgradePending","SubscriptionStateAtLatest","_kind","hidden","channel","installPlanApproval","SubscriptionsList","SubscriptionsPage","createProps","createButtonText","filterLabel","CatalogSourceHealthAlert","health","healthy","InstallFailedAlert","installStatusPhase","installFailedCondition","installFailedMessage","InstallPlanPhaseFailed","CatalogSourceStatusIconAndText","SubscriptionDetails","catalogHealth","ch","catalogSourceRef","URLSearchParams","search","has","result","SubscriptionUpdates","SubscriptionUpgradeStatus","prevInstallPlanApproval","prevChannel","waitingForUpdate","setWaitingForUpdate","current","k8sUpdateAndWait","installPlanPhase","InstallPlanPhaseRequiresApproval","manualSubscriptionsInNamespace","k8sUpdate","dataTest","Automatic","SubscriptionDetailsPage","ViewInstalledOperatorsButton","singleNamespaceText","allNamespacesText","InstallFailedMessage","hasInitializationResource","InitializationResource","InstallNeedsApprovalMessage","subscriptionObj","installObj","approve","installObjIsInstallPlan","CreateInitializationResourceButton","disabled","button","item","InitializationResourceRequiredMessage","initializationResourceNamespace","InstallSucceededMessage","onError","InstallingMessage","OperatorInstallLogo","notFound","catalogNamespace","apiVersion","selector","matchLabels","fieldSelector","pkgManifest","channels","currentCSVDesc","OperatorInstallStatus","targetNamespace","loading","clusterServiceVersion","installPlanName","isStatusSucceeded","isStatusFailed","isApprovalNeeded","indicator","size","installMessage","id","OperatorInstallStatusPage","installPageResources","CloudServiceTokenWarningAlert","onClose","actionClose","InputField","label","placeholder","ariaLabel","setValue","autoFocus","onChange","_event","val","OperatorHubSubscribeForm","packageManifest","pkgName","roleARNText","setRoleARNText","azureTenantId","setAzureTenantId","azureClientId","setAzureClientId","azureSubscriptionId","setAzureSubscriptionId","gcpProjectNumber","setGcpProjectNumber","gcpPoolId","setGcpPoolId","gcpProviderId","setGcpProviderId","gcpServiceAcctEmail","setGcpServiceAcctEmail","setTargetNamespace","installMode","setInstallMode","tokenizedAuth","defaultChannel","updateChannelName","setUpdateChannelName","installModes","currentLatestVersion","updateVersion","setUpdateVersion","showCSTokenWarn","setShowCSTokenWarn","setApproval","cannotResolve","setCannotResolve","suggestedNamespaceExists","setSuggestedNamespaceExists","suggestedNamespaceExistsInFlight","setSuggestedNamespaceExistsInFlight","useSuggestedNSForSingleInstallMode","setUseSuggestedNSForSingleInstallMode","defaultEnableMonitoring","labels","enableMonitoring","setEnableMonitoring","setError","enabledPlugins","setEnabledPlugins","setDeprecatedPackage","deprecatedWarning","get","selectedInstallMode","preferredInstallMode","mode","InstallModeTypeAllNamespaces","InstallModeTypeOwnNamespace","suggestedNamespace","suggestedNamespaceTemplate","suggestedNamespaceTemplateName","operatorRequestsMonitoring","globalNS","operatorGroup","og","selectedTargetNamespace","operatorSuggestedNamespace","isSuggestedNamespaceSelected","showSuggestedNamespaceDetails","labelSelector","values","list","singleInstallMode","m","supportsSingle","supported","globalInstallMode","supportsGlobal","navigateToInstallPage","descFor","subscriptionExists","namespaceSupports","conflictingProvidedAPIs","operatorGroups","namespaces","existingAPIs","showMonitoringCheckbox","monitoringURL","configuringMonitoring","suggestedNamespaceDetails","isChecked","installedNamespaceOptions","checked","selectedKey","installedNamespaceSelect","globalNamespaceInstallMode","singleNamespaceInstallMode","isApprovalItemDisabled","breadcrumbs","selectedUpdateChannel","setUpdateChannel","showVersionAlert","e","target","subTitle","htmlFor","currentValue","items","currentTarget","setPluginEnabled","enabled","p","gvk","defaultNS","rbacName","currentChannel","currentCSVName","entries","prometheusRole","rules","apiGroups","prometheusRoleBinding","roleRef","subjects","generateName","config","env","previousPlugins","updatedPlugins","sort","err","v","OperatorHubSubscribe","OperatorHubSubscribePage","catalog","exports","__esModule","chart_color_blue_300","chart_color_blue_100","DeprecatedOperatorType","findDeprecation","f","findDeprecatedOperator","PackageDeprecated","ChannelDeprecated","VersionDeprecated","DeprecatedOperatorWarningBadge","color","DeprecatedOperatorWarningIcon","DeprecatedOperatorWarningAlert","alertVisible","setAlertVisible","ClusterServiceVersionLogo","imgSrc","mediatype","base64data","src","alt","module","Checkbox","AddCircleOIcon","height","width","svgPath","yOffset","xOffset","deleteOptions","propagationPolicy","UninstallOperatorModal","cancel","close","handleOperatorUninstallPromise","operatorUninstallInProgress","operatorUninstallErrorMessage","showInstructions","setShowInstructions","operatorUninstallFinished","setOperatorUninstallFinished","deleteOperands","setDeleteOperands","operandsDeleteInProgress","setOperandsDeleteInProgress","operandsRemaining","setOperandsRemaining","operandsDeleteFinished","setOperandsDeleteFinished","operandDeletionErrors","setOperandDeletionErrors","operandDeletionVerificationError","setOperandDeletionVerificationError","clusterServiceVersionExistsError","setClusterServiceVersionExistsError","removePlugins","subscriptionName","subscriptionNamespace","isSubmitInProgress","isSubmitFinished","hasSubmitErrors","optedOut","operands","operandsLoaded","operandsLoadedErrorMessage","uninstallOperator","patch","operatorUninstallPromises","response","Promise","finishVerification","proceedToUninstallOperator","pollOperands","basePath","interval","setInterval","curOperands","clearInterval","setTimeout","closeAndRedirect","intervalID","uninstallMessage","UninstallMessage","showOperandsContent","instructions","operandsSection","OperandsLoadedErrorAlert","OperandsTable","operandDeletionAlert","OperandDeletionErrorAlert","OperandDeletionSuccessAlert","results","UninstallAlert","errorMessage","onSubmit","event","preventDefault","operandDeletionPromises","operand","operandErrors","curr","i","OperandDeleteProgress","total","remaining","inProgress","submitDanger","submitText","submitDisabled","progressLabel","max","valueText","lg","OperatorUninstallSuccessAlert","OperatorUninstallErrorAlert","OperandErrorList","skeleton","a","b","localeCompare","operandError","createUninstallOperatorModal","manifest","installPlanPreviewModal","useDeprecatedOperatorWarnings","dispatch","UI","getIn","setDeprecatedChannel","setDeprecatedVersion","useOperands","operatorName","operatorNamespace","setOperands","setLoaded","setErrorMessage","getApprovalStrategy","createInstallPlanApprovalModal","handlePromise","selectedApprovalStrategy","setSelectedApprovalStrategy","submit","updatedObj","createSubscriptionChannelModal","selectedChannel","setSelectedChannel","FormAlert","_a","children","Object","assign","form","useActiveNamespace","useClusterServiceVersionPath","csvReference","OperatorChannelSelect","isChannelSelectOpen","setIsChannelSelectOpen","getChannelLabel","channelSelectOptions","toggle","toggleRef","open","isExpanded","isFullWidth","onSelect","selected","onOpenChange","isOpen","OperatorVersionSelect","isVersionSelectOpen","setIsVersionSelectOpen","defaultVersionForChannel","setDefaultVersionForChannel","selectedUpdateVersion","selectedChannelVersions","getVersionLabel","versionSelectOptions","chart_color_blue_200","ConsolePluginFormGroup","previouslyEnabled","wrappable","modifiers","wrap"],"mappings":"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","file":"operator-hub-subscribe-chunk-79eada39bbc75d8c4094.min.js","sourcesContent":["import * as React from 'react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Map as ImmutableMap, Set as ImmutableSet, fromJS } from 'immutable';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { getUser } from '@console/dynamic-plugin-sdk';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  MultiListPage,\n  DetailsPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  SectionHeading,\n  ConsoleEmptyState,\n  ResourceLink,\n  ResourceKebab,\n  Kebab,\n  ResourceIcon,\n  navFactory,\n  ResourceSummary,\n  history,\n  HintBlock,\n  useAccessReview,\n} from '@console/internal/components/utils';\nimport { authSvc } from '@console/internal/module/auth';\nimport {\n  apiGroupForReference,\n  referenceFor,\n  referenceForModel,\n  referenceForOwnerRef,\n  k8sPatch,\n  apiVersionForReference,\n  UserInfo,\n} from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { FLAGS, GreenCheckCircleIcon, Status, useFlag } from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n  CatalogSourceModel,\n} from '../models';\nimport { InstallPlanKind, InstallPlanApproval, Step } from '../types';\nimport { installPlanPreviewModal } from './modals/installplan-preview-modal';\nimport { requireOperatorGroup } from './operator-group';\nimport { InstallPlanReview, referenceForStepResource } from './index';\n\nconst tableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl', 'pf-v5-c-table__td'),\n  Kebab.columnClass,\n];\n\nconst componentsTableColumnClasses = [\n  'pf-v5-c-table__td',\n  'pf-v5-c-table__td',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-16-on-lg', 'pf-v5-c-table__td'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-v5-c-table__td'),\n];\n\nexport const InstallPlanTableRow: React.FC<RowFunctionArgs> = ({ obj }) => {\n  const { t } = useTranslation();\n  const phaseFor = (phase: InstallPlanKind['status']['phase']) => <Status status={phase} />;\n  return (\n    <>\n      {/* Name */}\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(InstallPlanModel)}\n          namespace={obj.metadata.namespace}\n          name={obj.metadata.name}\n        />\n      </TableData>\n\n      {/* Namespace */}\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n\n      {/* Status */}\n      <TableData className={tableColumnClasses[2]}>\n        {phaseFor(obj.status?.phase ?? 'Unknown')}\n      </TableData>\n\n      {/* Components */}\n      <TableData className={tableColumnClasses[3]}>\n        <ul className=\"pf-v5-c-list pf-m-plain\">\n          {obj.spec.clusterServiceVersionNames.map((csvName) => (\n            <li key={csvName}>\n              {obj.status?.phase === 'Complete' ? (\n                <ResourceLink\n                  kind={referenceForModel(ClusterServiceVersionModel)}\n                  name={csvName}\n                  namespace={obj.metadata.namespace}\n                  title={csvName}\n                />\n              ) : (\n                <>\n                  <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                  {csvName}\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </TableData>\n\n      {/* Subscriptions */}\n      <TableData className={tableColumnClasses[4]}>\n        {(obj.metadata.ownerReferences || [])\n          .filter((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel))\n          .map((ref) => (\n            <ul key={ref.uid} className=\"pf-v5-c-list pf-m-plain\">\n              <li>\n                <ResourceLink\n                  kind={referenceForModel(SubscriptionModel)}\n                  name={ref.name}\n                  namespace={obj.metadata.namespace}\n                  title={ref.uid}\n                />\n              </li>\n            </ul>\n          )) || <span className=\"text-muted\">{t('olm~None')}</span>}\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={Kebab.factory.common}\n          kind={referenceForModel(InstallPlanModel)}\n          resource={obj}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst EmptyMsg: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <ConsoleEmptyState title={t('olm~No InstallPlans found')}>\n      {t('olm~InstallPlans are created automatically by subscriptions or manually using the CLI.')}\n    </ConsoleEmptyState>\n  );\n};\n\nexport const InstallPlansList = requireOperatorGroup((props: InstallPlansListProps) => {\n  const { t } = useTranslation();\n  const InstallPlanTableHeader = () => {\n    return [\n      {\n        title: t('olm~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('olm~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('olm~Status'),\n        sortField: 'status.phase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('olm~Components'),\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('olm~Subscriptions'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~InstallPlans')}\n      Header={InstallPlanTableHeader}\n      Row={InstallPlanTableRow}\n      EmptyMsg={EmptyMsg}\n    />\n  );\n});\n\nconst getCatalogSources = (\n  installPlan: InstallPlanKind,\n): { sourceName: string; sourceNamespace: string }[] =>\n  _.reduce(\n    installPlan?.status?.plan || [],\n    (accumulator, { resource: { sourceName, sourceNamespace } }) =>\n      accumulator.add(fromJS({ sourceName, sourceNamespace })),\n    ImmutableSet(),\n  ).toJS();\n\nexport const InstallPlansPage: React.FC<InstallPlansPageProps> = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const namespace = props.namespace || params?.ns;\n  return (\n    <MultiListPage\n      {...props}\n      namespace={namespace}\n      resources={[\n        {\n          kind: referenceForModel(InstallPlanModel),\n          namespace,\n          namespaced: true,\n          prop: 'installPlan',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.installPlan, 'data', [])}\n      title={t('olm~InstallPlans')}\n      showTitle={false}\n      ListComponent={InstallPlansList}\n    />\n  );\n};\n\nconst updateUser = (isOpenShift: boolean, user: UserInfo): string => {\n  if (!isOpenShift) {\n    return authSvc.name();\n  }\n  return user?.username;\n};\n\nexport const NeedInstallPlanPermissions: React.FC<NeedInstallPlanPermissionsProps> = ({\n  installPlan,\n}) => {\n  const isOpenShift = useFlag(FLAGS.OPENSHIFT);\n  const user: UserInfo = useSelector<RootState, object>(getUser);\n\n  const [username, setUsername] = React.useState(updateUser(isOpenShift, user));\n\n  React.useEffect(() => {\n    setUsername(updateUser(isOpenShift, user));\n  }, [isOpenShift, user]);\n\n  const { t } = useTranslation();\n\n  const apiGroup = apiGroupForReference(referenceFor(installPlan));\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title={t('olm~Missing sufficient privileges for manual InstallPlan approval')}\n    >\n      {username\n        ? t(\n            'olm~User \"{{user}}\" does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { user: username, apiGroup, namespace: installPlan.metadata.namespace },\n          )\n        : t(\n            'olm~User does not have permissions to patch resource InstallPlans in API group \"{{apiGroup}}\" in the namespace \"{{namespace}}.\"',\n            { apiGroup, namespace: installPlan.metadata.namespace },\n          )}\n    </Alert>\n  );\n};\n\nexport const InstallPlanDetails: React.FC<InstallPlanDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const needsApproval =\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false;\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return (\n    <>\n      {needsApproval && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <p>\n              {t(\n                'olm~Inspect the requirements for the components specified in this InstallPlan before approving.',\n              )}\n            </p>\n            <Link\n              to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                obj.metadata.name\n              }/components`}\n            >\n              <Button variant=\"primary\">{t('olm~Preview InstallPlan')}</Button>\n            </Link>\n          </HintBlock>\n        </div>\n      )}\n      {needsApproval && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~InstallPlan details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('olm~Status')}</dt>\n                <dd>\n                  <Status status={obj.status?.phase ?? t('olm~Unknown')} />\n                </dd>\n                <dt>{t('olm~Components')}</dt>\n                {(obj.spec.clusterServiceVersionNames || []).map((csvName) => (\n                  <dd key={csvName}>\n                    {obj.status.phase === 'Complete' ? (\n                      <ResourceLink\n                        kind={referenceForModel(ClusterServiceVersionModel)}\n                        name={csvName}\n                        namespace={obj.metadata.namespace}\n                        title={csvName}\n                      />\n                    ) : (\n                      <>\n                        <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                        {csvName}\n                      </>\n                    )}\n                  </dd>\n                ))}\n                <dt>{t('olm~CatalogSources')}</dt>\n                {getCatalogSources(obj).map(({ sourceName, sourceNamespace }) => (\n                  <dd key={`${sourceNamespace}-${sourceName}`}>\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={sourceName}\n                      namespace={sourceNamespace}\n                      title={sourceName}\n                    />\n                  </dd>\n                ))}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions conditions={obj.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const InstallPlanPreview: React.FC<InstallPlanPreviewProps> = ({\n  obj,\n  hideApprovalBlock,\n}) => {\n  const { t } = useTranslation();\n  const [needsApproval, setNeedsApproval] = React.useState(\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false,\n  );\n  const subscription = obj?.metadata?.ownerReferences.find(\n    (ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel),\n  );\n\n  const plan = obj?.status?.plan || [];\n  const stepsByCSV = plan\n    .reduce(\n      (acc, step) => acc.update(step.resolving, [], (steps) => steps.concat([step])),\n      ImmutableMap<string, Step[]>(),\n    )\n    .toArray();\n\n  const approve = () =>\n    k8sPatch(InstallPlanModel, obj, [{ op: 'replace', path: '/spec/approved', value: true }])\n      .then(() => setNeedsApproval(false))\n      .catch((error) => errorModal({ error: error.toString() }));\n\n  const stepStatus = (status: Step['status']) => (\n    <>\n      {status === 'Present' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status === 'Created' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n      {status}\n    </>\n  );\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  });\n\n  return plan.length > 0 ? (\n    <>\n      {needsApproval && !hideApprovalBlock && !canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <NeedInstallPlanPermissions installPlan={obj} />\n        </div>\n      )}\n      {needsApproval && !hideApprovalBlock && canPatchInstallPlans && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title={t('olm~Review manual InstallPlan')}>\n            <InstallPlanReview installPlan={obj} />\n            <div className=\"pf-v5-c-form\">\n              <div className=\"pf-v5-c-form__actions\">\n                <Button variant=\"primary\" isDisabled={!needsApproval} onClick={() => approve()}>\n                  {needsApproval ? t('olm~Approve') : t('olm~Approved')}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  isDisabled={false}\n                  onClick={() =>\n                    history.push(\n                      `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(SubscriptionModel)}/${\n                        subscription.name\n                      }?showDelete=true`,\n                    )\n                  }\n                >\n                  {t('olm~Deny')}\n                </Button>\n              </div>\n            </div>\n          </HintBlock>\n        </div>\n      )}\n      {stepsByCSV.map((steps) => (\n        <div key={steps[0].resolving} className=\"co-m-pane__body\">\n          <SectionHeading text={steps[0].resolving} />\n          <div className=\"co-table-container\">\n            <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n              <thead className=\"pf-v5-c-table__thead\">\n                <tr className=\"pf-v5-c-table__tr\">\n                  <th className={componentsTableColumnClasses[0]}>{t('olm~Name')}</th>\n                  <th className={componentsTableColumnClasses[1]}>{t('olm~Kind')}</th>\n                  <th className={componentsTableColumnClasses[2]}>{t('olm~Status')}</th>\n                  <th className={componentsTableColumnClasses[3]}>{t('olm~API version')}</th>\n                </tr>\n              </thead>\n              <tbody className=\"pf-v5-c-table__tbody\">\n                {steps.map((step) => (\n                  <tr\n                    key={`${referenceForStepResource(step.resource)}-${step.resource.name}`}\n                    className=\"pf-v5-c-table__tr\"\n                  >\n                    <td className={componentsTableColumnClasses[0]}>\n                      {['Present', 'Created'].includes(step.status) ? (\n                        <ResourceLink\n                          kind={referenceForStepResource(step.resource)}\n                          namespace={obj.metadata.namespace}\n                          name={step.resource.name}\n                          title={step.resource.name}\n                        />\n                      ) : (\n                        <>\n                          <ResourceIcon kind={referenceForStepResource(step.resource)} />\n                          <Button\n                            type=\"button\"\n                            onClick={() => installPlanPreviewModal({ stepResource: step.resource })}\n                            variant=\"link\"\n                          >\n                            {step.resource.name}\n                          </Button>\n                        </>\n                      )}\n                    </td>\n                    <td className={componentsTableColumnClasses[1]}>{step.resource.kind}</td>\n                    <td className={componentsTableColumnClasses[2]}>{stepStatus(step.status)}</td>\n                    <td className={componentsTableColumnClasses[3]}>\n                      {apiVersionForReference(referenceForStepResource(step.resource))}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ))}\n    </>\n  ) : (\n    <div className=\"co-m-pane__body\">\n      <ConsoleEmptyState title={t('olm~No components resolved')}>\n        {t('olm~This InstallPlan has not been fully resolved yet.')}\n      </ConsoleEmptyState>\n    </div>\n  );\n};\n\nexport const InstallPlanDetailsPage: React.FC = (props) => {\n  const params = useParams();\n  return (\n    <DetailsPage\n      {...props}\n      namespace={params.ns}\n      kind={referenceForModel(InstallPlanModel)}\n      name={params.name}\n      pages={[\n        navFactory.details(InstallPlanDetails),\n        navFactory.editYaml(),\n        // t('olm~Components')\n        { href: 'components', nameKey: 'olm~Components', component: InstallPlanPreview },\n      ]}\n      menuActions={[\n        ...Kebab.getExtensionsActionsForKind(InstallPlanModel),\n        ...Kebab.factory.common,\n      ]}\n    />\n  );\n};\n\nexport type InstallPlansListProps = {};\n\nexport type InstallPlansPageProps = {\n  namespace?: string;\n};\n\nexport type InstallPlanDetailsProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanPreviewProps = {\n  obj: InstallPlanKind;\n  hideApprovalBlock?: boolean;\n};\n\nexport type InstallPlanPreviewState = {\n  needsApproval: boolean;\n  error?: string;\n};\n\nexport type NeedInstallPlanPermissionsProps = {\n  installPlan: InstallPlanKind;\n  user?: UserInfo;\n};\n\nInstallPlansPage.displayName = 'InstallPlansPage';\n","import * as React from 'react';\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  Popover,\n  CardTitle,\n} from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons/dist/esm/icons/add-circle-o-icon';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { sortable, wrappable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useParams, useLocation, Link } from 'react-router-dom-v5-compat';\nimport {\n  WatchK8sResource,\n  ResourceStatus,\n  StatusIconAndText,\n  useAccessReviewAllowed,\n  useAccessReview,\n} from '@console/dynamic-plugin-sdk';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { Conditions, ConditionTypes } from '@console/internal/components/conditions';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport {\n  DetailsPage,\n  Table,\n  TableData,\n  MultiListPage,\n  RowFunctionArgs,\n  Flatten,\n} from '@console/internal/components/factory';\nimport {\n  AsyncComponent,\n  DOC_URL_OPERATORFRAMEWORK_SDK,\n  documentationURLs,\n  ExternalLink,\n  FirehoseResult,\n  getDocumentationURL,\n  isManaged,\n  Kebab,\n  KebabAction,\n  KebabOption,\n  ConsoleEmptyState,\n  navFactory,\n  Page,\n  RequireCreatePermission,\n  ResourceKebab,\n  ResourceLink,\n  resourceObjPath,\n  resourcePathFromModel,\n  ResourceSummary,\n  ScrollToTopOnMount,\n  SectionHeading,\n  StatusBox,\n  Timestamp,\n} from '@console/internal/components/utils';\nimport { getBreadcrumbPath } from '@console/internal/components/utils/breadcrumbs';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport {\n  referenceForModel,\n  referenceFor,\n  k8sKill,\n  k8sPatch,\n  k8sGet,\n  K8sResourceCommon,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport { ALL_NAMESPACES_KEY, Status, getNamespace } from '@console/shared';\nimport { withFallback } from '@console/shared/src/components/error';\nimport { consolePluginModal } from '@console/shared/src/components/modals';\nimport { RedExclamationCircleIcon } from '@console/shared/src/components/status/icons';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '@console/shared/src/constants';\nimport { useActiveNamespace } from '@console/shared/src/hooks/redux-selectors';\nimport { useK8sModel } from '@console/shared/src/hooks/useK8sModel';\nimport { isPluginEnabled } from '@console/shared/src/utils';\nimport { GLOBAL_OPERATOR_NAMESPACES, GLOBAL_COPIED_CSV_NAMESPACE } from '../const';\nimport {\n  ClusterServiceVersionModel,\n  SubscriptionModel,\n  PackageManifestModel,\n  CatalogSourceModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n} from '../models';\nimport { subscriptionForCSV, getSubscriptionStatus } from '../status/csv-status';\nimport {\n  APIServiceDefinition,\n  CatalogSourceKind,\n  ClusterServiceVersionKind,\n  ClusterServiceVersionPhase,\n  CRDDescription,\n  CSVConditionReason,\n  SubscriptionKind,\n} from '../types';\nimport { isCatalogSourceTrusted, upgradeRequiresApproval } from '../utils';\nimport { isCopiedCSV, isStandaloneCSV } from '../utils/clusterserviceversions';\nimport { useClusterServiceVersion } from '../utils/useClusterServiceVersion';\nimport { useClusterServiceVersionPath } from '../utils/useClusterServiceVersionPath';\nimport { ClusterServiceVersionLogo } from './cluster-service-version-logo';\nimport {\n  DeprecatedOperatorWarningBadge,\n  DeprecatedOperatorWarningAlert,\n  findDeprecatedOperator,\n} from './deprecated-operator-warnings/deprecated-operator-warnings';\nimport { createUninstallOperatorModal } from './modals/uninstall-operator-modal';\nimport { ProvidedAPIsPage, ProvidedAPIPage, ProvidedAPIPageProps } from './operand';\nimport { operatorGroupFor, operatorNamespaceFor, targetNamespacesFor } from './operator-group';\nimport { getClusterServiceVersionPlugins } from './operator-hub/operator-hub-utils';\nimport { CreateInitializationResourceButton } from './operator-install-page';\nimport {\n  SourceMissingStatus,\n  SubscriptionDetails,\n  SubscriptionDetailsProps,\n  UpgradeApprovalLink,\n  catalogSourceForSubscription,\n} from './subscription';\nimport { referenceForProvidedAPI, providedAPIsForCSV } from './index';\n\nconst isSubscription = (obj) => referenceFor(obj) === referenceForModel(SubscriptionModel);\nconst isCSV = (obj): obj is ClusterServiceVersionKind =>\n  referenceFor(obj) === referenceForModel(ClusterServiceVersionModel);\nconst isPackageServer = (obj) =>\n  obj.metadata.name === 'packageserver' &&\n  obj.metadata.namespace === 'openshift-operator-lifecycle-manager';\n\nconst nameColumnClass = '';\nconst namespaceColumnClass = '';\nconst managedNamespacesColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-sm');\nconst statusColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-lg');\nconst lastUpdatedColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-2xl');\nconst providedAPIsColumnClass = classNames('pf-m-hidden', 'pf-m-visible-on-xl');\n\nconst editSubscription = (sub: SubscriptionKind): KebabOption =>\n  !_.isNil(sub)\n    ? {\n        // t('olm~Edit Subscription')\n        labelKey: 'olm~Edit Subscription',\n        href: `${resourcePathFromModel(\n          SubscriptionModel,\n          sub.metadata.name,\n          sub.metadata.namespace,\n        )}/yaml`,\n      }\n    : null;\n\nconst uninstall = (sub: SubscriptionKind, csv?: ClusterServiceVersionKind): KebabOption =>\n  !_.isNil(sub)\n    ? {\n        // t('olm~Uninstall Operator')\n        labelKey: 'olm~Uninstall Operator',\n        callback: () =>\n          createUninstallOperatorModal({\n            k8sKill,\n            k8sGet,\n            k8sPatch,\n            subscription: sub,\n            csv,\n            blocking: true,\n          }),\n        accessReview: {\n          group: SubscriptionModel.apiGroup,\n          resource: SubscriptionModel.plural,\n          name: sub.metadata.name,\n          namespace: sub.metadata.namespace,\n          verb: 'delete',\n        },\n      }\n    : null;\n\nconst menuActionsForCSV = (\n  csv: ClusterServiceVersionKind,\n  subscription: SubscriptionKind,\n): KebabAction[] => {\n  return _.isEmpty(subscription)\n    ? [Kebab.factory.Delete]\n    : [() => editSubscription(subscription), () => uninstall(subscription, csv)];\n};\n\nconst SubscriptionStatus: React.FC<{ muted?: boolean; subscription: SubscriptionKind }> = ({\n  muted = false,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  if (!subscription) {\n    return null;\n  }\n\n  if (upgradeRequiresApproval(subscription)) {\n    return <UpgradeApprovalLink subscription={subscription} />;\n  }\n\n  const subscriptionStatus = getSubscriptionStatus(subscription);\n  return (\n    <span className={muted ? 'text-muted' : 'co-icon-and-text'}>\n      {muted ? (\n        subscriptionStatus.title\n      ) : (\n        <Status status={subscriptionStatus.status || t('olm~Unknown')} />\n      )}\n    </span>\n  );\n};\n\nconst ClusterServiceVersionStatus: React.FC<ClusterServiceVersionStatusProps> = ({\n  obj,\n  subscription,\n}) => {\n  const status = obj?.status?.phase;\n  if (obj.metadata.deletionTimestamp) {\n    return (\n      <span className=\"co-icon-and-text\">\n        <Status status={ClusterServiceVersionPhase.CSVPhaseDeleting} />\n      </span>\n    );\n  }\n  return status ? (\n    <>\n      <span className=\"co-icon-and-text\">\n        <Status status={status} />\n      </span>\n      <SubscriptionStatus muted subscription={subscription} />\n    </>\n  ) : null;\n};\n\nconst ManagedNamespaces: React.FC<ManagedNamespacesProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const managedNamespaces = targetNamespacesFor(obj)?.split(',') || [];\n  if (isCopiedCSV(obj)) {\n    return (\n      <>\n        <ResourceLink\n          kind=\"Namespace\"\n          title={obj.metadata.namespace}\n          name={obj.metadata.namespace}\n        />\n        <span className=\"text-muted\">{obj.status.message}</span>\n      </>\n    );\n  }\n\n  switch (managedNamespaces.length) {\n    case 0:\n      return t('olm~All Namespaces');\n    case 1:\n      return managedNamespaces[0] ? (\n        <ResourceLink kind=\"Namespace\" title={managedNamespaces[0]} name={managedNamespaces[0]} />\n      ) : (\n        t('olm~All Namespaces')\n      );\n    default:\n      return (\n        <Popover\n          headerContent={t('olm~Managed Namespaces')}\n          bodyContent={managedNamespaces.map((namespace) => (\n            <ResourceLink kind=\"Namespace\" title={namespace} name={namespace} />\n          ))}\n        >\n          <Button variant=\"link\" isInline>\n            {t('olm~{{count}} Namespaces', { count: managedNamespaces.length })}\n          </Button>\n        </Popover>\n      );\n  }\n};\n\nconst ConsolePlugins: React.FC<ConsolePluginsProps> = ({ csvPlugins, trusted }) => {\n  const console: WatchK8sResource = {\n    kind: referenceForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  };\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>(console);\n  const { t } = useTranslation();\n  const [canPatchConsoleOperatorConfig] = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const csvPluginsCount = csvPlugins.length;\n\n  return (\n    <>\n      {consoleOperatorConfig && canPatchConsoleOperatorConfig && (\n        <dl className=\"co-clusterserviceversion-details__field\">\n          <dt>{t('olm~Console plugin', { count: csvPluginsCount })}</dt>\n          {csvPlugins.map((pluginName) => (\n            <dd key={pluginName} className=\"co-clusterserviceversion-details__field-description\">\n              {csvPluginsCount > 1 && (\n                <strong className=\"text-muted\">{t('olm~{{plugin}}:', { pluginName })} </strong>\n              )}\n              <Button\n                data-test=\"edit-console-plugin\"\n                type=\"button\"\n                isInline\n                onClick={() =>\n                  consolePluginModal({\n                    consoleOperatorConfig,\n                    csvPluginsCount,\n                    pluginName,\n                    trusted,\n                  })\n                }\n                variant=\"link\"\n              >\n                <>\n                  {isPluginEnabled(consoleOperatorConfig, pluginName)\n                    ? t('olm~Enabled')\n                    : t('olm~Disabled')}{' '}\n                  <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                </>\n              </Button>\n            </dd>\n          ))}\n        </dl>\n      )}\n    </>\n  );\n};\n\nconst ConsolePluginStatus: React.FC<ConsolePluginStatusProps> = ({ csv, csvPlugins }) => {\n  const console: WatchK8sResource = {\n    kind: referenceForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  };\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>(console);\n  const { t } = useTranslation();\n  const [canPatchConsoleOperatorConfig] = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const aPluginIsDisabled =\n    !consoleOperatorConfig?.spec?.plugins?.length ||\n    csvPlugins.some((plugin) => !isPluginEnabled(consoleOperatorConfig, plugin));\n\n  return (\n    consoleOperatorConfig &&\n    canPatchConsoleOperatorConfig &&\n    aPluginIsDisabled && (\n      <Popover\n        headerContent={<div>{t('olm~Console plugin available')}</div>}\n        bodyContent={\n          <div>\n            <p>\n              {t(\n                'olm~To let this operator provide a custom interface and run its own code in your console, enable its console plugin in the operator details.',\n              )}\n            </p>\n            <Link to={resourceObjPath(csv, referenceFor(csv))}>\n              {t('olm~View operator details')}\n            </Link>\n          </div>\n        }\n      >\n        <Button variant=\"link\" isInline>\n          {t('olm~Plugin available')}\n        </Button>\n      </Popover>\n    )\n  );\n};\n\nexport const ClusterServiceVersionTableRow = withFallback<ClusterServiceVersionTableRowProps>(\n  ({ activeNamespace, obj, subscription, catalogSourceMissing }) => {\n    const { displayName, provider, version } = obj.spec ?? {};\n    const { t } = useTranslation();\n    const olmOperatorNamespace = operatorNamespaceFor(obj) ?? '';\n    const [icon] = obj.spec.icon ?? [];\n    const route = useClusterServiceVersionPath(obj);\n    const providedAPIs = providedAPIsForCSV(obj);\n    const csvPlugins = getClusterServiceVersionPlugins(obj?.metadata?.annotations);\n    const { deprecatedPackage } = findDeprecatedOperator(subscription);\n\n    return (\n      <>\n        {/* Name */}\n        <TableData className={nameColumnClass}>\n          <Link\n            to={route}\n            className=\"co-clusterserviceversion-link\"\n            data-test-operator-row={displayName}\n          >\n            <ClusterServiceVersionLogo\n              icon={icon}\n              displayName={displayName}\n              version={version}\n              provider={provider}\n            />\n          </Link>\n        </TableData>\n\n        {/* Operator Namespace */}\n        {activeNamespace === ALL_NAMESPACES_KEY ? (\n          <TableData className={namespaceColumnClass}>\n            <ResourceLink\n              kind=\"Namespace\"\n              title={olmOperatorNamespace}\n              name={olmOperatorNamespace}\n            />\n          </TableData>\n        ) : null}\n\n        {/* Managed Namespaces */}\n        <TableData className={managedNamespacesColumnClass}>\n          <ManagedNamespaces obj={obj} />\n        </TableData>\n\n        {/* Status */}\n        <TableData className={statusColumnClass}>\n          <div className=\"co-clusterserviceversion-row__status\">\n            {catalogSourceMissing ? (\n              <SourceMissingStatus />\n            ) : (\n              <ClusterServiceVersionStatus obj={obj} subscription={subscription} />\n            )}\n          </div>\n          {csvPlugins.length > 0 && <ConsolePluginStatus csv={obj} csvPlugins={csvPlugins} />}\n          {deprecatedPackage.deprecation && (\n            <DeprecatedOperatorWarningBadge\n              className=\"pf-v5-u-mt-xs\"\n              deprecation={deprecatedPackage.deprecation}\n            />\n          )}\n        </TableData>\n\n        {/* Last Updated */}\n        <TableData className={lastUpdatedColumnClass}>\n          {obj.status == null ? '-' : <Timestamp timestamp={obj.status.lastUpdateTime} />}\n        </TableData>\n\n        {/* Provided APIs */}\n        <TableData className={providedAPIsColumnClass}>\n          {!_.isEmpty(providedAPIs)\n            ? _.take(providedAPIs, 4).map((desc) => (\n                <div key={referenceForProvidedAPI(desc)}>\n                  <Link to={`${route}/${referenceForProvidedAPI(desc)}`} title={desc.name}>\n                    {desc.displayName || desc.kind}\n                  </Link>\n                </div>\n              ))\n            : '-'}\n          {providedAPIs.length > 4 && (\n            <Link\n              to={route}\n              title={t('olm~View {{numAPIs}} more...', { numAPIs: providedAPIs.length - 4 })}\n            >\n              {t('olm~View {{numAPIs}} more...', { numAPIs: providedAPIs.length - 4 })}\n            </Link>\n          )}\n        </TableData>\n\n        {/* Kebab */}\n        <TableData className={Kebab.columnClass}>\n          <ResourceKebab\n            resource={obj}\n            kind={referenceFor(obj)}\n            actions={menuActionsForCSV(obj, subscription)}\n          />\n        </TableData>\n      </>\n    );\n  },\n);\n\nexport const SubscriptionTableRow: React.FC<SubscriptionTableRowProps> = ({\n  activeNamespace,\n  catalogSourceMissing,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const csvName = obj?.spec?.name;\n  const menuActions = [Kebab.factory.Edit, () => uninstall(obj)];\n  const namespace = getNamespace(obj);\n  const route = resourceObjPath(obj, referenceForModel(SubscriptionModel));\n\n  return (\n    <>\n      {/* Name */}\n      <TableData className={nameColumnClass}>\n        <Link to={route}>\n          <ClusterServiceVersionLogo\n            icon={null}\n            displayName={csvName}\n            version={null}\n            provider={null}\n          />\n        </Link>\n      </TableData>\n\n      {/* Operator Namespace */}\n      {activeNamespace === ALL_NAMESPACES_KEY ? (\n        <TableData className={namespaceColumnClass}>\n          <ResourceLink kind=\"Namespace\" title={namespace} name={namespace} />\n        </TableData>\n      ) : null}\n\n      {/* Managed Namespaces */}\n      <TableData className={managedNamespacesColumnClass}>\n        <span className=\"text-muted\">{t('olm~None')}</span>\n      </TableData>\n\n      {/* Status */}\n      <TableData className={statusColumnClass}>\n        {catalogSourceMissing ? <SourceMissingStatus /> : <SubscriptionStatus subscription={obj} />}\n      </TableData>\n\n      {/* Last Updated */}\n      <TableData className={lastUpdatedColumnClass}>\n        {obj.status == null ? '-' : <Timestamp timestamp={obj.status.lastUpdated} />}\n      </TableData>\n\n      {/* Provided APIs */}\n      <TableData className={providedAPIsColumnClass}>\n        <span className=\"text-muted\">{t('olm~None')}</span>\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={Kebab.columnClass}>\n        <ResourceKebab resource={obj} kind={referenceFor(obj)} actions={menuActions} />\n      </TableData>\n    </>\n  );\n};\n\nconst InstalledOperatorTableRow: React.FC<InstalledOperatorTableRowProps> = ({\n  obj,\n  customData,\n}) => {\n  const { catalogSources, subscriptions, activeNamespace } = customData;\n  const subscription = isCSV(obj)\n    ? subscriptionForCSV(subscriptions, obj as ClusterServiceVersionKind)\n    : (obj as SubscriptionKind);\n  // Only warn about missing catalog sources if the user was able to list them\n  // but exclude PackageServer as it does not have a subscription.\n  const catalogSourceMissing =\n    !_.isEmpty(catalogSources) &&\n    !catalogSourceForSubscription(catalogSources, subscription) &&\n    !isPackageServer(obj);\n\n  return isCSV(obj) ? (\n    <ClusterServiceVersionTableRow\n      activeNamespace={activeNamespace}\n      catalogSourceMissing={catalogSourceMissing}\n      obj={obj as ClusterServiceVersionKind}\n      subscription={subscription}\n    />\n  ) : (\n    <SubscriptionTableRow\n      activeNamespace={activeNamespace}\n      catalogSourceMissing={catalogSourceMissing}\n      obj={subscription as SubscriptionKind}\n    />\n  );\n};\n\nconst CSVListEmptyMsg = () => {\n  const { t } = useTranslation();\n  return <ConsoleEmptyState title={t('olm~No Operators found')} />;\n};\n\nconst CSVListNoDataEmptyMsg = () => {\n  const { t } = useTranslation();\n  const project = useActiveNamespace();\n  const noOperatorsInSingleNamespaceMessage = t(\n    'olm~No Operators are available for project {{project}}.',\n    { project },\n  );\n  const noOperatorsInAllNamespacesMessage = t('olm~No Operators are available.');\n  const detail = (\n    <>\n      <div>\n        {project === ALL_NAMESPACES_KEY\n          ? noOperatorsInAllNamespacesMessage\n          : noOperatorsInSingleNamespaceMessage}\n      </div>\n      <div>\n        <Trans ns=\"olm\">\n          Discover and install Operators from the <a href=\"/operatorhub\">OperatorHub</a>.\n        </Trans>\n      </div>\n    </>\n  );\n  return <ConsoleEmptyState title={t('olm~No Operators found')}>{detail}</ConsoleEmptyState>;\n};\n\nexport const ClusterServiceVersionList: React.FC<ClusterServiceVersionListProps> = ({\n  subscriptions,\n  catalogSources,\n  data,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const activeNamespace = useActiveNamespace();\n  const nameHeader: Header = {\n    title: t('olm~Name'),\n    sortField: 'metadata.name',\n    transforms: [sortable],\n    props: { className: nameColumnClass },\n  };\n\n  const namespaceHeader: Header = {\n    title: t('olm~Namespace'),\n    sortFunc: 'getOperatorNamespace',\n    transforms: [sortable],\n    props: { className: namespaceColumnClass },\n  };\n\n  const managedNamespacesHeader: Header = {\n    title: t('olm~Managed Namespaces'),\n    sortFunc: 'formatTargetNamespaces',\n    transforms: [sortable, wrappable],\n    props: { className: managedNamespacesColumnClass },\n  };\n\n  const statusHeader: Header = {\n    title: t('olm~Status'),\n    props: { className: statusColumnClass },\n  };\n\n  const lastUpdatedHeader: Header = {\n    title: t('olm~Last updated'),\n    props: { className: lastUpdatedColumnClass },\n  };\n\n  const providedAPIsHeader: Header = {\n    title: t('olm~Provided APIs'),\n    props: { className: providedAPIsColumnClass },\n  };\n\n  const kebabHeader: Header = {\n    title: '',\n    props: { className: Kebab.columnClass },\n  };\n\n  const AllProjectsTableHeader = (): Header[] => [\n    nameHeader,\n    namespaceHeader,\n    managedNamespacesHeader,\n    statusHeader,\n    lastUpdatedHeader,\n    providedAPIsHeader,\n    kebabHeader,\n  ];\n\n  const SingleProjectTableHeader = (): Header[] => [\n    nameHeader,\n    managedNamespacesHeader,\n    statusHeader,\n    lastUpdatedHeader,\n    providedAPIsHeader,\n    kebabHeader,\n  ];\n\n  const filterOperators = (\n    operators: (ClusterServiceVersionKind | SubscriptionKind)[],\n    allNamespaceActive: boolean,\n  ): (ClusterServiceVersionKind | SubscriptionKind)[] => {\n    return operators.filter((operator) => {\n      if (isSubscription(operator)) {\n        return true;\n      }\n      if (allNamespaceActive) {\n        return !isCopiedCSV(operator) && isStandaloneCSV(operator);\n      }\n\n      if (\n        window.SERVER_FLAGS.copiedCSVsDisabled &&\n        operator.metadata.namespace === GLOBAL_COPIED_CSV_NAMESPACE &&\n        activeNamespace !== GLOBAL_COPIED_CSV_NAMESPACE\n      ) {\n        return isCopiedCSV(operator) && isStandaloneCSV(operator);\n      }\n      return isStandaloneCSV(operator);\n    });\n  };\n\n  const formatTargetNamespaces = (obj: ClusterServiceVersionKind | SubscriptionKind): string => {\n    if (obj.kind === 'Subscription') {\n      return t('olm~None');\n    }\n\n    if (isCopiedCSV(obj)) {\n      return obj.metadata.namespace;\n    }\n\n    const targetNamespaces = targetNamespacesFor(obj)?.split(',') ?? [];\n    switch (targetNamespaces.length) {\n      case 0:\n        return t('olm~All Namespaces');\n      case 1:\n        return targetNamespaces[0];\n      default:\n        return t('olm~{{count}} Namespaces', { count: targetNamespaces.length });\n    }\n  };\n\n  const getOperatorNamespace = (\n    obj: ClusterServiceVersionKind | SubscriptionKind,\n  ): string | null => {\n    const olmOperatorNamespace = operatorNamespaceFor(obj);\n    return olmOperatorNamespace ?? getNamespace(obj);\n  };\n  const allNamespaceActive = activeNamespace === ALL_NAMESPACES_KEY;\n\n  const customData = React.useMemo(\n    () => ({\n      catalogoperators: catalogSources?.data ?? [],\n      subscriptions: subscriptions?.data ?? [],\n      activeNamespace,\n    }),\n    [activeNamespace, catalogSources, subscriptions],\n  );\n\n  return (\n    <div className=\"co-installed-operators\">\n      <Table\n        data={filterOperators(data, allNamespaceActive)}\n        {...rest}\n        aria-label={t('olm~Installed Operators')}\n        Header={allNamespaceActive ? AllProjectsTableHeader : SingleProjectTableHeader}\n        Row={InstalledOperatorTableRow}\n        EmptyMsg={CSVListEmptyMsg}\n        NoDataEmptyMsg={CSVListNoDataEmptyMsg}\n        virtualize\n        customData={customData}\n        customSorts={{\n          formatTargetNamespaces,\n          getOperatorNamespace,\n        }}\n      />\n    </div>\n  );\n};\n\nexport const ClusterServiceVersionsPage: React.FC<ClusterServiceVersionsPageProps> = (props) => {\n  const { t } = useTranslation();\n  const [canListAllSubscriptions] = useAccessReview({\n    group: SubscriptionModel.apiGroup,\n    resource: SubscriptionModel.plural,\n    verb: 'list',\n  });\n  const title = t('olm~Installed Operators');\n  const olmURL = getDocumentationURL(documentationURLs.operators);\n  const helpText = (\n    <>\n      {t(\n        'olm~Installed Operators are represented by ClusterServiceVersions within this Namespace.',\n      )}\n      {!isManaged() && (\n        <Trans ns=\"olm\">\n          {' '}\n          For more information, see the{' '}\n          <ExternalLink href={olmURL}>Understanding Operators documentation</ExternalLink>. Or\n          create an Operator and ClusterServiceVersion using the{' '}\n          <ExternalLink href={DOC_URL_OPERATORFRAMEWORK_SDK}>Operator SDK</ExternalLink>.\n        </Trans>\n      )}\n    </>\n  );\n\n  const flatten: Flatten<{\n    globalClusterServiceVersions: ClusterServiceVersionKind[];\n    clusterServiceVersions: ClusterServiceVersionKind[];\n    subscriptions: SubscriptionKind[];\n  }> = ({ globalClusterServiceVersions, clusterServiceVersions, subscriptions }) =>\n    [\n      ...(globalClusterServiceVersions?.data ?? []),\n      ...(clusterServiceVersions?.data ?? []),\n      ...(subscriptions?.data ?? []).filter(\n        (sub) =>\n          ['', sub.metadata.namespace].includes(props.namespace || '') &&\n          _.isNil(_.get(sub, 'status.installedCSV')),\n      ),\n    ].filter(\n      (obj, _i, all) =>\n        isCSV(obj) ||\n        _.isUndefined(\n          all.find(({ metadata }) =>\n            [obj?.status?.currentCSV, obj?.spec?.startingCSV].includes(metadata?.name),\n          ),\n        ),\n    );\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <MultiListPage\n        {...props}\n        resources={[\n          ...(!GLOBAL_OPERATOR_NAMESPACES.includes(props.namespace) &&\n          window.SERVER_FLAGS.copiedCSVsDisabled\n            ? [\n                {\n                  kind: referenceForModel(ClusterServiceVersionModel),\n                  namespace: GLOBAL_COPIED_CSV_NAMESPACE,\n                  prop: 'globalClusterServiceVersions',\n                },\n              ]\n            : []),\n          {\n            kind: referenceForModel(ClusterServiceVersionModel),\n            namespace: props.namespace,\n            prop: 'clusterServiceVersions',\n          },\n          {\n            kind: referenceForModel(SubscriptionModel),\n            prop: 'subscriptions',\n            namespace: canListAllSubscriptions ? undefined : props.namespace,\n            optional: true,\n          },\n          {\n            kind: referenceForModel(CatalogSourceModel),\n            prop: 'catalogSources',\n            optional: true,\n          },\n        ]}\n        title={title}\n        flatten={flatten}\n        namespace={props.namespace}\n        ListComponent={ClusterServiceVersionList}\n        helpText={helpText}\n        textFilter=\"cluster-service-version\"\n      />\n    </>\n  );\n};\n\nexport const MarkdownView = (props: {\n  content: string;\n  styles?: string;\n  exactHeight?: boolean;\n  truncateContent?: boolean;\n}) => {\n  return (\n    <AsyncComponent\n      loader={() =>\n        import('@console/internal/components/markdown-view').then((c) => c.SyncMarkdownView)\n      }\n      {...props}\n    />\n  );\n};\n\nexport const CRDCard: React.FC<CRDCardProps> = ({ csv, crd, required, ...rest }) => {\n  const { t } = useTranslation();\n  const reference = referenceForProvidedAPI(crd);\n  const [model] = useK8sModel(reference);\n  const canCreate = rest.canCreate ?? model?.verbs?.includes?.('create');\n  const createRoute = React.useMemo(\n    () =>\n      csv\n        ? `/k8s/ns/${csv.metadata.namespace}/${ClusterServiceVersionModel.plural}/${csv.metadata.name}/${reference}/~new`\n        : null,\n    [csv, reference],\n  );\n\n  return (\n    <Card>\n      <CardTitle>\n        <span className=\"co-resource-item\">\n          <ResourceLink\n            kind={referenceForProvidedAPI(crd)}\n            title={crd.name}\n            linkTo={false}\n            displayName={crd.displayName || crd.kind}\n          />\n          {required && (\n            <ResourceStatus badgeAlt>\n              <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Required')} />\n            </ResourceStatus>\n          )}\n        </span>\n      </CardTitle>\n      <CardBody>\n        <MarkdownView content={crd.description} truncateContent />\n      </CardBody>\n      {canCreate && createRoute && (\n        <RequireCreatePermission model={model} namespace={csv.metadata.namespace}>\n          <CardFooter>\n            <Link to={createRoute}>\n              <AddCircleOIcon className=\"co-icon-space-r\" />\n              {t('olm~Create instance')}\n            </Link>\n          </CardFooter>\n        </RequireCreatePermission>\n      )}\n    </Card>\n  );\n};\n\nexport const CRDCardRow = ({ csv, providedAPIs }: CRDCardRowProps) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-crd-card-row\">\n      {providedAPIs.length ? (\n        providedAPIs.map((crd) => (\n          <CRDCard key={referenceForProvidedAPI(crd)} crd={crd} csv={csv} />\n        ))\n      ) : (\n        <span className=\"text-muted\">\n          {t('olm~No Kubernetes APIs are being provided by this Operator.')}\n        </span>\n      )}\n    </div>\n  );\n};\n\nconst InitializationResourceAlert: React.FC<InitializationResourceAlertProps> = (props) => {\n  const { t } = useTranslation();\n  const { initializationResource, csv } = props;\n\n  const initializationResourceKind = initializationResource?.kind;\n  const initializationResourceReference = referenceFor(initializationResource);\n  const [model] = useK8sModel(initializationResourceReference);\n\n  // Check if the CR is already present - only watches for the model in namespace\n  const [customResource, customResourceLoaded] = useK8sWatchResource<K8sResourceCommon[]>({\n    kind: initializationResourceReference,\n    namespaced: true,\n    isList: true,\n  });\n\n  const canCreateCustomResource = useAccessReviewAllowed({\n    group: model?.apiGroup,\n    resource: model?.plural,\n    namespace: model?.namespaced\n      ? initializationResource?.metadata.namespace || csv.metadata.namespace\n      : null,\n    verb: 'create',\n  });\n\n  if (customResourceLoaded && customResource.length === 0 && canCreateCustomResource) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert\"\n        variant=\"warning\"\n        title={t('olm~{{initializationResourceKind}} required', { initializationResourceKind })}\n      >\n        <p>\n          {t('olm~Create a {{initializationResourceKind}} instance to use this Operator.', {\n            initializationResourceKind,\n          })}\n        </p>\n        <CreateInitializationResourceButton\n          obj={props.csv}\n          initializationResource={initializationResource}\n        />\n      </Alert>\n    );\n  }\n  return null;\n};\n\nexport const ClusterServiceVersionDetails: React.FC<ClusterServiceVersionDetailsProps> = (\n  props,\n) => {\n  const { t } = useTranslation();\n  const { spec, metadata, status } = props.obj;\n  const { subscription } = props.customData;\n  const providedAPIs = providedAPIsForCSV(props.obj);\n  // TODO (jon) remove annotation destructuring and use helper functions\n  const {\n    'marketplace.openshift.io/support-workflow': marketplaceSupportWorkflow,\n    'operatorframework.io/initialization-resource': initializationResourceJSON,\n  } = metadata.annotations || {};\n\n  const initializationResource = React.useMemo(() => {\n    if (initializationResourceJSON) {\n      try {\n        return JSON.parse(initializationResourceJSON);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error while parseing CSV initialization resource JSON', error.message);\n      }\n    }\n    return null;\n  }, [initializationResourceJSON]);\n\n  const supportWorkflowUrl = React.useMemo(() => {\n    if (marketplaceSupportWorkflow) {\n      try {\n        const url = new URL(marketplaceSupportWorkflow);\n        url.searchParams.set('utm_source', 'openshift_console');\n        return url.toString();\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error while setting utm_source to support workflow URL', error.message);\n      }\n    }\n    return null;\n  }, [marketplaceSupportWorkflow]);\n\n  const csvPlugins = getClusterServiceVersionPlugins(metadata?.annotations);\n  const permissions = _.uniqBy(spec?.install?.spec?.permissions, 'serviceAccountName');\n  const { deprecatedPackage, deprecatedChannel, deprecatedVersion } = findDeprecatedOperator(\n    subscription,\n  );\n\n  return (\n    <>\n      <ScrollToTopOnMount />\n\n      <div className=\"co-m-pane__body\">\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-9\">\n              {status && status.phase === ClusterServiceVersionPhase.CSVPhaseFailed && (\n                <Alert\n                  isInline\n                  className=\"co-alert\"\n                  variant=\"danger\"\n                  title={t('olm~Operator failed')}\n                >\n                  {status.reason === CSVConditionReason.CSVReasonCopied ? (\n                    <>\n                      <Trans t={t} ns=\"olm\">\n                        This Operator was copied from another namespace. For the reason it failed,\n                        see{' '}\n                        <ResourceLink\n                          name={metadata.name}\n                          kind={referenceForModel(ClusterServiceVersionModel)}\n                          namespace={operatorNamespaceFor(props.obj)}\n                          hideIcon\n                          inline\n                        />\n                      </Trans>\n                    </>\n                  ) : (\n                    status.message\n                  )}\n                </Alert>\n              )}\n              {initializationResource && (\n                <InitializationResourceAlert\n                  initializationResource={initializationResource}\n                  csv={props.obj}\n                />\n              )}\n              {(deprecatedPackage.deprecation ||\n                deprecatedChannel.deprecation ||\n                deprecatedVersion.deprecation) && (\n                <DeprecatedOperatorWarningAlert\n                  deprecatedPackage={deprecatedPackage}\n                  deprecatedChannel={deprecatedChannel}\n                  deprecatedVersion={deprecatedVersion}\n                  dismissible\n                />\n              )}\n              <SectionHeading text={t('olm~Provided APIs')} />\n              <CRDCardRow csv={props.obj} providedAPIs={providedAPIs} />\n              <SectionHeading text={t('olm~Description')} />\n              <MarkdownView content={spec.description || t('olm~Not available')} />\n            </div>\n            <div className=\"col-sm-3\">\n              <dl className=\"co-clusterserviceversion-details__field\">\n                <dt>{t('olm~Provider')}</dt>\n                <dd>\n                  {spec.provider && spec.provider.name\n                    ? spec.provider.name\n                    : t('olm~Not available')}\n                </dd>\n                {supportWorkflowUrl && (\n                  <>\n                    <dt>{t('olm~Support')}</dt>\n                    <dd>\n                      <ExternalLink href={supportWorkflowUrl} text={t('olm~Get support')} />\n                    </dd>\n                  </>\n                )}\n                <dt>{t('olm~Created at')}</dt>\n                <dd>\n                  <Timestamp timestamp={metadata.creationTimestamp} />\n                </dd>\n              </dl>\n              {csvPlugins.length > 0 && subscription && (\n                <ConsolePlugins\n                  csvPlugins={csvPlugins}\n                  trusted={isCatalogSourceTrusted(subscription?.spec?.source)}\n                />\n              )}\n              <dl className=\"co-clusterserviceversion-details__field\">\n                <dt>{t('olm~Links')}</dt>\n                {spec.links && spec.links.length > 0 ? (\n                  spec.links.map((link) => (\n                    <dd key={link.url} style={{ display: 'flex', flexDirection: 'column' }}>\n                      {link.name}{' '}\n                      <ExternalLink\n                        href={link.url}\n                        text={link.url || '-'}\n                        additionalClassName=\"co-break-all\"\n                      />\n                    </dd>\n                  ))\n                ) : (\n                  <dd>{t('olm~Not available')}</dd>\n                )}\n              </dl>\n              <dl className=\"co-clusterserviceversion-details__field\">\n                <dt>{t('olm~Maintainers')}</dt>\n                {spec.maintainers && spec.maintainers.length > 0 ? (\n                  spec.maintainers.map((maintainer) => (\n                    <dd key={maintainer.email} style={{ display: 'flex', flexDirection: 'column' }}>\n                      {maintainer.name}{' '}\n                      <a href={`mailto:${maintainer.email}`} className=\"co-break-all\">\n                        {maintainer.email || '-'}\n                      </a>\n                    </dd>\n                  ))\n                ) : (\n                  <dd>{t('olm~Not available')}</dd>\n                )}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~ClusterServiceVersion details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={props.obj}>\n                <dt>\n                  <Popover\n                    headerContent={<div>{t('olm~Managed Namespaces')}</div>}\n                    bodyContent={\n                      <div>{t('olm~Operands in this Namespace are managed by the Operator.')}</div>\n                    }\n                    maxWidth=\"30rem\"\n                  >\n                    <Button variant=\"plain\" className=\"details-item__popover-button\">\n                      {t('olm~Managed Namespaces')}\n                    </Button>\n                  </Popover>\n                </dt>\n                <dd>\n                  <ManagedNamespaces obj={props.obj} />\n                </dd>\n              </ResourceSummary>\n            </div>\n            <div className=\"col-sm-6\">\n              <dt>{t('olm~Status')}</dt>\n              <dd>\n                <Status status={status ? status.phase : t('olm~Unknown')} />\n              </dd>\n              <dt>{t('olm~Status reason')}</dt>\n              <dd>{status ? status.message : t('olm~Unknown')}</dd>\n              {!_.isEmpty(spec.install.spec?.deployments) && (\n                <>\n                  <dt>{t('olm~Operator Deployments')}</dt>\n                  {spec.install.spec.deployments.map(({ name }) => (\n                    <dd key={name}>\n                      <ResourceLink\n                        name={name}\n                        kind=\"Deployment\"\n                        namespace={operatorNamespaceFor(props.obj)}\n                      />\n                    </dd>\n                  ))}\n                </>\n              )}\n              {!_.isEmpty(permissions) && (\n                <>\n                  <dt>{t('olm~Operator ServiceAccounts')}</dt>\n                  {permissions.map(({ serviceAccountName }) => (\n                    <dd key={serviceAccountName} data-service-account-name={serviceAccountName}>\n                      <ResourceLink\n                        name={serviceAccountName}\n                        kind=\"ServiceAccount\"\n                        namespace={operatorNamespaceFor(props.obj)}\n                      />\n                    </dd>\n                  ))}\n                </>\n              )}\n              <dt>{t('olm~OperatorGroup')}</dt>\n              <dd>\n                {operatorGroupFor(props.obj) ? (\n                  <ResourceLink\n                    name={operatorGroupFor(props.obj)}\n                    namespace={operatorNamespaceFor(props.obj)}\n                    kind={referenceForModel(OperatorGroupModel)}\n                  />\n                ) : (\n                  '-'\n                )}\n              </dd>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions\n          conditions={(status?.conditions ?? []).map((c) => ({\n            ...c,\n            type: c.phase,\n            status: 'True',\n          }))}\n          type={ConditionTypes.ClusterServiceVersion}\n        />\n      </div>\n    </>\n  );\n};\n\nexport const CSVSubscription: React.FC<CSVSubscriptionProps> = ({ obj, customData, ...rest }) => {\n  const { t } = useTranslation();\n  const { subscription, subscriptions, subscriptionsLoaded, subscriptionsLoadError } =\n    customData ?? {};\n  const EmptyMsg = () => (\n    <ConsoleEmptyState title={t('olm~No Operator Subscription')}>\n      {t('olm~This Operator will not receive updates.')}\n    </ConsoleEmptyState>\n  );\n\n  return (\n    <StatusBox\n      EmptyMsg={EmptyMsg}\n      loaded={subscriptionsLoaded}\n      loadError={subscriptionsLoadError}\n      data={subscription}\n    >\n      <SubscriptionDetails\n        {...rest}\n        obj={subscription}\n        clusterServiceVersions={[obj]}\n        subscriptions={subscriptions}\n      />\n    </StatusBox>\n  );\n};\n\nexport const ClusterServiceVersionDetailsPage: React.FC = (props) => {\n  const { t } = useTranslation();\n  const params = useParams();\n  const location = useLocation();\n  const [csv, csvLoaded, csvLoadError] = useClusterServiceVersion(params.name, params.ns);\n  const namespace = operatorNamespaceFor(csv);\n  const [subscriptions, subscriptionsLoaded, subscriptionsLoadError] = useK8sWatchResource<\n    SubscriptionKind[]\n  >(\n    namespace\n      ? {\n          isList: true,\n          groupVersionKind: getGroupVersionKindForModel(SubscriptionModel),\n          namespace,\n          optional: true,\n        }\n      : null,\n  );\n  const [canListClusterScopeInstallPlans] = useAccessReview({\n    group: InstallPlanModel?.apiGroup,\n    resource: InstallPlanModel?.plural,\n    verb: 'list',\n  });\n\n  const subscription = React.useMemo(\n    () => (subscriptions ?? []).find((s) => s.status.installedCSV === csv?.metadata?.name),\n    [csv, subscriptions],\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const menuActions = React.useCallback(\n    !subscription\n      ? () => [Kebab.factory.Delete(ClusterServiceVersionModel, csv)]\n      : () => [editSubscription(subscription), uninstall(subscription, csv)],\n    [subscription],\n  );\n  const { deprecatedPackage } = findDeprecatedOperator(subscription);\n\n  const pagesFor = React.useCallback((obj: ClusterServiceVersionKind) => {\n    const providedAPIs = providedAPIsForCSV(obj);\n    return [\n      navFactory.details(ClusterServiceVersionDetails),\n      navFactory.editYaml(),\n      {\n        href: 'subscription',\n        // t('olm~Subscription')\n        nameKey: 'olm~Subscription',\n        component: CSVSubscription,\n      },\n      navFactory.events(ResourceEventStream),\n      ...(providedAPIs.length > 1\n        ? [\n            {\n              href: 'instances',\n              // t('olm~All instances')\n              nameKey: 'olm~All instances',\n              component: ProvidedAPIsPage,\n            },\n          ]\n        : []),\n      ...providedAPIs.map<Page<ProvidedAPIPageProps>>((api: CRDDescription) => ({\n        href: referenceForProvidedAPI(api),\n        name: ['Details', 'YAML', 'Subscription', 'Events'].includes(api.displayName)\n          ? `${api.displayName} Operand`\n          : api.displayName || api.kind,\n        component: ProvidedAPIPage,\n        pageData: {\n          csv: obj,\n          kind: referenceForProvidedAPI(api),\n        },\n      })),\n    ];\n  }, []);\n\n  return (\n    <DetailsPage\n      {...props}\n      obj={{ data: csv, loaded: csvLoaded, loadError: csvLoadError }}\n      customData={{ subscriptions, subscription, subscriptionsLoaded, subscriptionsLoadError }}\n      breadcrumbsFor={() => [\n        {\n          name: t('olm~Installed Operators'),\n          path: getBreadcrumbPath(params),\n        },\n        { name: t('olm~Operator details'), path: location.pathname },\n      ]}\n      resources={[\n        { kind: referenceForModel(PackageManifestModel), isList: true, prop: 'packageManifests' },\n        {\n          kind: referenceForModel(InstallPlanModel),\n          isList: true,\n          prop: 'installPlans',\n          ...(canListClusterScopeInstallPlans ? {} : { namespace }),\n        },\n      ]}\n      icon={({ obj }) => (\n        <ClusterServiceVersionLogo\n          displayName={obj?.spec?.displayName}\n          icon={obj?.spec?.icon?.[0]}\n          provider={obj?.spec?.provider}\n          version={obj?.spec?.version}\n          deprecation={deprecatedPackage.deprecation}\n        />\n      )}\n      namespace={params.ns}\n      kind={referenceForModel(ClusterServiceVersionModel)}\n      name={params.name}\n      pagesFor={pagesFor}\n      menuActions={menuActions}\n      createRedirect\n    />\n  );\n};\n\ntype ClusterServiceVersionStatusProps = {\n  obj: ClusterServiceVersionKind;\n  subscription: SubscriptionKind;\n};\n\nexport type ClusterServiceVersionsPageProps = {\n  kind: string;\n  namespace: string;\n  resourceDescriptions: CRDDescription[];\n};\n\nexport type ClusterServiceVersionListProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: ClusterServiceVersionKind[];\n  subscriptions: FirehoseResult<SubscriptionKind[]>;\n  catalogSources: FirehoseResult<CatalogSourceKind[]>;\n  activeNamespace?: string;\n};\n\nexport type CRDCardProps = {\n  canCreate?: boolean;\n  crd: CRDDescription | APIServiceDefinition;\n  csv?: ClusterServiceVersionKind;\n  required?: boolean;\n};\n\nexport type CRDCardRowProps = {\n  providedAPIs: (CRDDescription | APIServiceDefinition)[];\n  csv: ClusterServiceVersionKind;\n};\n\nexport type CRDCardRowState = {\n  expand: boolean;\n};\n\nexport type ClusterServiceVersionDetailsProps = {\n  obj: ClusterServiceVersionKind;\n  customData: {\n    subscriptions: SubscriptionKind[];\n    subscription: SubscriptionKind;\n    subscriptionsLoaded: boolean;\n    subscriptionsLoadError?: any;\n  };\n};\n\ntype ConsolePluginsProps = {\n  csvPlugins: string[];\n  trusted: boolean;\n};\n\ntype ConsolePluginStatusProps = {\n  csv: ClusterServiceVersionKind;\n  csvPlugins: string[];\n};\n\ntype InstalledOperatorTableRowProps = RowFunctionArgs<\n  ClusterServiceVersionKind | SubscriptionKind,\n  {\n    activeNamespace: string;\n    catalogSources: CatalogSourceKind[];\n    subscriptions: SubscriptionKind[];\n  }\n>;\n\nexport type ClusterServiceVersionTableRowProps = {\n  obj: ClusterServiceVersionKind;\n  catalogSourceMissing: boolean;\n  subscription: SubscriptionKind;\n  activeNamespace?: string;\n};\n\ntype SubscriptionTableRowProps = {\n  obj: SubscriptionKind;\n  catalogSourceMissing: boolean;\n  activeNamespace?: string;\n};\n\ntype ManagedNamespacesProps = {\n  obj: ClusterServiceVersionKind;\n};\n\nexport type CSVSubscriptionProps = Omit<\n  SubscriptionDetailsProps,\n  'obj' | 'clusterServiceVersions' | 'subscriptions'\n> &\n  ClusterServiceVersionDetailsProps;\n\ntype InitializationResourceAlertProps = {\n  csv: ClusterServiceVersionKind;\n  initializationResource: K8sResourceCommon;\n};\n\ntype Header = {\n  title: string;\n  sortField?: string;\n  sortFunc?: string;\n  transforms?: any;\n  props: { className: string };\n};\n\n// TODO(alecmerdler): Find Webpack loader/plugin to add `displayName` to React components automagically\nClusterServiceVersionList.displayName = 'ClusterServiceVersionList';\nClusterServiceVersionsPage.displayName = 'ClusterServiceVersionsPage';\nClusterServiceVersionTableRow.displayName = 'ClusterServiceVersionTableRow';\nCRDCard.displayName = 'CRDCard';\nClusterServiceVersionDetailsPage.displayName = 'ClusterServiceVersionsDetailsPage';\nClusterServiceVersionDetails.displayName = 'ClusterServiceVersionDetails';\nCSVSubscription.displayName = 'CSVSubscription';\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Alert, Button, Popover } from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom-v5-compat';\nimport { ResourceStatus, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  DetailsPage,\n  MultiListPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  KebabAction,\n  FieldLevelHelp,\n  Kebab,\n  LoadingInline,\n  ConsoleEmptyState,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  resourcePathFromModel,\n  ResourceSummary,\n  SectionHeading,\n} from '@console/internal/components/utils';\nimport { removeQueryArgument } from '@console/internal/components/utils/router';\nimport {\n  referenceForModel,\n  k8sGet,\n  k8sPatch,\n  k8sKill,\n  k8sUpdate,\n  K8sResourceCommon,\n  K8sKind,\n} from '@console/internal/module/k8s';\nimport {\n  BlueArrowCircleUpIcon,\n  BlueInfoCircleIcon,\n  getName,\n  getNamespace,\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  WarningStatus,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  CatalogSourceModel,\n  InstallPlanModel,\n  PackageManifestModel,\n  OperatorGroupModel,\n} from '../models';\nimport {\n  SubscriptionKind,\n  SubscriptionState,\n  PackageManifestKind,\n  InstallPlanApproval,\n  ClusterServiceVersionKind,\n  OperatorGroupKind,\n  InstallPlanKind,\n  InstallPlanPhase,\n  CatalogSourceKind,\n} from '../types';\nimport { upgradeRequiresApproval } from '../utils';\nimport {\n  DeprecatedOperatorWarningAlert,\n  DeprecatedOperatorWarningIcon,\n  findDeprecatedOperator,\n} from './deprecated-operator-warnings/deprecated-operator-warnings';\nimport { createInstallPlanApprovalModal } from './modals/installplan-approval-modal';\nimport { createSubscriptionChannelModal } from './modals/subscription-channel-modal';\nimport { createUninstallOperatorModal } from './modals/uninstall-operator-modal';\nimport { requireOperatorGroup } from './operator-group';\nimport { getManualSubscriptionsInNamespace, NamespaceIncludesManualApproval } from './index';\n\nexport const catalogSourceForSubscription = (\n  catalogSources: CatalogSourceKind[] = [],\n  subscription: SubscriptionKind,\n): CatalogSourceKind =>\n  catalogSources.find(\n    (source) =>\n      source?.metadata?.name === subscription?.spec?.source &&\n      source?.metadata?.namespace === subscription?.spec?.sourceNamespace,\n  );\n\nexport const installedCSVForSubscription = (\n  clusterServiceVersions: ClusterServiceVersionKind[] = [],\n  subscription: SubscriptionKind,\n): ClusterServiceVersionKind =>\n  clusterServiceVersions.find((csv) => csv?.metadata?.name === subscription?.status?.installedCSV);\n\nexport const packageForSubscription = (\n  packageManifests: PackageManifestKind[] = [],\n  subscription: SubscriptionKind,\n): PackageManifestKind =>\n  packageManifests.find(\n    (pkg) =>\n      pkg?.metadata?.name === subscription?.spec?.name &&\n      pkg?.status?.packageName === subscription?.spec?.name &&\n      pkg?.status?.catalogSource === subscription?.spec?.source &&\n      pkg?.status?.catalogSourceNamespace === subscription?.spec?.sourceNamespace,\n  );\n\nexport const installPlanForSubscription = (\n  installPlans: InstallPlanKind[] = [],\n  subscription: SubscriptionKind,\n): InstallPlanKind =>\n  installPlans.find((ip) => ip?.metadata?.name === subscription?.status?.installPlanRef?.name);\n\nexport const SourceMissingStatus: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <WarningStatus title={t('olm~Cannot update')} />\n      <span className=\"text-muted\">{t('olm~CatalogSource not found')}</span>\n    </>\n  );\n};\n\nexport const SourceUnhealthyStatus: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <WarningStatus title={t('olm~Cannot update')} />\n      <span className=\"text-muted\">{t('olm~CatalogSource unhealthy')}</span>\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-xl',\n  Kebab.columnClass,\n];\n\nexport const UpgradeApprovalLink: React.FC<{ subscription: SubscriptionKind }> = ({\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const to = resourcePathFromModel(\n    InstallPlanModel,\n    subscription.status.installPlanRef.name,\n    subscription.metadata.namespace,\n  );\n  return (\n    <span className=\"co-icon-and-text\">\n      <Link to={to}>\n        <BlueArrowCircleUpIcon /> {t('olm~Upgrade available')}\n      </Link>\n    </span>\n  );\n};\n\nexport const SubscriptionStatus: React.FC<{ subscription: SubscriptionKind }> = ({\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  switch (subscription.status?.state) {\n    case SubscriptionState.SubscriptionStateUpgradeAvailable:\n      return (\n        <span>\n          <YellowExclamationTriangleIcon /> {t('olm~Upgrade available')}\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateUpgradePending:\n      return upgradeRequiresApproval(subscription) && subscription.status.installPlanRef ? (\n        <UpgradeApprovalLink subscription={subscription} />\n      ) : (\n        <span>\n          <InProgressIcon className=\"text-primary\" /> {t('olm~Upgrading')}\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateAtLatest:\n      return (\n        <span>\n          <GreenCheckCircleIcon /> {t('olm~Up to date')}\n        </span>\n      );\n    default:\n      return (\n        <span className={_.isEmpty(subscription.status.state) ? 'text-muted' : ''}>\n          {subscription.status.state || t('olm~Unknown failure')}\n        </span>\n      );\n  }\n};\n\nconst menuActions: KebabAction[] = [\n  Kebab.factory.Edit,\n  (kind, obj) => ({\n    // t('olm~Remove Subscription')\n    labelKey: 'olm~Remove Subscription',\n    callback: () => createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj }),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'delete',\n    },\n  }),\n  (_kind, obj) => {\n    const installedCSV = _.get(obj, 'status.installedCSV');\n    return {\n      // t('olm~View ClusterServiceVersion...')\n      labelKey: 'olm~View ClusterServiceVersion...',\n      href: `/k8s/ns/${obj.metadata.namespace}/${ClusterServiceVersionModel.plural}/${installedCSV}`,\n      hidden: !installedCSV,\n    };\n  },\n];\n\nexport const SubscriptionTableRow: React.FC<RowFunctionArgs> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(SubscriptionModel)}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <SubscriptionStatus subscription={obj} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-truncate', 'co-select-to-copy')}>\n        {obj.spec.channel || 'default'}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {obj.spec.installPlanApproval || t('olm~Automatic')}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(SubscriptionModel)}\n          resource={obj}\n        />\n      </TableData>\n    </>\n  );\n};\n\nexport const SubscriptionsList = requireOperatorGroup((props: SubscriptionsListProps) => {\n  const { t } = useTranslation();\n  const SubscriptionTableHeader = () => {\n    return [\n      {\n        title: t('olm~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('olm~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('olm~Status'),\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('olm~Update channel'),\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('olm~Update approval'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~Operator Subscriptions')}\n      Header={SubscriptionTableHeader}\n      Row={SubscriptionTableRow}\n      EmptyMsg={() => (\n        <ConsoleEmptyState title={t('olm~No Subscriptions found')}>\n          {t(\n            'olm~Each Namespace can subscribe to a single channel of a package for automatic updates.',\n          )}\n        </ConsoleEmptyState>\n      )}\n      virtualize\n    />\n  );\n});\n\nexport const SubscriptionsPage: React.FC<SubscriptionsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <MultiListPage\n      {...props}\n      resources={[\n        {\n          kind: referenceForModel(SubscriptionModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'subscription',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.subscription, 'data', [])}\n      title={t('olm~Subscriptions')}\n      canCreate\n      createProps={{ to: '/operatorhub' }}\n      createButtonText={t('olm~Create Subscription')}\n      ListComponent={SubscriptionsList}\n      filterLabel={t('olm~Subscriptions by package')}\n    />\n  );\n};\n\nconst CatalogSourceHealthAlert = ({ health, source, sourceNamespace }) => {\n  const { t } = useTranslation();\n  if (!health) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert\"\n        variant=\"warning\"\n        title={t('olm~CatalogSource health unknown')}\n      >\n        {t(\n          'olm~This operator cannot be updated. The health of CatalogSource \"{{source}}\" is unknown. It may have been disabled or removed from the cluster.',\n          { source },\n        )}\n        {source && sourceNamespace && (\n          <ResourceLink\n            displayName={t('olm~View CatalogSource')}\n            groupVersionKind={getGroupVersionKindForModel(CatalogSourceModel)}\n            name={source}\n            namespace={sourceNamespace}\n            title={source}\n          />\n        )}\n      </Alert>\n    );\n  }\n  return health.healthy ? null : (\n    <Alert isInline className=\"co-alert\" variant=\"warning\" title={t('olm~CatalogSource unhealthy')}>\n      {t('olm~This operator cannot be updated. CatalogSource \"{{source}}\" is unhealthy.', {\n        source,\n      })}\n      <ResourceLink\n        displayName={t('olm~View CatalogSource')}\n        groupVersionKind={getGroupVersionKindForModel(CatalogSourceModel)}\n        name={source}\n        namespace={sourceNamespace}\n        title={source}\n      />\n    </Alert>\n  );\n};\n\nconst InstallFailedAlert = ({ installPlan }) => {\n  const { t } = useTranslation();\n  const installStatusPhase = installPlan?.status?.phase;\n  const installFailedCondition = installPlan?.status?.conditions?.find(\n    ({ type, status }) => type === 'Installed' && status === 'False',\n  );\n  const installFailedMessage =\n    installFailedCondition?.message ||\n    installFailedCondition?.reason ||\n    t('olm~InstallPlan failed');\n\n  return installStatusPhase === InstallPlanPhase.InstallPlanPhaseFailed ? (\n    <Alert\n      isInline\n      className=\"co-alert co-alert--scrollable\"\n      variant=\"danger\"\n      title={installStatusPhase}\n    >\n      {installFailedMessage}\n    </Alert>\n  ) : null;\n};\n\nconst CatalogSourceStatusIconAndText = ({ healthy }) => {\n  const { t } = useTranslation();\n  switch (healthy) {\n    case true:\n      return <StatusIconAndText icon={<GreenCheckCircleIcon />} title={t('olm~Healthy')} />;\n    case false:\n      return <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Unhealthy')} />;\n    default:\n      return (\n        <StatusIconAndText\n          icon={<YellowExclamationTriangleIcon />}\n          title={t('olm~Health unknown')}\n        />\n      );\n  }\n};\n\nexport const SubscriptionDetails: React.FC<SubscriptionDetailsProps> = ({\n  clusterServiceVersions = [],\n  installPlans = [],\n  obj,\n  packageManifests = [],\n  subscriptions = [],\n}) => {\n  const { t } = useTranslation();\n  const { source, sourceNamespace } = obj?.spec ?? {};\n  const catalogHealth = obj?.status?.catalogHealth?.find(\n    (ch) => ch.catalogSourceRef.name === source,\n  );\n  const installedCSV = installedCSVForSubscription(clusterServiceVersions, obj);\n  const installPlan = installPlanForSubscription(installPlans, obj);\n  const pkg = packageForSubscription(packageManifests, obj);\n  if (new URLSearchParams(window.location.search).has('showDelete')) {\n    createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj })\n      .result.then(() => removeQueryArgument('showDelete'))\n      .catch(_.noop);\n  }\n  const { deprecatedPackage, deprecatedChannel, deprecatedVersion } = findDeprecatedOperator(obj);\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <CatalogSourceHealthAlert\n          health={catalogHealth}\n          source={source}\n          sourceNamespace={sourceNamespace}\n        />\n        <InstallFailedAlert installPlan={installPlan} />\n        {(deprecatedPackage.deprecation ||\n          deprecatedChannel.deprecation ||\n          deprecatedVersion.deprecation) && (\n          <DeprecatedOperatorWarningAlert\n            deprecatedPackage={deprecatedPackage}\n            deprecatedChannel={deprecatedChannel}\n            deprecatedVersion={deprecatedVersion}\n            dismissible\n          />\n        )}\n        <SectionHeading text={t('olm~Subscription details')} />\n        <div className=\"co-m-pane__body-group\">\n          <SubscriptionUpdates\n            catalogHealth={catalogHealth}\n            pkg={pkg}\n            obj={obj}\n            installedCSV={installedCSV}\n            installPlan={installPlan}\n            subscriptions={subscriptions}\n          />\n        </div>\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('olm~Installed version')}</dt>\n                <dd>\n                  {installedCSV ? (\n                    <ResourceLink\n                      kind={referenceForModel(ClusterServiceVersionModel)}\n                      name={getName(installedCSV)}\n                      namespace={getNamespace(installedCSV)}\n                      title={getName(installedCSV)}\n                    />\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n                <dt>{t('olm~Starting version')}</dt>\n                <dd>{obj.spec.startingCSV || t('olm~None')}</dd>\n                <dt>{t('olm~CatalogSource')}</dt>\n                <dd>\n                  {source && sourceNamespace ? (\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={source}\n                      namespace={sourceNamespace}\n                      title={source}\n                    >\n                      <ResourceStatus badgeAlt>\n                        <CatalogSourceStatusIconAndText healthy={catalogHealth?.healthy} />\n                      </ResourceStatus>\n                    </ResourceLink>\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n                <dt>{t('olm~InstallPlan')}</dt>\n                <dd>\n                  {installPlan ? (\n                    <ResourceLink\n                      kind={referenceForModel(InstallPlanModel)}\n                      name={getName(installPlan)}\n                      namespace={getNamespace(installPlan)}\n                      title={getName(installPlan)}\n                    />\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions conditions={obj?.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst SubscriptionUpgradeStatus = ({ catalogHealth, subscription }) => {\n  if (!catalogHealth) {\n    return <SourceMissingStatus />;\n  }\n  return catalogHealth.healthy ? (\n    <SubscriptionStatus subscription={subscription} />\n  ) : (\n    <SourceUnhealthyStatus />\n  );\n};\n\nexport const SubscriptionUpdates: React.FC<SubscriptionUpdatesProps> = ({\n  catalogHealth,\n  installedCSV,\n  installPlan,\n  obj,\n  pkg,\n  subscriptions,\n}) => {\n  const { t } = useTranslation();\n  const prevInstallPlanApproval = React.useRef(obj?.spec?.installPlanApproval);\n  const prevChannel = React.useRef(obj?.spec?.channel);\n  const [waitingForUpdate, setWaitingForUpdate] = React.useState(false);\n\n  React.useEffect(() => {\n    const stillWaiting =\n      waitingForUpdate &&\n      obj?.spec?.channel === prevChannel.current &&\n      obj?.spec?.installPlanApproval === prevInstallPlanApproval.current;\n\n    if (!stillWaiting) {\n      setWaitingForUpdate(false);\n      prevChannel.current = obj?.spec?.channel;\n      prevInstallPlanApproval.current = obj?.spec?.installPlanApproval;\n    }\n  }, [obj, waitingForUpdate]);\n\n  const k8sUpdateAndWait = (kind: K8sKind, resource: K8sResourceCommon) =>\n    k8sUpdate(kind, resource).then(() => setWaitingForUpdate(true));\n  const channelModal = () =>\n    createSubscriptionChannelModal({ subscription: obj, pkg, k8sUpdate: k8sUpdateAndWait });\n  const approvalModal = () => createInstallPlanApprovalModal({ obj, k8sUpdate: k8sUpdateAndWait });\n  const installPlanPhase = React.useMemo(() => {\n    if (installPlan) {\n      switch (installPlan.status?.phase as InstallPlanPhase) {\n        case InstallPlanPhase.InstallPlanPhaseRequiresApproval:\n          return (\n            <span data-test=\"operator-subscription-requires-approval\">\n              {t('olm~1 requires approval')}\n            </span>\n          );\n        case InstallPlanPhase.InstallPlanPhaseFailed:\n          return t('olm~1 failed');\n        default:\n          return t('olm~1 installing');\n      }\n    }\n    return null;\n  }, [installPlan, t]);\n  const manualSubscriptionsInNamespace = getManualSubscriptionsInNamespace(\n    subscriptions,\n    obj.metadata.namespace,\n  );\n  const { deprecatedChannel } = findDeprecatedOperator(obj);\n\n  return (\n    <div className=\"co-detail-table\">\n      <div className=\"co-detail-table__row row\">\n        <div className=\"co-detail-table__section col-sm-3\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">\n              {t('olm~Update channel')}\n              <FieldLevelHelp>\n                {t('olm~The channel to track and receive the updates from.')}\n              </FieldLevelHelp>\n            </dt>\n            <dd>\n              {waitingForUpdate ? (\n                <LoadingInline />\n              ) : (\n                <>\n                  <Button\n                    type=\"button\"\n                    isInline\n                    onClick={channelModal}\n                    variant=\"link\"\n                    isDisabled={!pkg}\n                    data-test=\"subscription-channel-update-button\"\n                  >\n                    {obj.spec.channel || 'default'}\n                    {pkg && (\n                      <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                    )}\n                  </Button>\n                  {deprecatedChannel.deprecation && (\n                    <DeprecatedOperatorWarningIcon\n                      dataTest=\"deprecated-operator-warning-subscription-update-icon\"\n                      deprecation={deprecatedChannel.deprecation}\n                    />\n                  )}\n                </>\n              )}\n            </dd>\n          </dl>\n        </div>\n        <div className=\"co-detail-table__section col-sm-3\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">\n              {t('olm~Update approval')}\n              <FieldLevelHelp>\n                {t('olm~The strategy to determine either manual or automatic updates.')}\n              </FieldLevelHelp>\n            </dt>\n            <dd>\n              {waitingForUpdate ? (\n                <LoadingInline />\n              ) : (\n                <>\n                  <div>\n                    <Button type=\"button\" isInline onClick={approvalModal} variant=\"link\">\n                      {obj.spec.installPlanApproval || 'Automatic'}\n                      <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                    </Button>\n                  </div>\n                  {obj.spec.installPlanApproval === InstallPlanApproval.Automatic &&\n                    manualSubscriptionsInNamespace?.length > 0 && (\n                      <div>\n                        <Popover\n                          headerContent={<>{t('olm~Functioning as manual approval strategy')}</>}\n                          bodyContent={\n                            <NamespaceIncludesManualApproval\n                              subscriptions={manualSubscriptionsInNamespace}\n                              namespace={obj.metadata.namespace}\n                            />\n                          }\n                        >\n                          <Button type=\"button\" isInline variant=\"link\">\n                            <BlueInfoCircleIcon className=\"co-icon-space-r\" />\n                            {t('olm~Functioning as manual')}\n                          </Button>\n                        </Popover>\n                      </div>\n                    )}\n                </>\n              )}\n            </dd>\n          </dl>\n        </div>\n        <div className=\"co-detail-table__section co-detail-table__section--last col-sm-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">{t('olm~Upgrade status')}</dt>\n            <dd>\n              <SubscriptionUpgradeStatus catalogHealth={catalogHealth} subscription={obj} />\n            </dd>\n          </dl>\n          {catalogHealth && catalogHealth.healthy && (\n            <>\n              <div className=\"co-detail-table__bracket\" />\n              <div className=\"co-detail-table__breakdown\">\n                {obj?.status?.installedCSV && installedCSV ? (\n                  <Link\n                    to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(\n                      ClusterServiceVersionModel,\n                    )}/${obj.status.installedCSV}`}\n                  >\n                    {t('olm~1 installed')}\n                  </Link>\n                ) : (\n                  <span>{t('olm~0 installed')}</span>\n                )}\n                {obj?.status?.state === SubscriptionState.SubscriptionStateUpgradePending &&\n                obj?.status?.installPlanRef &&\n                installPlan ? (\n                  <Link\n                    to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                      obj.status.installPlanRef.name\n                    }`}\n                  >\n                    <span>{installPlanPhase}</span>\n                  </Link>\n                ) : (\n                  <span>{t('olm~0 installing')}</span>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const SubscriptionDetailsPage: React.FC<SubscriptionDetailsPageProps> = (props) => {\n  const params = useParams();\n  return (\n    <DetailsPage\n      {...props}\n      namespace={params.ns}\n      kind={referenceForModel(SubscriptionModel)}\n      name={params.name}\n      pages={[navFactory.details(SubscriptionDetails), navFactory.editYaml()]}\n      resources={[\n        {\n          kind: referenceForModel(PackageManifestModel),\n          isList: true,\n          namespace: props.namespace,\n          prop: 'packageManifests',\n        },\n        {\n          kind: referenceForModel(InstallPlanModel),\n          isList: true,\n          namespace: props.namespace,\n          prop: 'installPlans',\n        },\n        {\n          kind: referenceForModel(ClusterServiceVersionModel),\n          namespace: props.namespace,\n          isList: true,\n          prop: 'clusterServiceVersions',\n        },\n        {\n          kind: referenceForModel(SubscriptionModel),\n          namespace: props.namespace,\n          isList: true,\n          prop: 'subscriptions',\n        },\n      ]}\n      menuActions={menuActions}\n    />\n  );\n};\n\nexport type SubscriptionsPageProps = {\n  namespace?: string;\n};\n\nexport type SubscriptionsListProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: SubscriptionKind[];\n  operatorGroup: { loaded: boolean; data?: OperatorGroupKind[] };\n};\n\nexport type SubscriptionUpdatesProps = {\n  catalogHealth: { healthy?: boolean };\n  obj: SubscriptionKind;\n  pkg: PackageManifestKind;\n  installedCSV?: ClusterServiceVersionKind;\n  installPlan?: InstallPlanKind;\n  subscriptions: SubscriptionKind[];\n};\n\nexport type SubscriptionUpdatesState = {\n  waitingForUpdate: boolean;\n  channel: string;\n  installPlanApproval: InstallPlanApproval;\n};\n\nexport type SubscriptionDetailsProps = {\n  clusterServiceVersions?: ClusterServiceVersionKind[];\n  installPlans?: InstallPlanKind[];\n  obj: SubscriptionKind;\n  packageManifests: PackageManifestKind[];\n  subscriptions: SubscriptionKind[];\n};\n\nexport type SubscriptionDetailsPageProps = {\n  namespace: string;\n};\n\nSubscriptionsPage.displayName = 'SubscriptionsPage';\nSubscriptionDetails.displayName = 'SubscriptionDetails';\nSubscriptionDetailsPage.displayName = 'SubscriptionDetailsPage';\n","import * as React from 'react';\nimport {\n  ActionGroup,\n  Alert,\n  Bullseye,\n  Button,\n  Card,\n  CardBody,\n  Icon,\n  Spinner,\n} from '@patternfly/react-core';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { ResourceStatus, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport { errorModal } from '@console/internal/components/modals';\nimport {\n  Firehose,\n  FirehoseResult,\n  LoadingInline,\n  ResourceLink,\n  resourcePathFromModel,\n  useAccessReview,\n} from '@console/internal/components/utils';\nimport {\n  k8sPatch,\n  referenceForModel,\n  referenceFor,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared/src/components/status/icons';\nimport { RouteParams } from '@console/shared/src/types';\nimport {\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  PackageManifestModel,\n  SubscriptionModel,\n} from '../models';\nimport {\n  ClusterServiceVersionKind,\n  SubscriptionKind,\n  InstallPlanKind,\n  PackageManifestKind,\n} from '../types';\nimport { ClusterServiceVersionLogo } from './cluster-service-version-logo';\nimport { InstallPlanPreview, NeedInstallPlanPermissions } from './install-plan';\nimport { OLMAnnotation } from './operator-hub';\nimport { getInitializationResource } from './operator-hub/operator-hub-utils';\nimport { iconFor, InstallPlanReview } from './index';\n\nconst ViewInstalledOperatorsButton: React.FC<ViewOperatorButtonProps> = ({ namespace }) => {\n  const { t } = useTranslation();\n  const singleNamespaceText = t('olm~View installed Operators in Namespace {{namespace}}', {\n    namespace,\n  });\n  const allNamespacesText = t('olm~View installed Operators in all Namespaces');\n  return (\n    <div className=\"co-operator-install-page__link\">\n      <Link\n        data-test=\"view-installed-operators-btn\"\n        to={resourcePathFromModel(ClusterServiceVersionModel, null, namespace)}\n      >\n        {namespace ? singleNamespaceText : allNamespacesText}\n      </Link>\n    </div>\n  );\n};\n\nconst InstallFailedMessage: React.FC<InstallFailedMessageProps> = ({ namespace, csvName, obj }) => {\n  const { t } = useTranslation();\n  const hasInitializationResource =\n    obj?.metadata?.annotations?.[OLMAnnotation.InitializationResource];\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Operator installation failed')}\n      </h2>\n      <p>\n        {t('olm~The operator did not install successfully.')}\n        {hasInitializationResource && (\n          <>\n            &nbsp;\n            {t(\"olm~The required custom resource can be created in the Operator's details view.\")}\n          </>\n        )}\n      </p>\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        <Link to={resourcePathFromModel(ClusterServiceVersionModel, csvName, namespace)}>\n          <Button variant=\"primary\">{t('olm~View error')}</Button>\n        </Link>\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nconst InstallNeedsApprovalMessage: React.FC<InstallNeedsApprovalMessageProps> = ({\n  namespace,\n  subscriptionObj,\n  installObj,\n  approve,\n}) => {\n  const { t } = useTranslation();\n\n  const canPatchInstallPlans = useAccessReview({\n    group: InstallPlanModel.apiGroup,\n    resource: InstallPlanModel.plural,\n    namespace,\n    verb: 'patch',\n  });\n\n  const installObjIsInstallPlan = installObj.kind === 'InstallPlan';\n\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Manual approval required')}\n      </h2>\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        <InstallPlanReview installPlan={installObj} />\n        {((installObjIsInstallPlan && canPatchInstallPlans) || !installObjIsInstallPlan) && (\n          <>\n            <Button variant=\"primary\" onClick={approve}>\n              {t('olm~Approve')}\n            </Button>\n            <Link\n              to={`${resourcePathFromModel(\n                SubscriptionModel,\n                subscriptionObj?.metadata?.name,\n                namespace,\n              )}?showDelete=true`}\n            >\n              <Button className=\"co-clusterserviceversion__button\" variant=\"secondary\">\n                {t('olm~Deny')}\n              </Button>\n            </Link>\n          </>\n        )}\n        {!canPatchInstallPlans && installObjIsInstallPlan && (\n          <NeedInstallPlanPermissions installPlan={installObj as InstallPlanKind} />\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nexport const CreateInitializationResourceButton: React.FC<InitializationResourceButtonProps> = ({\n  disabled,\n  initializationResource,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const reference = referenceFor(initializationResource);\n  const kind = initializationResource?.kind;\n  const button = (\n    <Button aria-disabled={disabled} isDisabled={disabled} variant=\"primary\">\n      {t('olm~Create {{item}}', { item: kind })}\n    </Button>\n  );\n\n  return disabled ? (\n    button\n  ) : (\n    <Link\n      to={`${resourcePathFromModel(\n        ClusterServiceVersionModel,\n        obj.metadata.name,\n        obj.metadata.namespace,\n      )}/${reference}/~new?useInitializationResource`}\n    >\n      {button}\n    </Link>\n  );\n};\n\nconst InitializationResourceRequiredMessage: React.FC<InitializationResourceRequiredMessageProps> = ({\n  initializationResource,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const initializationResourceKind = initializationResource?.kind;\n  const initializationResourceNamespace = initializationResource?.metadata?.namespace;\n  const description = obj?.metadata?.annotations?.description;\n  return (\n    <div className=\"co-clusterserviceversion__box\">\n      <span className=\"co-resource-item\">\n        <ResourceLink\n          kind={initializationResourceKind}\n          name={initializationResourceKind}\n          namespace={initializationResourceNamespace}\n        />\n        <ResourceStatus badgeAlt>\n          <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Required')} />\n        </ResourceStatus>\n      </span>\n      <SyncMarkdownView content={description} />\n    </div>\n  );\n};\n\nconst InstallSucceededMessage: React.FC<InstallSuccededMessageProps> = ({\n  namespace,\n  csvName,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const initializationResource = getInitializationResource(obj?.metadata?.annotations, {\n    onError: (error) => errorModal({ error }),\n  });\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">\n        {t('olm~Installed operator')}: &nbsp;\n        {initializationResource ? t('olm~custom resource required') : t('olm~ready for use')}\n      </h2>\n      {initializationResource && (\n        <>\n          <span>\n            {t(\n              'olm~The Operator has installed successfully. Create the required custom resource to be able to use this Operator.',\n            )}\n          </span>\n          <InitializationResourceRequiredMessage\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        </>\n      )}\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        {initializationResource ? (\n          <CreateInitializationResourceButton\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        ) : (\n          <Link to={resourcePathFromModel(ClusterServiceVersionModel, csvName, namespace)}>\n            <Button variant=\"primary\">{t('olm~View Operator')}</Button>\n          </Link>\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\nconst InstallingMessage: React.FC<InstallingMessageProps> = ({ namespace, obj }) => {\n  const { t } = useTranslation();\n  const reason = (obj as ClusterServiceVersionKind)?.status?.reason || '';\n  const message = (obj as ClusterServiceVersionKind)?.status?.message || '';\n  const initializationResource = getInitializationResource(obj?.metadata?.annotations, {\n    onError: (error) => errorModal({ error }),\n  });\n  return (\n    <>\n      <h2 className=\"co-clusterserviceversion-install__heading\">{t('olm~Installing Operator')}</h2>\n      {reason && (\n        <p className=\"text-muted\">\n          {reason}: {message}\n        </p>\n      )}\n      <p>\n        {t('olm~The Operator is being installed. This may take a few minutes.')}\n        {initializationResource && (\n          <>\n            &nbsp;\n            {t(\n              'olm~Once the Operator is installed the required custom resource will be available for creation.',\n            )}\n          </>\n        )}\n      </p>\n      {initializationResource && (\n        <InitializationResourceRequiredMessage\n          initializationResource={initializationResource}\n          obj={obj}\n        />\n      )}\n      <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__group--no-top-margin\">\n        {initializationResource && (\n          <CreateInitializationResourceButton\n            disabled\n            initializationResource={initializationResource}\n            obj={obj}\n          />\n        )}\n        <ViewInstalledOperatorsButton namespace={namespace} />\n      </ActionGroup>\n    </>\n  );\n};\n\ntype OperatorInstallStatusPageRouteParams = RouteParams<\n  'pkg' | 'catalogNamespace' | 'currentCSV' | 'targetNamespace'\n>;\n\nconst OperatorInstallLogo = ({ subscription }) => {\n  const { t } = useTranslation();\n  const notFound = t('olm~Not found');\n  const { currentCSV, catalogNamespace, pkg } = useParams<OperatorInstallStatusPageRouteParams>();\n  const [packageManifests, loaded, loadError] = useK8sWatchResource<PackageManifestKind[]>({\n    groupVersionKind: {\n      group: PackageManifestModel.apiGroup,\n      version: PackageManifestModel.apiVersion,\n      kind: PackageManifestModel.kind,\n    },\n    selector: {\n      matchLabels: {\n        'catalog-namespace': catalogNamespace,\n      },\n    },\n    fieldSelector: `metadata.name=${pkg}`,\n    isList: true,\n  });\n  const pkgManifest = packageManifests?.[0];\n  if (!loaded) {\n    return <LoadingInline />;\n  }\n\n  if (loadError || !pkgManifest) {\n    return (\n      <ClusterServiceVersionLogo\n        icon={null}\n        displayName={loadError ? t('olm~Error: {{loadError}}', { loadError }) : notFound}\n      />\n    );\n  }\n  const channels = pkgManifest?.status?.channels || [];\n  const channel = channels.find((ch) => ch.currentCSV === currentCSV) || channels[0];\n  const displayName = channel?.currentCSVDesc?.displayName || notFound;\n  const provider = pkgManifest?.status?.provider?.name || '';\n  const startingCSV = subscription?.spec?.startingCSV;\n\n  return (\n    <ClusterServiceVersionLogo\n      displayName={displayName}\n      icon={iconFor(pkgManifest)}\n      provider={provider}\n      version={startingCSV}\n    />\n  );\n};\n\nconst OperatorInstallStatus: React.FC<OperatorInstallPageProps> = ({ resources }) => {\n  const { t } = useTranslation();\n  const { currentCSV, targetNamespace } = useParams<OperatorInstallStatusPageRouteParams>();\n  let loading = true;\n  let status = '';\n  let installObj: ClusterServiceVersionKind | InstallPlanKind =\n    resources?.clusterServiceVersion?.data;\n  const subscription = resources?.subscription?.data;\n  status = installObj?.status?.phase;\n  if (installObj && status) {\n    loading = false;\n  } else if (subscription) {\n    // There is no ClusterServiceVersion for the package, so look at Subscriptions/InstallPlans\n    loading = false;\n    status = subscription?.status?.state || null;\n    const installPlanName = subscription?.status?.installPlanRef?.name || '';\n    const installPlan: InstallPlanKind = resources?.installPlans?.data?.find(\n      (ip) => ip.metadata.name === installPlanName,\n    );\n    if (installPlan) {\n      installObj = installPlan;\n    }\n  }\n\n  const isStatusSucceeded = status === 'Succeeded';\n  const isStatusFailed = status === 'Failed';\n  const isApprovalNeeded =\n    installObj?.spec?.approval === 'Manual' && installObj?.spec?.approved === false;\n\n  const approve = () => {\n    k8sPatch(InstallPlanModel, installObj, [\n      { op: 'replace', path: '/spec/approved', value: true },\n    ]).catch((error) => {\n      errorModal({ error: error.toString() });\n    });\n  };\n\n  let indicator = <Spinner size=\"lg\" />;\n  if (isStatusFailed) {\n    indicator = (\n      <Icon size=\"lg\">\n        <RedExclamationCircleIcon />\n      </Icon>\n    );\n  }\n  if (isApprovalNeeded) {\n    indicator = (\n      <Icon size=\"lg\">\n        <YellowExclamationTriangleIcon />\n      </Icon>\n    );\n  }\n  if (isStatusSucceeded) {\n    indicator = (\n      <Icon size=\"lg\">\n        <GreenCheckCircleIcon />\n      </Icon>\n    );\n  }\n\n  let installMessage = <InstallingMessage namespace={targetNamespace} obj={installObj} />;\n  if (isStatusFailed) {\n    installMessage = (\n      <InstallFailedMessage namespace={targetNamespace} obj={installObj} csvName={currentCSV} />\n    );\n  } else if (isApprovalNeeded) {\n    installMessage = (\n      <InstallNeedsApprovalMessage\n        namespace={targetNamespace}\n        subscriptionObj={subscription}\n        installObj={installObj}\n        approve={approve}\n      />\n    );\n  } else if (isStatusSucceeded) {\n    installMessage = (\n      <InstallSucceededMessage namespace={targetNamespace} csvName={currentCSV} obj={installObj} />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"co-operator-install-page__main\">\n        <Helmet>\n          <title>{t('olm~Installing Operator')}</title>\n        </Helmet>\n        <Bullseye>\n          <div id=\"operator-install-page\">\n            {loading && (\n              <div className=\"co-operator-install-page__indicator\">\n                {t('olm~Installing...')} <Spinner size=\"lg\" />\n              </div>\n            )}\n            {!loading && isStatusFailed && (\n              <Alert variant=\"danger\" isInline title=\"Installation Failed\">\n                {status}: {(installObj as ClusterServiceVersionKind)?.status?.message || ''}\n              </Alert>\n            )}\n            {!loading && (\n              <Card>\n                <CardBody>\n                  <div className=\"co-operator-install-page__pkg-indicator\">\n                    <div>\n                      <OperatorInstallLogo subscription={resources.subscription.data} />\n                    </div>\n                    <div>{indicator}</div>\n                  </div>\n                </CardBody>\n              </Card>\n            )}\n            {!loading && (\n              <Card>\n                <CardBody>{installMessage}</CardBody>\n              </Card>\n            )}\n          </div>\n        </Bullseye>\n      </div>\n      {!loading && isApprovalNeeded && (\n        <InstallPlanPreview obj={installObj as InstallPlanKind} hideApprovalBlock />\n      )}\n    </>\n  );\n};\n\nexport const OperatorInstallStatusPage: React.FC<OperatorInstallPageProps> = () => {\n  const { pkg, currentCSV, targetNamespace } = useParams<OperatorInstallStatusPageRouteParams>();\n\n  const installPageResources = [\n    {\n      kind: referenceForModel(ClusterServiceVersionModel),\n      namespaced: true,\n      isList: false,\n      name: currentCSV,\n      namespace: targetNamespace,\n      prop: 'clusterServiceVersion',\n    },\n    {\n      kind: referenceForModel(SubscriptionModel),\n      namespaced: true,\n      isList: false,\n      name: pkg,\n      namespace: targetNamespace,\n      optional: true,\n      prop: 'subscription',\n    },\n    {\n      kind: referenceForModel(InstallPlanModel),\n      prop: 'installPlans',\n      namespaced: true,\n      namespace: targetNamespace,\n      isList: true,\n      optional: true,\n    },\n  ];\n\n  return (\n    <Firehose resources={installPageResources}>\n      <OperatorInstallStatus />\n    </Firehose>\n  );\n};\n\nexport type OperatorInstallPageProps = {\n  resources?: {\n    clusterServiceVersion: FirehoseResult<ClusterServiceVersionKind>;\n    subscription: FirehoseResult<SubscriptionKind>;\n    installPlans: FirehoseResult<InstallPlanKind[]>;\n  };\n};\ntype InstallSuccededMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n  csvName: string;\n};\ntype InstallNeedsApprovalMessageProps = {\n  namespace: string;\n  subscriptionObj: SubscriptionKind;\n  installObj: ClusterServiceVersionKind | InstallPlanKind;\n  approve: () => void;\n};\ntype InstallingMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n};\ntype InstallFailedMessageProps = {\n  namespace: string;\n  obj: ClusterServiceVersionKind | InstallPlanKind;\n  csvName: string;\n};\ntype InitializationResourceRequiredMessageProps = {\n  initializationResource: K8sResourceKind;\n  obj: ClusterServiceVersionKind | InstallPlanKind | SubscriptionKind;\n};\ntype InitializationResourceButtonProps = {\n  disabled?: boolean;\n  initializationResource: K8sResourceKind;\n  obj: ClusterServiceVersionKind | InstallPlanKind | SubscriptionKind;\n};\ntype ViewOperatorButtonProps = {\n  namespace: string;\n};\n","import * as React from 'react';\nimport {\n  ActionGroup,\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  Checkbox,\n  TextInput,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useLocation, Link } from 'react-router-dom-v5-compat';\nimport { RadioGroup, RadioInput } from '@console/internal/components/radio';\nimport {\n  documentationURLs,\n  ExternalLink,\n  FieldLevelHelp,\n  Firehose,\n  getDocumentationURL,\n  getURLSearchParams,\n  history,\n  isManaged,\n  ConsoleEmptyState,\n  NsDropdown,\n  PageHeading,\n  ResourceIcon,\n  resourcePathFromModel,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport {\n  ConsoleOperatorConfigModel,\n  NamespaceModel,\n  RoleBindingModel,\n  RoleModel,\n} from '@console/internal/models';\nimport {\n  K8sResourceCommon,\n  apiVersionForModel,\n  apiVersionForReference,\n  k8sCreate,\n  k8sGet,\n  k8sListPartialMetadata,\n  k8sPatch,\n  K8sResourceKind,\n  kindForReference,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { fromRequirements } from '@console/internal/module/k8s/selector';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '@console/shared/src/constants';\nimport { SubscriptionModel, OperatorGroupModel, PackageManifestModel } from '../../models';\nimport {\n  OperatorGroupKind,\n  PackageManifestKind,\n  SubscriptionKind,\n  InstallPlanApproval,\n  InstallModeType,\n} from '../../types';\nimport { isCatalogSourceTrusted } from '../../utils';\nimport { ConsolePluginFormGroup } from '../../utils/console-plugin-form-group';\nimport { ClusterServiceVersionLogo } from '../cluster-service-version-logo';\nimport { CRDCard } from '../clusterserviceversion';\nimport { DeprecatedOperatorWarningAlert } from '../deprecated-operator-warnings/deprecated-operator-warnings';\nimport { useDeprecatedOperatorWarnings } from '../deprecated-operator-warnings/use-deprecated-operator-warnings';\nimport {\n  defaultChannelNameFor,\n  getManualSubscriptionsInNamespace,\n  iconFor,\n  NamespaceIncludesManualApproval,\n  providedAPIsForChannel,\n  referenceForProvidedAPI,\n  supportedInstallModesFor,\n} from '../index';\nimport { installedFor, supports, providedAPIsForOperatorGroup, isGlobal } from '../operator-group';\nimport { OperatorChannelSelect, OperatorVersionSelect } from './operator-channel-version-select';\nimport {\n  getSuggestedNamespaceTemplate,\n  getInitializationResource,\n  getClusterServiceVersionPlugins,\n} from './operator-hub-utils';\n\nexport const CloudServiceTokenWarningAlert = ({\n  title,\n  message,\n  onClose,\n}: CloudServiceTokenWarningAlertProps) => {\n  return (\n    <Alert\n      isInline\n      variant=\"warning\"\n      title={title}\n      actionClose={<AlertActionCloseButton onClose={() => onClose(false)} />}\n      className=\"pf-u-mb-lg\"\n    >\n      <p>{message}</p>\n    </Alert>\n  );\n};\n\nconst InputField: React.FC<InputFieldProps> = ({\n  label,\n  helpText,\n  placeholder,\n  ariaLabel,\n  value,\n  setValue,\n}) => {\n  return (\n    <div className=\"form-group\">\n      <fieldset>\n        <label className=\"co-required\">{label}</label>\n        <FieldLevelHelp>{helpText}</FieldLevelHelp>\n        <div className=\"co-toolbar__item\">\n          <TextInput\n            autoFocus\n            placeholder={placeholder}\n            aria-label={ariaLabel}\n            type=\"text\"\n            value={value}\n            onChange={(_event, val) => {\n              setValue(val);\n            }}\n          />\n        </div>\n      </fieldset>\n    </div>\n  );\n};\n\nexport const OperatorHubSubscribeForm: React.FC<OperatorHubSubscribeFormProps> = (props) => {\n  const packageManifest = props.packageManifest?.data?.[0];\n  const { name: pkgName } = packageManifest?.metadata ?? {};\n  const { provider, channels = [], packageName, catalogSource, catalogSourceNamespace } =\n    packageManifest?.status ?? {};\n\n  const { pathname: url } = useLocation();\n  const [roleARNText, setRoleARNText] = React.useState('');\n  const [azureTenantId, setAzureTenantId] = React.useState('');\n  const [azureClientId, setAzureClientId] = React.useState('');\n  const [azureSubscriptionId, setAzureSubscriptionId] = React.useState('');\n  const [gcpProjectNumber, setGcpProjectNumber] = React.useState('');\n  const [gcpPoolId, setGcpPoolId] = React.useState('');\n  const [gcpProviderId, setGcpProviderId] = React.useState('');\n  const [gcpServiceAcctEmail, setGcpServiceAcctEmail] = React.useState('');\n  const [targetNamespace, setTargetNamespace] = React.useState(null);\n  const [installMode, setInstallMode] = React.useState(null);\n  const { catalogNamespace, channel, pkg, tokenizedAuth, version } = getURLSearchParams();\n\n  const defaultChannel = defaultChannelNameFor(packageManifest);\n  const [updateChannelName, setUpdateChannelName] = React.useState(channel || defaultChannel);\n  const { currentCSVDesc } = channels.find((ch) => ch.name === updateChannelName) ?? {};\n  const { installModes = [], version: currentLatestVersion } = currentCSVDesc ?? {};\n\n  const [updateVersion, setUpdateVersion] = React.useState(version || currentLatestVersion);\n\n  const [showCSTokenWarn, setShowCSTokenWarn] = React.useState(true);\n\n  const [approval, setApproval] = React.useState(\n    updateVersion !== currentLatestVersion\n      ? InstallPlanApproval.Manual\n      : InstallPlanApproval.Automatic,\n  );\n\n  const [cannotResolve, setCannotResolve] = React.useState(false);\n  const [suggestedNamespaceExists, setSuggestedNamespaceExists] = React.useState(false);\n  const [suggestedNamespaceExistsInFlight, setSuggestedNamespaceExistsInFlight] = React.useState(\n    true,\n  );\n  const [\n    useSuggestedNSForSingleInstallMode,\n    setUseSuggestedNSForSingleInstallMode,\n  ] = React.useState(true);\n\n  const defaultEnableMonitoring =\n    packageManifest?.metadata?.labels?.provider?.includes('Red Hat') &&\n    currentCSVDesc.annotations?.['console.openshift.io/operator-monitoring-default'] === 'true';\n  const [enableMonitoring, setEnableMonitoring] = React.useState(defaultEnableMonitoring);\n\n  const [error, setError] = React.useState('');\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>({\n    kind: referenceForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const [enabledPlugins, setEnabledPlugins] = React.useState<string[]>([]);\n  const { t } = useTranslation();\n\n  const {\n    deprecatedPackage,\n    deprecatedChannel,\n    deprecatedVersion,\n    setDeprecatedPackage,\n  } = useDeprecatedOperatorWarnings();\n  const deprecatedWarning =\n    deprecatedPackage?.deprecation ||\n    deprecatedChannel?.deprecation ||\n    deprecatedVersion?.deprecation;\n\n  React.useEffect(() => {\n    setDeprecatedPackage(_.pick(packageManifest?.status, 'deprecation'));\n  }, [packageManifest?.status, setDeprecatedPackage]);\n\n  const setPluginEnabled = (plugin: string, enabled: boolean) => {\n    if (enabled) {\n      setEnabledPlugins([...enabledPlugins, plugin]);\n    } else {\n      setEnabledPlugins(enabledPlugins.filter((p: string) => p !== plugin));\n    }\n  };\n\n  const search = new URLSearchParams({\n    'details-item': `${new URLSearchParams(window.location.search).get(\n      'pkg',\n    )}-${new URLSearchParams(window.location.search).get('catalogNamespace')}`,\n  });\n\n  const selectedInstallMode =\n    installMode ||\n    supportedInstallModesFor(props.packageManifest.data[0])(updateChannelName).reduce(\n      (preferredInstallMode, mode) =>\n        mode.type === InstallModeType.InstallModeTypeAllNamespaces\n          ? InstallModeType.InstallModeTypeAllNamespaces\n          : preferredInstallMode,\n      InstallModeType.InstallModeTypeOwnNamespace,\n    );\n\n  const suggestedNamespace =\n    currentCSVDesc.annotations?.['operatorframework.io/suggested-namespace'];\n  const suggestedNamespaceTemplate =\n    getSuggestedNamespaceTemplate(currentCSVDesc.annotations, {\n      // eslint-disable-next-line no-console\n      onError: () => console.error('Could not parse JSON annotation.'),\n    }) ?? {};\n  const suggestedNamespaceTemplateName = suggestedNamespaceTemplate?.metadata?.name;\n  const operatorRequestsMonitoring =\n    currentCSVDesc.annotations?.['operatorframework.io/cluster-monitoring'] === 'true';\n  const initializationResource = getInitializationResource(currentCSVDesc.annotations, {\n    // eslint-disable-next-line no-console\n    onError: () => console.error('Operator Hub Subscribe: Could not get initialization resource.'),\n  });\n  const canPatchConsoleOperatorConfig = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n  const csvPlugins = getClusterServiceVersionPlugins(currentCSVDesc?.annotations);\n\n  const initializationResourceReference = React.useMemo(\n    () => (initializationResource ? referenceFor(initializationResource) : null),\n    [initializationResource],\n  );\n\n  const globalNS =\n    (props.operatorGroup?.data || ([] as OperatorGroupKind[])).find(\n      (og) => og.metadata.name === 'global-operators',\n    )?.metadata?.namespace || 'openshift-operators';\n\n  let selectedTargetNamespace = targetNamespace || props.targetNamespace;\n  const operatorSuggestedNamespace = suggestedNamespaceTemplateName || suggestedNamespace;\n\n  if (selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces) {\n    if (operatorSuggestedNamespace) {\n      selectedTargetNamespace = targetNamespace || operatorSuggestedNamespace;\n    } else {\n      selectedTargetNamespace = targetNamespace || globalNS;\n    }\n  }\n  if (\n    selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n    props.targetNamespace === globalNS\n  ) {\n    selectedTargetNamespace = targetNamespace || '';\n  }\n\n  const isSuggestedNamespaceSelected =\n    operatorSuggestedNamespace && operatorSuggestedNamespace === selectedTargetNamespace;\n  const showSuggestedNamespaceDetails =\n    !suggestedNamespaceExistsInFlight && isSuggestedNamespaceSelected;\n  React.useEffect(() => {\n    if (!operatorSuggestedNamespace) {\n      setSuggestedNamespaceExistsInFlight(false);\n      return;\n    }\n    setTargetNamespace(operatorSuggestedNamespace);\n    k8sGet(NamespaceModel, operatorSuggestedNamespace)\n      .then(() => {\n        setSuggestedNamespaceExists(true);\n        setSuggestedNamespaceExistsInFlight(false);\n      })\n      .catch(() => {\n        setSuggestedNamespaceExists(false);\n        setSuggestedNamespaceExistsInFlight(false);\n      });\n  }, [operatorSuggestedNamespace]);\n\n  React.useEffect(() => {\n    k8sListPartialMetadata(PackageManifestModel, {\n      ns: selectedTargetNamespace,\n      fieldSelector: `metadata.name=${pkgName}`,\n      labelSelector: fromRequirements([\n        { key: 'catalog', operator: 'Equals', values: [catalogSource] },\n        { key: 'catalog-namespace', operator: 'Equals', values: [catalogSourceNamespace] },\n      ]),\n    })\n      .then((list) => setCannotResolve(_.isEmpty(list)))\n      .catch(() => setCannotResolve(true));\n  }, [\n    catalogSource,\n    catalogSourceNamespace,\n    pkgName,\n    props.packageManifest.data,\n    selectedTargetNamespace,\n  ]);\n\n  React.useEffect(() => {\n    setEnabledPlugins(isCatalogSourceTrusted(catalogSource) ? csvPlugins : []);\n    // Use the JSON string directly from the annotation so the dependency is compared using string comparison\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [catalogSource, currentCSVDesc?.annotations?.['console.openshift.io/plugins']]);\n\n  const manualSubscriptionsInNamespace = getManualSubscriptionsInNamespace(\n    props.subscription.data,\n    selectedTargetNamespace,\n  );\n\n  React.useEffect(() => {\n    if (\n      version !== currentLatestVersion ||\n      manualSubscriptionsInNamespace?.length > 0 ||\n      tokenizedAuth === 'AWS' ||\n      tokenizedAuth === 'Azure' ||\n      tokenizedAuth === 'GCP'\n    ) {\n      setApproval(InstallPlanApproval.Manual);\n    } else setApproval(InstallPlanApproval.Automatic);\n  }, [version, currentLatestVersion, manualSubscriptionsInNamespace?.length, tokenizedAuth]);\n\n  const singleInstallMode = installModes.find(\n    (m) => m.type === InstallModeType.InstallModeTypeOwnNamespace,\n  );\n  const supportsSingle = singleInstallMode && singleInstallMode.supported;\n  const globalInstallMode = installModes.find(\n    (m) => m.type === InstallModeType.InstallModeTypeAllNamespaces,\n  );\n  const supportsGlobal = globalInstallMode && globalInstallMode.supported;\n\n  const navigateToInstallPage = React.useCallback(\n    (csvName: string) => {\n      history.push(\n        `/operatorhub/install/${catalogNamespace}/${pkg}/${csvName}/to/${selectedTargetNamespace}`,\n      );\n    },\n    [catalogNamespace, pkg, selectedTargetNamespace],\n  );\n\n  if (!supportsSingle && !supportsGlobal) {\n    return (\n      <ConsoleEmptyState\n        title={t(\"olm~{{item}} can't be installed\", {\n          item: channels?.[0]?.currentCSVDesc?.displayName,\n        })}\n      >\n        {t(\n          'olm~The Operator does not support to be made available in a single namespace (OwnNamespace installMode) or global installation (AllNamespaces installMode).  Use the CLI to install this Operator instead.',\n        )}\n      </ConsoleEmptyState>\n    );\n  }\n\n  const descFor = (mode: InstallModeType) => {\n    if (mode === InstallModeType.InstallModeTypeAllNamespaces && supportsGlobal) {\n      return t('olm~Operator will be available in all Namespaces.');\n    }\n    if (mode === InstallModeType.InstallModeTypeOwnNamespace && supportsSingle) {\n      return t('olm~Operator will be available in a single Namespace only.');\n    }\n    return t('olm~This mode is not supported by this Operator');\n  };\n  const subscriptionExists = (ns: string) =>\n    installedFor(props.subscription.data)(props.operatorGroup.data)(props.packageManifest.data[0])(\n      ns,\n    );\n  const namespaceSupports = (ns: string) => (mode: InstallModeType) => {\n    const operatorGroup = props.operatorGroup.data.find((og) => og.metadata.namespace === ns);\n    if (!operatorGroup || !ns) {\n      return true;\n    }\n    return supports([{ type: mode, supported: true }])(operatorGroup);\n  };\n  const conflictingProvidedAPIs = (ns: string) => {\n    const operatorGroups = props.operatorGroup.data.filter(\n      (og) => og.status?.namespaces?.includes(ns) || isGlobal(og),\n    );\n    if (_.isEmpty(operatorGroups)) {\n      return [];\n    }\n    const existingAPIs = _.flatMap(operatorGroups, providedAPIsForOperatorGroup);\n    const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(\n      updateChannelName,\n    ).map((desc) => referenceForProvidedAPI(desc));\n\n    return _.intersection(existingAPIs, providedAPIs);\n  };\n\n  const submit = async () => {\n    // Clear any previous errors.\n    setError('');\n    const defaultNS: K8sResourceCommon = {\n      metadata: {\n        name: selectedTargetNamespace,\n        labels:\n          operatorRequestsMonitoring && enableMonitoring\n            ? {\n                'openshift.io/cluster-monitoring': 'true',\n              }\n            : {},\n      },\n    };\n\n    const ns = _.defaultsDeep({}, defaultNS, suggestedNamespaceTemplate);\n    const rbacName = `${selectedTargetNamespace}-prometheus`;\n    const currentChannel = packageManifest?.status?.channels?.find(\n      (ch) => ch.name === updateChannelName,\n    );\n    const currentCSVName = currentChannel?.entries?.find((e) => e.version === updateVersion)?.name;\n    const prometheusRole = {\n      kind: RoleModel.kind,\n      apiVersion: `${RoleModel.apiGroup}/${RoleModel.apiVersion}`,\n      metadata: {\n        name: rbacName,\n        namespace: selectedTargetNamespace,\n      },\n      rules: [\n        {\n          apiGroups: [''],\n          resources: ['services', 'endpoints', 'pods'],\n          verbs: ['get', 'list', 'watch'],\n        },\n      ],\n    };\n\n    const prometheusRoleBinding = {\n      kind: RoleBindingModel.kind,\n      apiVersion: `${RoleBindingModel.apiGroup}/${RoleBindingModel.apiVersion}`,\n      metadata: {\n        name: rbacName,\n        namespace: selectedTargetNamespace,\n      },\n      roleRef: {\n        kind: 'Role',\n        name: rbacName,\n        apiGroup: RoleBindingModel.apiGroup,\n      },\n      subjects: [\n        {\n          kind: 'ServiceAccount',\n          name: 'prometheus-k8s',\n          namespace: 'openshift-monitoring',\n        },\n      ],\n    };\n\n    const operatorGroup: OperatorGroupKind = {\n      apiVersion: apiVersionForModel(OperatorGroupModel) as OperatorGroupKind['apiVersion'],\n      kind: 'OperatorGroup',\n      metadata: {\n        generateName: `${selectedTargetNamespace}-`,\n        namespace: selectedTargetNamespace,\n      },\n      ...(selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n        ? {}\n        : {\n            spec: {\n              targetNamespaces: [selectedTargetNamespace],\n            },\n          }),\n    };\n\n    const subscription: SubscriptionKind = {\n      apiVersion: apiVersionForModel(SubscriptionModel) as SubscriptionKind['apiVersion'],\n      kind: 'Subscription',\n      metadata: {\n        name: packageName,\n        namespace: selectedTargetNamespace,\n      },\n      spec: {\n        source: catalogSource,\n        sourceNamespace: catalogSourceNamespace,\n        name: packageName,\n        startingCSV: currentCSVName,\n        channel: updateChannelName,\n        installPlanApproval: approval,\n      },\n    };\n\n    switch (tokenizedAuth) {\n      case 'AWS':\n        subscription.spec.config = {\n          env: [\n            {\n              name: 'ROLEARN',\n              value: roleARNText,\n            },\n          ],\n        };\n        break;\n      case 'Azure':\n        subscription.spec.config = {\n          env: [\n            {\n              name: 'CLIENTID',\n              value: azureClientId,\n            },\n            {\n              name: 'TENANTID',\n              value: azureTenantId,\n            },\n            {\n              name: 'SUBSCRIPTIONID',\n              value: azureSubscriptionId,\n            },\n          ],\n        };\n        break;\n      case 'GCP':\n        subscription.spec.config = {\n          env: [\n            {\n              name: 'PROJECT_NUMBER',\n              value: gcpProjectNumber,\n            },\n            {\n              name: 'POOL_ID',\n              value: gcpPoolId,\n            },\n            {\n              name: 'PROVIDER_ID',\n              value: gcpProviderId,\n            },\n            {\n              name: 'SERVICE_ACCOUNT_EMAIL',\n              value: gcpServiceAcctEmail,\n            },\n          ],\n        };\n        break;\n      default:\n        break;\n    }\n\n    try {\n      if (isSuggestedNamespaceSelected && !suggestedNamespaceExists) {\n        await k8sCreate(NamespaceModel, ns);\n        if (operatorRequestsMonitoring && enableMonitoring) {\n          await k8sCreate(RoleModel, prometheusRole);\n          await k8sCreate(RoleBindingModel, prometheusRoleBinding);\n        }\n      }\n      if (\n        !props.operatorGroup.data.some(\n          (group) => group.metadata.namespace === selectedTargetNamespace,\n        )\n      ) {\n        await k8sCreate(OperatorGroupModel, operatorGroup);\n      }\n      await k8sCreate(SubscriptionModel, subscription);\n      const previousPlugins: string[] = consoleOperatorConfig?.spec?.plugins || [];\n      const updatedPlugins: string[] = [\n        ...previousPlugins.filter((plugin: string) => !csvPlugins.includes(plugin)),\n        ...enabledPlugins,\n      ];\n      if (\n        !_.isEqual(previousPlugins.sort(), updatedPlugins.sort()) &&\n        canPatchConsoleOperatorConfig\n      ) {\n        await k8sPatch(ConsoleOperatorConfigModel, consoleOperatorConfig, [\n          {\n            path: '/spec/plugins',\n            value: updatedPlugins,\n            op: 'add',\n          },\n        ]);\n      }\n      navigateToInstallPage(currentCSVName);\n    } catch (err) {\n      setError(err.message || t('olm~Could not create Operator Subscription.'));\n    }\n  };\n\n  const formValid = () =>\n    [updateChannelName, selectedInstallMode, selectedTargetNamespace, approval].some(\n      (v) => _.isNil(v) || _.isEmpty(v),\n    ) ||\n    subscriptionExists(selectedTargetNamespace) ||\n    !namespaceSupports(selectedTargetNamespace)(selectedInstallMode) ||\n    (selectedTargetNamespace && cannotResolve) ||\n    !_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace)) ||\n    (tokenizedAuth === 'AWS' && _.isEmpty(roleARNText)) ||\n    (tokenizedAuth === 'Azure' &&\n      [azureClientId, azureTenantId, azureSubscriptionId].some((v) => _.isEmpty(v))) ||\n    (tokenizedAuth === 'GCP' &&\n      [gcpProjectNumber, gcpPoolId, gcpProviderId, gcpServiceAcctEmail].some((v) => _.isEmpty(v)));\n\n  const formError = () => {\n    return (\n      (error && (\n        <Alert\n          isInline\n          className=\"co-alert co-alert--scrollable\"\n          variant=\"danger\"\n          title={t('olm~An error occurred')}\n        >\n          <div className=\"co-pre-line\">{error}</div>\n        </Alert>\n      )) ||\n      (!namespaceSupports(selectedTargetNamespace)(selectedInstallMode) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t('olm~Namespace does not support installation mode')}\n        >\n          {selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n          selectedTargetNamespace === globalNS ? (\n            <>\n              {t(\n                'olm~The {{namespace}} Namespace is reserved for global Operators that watch all Namespaces. To install an Operator in a single Namespace, select a different Namespace where the operand should run.',\n                { namespace: selectedTargetNamespace },\n              )}\n            </>\n          ) : (\n            <>\n              {t(\n                'olm~The OperatorGroup in the {{namespace}} Namespace does not support the {{mode}} installation mode. Select a different installation Namespace that supports this mode.',\n                {\n                  namespace: selectedTargetNamespace,\n                  mode:\n                    selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n                      ? ' global '\n                      : ' single-Namespace ',\n                },\n              )}\n            </>\n          )}\n        </Alert>\n      )) ||\n      (subscriptionExists(selectedTargetNamespace) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t(\n            'olm~A Subscription for this Operator already exists in Namespace \"{{namespace}}\"',\n            {\n              namespace: selectedTargetNamespace,\n            },\n          )}\n        >\n          <p>\n            <Trans t={t} ns=\"olm\">\n              Remove the{' '}\n              <Link\n                to={resourcePathFromModel(SubscriptionModel, packageName, selectedTargetNamespace)}\n              >\n                existing Subscription\n              </Link>{' '}\n              in order to install this Operator in Namespace {'\"'}\n              {{ selectedTargetNamespace }}\n              {'\"'}\n            </Trans>\n          </p>\n        </Alert>\n      )) ||\n      (!_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace)) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t('olm~Operator conflicts exist')}\n        >\n          {t(\n            'olm~Installing this Operator in the selected Namespace would cause conflicts with another Operator providing these APIs:',\n          )}\n          <ul>\n            {conflictingProvidedAPIs(selectedTargetNamespace).map((gvk) => (\n              <li key={gvk}>\n                <strong>{kindForReference(gvk)}</strong> <i>({apiVersionForReference(gvk)})</i>\n              </li>\n            ))}\n          </ul>\n        </Alert>\n      )) ||\n      (selectedTargetNamespace && cannotResolve && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={t('olm~Operator not available for selected Namespaces')}\n        />\n      ))\n    );\n  };\n\n  const showMonitoringCheckbox =\n    operatorRequestsMonitoring && _.startsWith(selectedTargetNamespace, 'openshift-');\n\n  const monitoringURL = getDocumentationURL(documentationURLs.configuringMonitoring);\n\n  const suggestedNamespaceDetails = showSuggestedNamespaceDetails && (\n    <>\n      <Alert\n        isInline\n        className=\"co-alert co-alert--scrollable\"\n        variant={suggestedNamespaceExists ? 'warning' : 'info'}\n        title={\n          suggestedNamespaceExists ? t('olm~Namespace already exists') : t('olm~Namespace creation')\n        }\n      >\n        {suggestedNamespaceExists ? (\n          <Trans ns=\"olm\">\n            Namespace <b>{{ operatorSuggestedNamespace }}</b> already exists and will be used. Other\n            users can already have access to this namespace.\n          </Trans>\n        ) : (\n          <Trans ns=\"olm\">\n            Namespace <b>{{ operatorSuggestedNamespace }}</b> does not exist and will be created.\n          </Trans>\n        )}\n      </Alert>\n      {showMonitoringCheckbox && !suggestedNamespaceExists && (\n        <div className=\"co-form-subsection\">\n          <Checkbox\n            id=\"enable-monitoring-checkbox\"\n            data-test=\"enable-monitoring\"\n            label={t('olm~Enable Operator recommended cluster monitoring on this Namespace')}\n            onChange={(_event, value) => setEnableMonitoring(value)}\n            isChecked={enableMonitoring}\n            data-checked-state={enableMonitoring}\n          />\n          {!props.packageManifest.data[0].metadata.labels.provider?.includes('Red Hat') && (\n            <Alert\n              isInline\n              className=\"co-alert pf-v5-c-alert--top-margin\"\n              variant=\"warning\"\n              title={t('olm~Namespace monitoring')}\n            >\n              <>\n                {t(\n                  'olm~Please note that installing non-Red Hat operators into OpenShift namespaces and enabling monitoring voids user support. Enabling cluster monitoring for non-Red Hat operators can lead to malicious metrics data overriding existing cluster metrics.',\n                )}\n                {!isManaged() && (\n                  <Trans ns=\"olm\">\n                    {' '}\n                    For more information, see the{' '}\n                    <ExternalLink href={monitoringURL}>\n                      cluster monitoring documentation\n                    </ExternalLink>\n                    .\n                  </Trans>\n                )}\n              </>\n            </Alert>\n          )}\n        </div>\n      )}\n    </>\n  );\n\n  const installedNamespaceOptions = (\n    <div className=\"form-group\">\n      <RadioInput\n        onChange={() => {\n          setUseSuggestedNSForSingleInstallMode(true);\n          setTargetNamespace(operatorSuggestedNamespace);\n        }}\n        value={operatorSuggestedNamespace}\n        checked={useSuggestedNSForSingleInstallMode}\n        title={t('olm~Operator recommended Namespace:')}\n      >\n        {' '}\n        <ResourceIcon kind=\"Project\" />\n        <b>{operatorSuggestedNamespace}</b>\n      </RadioInput>\n      <RadioInput\n        onChange={() => {\n          setUseSuggestedNSForSingleInstallMode(false);\n          setTargetNamespace(null);\n        }}\n        value={operatorSuggestedNamespace}\n        checked={!useSuggestedNSForSingleInstallMode}\n        title={t('olm~Select a Namespace')}\n      />\n      {!useSuggestedNSForSingleInstallMode && (\n        <>\n          <NsDropdown\n            id=\"dropdown-selectbox\"\n            selectedKey={selectedTargetNamespace}\n            onChange={(ns) => setTargetNamespace(ns)}\n            dataTest=\"dropdown-selectbox\"\n          />\n          <Alert\n            isInline\n            className=\"co-alert pf-v5-c-alert--top-margin\"\n            variant=\"warning\"\n            title={t(\n              'olm~Not installing the Operator into the recommended namespace can cause unexpected behavior.',\n            )}\n          />\n        </>\n      )}\n    </div>\n  );\n\n  const installedNamespaceSelect = (\n    <div className=\"form-group\">\n      <NsDropdown\n        id=\"dropdown-selectbox\"\n        selectedKey={selectedTargetNamespace}\n        onChange={(ns) => setTargetNamespace(ns)}\n        dataTest=\"dropdown-selectbox\"\n      />\n    </div>\n  );\n\n  const globalNamespaceInstallMode = (\n    <>\n      {operatorSuggestedNamespace ? (\n        <>{installedNamespaceOptions}</>\n      ) : (\n        <>{installedNamespaceSelect}</>\n      )}\n      {useSuggestedNSForSingleInstallMode && suggestedNamespaceDetails}\n    </>\n  );\n\n  const singleNamespaceInstallMode = !suggestedNamespace ? (\n    <>{installedNamespaceSelect}</>\n  ) : (\n    <>\n      {installedNamespaceOptions}\n      {useSuggestedNSForSingleInstallMode && suggestedNamespaceDetails}\n    </>\n  );\n\n  const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(updateChannelName);\n\n  const isApprovalItemDisabled =\n    version !== currentLatestVersion || manualSubscriptionsInNamespace?.length > 0;\n\n  return (\n    <>\n      <Helmet>\n        <title>Operator Installation</title>\n      </Helmet>\n      <PageHeading\n        title={t('olm~Install Operator')}\n        breadcrumbs={[\n          { name: t('olm~OperatorHub'), path: `/operatorhub?${search.toString()}` },\n          { name: t('olm~Operator Installation'), path: url },\n        ]}\n        helpText={t(\n          'olm~Install your Operator by subscribing to one of the update channels to keep the Operator up to date. The strategy determines either manual or automatic updates.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        {tokenizedAuth === 'AWS' && showCSTokenWarn && (\n          <CloudServiceTokenWarningAlert\n            title={t('olm~Cluster in STS Mode')}\n            message={t(\n              'olm~This cluster is using AWS Security Token Service to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, you will need to provide a role ARN (with an attached policy) during installation. Manual subscriptions are highly recommended as steps should be taken prior to upgrade to ensure that the permissions required by the next version are properly accounted for in the role. Please see the operator description for more details.',\n            )}\n            onClose={() => setShowCSTokenWarn(false)}\n          />\n        )}\n        {tokenizedAuth === 'Azure' && showCSTokenWarn && (\n          <CloudServiceTokenWarningAlert\n            title={t('olm~Cluster in Azure Workload Identity / Federated Identity Mode')}\n            message={t(\n              'olm~This cluster is using Azure Workload Identity / Federated Identity to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, provide the Client ID, Tenant ID, and Subscription ID during installation. Manual subscriptions are highly recommended as steps should be taken before upgrade to ensure that the permissions required by the next version are properly accounted for in the role. See the operator description for more details.',\n            )}\n            onClose={() => setShowCSTokenWarn(false)}\n          />\n        )}{' '}\n        {tokenizedAuth === 'GCP' && showCSTokenWarn && (\n          <CloudServiceTokenWarningAlert\n            title={t('olm~Cluster in GCP Workload Identity / Federated Identity Mode')}\n            message={t(\n              'olm~This cluster is using GCP Workload Identity / Federated Identity to reach the cloud API. In order for this operator to take the actions it requires directly with the cloud API, provide the Pool ID, Provider ID, and Service Account Email during installation. Manual subscriptions are highly recommended as steps should be taken before upgrade to ensure that the permissions required by the next version are properly accounted for in the role. See the operator description for more details.',\n            )}\n            onClose={() => setShowCSTokenWarn(false)}\n          />\n        )}\n        <div className=\"row\">\n          <div className=\"col-xs-6\">\n            <>\n              {tokenizedAuth === 'AWS' && (\n                <div className=\"form-group\">\n                  <InputField\n                    label={t('olm~role ARN')}\n                    helpText={t(\n                      'olm~The role ARN required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~role ARN')}\n                    ariaLabel={t('olm~role ARN')}\n                    value={roleARNText}\n                    setValue={setRoleARNText}\n                  />\n                </div>\n              )}\n              {tokenizedAuth === 'Azure' && (\n                <div className=\"form-group\">\n                  <InputField\n                    label={t('olm~Azure Client ID')}\n                    helpText={t(\n                      'olm~The Azure Client ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~Azure Client ID')}\n                    ariaLabel={t('olm~Azure Client ID')}\n                    value={azureClientId}\n                    setValue={setAzureClientId}\n                  />\n                  <InputField\n                    label={t('olm~Azure Tenant ID')}\n                    helpText={t(\n                      'olm~The Azure Tenant ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~Azure Tenant ID')}\n                    ariaLabel={t('olm~Azure Tenant ID')}\n                    value={azureTenantId}\n                    setValue={setAzureTenantId}\n                  />\n\n                  <InputField\n                    label={t('olm~Azure Subscription ID')}\n                    helpText={t(\n                      'olm~The Azure Subscription ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~Azure Subscription ID')}\n                    ariaLabel={t('olm~Azure Subscription ID')}\n                    value={azureSubscriptionId}\n                    setValue={setAzureSubscriptionId}\n                  />\n                </div>\n              )}\n              {tokenizedAuth === 'GCP' && (\n                <div className=\"form-group\">\n                  <InputField\n                    label={t('olm~GCP Project Number')}\n                    helpText={t(\n                      'olm~The GCP Project Number required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Project Number')}\n                    ariaLabel={t('olm~GCP Project Number')}\n                    value={gcpProjectNumber}\n                    setValue={setGcpProjectNumber}\n                  />\n                  <InputField\n                    label={t('olm~GCP Pool ID')}\n                    helpText={t(\n                      'olm~The GCP Pool ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Pool ID')}\n                    ariaLabel={t('olm~GCP Pool ID')}\n                    value={gcpPoolId}\n                    setValue={setGcpPoolId}\n                  />\n                  <InputField\n                    label={t('olm~GCP Provider ID')}\n                    helpText={t(\n                      'olm~The GCP Provider ID required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Provider ID')}\n                    ariaLabel={t('olm~GCP Provider ID')}\n                    value={gcpProviderId}\n                    setValue={setGcpProviderId}\n                  />\n                  <InputField\n                    label={t('olm~Service Account Email')}\n                    helpText={t(\n                      'olm~The GCP Service Account Email required for the operator to access the cloud API.',\n                    )}\n                    placeholder={t('olm~GCP Service Account Email')}\n                    ariaLabel={t('olm~GCP Service Account Email')}\n                    value={gcpServiceAcctEmail}\n                    setValue={setGcpServiceAcctEmail}\n                  />\n                </div>\n              )}\n              <div className=\"form-group\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Update channel')}</label>\n                  <FieldLevelHelp>\n                    {t('olm~The channel to track and receive the updates from.')}\n                  </FieldLevelHelp>\n                  <OperatorChannelSelect\n                    packageManifest={props.packageManifest.data[0]}\n                    selectedUpdateChannel={updateChannelName}\n                    setUpdateChannel={setUpdateChannelName}\n                    setUpdateVersion={setUpdateVersion}\n                  />\n                </fieldset>\n              </div>\n              <div className=\"form-group form-group--doubled-bottom-margin\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Version')}</label>\n                  <OperatorVersionSelect\n                    packageManifest={props.packageManifest.data[0]}\n                    selectedUpdateChannel={updateChannelName}\n                    updateVersion={updateVersion}\n                    setUpdateVersion={setUpdateVersion}\n                    showVersionAlert\n                  />\n                </fieldset>\n              </div>\n              <div className=\"form-group\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Installation mode')}</label>\n                  <RadioInput\n                    onChange={(e) => {\n                      setInstallMode(e.target.value);\n                      setTargetNamespace(null);\n                      setCannotResolve(false);\n                    }}\n                    value={InstallModeType.InstallModeTypeAllNamespaces}\n                    checked={selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces}\n                    disabled={!supportsGlobal}\n                    title={t('olm~All namespaces on the cluster')}\n                    subTitle={t('olm~(default)')}\n                  >\n                    <div className=\"co-m-radio-desc\">\n                      <p className=\"text-muted\">\n                        {descFor(InstallModeType.InstallModeTypeAllNamespaces)}\n                      </p>\n                    </div>\n                  </RadioInput>\n                  <RadioInput\n                    onChange={(e) => {\n                      setInstallMode(e.target.value);\n                      setTargetNamespace(\n                        useSuggestedNSForSingleInstallMode ? operatorSuggestedNamespace : null,\n                      );\n                      setCannotResolve(false);\n                    }}\n                    value={InstallModeType.InstallModeTypeOwnNamespace}\n                    checked={selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace}\n                    disabled={!supportsSingle}\n                    title={t('olm~A specific namespace on the cluster')}\n                  >\n                    <div className=\"co-m-radio-desc\">\n                      <p className=\"text-muted\">\n                        {descFor(InstallModeType.InstallModeTypeOwnNamespace)}\n                      </p>\n                    </div>\n                  </RadioInput>\n                </fieldset>\n              </div>\n              <div className=\"form-group form-group--doubled-bottom-margin\">\n                <label className=\"co-required\" htmlFor=\"dropdown-selectbox\">\n                  {t('olm~Installed Namespace')}\n                </label>\n                {selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces &&\n                  globalNamespaceInstallMode}\n                {selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n                  singleNamespaceInstallMode}\n              </div>\n              <div className=\"form-group\">\n                <fieldset>\n                  <label className=\"co-required\">{t('olm~Update approval')}</label>\n                  <FieldLevelHelp>\n                    {t('olm~The strategy to determine either manual or automatic updates.')}\n                  </FieldLevelHelp>\n                  <RadioGroup\n                    currentValue={approval}\n                    items={[\n                      {\n                        value: InstallPlanApproval.Automatic,\n                        title: t('olm~Automatic'),\n                        disabled: isApprovalItemDisabled,\n                      },\n                      {\n                        value: InstallPlanApproval.Manual,\n                        title: t('olm~Manual'),\n                      },\n                    ]}\n                    onChange={(e) => {\n                      const { value } = e.currentTarget;\n                      setApproval(value);\n                      if (value === InstallPlanApproval.Automatic) {\n                        setUpdateVersion(currentLatestVersion);\n                      }\n                    }}\n                  />\n                  {approval === InstallPlanApproval.Automatic &&\n                    manualSubscriptionsInNamespace?.length > 0 && (\n                      <Alert\n                        isInline\n                        className=\"co-alert co-alert--margin-top\"\n                        variant=\"info\"\n                        title={t('olm~Will function as manual approval strategy')}\n                      >\n                        <NamespaceIncludesManualApproval\n                          subscriptions={manualSubscriptionsInNamespace}\n                          namespace={selectedTargetNamespace}\n                        />\n                      </Alert>\n                    )}\n                  {approval === InstallPlanApproval.Manual && (\n                    <Alert\n                      isInline\n                      className=\"co-alert co-alert--margin-top\"\n                      variant=\"info\"\n                      title={t('olm~Manual approval applies to all operators in a namespace')}\n                    >\n                      <Trans ns=\"olm\">\n                        Installing an operator with manual approval causes all operators installed\n                        in namespace <strong>{{ selectedTargetNamespace }}</strong> to function as\n                        manual approval strategy and will be updated altogether. Install operators\n                        into separate namespaces for handling their updates independently. To allow\n                        automatic approval, all operators installed in the namespace must use\n                        automatic approval strategy.\n                      </Trans>\n                    </Alert>\n                  )}\n                </fieldset>\n              </div>\n              {csvPlugins.length > 0 && consoleOperatorConfig && canPatchConsoleOperatorConfig && (\n                <ConsolePluginFormGroup\n                  catalogSource={catalogSource}\n                  csvPlugins={csvPlugins}\n                  enabledPlugins={enabledPlugins}\n                  setPluginEnabled={setPluginEnabled}\n                />\n              )}\n            </>\n            {deprecatedWarning && (\n              <DeprecatedOperatorWarningAlert\n                deprecatedPackage={deprecatedPackage}\n                deprecatedChannel={deprecatedChannel}\n                deprecatedVersion={deprecatedVersion}\n              />\n            )}\n            <div className=\"co-form-section__separator\" />\n            {formError()}\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button\n                data-test=\"install-operator\"\n                onClick={() => submit()}\n                isDisabled={formValid()}\n                variant=\"primary\"\n              >\n                {t('olm~Install')}\n              </Button>\n              <Button variant=\"secondary\" onClick={() => history.push('/operatorhub')}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </div>\n          <div className=\"col-xs-6\">\n            <ClusterServiceVersionLogo\n              displayName={\n                currentCSVDesc?.displayName || channels?.[0]?.currentCSVDesc?.displayName\n              }\n              icon={iconFor(props.packageManifest.data[0])}\n              provider={provider}\n              deprecation={packageManifest?.status?.deprecation}\n            />\n            <h4>{t('olm~Provided APIs')}</h4>\n            <div className=\"co-crd-card-row\">\n              {!providedAPIs.length ? (\n                <span className=\"text-muted\">\n                  {t('olm~No Kubernetes APIs are provided by this Operator.')}\n                </span>\n              ) : (\n                providedAPIs.map((api) => (\n                  <CRDCard\n                    key={referenceForProvidedAPI(api)}\n                    canCreate={false}\n                    crd={api}\n                    csv={null}\n                    required={referenceForProvidedAPI(api) === initializationResourceReference}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst OperatorHubSubscribe: React.FC<OperatorHubSubscribeFormProps> = (props) => (\n  <StatusBox data={props.packageManifest.data[0]} loaded={props.loaded} loadError={props.loadError}>\n    <OperatorHubSubscribeForm {...props} />\n  </StatusBox>\n);\n\nexport const OperatorHubSubscribePage: React.SFC = (props) => {\n  return (\n    <Firehose\n      resources={[\n        {\n          isList: true,\n          kind: referenceForModel(OperatorGroupModel),\n          prop: 'operatorGroup',\n        },\n        {\n          isList: true,\n          kind: referenceForModel(PackageManifestModel),\n          namespace: new URLSearchParams(window.location.search).get('catalogNamespace'),\n          fieldSelector: `metadata.name=${new URLSearchParams(window.location.search).get('pkg')}`,\n          selector: {\n            matchLabels: {\n              catalog: new URLSearchParams(window.location.search).get('catalog'),\n            },\n          },\n          prop: 'packageManifest',\n        },\n        {\n          isList: true,\n          kind: referenceForModel(SubscriptionModel),\n          prop: 'subscription',\n        },\n      ]}\n    >\n      {/* FIXME(alecmerdler): Hack because `Firehose` injects props without TypeScript knowing about it */}\n      <OperatorHubSubscribe\n        {...(props as any)}\n        targetNamespace={new URLSearchParams(window.location.search).get('targetNamespace') || null}\n      />\n    </Firehose>\n  );\n};\n\nexport type OperatorHubSubscribeFormProps = {\n  loaded: boolean;\n  loadError?: any;\n  namespace: string;\n  targetNamespace?: string;\n  operatorGroup: { loaded: boolean; data: OperatorGroupKind[] };\n  packageManifest: { loaded: boolean; data: PackageManifestKind[] };\n  subscription: { loaded: boolean; data: SubscriptionKind[] };\n};\n\ntype InputFieldProps = {\n  label: string;\n  helpText: string;\n  placeholder: string;\n  ariaLabel: string;\n  value: string;\n  setValue: (value: string) => void;\n};\n\ntype CloudServiceTokenWarningAlertProps = {\n  title: string;\n  message: string;\n  onClose: (value: boolean) => void;\n};\n\nOperatorHubSubscribe.displayName = 'OperatorHubSubscribe';\nOperatorHubSubscribeForm.displayName = 'OperatorHubSubscribeForm';\nOperatorHubSubscribePage.displayName = 'OperatorHubSubscribePage';\n","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_blue_300 = {\n  \"name\": \"--pf-v5-chart-color-blue-300\",\n  \"value\": \"#06c\",\n  \"var\": \"var(--pf-v5-chart-color-blue-300, #06c)\"\n};\nexports[\"default\"] = exports.chart_color_blue_300;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_blue_100 = {\n  \"name\": \"--pf-v5-chart-color-blue-100\",\n  \"value\": \"#8bc1f7\",\n  \"var\": \"var(--pf-v5-chart-color-blue-100, #8bc1f7)\"\n};\nexports[\"default\"] = exports.chart_color_blue_100;","import * as React from 'react';\nimport { Label, FormAlert, Alert, Tooltip, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { YellowExclamationTriangleIcon } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\nimport { SubscriptionKind } from '../../types';\n\nexport enum DeprecatedOperatorType {\n  PackageDeprecated = 'PackageDeprecated',\n  ChannelDeprecated = 'ChannelDeprecated',\n  VersionDeprecated = 'BundleDeprecated',\n}\nconst findDeprecation = (obj: SubscriptionKind, type: string): DeprecatedOperatorWarning => {\n  return { deprecation: obj?.status?.conditions?.find((f) => f.type === type) };\n};\n\nexport const findDeprecatedOperator = (\n  obj: SubscriptionKind,\n): {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n} => {\n  return {\n    deprecatedPackage: findDeprecation(obj, DeprecatedOperatorType.PackageDeprecated),\n    deprecatedChannel: findDeprecation(obj, DeprecatedOperatorType.ChannelDeprecated),\n    deprecatedVersion: findDeprecation(obj, DeprecatedOperatorType.VersionDeprecated),\n  };\n};\n\nexport const DeprecatedOperatorWarningBadge: React.FC<DeprecatedOperatorWarningBadge> = ({\n  deprecation,\n  className,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <Label\n        data-test=\"deprecated-operator-warning-badge\"\n        color=\"orange\"\n        className={className}\n        icon={<YellowExclamationTriangleIcon />}\n      >\n        {t('olm~Deprecated')}\n      </Label>\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningIcon: React.FC<DeprecatedOperatorWarningIcon> = ({\n  deprecation,\n  dataTest,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <YellowExclamationTriangleIcon dataTest={dataTest} className=\"pf-v5-u-ml-xs\" />\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningAlert: React.FC<DeprecatedOperatorWarningProps> = ({\n  deprecatedPackage,\n  deprecatedChannel,\n  deprecatedVersion,\n  dismissible,\n}) => {\n  const { t } = useTranslation();\n  const [alertVisible, setAlertVisible] = React.useState<boolean>(true);\n\n  return (\n    alertVisible && (\n      <FormAlert className=\"pf-v5-u-my-md\">\n        <Alert\n          variant=\"warning\"\n          title={t('olm~Deprecated warnings')}\n          aria-live=\"polite\"\n          isInline\n          actionClose={\n            dismissible && <AlertActionCloseButton onClose={() => setAlertVisible(false)} />\n          }\n        >\n          <div data-test=\"deprecated-operator-warning-package\">\n            {deprecatedPackage?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-channel\">\n            {deprecatedChannel?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-version\">\n            {deprecatedVersion?.deprecation?.message}\n          </div>\n        </Alert>\n      </FormAlert>\n    )\n  );\n};\n\ntype DeprecatedOperatorWarningBadge = {\n  className?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningIcon = {\n  dataTest?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningProps = {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n  dismissible?: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\nimport operatorLogo from '../operator.svg';\nimport { ClusterServiceVersionIcon } from '../types';\nimport { DeprecatedOperatorWarningBadge } from './deprecated-operator-warnings/deprecated-operator-warnings';\n\nexport const ClusterServiceVersionLogo: React.FC<ClusterServiceVersionLogoProps> = (props) => {\n  const { icon, displayName, provider, version, deprecation } = props;\n  const { t } = useTranslation();\n\n  const imgSrc: string = _.isString(icon)\n    ? icon\n    : _.isEmpty(icon)\n    ? operatorLogo\n    : `data:${icon.mediatype};base64,${icon.base64data}`;\n\n  return (\n    <div className=\"co-clusterserviceversion-logo\">\n      <div className=\"co-clusterserviceversion-logo__icon\">\n        <span className=\"co-catalog-item-icon__bg\">\n          <img\n            className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n            src={imgSrc}\n            alt={displayName}\n            aria-hidden\n          />\n        </span>\n      </div>\n      <div className=\"co-clusterserviceversion-logo__name\">\n        <h1 className=\"co-clusterserviceversion-logo__name__clusterserviceversion\">\n          {displayName}{' '}\n          {deprecation && (\n            <DeprecatedOperatorWarningBadge className=\"pf-v5-u-ml-sm\" deprecation={deprecation} />\n          )}\n        </h1>\n        {provider && (\n          <span className=\"co-clusterserviceversion-logo__name__provider text-muted\">\n            {t('olm~{{version}} provided by {{provider}}', {\n              version: version || '',\n              provider: _.get(provider, 'name', provider),\n            })}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\nexport type ClusterServiceVersionLogoProps = {\n  displayName: string;\n  icon: ClusterServiceVersionIcon | string;\n  provider?: { name: string } | string;\n  version?: string;\n} & DeprecatedOperatorWarning;\n","module.exports = __webpack_public_path__ + \"assets/packages/operator-lifecycle-manager/src/operator.svg\";","import * as React from 'react';\n\nexport const Checkbox: React.SFC<CheckboxProps> = ({ name, label, checked, onChange }) => (\n  <div className=\"form-group\">\n    <div className=\"checkbox\">\n      <label className=\"control-label\">\n        <input\n          data-test={`${label}__checkbox`}\n          className=\"form-checkbox\"\n          name={name}\n          onChange={onChange}\n          checked={checked}\n          data-checked-state={checked}\n          type=\"checkbox\"\n        />\n        {label}\n      </label>\n    </div>\n  </div>\n);\n\nexport type CheckboxProps = {\n  name: string;\n  label: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n  checked: boolean;\n};\n","import { createIcon } from '../createIcon';\n\nexport const AddCircleOIconConfig = {\n  name: 'AddCircleOIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M576,303 C576,294.715729 569.284271,288 561,288 L463,288 C454.715729,288 448,294.715729 448,303 L448,448 L303,448 C294.715729,448 288,454.715729 288,463 L288,561 C288,569.284271 294.715729,576 303,576 L448,576 L448,720.9 C447.983373,729.207373 454.6927,735.961429 463,736 L561,736 C569.3073,735.961429 576.016627,729.207373 576,720.9 L576,576 L721,576 C724.969024,576.026638 728.784638,574.468589 731.600595,571.671405 C734.416553,568.87422 736.000031,565.069113 736.000031,561.1 L736.000031,463.1 C736.016627,454.792627 729.3073,448.038571 721,448 L576,448 L576,303 Z M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 Z M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const AddCircleOIcon = createIcon(AddCircleOIconConfig);\n\nexport default AddCircleOIcon;","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Alert, Progress, ProgressSize } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { k8sGetResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { settleAllPromises } from '@console/dynamic-plugin-sdk/src/utils/promise';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { Checkbox } from '@console/internal/components/checkbox';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport {\n  history,\n  ResourceLink,\n  resourceListPathFromModel,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport {\n  K8sKind,\n  K8sResourceCommon,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  k8sPatch,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '@console/shared/src/constants';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { useOperands } from '@console/shared/src/hooks/useOperands';\nimport { getPatchForRemovingPlugins, isPluginEnabled } from '@console/shared/src/utils';\nimport { DEFAULT_GLOBAL_OPERATOR_INSTALLATION_NAMESPACE } from '../../const';\nimport { ClusterServiceVersionModel, SubscriptionModel } from '../../models';\nimport { ClusterServiceVersionKind, SubscriptionKind } from '../../types';\nimport { OperandLink } from '../operand/operand-link';\nimport { OLMAnnotation } from '../operator-hub';\nimport { getClusterServiceVersionPlugins } from '../operator-hub/operator-hub-utils';\nimport Timeout = NodeJS.Timeout;\n\nconst deleteOptions = {\n  kind: 'DeleteOptions',\n  apiVersion: 'v1',\n  propagationPolicy: 'Foreground',\n};\n\nexport const UninstallOperatorModal: React.FC<UninstallOperatorModalProps> = ({\n  cancel,\n  close,\n  csv,\n  k8sKill,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const [\n    handleOperatorUninstallPromise,\n    operatorUninstallInProgress,\n    operatorUninstallErrorMessage,\n  ] = usePromiseHandler();\n  const [showInstructions, setShowInstructions] = React.useState(true);\n  const [operatorUninstallFinished, setOperatorUninstallFinished] = React.useState(false);\n  const [deleteOperands, setDeleteOperands] = React.useState(false);\n  const [operandsDeleteInProgress, setOperandsDeleteInProgress] = React.useState(false);\n  const [operandsRemaining, setOperandsRemaining] = React.useState(0);\n  const [operandsDeleteFinished, setOperandsDeleteFinished] = React.useState(false);\n  const [operandDeletionErrors, setOperandDeletionErrors] = React.useState<OperandError[]>([]);\n  const [operandDeletionVerificationError, setOperandDeletionVerificationError] = React.useState(\n    false,\n  );\n  const [clusterServiceVersionExistsError, setClusterServiceVersionExistsError] = React.useState(\n    '',\n  );\n\n  const canPatchConsoleOperatorConfig = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n\n  const csvPlugins = getClusterServiceVersionPlugins(csv?.metadata?.annotations);\n\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>(\n    canPatchConsoleOperatorConfig && csvPlugins.length > 0\n      ? {\n          kind: referenceForModel(ConsoleOperatorConfigModel),\n          isList: false,\n          name: CONSOLE_OPERATOR_CONFIG_NAME,\n        }\n      : null,\n  );\n\n  const enabledPlugins = csvPlugins.filter((plugin) =>\n    isPluginEnabled(consoleOperatorConfig, plugin),\n  );\n\n  const removePlugins: boolean =\n    !!consoleOperatorConfig && canPatchConsoleOperatorConfig && enabledPlugins.length > 0;\n\n  const subscriptionName = subscription?.spec?.name;\n  const subscriptionNamespace = subscription?.metadata?.namespace;\n\n  const isSubmitInProgress = operatorUninstallInProgress || operandsDeleteInProgress;\n\n  const isSubmitFinished =\n    !isSubmitInProgress && (!deleteOperands || operandsDeleteFinished) && operatorUninstallFinished;\n\n  const hasSubmitErrors = operandDeletionErrors.length > 0 || operatorUninstallErrorMessage !== '';\n\n  // Skip loading the operands if we are not going to delete them if they opted Out\n  const optOutAnnotation = 'console.openshift.io/disable-operand-delete';\n  const optedOut = csv?.metadata?.annotations?.[optOutAnnotation] === 'true';\n\n  // TODO: Commenting out for review, wanted to prevent loading the operands if not needed, but lint check throws error\n  // const [operands, operandsLoaded, operandsLoadedErrorMessage] = optedOut\n  //   ? [[], true, '']\n  //   : useOperands(subscriptionName, subscriptionNamespace);\n  const [operands, operandsLoaded, operandsLoadedErrorMessage] = useOperands(\n    subscriptionName,\n    subscriptionNamespace,\n  );\n\n  const uninstallOperator = React.useCallback(async () => {\n    const patch = removePlugins\n      ? getPatchForRemovingPlugins(consoleOperatorConfig, enabledPlugins)\n      : null;\n\n    const clusterServiceVersionExists = async () => {\n      try {\n        await k8sGetResource({\n          model: ClusterServiceVersionModel,\n          name: subscription.status.installedCSV,\n          ns: subscription.metadata.namespace,\n        });\n        return true;\n      } catch (err) {\n        if (err.response.status !== 404) {\n          setClusterServiceVersionExistsError(err.message);\n        }\n        return false;\n      }\n    };\n\n    const operatorUninstallPromises = [\n      k8sKill(SubscriptionModel, subscription, {}, deleteOptions),\n      ...(subscription?.status?.installedCSV && (await clusterServiceVersionExists())\n        ? [\n            k8sKill(\n              ClusterServiceVersionModel,\n              {\n                metadata: {\n                  name: subscription.status.installedCSV,\n                  namespace: subscription.metadata.namespace,\n                },\n              },\n              {},\n              deleteOptions,\n            ),\n          ]\n        : []),\n      ...(removePlugins\n        ? [k8sPatch(ConsoleOperatorConfigModel, consoleOperatorConfig, [patch])]\n        : []),\n    ];\n\n    handleOperatorUninstallPromise(Promise.all(operatorUninstallPromises))\n      .then(() => {\n        setOperatorUninstallFinished(true);\n      })\n      .catch(() => {\n        setOperatorUninstallFinished(true);\n      });\n  }, [\n    consoleOperatorConfig,\n    enabledPlugins,\n    handleOperatorUninstallPromise,\n    k8sKill,\n    removePlugins,\n    subscription,\n  ]);\n\n  const finishVerification = React.useCallback(\n    (proceedToUninstallOperator: boolean) => {\n      setOperandsDeleteInProgress(false);\n      setOperandsDeleteFinished(true);\n      if (proceedToUninstallOperator) {\n        uninstallOperator();\n      } else {\n        setOperandDeletionVerificationError(true);\n        setOperatorUninstallFinished(true);\n      }\n    },\n    [uninstallOperator],\n  );\n\n  const pollOperands = React.useCallback((): Timeout => {\n    const url = `${window.SERVER_FLAGS.basePath}api/list-operands/?name=${subscriptionName}&namespace=${subscriptionNamespace}`;\n    const interval = setInterval(() => {\n      coFetchJSON(url)\n        .then((curOperands) => {\n          setOperandsRemaining(curOperands.items.length);\n          if (curOperands.items.length === 0) {\n            clearInterval(interval);\n            setTimeout(() => finishVerification(true), 1000); // allow '0 Operands remaining' to display for a second\n          }\n        })\n        .catch(() => {\n          finishVerification(false);\n        });\n    }, 2000); // every 2 seconds\n    return interval;\n  }, [finishVerification, subscriptionName, subscriptionNamespace]);\n\n  const closeAndRedirect = React.useCallback(() => {\n    close();\n    // if url contains subscription name (ex: \"codeready-workspaces\") or installedCSV version (ex: \"crwoperator.v2.9.0\")\n    // redirect to ClusterServiceVersion \"Installed Operators\" list page,\n    // else uninstalled from \"Installed Operators\" list page, so do not redirect\n    if (\n      window.location.pathname.split('/').includes(subscription.metadata.name) ||\n      window.location.pathname.split('/').includes(subscription?.status?.installedCSV)\n    ) {\n      history.push(resourceListPathFromModel(ClusterServiceVersionModel, getActiveNamespace()));\n    }\n  }, [close, subscription]);\n\n  React.useEffect(() => {\n    if (isSubmitFinished && !hasSubmitErrors) {\n      closeAndRedirect();\n    }\n  }, [closeAndRedirect, hasSubmitErrors, isSubmitFinished]);\n\n  React.useEffect(() => {\n    let intervalID;\n    if (operandsDeleteInProgress) {\n      intervalID = pollOperands();\n    }\n    return () => {\n      if (intervalID) {\n        clearInterval(intervalID);\n      }\n    };\n  }, [operandsDeleteInProgress, pollOperands]);\n\n  const submit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if (isSubmitFinished) {\n      closeAndRedirect();\n      return;\n    }\n\n    setShowInstructions(false);\n    if (deleteOperands) {\n      setOperandsDeleteInProgress(true);\n      setOperandsRemaining(operands.length);\n      const operandDeletionPromises = operands.map((operand: K8sResourceCommon) => {\n        const model = modelFor(referenceFor(operand));\n        return k8sKill(model, operand, {}, deleteOptions);\n      });\n      // eslint-disable-next-line promise/catch-or-return\n      settleAllPromises(operandDeletionPromises).then(([, , results]) => {\n        const operandErrors: OperandError[] = results.reduce((acc: OperandError[], curr, i) => {\n          return curr.status === 'rejected'\n            ? acc.concat({ operand: operands[i], errorMessage: curr.reason })\n            : acc;\n        }, []);\n        if (operandErrors.length) {\n          setOperandDeletionErrors(operandErrors);\n          setOperandsDeleteInProgress(false);\n          setOperandsDeleteFinished(true);\n          setOperatorUninstallFinished(true);\n        }\n      });\n    } else {\n      setOperandsDeleteFinished(true);\n      uninstallOperator();\n    }\n  };\n\n  const name = csv?.spec?.displayName || subscription?.spec?.name;\n  const csvName = csv?.metadata?.name;\n  const namespace =\n    subscription.metadata.namespace === DEFAULT_GLOBAL_OPERATOR_INSTALLATION_NAMESPACE\n      ? 'all-namespaces'\n      : subscription.metadata.namespace;\n  const uninstallMessage = csv?.metadata?.annotations?.[OLMAnnotation.UninstallMessage];\n  const showOperandsContent = !operandsLoaded || operands.length > 0;\n\n  const instructions = (\n    <>\n      <p>\n        {showOperandsContent && (\n          <>\n            {' '}\n            {t(\n              'olm~Select the checkbox below to also remove all Operands associated with this Operator.',\n            )}\n          </>\n        )}{' '}\n        {t(\n          'olm~If your Operator configured off-cluster resources, these will continue to run and require manual cleanup.',\n        )}\n      </p>\n      {removePlugins && (\n        <p>\n          {t('olm~The console plugin provided by this operator will be disabled and removed.', {\n            count: enabledPlugins.length,\n          })}\n        </p>\n      )}\n    </>\n  );\n\n  const operandsSection = operandsLoadedErrorMessage ? (\n    <OperandsLoadedErrorAlert operandsLoadedErrorMessage={operandsLoadedErrorMessage} />\n  ) : (\n    showOperandsContent && (\n      <>\n        <span className=\"co-operator-uninstall__operands-section\">\n          <h2>{t('olm~Operand instances')}</h2>\n          <OperandsTable\n            operands={operands}\n            loaded={operandsLoaded}\n            csvName={csvName}\n            cancel={cancel} // for breadcrumbs & cancel modal when clicking on operand links\n          />\n        </span>\n        <Checkbox\n          onChange={({ currentTarget }) => setDeleteOperands(currentTarget.checked)}\n          name=\"delete-all-operands\"\n          label={t('olm~Delete all operand instances for this operator')}\n          checked={deleteOperands}\n        />\n      </>\n    )\n  );\n\n  const operandDeletionAlert = operandDeletionErrors.length ? (\n    <OperandDeletionErrorAlert\n      operandDeletionErrors={operandDeletionErrors}\n      csvName={csvName}\n      cancel={cancel}\n    />\n  ) : operandDeletionVerificationError ? (\n    <OperandsLoadedErrorAlert\n      operandsLoadedErrorMessage={t('olm~Error listing operand to verify deletion')}\n    />\n  ) : (\n    <OperandDeletionSuccessAlert name={name} namespace={namespace} />\n  );\n\n  const results = (\n    <>\n      <UninstallAlert\n        errorMessage={\n          clusterServiceVersionExistsError ||\n          operatorUninstallErrorMessage ||\n          (operandDeletionErrors.length\n            ? t('olm~Operator could not be uninstalled due to error deleting its Operands')\n            : '')\n        }\n        name={name}\n        namespace={namespace}\n      />\n      {deleteOperands && operandDeletionAlert}\n    </>\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content co-catalog-install-modal\">\n      <ModalTitle className=\"modal-header\">\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> {t('olm~Uninstall Operator?')}\n      </ModalTitle>\n      <ModalBody>\n        {showInstructions && (\n          <>\n            <p>\n              <Trans t={t} ns=\"olm\">\n                Operator <strong>{{ name }}</strong> will be removed from{' '}\n                <strong>{{ namespace }}</strong>.\n              </Trans>\n            </p>\n            {!optedOut && <>{instructions}</>}\n            {uninstallMessage && (\n              <>\n                <h2>{t('olm~Message from Operator developer')}</h2>\n                <p>{uninstallMessage}</p>\n              </>\n            )}\n            {!optedOut && <>{operandsSection}</>}\n          </>\n        )}\n        {operandsDeleteInProgress && (\n          <OperandDeleteProgress total={operands.length} remaining={operandsRemaining} />\n        )}\n        {operatorUninstallInProgress && (\n          <div>\n            <p>{t('olm~Uninstalling the Operator...')}</p>\n          </div>\n        )}\n        {isSubmitFinished && results}\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitInProgress}\n        cancel={cancel}\n        submitDanger={!isSubmitFinished} // if submit finished show a non-danger 'OK'\n        submitText={t(isSubmitFinished ? 'olm~OK' : 'olm~Uninstall')}\n        submitDisabled={isSubmitInProgress}\n      />\n    </form>\n  );\n};\n\nconst OperandDeleteProgress: React.FC<{\n  total: number;\n  remaining: number;\n}> = ({ total, remaining }) => {\n  const { t } = useTranslation();\n  const progressLabel = t('olm~Remaining Operands: {{remaining}} of {{total}} ', {\n    remaining,\n    total,\n  });\n  return (\n    <div>\n      <Progress\n        value={total - remaining}\n        max={total}\n        valueText={progressLabel}\n        label={progressLabel}\n        title={t('olm~Cleaning up operand instances...')}\n        size={ProgressSize.lg}\n      />\n      <div className=\"co-alert--margin-top\">\n        <p>\n          {t(\n            'olm~The operands have been marked for deletion and are being removed. Canceling this operation will leave the Operator installed though its operand instances will continue to be deleted.',\n          )}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst OperandsLoadedErrorAlert: React.FC<{ operandsLoadedErrorMessage: string }> = ({\n  operandsLoadedErrorMessage,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant=\"warning\" className=\"co-alert\" title={t('olm~Cannot load Operands')} isInline>\n      <p>\n        {t(\n          'olm~There was an error loading operands for this operator. Operands will need to be deleted manually.',\n        )}\n      </p>\n      <p>{operandsLoadedErrorMessage}</p>\n    </Alert>\n  );\n};\n\nconst OperatorUninstallSuccessAlert: React.FC<{ name: string; namespace: string }> = ({\n  name,\n  namespace,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"success\"\n      className=\"co-alert\"\n      title={t('olm~Successfully uninstalled Operator')}\n      isInline\n    >\n      <p>\n        <Trans t={t} ns=\"olm\">\n          Operator <strong>{{ name }}</strong> successfully uninstalled from{' '}\n          <strong>{{ namespace }}</strong>.\n        </Trans>\n      </p>\n    </Alert>\n  );\n};\n\nconst OperatorUninstallErrorAlert: React.FC<{ errorMessage: string }> = ({ errorMessage }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"danger\"\n      className=\"co-alert\"\n      title={t('olm~Error uninstalling Operator')}\n      isInline\n    >\n      <p>\n        {t('olm~There was an error uninstalling the operator.')}\n        <br />\n        {errorMessage}\n      </p>\n    </Alert>\n  );\n};\n\nconst OperandDeletionErrorAlert: React.FC<{\n  operandDeletionErrors: OperandError[];\n  csvName: string;\n  cancel?: () => void;\n}> = ({ operandDeletionErrors, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant=\"danger\" className=\"co-alert\" title={t('olm~Error deleting Operands')} isInline>\n      <p>\n        {t(\n          'olm~There were errors deleting the following Operands, they will need to be deleted manually:',\n        )}\n      </p>\n      <OperandErrorList\n        operandErrors={operandDeletionErrors}\n        csvName={csvName}\n        cancel={cancel} // for breadcrumbs & cancel modal when clicking on operand links\n      />\n    </Alert>\n  );\n};\n\nconst OperandDeletionSuccessAlert: React.FC<{ name: string; namespace: string }> = ({\n  name,\n  namespace,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"success\"\n      className=\"co-alert\"\n      title={t('olm~Successfully deleted all Operand Instances')}\n      isInline\n    >\n      <p>\n        <Trans t={t} ns=\"olm\">\n          All Operand instances for Operator <strong>{{ name }}</strong> in{' '}\n          <strong>{{ namespace }}</strong> have been deleted.\n        </Trans>\n      </p>\n    </Alert>\n  );\n};\n\nconst UninstallAlert: React.FC<{ errorMessage: string; name: string; namespace: string }> = ({\n  errorMessage,\n  name,\n  namespace,\n}) =>\n  errorMessage ? (\n    <OperatorUninstallErrorAlert errorMessage={errorMessage} />\n  ) : (\n    <OperatorUninstallSuccessAlert name={name} namespace={namespace} />\n  );\n\nconst OperandsTable: React.FC<OperandsTableProps> = ({ operands, loaded, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <StatusBox\n      skeleton={<div className=\"loading-skeleton--table\" />}\n      data={operands}\n      loaded={loaded}\n    >\n      <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n        <thead className=\"pf-v5-c-table__thead\">\n          <tr className=\"pf-v5-c-table__tr\" key=\"operand-table-header-row\">\n            <th className=\"pf-m-width-35 pf-v5-c-table__th\">{t('olm~Name')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('olm~Kind')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('olm~Namespace')}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {operands\n            .sort((a, b) => a.metadata.name.localeCompare(b.metadata.name))\n            .map((operand) => (\n              <tr className=\"pf-v5-c-table__tr\" key={operand.metadata.uid}>\n                <td className=\"pf-v5-c-table__td\">\n                  <OperandLink obj={operand} csvName={csvName} onClick={cancel} />\n                </td>\n                <td\n                  className=\"pf-v5-c-table__td pf-m-break-word\"\n                  data-test-operand-kind={operand.kind}\n                >\n                  {operand.kind}\n                </td>\n                <td className=\"pf-v5-c-table__td\">\n                  {operand.metadata.namespace ? (\n                    <ResourceLink\n                      kind=\"Namespace\"\n                      name={operand.metadata.namespace}\n                      onClick={cancel}\n                    />\n                  ) : (\n                    '-'\n                  )}\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </StatusBox>\n  );\n};\n\nconst OperandErrorList: React.FC<OperandErrorListProps> = ({ operandErrors, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <ul className=\"co-operator-uninstall-alert__list\">\n      {_.map(operandErrors, (operandError) => (\n        <li\n          key={operandError.operand.metadata.uid}\n          className=\"pf-v5-c-list pf-m-plain co-operator-uninstall-alert__list-item\"\n        >\n          <OperandLink obj={operandError.operand} csvName={csvName} onClick={cancel} />{' '}\n          {operandError.operand.kind}\n          {'  '}\n          {t('olm~Error: {{error}}', {\n            error: operandError.errorMessage,\n          })}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport const createUninstallOperatorModal = createModalLauncher(UninstallOperatorModal);\n\nexport type UninstallOperatorModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sKill: (kind: K8sKind, resource: K8sResourceKind, options: any, json: any) => Promise<any>;\n  k8sGet: (kind: K8sKind, name: string, namespace: string) => Promise<K8sResourceKind>;\n  k8sPatch: (\n    kind: K8sKind,\n    resource: K8sResourceKind,\n    data: { op: string; path: string; value: any }[],\n  ) => Promise<any>;\n  subscription: SubscriptionKind | K8sResourceKind;\n  csv?: ClusterServiceVersionKind;\n  blocking?: boolean;\n};\n\ntype OperandsTableProps = {\n  operands: K8sResourceCommon[];\n  loaded: boolean;\n  csvName: string;\n  cancel?: () => void;\n};\n\ntype OperandError = { operand: K8sResourceCommon; errorMessage: string };\ntype OperandErrorListProps = {\n  operandErrors?: OperandError[];\n  csvName: string;\n  cancel?: () => void;\n};\n\nUninstallOperatorModal.displayName = 'UninstallOperatorModal';\n","import * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { safeDump } from 'js-yaml';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalFooter,\n} from '@console/internal/components/factory/modal';\nimport { ResourceLink, CopyToClipboard } from '@console/internal/components/utils';\nimport { StepResource } from '../../types';\nimport { referenceForStepResource } from '../index';\n\nconst InstallPlanPreview: React.FC<InstallPlanPreviewModalProps> = ({ cancel, stepResource }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>\n        {t('olm~InstallPlan Preview')}{' '}\n        <ResourceLink\n          linkTo={false}\n          name={stepResource.name}\n          kind={referenceForStepResource(stepResource)}\n        />\n      </ModalTitle>\n      <ModalBody>\n        <CopyToClipboard value={safeDump(JSON.parse(stepResource.manifest))} />\n      </ModalBody>\n      <ModalFooter inProgress={false}>\n        <ActionGroup className=\"pf-v5-c-form pf-v5-c-form__actions--right pf-v5-c-form__group--no-top-margin\">\n          <Button type=\"button\" variant=\"secondary\" onClick={() => cancel()}>\n            {t('public~OK')}\n          </Button>\n        </ActionGroup>\n      </ModalFooter>\n    </div>\n  );\n};\n\nexport const installPlanPreviewModal = createModalLauncher<InstallPlanPreviewModalProps>(\n  InstallPlanPreview,\n);\n\nexport type InstallPlanPreviewModalProps = {\n  stepResource: StepResource;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nInstallPlanPreview.displayName = 'InstallPlanPreview';\n","import { useCallback } from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as UIActions from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\n\nexport const useDeprecatedOperatorWarnings = () => {\n  const dispatch = useDispatch();\n\n  const deprecatedPackage = useSelector((state: RootState) =>\n    state.UI.getIn(['deprecatedOperator', 'package']),\n  );\n  const deprecatedChannel = useSelector((state: RootState) =>\n    state.UI.getIn(['deprecatedOperator', 'channel']),\n  );\n  const deprecatedVersion = useSelector((state: RootState) =>\n    state.UI.getIn(['deprecatedOperator', 'version']),\n  );\n\n  const setDeprecatedPackage = useCallback(\n    (value: DeprecatedOperatorWarning) => dispatch(UIActions.setDeprecatedPackage(value)),\n    [dispatch],\n  );\n\n  const setDeprecatedChannel = useCallback(\n    (value: DeprecatedOperatorWarning) => dispatch(UIActions.setDeprecatedChannel(value)),\n    [dispatch],\n  );\n\n  const setDeprecatedVersion = useCallback(\n    (value: DeprecatedOperatorWarning) => dispatch(UIActions.setDeprecatedVersion(value)),\n    [dispatch],\n  );\n\n  return {\n    deprecatedPackage,\n    setDeprecatedPackage,\n    deprecatedChannel,\n    setDeprecatedChannel,\n    deprecatedVersion,\n    setDeprecatedVersion,\n  };\n};\n","import * as React from 'react';\nimport { consoleFetchJSON as coFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport const useOperands = (\n  operatorName: string,\n  operatorNamespace: string,\n): [K8sResourceCommon[], boolean, string] => {\n  const [operands, setOperands] = React.useState<K8sResourceCommon[]>([]);\n  const [loaded, setLoaded] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n\n  React.useEffect(() => {\n    const url = `${window.SERVER_FLAGS.basePath}api/list-operands/?name=${operatorName}&namespace=${operatorNamespace}`;\n    coFetchJSON(url)\n      .then((data) => {\n        setOperands(data?.items ?? []);\n        setLoaded(true);\n        setErrorMessage('');\n      })\n      .catch((err) => {\n        setOperands([]);\n        setLoaded(true);\n        setErrorMessage(\n          `Error loading Operands for ${operatorName} in ${operatorNamespace}: ${err}`,\n        );\n      });\n  }, [operatorName, operatorNamespace]);\n\n  return [operands, loaded, errorMessage];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { RadioInput } from '@console/internal/components/radio';\nimport {\n  K8sKind,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { SubscriptionModel, InstallPlanModel } from '../../models';\nimport { SubscriptionKind, InstallPlanApproval, InstallPlanKind } from '../../types';\n\nconst getApprovalStrategy = (obj: InstallPlanKind | SubscriptionKind): InstallPlanApproval =>\n  (obj as SubscriptionKind)?.spec?.installPlanApproval ??\n  (obj as InstallPlanKind)?.spec?.approval ??\n  InstallPlanApproval.Automatic;\n\nexport const InstallPlanApprovalModal: React.FC<InstallPlanApprovalModalProps> = ({\n  cancel,\n  close,\n  k8sUpdate,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n  const [selectedApprovalStrategy, setSelectedApprovalStrategy] = React.useState(\n    getApprovalStrategy(obj),\n  );\n  const submit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>): void => {\n      event.preventDefault();\n      const updatedObj = _.cloneDeep(obj);\n      if (referenceFor(updatedObj) === referenceForModel(SubscriptionModel)) {\n        (updatedObj as SubscriptionKind).spec.installPlanApproval = selectedApprovalStrategy;\n      } else if (referenceFor(updatedObj) === referenceForModel(InstallPlanModel)) {\n        (updatedObj as InstallPlanKind).spec.approval = selectedApprovalStrategy;\n      }\n      handlePromise(k8sUpdate(modelFor(referenceFor(obj)), updatedObj))\n        .then(() => close?.())\n        .catch(_.noop);\n    },\n    [close, handlePromise, k8sUpdate, obj, selectedApprovalStrategy],\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle className=\"modal-header\">{t('olm~Change update approval strategy')}</ModalTitle>\n      <ModalBody>\n        <div className=\"co-m-form-row\">\n          <p>{t('olm~What strategy is used for approving updates?')}</p>\n        </div>\n        <div className=\"co-m-form-row row\">\n          <div className=\"col-sm-12\">\n            <RadioInput\n              onChange={(e) => setSelectedApprovalStrategy(e.target.value)}\n              value={InstallPlanApproval.Automatic}\n              checked={selectedApprovalStrategy === InstallPlanApproval.Automatic}\n              title={t(`olm~Automatic`)}\n              subTitle={`(${t('public~default')})`}\n            >\n              <div className=\"co-m-radio-desc\">\n                <p className=\"text-muted\">\n                  {t('olm~New updates will be installed as soon as they become available.')}\n                </p>\n              </div>\n            </RadioInput>\n          </div>\n          <div className=\"col-sm-12\">\n            <RadioInput\n              onChange={(e) => setSelectedApprovalStrategy(e.target.value)}\n              value={InstallPlanApproval.Manual}\n              checked={selectedApprovalStrategy === InstallPlanApproval.Manual}\n              title={t(`olm~Manual`)}\n            >\n              <div className=\"co-m-radio-desc\">\n                <p className=\"text-muted\">\n                  {t('olm~New updates need to be manually approved before installation begins.')}\n                </p>\n              </div>\n            </RadioInput>\n          </div>\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={inProgress}\n        errorMessage={errorMessage}\n        cancel={cancel}\n        submitText={t('public~Save')}\n        submitDisabled={getApprovalStrategy(obj) === selectedApprovalStrategy}\n      />\n    </form>\n  );\n};\n\nexport const createInstallPlanApprovalModal = createModalLauncher<InstallPlanApprovalModalProps>(\n  InstallPlanApprovalModal,\n);\n\nexport type InstallPlanApprovalModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  obj: InstallPlanKind | SubscriptionKind;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { RadioInput } from '@console/internal/components/radio';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { SubscriptionModel, ClusterServiceVersionModel } from '../../models';\nimport { SubscriptionKind, PackageManifestKind } from '../../types';\nimport { DeprecatedOperatorWarningIcon } from '../deprecated-operator-warnings/deprecated-operator-warnings';\n\nexport const SubscriptionChannelModal: React.FC<SubscriptionChannelModalProps> = ({\n  cancel,\n  close,\n  k8sUpdate,\n  pkg,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const currentChannel = subscription?.spec?.channel ?? pkg?.status?.channels?.[0]?.name;\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n  const [selectedChannel, setSelectedChannel] = React.useState(currentChannel);\n\n  const submit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>): void => {\n      event.preventDefault();\n      handlePromise(\n        k8sUpdate(SubscriptionModel, {\n          ...subscription,\n          spec: {\n            ...subscription.spec,\n            channel: selectedChannel,\n          },\n        }),\n      )\n        .then(() => close?.())\n        .catch(() => {});\n    },\n    [close, handlePromise, k8sUpdate, selectedChannel, subscription],\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle className=\"modal-header\">\n        {t('olm~Change Subscription update channel')}\n      </ModalTitle>\n      <ModalBody>\n        <div className=\"co-m-form-row\">\n          <p>{t('olm~Which channel is used to receive updates?')}</p>\n        </div>\n        <div className=\"co-m-form-row row\">\n          {pkg?.status?.channels?.map?.((channel) => (\n            <div key={channel.name} className=\"col-sm-12\">\n              <RadioInput\n                onChange={(e) => setSelectedChannel(e.target.value)}\n                value={channel.name}\n                checked={selectedChannel === channel.name}\n                title={channel.name}\n                subTitle={\n                  <ResourceLink\n                    linkTo={false}\n                    name={channel.currentCSV}\n                    title={channel.currentCSV}\n                    kind={referenceForModel(ClusterServiceVersionModel)}\n                  >\n                    {channel?.deprecation ? (\n                      <DeprecatedOperatorWarningIcon deprecation={channel?.deprecation} />\n                    ) : null}\n                  </ResourceLink>\n                }\n              />\n            </div>\n          ))}\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={inProgress}\n        errorMessage={errorMessage}\n        cancel={cancel}\n        submitText={t('public~Save')}\n        submitDisabled={selectedChannel === currentChannel}\n      />\n    </form>\n  );\n};\n\nexport const createSubscriptionChannelModal = createModalLauncher<SubscriptionChannelModalProps>(\n  SubscriptionChannelModal,\n);\n\nexport type SubscriptionChannelModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  subscription: SubscriptionKind;\n  pkg: PackageManifestKind;\n};\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nexport const FormAlert = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (\n    // There are currently no associated styles with the pf-v5-c-form_alert class.\n    // Therefore, it does not exist in react-styles\n    React.createElement(\"div\", Object.assign({}, props, { className: css(`${styles.form}__alert`, className) }), children));\n};\nFormAlert.displayName = 'FormAlert';\n//# sourceMappingURL=FormAlert.js.map","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\n\nexport const useActiveNamespace = (): string => {\n  return useSelector(({ UI }) => UI.get('activeNamespace'));\n};\n","import { getReferenceForModel } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { resourceObjPath, resourcePath } from '@console/internal/components/utils';\nimport { ALL_NAMESPACES_KEY, useActiveNamespace } from '@console/shared';\nimport { ClusterServiceVersionModel } from '../models';\nimport { ClusterServiceVersionKind } from '../types';\n\nexport const useClusterServiceVersionPath = (csv: ClusterServiceVersionKind): string => {\n  const [activeNamespace] = useActiveNamespace();\n  const csvReference = getReferenceForModel(ClusterServiceVersionModel);\n  // Don't link to csv in 'openshift' namespace when copiedCSVsDisabled and in another namespace\n  if (\n    window.SERVER_FLAGS.copiedCSVsDisabled &&\n    csv.metadata.namespace === 'openshift' && // Is global csv\n    activeNamespace !== ALL_NAMESPACES_KEY\n  ) {\n    return resourcePath(csvReference, csv.metadata.name, activeNamespace);\n  }\n  return resourceObjPath(csv, csvReference);\n};\n","import * as React from 'react';\nimport {\n  Alert,\n  MenuToggle,\n  MenuToggleElement,\n  Select,\n  SelectList,\n  SelectOption,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { setQueryArgument } from '@console/internal/components/utils';\nimport { alphanumericCompare } from '@console/shared';\nimport { PackageManifestKind } from '../../types';\nimport { DeprecatedOperatorWarningIcon } from '../deprecated-operator-warnings/deprecated-operator-warnings';\nimport { useDeprecatedOperatorWarnings } from '../deprecated-operator-warnings/use-deprecated-operator-warnings';\n\nexport const OperatorChannelSelect: React.FC<OperatorChannelSelectProps> = ({\n  packageManifest,\n  selectedUpdateChannel,\n  setUpdateChannel,\n  setUpdateVersion,\n}) => {\n  const { t } = useTranslation();\n  const channels = React.useMemo(() => packageManifest?.status.channels ?? [], [packageManifest]);\n  const [isChannelSelectOpen, setIsChannelSelectOpen] = React.useState(false);\n  const { setDeprecatedChannel } = useDeprecatedOperatorWarnings();\n  channels.sort((a, b) => -alphanumericCompare(a.name, b.name));\n\n  const getChannelLabel = (ch) => (\n    <>\n      {ch.name}{' '}\n      {ch?.deprecation && (\n        <DeprecatedOperatorWarningIcon\n          deprecation={ch?.deprecation}\n          dataTest=\"deprecated-operator-warning-channel-icon\"\n        />\n      )}\n    </>\n  );\n\n  const channelSelectOptions = channels.map((ch) => (\n    <SelectOption\n      key={ch.name}\n      id={ch.name}\n      value={ch.name}\n      data-test={`channel-option-${ch.name}`}\n    >\n      {getChannelLabel(ch)}\n    </SelectOption>\n  ));\n\n  React.useEffect(() => {\n    setQueryArgument('channel', selectedUpdateChannel);\n    setDeprecatedChannel(\n      _.pick(\n        channels.find((f) => f.deprecation && f.name === selectedUpdateChannel),\n        'deprecation',\n      ),\n    );\n  }, [selectedUpdateChannel, channels, setDeprecatedChannel]);\n\n  return (\n    <>\n      <Select\n        toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n          <MenuToggle\n            ref={toggleRef}\n            onClick={(open) => setIsChannelSelectOpen(open)}\n            isExpanded={isChannelSelectOpen}\n            isDisabled={!packageManifest}\n            isFullWidth\n            aria-label={t('olm~Select a channel')}\n            className=\"co-operator-channel__select\"\n            data-test=\"operator-channel-select-toggle\"\n          >\n            {getChannelLabel(channels.find((f) => f.name === selectedUpdateChannel))}\n          </MenuToggle>\n        )}\n        onSelect={(event: React.MouseEvent | React.ChangeEvent, value: string) => {\n          setUpdateChannel(value);\n          setIsChannelSelectOpen(false);\n          setUpdateVersion('');\n        }}\n        selected={selectedUpdateChannel || '-'}\n        onOpenChange={(isOpen) => setIsChannelSelectOpen(isOpen)}\n        isOpen={isChannelSelectOpen}\n      >\n        <SelectList>{channelSelectOptions}</SelectList>\n      </Select>\n    </>\n  );\n};\n\ntype OperatorChannelSelectProps = {\n  packageManifest: PackageManifestKind;\n  selectedUpdateChannel: string;\n  setUpdateChannel: (updateChannel: string) => void;\n  setUpdateVersion: (updateVersion: string) => void;\n};\n\nexport const OperatorVersionSelect: React.FC<OperatorVersionSelectProps> = ({\n  packageManifest,\n  selectedUpdateChannel,\n  updateVersion,\n  setUpdateVersion,\n  showVersionAlert = false,\n}) => {\n  const { t } = useTranslation();\n  const { setDeprecatedVersion } = useDeprecatedOperatorWarnings();\n  const [isVersionSelectOpen, setIsVersionSelectOpen] = React.useState(false);\n  const [defaultVersionForChannel, setDefaultVersionForChannel] = React.useState('');\n  const { channels = [] } = packageManifest?.status ?? {};\n\n  React.useEffect(() => {\n    setDefaultVersionForChannel(\n      channels.find((ch) => ch.name === selectedUpdateChannel)?.currentCSVDesc?.version ?? '-',\n    );\n  }, [channels, selectedUpdateChannel]);\n\n  const selectedUpdateVersion = updateVersion || defaultVersionForChannel;\n\n  // Return all versions associated with selectedUpdateChannel\n  const selectedChannelVersions = React.useMemo(\n    () => channels.find((ch) => ch.name === selectedUpdateChannel)?.entries ?? [],\n    [channels, selectedUpdateChannel],\n  );\n\n  const getVersionLabel = (v) => (\n    <>\n      {v?.version}{' '}\n      {v?.deprecation && (\n        <DeprecatedOperatorWarningIcon\n          deprecation={v?.deprecation}\n          dataTest=\"deprecated-operator-warning-version-icon\"\n        />\n      )}\n    </>\n  );\n\n  const versionSelectOptions = selectedChannelVersions.map((v) => (\n    <SelectOption\n      key={v.version}\n      id={v.version}\n      value={v.version}\n      data-test={`version-option-${v.name}`}\n    >\n      {getVersionLabel(v)}\n    </SelectOption>\n  ));\n\n  React.useEffect(() => {\n    setQueryArgument('version', selectedUpdateVersion);\n    setDeprecatedVersion(\n      _.pick(\n        selectedChannelVersions.find((f) => f.deprecation && f.version === selectedUpdateVersion),\n        'deprecation',\n      ),\n    );\n  }, [selectedUpdateVersion, selectedChannelVersions, setDeprecatedVersion]);\n\n  return (\n    <>\n      <Select\n        toggle={(toggleRef: React.Ref<MenuToggleElement>) => (\n          <MenuToggle\n            ref={toggleRef}\n            onClick={(open) => setIsVersionSelectOpen(open)}\n            isExpanded={isVersionSelectOpen}\n            isDisabled={!packageManifest}\n            isFullWidth\n            aria-label={t('olm~Select a version')}\n            className=\"co-operator-version__select\"\n            data-test=\"operator-version-select-toggle\"\n          >\n            {getVersionLabel(\n              selectedChannelVersions.find((v) => v.version === selectedUpdateVersion),\n            )}\n          </MenuToggle>\n        )}\n        onSelect={(event: React.MouseEvent | React.ChangeEvent, value: string) => {\n          setUpdateVersion(value);\n          setIsVersionSelectOpen(false);\n        }}\n        selected={selectedUpdateVersion}\n        onOpenChange={(isOpen) => setIsVersionSelectOpen(isOpen)}\n        isOpen={isVersionSelectOpen}\n      >\n        <SelectList>{versionSelectOptions}</SelectList>\n      </Select>\n\n      {showVersionAlert && selectedUpdateVersion !== defaultVersionForChannel && (\n        <Alert\n          variant=\"info\"\n          isInline\n          className=\"co-alert co-alert--margin-top co-alert__update-approval\"\n          title={t(\n            'olm~Manual update approval is required when not installing the latest version for the selected channel.',\n          )}\n        />\n      )}\n    </>\n  );\n};\n\ntype OperatorVersionSelectProps = {\n  packageManifest: PackageManifestKind;\n  selectedUpdateChannel: string;\n  updateVersion: string;\n  setUpdateVersion: (updateVersion: string) => void;\n  showVersionAlert?: boolean;\n};\n","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_blue_200 = {\n  \"name\": \"--pf-v5-chart-color-blue-200\",\n  \"value\": \"#519de9\",\n  \"var\": \"var(--pf-v5-chart-color-blue-200, #519de9)\"\n};\nexports[\"default\"] = exports.chart_color_blue_200;","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FieldLevelHelp } from '@console/internal/components/utils';\nimport {\n  ConsolePluginRadioInputs,\n  ConsolePluginWarning,\n} from '@console/shared/src/components/utils';\nimport { isCatalogSourceTrusted } from '../utils';\n\nexport const ConsolePluginFormGroup: React.FC<ConsolePluginFormGroupProps> = ({\n  catalogSource,\n  csvPlugins,\n  enabledPlugins,\n  setPluginEnabled,\n}) => {\n  const { t } = useTranslation();\n  const csvPluginsCount = csvPlugins.length;\n\n  return (\n    <div className=\"form-group\">\n      <fieldset>\n        <label className=\"co-required\">{t('olm~Console plugin', { count: csvPluginsCount })}</label>\n        <FieldLevelHelp>\n          {t(\n            'olm~This operator includes a console plugin which provides a custom interface that can be included in the console. The console plugin will prompt for the console to be refreshed once it has been enabled. Make sure you trust this console plugin before enabling.',\n          )}\n        </FieldLevelHelp>\n        {csvPlugins.map((plugin) => (\n          <fieldset key={plugin}>\n            <div>\n              {csvPluginsCount > 1 && (\n                <legend className=\"co-legend co-legend--nested text-muted\">{plugin}</legend>\n              )}\n              <ConsolePluginRadioInputs\n                name={plugin}\n                enabled={enabledPlugins.includes(plugin)}\n                onChange={(enabled: boolean) => setPluginEnabled(plugin, enabled)}\n              />\n            </div>\n          </fieldset>\n        ))}\n        <ConsolePluginWarning\n          // always show the warning for untrusted plugins set to enabled\n          previouslyEnabled={false}\n          enabled={enabledPlugins?.length > 0}\n          trusted={isCatalogSourceTrusted(catalogSource)}\n        />\n      </fieldset>\n    </div>\n  );\n};\n\ntype ConsolePluginFormGroupProps = {\n  catalogSource: string;\n  csvPlugins: string[];\n  enabledPlugins: string[];\n  setPluginEnabled: (plugin: string, enabled: boolean) => void;\n};\n","import styles from '@patternfly/react-styles/css/components/Table/table.mjs';\nexport const breakWord = () => ({\n    className: styles.modifiers.breakWord\n});\nexport const fitContent = () => ({\n    className: styles.modifiers.fitContent\n});\nexport const nowrap = () => ({\n    className: styles.modifiers.nowrap\n});\nexport const truncate = () => ({\n    className: styles.modifiers.truncate\n});\nexport const wrappable = () => ({\n    className: styles.modifiers.wrap\n});\n//# sourceMappingURL=wrappable.js.map"],"sourceRoot":""}