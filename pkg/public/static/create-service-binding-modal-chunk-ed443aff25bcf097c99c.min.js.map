{"version":3,"sources":["webpack:///./packages/console-app/src/components/modals/service-binding/CreateServiceBindingForm.tsx","webpack:///./packages/console-app/src/components/modals/service-binding/BindableServices.tsx","webpack:///./packages/console-app/src/components/modals/service-binding/bindable-services-utils.ts","webpack:///./packages/console-app/src/components/modals/service-binding/service-binding-modal-launcher-utils.ts","webpack:///./packages/console-app/src/components/modals/service-binding/servicebinding-validation-utils.ts","webpack:///./packages/topology/src/operators/actions/serviceBindings.ts","webpack:///./packages/console-app/src/components/modals/service-binding/ServiceBindingModalLauncher.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/topology/src/operators/components/const.ts"],"names":["source","target","handleSubmit","isSubmitting","cancel","status","errors","t","sourceName","metadata","name","targetName","title","ns","onSubmit","className","headingLevel","size","fullWidth","type","text","label","required","resource","submitText","submitDisabled","inProgress","errorMessage","submitError","setFieldValue","setFieldTouched","setStatus","resourceAlert","setResourceAlert","group","version","kind","watchedResources","csvs","isList","namespace","optional","csvResources","onServiceChange","selectedValue","obj","subscriberAvailable","dropdownResources","fieldId","isRequired","variant","isInline","resources","dataSelector","placeholder","showBadge","autocompleteFilter","strText","item","props","onChange","autoSelect","disabled","onLoad","resourceList","getBindableResources","bindableRes","operatorBackedServiceKindMap","data","Object","keys","map","obs","obsResourceKind","ownedResource","spec","customresourcedefinitions","owned","find","o","substring","indexOf","length","getGroupVersionKindFromOperatorBackedServiceKindMap","prop","getOperatorBackedServiceResources","key","checkExistingServiceBinding","bindings","bindableService","model","binding","services","targetService","application","plural","sourceApplicationExists","service","serviceBindingValidationSchema","shape","createServiceBinding","serviceBindingName","Promise","reject","sourceGroup","apiVersion","targetGroup","serviceBinding","detectBindingResources","createServiceBindingConnection","sourceResource","getData","targetResource","then","getCreateConnector","createHints","includes","getType","createServiceBindingModal","fireTelemetryEvent","activePerspective","perspectiveExtensions","initialValues","abbr","toLowerCase","initialStatus","error","validationSchema","values","actions","existingServiceBinding","close","project","perspective","perspectiveData","properties","id","redirectURL","importRedirectURL","push","handleRedirect","message","formikProps","flexStyle","display","flex","flexDirection","margin","subTitle","children","flexLayout","extraMargin","dataTest","style","TYPE_OPERATOR_BACKED_SERVICE","OPERATOR_GROUP_WIDTH","OPERATOR_GROUP_HEIGHT","OPERATOR_GROUP_PADDING"],"mappings":"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","file":"create-service-binding-modal-chunk-ed443aff25bcf097c99c.min.js","sourcesContent":["import * as React from 'react';\nimport { TextInputTypes, Title } from '@patternfly/react-core';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceBindingDeprecationAlertForModals } from '@console/service-binding-plugin/src/components/service-binding-utils/ServiceBindingAlerts';\nimport { InputField } from '@console/shared';\nimport BindableServices from './BindableServices';\n\nexport type CreateServiceBindingFormProps = {\n  source: K8sResourceKind;\n  target?: K8sResourceKind;\n  cancel?: () => void;\n};\n\nconst CreateServiceBindingForm: React.FC<\n  FormikProps<FormikValues> & CreateServiceBindingFormProps\n> = ({ source, target, handleSubmit, isSubmitting, cancel, status, errors }) => {\n  const { t } = useTranslation();\n\n  const sourceName = source.metadata.name;\n  const targetName = target?.metadata?.name;\n\n  const title = target ? (\n    <Trans t={t} ns=\"console-app\">\n      Connect <b>{{ sourceName }}</b> to service <b>{{ targetName }}</b>.\n    </Trans>\n  ) : (\n    t('console-app~Select a service to connect to.')\n  );\n\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-content\">\n      <ModalTitle>{t('console-app~Create Service Binding')}</ModalTitle>\n      <ModalBody>\n        <ServiceBindingDeprecationAlertForModals />\n        <br />\n        <Title headingLevel=\"h2\" size=\"md\" className=\"co-m-form-row\">\n          {title}\n        </Title>\n        <FormSection fullWidth>\n          <InputField\n            type={TextInputTypes.text}\n            name=\"name\"\n            label={t('console-app~Name')}\n            required\n          />\n          {!target && <BindableServices resource={source} />}\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText={t('console-app~Create')}\n        submitDisabled={isSubmitting || !_.isEmpty(errors)}\n        cancel={cancel}\n        inProgress={isSubmitting}\n        errorMessage={status?.submitError}\n      />\n    </form>\n  );\n};\n\nexport default CreateServiceBindingForm;\n","import * as React from 'react';\nimport { FormGroup, Alert } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { referenceForGroupVersionKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  ClusterServiceVersionKind,\n  ClusterServiceVersionModel,\n} from '@console/operator-lifecycle-manager/src';\nimport { ResourceDropdownField, getFieldId } from '@console/shared';\nimport { getBindableResources } from './bindable-services-utils';\n\nexport type OwnedResourceType = {\n  displayName: string;\n  kind: string;\n  name: string;\n  version: string;\n};\n\ntype BindableServiceProps = {\n  resource: K8sResourceKind;\n};\n\nconst BindableServices: React.FC<BindableServiceProps> = ({ resource }) => {\n  const { t } = useTranslation();\n  const { setFieldValue, setFieldTouched, setStatus } = useFormikContext<FormikValues>();\n  const [resourceAlert, setResourceAlert] = React.useState(false);\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const { group, version, kind } = getGroupVersionKindForModel(ClusterServiceVersionModel);\n  const watchedResources = {\n    csvs: {\n      isList: true,\n      kind: referenceForGroupVersionKind(group)(version)(kind),\n      namespace: resource.metadata.namespace,\n      optional: true,\n    },\n  };\n  const csvResources = useK8sWatchResources<{ csvs: ClusterServiceVersionKind[] }>(\n    watchedResources,\n  );\n  const onServiceChange = React.useCallback(\n    (selectedValue, name, obj) => {\n      if (!_.isEmpty(obj)) {\n        setFieldTouched('service', true);\n        setFieldValue('bindableService', obj);\n        setStatus({ submitError: null });\n      }\n    },\n    [setFieldTouched, setFieldValue, setStatus],\n  );\n\n  React.useEffect(() => {\n    setStatus({ subscriberAvailable: !resourceAlert });\n  }, [resourceAlert, setStatus]);\n\n  const handleOnLoad = (resourceList: { [key: string]: string }) => {\n    setResourceAlert(_.isEmpty(resourceList));\n  };\n\n  const dropdownResources = React.useMemo(\n    () => getBindableResources(resource.metadata.namespace, csvResources?.csvs),\n    [csvResources, resource.metadata.namespace],\n  );\n  return (\n    <FormGroup\n      fieldId={getFieldId('bindable-service', 'dropdown')}\n      label={t('console-app~Bindable service')}\n      isRequired\n    >\n      {resourceAlert && (\n        <>\n          <Alert variant=\"custom\" title={t('console-app~No bindable services available')} isInline>\n            {t('console-app~To create a Service binding, first create a bindable service.')}\n          </Alert>\n          &nbsp;\n        </>\n      )}\n      <ResourceDropdownField\n        name=\"service\"\n        resources={dropdownResources as FirehoseResource[]}\n        dataSelector={['metadata', 'name']}\n        fullWidth\n        required\n        placeholder={t('console-app~Select Service')}\n        showBadge\n        autocompleteFilter={autocompleteFilter}\n        onChange={onServiceChange}\n        autoSelect\n        disabled={resourceAlert}\n        onLoad={handleOnLoad}\n      />\n    </FormGroup>\n  );\n};\n\nexport default BindableServices;\n","import * as _ from 'lodash';\nimport { getBindableServiceResources } from '@console/dev-console/src/components/topology/bindable-services/bindable-service-resources';\nimport { referenceForGroupVersionKind } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager/src';\nimport { getOperatorBackedServiceKindMap } from '@console/shared/src';\n\nexport type OwnedResourceType = {\n  displayName: string;\n  kind: string;\n  name: string;\n  version: string;\n};\n\nexport type ClusterServiceVersionDataType = {\n  data: ClusterServiceVersionKind[];\n  loaded: boolean;\n  loadError: string;\n};\n\nexport const getGroupVersionKindFromOperatorBackedServiceKindMap = (\n  obj: ClusterServiceVersionKind,\n  obsResourceKind: string,\n): { group: string; version: string; kind: string } => {\n  const ownedResource: OwnedResourceType = obj.spec?.customresourcedefinitions?.owned?.find(\n    (o) => o.kind === obsResourceKind,\n  );\n  const apiGroup = ownedResource.name.substring(\n    ownedResource.name.indexOf('.') + 1,\n    ownedResource.name.length,\n  );\n  return { group: apiGroup, version: ownedResource.version, kind: ownedResource.kind };\n};\n\nexport const getOperatorBackedServiceResources = (\n  namespace: string,\n  csvs: ClusterServiceVersionDataType,\n) => {\n  const operatorBackedServiceKindMap = getOperatorBackedServiceKindMap(csvs?.data);\n  const obsResources = Object.keys(operatorBackedServiceKindMap).map((obs: string) => {\n    const { group, version, kind } = getGroupVersionKindFromOperatorBackedServiceKindMap(\n      operatorBackedServiceKindMap[obs],\n      obs,\n    );\n    return (\n      kind !== 'ServiceBinding' && {\n        isList: true,\n        kind: referenceForGroupVersionKind(group)(version)(kind),\n        namespace,\n        optional: true,\n        prop: obs,\n      }\n    );\n  });\n  return obsResources;\n};\n\nexport const getBindableResources = (namespace: string, csvs: ClusterServiceVersionDataType) => {\n  const bindableRes = _.omit(\n    {\n      ...getBindableServiceResources(namespace),\n      ...getOperatorBackedServiceResources(namespace, csvs),\n    },\n    'serviceBindingRequests',\n  );\n\n  const res = Object.keys(bindableRes).map((key) => bindableRes[key]);\n  return res;\n};\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\ntype BindingApplicationResource = {\n  name: string;\n  resource: string;\n};\n\ntype BindableService = {\n  kind: string;\n  name: string;\n};\n\nexport const targetServiceExists = (services: BindableService[], targetService: K8sResourceKind) =>\n  services.find(\n    (service) =>\n      service.kind === targetService.kind && service.name === targetService.metadata.name,\n  );\n\nexport const sourceApplicationExists = (\n  application: BindingApplicationResource,\n  resource: K8sResourceKind,\n  model: K8sKind,\n) => application?.name === resource.metadata.name && application?.resource === model.plural;\n\nexport const checkExistingServiceBinding = (\n  bindings: K8sResourceKind[],\n  resource: K8sResourceKind,\n  bindableService: K8sResourceKind,\n  model: K8sKind,\n) =>\n  bindings.find(\n    (binding) =>\n      sourceApplicationExists(binding.spec.application, resource, model) &&\n      Object.keys(targetServiceExists(binding.spec.services, bindableService) ?? {}).length !== 0,\n  );\n","import { TFunction } from 'i18next';\nimport * as yup from 'yup';\n\nexport const serviceBindingValidationSchema = (t: TFunction) =>\n  yup.object().shape({\n    name: yup.string().required(t('console-app~Required')),\n  });\n","import { Node } from '@patternfly/react-topology';\nimport * as _ from 'lodash';\nimport { serviceBindingModal } from '@console/app/src/components/modals/service-binding';\nimport {\n  k8sCreate,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  apiVersionForModel,\n} from '@console/internal/module/k8s';\nimport { ServiceBindingModel } from '@console/service-binding-plugin/src/models';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from '../components/const';\n\nexport const createServiceBinding = (\n  source: K8sResourceKind,\n  target: K8sResourceKind,\n  serviceBindingName: string,\n): Promise<K8sResourceKind> => {\n  if (!source || !target || source === target) {\n    return Promise.reject();\n  }\n\n  const targetName = target.metadata.name;\n  const { namespace, name: sourceName } = source.metadata;\n  const sourceGroup = _.split(source.apiVersion, '/');\n  const targetGroup = _.split(target.apiVersion, '/');\n\n  const serviceBinding = {\n    apiVersion: apiVersionForModel(ServiceBindingModel),\n    kind: ServiceBindingModel.kind,\n    metadata: {\n      name: serviceBindingName,\n      namespace,\n    },\n    spec: {\n      application: {\n        name: sourceName,\n        group: sourceGroup[0],\n        version: sourceGroup[1],\n        resource: modelFor(referenceFor(source)).plural,\n      },\n      services: [\n        {\n          group: targetGroup[0],\n          version: targetGroup[1],\n          kind: target.kind,\n          name: targetName,\n        },\n      ],\n      detectBindingResources: true,\n    },\n  };\n\n  return k8sCreate(ServiceBindingModel, serviceBinding);\n};\n\nconst createServiceBindingConnection = (source: Node, target: Node) => {\n  const sourceResource = source.getData().resource || source.getData().resources?.obj;\n  const targetResource = target.getData().resource || target.getData().resources?.obj;\n  return serviceBindingModal({\n    model: modelFor(referenceFor(sourceResource)),\n    source: sourceResource,\n    target: targetResource,\n  }).then(() => null);\n};\n\nexport const getCreateConnector = (createHints: string[], source: Node, target: Node) => {\n  if (\n    createHints &&\n    createHints.includes('createServiceBinding') &&\n    target.getType() === TYPE_OPERATOR_BACKED_SERVICE\n  ) {\n    return createServiceBindingConnection;\n  }\n  return null;\n};\n","import * as React from 'react';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { Perspective } from '@console/dynamic-plugin-sdk';\nimport { createModalLauncher } from '@console/internal/components/factory/modal';\nimport { history, getQueryArgument } from '@console/internal/components/utils';\nimport {\n  K8sKind,\n  k8sList,\n  K8sResourceKind,\n  referenceFor,\n  modelFor,\n} from '@console/internal/module/k8s';\nimport { ServiceBindingModel } from '@console/service-binding-plugin/src/models';\nimport { usePerspectives } from '@console/shared/src';\nimport { useTelemetry } from '@console/shared/src/hooks/useTelemetry';\nimport { createServiceBinding } from '@console/topology/src/operators/actions/serviceBindings';\nimport { useValuesForPerspectiveContext } from '../../detect-perspective/useValuesForPerspectiveContext';\nimport CreateServiceBindingForm, {\n  CreateServiceBindingFormProps,\n} from './CreateServiceBindingForm';\nimport { checkExistingServiceBinding } from './service-binding-modal-launcher-utils';\nimport { serviceBindingValidationSchema } from './servicebinding-validation-utils';\n\ntype CreateServiceBindingModalProps = CreateServiceBindingFormProps & {\n  model: K8sKind;\n  source: K8sResourceKind;\n  target?: K8sResourceKind;\n  close?: () => void;\n};\n\ntype CreateServiceBindingFormType = {\n  name: string;\n  bindableService: K8sResourceKind;\n};\n\nconst handleRedirect = async (\n  project: string,\n  perspective: string,\n  perspectiveExtensions: Perspective[],\n) => {\n  const perspectiveData = perspectiveExtensions.find((item) => item.properties.id === perspective);\n  const redirectURL = (await perspectiveData.properties.importRedirectURL())(project);\n  history.push(redirectURL);\n};\n\nconst CreateServiceBindingModal: React.FC<CreateServiceBindingModalProps> = (props) => {\n  const { source, model } = props;\n  const { t } = useTranslation();\n  const fireTelemetryEvent = useTelemetry();\n  const [activePerspective] = useValuesForPerspectiveContext();\n  const perspectiveExtensions = usePerspectives();\n  const handleSubmit = async (values, actions) => {\n    const bindings: K8sResourceKind[] = await k8sList(ServiceBindingModel, {\n      ns: source.metadata.namespace,\n    });\n    let existingServiceBinding = {};\n    if (bindings.length > 0) {\n      existingServiceBinding = checkExistingServiceBinding(\n        bindings,\n        source,\n        values.bindableService,\n        model,\n      );\n    }\n    if (Object.keys(existingServiceBinding ?? {}).length === 0) {\n      try {\n        await createServiceBinding(source, values.bindableService, values.name);\n        props.close();\n        fireTelemetryEvent('Service Binding Created');\n        getQueryArgument('view') === null &&\n          handleRedirect(source.metadata.namespace, activePerspective, perspectiveExtensions);\n      } catch (errorMessage) {\n        actions.setStatus({ submitError: errorMessage.message });\n      }\n    } else {\n      actions.setStatus({\n        submitError: t(\n          'console-app~Service binding already exists. Select a different service to connect to.',\n        ),\n      });\n    }\n  };\n\n  const initialValues: CreateServiceBindingFormType = {\n    name: props.target\n      ? `${source.metadata.name}-${model.abbr.toLowerCase()}-${\n          props.target.metadata.name\n        }-${modelFor(referenceFor(props.target)).abbr.toLowerCase()}`\n      : '',\n    bindableService: props.target ? props.target : {},\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      initialStatus={{ error: '' }}\n      validationSchema={serviceBindingValidationSchema(t)}\n      onSubmit={handleSubmit}\n    >\n      {(formikProps) => <CreateServiceBindingForm {...formikProps} {...props} />}\n    </Formik>\n  );\n};\n\nexport const createServiceBindingModal = createModalLauncher(CreateServiceBindingModal);\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { GROUP_HEIGHT, GROUP_PADDING, GROUP_WIDTH } from '../../const';\n\nexport const TYPE_OPERATOR_BACKED_SERVICE = 'operator-backed-service';\n\nexport const OPERATOR_GROUP_WIDTH = GROUP_WIDTH;\nexport const OPERATOR_GROUP_HEIGHT = GROUP_HEIGHT;\nexport const OPERATOR_GROUP_PADDING = GROUP_PADDING;\n"],"sourceRoot":""}