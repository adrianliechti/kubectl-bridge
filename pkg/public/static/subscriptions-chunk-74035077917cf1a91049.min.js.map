{"version":3,"sources":["webpack:///./packages/operator-lifecycle-manager/src/components/subscription.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/deprecated-operator-warnings/deprecated-operator-warnings.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operand/operand-link.tsx","webpack:///./public/components/checkbox.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/uninstall-operator-modal.tsx","webpack:///./packages/console-shared/src/hooks/useOperands.ts","webpack:///./packages/operator-lifecycle-manager/src/components/modals/installplan-approval-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/subscription-channel-modal.tsx","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js"],"names":["catalogSourceForSubscription","catalogSources","subscription","find","source","metadata","name","spec","namespace","sourceNamespace","installedCSVForSubscription","clusterServiceVersions","csv","status","installedCSV","packageForSubscription","packageManifests","pkg","packageName","catalogSource","catalogSourceNamespace","installPlanForSubscription","installPlans","ip","installPlanRef","SourceMissingStatus","t","title","className","SourceUnhealthyStatus","tableColumnClasses","columnClass","UpgradeApprovalLink","to","SubscriptionStatus","state","SubscriptionStateUpgradeAvailable","SubscriptionStateUpgradePending","SubscriptionStateAtLatest","menuActions","factory","Edit","kind","obj","labelKey","callback","k8sKill","k8sGet","k8sPatch","accessReview","group","apiGroup","resource","plural","verb","_kind","href","hidden","SubscriptionTableRow","channel","installPlanApproval","actions","SubscriptionsList","props","Header","sortField","transforms","Row","EmptyMsg","virtualize","SubscriptionsPage","resources","namespaced","prop","flatten","canCreate","createProps","createButtonText","ListComponent","filterLabel","CatalogSourceHealthAlert","health","healthy","isInline","variant","displayName","groupVersionKind","InstallFailedAlert","installPlan","installStatusPhase","phase","installFailedCondition","conditions","type","installFailedMessage","message","reason","InstallPlanPhaseFailed","CatalogSourceStatusIconAndText","icon","SubscriptionDetails","subscriptions","catalogHealth","ch","catalogSourceRef","URLSearchParams","window","location","search","has","result","then","catch","deprecatedPackage","deprecatedChannel","deprecatedVersion","deprecation","dismissible","text","SubscriptionUpdates","showAnnotations","startingCSV","badgeAlt","SubscriptionUpgradeStatus","prevInstallPlanApproval","prevChannel","waitingForUpdate","setWaitingForUpdate","current","k8sUpdateAndWait","installPlanPhase","InstallPlanPhaseRequiresApproval","manualSubscriptionsInNamespace","onClick","k8sUpdate","isDisabled","dataTest","Automatic","length","headerContent","bodyContent","SubscriptionDetailsPage","params","ns","pages","details","editYaml","isList","DeprecatedOperatorType","findDeprecation","f","findDeprecatedOperator","PackageDeprecated","ChannelDeprecated","VersionDeprecated","DeprecatedOperatorWarningBadge","content","color","DeprecatedOperatorWarningIcon","DeprecatedOperatorWarningAlert","alertVisible","setAlertVisible","actionClose","onClose","csvNameFromWindow","pathname","split","part","i","allParts","OperandLink","csvName","reference","classes","inline","Checkbox","label","checked","onChange","deleteOptions","apiVersion","propagationPolicy","UninstallOperatorModal","cancel","close","handleOperatorUninstallPromise","operatorUninstallInProgress","operatorUninstallErrorMessage","showInstructions","setShowInstructions","operatorUninstallFinished","setOperatorUninstallFinished","deleteOperands","setDeleteOperands","operandsDeleteInProgress","setOperandsDeleteInProgress","operandsRemaining","setOperandsRemaining","operandsDeleteFinished","setOperandsDeleteFinished","operandDeletionErrors","setOperandDeletionErrors","operandDeletionVerificationError","setOperandDeletionVerificationError","clusterServiceVersionExistsError","setClusterServiceVersionExistsError","canPatchConsoleOperatorConfig","csvPlugins","annotations","consoleOperatorConfig","enabledPlugins","filter","plugin","removePlugins","subscriptionName","subscriptionNamespace","isSubmitInProgress","isSubmitFinished","hasSubmitErrors","optedOut","operands","operandsLoaded","operandsLoadedErrorMessage","uninstallOperator","patch","operatorUninstallPromises","model","err","response","Promise","all","finishVerification","proceedToUninstallOperator","pollOperands","url","SERVER_FLAGS","basePath","interval","setInterval","curOperands","items","clearInterval","setTimeout","closeAndRedirect","includes","push","intervalID","uninstallMessage","UninstallMessage","showOperandsContent","instructions","count","operandsSection","OperandsLoadedErrorAlert","OperandsTable","loaded","currentTarget","operandDeletionAlert","OperandDeletionErrorAlert","OperandDeletionSuccessAlert","results","UninstallAlert","errorMessage","onSubmit","event","preventDefault","operandDeletionPromises","map","operand","operandErrors","reduce","acc","curr","concat","OperandDeleteProgress","total","remaining","inProgress","submitDanger","submitText","submitDisabled","progressLabel","value","max","valueText","size","lg","OperatorUninstallSuccessAlert","OperatorUninstallErrorAlert","OperandErrorList","skeleton","data","key","sort","a","b","localeCompare","uid","operandError","error","createUninstallOperatorModal","useOperands","operatorName","operatorNamespace","setOperands","setLoaded","setErrorMessage","getApprovalStrategy","approval","createInstallPlanApprovalModal","handlePromise","selectedApprovalStrategy","setSelectedApprovalStrategy","submit","updatedObj","e","target","subTitle","Manual","createSubscriptionChannelModal","currentChannel","channels","selectedChannel","setSelectedChannel","linkTo","currentCSV","FormAlert","_a","children","Object","assign","form"],"mappings":"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","file":"subscriptions-chunk-74035077917cf1a91049.min.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Alert, Button, Popover } from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons/dist/esm/icons/in-progress-icon';\nimport { PencilAltIcon } from '@patternfly/react-icons/dist/esm/icons/pencil-alt-icon';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom-v5-compat';\nimport { ResourceStatus, StatusIconAndText } from '@console/dynamic-plugin-sdk';\nimport { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  DetailsPage,\n  MultiListPage,\n  Table,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  KebabAction,\n  FieldLevelHelp,\n  Kebab,\n  LoadingInline,\n  ConsoleEmptyState,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  resourcePathFromModel,\n  ResourceSummary,\n  SectionHeading,\n} from '@console/internal/components/utils';\nimport { removeQueryArgument } from '@console/internal/components/utils/router';\nimport {\n  referenceForModel,\n  k8sGet,\n  k8sPatch,\n  k8sKill,\n  k8sUpdate,\n  K8sResourceCommon,\n  K8sKind,\n} from '@console/internal/module/k8s';\nimport {\n  BlueArrowCircleUpIcon,\n  BlueInfoCircleIcon,\n  getName,\n  getNamespace,\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  WarningStatus,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  CatalogSourceModel,\n  InstallPlanModel,\n  PackageManifestModel,\n  OperatorGroupModel,\n} from '../models';\nimport {\n  SubscriptionKind,\n  SubscriptionState,\n  PackageManifestKind,\n  InstallPlanApproval,\n  ClusterServiceVersionKind,\n  OperatorGroupKind,\n  InstallPlanKind,\n  InstallPlanPhase,\n  CatalogSourceKind,\n} from '../types';\nimport { upgradeRequiresApproval } from '../utils';\nimport {\n  DeprecatedOperatorWarningAlert,\n  DeprecatedOperatorWarningIcon,\n  findDeprecatedOperator,\n} from './deprecated-operator-warnings/deprecated-operator-warnings';\nimport { createInstallPlanApprovalModal } from './modals/installplan-approval-modal';\nimport { createSubscriptionChannelModal } from './modals/subscription-channel-modal';\nimport { createUninstallOperatorModal } from './modals/uninstall-operator-modal';\nimport { requireOperatorGroup } from './operator-group';\nimport { getManualSubscriptionsInNamespace, NamespaceIncludesManualApproval } from './index';\n\nexport const catalogSourceForSubscription = (\n  catalogSources: CatalogSourceKind[] = [],\n  subscription: SubscriptionKind,\n): CatalogSourceKind =>\n  catalogSources.find(\n    (source) =>\n      source?.metadata?.name === subscription?.spec?.source &&\n      source?.metadata?.namespace === subscription?.spec?.sourceNamespace,\n  );\n\nexport const installedCSVForSubscription = (\n  clusterServiceVersions: ClusterServiceVersionKind[] = [],\n  subscription: SubscriptionKind,\n): ClusterServiceVersionKind =>\n  clusterServiceVersions.find((csv) => csv?.metadata?.name === subscription?.status?.installedCSV);\n\nexport const packageForSubscription = (\n  packageManifests: PackageManifestKind[] = [],\n  subscription: SubscriptionKind,\n): PackageManifestKind =>\n  packageManifests.find(\n    (pkg) =>\n      pkg?.metadata?.name === subscription?.spec?.name &&\n      pkg?.status?.packageName === subscription?.spec?.name &&\n      pkg?.status?.catalogSource === subscription?.spec?.source &&\n      pkg?.status?.catalogSourceNamespace === subscription?.spec?.sourceNamespace,\n  );\n\nexport const installPlanForSubscription = (\n  installPlans: InstallPlanKind[] = [],\n  subscription: SubscriptionKind,\n): InstallPlanKind =>\n  installPlans.find((ip) => ip?.metadata?.name === subscription?.status?.installPlanRef?.name);\n\nexport const SourceMissingStatus: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <WarningStatus title={t('olm~Cannot update')} />\n      <span className=\"text-muted\">{t('olm~CatalogSource not found')}</span>\n    </>\n  );\n};\n\nexport const SourceUnhealthyStatus: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <WarningStatus title={t('olm~Cannot update')} />\n      <span className=\"text-muted\">{t('olm~CatalogSource unhealthy')}</span>\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  '',\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-xl',\n  Kebab.columnClass,\n];\n\nexport const UpgradeApprovalLink: React.FC<{ subscription: SubscriptionKind }> = ({\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const to = resourcePathFromModel(\n    InstallPlanModel,\n    subscription.status.installPlanRef.name,\n    subscription.metadata.namespace,\n  );\n  return (\n    <span className=\"co-icon-and-text\">\n      <Link to={to}>\n        <BlueArrowCircleUpIcon /> {t('olm~Upgrade available')}\n      </Link>\n    </span>\n  );\n};\n\nexport const SubscriptionStatus: React.FC<{ subscription: SubscriptionKind }> = ({\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  switch (subscription.status?.state) {\n    case SubscriptionState.SubscriptionStateUpgradeAvailable:\n      return (\n        <span>\n          <YellowExclamationTriangleIcon /> {t('olm~Upgrade available')}\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateUpgradePending:\n      return upgradeRequiresApproval(subscription) && subscription.status.installPlanRef ? (\n        <UpgradeApprovalLink subscription={subscription} />\n      ) : (\n        <span>\n          <InProgressIcon className=\"text-primary\" /> {t('olm~Upgrading')}\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateAtLatest:\n      return (\n        <span>\n          <GreenCheckCircleIcon /> {t('olm~Up to date')}\n        </span>\n      );\n    default:\n      return (\n        <span className={_.isEmpty(subscription.status.state) ? 'text-muted' : ''}>\n          {subscription.status.state || t('olm~Unknown failure')}\n        </span>\n      );\n  }\n};\n\nconst menuActions: KebabAction[] = [\n  Kebab.factory.Edit,\n  (kind, obj) => ({\n    // t('olm~Remove Subscription')\n    labelKey: 'olm~Remove Subscription',\n    callback: () => createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj }),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'delete',\n    },\n  }),\n  (_kind, obj) => {\n    const installedCSV = _.get(obj, 'status.installedCSV');\n    return {\n      // t('olm~View ClusterServiceVersion...')\n      labelKey: 'olm~View ClusterServiceVersion...',\n      href: `/k8s/ns/${obj.metadata.namespace}/${ClusterServiceVersionModel.plural}/${installedCSV}`,\n      hidden: !installedCSV,\n    };\n  },\n];\n\nexport const SubscriptionTableRow: React.FC<RowFunctionArgs> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(SubscriptionModel)}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <SubscriptionStatus subscription={obj} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-truncate', 'co-select-to-copy')}>\n        {obj.spec.channel || 'default'}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {obj.spec.installPlanApproval || t('olm~Automatic')}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(SubscriptionModel)}\n          resource={obj}\n        />\n      </TableData>\n    </>\n  );\n};\n\nexport const SubscriptionsList = requireOperatorGroup((props: SubscriptionsListProps) => {\n  const { t } = useTranslation();\n  const SubscriptionTableHeader = () => {\n    return [\n      {\n        title: t('olm~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('olm~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('olm~Status'),\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('olm~Update channel'),\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('olm~Update approval'),\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[5] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('olm~Operator Subscriptions')}\n      Header={SubscriptionTableHeader}\n      Row={SubscriptionTableRow}\n      EmptyMsg={() => (\n        <ConsoleEmptyState title={t('olm~No Subscriptions found')}>\n          {t(\n            'olm~Each Namespace can subscribe to a single channel of a package for automatic updates.',\n          )}\n        </ConsoleEmptyState>\n      )}\n      virtualize\n    />\n  );\n});\n\nexport const SubscriptionsPage: React.FC<SubscriptionsPageProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <MultiListPage\n      {...props}\n      resources={[\n        {\n          kind: referenceForModel(SubscriptionModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'subscription',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.subscription, 'data', [])}\n      title={t('olm~Subscriptions')}\n      canCreate\n      createProps={{ to: '/operatorhub' }}\n      createButtonText={t('olm~Create Subscription')}\n      ListComponent={SubscriptionsList}\n      filterLabel={t('olm~Subscriptions by package')}\n    />\n  );\n};\n\nconst CatalogSourceHealthAlert = ({ health, source, sourceNamespace }) => {\n  const { t } = useTranslation();\n  if (!health) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert\"\n        variant=\"warning\"\n        title={t('olm~CatalogSource health unknown')}\n      >\n        {t(\n          'olm~This operator cannot be updated. The health of CatalogSource \"{{source}}\" is unknown. It may have been disabled or removed from the cluster.',\n          { source },\n        )}\n        {source && sourceNamespace && (\n          <ResourceLink\n            displayName={t('olm~View CatalogSource')}\n            groupVersionKind={getGroupVersionKindForModel(CatalogSourceModel)}\n            name={source}\n            namespace={sourceNamespace}\n            title={source}\n          />\n        )}\n      </Alert>\n    );\n  }\n  return health.healthy ? null : (\n    <Alert isInline className=\"co-alert\" variant=\"warning\" title={t('olm~CatalogSource unhealthy')}>\n      {t('olm~This operator cannot be updated. CatalogSource \"{{source}}\" is unhealthy.', {\n        source,\n      })}\n      <ResourceLink\n        displayName={t('olm~View CatalogSource')}\n        groupVersionKind={getGroupVersionKindForModel(CatalogSourceModel)}\n        name={source}\n        namespace={sourceNamespace}\n        title={source}\n      />\n    </Alert>\n  );\n};\n\nconst InstallFailedAlert = ({ installPlan }) => {\n  const { t } = useTranslation();\n  const installStatusPhase = installPlan?.status?.phase;\n  const installFailedCondition = installPlan?.status?.conditions?.find(\n    ({ type, status }) => type === 'Installed' && status === 'False',\n  );\n  const installFailedMessage =\n    installFailedCondition?.message ||\n    installFailedCondition?.reason ||\n    t('olm~InstallPlan failed');\n\n  return installStatusPhase === InstallPlanPhase.InstallPlanPhaseFailed ? (\n    <Alert\n      isInline\n      className=\"co-alert co-alert--scrollable\"\n      variant=\"danger\"\n      title={installStatusPhase}\n    >\n      {installFailedMessage}\n    </Alert>\n  ) : null;\n};\n\nconst CatalogSourceStatusIconAndText = ({ healthy }) => {\n  const { t } = useTranslation();\n  switch (healthy) {\n    case true:\n      return <StatusIconAndText icon={<GreenCheckCircleIcon />} title={t('olm~Healthy')} />;\n    case false:\n      return <StatusIconAndText icon={<RedExclamationCircleIcon />} title={t('olm~Unhealthy')} />;\n    default:\n      return (\n        <StatusIconAndText\n          icon={<YellowExclamationTriangleIcon />}\n          title={t('olm~Health unknown')}\n        />\n      );\n  }\n};\n\nexport const SubscriptionDetails: React.FC<SubscriptionDetailsProps> = ({\n  clusterServiceVersions = [],\n  installPlans = [],\n  obj,\n  packageManifests = [],\n  subscriptions = [],\n}) => {\n  const { t } = useTranslation();\n  const { source, sourceNamespace } = obj?.spec ?? {};\n  const catalogHealth = obj?.status?.catalogHealth?.find(\n    (ch) => ch.catalogSourceRef.name === source,\n  );\n  const installedCSV = installedCSVForSubscription(clusterServiceVersions, obj);\n  const installPlan = installPlanForSubscription(installPlans, obj);\n  const pkg = packageForSubscription(packageManifests, obj);\n  if (new URLSearchParams(window.location.search).has('showDelete')) {\n    createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj })\n      .result.then(() => removeQueryArgument('showDelete'))\n      .catch(_.noop);\n  }\n  const { deprecatedPackage, deprecatedChannel, deprecatedVersion } = findDeprecatedOperator(obj);\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <CatalogSourceHealthAlert\n          health={catalogHealth}\n          source={source}\n          sourceNamespace={sourceNamespace}\n        />\n        <InstallFailedAlert installPlan={installPlan} />\n        {(deprecatedPackage.deprecation ||\n          deprecatedChannel.deprecation ||\n          deprecatedVersion.deprecation) && (\n          <DeprecatedOperatorWarningAlert\n            deprecatedPackage={deprecatedPackage}\n            deprecatedChannel={deprecatedChannel}\n            deprecatedVersion={deprecatedVersion}\n            dismissible\n          />\n        )}\n        <SectionHeading text={t('olm~Subscription details')} />\n        <div className=\"co-m-pane__body-group\">\n          <SubscriptionUpdates\n            catalogHealth={catalogHealth}\n            pkg={pkg}\n            obj={obj}\n            installedCSV={installedCSV}\n            installPlan={installPlan}\n            subscriptions={subscriptions}\n          />\n        </div>\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('olm~Installed version')}</dt>\n                <dd>\n                  {installedCSV ? (\n                    <ResourceLink\n                      kind={referenceForModel(ClusterServiceVersionModel)}\n                      name={getName(installedCSV)}\n                      namespace={getNamespace(installedCSV)}\n                      title={getName(installedCSV)}\n                    />\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n                <dt>{t('olm~Starting version')}</dt>\n                <dd>{obj.spec.startingCSV || t('olm~None')}</dd>\n                <dt>{t('olm~CatalogSource')}</dt>\n                <dd>\n                  {source && sourceNamespace ? (\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={source}\n                      namespace={sourceNamespace}\n                      title={source}\n                    >\n                      <ResourceStatus badgeAlt>\n                        <CatalogSourceStatusIconAndText healthy={catalogHealth?.healthy} />\n                      </ResourceStatus>\n                    </ResourceLink>\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n                <dt>{t('olm~InstallPlan')}</dt>\n                <dd>\n                  {installPlan ? (\n                    <ResourceLink\n                      kind={referenceForModel(InstallPlanModel)}\n                      name={getName(installPlan)}\n                      namespace={getNamespace(installPlan)}\n                      title={getName(installPlan)}\n                    />\n                  ) : (\n                    t('olm~None')\n                  )}\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('olm~Conditions')} />\n        <Conditions conditions={obj?.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst SubscriptionUpgradeStatus = ({ catalogHealth, subscription }) => {\n  if (!catalogHealth) {\n    return <SourceMissingStatus />;\n  }\n  return catalogHealth.healthy ? (\n    <SubscriptionStatus subscription={subscription} />\n  ) : (\n    <SourceUnhealthyStatus />\n  );\n};\n\nexport const SubscriptionUpdates: React.FC<SubscriptionUpdatesProps> = ({\n  catalogHealth,\n  installedCSV,\n  installPlan,\n  obj,\n  pkg,\n  subscriptions,\n}) => {\n  const { t } = useTranslation();\n  const prevInstallPlanApproval = React.useRef(obj?.spec?.installPlanApproval);\n  const prevChannel = React.useRef(obj?.spec?.channel);\n  const [waitingForUpdate, setWaitingForUpdate] = React.useState(false);\n\n  React.useEffect(() => {\n    const stillWaiting =\n      waitingForUpdate &&\n      obj?.spec?.channel === prevChannel.current &&\n      obj?.spec?.installPlanApproval === prevInstallPlanApproval.current;\n\n    if (!stillWaiting) {\n      setWaitingForUpdate(false);\n      prevChannel.current = obj?.spec?.channel;\n      prevInstallPlanApproval.current = obj?.spec?.installPlanApproval;\n    }\n  }, [obj, waitingForUpdate]);\n\n  const k8sUpdateAndWait = (kind: K8sKind, resource: K8sResourceCommon) =>\n    k8sUpdate(kind, resource).then(() => setWaitingForUpdate(true));\n  const channelModal = () =>\n    createSubscriptionChannelModal({ subscription: obj, pkg, k8sUpdate: k8sUpdateAndWait });\n  const approvalModal = () => createInstallPlanApprovalModal({ obj, k8sUpdate: k8sUpdateAndWait });\n  const installPlanPhase = React.useMemo(() => {\n    if (installPlan) {\n      switch (installPlan.status?.phase as InstallPlanPhase) {\n        case InstallPlanPhase.InstallPlanPhaseRequiresApproval:\n          return (\n            <span data-test=\"operator-subscription-requires-approval\">\n              {t('olm~1 requires approval')}\n            </span>\n          );\n        case InstallPlanPhase.InstallPlanPhaseFailed:\n          return t('olm~1 failed');\n        default:\n          return t('olm~1 installing');\n      }\n    }\n    return null;\n  }, [installPlan, t]);\n  const manualSubscriptionsInNamespace = getManualSubscriptionsInNamespace(\n    subscriptions,\n    obj.metadata.namespace,\n  );\n  const { deprecatedChannel } = findDeprecatedOperator(obj);\n\n  return (\n    <div className=\"co-detail-table\">\n      <div className=\"co-detail-table__row row\">\n        <div className=\"co-detail-table__section col-sm-3\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">\n              {t('olm~Update channel')}\n              <FieldLevelHelp>\n                {t('olm~The channel to track and receive the updates from.')}\n              </FieldLevelHelp>\n            </dt>\n            <dd>\n              {waitingForUpdate ? (\n                <LoadingInline />\n              ) : (\n                <>\n                  <Button\n                    type=\"button\"\n                    isInline\n                    onClick={channelModal}\n                    variant=\"link\"\n                    isDisabled={!pkg}\n                    data-test=\"subscription-channel-update-button\"\n                  >\n                    {obj.spec.channel || 'default'}\n                    {pkg && (\n                      <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                    )}\n                  </Button>\n                  {deprecatedChannel.deprecation && (\n                    <DeprecatedOperatorWarningIcon\n                      dataTest=\"deprecated-operator-warning-subscription-update-icon\"\n                      deprecation={deprecatedChannel.deprecation}\n                    />\n                  )}\n                </>\n              )}\n            </dd>\n          </dl>\n        </div>\n        <div className=\"co-detail-table__section col-sm-3\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">\n              {t('olm~Update approval')}\n              <FieldLevelHelp>\n                {t('olm~The strategy to determine either manual or automatic updates.')}\n              </FieldLevelHelp>\n            </dt>\n            <dd>\n              {waitingForUpdate ? (\n                <LoadingInline />\n              ) : (\n                <>\n                  <div>\n                    <Button type=\"button\" isInline onClick={approvalModal} variant=\"link\">\n                      {obj.spec.installPlanApproval || 'Automatic'}\n                      <PencilAltIcon className=\"co-icon-space-l pf-v5-c-button-icon--plain\" />\n                    </Button>\n                  </div>\n                  {obj.spec.installPlanApproval === InstallPlanApproval.Automatic &&\n                    manualSubscriptionsInNamespace?.length > 0 && (\n                      <div>\n                        <Popover\n                          headerContent={<>{t('olm~Functioning as manual approval strategy')}</>}\n                          bodyContent={\n                            <NamespaceIncludesManualApproval\n                              subscriptions={manualSubscriptionsInNamespace}\n                              namespace={obj.metadata.namespace}\n                            />\n                          }\n                        >\n                          <Button type=\"button\" isInline variant=\"link\">\n                            <BlueInfoCircleIcon className=\"co-icon-space-r\" />\n                            {t('olm~Functioning as manual')}\n                          </Button>\n                        </Popover>\n                      </div>\n                    )}\n                </>\n              )}\n            </dd>\n          </dl>\n        </div>\n        <div className=\"co-detail-table__section co-detail-table__section--last col-sm-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt className=\"co-detail-table__section-header\">{t('olm~Upgrade status')}</dt>\n            <dd>\n              <SubscriptionUpgradeStatus catalogHealth={catalogHealth} subscription={obj} />\n            </dd>\n          </dl>\n          {catalogHealth && catalogHealth.healthy && (\n            <>\n              <div className=\"co-detail-table__bracket\" />\n              <div className=\"co-detail-table__breakdown\">\n                {obj?.status?.installedCSV && installedCSV ? (\n                  <Link\n                    to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(\n                      ClusterServiceVersionModel,\n                    )}/${obj.status.installedCSV}`}\n                  >\n                    {t('olm~1 installed')}\n                  </Link>\n                ) : (\n                  <span>{t('olm~0 installed')}</span>\n                )}\n                {obj?.status?.state === SubscriptionState.SubscriptionStateUpgradePending &&\n                obj?.status?.installPlanRef &&\n                installPlan ? (\n                  <Link\n                    to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                      obj.status.installPlanRef.name\n                    }`}\n                  >\n                    <span>{installPlanPhase}</span>\n                  </Link>\n                ) : (\n                  <span>{t('olm~0 installing')}</span>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const SubscriptionDetailsPage: React.FC<SubscriptionDetailsPageProps> = (props) => {\n  const params = useParams();\n  return (\n    <DetailsPage\n      {...props}\n      namespace={params.ns}\n      kind={referenceForModel(SubscriptionModel)}\n      name={params.name}\n      pages={[navFactory.details(SubscriptionDetails), navFactory.editYaml()]}\n      resources={[\n        {\n          kind: referenceForModel(PackageManifestModel),\n          isList: true,\n          namespace: props.namespace,\n          prop: 'packageManifests',\n        },\n        {\n          kind: referenceForModel(InstallPlanModel),\n          isList: true,\n          namespace: props.namespace,\n          prop: 'installPlans',\n        },\n        {\n          kind: referenceForModel(ClusterServiceVersionModel),\n          namespace: props.namespace,\n          isList: true,\n          prop: 'clusterServiceVersions',\n        },\n        {\n          kind: referenceForModel(SubscriptionModel),\n          namespace: props.namespace,\n          isList: true,\n          prop: 'subscriptions',\n        },\n      ]}\n      menuActions={menuActions}\n    />\n  );\n};\n\nexport type SubscriptionsPageProps = {\n  namespace?: string;\n};\n\nexport type SubscriptionsListProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: SubscriptionKind[];\n  operatorGroup: { loaded: boolean; data?: OperatorGroupKind[] };\n};\n\nexport type SubscriptionUpdatesProps = {\n  catalogHealth: { healthy?: boolean };\n  obj: SubscriptionKind;\n  pkg: PackageManifestKind;\n  installedCSV?: ClusterServiceVersionKind;\n  installPlan?: InstallPlanKind;\n  subscriptions: SubscriptionKind[];\n};\n\nexport type SubscriptionUpdatesState = {\n  waitingForUpdate: boolean;\n  channel: string;\n  installPlanApproval: InstallPlanApproval;\n};\n\nexport type SubscriptionDetailsProps = {\n  clusterServiceVersions?: ClusterServiceVersionKind[];\n  installPlans?: InstallPlanKind[];\n  obj: SubscriptionKind;\n  packageManifests: PackageManifestKind[];\n  subscriptions: SubscriptionKind[];\n};\n\nexport type SubscriptionDetailsPageProps = {\n  namespace: string;\n};\n\nSubscriptionsPage.displayName = 'SubscriptionsPage';\nSubscriptionDetails.displayName = 'SubscriptionDetails';\nSubscriptionDetailsPage.displayName = 'SubscriptionDetailsPage';\n","import * as React from 'react';\nimport { Label, FormAlert, Alert, Tooltip, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { YellowExclamationTriangleIcon } from '@console/dynamic-plugin-sdk/src/api/core-api';\nimport { DeprecatedOperatorWarning } from '@console/operator-lifecycle-manager/src/types';\nimport { SubscriptionKind } from '../../types';\n\nexport enum DeprecatedOperatorType {\n  PackageDeprecated = 'PackageDeprecated',\n  ChannelDeprecated = 'ChannelDeprecated',\n  VersionDeprecated = 'BundleDeprecated',\n}\nconst findDeprecation = (obj: SubscriptionKind, type: string): DeprecatedOperatorWarning => {\n  return { deprecation: obj?.status?.conditions?.find((f) => f.type === type) };\n};\n\nexport const findDeprecatedOperator = (\n  obj: SubscriptionKind,\n): {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n} => {\n  return {\n    deprecatedPackage: findDeprecation(obj, DeprecatedOperatorType.PackageDeprecated),\n    deprecatedChannel: findDeprecation(obj, DeprecatedOperatorType.ChannelDeprecated),\n    deprecatedVersion: findDeprecation(obj, DeprecatedOperatorType.VersionDeprecated),\n  };\n};\n\nexport const DeprecatedOperatorWarningBadge: React.FC<DeprecatedOperatorWarningBadge> = ({\n  deprecation,\n  className,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <Label\n        data-test=\"deprecated-operator-warning-badge\"\n        color=\"orange\"\n        className={className}\n        icon={<YellowExclamationTriangleIcon />}\n      >\n        {t('olm~Deprecated')}\n      </Label>\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningIcon: React.FC<DeprecatedOperatorWarningIcon> = ({\n  deprecation,\n  dataTest,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Tooltip content={t('olm~Deprecated: {{message}}', { message: deprecation?.message })}>\n      <YellowExclamationTriangleIcon dataTest={dataTest} className=\"pf-v5-u-ml-xs\" />\n    </Tooltip>\n  );\n};\n\nexport const DeprecatedOperatorWarningAlert: React.FC<DeprecatedOperatorWarningProps> = ({\n  deprecatedPackage,\n  deprecatedChannel,\n  deprecatedVersion,\n  dismissible,\n}) => {\n  const { t } = useTranslation();\n  const [alertVisible, setAlertVisible] = React.useState<boolean>(true);\n\n  return (\n    alertVisible && (\n      <FormAlert className=\"pf-v5-u-my-md\">\n        <Alert\n          variant=\"warning\"\n          title={t('olm~Deprecated warnings')}\n          aria-live=\"polite\"\n          isInline\n          actionClose={\n            dismissible && <AlertActionCloseButton onClose={() => setAlertVisible(false)} />\n          }\n        >\n          <div data-test=\"deprecated-operator-warning-package\">\n            {deprecatedPackage?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-channel\">\n            {deprecatedChannel?.deprecation?.message}\n          </div>\n          <div data-test=\"deprecated-operator-warning-version\">\n            {deprecatedVersion?.deprecation?.message}\n          </div>\n        </Alert>\n      </FormAlert>\n    )\n  );\n};\n\ntype DeprecatedOperatorWarningBadge = {\n  className?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningIcon = {\n  dataTest?: string;\n} & DeprecatedOperatorWarning;\n\ntype DeprecatedOperatorWarningProps = {\n  deprecatedPackage: DeprecatedOperatorWarning;\n  deprecatedChannel: DeprecatedOperatorWarning;\n  deprecatedVersion: DeprecatedOperatorWarning;\n  dismissible?: boolean;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { referenceForModel, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '../../models';\n\nexport const csvNameFromWindow = () =>\n  window.location.pathname\n    .split('/')\n    .find(\n      (part, i, allParts) =>\n        allParts[i - 1] === referenceForModel(ClusterServiceVersionModel) ||\n        allParts[i - 1] === ClusterServiceVersionModel.plural,\n    );\n\nexport const OperandLink: React.FC<OperandLinkProps> = (props) => {\n  const { namespace, name } = props.obj.metadata;\n  const csvName = props.csvName || csvNameFromWindow();\n\n  const reference = referenceFor(props.obj);\n  const to = namespace\n    ? `/k8s/ns/${namespace}/${ClusterServiceVersionModel.plural}/${csvName}/${reference}/${name}`\n    : `/k8s/cluster/${reference}/${name}`;\n  const classes = classNames('co-resource-item', {\n    'co-resource-item--inline': props.inline,\n  });\n\n  return (\n    <span className={classes}>\n      <ResourceIcon kind={referenceFor(props.obj)} />\n      <Link\n        to={to}\n        className=\"co-resource-item__resource-name\"\n        onClick={props.onClick}\n        data-test-operand-link={name}\n        data-test={name}\n      >\n        {name}\n      </Link>\n    </span>\n  );\n};\n\nexport type OperandLinkProps = {\n  obj: K8sResourceKind;\n  csvName?: string;\n  onClick?: () => void;\n  inline?: boolean;\n};\n\nOperandLink.displayName = 'OperandLink';\n","import * as React from 'react';\n\nexport const Checkbox: React.SFC<CheckboxProps> = ({ name, label, checked, onChange }) => (\n  <div className=\"form-group\">\n    <div className=\"checkbox\">\n      <label className=\"control-label\">\n        <input\n          data-test={`${label}__checkbox`}\n          className=\"form-checkbox\"\n          name={name}\n          onChange={onChange}\n          checked={checked}\n          data-checked-state={checked}\n          type=\"checkbox\"\n        />\n        {label}\n      </label>\n    </div>\n  </div>\n);\n\nexport type CheckboxProps = {\n  name: string;\n  label: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n  checked: boolean;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { Alert, Progress, ProgressSize } from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { k8sGetResource } from '@console/dynamic-plugin-sdk/src/utils/k8s';\nimport { settleAllPromises } from '@console/dynamic-plugin-sdk/src/utils/promise';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { Checkbox } from '@console/internal/components/checkbox';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport {\n  history,\n  ResourceLink,\n  resourceListPathFromModel,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport {\n  K8sKind,\n  K8sResourceCommon,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  k8sPatch,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '@console/shared/src/constants';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { useOperands } from '@console/shared/src/hooks/useOperands';\nimport { getPatchForRemovingPlugins, isPluginEnabled } from '@console/shared/src/utils';\nimport { DEFAULT_GLOBAL_OPERATOR_INSTALLATION_NAMESPACE } from '../../const';\nimport { ClusterServiceVersionModel, SubscriptionModel } from '../../models';\nimport { ClusterServiceVersionKind, SubscriptionKind } from '../../types';\nimport { OperandLink } from '../operand/operand-link';\nimport { OLMAnnotation } from '../operator-hub';\nimport { getClusterServiceVersionPlugins } from '../operator-hub/operator-hub-utils';\nimport Timeout = NodeJS.Timeout;\n\nconst deleteOptions = {\n  kind: 'DeleteOptions',\n  apiVersion: 'v1',\n  propagationPolicy: 'Foreground',\n};\n\nexport const UninstallOperatorModal: React.FC<UninstallOperatorModalProps> = ({\n  cancel,\n  close,\n  csv,\n  k8sKill,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const [\n    handleOperatorUninstallPromise,\n    operatorUninstallInProgress,\n    operatorUninstallErrorMessage,\n  ] = usePromiseHandler();\n  const [showInstructions, setShowInstructions] = React.useState(true);\n  const [operatorUninstallFinished, setOperatorUninstallFinished] = React.useState(false);\n  const [deleteOperands, setDeleteOperands] = React.useState(false);\n  const [operandsDeleteInProgress, setOperandsDeleteInProgress] = React.useState(false);\n  const [operandsRemaining, setOperandsRemaining] = React.useState(0);\n  const [operandsDeleteFinished, setOperandsDeleteFinished] = React.useState(false);\n  const [operandDeletionErrors, setOperandDeletionErrors] = React.useState<OperandError[]>([]);\n  const [operandDeletionVerificationError, setOperandDeletionVerificationError] = React.useState(\n    false,\n  );\n  const [clusterServiceVersionExistsError, setClusterServiceVersionExistsError] = React.useState(\n    '',\n  );\n\n  const canPatchConsoleOperatorConfig = useAccessReview({\n    group: ConsoleOperatorConfigModel.apiGroup,\n    resource: ConsoleOperatorConfigModel.plural,\n    verb: 'patch',\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n\n  const csvPlugins = getClusterServiceVersionPlugins(csv?.metadata?.annotations);\n\n  const [consoleOperatorConfig] = useK8sWatchResource<K8sResourceKind>(\n    canPatchConsoleOperatorConfig && csvPlugins.length > 0\n      ? {\n          kind: referenceForModel(ConsoleOperatorConfigModel),\n          isList: false,\n          name: CONSOLE_OPERATOR_CONFIG_NAME,\n        }\n      : null,\n  );\n\n  const enabledPlugins = csvPlugins.filter((plugin) =>\n    isPluginEnabled(consoleOperatorConfig, plugin),\n  );\n\n  const removePlugins: boolean =\n    !!consoleOperatorConfig && canPatchConsoleOperatorConfig && enabledPlugins.length > 0;\n\n  const subscriptionName = subscription?.spec?.name;\n  const subscriptionNamespace = subscription?.metadata?.namespace;\n\n  const isSubmitInProgress = operatorUninstallInProgress || operandsDeleteInProgress;\n\n  const isSubmitFinished =\n    !isSubmitInProgress && (!deleteOperands || operandsDeleteFinished) && operatorUninstallFinished;\n\n  const hasSubmitErrors = operandDeletionErrors.length > 0 || operatorUninstallErrorMessage !== '';\n\n  // Skip loading the operands if we are not going to delete them if they opted Out\n  const optOutAnnotation = 'console.openshift.io/disable-operand-delete';\n  const optedOut = csv?.metadata?.annotations?.[optOutAnnotation] === 'true';\n\n  // TODO: Commenting out for review, wanted to prevent loading the operands if not needed, but lint check throws error\n  // const [operands, operandsLoaded, operandsLoadedErrorMessage] = optedOut\n  //   ? [[], true, '']\n  //   : useOperands(subscriptionName, subscriptionNamespace);\n  const [operands, operandsLoaded, operandsLoadedErrorMessage] = useOperands(\n    subscriptionName,\n    subscriptionNamespace,\n  );\n\n  const uninstallOperator = React.useCallback(async () => {\n    const patch = removePlugins\n      ? getPatchForRemovingPlugins(consoleOperatorConfig, enabledPlugins)\n      : null;\n\n    const clusterServiceVersionExists = async () => {\n      try {\n        await k8sGetResource({\n          model: ClusterServiceVersionModel,\n          name: subscription.status.installedCSV,\n          ns: subscription.metadata.namespace,\n        });\n        return true;\n      } catch (err) {\n        if (err.response.status !== 404) {\n          setClusterServiceVersionExistsError(err.message);\n        }\n        return false;\n      }\n    };\n\n    const operatorUninstallPromises = [\n      k8sKill(SubscriptionModel, subscription, {}, deleteOptions),\n      ...(subscription?.status?.installedCSV && (await clusterServiceVersionExists())\n        ? [\n            k8sKill(\n              ClusterServiceVersionModel,\n              {\n                metadata: {\n                  name: subscription.status.installedCSV,\n                  namespace: subscription.metadata.namespace,\n                },\n              },\n              {},\n              deleteOptions,\n            ),\n          ]\n        : []),\n      ...(removePlugins\n        ? [k8sPatch(ConsoleOperatorConfigModel, consoleOperatorConfig, [patch])]\n        : []),\n    ];\n\n    handleOperatorUninstallPromise(Promise.all(operatorUninstallPromises))\n      .then(() => {\n        setOperatorUninstallFinished(true);\n      })\n      .catch(() => {\n        setOperatorUninstallFinished(true);\n      });\n  }, [\n    consoleOperatorConfig,\n    enabledPlugins,\n    handleOperatorUninstallPromise,\n    k8sKill,\n    removePlugins,\n    subscription,\n  ]);\n\n  const finishVerification = React.useCallback(\n    (proceedToUninstallOperator: boolean) => {\n      setOperandsDeleteInProgress(false);\n      setOperandsDeleteFinished(true);\n      if (proceedToUninstallOperator) {\n        uninstallOperator();\n      } else {\n        setOperandDeletionVerificationError(true);\n        setOperatorUninstallFinished(true);\n      }\n    },\n    [uninstallOperator],\n  );\n\n  const pollOperands = React.useCallback((): Timeout => {\n    const url = `${window.SERVER_FLAGS.basePath}api/list-operands/?name=${subscriptionName}&namespace=${subscriptionNamespace}`;\n    const interval = setInterval(() => {\n      coFetchJSON(url)\n        .then((curOperands) => {\n          setOperandsRemaining(curOperands.items.length);\n          if (curOperands.items.length === 0) {\n            clearInterval(interval);\n            setTimeout(() => finishVerification(true), 1000); // allow '0 Operands remaining' to display for a second\n          }\n        })\n        .catch(() => {\n          finishVerification(false);\n        });\n    }, 2000); // every 2 seconds\n    return interval;\n  }, [finishVerification, subscriptionName, subscriptionNamespace]);\n\n  const closeAndRedirect = React.useCallback(() => {\n    close();\n    // if url contains subscription name (ex: \"codeready-workspaces\") or installedCSV version (ex: \"crwoperator.v2.9.0\")\n    // redirect to ClusterServiceVersion \"Installed Operators\" list page,\n    // else uninstalled from \"Installed Operators\" list page, so do not redirect\n    if (\n      window.location.pathname.split('/').includes(subscription.metadata.name) ||\n      window.location.pathname.split('/').includes(subscription?.status?.installedCSV)\n    ) {\n      history.push(resourceListPathFromModel(ClusterServiceVersionModel, getActiveNamespace()));\n    }\n  }, [close, subscription]);\n\n  React.useEffect(() => {\n    if (isSubmitFinished && !hasSubmitErrors) {\n      closeAndRedirect();\n    }\n  }, [closeAndRedirect, hasSubmitErrors, isSubmitFinished]);\n\n  React.useEffect(() => {\n    let intervalID;\n    if (operandsDeleteInProgress) {\n      intervalID = pollOperands();\n    }\n    return () => {\n      if (intervalID) {\n        clearInterval(intervalID);\n      }\n    };\n  }, [operandsDeleteInProgress, pollOperands]);\n\n  const submit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    if (isSubmitFinished) {\n      closeAndRedirect();\n      return;\n    }\n\n    setShowInstructions(false);\n    if (deleteOperands) {\n      setOperandsDeleteInProgress(true);\n      setOperandsRemaining(operands.length);\n      const operandDeletionPromises = operands.map((operand: K8sResourceCommon) => {\n        const model = modelFor(referenceFor(operand));\n        return k8sKill(model, operand, {}, deleteOptions);\n      });\n      // eslint-disable-next-line promise/catch-or-return\n      settleAllPromises(operandDeletionPromises).then(([, , results]) => {\n        const operandErrors: OperandError[] = results.reduce((acc: OperandError[], curr, i) => {\n          return curr.status === 'rejected'\n            ? acc.concat({ operand: operands[i], errorMessage: curr.reason })\n            : acc;\n        }, []);\n        if (operandErrors.length) {\n          setOperandDeletionErrors(operandErrors);\n          setOperandsDeleteInProgress(false);\n          setOperandsDeleteFinished(true);\n          setOperatorUninstallFinished(true);\n        }\n      });\n    } else {\n      setOperandsDeleteFinished(true);\n      uninstallOperator();\n    }\n  };\n\n  const name = csv?.spec?.displayName || subscription?.spec?.name;\n  const csvName = csv?.metadata?.name;\n  const namespace =\n    subscription.metadata.namespace === DEFAULT_GLOBAL_OPERATOR_INSTALLATION_NAMESPACE\n      ? 'all-namespaces'\n      : subscription.metadata.namespace;\n  const uninstallMessage = csv?.metadata?.annotations?.[OLMAnnotation.UninstallMessage];\n  const showOperandsContent = !operandsLoaded || operands.length > 0;\n\n  const instructions = (\n    <>\n      <p>\n        {showOperandsContent && (\n          <>\n            {' '}\n            {t(\n              'olm~Select the checkbox below to also remove all Operands associated with this Operator.',\n            )}\n          </>\n        )}{' '}\n        {t(\n          'olm~If your Operator configured off-cluster resources, these will continue to run and require manual cleanup.',\n        )}\n      </p>\n      {removePlugins && (\n        <p>\n          {t('olm~The console plugin provided by this operator will be disabled and removed.', {\n            count: enabledPlugins.length,\n          })}\n        </p>\n      )}\n    </>\n  );\n\n  const operandsSection = operandsLoadedErrorMessage ? (\n    <OperandsLoadedErrorAlert operandsLoadedErrorMessage={operandsLoadedErrorMessage} />\n  ) : (\n    showOperandsContent && (\n      <>\n        <span className=\"co-operator-uninstall__operands-section\">\n          <h2>{t('olm~Operand instances')}</h2>\n          <OperandsTable\n            operands={operands}\n            loaded={operandsLoaded}\n            csvName={csvName}\n            cancel={cancel} // for breadcrumbs & cancel modal when clicking on operand links\n          />\n        </span>\n        <Checkbox\n          onChange={({ currentTarget }) => setDeleteOperands(currentTarget.checked)}\n          name=\"delete-all-operands\"\n          label={t('olm~Delete all operand instances for this operator')}\n          checked={deleteOperands}\n        />\n      </>\n    )\n  );\n\n  const operandDeletionAlert = operandDeletionErrors.length ? (\n    <OperandDeletionErrorAlert\n      operandDeletionErrors={operandDeletionErrors}\n      csvName={csvName}\n      cancel={cancel}\n    />\n  ) : operandDeletionVerificationError ? (\n    <OperandsLoadedErrorAlert\n      operandsLoadedErrorMessage={t('olm~Error listing operand to verify deletion')}\n    />\n  ) : (\n    <OperandDeletionSuccessAlert name={name} namespace={namespace} />\n  );\n\n  const results = (\n    <>\n      <UninstallAlert\n        errorMessage={\n          clusterServiceVersionExistsError ||\n          operatorUninstallErrorMessage ||\n          (operandDeletionErrors.length\n            ? t('olm~Operator could not be uninstalled due to error deleting its Operands')\n            : '')\n        }\n        name={name}\n        namespace={namespace}\n      />\n      {deleteOperands && operandDeletionAlert}\n    </>\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content co-catalog-install-modal\">\n      <ModalTitle className=\"modal-header\">\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> {t('olm~Uninstall Operator?')}\n      </ModalTitle>\n      <ModalBody>\n        {showInstructions && (\n          <>\n            <p>\n              <Trans t={t} ns=\"olm\">\n                Operator <strong>{{ name }}</strong> will be removed from{' '}\n                <strong>{{ namespace }}</strong>.\n              </Trans>\n            </p>\n            {!optedOut && <>{instructions}</>}\n            {uninstallMessage && (\n              <>\n                <h2>{t('olm~Message from Operator developer')}</h2>\n                <p>{uninstallMessage}</p>\n              </>\n            )}\n            {!optedOut && <>{operandsSection}</>}\n          </>\n        )}\n        {operandsDeleteInProgress && (\n          <OperandDeleteProgress total={operands.length} remaining={operandsRemaining} />\n        )}\n        {operatorUninstallInProgress && (\n          <div>\n            <p>{t('olm~Uninstalling the Operator...')}</p>\n          </div>\n        )}\n        {isSubmitFinished && results}\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitInProgress}\n        cancel={cancel}\n        submitDanger={!isSubmitFinished} // if submit finished show a non-danger 'OK'\n        submitText={t(isSubmitFinished ? 'olm~OK' : 'olm~Uninstall')}\n        submitDisabled={isSubmitInProgress}\n      />\n    </form>\n  );\n};\n\nconst OperandDeleteProgress: React.FC<{\n  total: number;\n  remaining: number;\n}> = ({ total, remaining }) => {\n  const { t } = useTranslation();\n  const progressLabel = t('olm~Remaining Operands: {{remaining}} of {{total}} ', {\n    remaining,\n    total,\n  });\n  return (\n    <div>\n      <Progress\n        value={total - remaining}\n        max={total}\n        valueText={progressLabel}\n        label={progressLabel}\n        title={t('olm~Cleaning up operand instances...')}\n        size={ProgressSize.lg}\n      />\n      <div className=\"co-alert--margin-top\">\n        <p>\n          {t(\n            'olm~The operands have been marked for deletion and are being removed. Canceling this operation will leave the Operator installed though its operand instances will continue to be deleted.',\n          )}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst OperandsLoadedErrorAlert: React.FC<{ operandsLoadedErrorMessage: string }> = ({\n  operandsLoadedErrorMessage,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant=\"warning\" className=\"co-alert\" title={t('olm~Cannot load Operands')} isInline>\n      <p>\n        {t(\n          'olm~There was an error loading operands for this operator. Operands will need to be deleted manually.',\n        )}\n      </p>\n      <p>{operandsLoadedErrorMessage}</p>\n    </Alert>\n  );\n};\n\nconst OperatorUninstallSuccessAlert: React.FC<{ name: string; namespace: string }> = ({\n  name,\n  namespace,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"success\"\n      className=\"co-alert\"\n      title={t('olm~Successfully uninstalled Operator')}\n      isInline\n    >\n      <p>\n        <Trans t={t} ns=\"olm\">\n          Operator <strong>{{ name }}</strong> successfully uninstalled from{' '}\n          <strong>{{ namespace }}</strong>.\n        </Trans>\n      </p>\n    </Alert>\n  );\n};\n\nconst OperatorUninstallErrorAlert: React.FC<{ errorMessage: string }> = ({ errorMessage }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"danger\"\n      className=\"co-alert\"\n      title={t('olm~Error uninstalling Operator')}\n      isInline\n    >\n      <p>\n        {t('olm~There was an error uninstalling the operator.')}\n        <br />\n        {errorMessage}\n      </p>\n    </Alert>\n  );\n};\n\nconst OperandDeletionErrorAlert: React.FC<{\n  operandDeletionErrors: OperandError[];\n  csvName: string;\n  cancel?: () => void;\n}> = ({ operandDeletionErrors, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant=\"danger\" className=\"co-alert\" title={t('olm~Error deleting Operands')} isInline>\n      <p>\n        {t(\n          'olm~There were errors deleting the following Operands, they will need to be deleted manually:',\n        )}\n      </p>\n      <OperandErrorList\n        operandErrors={operandDeletionErrors}\n        csvName={csvName}\n        cancel={cancel} // for breadcrumbs & cancel modal when clicking on operand links\n      />\n    </Alert>\n  );\n};\n\nconst OperandDeletionSuccessAlert: React.FC<{ name: string; namespace: string }> = ({\n  name,\n  namespace,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Alert\n      variant=\"success\"\n      className=\"co-alert\"\n      title={t('olm~Successfully deleted all Operand Instances')}\n      isInline\n    >\n      <p>\n        <Trans t={t} ns=\"olm\">\n          All Operand instances for Operator <strong>{{ name }}</strong> in{' '}\n          <strong>{{ namespace }}</strong> have been deleted.\n        </Trans>\n      </p>\n    </Alert>\n  );\n};\n\nconst UninstallAlert: React.FC<{ errorMessage: string; name: string; namespace: string }> = ({\n  errorMessage,\n  name,\n  namespace,\n}) =>\n  errorMessage ? (\n    <OperatorUninstallErrorAlert errorMessage={errorMessage} />\n  ) : (\n    <OperatorUninstallSuccessAlert name={name} namespace={namespace} />\n  );\n\nconst OperandsTable: React.FC<OperandsTableProps> = ({ operands, loaded, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <StatusBox\n      skeleton={<div className=\"loading-skeleton--table\" />}\n      data={operands}\n      loaded={loaded}\n    >\n      <table className=\"pf-v5-c-table pf-m-compact pf-m-border-rows\">\n        <thead className=\"pf-v5-c-table__thead\">\n          <tr className=\"pf-v5-c-table__tr\" key=\"operand-table-header-row\">\n            <th className=\"pf-m-width-35 pf-v5-c-table__th\">{t('olm~Name')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('olm~Kind')}</th>\n            <th className=\"pf-v5-c-table__th\">{t('olm~Namespace')}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {operands\n            .sort((a, b) => a.metadata.name.localeCompare(b.metadata.name))\n            .map((operand) => (\n              <tr className=\"pf-v5-c-table__tr\" key={operand.metadata.uid}>\n                <td className=\"pf-v5-c-table__td\">\n                  <OperandLink obj={operand} csvName={csvName} onClick={cancel} />\n                </td>\n                <td\n                  className=\"pf-v5-c-table__td pf-m-break-word\"\n                  data-test-operand-kind={operand.kind}\n                >\n                  {operand.kind}\n                </td>\n                <td className=\"pf-v5-c-table__td\">\n                  {operand.metadata.namespace ? (\n                    <ResourceLink\n                      kind=\"Namespace\"\n                      name={operand.metadata.namespace}\n                      onClick={cancel}\n                    />\n                  ) : (\n                    '-'\n                  )}\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </StatusBox>\n  );\n};\n\nconst OperandErrorList: React.FC<OperandErrorListProps> = ({ operandErrors, csvName, cancel }) => {\n  const { t } = useTranslation();\n  return (\n    <ul className=\"co-operator-uninstall-alert__list\">\n      {_.map(operandErrors, (operandError) => (\n        <li\n          key={operandError.operand.metadata.uid}\n          className=\"pf-v5-c-list pf-m-plain co-operator-uninstall-alert__list-item\"\n        >\n          <OperandLink obj={operandError.operand} csvName={csvName} onClick={cancel} />{' '}\n          {operandError.operand.kind}\n          {'  '}\n          {t('olm~Error: {{error}}', {\n            error: operandError.errorMessage,\n          })}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport const createUninstallOperatorModal = createModalLauncher(UninstallOperatorModal);\n\nexport type UninstallOperatorModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sKill: (kind: K8sKind, resource: K8sResourceKind, options: any, json: any) => Promise<any>;\n  k8sGet: (kind: K8sKind, name: string, namespace: string) => Promise<K8sResourceKind>;\n  k8sPatch: (\n    kind: K8sKind,\n    resource: K8sResourceKind,\n    data: { op: string; path: string; value: any }[],\n  ) => Promise<any>;\n  subscription: SubscriptionKind | K8sResourceKind;\n  csv?: ClusterServiceVersionKind;\n  blocking?: boolean;\n};\n\ntype OperandsTableProps = {\n  operands: K8sResourceCommon[];\n  loaded: boolean;\n  csvName: string;\n  cancel?: () => void;\n};\n\ntype OperandError = { operand: K8sResourceCommon; errorMessage: string };\ntype OperandErrorListProps = {\n  operandErrors?: OperandError[];\n  csvName: string;\n  cancel?: () => void;\n};\n\nUninstallOperatorModal.displayName = 'UninstallOperatorModal';\n","import * as React from 'react';\nimport { consoleFetchJSON as coFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport const useOperands = (\n  operatorName: string,\n  operatorNamespace: string,\n): [K8sResourceCommon[], boolean, string] => {\n  const [operands, setOperands] = React.useState<K8sResourceCommon[]>([]);\n  const [loaded, setLoaded] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n\n  React.useEffect(() => {\n    const url = `${window.SERVER_FLAGS.basePath}api/list-operands/?name=${operatorName}&namespace=${operatorNamespace}`;\n    coFetchJSON(url)\n      .then((data) => {\n        setOperands(data?.items ?? []);\n        setLoaded(true);\n        setErrorMessage('');\n      })\n      .catch((err) => {\n        setOperands([]);\n        setLoaded(true);\n        setErrorMessage(\n          `Error loading Operands for ${operatorName} in ${operatorNamespace}: ${err}`,\n        );\n      });\n  }, [operatorName, operatorNamespace]);\n\n  return [operands, loaded, errorMessage];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { RadioInput } from '@console/internal/components/radio';\nimport {\n  K8sKind,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { SubscriptionModel, InstallPlanModel } from '../../models';\nimport { SubscriptionKind, InstallPlanApproval, InstallPlanKind } from '../../types';\n\nconst getApprovalStrategy = (obj: InstallPlanKind | SubscriptionKind): InstallPlanApproval =>\n  (obj as SubscriptionKind)?.spec?.installPlanApproval ??\n  (obj as InstallPlanKind)?.spec?.approval ??\n  InstallPlanApproval.Automatic;\n\nexport const InstallPlanApprovalModal: React.FC<InstallPlanApprovalModalProps> = ({\n  cancel,\n  close,\n  k8sUpdate,\n  obj,\n}) => {\n  const { t } = useTranslation();\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n  const [selectedApprovalStrategy, setSelectedApprovalStrategy] = React.useState(\n    getApprovalStrategy(obj),\n  );\n  const submit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>): void => {\n      event.preventDefault();\n      const updatedObj = _.cloneDeep(obj);\n      if (referenceFor(updatedObj) === referenceForModel(SubscriptionModel)) {\n        (updatedObj as SubscriptionKind).spec.installPlanApproval = selectedApprovalStrategy;\n      } else if (referenceFor(updatedObj) === referenceForModel(InstallPlanModel)) {\n        (updatedObj as InstallPlanKind).spec.approval = selectedApprovalStrategy;\n      }\n      handlePromise(k8sUpdate(modelFor(referenceFor(obj)), updatedObj))\n        .then(() => close?.())\n        .catch(_.noop);\n    },\n    [close, handlePromise, k8sUpdate, obj, selectedApprovalStrategy],\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle className=\"modal-header\">{t('olm~Change update approval strategy')}</ModalTitle>\n      <ModalBody>\n        <div className=\"co-m-form-row\">\n          <p>{t('olm~What strategy is used for approving updates?')}</p>\n        </div>\n        <div className=\"co-m-form-row row\">\n          <div className=\"col-sm-12\">\n            <RadioInput\n              onChange={(e) => setSelectedApprovalStrategy(e.target.value)}\n              value={InstallPlanApproval.Automatic}\n              checked={selectedApprovalStrategy === InstallPlanApproval.Automatic}\n              title={t(`olm~Automatic`)}\n              subTitle={`(${t('public~default')})`}\n            >\n              <div className=\"co-m-radio-desc\">\n                <p className=\"text-muted\">\n                  {t('olm~New updates will be installed as soon as they become available.')}\n                </p>\n              </div>\n            </RadioInput>\n          </div>\n          <div className=\"col-sm-12\">\n            <RadioInput\n              onChange={(e) => setSelectedApprovalStrategy(e.target.value)}\n              value={InstallPlanApproval.Manual}\n              checked={selectedApprovalStrategy === InstallPlanApproval.Manual}\n              title={t(`olm~Manual`)}\n            >\n              <div className=\"co-m-radio-desc\">\n                <p className=\"text-muted\">\n                  {t('olm~New updates need to be manually approved before installation begins.')}\n                </p>\n              </div>\n            </RadioInput>\n          </div>\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={inProgress}\n        errorMessage={errorMessage}\n        cancel={cancel}\n        submitText={t('public~Save')}\n        submitDisabled={getApprovalStrategy(obj) === selectedApprovalStrategy}\n      />\n    </form>\n  );\n};\n\nexport const createInstallPlanApprovalModal = createModalLauncher<InstallPlanApprovalModalProps>(\n  InstallPlanApprovalModal,\n);\n\nexport type InstallPlanApprovalModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  obj: InstallPlanKind | SubscriptionKind;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { RadioInput } from '@console/internal/components/radio';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { SubscriptionModel, ClusterServiceVersionModel } from '../../models';\nimport { SubscriptionKind, PackageManifestKind } from '../../types';\nimport { DeprecatedOperatorWarningIcon } from '../deprecated-operator-warnings/deprecated-operator-warnings';\n\nexport const SubscriptionChannelModal: React.FC<SubscriptionChannelModalProps> = ({\n  cancel,\n  close,\n  k8sUpdate,\n  pkg,\n  subscription,\n}) => {\n  const { t } = useTranslation();\n  const currentChannel = subscription?.spec?.channel ?? pkg?.status?.channels?.[0]?.name;\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n  const [selectedChannel, setSelectedChannel] = React.useState(currentChannel);\n\n  const submit = React.useCallback(\n    (event: React.FormEvent<HTMLFormElement>): void => {\n      event.preventDefault();\n      handlePromise(\n        k8sUpdate(SubscriptionModel, {\n          ...subscription,\n          spec: {\n            ...subscription.spec,\n            channel: selectedChannel,\n          },\n        }),\n      )\n        .then(() => close?.())\n        .catch(() => {});\n    },\n    [close, handlePromise, k8sUpdate, selectedChannel, subscription],\n  );\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle className=\"modal-header\">\n        {t('olm~Change Subscription update channel')}\n      </ModalTitle>\n      <ModalBody>\n        <div className=\"co-m-form-row\">\n          <p>{t('olm~Which channel is used to receive updates?')}</p>\n        </div>\n        <div className=\"co-m-form-row row\">\n          {pkg?.status?.channels?.map?.((channel) => (\n            <div key={channel.name} className=\"col-sm-12\">\n              <RadioInput\n                onChange={(e) => setSelectedChannel(e.target.value)}\n                value={channel.name}\n                checked={selectedChannel === channel.name}\n                title={channel.name}\n                subTitle={\n                  <ResourceLink\n                    linkTo={false}\n                    name={channel.currentCSV}\n                    title={channel.currentCSV}\n                    kind={referenceForModel(ClusterServiceVersionModel)}\n                  >\n                    {channel?.deprecation ? (\n                      <DeprecatedOperatorWarningIcon deprecation={channel?.deprecation} />\n                    ) : null}\n                  </ResourceLink>\n                }\n              />\n            </div>\n          ))}\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={inProgress}\n        errorMessage={errorMessage}\n        cancel={cancel}\n        submitText={t('public~Save')}\n        submitDisabled={selectedChannel === currentChannel}\n      />\n    </form>\n  );\n};\n\nexport const createSubscriptionChannelModal = createModalLauncher<SubscriptionChannelModalProps>(\n  SubscriptionChannelModal,\n);\n\nexport type SubscriptionChannelModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  subscription: SubscriptionKind;\n  pkg: PackageManifestKind;\n};\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Form/form.mjs';\nexport const FormAlert = (_a) => {\n    var { children = null, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (\n    // There are currently no associated styles with the pf-v5-c-form_alert class.\n    // Therefore, it does not exist in react-styles\n    React.createElement(\"div\", Object.assign({}, props, { className: css(`${styles.form}__alert`, className) }), children));\n};\nFormAlert.displayName = 'FormAlert';\n//# sourceMappingURL=FormAlert.js.map"],"sourceRoot":""}