{"version":3,"sources":["webpack:///./public/components/template-instance.tsx"],"names":["menuActions","factory","common","tableColumnClasses","columnClass","TemplateInstanceTableRow","obj","className","kind","name","metadata","namespace","status","actions","resource","TemplateInstanceList","props","t","Header","title","sortField","transforms","sortFunc","Row","virtualize","allStatuses","TemplateInstancePage","filters","filterGroupName","type","reducer","items","id","ListComponent","canCreate","rowFilters","TemplateInstanceDetails","secretName","requester","objects","conditions","text","label","ref","i","key","TemplateInstanceDetailsPage","pages","details","editYaml"],"mappings":"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","file":"template-instance-chunk-96f44789a30dbadc54ed.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\n\nimport { Status } from '@console/shared';\nimport { DetailsPage, ListPage, RowFunctionArgs, Table, TableData } from './factory';\nimport { Conditions } from './conditions';\nimport { getTemplateInstanceStatus, referenceFor, TemplateInstanceKind } from '../module/k8s';\nimport {\n  EmptyBox,\n  Kebab,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from './utils';\n\nconst menuActions = Kebab.factory.common;\n\nconst tableColumnClasses = [\n  'pf-v5-u-w-42-on-md',\n  'pf-v5-u-w-42-on-md',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-16-on-md',\n  Kebab.columnClass,\n];\n\nconst TemplateInstanceTableRow: React.FC<RowFunctionArgs<TemplateInstanceKind>> = ({ obj }) => {\n  return (\n    <>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink\n          kind=\"TemplateInstance\"\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={getTemplateInstanceStatus(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind=\"TemplateInstance\" resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const TemplateInstanceList: React.SFC = (props) => {\n  const { t } = useTranslation();\n\n  const TemplateInstanceTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Status'),\n        sortFunc: 'getTemplateInstanceStatus',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~TemplateInstances')}\n      Header={TemplateInstanceTableHeader}\n      Row={TemplateInstanceTableRow}\n      virtualize\n    />\n  );\n};\n\nconst allStatuses = ['Ready', 'Not Ready', 'Failed'];\n\nexport const TemplateInstancePage: React.SFC<TemplateInstancePageProps> = (props) => {\n  const { t } = useTranslation();\n\n  const filters = [\n    {\n      filterGroupName: t('public~Status'),\n      type: 'template-instance-status',\n      reducer: getTemplateInstanceStatus,\n      items: _.map(allStatuses, (status) => ({\n        id: status,\n        title: status,\n      })),\n    },\n  ];\n\n  return (\n    <ListPage\n      {...props}\n      title={t('public~TemplateInstances')}\n      kind=\"TemplateInstance\"\n      ListComponent={TemplateInstanceList}\n      canCreate={false}\n      rowFilters={filters}\n    />\n  );\n};\n\nconst TemplateInstanceDetails: React.SFC<TemplateInstanceDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  const status = getTemplateInstanceStatus(obj);\n  const secretName = _.get(obj, 'spec.secret.name');\n  const requester = _.get(obj, 'spec.requester.username');\n  const objects = _.get(obj, 'status.objects', []);\n  const conditions = _.get(obj, 'status.conditions', []);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~TemplateInstance details')} />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('public~Status')}</dt>\n                <dd>\n                  <Status status={status} />\n                </dd>\n                {secretName && (\n                  <>\n                    <dt>{t('public~Parameters')}</dt>\n                    <dd>\n                      <ResourceLink\n                        kind=\"Secret\"\n                        name={secretName}\n                        namespace={obj.metadata.namespace}\n                      />\n                    </dd>\n                  </>\n                )}\n                <dt>{t('public~Requester')}</dt>\n                <dd>{requester || '-'}</dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Objects')} />\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          <div className=\"row co-m-table-grid__head\">\n            <div className=\"col-sm-6\">{t('public~Name')}</div>\n            <div className=\"col-sm-6\">{t('public~Namespace')}</div>\n          </div>\n          <div className=\"co-m-table-grid__body\">\n            {_.isEmpty(objects) ? (\n              <EmptyBox label={t('public~Objects')} />\n            ) : (\n              _.map(objects, ({ ref }, i) => (\n                <div className=\"row co-resource-list__item\" key={i}>\n                  <div className=\"col-sm-6\">\n                    <ResourceLink\n                      kind={referenceFor(ref)}\n                      name={ref.name}\n                      namespace={ref.namespace}\n                    />\n                  </div>\n                  <div className=\"col-sm-6\">\n                    {ref.namespace ? <ResourceLink kind=\"Namespace\" name={ref.namespace} /> : '-'}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const TemplateInstanceDetailsPage: React.SFC = (props) => (\n  <DetailsPage\n    {...props}\n    kind=\"TemplateInstance\"\n    menuActions={menuActions}\n    pages={[navFactory.details(TemplateInstanceDetails), navFactory.editYaml()]}\n  />\n);\n\ntype TemplateInstancePageProps = {\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype TemplateInstanceDetailsProps = {\n  obj: TemplateInstanceKind;\n};\n"],"sourceRoot":""}