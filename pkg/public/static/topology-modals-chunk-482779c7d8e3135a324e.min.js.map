{"version":3,"sources":["webpack:///./packages/topology/src/extensions/topology.ts","webpack:///./packages/topology/src/data-transforms/ModelContext.ts","webpack:///./packages/topology/src/components/dropdowns/ApplicationDropdown.tsx","webpack:///./packages/topology/src/data-transforms/DataModelProvider.tsx","webpack:///./packages/topology/src/data-transforms/DataModelExtension.tsx","webpack:///./packages/topology/src/data-transforms/TopologyDataRetriever.tsx","webpack:///./packages/topology/src/data-transforms/updateTopologyDataModel.ts","webpack:///./packages/topology/src/data-transforms/data-transformer.ts","webpack:///./packages/topology/src/data-transforms/useMonitoringAlerts.tsx","webpack:///./public/components/graphs/prometheus-rules-hook.ts","webpack:///./packages/topology/src/extensions/index.ts","webpack:///./packages/topology/src/components/dropdowns/ApplicationSelector.tsx","webpack:///./packages/topology/src/components/modals/EditApplicationModal.tsx"],"names":["isTopologyComponentFactory","e","type","isTopologyDataModelFactory","isTopologyCreateConnector","isTopologyDisplayFilters","isTopologyDecoratorProvider","ExtensibleModel","namespace","extensions","undefined","model","nodes","edges","loaded","loadError","extensionsLoaded","watchedResources","updateWatchedResources","extensionKeys","Object","keys","this","reduce","acc","key","resources","resList","forEach","resKey","updateExtension","id","extension","updateExtensionsLoaded","getWorkloadResources","kindsMap","kind","workloadKeys","getExtensionModels","topologyModel","getters","dataModelGetters","length","Promise","resolve","depicters","dataModelDepicters","workloadResources","promises","map","getter","console","error","all","then","models","reconcileModel","dataModelReconcilers","reconciler","ref","isEmptyModel","prev","every","dataModelGetter","dataModelDepicter","dataModelReconciler","onExtensionsLoaded","workloadKey","includes","push","sort","k1","k2","priority","prioritizedKeys","ModelContext","props","t","modelFactories","dynamicModelFactories","namespacedDynamicFactories","watchedBaseResources","modelFactory","factoryResources","properties","prop","placeholder","dataSelector","getNamespacedDynamicModelFactories","entries","resource","flattenedResource","resourceKey","opts","version","extensionReference","internalModel","group","warn","pluginID","internalReference","flattenResource","children","setModel","Provider","value","factory","dataModelFactory","dataModelContext","extensionContext","getExtension","current","getDataModel","isResourceDepicted","getDataModelReconciler","catch","depicter","trafficData","setResources","monitoringAlerts","resourcesList","debouncedUpdateResources","updatedResources","res","updateTopologyDataModel","loadErrorKey","find","optional","getLoadError","isLoaded","extensionsModel","fullModel","getTrafficConnectors","filteredWorkload","filter","data","nodeType","sourceTrafficNode","wrkld","source","targetTrafficNode","target","sourceResourceNode","metadata","name","targetResourceNode","uid","traffic","baseDataModelGetter","baseModel","baseDataModel","typedDataModel","item","getBaseTopologyDataModel","n","child","groupResources","c","updateAppGroupChildren","dc","createVisualConnectors","createTrafficConnectors","useMonitoringAlerts","alertsResponse","alertsError","alertsLoading","response","alertData","alerts","alert","activeAt","rule","evaluationTime","lastEvaluation","ruleAlert","usePrometheusRulesPoll","delay","url","endpoint","RULES","noProjectsAvailable","subPath","applicationsAvailable","setApplicationsAvailable","availableApplications","projectsAvailable","selectedKey","touched","nameField","setFieldValue","setFieldTouched","applicationExists","setApplicationExists","applicationNameInputRef","fieldId","isValid","errorMessage","actionItems","actionTitle","actionKey","label","inputHelpText","focus","ariaLabel","dropDownClassName","menuClassName","autoSelect","onChange","application","onLoad","applicationList","noApplicationsAvailable","variant","icon","text","required","helpText","validated","warning","default","event","trim","onBlur","trimmedApplicationName","EditApplicationForm","handleSubmit","isSubmitting","cancel","values","initialApplication","status","dirty","onSubmit","className","headingLevel","size","ns","resourceName","submitText","submitDisabled","inProgress","submitError","EditApplicationModal","actions","resourceKind","handlePromise","close","setStatus","initialValues","formikProps","editApplicationModal"],"mappings":"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","file":"topology-modals-chunk-482779c7d8e3135a324e.min.js","sourcesContent":["import { TopologyQuadrant } from '@patternfly/react-topology';\nimport { WatchK8sResources } from '@console/dynamic-plugin-sdk';\nimport { CodeRef } from '@console/dynamic-plugin-sdk/src/types';\nimport { Extension } from '@console/plugin-sdk/src/typings/base';\nimport {\n  TopologyApplyDisplayOptions,\n  TopologyDataModelDepicted,\n  TopologyDataModelGetter,\n  TopologyDisplayOption,\n  CreateConnectionGetter,\n  ViewComponentFactory,\n  TopologyDataModelReconciler,\n  TopologyDecoratorGetter,\n} from '../topology-types';\n\nnamespace ExtensionProperties {\n  export interface TopologyComponentFactory {\n    /** Getter for a ViewComponentFactory */\n    getFactory: CodeRef<ViewComponentFactory>;\n  }\n\n  export interface TopologyDataModelFactory {\n    /** Unique ID for the factory. */\n    id: string;\n    /** Priority for the factory */\n    priority: number;\n    /** Resources to be fetched from useK8sWatchResources hook. */\n    resources?: (namespace: string) => WatchK8sResources<any>;\n    /** Keys in resources containing workloads. */\n    workloadKeys?: string[];\n    /** Getter for the data model factory */\n    getDataModel?: CodeRef<TopologyDataModelGetter>;\n    /** Getter for function to determine if a resource is depicted by this model factory */\n    isResourceDepicted?: CodeRef<TopologyDataModelDepicted>;\n    /** Getter for function to reconcile data model after all extensions' models have loaded */\n    getDataModelReconciler?: CodeRef<TopologyDataModelReconciler>;\n  }\n\n  export interface TopologyCreateConnector {\n    /** Getter for the create connector function */\n    getCreateConnector: CodeRef<CreateConnectionGetter>;\n  }\n\n  export interface TopologyDisplayFilters {\n    // Getter for topology filters specific to the extension\n    getTopologyFilters: CodeRef<() => TopologyDisplayOption[]>;\n    // Function to apply filters to the model\n    applyDisplayOptions: CodeRef<TopologyApplyDisplayOptions>;\n  }\n\n  export interface TopologyDecoratorProvider {\n    id: string;\n    priority: number;\n    quadrant: TopologyQuadrant;\n    decorator: CodeRef<TopologyDecoratorGetter>;\n  }\n}\n\nexport interface TopologyComponentFactory\n  extends Extension<ExtensionProperties.TopologyComponentFactory> {\n  type: 'Topology/ComponentFactory';\n}\n\nexport interface TopologyDataModelFactory\n  extends Extension<ExtensionProperties.TopologyDataModelFactory> {\n  type: 'Topology/DataModelFactory';\n}\n\nexport interface TopologyCreateConnector\n  extends Extension<ExtensionProperties.TopologyCreateConnector> {\n  type: 'Topology/CreateConnector';\n}\n\nexport interface TopologyDisplayFilters\n  extends Extension<ExtensionProperties.TopologyDisplayFilters> {\n  type: 'Topology/DisplayFilters';\n}\n\nexport interface TopologyDecoratorProvider\n  extends Extension<ExtensionProperties.TopologyDecoratorProvider> {\n  type: 'Topology/Decorator';\n}\n\nexport const isTopologyComponentFactory = (e: Extension): e is TopologyComponentFactory => {\n  return e.type === 'Topology/ComponentFactory';\n};\n\nexport const isTopologyDataModelFactory = (e: Extension): e is TopologyDataModelFactory => {\n  return e.type === 'Topology/DataModelFactory';\n};\n\nexport const isTopologyCreateConnector = (e: Extension): e is TopologyCreateConnector => {\n  return e.type === 'Topology/CreateConnector';\n};\n\nexport const isTopologyDisplayFilters = (e: Extension): e is TopologyDisplayFilters => {\n  return e.type === 'Topology/DisplayFilters';\n};\n\nexport const isTopologyDecoratorProvider = (e: Extension): e is TopologyDecoratorProvider => {\n  return e.type === 'Topology/Decorator';\n};\n","import { createContext } from 'react';\nimport { Model } from '@patternfly/react-topology';\nimport { observable, computed, makeObservable } from 'mobx';\nimport { WatchK8sResources } from '@console/dynamic-plugin-sdk';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  TopologyDataModelDepicted,\n  TopologyDataModelGetter,\n  TopologyDataModelReconciler,\n  TopologyDataResources,\n} from '../topology-types';\nimport { WORKLOAD_TYPES } from '../utils/topology-utils';\nimport {\n  addToTopologyDataModel,\n  getBaseWatchedResources,\n  getWorkloadResources,\n} from './transform-utils';\n\nexport type ModelExtensionContext = {\n  priority: number;\n  resources?: (namespace: string) => WatchK8sResources<any>;\n  workloadKeys?: string[];\n  dataModelGetter?: TopologyDataModelGetter;\n  dataModelDepicter?: TopologyDataModelDepicted;\n  dataModelReconciler?: TopologyDataModelReconciler;\n};\n\nexport class ExtensibleModel {\n  private extensions: { [id: string]: ModelExtensionContext } = {};\n\n  public namespace: string = undefined;\n\n  public model: Model = { nodes: [], edges: [] };\n\n  public loaded: boolean = false;\n\n  public loadError: string = undefined;\n\n  public extensionsLoaded: boolean = false;\n\n  public watchedResources: WatchK8sResources<any> = {};\n\n  public constructor(namespace?: string) {\n    this.namespace = namespace;\n\n    makeObservable(this, {\n      namespace: observable,\n      model: observable.ref,\n      loaded: observable,\n      loadError: observable,\n      extensionsLoaded: observable,\n      watchedResources: observable.ref,\n      isEmptyModel: computed,\n    });\n  }\n\n  public onExtensionsLoaded: (extensibleModel: ExtensibleModel) => void;\n\n  private updateExtensionsLoaded(): void {\n    const extensionKeys = Object.keys(this.extensions);\n    const prev = this.extensionsLoaded;\n    this.extensionsLoaded =\n      extensionKeys.length > 1 &&\n      extensionKeys.every(\n        (key) =>\n          !!this.extensions[key].dataModelGetter &&\n          !!this.extensions[key].dataModelDepicter &&\n          !!this.extensions[key].dataModelReconciler,\n      );\n    if (!prev && this.extensionsLoaded && this.onExtensionsLoaded) {\n      this.onExtensionsLoaded(this);\n    }\n  }\n\n  public getExtensions(): { [id: string]: ModelExtensionContext } {\n    return this.extensions;\n  }\n\n  public getExtension(id: string): ModelExtensionContext {\n    return this.extensions[id];\n  }\n\n  public get workloadKeys(): string[] {\n    const workloadKeys = [...WORKLOAD_TYPES];\n    Object.keys(this.extensions).forEach((key) => {\n      if (this.extensions[key].workloadKeys) {\n        this.extensions[key].workloadKeys.forEach((workloadKey) => {\n          if (!workloadKeys.includes(workloadKey)) {\n            workloadKeys.push(workloadKey);\n          }\n        });\n      }\n    });\n    return workloadKeys;\n  }\n\n  public updateWatchedResources = (): void => {\n    const extensionKeys = Object.keys(this.extensions);\n    this.watchedResources = extensionKeys.reduce((acc, key) => {\n      if (this.extensions[key].resources) {\n        const resList = this.extensions[key].resources(this.namespace);\n        Object.keys(resList).forEach((resKey) => {\n          if (!acc[resKey]) {\n            acc[resKey] = resList[resKey];\n          }\n        });\n      }\n      return acc;\n    }, getBaseWatchedResources(this.namespace));\n  };\n\n  public updateExtension = (id: string, extension: ModelExtensionContext): void => {\n    this.extensions[id] = { ...(this.extensions[id] || {}), ...extension };\n    this.updateExtensionsLoaded();\n    this.updateWatchedResources();\n  };\n\n  public getWorkloadResources = (resources: TopologyDataResources): K8sResourceKind[] => {\n    const resList = this.watchedResources;\n    const kindsMap = Object.keys(resList).reduce((acc, key) => {\n      acc[key] = resList[key].kind;\n      return acc;\n    }, {});\n    return getWorkloadResources(resources, kindsMap, this.workloadKeys);\n  };\n\n  public get prioritizedKeys(): string[] {\n    return Object.keys(this.extensions).sort(\n      (k1, k2) => this.extensions[k1].priority - this.extensions[k2].priority,\n    );\n  }\n\n  public get dataModelGetters(): TopologyDataModelGetter[] {\n    return this.prioritizedKeys.reduce((acc, key) => {\n      if (this.extensions[key].dataModelGetter) {\n        acc.push(this.extensions[key].dataModelGetter);\n      }\n      return acc;\n    }, []);\n  }\n\n  public get dataModelDepicters(): TopologyDataModelDepicted[] {\n    return this.prioritizedKeys.reduce((acc, key) => {\n      if (this.extensions[key].dataModelDepicter) {\n        acc.push(this.extensions[key].dataModelDepicter);\n      }\n      return acc;\n    }, []);\n  }\n\n  public get dataModelReconcilers(): TopologyDataModelReconciler[] {\n    return this.prioritizedKeys.reduce((acc, key) => {\n      if (this.extensions[key].dataModelReconciler) {\n        acc.push(this.extensions[key].dataModelReconciler);\n      }\n      return acc;\n    }, []);\n  }\n\n  public get isEmptyModel(): boolean {\n    return (this.model?.nodes?.length ?? 0) === 0;\n  }\n\n  public getExtensionModels = async (resources: TopologyDataResources): Promise<Model> => {\n    const topologyModel: Model = {\n      nodes: [],\n      edges: [],\n    };\n    const getters = this.dataModelGetters;\n\n    if (!getters?.length) {\n      return Promise.resolve(topologyModel);\n    }\n\n    const depicters = this.dataModelDepicters;\n    const workloadResources = this.getWorkloadResources(resources);\n    const promises = getters.map((getter) => {\n      try {\n        return getter(this.namespace, resources, workloadResources);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Unable to add some resources to topology', e);\n        return null;\n      }\n    });\n\n    await Promise.all(promises).then((models) => {\n      models.forEach((model) => {\n        if (model) {\n          try {\n            addToTopologyDataModel(model, topologyModel, depicters);\n          } catch (e) {\n            // eslint-disable-next-line no-console\n            console.error('Unable to add some resources to topology', e);\n          }\n        }\n      });\n    });\n\n    return Promise.resolve(topologyModel);\n  };\n\n  public reconcileModel = (model: Model, resources: TopologyDataResources): void => {\n    this.dataModelReconcilers.forEach((reconciler) => {\n      try {\n        reconciler(model, resources);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Unable to reconcile some resources in topology', e);\n      }\n    });\n  };\n}\n\nexport const ModelContext = createContext<ExtensibleModel>(null);\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  isTopologyDataModelFactory as isDynamicTopologyDataModelFactory,\n  TopologyDataModelFactory as DynamicTopologyDataModelFactory,\n} from '@console/dynamic-plugin-sdk';\nimport { Firehose } from '@console/internal/components/utils';\nimport { useExtensions } from '@console/plugin-sdk/src';\nimport { ResourceDropdown } from '@console/shared';\nimport { getNamespacedDynamicModelFactories } from '../../data-transforms/DataModelProvider';\nimport { getBaseWatchedResources } from '../../data-transforms/transform-utils';\nimport { isTopologyDataModelFactory, TopologyDataModelFactory } from '../../extensions';\n\ninterface ApplicationDropdownProps {\n  id?: string;\n  ariaLabel?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  userSettingsPrefix?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  noneSelectorItem?: {\n    noneSelectorKey?: string;\n    noneSelectorTitle?: string;\n  };\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  onChange?: (key: string, name?: string) => void;\n  onLoad?: (items: { [key: string]: string }) => void;\n}\n\nconst ApplicationDropdown: React.FC<ApplicationDropdownProps> = ({ namespace, ...props }) => {\n  const { t } = useTranslation();\n  const modelFactories = useExtensions<TopologyDataModelFactory>(isTopologyDataModelFactory);\n  const dynamicModelFactories = useExtensions<DynamicTopologyDataModelFactory>(\n    isDynamicTopologyDataModelFactory,\n  );\n\n  const namespacedDynamicFactories = React.useMemo(\n    () => getNamespacedDynamicModelFactories(dynamicModelFactories),\n    [dynamicModelFactories],\n  );\n\n  const resources = React.useMemo(() => {\n    let watchedBaseResources = getBaseWatchedResources(namespace);\n    [...modelFactories, ...namespacedDynamicFactories].forEach((modelFactory) => {\n      const factoryResources = modelFactory.properties.resources?.(namespace);\n      if (factoryResources) {\n        watchedBaseResources = {\n          ...factoryResources,\n          ...watchedBaseResources,\n        };\n      }\n    });\n    return Object.keys(watchedBaseResources).map((key) => ({\n      ...watchedBaseResources[key],\n      prop: key,\n    }));\n  }, [namespacedDynamicFactories, modelFactories, namespace]);\n\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder={t('topology~Select an application')}\n        dataSelector={['metadata', 'labels', 'app.kubernetes.io/part-of']}\n      />\n    </Firehose>\n  );\n};\n\nexport default ApplicationDropdown;\n","import * as React from 'react';\nimport {\n  ExtensionK8sGroupKindModel,\n  isTopologyDataModelFactory as isDynamicTopologyDataModelFactory,\n  TopologyDataModelFactory as DynamicTopologyDataModelFactory,\n  WatchK8sResource,\n} from '@console/dynamic-plugin-sdk';\nimport {\n  modelForGroupKind,\n  referenceForExtensionModel,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { LoadedExtension, useExtensions } from '@console/plugin-sdk/src';\nimport { isTopologyDataModelFactory, TopologyDataModelFactory } from '../extensions/topology';\nimport DataModelExtension from './DataModelExtension';\nimport { ModelContext, ExtensibleModel } from './ModelContext';\nimport TopologyDataRetriever from './TopologyDataRetriever';\n\ninterface DataModelProviderProps {\n  namespace: string;\n  children?: React.ReactNode;\n}\n\nconst flattenResource = (\n  namespace: string,\n  extension: LoadedExtension<DynamicTopologyDataModelFactory>,\n  resourceKey: string,\n  model?: ExtensionK8sGroupKindModel,\n  opts = {} as Partial<WatchK8sResource>,\n) => {\n  if (!model) {\n    return { namespace, ...opts };\n  }\n\n  if (model.version) {\n    const extensionReference = referenceForExtensionModel(model); // requires model.version\n    return { namespace, kind: extensionReference, ...opts };\n  }\n\n  // If can't find reference for an extention model, fall back to internal reference\n  const internalModel = modelForGroupKind(model.group, model.kind); // Return null for CRDs\n  if (!internalModel) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Plugin \"${extension.pluginID}\": Could not find model (CRD) for group \"${model.group}\" and kind \"${model.kind}\" to determinate version. Please add a required flag to the extension to suppress this warning. The resource \"${resourceKey}\" will not be loaded and ignored in the topology view for now:`,\n      extension,\n      resourceKey,\n      model,\n      opts,\n    );\n    return null;\n  }\n  const internalReference = referenceForModel(internalModel);\n  return { namespace, kind: internalReference, ...opts };\n};\n\nexport const getNamespacedDynamicModelFactories = (\n  extensions: LoadedExtension<DynamicTopologyDataModelFactory>[],\n) =>\n  extensions.map((extension) => {\n    return {\n      ...extension,\n      properties: {\n        ...extension.properties,\n        resources: (namespace: string) =>\n          Object.entries(extension.properties.resources || {}).reduce((acc, [key, resource]) => {\n            const flattenedResource = flattenResource(\n              namespace,\n              extension,\n              key,\n              resource?.model,\n              resource?.opts,\n            );\n            if (flattenedResource) {\n              acc[key] = flattenedResource;\n            }\n            return acc;\n          }, {}),\n      },\n    };\n  });\n\nconst DataModelProvider: React.FC<DataModelProviderProps> = ({ namespace, children }) => {\n  const [model, setModel] = React.useState<ExtensibleModel>(new ExtensibleModel(namespace));\n\n  React.useEffect(() => {\n    setModel(new ExtensibleModel(namespace));\n  }, [namespace]);\n\n  const modelFactories = useExtensions<TopologyDataModelFactory>(isTopologyDataModelFactory);\n  const dynamicModelFactories = useExtensions<DynamicTopologyDataModelFactory>(\n    isDynamicTopologyDataModelFactory,\n  );\n\n  const namespacedDynamicFactories = React.useMemo(\n    () => getNamespacedDynamicModelFactories(dynamicModelFactories),\n    [dynamicModelFactories],\n  );\n\n  return (\n    <ModelContext.Provider value={model}>\n      {namespace && (\n        <>\n          {[...namespacedDynamicFactories, ...modelFactories].map((factory) => (\n            <DataModelExtension key={factory.properties.id} dataModelFactory={factory.properties} />\n          ))}\n        </>\n      )}\n      {namespace && <TopologyDataRetriever />}\n      {children}\n    </ModelContext.Provider>\n  );\n};\n\nexport default DataModelProvider;\n","import * as React from 'react';\nimport { useDeepCompareMemoize } from '@console/shared';\nimport { TopologyDataModelFactory } from '../extensions/topology';\nimport { ModelContext, ExtensibleModel, ModelExtensionContext } from './ModelContext';\n\ninterface DataModelExtensionProps {\n  dataModelFactory: TopologyDataModelFactory['properties'];\n}\n\nconst DataModelExtension: React.FC<DataModelExtensionProps> = ({ dataModelFactory }) => {\n  const dataModelContext = React.useContext<ExtensibleModel>(ModelContext);\n  const { id, priority, resources } = dataModelFactory;\n  const workloadKeys = useDeepCompareMemoize(dataModelFactory.workloadKeys);\n  const extensionContext = React.useRef<ModelExtensionContext>({\n    priority,\n    workloadKeys,\n    resources,\n  });\n\n  React.useEffect(() => {\n    const storedContext = dataModelContext.getExtension(id);\n    if (!storedContext) {\n      extensionContext.current = {\n        priority,\n        workloadKeys,\n        resources,\n      };\n      dataModelContext.updateExtension(id, extensionContext.current);\n\n      const { getDataModel, isResourceDepicted, getDataModelReconciler } = dataModelFactory;\n      if (getDataModel) {\n        getDataModel()\n          .then((getter) => {\n            extensionContext.current.dataModelGetter = getter;\n            dataModelContext.updateExtension(id, extensionContext.current);\n          })\n          .catch(() => {\n            extensionContext.current.dataModelGetter = () => Promise.resolve({});\n            dataModelContext.updateExtension(id, extensionContext.current);\n          });\n      } else {\n        extensionContext.current.dataModelGetter = () => Promise.resolve({});\n        dataModelContext.updateExtension(id, extensionContext.current);\n      }\n\n      if (isResourceDepicted) {\n        isResourceDepicted()\n          .then((depicter) => {\n            extensionContext.current.dataModelDepicter = depicter;\n            dataModelContext.updateExtension(id, extensionContext.current);\n          })\n          .catch(() => {\n            extensionContext.current.dataModelDepicter = () => false;\n            dataModelContext.updateExtension(id, extensionContext.current);\n          });\n      } else {\n        extensionContext.current.dataModelDepicter = () => false;\n        dataModelContext.updateExtension(id, extensionContext.current);\n      }\n\n      if (getDataModelReconciler) {\n        getDataModelReconciler()\n          .then((reconciler) => {\n            extensionContext.current.dataModelReconciler = reconciler;\n            dataModelContext.updateExtension(id, extensionContext.current);\n          })\n          .catch(() => {\n            extensionContext.current.dataModelReconciler = () => {};\n            dataModelContext.updateExtension(id, extensionContext.current);\n          });\n      } else {\n        extensionContext.current.dataModelReconciler = () => {};\n        dataModelContext.updateExtension(id, extensionContext.current);\n      }\n    }\n  }, [dataModelContext, dataModelFactory, id, priority, resources, workloadKeys]);\n\n  return null;\n};\n\nexport default DataModelExtension;\n","import * as React from 'react';\nimport { observer } from '@patternfly/react-topology';\nimport * as _ from 'lodash';\nimport { WatchK8sResources, WatchK8sResults } from '@console/dynamic-plugin-sdk';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { useDebounceCallback } from '@console/shared';\nimport { TopologyResourcesObject, TrafficData } from '../topology-types';\nimport { ModelContext, ExtensibleModel } from './ModelContext';\nimport { updateTopologyDataModel } from './updateTopologyDataModel';\nimport { useMonitoringAlerts } from './useMonitoringAlerts';\n\ntype TopologyDataRetrieverProps = {\n  trafficData?: TrafficData;\n};\n\nconst TopologyDataRetriever: React.FC<TopologyDataRetrieverProps> = ({ trafficData }) => {\n  const dataModelContext = React.useContext<ExtensibleModel>(ModelContext);\n  const { namespace, extensionsLoaded, watchedResources } = dataModelContext;\n  const [resources, setResources] = React.useState<WatchK8sResults<TopologyResourcesObject>>();\n  const monitoringAlerts = useMonitoringAlerts(namespace);\n  const resourcesList = React.useMemo<WatchK8sResources<any>>(\n    () => (namespace && extensionsLoaded ? watchedResources : {}),\n    [extensionsLoaded, watchedResources, namespace],\n  );\n\n  const debouncedUpdateResources = useDebounceCallback(setResources, 250);\n\n  const updatedResources = useK8sWatchResources<TopologyResourcesObject>(resourcesList);\n  React.useEffect(() => debouncedUpdateResources(updatedResources), [\n    debouncedUpdateResources,\n    updatedResources,\n  ]);\n\n  // Wipe the current model on a namespace change\n  React.useEffect(() => {\n    dataModelContext.model = null;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [namespace]);\n\n  React.useEffect(() => {\n    if (!_.isEmpty(resources)) {\n      updateTopologyDataModel(dataModelContext, resources, trafficData, monitoringAlerts)\n        .then((res) => {\n          dataModelContext.loadError = res.loadError;\n          if (res.loaded) {\n            dataModelContext.loaded = true;\n            dataModelContext.model = res.model;\n          }\n        })\n        .catch(() => {});\n    }\n  }, [resources, trafficData, dataModelContext, monitoringAlerts]);\n\n  return null;\n};\n\nexport default observer(TopologyDataRetriever);\n","import { Model } from '@patternfly/react-topology';\nimport { WatchK8sResults } from '@console/dynamic-plugin-sdk';\nimport { Alerts } from '@console/internal/components/monitoring/types';\nimport { TopologyResourcesObject, TrafficData } from '../topology-types';\nimport { baseDataModelGetter } from './data-transformer';\nimport { ExtensibleModel } from './ModelContext';\n\nexport const updateTopologyDataModel = (\n  dataModelContext: ExtensibleModel,\n  resources: WatchK8sResults<TopologyResourcesObject>,\n  trafficData: TrafficData,\n  monitoringAlerts: Alerts,\n): Promise<{ loaded: boolean; loadError: string; model: Model }> => {\n  const { extensionsLoaded, watchedResources } = dataModelContext;\n  if (!extensionsLoaded || !resources) {\n    return Promise.resolve({ loaded: false, loadError: '', model: null });\n  }\n\n  const getLoadError = (key) => {\n    if (resources[key].loadError && !watchedResources[key].optional) {\n      return resources[key].loadError;\n    }\n    return '';\n  };\n\n  const isLoaded = (key) => {\n    return resources[key].loaded || (resources[key].loadError && watchedResources[key].optional);\n  };\n\n  const loadErrorKey = Object.keys(resources).find((key) => getLoadError(key));\n  if (loadErrorKey) {\n    return Promise.resolve({\n      loaded: false,\n      loadError: resources[loadErrorKey].loadError,\n      model: null,\n    });\n  }\n\n  if (!Object.keys(resources).every((key) => isLoaded(key))) {\n    return Promise.resolve({ loaded: false, loadError: '', model: null });\n  }\n\n  // Get Workload objects from extensions\n  const workloadResources = dataModelContext.getWorkloadResources(resources);\n\n  // Get model from each extension\n  const depicters = dataModelContext.dataModelDepicters;\n  return dataModelContext.getExtensionModels(resources).then((extensionsModel) => {\n    const fullModel = baseDataModelGetter(\n      extensionsModel,\n      dataModelContext.namespace,\n      resources,\n      workloadResources,\n      depicters,\n      trafficData,\n      monitoringAlerts,\n    );\n    dataModelContext.reconcileModel(fullModel, resources);\n    return Promise.resolve({ loaded: true, loadError: '', model: fullModel });\n  });\n};\n","import { EdgeModel, Model } from '@patternfly/react-topology';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { Alerts } from '@console/internal/components/monitoring/types';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { createOverviewItemForType } from '@console/shared';\nimport { TYPE_APPLICATION_GROUP, TYPE_TRAFFIC_CONNECTOR, TYPE_WORKLOAD } from '../const';\nimport {\n  TopologyDataResources,\n  TrafficData,\n  KialiNode,\n  TopologyDataModelDepicted,\n} from '../topology-types';\nimport { WORKLOAD_TYPES } from '../utils/topology-utils';\nimport {\n  addToTopologyDataModel,\n  createTopologyNodeData,\n  getTopologyEdgeItems,\n  getTopologyGroupItems,\n  getTopologyNodeItem,\n  mergeGroup,\n  WorkloadModelProps,\n} from './transform-utils';\n\nexport const getFilteredTrafficWorkload = (nodes: KialiNode[]): KialiNode[] =>\n  nodes.filter(({ data }) => data.nodeType === TYPE_WORKLOAD);\n\nexport const getTrafficConnectors = (\n  trafficData: TrafficData,\n  resources: K8sResourceKind[],\n): EdgeModel[] => {\n  const filteredWorkload = getFilteredTrafficWorkload(trafficData.nodes);\n  return trafficData.edges.reduce((acc, { data }) => {\n    const { data: sourceTrafficNode } = filteredWorkload.find(\n      (wrkld) => wrkld.data.id === data.source,\n    );\n    const { data: targetTrafficNode } = filteredWorkload.find(\n      (wrkld) => wrkld.data.id === data.target,\n    );\n    const sourceResourceNode = resources.find((res) => {\n      return res.metadata.name === sourceTrafficNode[sourceTrafficNode.nodeType];\n    });\n    const targetResourceNode = resources.find(\n      (res) => res.metadata.name === targetTrafficNode[targetTrafficNode.nodeType],\n    );\n    return sourceResourceNode && targetResourceNode\n      ? [\n          ...acc,\n          {\n            id: `${sourceResourceNode.metadata.uid}_${targetResourceNode.metadata.uid}`,\n            type: TYPE_TRAFFIC_CONNECTOR,\n            source: sourceResourceNode.metadata.uid,\n            target: targetResourceNode.metadata.uid,\n            data: data.traffic,\n          },\n        ]\n      : acc;\n  }, []);\n};\n\nconst getBaseTopologyDataModel = (\n  resources: { [x: string]: Alerts } | TopologyDataResources,\n): Model => {\n  const baseDataModel: Model = {\n    nodes: [],\n    edges: [],\n  };\n\n  WORKLOAD_TYPES.forEach((key) => {\n    if (resources?.[key]?.data?.length) {\n      const typedDataModel: Model = {\n        nodes: [],\n        edges: [],\n      };\n\n      resources[key].data.forEach((resource) => {\n        const item = createOverviewItemForType(key, resource, resources);\n        if (item) {\n          const data = createTopologyNodeData(\n            resource,\n            item,\n            TYPE_WORKLOAD,\n            getImageForIconClass(`icon-openshift`),\n            undefined,\n            resources,\n          );\n          typedDataModel.nodes.push(\n            getTopologyNodeItem(resource, TYPE_WORKLOAD, data, WorkloadModelProps),\n          );\n          mergeGroup(getTopologyGroupItems(resource), typedDataModel.nodes);\n        }\n      });\n      addToTopologyDataModel(typedDataModel, baseDataModel);\n    }\n  });\n\n  return baseDataModel;\n};\n\nconst updateAppGroupChildren = (model: Model) => {\n  model.nodes.forEach((n) => {\n    if (n.type === TYPE_APPLICATION_GROUP) {\n      // Filter out any children removed by depicters\n      n.children = n.children.filter((id) => model.nodes.find((child) => child.id === id));\n      n.data.groupResources = n.children?.map((id) => model.nodes.find((c) => id === c.id)) ?? [];\n    }\n  });\n\n  // Remove any empty groups\n  model.nodes = model.nodes.filter(\n    (n) => n.type !== TYPE_APPLICATION_GROUP || n.children.length > 0,\n  );\n};\n\nconst createVisualConnectors = (model: Model, workloadResources: K8sResourceKind[]) => {\n  // Create all visual connectors\n  workloadResources.forEach((dc) => {\n    model.edges.push(...getTopologyEdgeItems(dc, workloadResources));\n  });\n};\n\nconst createTrafficConnectors = (\n  model: Model,\n  workloadResources: K8sResourceKind[],\n  trafficData?: TrafficData,\n) => {\n  // Create traffic connectors\n  if (trafficData) {\n    model.edges.push(...getTrafficConnectors(trafficData, workloadResources));\n  }\n};\n\nexport const baseDataModelGetter = (\n  model: Model,\n  namespace: string,\n  resources: TopologyDataResources,\n  workloadResources: K8sResourceKind[],\n  dataModelDepicters?: TopologyDataModelDepicted[],\n  trafficData?: TrafficData,\n  monitoringAlerts?: Alerts,\n): Model => {\n  const res = { ...resources, monitoringAlerts };\n  const baseModel = getBaseTopologyDataModel(res);\n  addToTopologyDataModel(baseModel, model, dataModelDepicters);\n\n  updateAppGroupChildren(model);\n  createVisualConnectors(model, workloadResources);\n  createTrafficConnectors(model, workloadResources, trafficData);\n\n  return model;\n};\n","import * as React from 'react';\nimport { Alert } from '@console/dynamic-plugin-sdk';\nimport { usePrometheusRulesPoll } from '@console/internal/components/graphs/prometheus-rules-hook';\nimport { getAlertsAndRules } from '@console/internal/components/monitoring/utils';\nimport { useDeepCompareMemoize } from '@console/shared';\n\nexport const useMonitoringAlerts = (\n  namespace: string,\n): {\n  data: Alert[];\n  loaded: boolean;\n  loadError: string;\n} => {\n  const [alertsResponse, alertsError, alertsLoading] = usePrometheusRulesPoll({ namespace });\n  const response = React.useMemo(() => {\n    let alertData;\n    if (!alertsLoading && !alertsError) {\n      alertData = getAlertsAndRules(alertsResponse?.data).alerts;\n\n      // Don't update due to time changes\n      alertData.forEach((alert) => {\n        delete alert.activeAt;\n        if (alert.rule) {\n          delete alert.rule.evaluationTime;\n          delete alert.rule.lastEvaluation;\n          alert.rule.alerts &&\n            alert.rule.alerts.forEach((ruleAlert) => {\n              delete ruleAlert.activeAt;\n            });\n        }\n      });\n    }\n    return { data: alertData, loaded: !alertsLoading, loadError: alertsError };\n  }, [alertsError, alertsLoading, alertsResponse]);\n\n  return useDeepCompareMemoize(response);\n};\n","import { useURLPoll } from '../utils/url-poll-hook';\nimport { getPrometheusURL, PrometheusEndpoint } from './helpers';\nimport { PrometheusRulesResponse } from '@console/dynamic-plugin-sdk';\n\nexport const usePrometheusRulesPoll = ({ delay, namespace }: PrometheusPollProps) => {\n  const url = getPrometheusURL({\n    endpoint: PrometheusEndpoint.RULES,\n    namespace,\n  });\n\n  return useURLPoll<PrometheusRulesResponse>(url, delay, namespace);\n};\n\ntype PrometheusPollProps = {\n  delay?: number;\n  namespace?: string;\n};\n","export * from './topology';\n","import * as React from 'react';\nimport {\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  TextInputTypes,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  InputField,\n  RedExclamationCircleIcon,\n  getFieldId,\n  useFormikValidationFix,\n} from '@console/shared';\nimport { CREATE_APPLICATION_KEY, UNASSIGNED_KEY } from '../../const';\nimport { sanitizeApplicationValue } from '../../utils/application-utils';\nimport ApplicationDropdown from './ApplicationDropdown';\n\ninterface ApplicationSelectorProps {\n  namespace?: string;\n  noProjectsAvailable?: boolean;\n  subPath?: string;\n}\n\nconst ApplicationSelector: React.FC<ApplicationSelectorProps> = ({\n  namespace,\n  noProjectsAvailable,\n  subPath,\n}) => {\n  const { t } = useTranslation();\n  const [applicationsAvailable, setApplicationsAvailable] = React.useState(true);\n  const availableApplications = React.useRef<string[]>([]);\n  const projectsAvailable = !noProjectsAvailable;\n\n  const [selectedKey, { touched, error }] = useField(\n    subPath ? `${subPath}.application.selectedKey` : 'application.selectedKey',\n  );\n  const [nameField] = useField(subPath ? `${subPath}.application.name` : 'application.name');\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const [applicationExists, setApplicationExists] = React.useState<boolean>(false);\n  const applicationNameInputRef = React.useRef<HTMLInputElement>();\n  const fieldId = getFieldId('application-name', 'dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(selectedKey.value);\n\n  const onDropdownChange = (key: string, application: string) => {\n    setFieldValue(selectedKey.name, key);\n    setFieldTouched(selectedKey.name, true);\n    setFieldValue(nameField.name, sanitizeApplicationValue(application, key));\n    setFieldTouched(nameField.name, true);\n    setApplicationExists(false);\n  };\n\n  const handleOnLoad = (applicationList: { [key: string]: string }) => {\n    const noApplicationsAvailable = _.isEmpty(applicationList);\n    setApplicationsAvailable(!noApplicationsAvailable);\n    availableApplications.current = _.keys(applicationList);\n    if (noApplicationsAvailable) {\n      setFieldValue(selectedKey.name, '');\n      setFieldValue(\n        nameField.name,\n        (selectedKey.value !== UNASSIGNED_KEY && nameField.value) ?? '',\n      );\n    }\n  };\n\n  const actionItems = [\n    {\n      actionTitle: t('topology~Create application'),\n      actionKey: CREATE_APPLICATION_KEY,\n    },\n    {\n      actionTitle: t('topology~No application group'),\n      actionKey: UNASSIGNED_KEY,\n    },\n  ];\n\n  const handleAppChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setApplicationExists(availableApplications.current.includes(event.target.value.trim()));\n  };\n\n  const handleAppBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const trimmedApplicationName = event.target.value.trim();\n    setFieldValue(nameField.name, trimmedApplicationName);\n  };\n\n  const label = t('topology~Application');\n  const inputHelpText = applicationExists\n    ? t('topology~Warning: the application grouping already exists.')\n    : t('topology~A unique name given to the application grouping to label your resources.');\n\n  React.useEffect(() => {\n    if (selectedKey.value === CREATE_APPLICATION_KEY) {\n      applicationNameInputRef.current?.focus();\n    }\n  }, [selectedKey.value]);\n\n  return (\n    <>\n      {projectsAvailable && applicationsAvailable && (\n        <FormGroup fieldId={fieldId} label={label}>\n          <ApplicationDropdown\n            id={fieldId}\n            ariaLabel={label}\n            dropDownClassName=\"dropdown--full-width\"\n            menuClassName=\"dropdown-menu--text-wrap\"\n            namespace={namespace}\n            actionItems={actionItems}\n            autoSelect\n            selectedKey={selectedKey.value}\n            onChange={onDropdownChange}\n            onLoad={handleOnLoad}\n          />\n\n          <FormHelperText>\n            <HelperText>\n              {!isValid ? (\n                <HelperTextItem variant=\"error\" icon={<RedExclamationCircleIcon />}>\n                  {errorMessage}\n                </HelperTextItem>\n              ) : (\n                <HelperTextItem>\n                  {t('topology~Select an Application to group this component.')}\n                </HelperTextItem>\n              )}\n            </HelperText>\n          </FormHelperText>\n        </FormGroup>\n      )}\n      {(!applicationsAvailable || selectedKey.value === CREATE_APPLICATION_KEY) && (\n        <InputField\n          type={TextInputTypes.text}\n          required={selectedKey.value === CREATE_APPLICATION_KEY}\n          name={nameField.name}\n          ref={applicationNameInputRef}\n          label={t('topology~Application name')}\n          data-test-id=\"application-form-app-input\"\n          helpText={inputHelpText}\n          validated={applicationExists ? ValidatedOptions.warning : ValidatedOptions.default}\n          onChange={handleAppChange}\n          onBlur={handleAppBlur}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ApplicationSelector;\n","import * as React from 'react';\nimport { Title } from '@patternfly/react-core';\nimport { Formik, FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { PromiseComponent } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { UNASSIGNED_KEY } from '../../const';\nimport { updateResourceApplication } from '../../utils/application-utils';\nimport ApplicationSelector from '../dropdowns/ApplicationSelector';\n\ntype EditApplicationFormProps = {\n  resource: K8sResourceKind;\n  initialApplication: string;\n  cancel?: () => void;\n};\n\ntype EditApplicationModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n};\n\ntype EditApplicationModalProps = EditApplicationFormProps & {\n  resourceKind: K8sKind;\n  close?: () => void;\n};\n\nconst EditApplicationForm: React.FC<FormikProps<FormikValues> & EditApplicationFormProps> = ({\n  resource,\n  handleSubmit,\n  isSubmitting,\n  cancel,\n  values,\n  initialApplication,\n  status,\n}) => {\n  const { t } = useTranslation();\n  const dirty = _.get(values, 'application.selectedKey') !== initialApplication;\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-content\">\n      <ModalTitle>{t('topology~Edit application grouping')}</ModalTitle>\n      <ModalBody>\n        <Title headingLevel=\"h2\" size=\"md\" className=\"co-m-form-row\">\n          <Trans ns=\"topology\">\n            Select an Application group to add the component{' '}\n            <strong>{{ resourceName: resource.metadata.name }}</strong> to\n          </Trans>\n        </Title>\n        <div className=\"pf-v5-c-form\">\n          <ApplicationSelector namespace={resource.metadata.namespace} />\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText={t('topology~Save')}\n        submitDisabled={!dirty || isSubmitting}\n        cancel={cancel}\n        inProgress={isSubmitting}\n        errorMessage={status && status.submitError}\n      />\n    </form>\n  );\n};\n\nclass EditApplicationModal extends PromiseComponent<\n  EditApplicationModalProps,\n  EditApplicationModalState\n> {\n  private handleSubmit = (values, actions) => {\n    const { resourceKind, resource } = this.props;\n    const applicationKey = values.application.selectedKey;\n    const application = applicationKey === UNASSIGNED_KEY ? undefined : values.application.name;\n\n    return this.handlePromise(updateResourceApplication(resourceKind, resource, application))\n      .then(() => {\n        this.props.close();\n      })\n      .catch((errorMessage) => {\n        actions.setStatus({ submitError: errorMessage });\n      });\n  };\n\n  render() {\n    const { resource } = this.props;\n    const application = _.get(resource, ['metadata', 'labels', 'app.kubernetes.io/part-of']);\n\n    const initialValues = {\n      application: {\n        name: application,\n        selectedKey: application || UNASSIGNED_KEY,\n      },\n    };\n    return (\n      <Formik initialValues={initialValues} onSubmit={this.handleSubmit}>\n        {(formikProps) => (\n          <EditApplicationForm {...formikProps} {...this.props} initialApplication={application} />\n        )}\n      </Formik>\n    );\n  }\n}\n\nexport const editApplicationModal = createModalLauncher((props: EditApplicationModalProps) => (\n  <EditApplicationModal {...props} />\n));\n"],"sourceRoot":""}