{"version":3,"sources":["webpack:///./public/components/modals/cluster-channel-modal.tsx"],"names":["ClusterChannelModal","props","cancel","close","cv","errorMessage","handlePromise","inProgress","channel","setChannel","spec","t","availableChannels","reduce","o","val","version","channelsExist","status","desired","channels","length","onSubmit","e","preventDefault","patch","op","path","value","name","className","component","p","htmlFor","id","items","onChange","newChannel","selectedKey","title","_event","placeholder","major","minor","stable","fast","candidate","submitText","cancelText","clusterChannelModal"],"mappings":"6FAAA,yJAuBA,MAAMA,EAAsB,aAAmBC,I,UAC7C,MAAM,OAAEC,EAAM,MAAEC,EAAK,GAAEC,EAAE,aAAEC,EAAY,cAAEC,EAAa,WAAEC,GAAeN,GAChEO,EAASC,GAAc,WAAeL,EAAGM,KAAKF,UAC/C,EAAEG,GAAM,2BACRC,EAAoB,YAA4BR,GAAIS,OAAO,CAACC,EAAGC,KACnED,EAAEC,GAAOA,EACFD,GACN,IACGE,EAAU,QAAa,YAAuBZ,IAC9Ca,EAA4C,QAA5B,EAAkB,QAAlB,EAAS,QAAT,EAAAb,EAAGc,cAAM,eAAEC,eAAO,eAAEC,gBAAQ,eAAEC,OAOpD,OACE,wBAAMC,SAPiDC,IACvDA,EAAEC,iBACF,MAAMC,EAAQ,CAAC,CAAEC,GAAI,MAAOC,KAAM,gBAAiBC,MAAOpB,IAC1D,OAAOF,EAAc,aAAS,sBAAqBF,EAAIqB,GAAQtB,IAIvC0B,KAAK,OAAOC,UAAU,gBAAe,YAAW,iBACtE,gBAAC,IAAU,KACQnB,EAAhBM,EAAkB,wBAA6B,yBAElD,gBAAC,IAAS,KACR,gBAAC,IAAW,KACV,gBAAC,IAAI,CAACc,UAAW,IAAaC,GAExBrB,EADHM,EAEK,oNAGA,uNAGN,gBACA,gBAAC,IAAI,CAACc,UAAW,IAAaC,EAAGF,UAAU,iBACzC,gBAAC,iBAAc,QAIrB,uBAAKA,UAAU,cACb,yBAAOG,QAAQ,WAAWtB,EAAE,mBAC3BM,EACC,gBAAC,IAAQ,CACPa,UAAU,kCACVI,GAAG,UACHC,MAAOvB,EACPwB,SAAWC,GAAuB5B,EAAW4B,GAC7CC,YAAa9B,EACb+B,MAAO5B,EAAE,oBAGX,gCACE,gBAAC,IAAS,CACRuB,GAAG,UACHE,SAAU,CAACI,EAAQH,IAAe5B,EAAW4B,GAC7CT,MAAOpB,EACPiC,YAAa9B,EAAE,2BAA4B,CACzCK,QAAS,UAAUA,EAAQ0B,SAAS1B,EAAQ2B,UAC5C,YACQ,wBAEZ,qBAAGb,UAAU,cACVnB,EAAE,wEAAyE,CAC1EiC,OAAQ,UAAU5B,EAAQ0B,SAAS1B,EAAQ2B,QAC3CE,KAAM,QAAQ7B,EAAQ0B,SAAS1B,EAAQ2B,QACvCG,UAAW,aAAa9B,EAAQ0B,SAAS1B,EAAQ2B,cAO7D,gBAAC,IAAiB,CAChBtC,aAAcA,EACdE,WAAYA,EACZwC,WAAYpC,EAAE,eACdqC,WAAYrC,EAAE,iBACdT,OAAQA,OAMH+C,EAAsB,YAAoBjD","file":"cluster-channel-modal-chunk-1a5c9996854d54cff0ff.min.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { Text, TextContent, TextInput, TextVariants } from '@patternfly/react-core';\nimport * as semver from 'semver';\n\nimport { ChannelDocLink } from '../cluster-settings/cluster-settings';\nimport { ClusterVersionModel } from '../../models';\nimport { Dropdown, HandlePromiseProps, isManaged, withHandlePromise } from '../utils';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '../factory/modal';\nimport {\n  ClusterVersionKind,\n  getAvailableClusterChannels,\n  getLastCompletedUpdate,\n  k8sPatch,\n} from '../../module/k8s';\n\nconst ClusterChannelModal = withHandlePromise((props: ClusterChannelModalProps) => {\n  const { cancel, close, cv, errorMessage, handlePromise, inProgress } = props;\n  const [channel, setChannel] = React.useState(cv.spec.channel);\n  const { t } = useTranslation();\n  const availableChannels = getAvailableClusterChannels(cv).reduce((o, val) => {\n    o[val] = val;\n    return o;\n  }, {});\n  const version = semver.parse(getLastCompletedUpdate(cv));\n  const channelsExist = cv.status?.desired?.channels?.length;\n  const submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    const patch = [{ op: 'add', path: '/spec/channel', value: channel }];\n    return handlePromise(k8sPatch(ClusterVersionModel, cv, patch), close);\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\" data-test=\"channel-modal\">\n      <ModalTitle>\n        {channelsExist ? t('public~Select channel') : t('public~Input channel')}\n      </ModalTitle>\n      <ModalBody>\n        <TextContent>\n          <Text component={TextVariants.p}>\n            {channelsExist\n              ? t(\n                  'public~The current version is available in the channels listed in the dropdown below. Select a channel that reflects the desired version. Critical security updates will be delivered to any vulnerable channels.',\n                )\n              : t(\n                  'public~Input a channel that reflects the desired version. To verify if the version exists in a channel, save and check the update status. Critical security updates will be delivered to any vulnerable channels.',\n                )}\n          </Text>\n          {!isManaged() && (\n            <Text component={TextVariants.p} className=\"pf-v5-u-mb-md\">\n              <ChannelDocLink />\n            </Text>\n          )}\n        </TextContent>\n        <div className=\"form-group\">\n          <label htmlFor=\"channel\">{t('public~Channel')}</label>\n          {channelsExist ? (\n            <Dropdown\n              className=\"cluster-channel-modal__dropdown\"\n              id=\"channel\"\n              items={availableChannels}\n              onChange={(newChannel: string) => setChannel(newChannel)}\n              selectedKey={channel}\n              title={t('public~Channel')}\n            />\n          ) : (\n            <>\n              <TextInput\n                id=\"channel\"\n                onChange={(_event, newChannel) => setChannel(newChannel)}\n                value={channel}\n                placeholder={t(`public~e.g., {{version}}`, {\n                  version: `stable-${version.major}.${version.minor}`,\n                })}\n                data-test=\"channel-modal-input\"\n              />\n              <p className=\"help-block\">\n                {t(`public~Potential channels are {{stable}}, {{fast}}, or {{candidate}}.`, {\n                  stable: `stable-${version.major}.${version.minor}`,\n                  fast: `fast-${version.major}.${version.minor}`,\n                  candidate: `candidate-${version.major}.${version.minor}`,\n                })}\n              </p>\n            </>\n          )}\n        </div>\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={t('public~Save')}\n        cancelText={t('public~Cancel')}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const clusterChannelModal = createModalLauncher(ClusterChannelModal);\n\ntype ClusterChannelModalProps = {\n  cv: ClusterVersionKind;\n  t: TFunction;\n} & ModalComponentProps &\n  HandlePromiseProps;\n"],"sourceRoot":""}