{"version":3,"sources":["webpack:///./packages/pipelines-plugin/src/components/shared/results/index.ts","webpack:///./packages/pipelines-plugin/src/models/index.ts","webpack:///./packages/pipelines-plugin/src/types/index.ts","webpack:///./packages/pipelines-plugin/src/utils/pipeline-filter-reducer.ts","webpack:///./packages/pipelines-plugin/src/models/pipelines.ts","webpack:///./packages/pipelines-plugin/src/types/coreTekton.ts","webpack:///./packages/pipelines-plugin/src/types/pipelineRun.ts","webpack:///./packages/pipelines-plugin/src/types/taskRun.ts","webpack:///./packages/pipelines-plugin/src/types/computedStatus.ts","webpack:///./packages/pipelines-plugin/src/components/shared/results/ResultsList.tsx","webpack:///./packages/pipelines-plugin/src/utils/render-utils.tsx","webpack:///./packages/pipelines-plugin/src/components/shared/results/OutputTab.tsx"],"names":["SucceedConditionReason","pipelineRunStatus","pipelineRun","conditions","length","succeedCondition","find","c","type","cancelledCondition","reason","PipelineRunStopped","PipelineRunCancelled","includes","spec","status","Cancelling","Succeeded","Failed","Running","TaskRunCancelled","Cancelled","PipelineRunStopping","TaskRunStopping","CreateContainerConfigError","ExceededNodeResources","ExceededResourceQuota","PipelineRunPending","Pending","ConditionCheckFailed","Skipped","pipelineRunStatusTitle","t","pipelineFilterReducer","pipeline","latestRun","Other","pipelineTitleFilterReducer","pipelineRunTitleFilterReducer","pipelineRunFilterReducer","pipelineStatusFilter","filters","selected","all","pipelineRunStatusFilter","phases","taskRunFilterReducer","taskRun","taskRunFilterTitleReducer","color","value","PipelineModel","apiGroup","apiVersion","label","labelKey","labelPluralKey","plural","abbr","namespaced","kind","id","labelPlural","crd","PipelineModelV1Beta1","PipelineRunModel","PipelineRunModelV1Beta1","TaskModel","TaskModelV1Beta1","TaskRunModel","TaskRunModelV1Beta1","CustomRunModelV1Beta1","PipelineResourceModel","ClusterTaskModel","ConditionModel","TriggerBindingModel","ClusterTriggerBindingModel","TriggerTemplateModel","EventListenerModel","RepositoryModel","TektonConfigModel","TektonHubModel","TektonResultModel","MetricsLevel","LevelTypes","DurationTypes","PipelineRunGroupVersionKind","group","version","TaskRunGroupVersionKind","ComputedStatus","CustomRunStatus","results","resourceName","text","map","name","key","variant","full","GROUP_MATCH_REGEXP","RegExp","source","handleURLs","JSON","stringify","matches","match","prefix","link","suffix","additionalClassName","href","obj","pipelineResults","className"],"mappings":"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","file":"pipelines-plugin/code-refs/resultsComponent-chunk-54c101b6a81fc3310d85.min.js","sourcesContent":["export { default as OutputTab } from './OutputTab';\n","export * from './pipelines';\n","export * from './coreTekton';\nexport * from './pipeline';\nexport * from './pipelineRun';\nexport * from './pipelineResource';\nexport * from './task';\nexport * from './taskRun';\nexport * from './computedStatus';\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\nimport { ComputedStatus } from '../types';\n\nexport enum SucceedConditionReason {\n  PipelineRunCancelled = 'StoppedRunFinally',\n  PipelineRunStopped = 'CancelledRunFinally',\n  TaskRunCancelled = 'TaskRunCancelled',\n  Cancelled = 'Cancelled',\n  PipelineRunStopping = 'PipelineRunStopping',\n  PipelineRunPending = 'PipelineRunPending',\n  TaskRunStopping = 'TaskRunStopping',\n  CreateContainerConfigError = 'CreateContainerConfigError',\n  ExceededNodeResources = 'ExceededNodeResources',\n  ExceededResourceQuota = 'ExceededResourceQuota',\n  ConditionCheckFailed = 'ConditionCheckFailed',\n}\n\nexport const pipelineRunStatus = (pipelineRun): ComputedStatus => {\n  const conditions = _.get(pipelineRun, ['status', 'conditions'], []);\n  if (conditions.length === 0) return null;\n\n  const succeedCondition = conditions.find((c) => c.type === 'Succeeded');\n  const cancelledCondition = conditions.find((c) => c.reason === 'Cancelled');\n\n  if (\n    [\n      SucceedConditionReason.PipelineRunStopped,\n      SucceedConditionReason.PipelineRunCancelled,\n    ].includes(pipelineRun.spec?.status) &&\n    !cancelledCondition\n  ) {\n    return ComputedStatus.Cancelling;\n  }\n\n  if (!succeedCondition || !succeedCondition.status) {\n    return null;\n  }\n\n  const status =\n    succeedCondition.status === 'True'\n      ? ComputedStatus.Succeeded\n      : succeedCondition.status === 'False'\n      ? ComputedStatus.Failed\n      : ComputedStatus.Running;\n\n  if (succeedCondition.reason && succeedCondition.reason !== status) {\n    switch (succeedCondition.reason) {\n      case SucceedConditionReason.PipelineRunCancelled:\n      case SucceedConditionReason.TaskRunCancelled:\n      case SucceedConditionReason.Cancelled:\n      case SucceedConditionReason.PipelineRunStopped:\n        return ComputedStatus.Cancelled;\n      case SucceedConditionReason.PipelineRunStopping:\n      case SucceedConditionReason.TaskRunStopping:\n        return ComputedStatus.Failed;\n      case SucceedConditionReason.CreateContainerConfigError:\n      case SucceedConditionReason.ExceededNodeResources:\n      case SucceedConditionReason.ExceededResourceQuota:\n      case SucceedConditionReason.PipelineRunPending:\n        return ComputedStatus.Pending;\n      case SucceedConditionReason.ConditionCheckFailed:\n        return ComputedStatus.Skipped;\n      default:\n        return status;\n    }\n  }\n  return status;\n};\n\n// Converts the PipelineRun (and TaskRun) condition status into a human readable string.\n// See also tkn cli implementation at https://github.com/tektoncd/cli/blob/release-v0.15.0/pkg/formatted/k8s.go#L54-L83\nexport const pipelineRunStatusTitle = (pipelineRun): string => {\n  const status = pipelineRunStatus(pipelineRun);\n  if (!status) return '-';\n  switch (status) {\n    case ComputedStatus.Cancelled:\n      return i18next.t('pipelines-plugin~Cancelled');\n    case ComputedStatus.Failed:\n      return i18next.t('pipelines-plugin~Failed');\n    case ComputedStatus.Succeeded:\n      return i18next.t('pipelines-plugin~Succeeded');\n    case ComputedStatus.Pending:\n      return i18next.t('pipelines-plugin~Pending');\n    case ComputedStatus.Running:\n      return i18next.t('pipelines-plugin~Running');\n    case ComputedStatus.Skipped:\n      return i18next.t('pipelines-plugin~Skipped');\n    case ComputedStatus.Cancelling:\n      return i18next.t('pipelines-plugin~Cancelling');\n    default:\n      return status;\n  }\n};\n\nexport const pipelineFilterReducer = (pipeline): ComputedStatus => {\n  if (!pipeline.latestRun) return ComputedStatus.Other;\n  return pipelineRunStatus(pipeline.latestRun) || ComputedStatus.Other;\n};\n\nexport const pipelineTitleFilterReducer = (pipeline): string => {\n  if (!pipeline.latestRun) return '-';\n  return pipelineRunStatusTitle(pipeline.latestRun) || '-';\n};\n\nexport const pipelineRunTitleFilterReducer = (pipelineRun): string => {\n  const status = pipelineRunStatusTitle(pipelineRun);\n  return status || '-';\n};\nexport const pipelineRunFilterReducer = (pipelineRun): ComputedStatus => {\n  const status = pipelineRunStatus(pipelineRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const pipelineStatusFilter = (filters, pipeline) => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const status = pipelineFilterReducer(pipeline);\n  return filters.selected?.includes(status) || !_.includes(filters.all, status);\n};\n\nexport const pipelineRunStatusFilter = (phases, pipeline) => {\n  if (!phases || !phases.selected || !phases.selected.length) {\n    return true;\n  }\n\n  const status = pipelineRunFilterReducer(pipeline);\n  return phases.selected?.includes(status) || !_.includes(phases.all, status);\n};\n\nexport const pipelineResourceFilterReducer = (pipelineResource): string => {\n  return pipelineResource.spec.type;\n};\n\nexport const pipelineResourceTypeFilter = (filters, pipelineResource): boolean => {\n  if (!filters || !filters.selected || !filters.selected.length) {\n    return true;\n  }\n  const type = pipelineResourceFilterReducer(pipelineResource);\n  return filters.selected?.includes(type) || !_.includes(filters.all, type);\n};\n\nexport const taskRunFilterReducer = (taskRun): ComputedStatus => {\n  const status = pipelineRunStatus(taskRun);\n  return status || ComputedStatus.Other;\n};\n\nexport const taskRunFilterTitleReducer = (taskRun): string => {\n  const status = pipelineRunStatusTitle(taskRun);\n  return status || '-';\n};\n","import { chart_color_green_400 as tektonGroupColor } from '@patternfly/react-tokens/dist/js/chart_color_green_400';\nimport { K8sKind } from '@console/internal/module/k8s';\n\nconst color = tektonGroupColor.value;\n\nexport const PipelineModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Pipeline',\n  // t('pipelines-plugin~Pipeline')\n  labelKey: 'pipelines-plugin~Pipeline',\n  // t('pipelines-plugin~Pipelines')\n  labelPluralKey: 'pipelines-plugin~Pipelines',\n  plural: 'pipelines',\n  abbr: 'PL',\n  namespaced: true,\n  kind: 'Pipeline',\n  id: 'pipeline',\n  labelPlural: 'Pipelines',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'PipelineRun',\n  // t('pipelines-plugin~PipelineRun')\n  labelKey: 'pipelines-plugin~PipelineRun',\n  // t('pipelines-plugin~PipelineRuns')\n  labelPluralKey: 'pipelines-plugin~PipelineRuns',\n  plural: 'pipelineruns',\n  abbr: 'PLR',\n  namespaced: true,\n  kind: 'PipelineRun',\n  id: 'pipelinerun',\n  labelPlural: 'PipelineRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'Task',\n  // t('pipelines-plugin~Task')\n  labelKey: 'pipelines-plugin~Task',\n  // t('pipelines-plugin~Tasks')\n  labelPluralKey: 'pipelines-plugin~Tasks',\n  plural: 'tasks',\n  abbr: 'T',\n  namespaced: true,\n  kind: 'Task',\n  id: 'task',\n  labelPlural: 'Tasks',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const TaskRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TaskRun',\n  // t('pipelines-plugin~TaskRun')\n  labelKey: 'pipelines-plugin~TaskRun',\n  // t('pipelines-plugin~TaskRuns')\n  labelPluralKey: 'pipelines-plugin~TaskRuns',\n  plural: 'taskruns',\n  abbr: 'TR',\n  namespaced: true,\n  kind: 'TaskRun',\n  id: 'taskrun',\n  labelPlural: 'TaskRuns',\n  crd: true,\n  color,\n};\n\nexport const CustomRunModelV1Beta1: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'CustomRun',\n  // t('pipelines-plugin~CustomRun')\n  labelKey: 'pipelines-plugin~CustomRun',\n  // t('pipelines-plugin~CustomRuns')\n  labelPluralKey: 'pipelines-plugin~CustomRuns',\n  plural: 'customruns',\n  abbr: 'CR',\n  namespaced: true,\n  kind: 'CustomRun',\n  id: 'customrun',\n  labelPlural: 'CustomRuns',\n  crd: true,\n  color,\n};\n\nexport const PipelineResourceModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'PipelineResource',\n  // t('pipelines-plugin~PipelineResource')\n  labelKey: 'pipelines-plugin~PipelineResource',\n  // t('pipelines-plugin~PipelineResources')\n  labelPluralKey: 'pipelines-plugin~PipelineResources',\n  plural: 'pipelineresources',\n  abbr: 'PR',\n  namespaced: true,\n  kind: 'PipelineResource',\n  id: 'pipelineresource',\n  labelPlural: 'PipelineResources',\n  crd: true,\n  color,\n};\n\nexport const ClusterTaskModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTask',\n  // t('pipelines-plugin~ClusterTask')\n  labelKey: 'pipelines-plugin~ClusterTask',\n  // t('pipelines-plugin~ClusterTasks')\n  labelPluralKey: 'pipelines-plugin~ClusterTasks',\n  plural: 'clustertasks',\n  abbr: 'CT',\n  namespaced: false,\n  kind: 'ClusterTask',\n  id: 'clustertask',\n  labelPlural: 'ClusterTasks',\n  crd: true,\n  color,\n};\n\nexport const ConditionModel: K8sKind = {\n  apiGroup: 'tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Condition',\n  // t('pipelines-plugin~Condition')\n  labelKey: 'pipelines-plugin~Condition',\n  // t('pipelines-plugin~Conditions')\n  labelPluralKey: 'pipelines-plugin~Conditions',\n  plural: 'conditions',\n  abbr: 'C',\n  namespaced: true,\n  kind: 'Condition',\n  id: 'condition',\n  labelPlural: 'Conditions',\n  crd: true,\n  color,\n};\n\nexport const TriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerBinding',\n  // t('pipelines-plugin~TriggerBinding')\n  labelKey: 'pipelines-plugin~TriggerBinding',\n  // t('pipelines-plugin~TriggerBindings')\n  labelPluralKey: 'pipelines-plugin~TriggerBindings',\n  plural: 'triggerbindings',\n  abbr: 'TB',\n  namespaced: true,\n  kind: 'TriggerBinding',\n  id: 'triggerbinding',\n  labelPlural: 'TriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const ClusterTriggerBindingModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBinding')\n  labelKey: 'pipelines-plugin~ClusterTriggerBinding',\n  // t('pipelines-plugin~ClusterTriggerBindings')\n  labelPluralKey: 'pipelines-plugin~ClusterTriggerBindings',\n  plural: 'clustertriggerbindings',\n  abbr: 'CTB',\n  namespaced: false,\n  kind: 'ClusterTriggerBinding',\n  id: 'clustertriggerbinding',\n  labelPlural: 'ClusterTriggerBindings',\n  crd: true,\n  color,\n};\n\nexport const TriggerTemplateModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplate')\n  labelKey: 'pipelines-plugin~TriggerTemplate',\n  // t('pipelines-plugin~TriggerTemplates')\n  labelPluralKey: 'pipelines-plugin~TriggerTemplates',\n  plural: 'triggertemplates',\n  abbr: 'TT',\n  namespaced: true,\n  kind: 'TriggerTemplate',\n  id: 'triggertemplate',\n  labelPlural: 'TriggerTemplates',\n  crd: true,\n  color,\n};\n\nexport const EventListenerModel: K8sKind = {\n  apiGroup: 'triggers.tekton.dev',\n  apiVersion: 'v1beta1',\n  label: 'EventListener',\n  // t('pipelines-plugin~EventListener')\n  labelKey: 'pipelines-plugin~EventListener',\n  // t('pipelines-plugin~EventListeners')\n  labelPluralKey: 'pipelines-plugin~EventListeners',\n  plural: 'eventlisteners',\n  abbr: 'EL',\n  namespaced: true,\n  kind: 'EventListener',\n  id: 'eventlistener',\n  labelPlural: 'EventListeners',\n  crd: true,\n  color,\n};\n\nexport const RepositoryModel: K8sKind = {\n  apiGroup: 'pipelinesascode.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'Repository',\n  // t('pipelines-plugin~Repository')\n  labelKey: 'pipelines-plugin~Repository',\n  // t('pipelines-plugin~Repositories')\n  labelPluralKey: 'pipelines-plugin~Repositories',\n  plural: 'repositories',\n  abbr: 'R',\n  namespaced: true,\n  kind: 'Repository',\n  id: 'repository',\n  labelPlural: 'Repositories',\n  crd: true,\n  color,\n};\n\nexport const TektonConfigModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonConfig',\n  // t('pipelines-plugin~TektonConfig')\n  labelKey: 'pipelines-plugin~TektonConfig',\n  // t('pipelines-plugin~TektonConfigs')\n  labelPluralKey: 'pipelines-plugin~TektonConfigs',\n  plural: 'tektonconfigs',\n  abbr: 'TC',\n  namespaced: false,\n  kind: 'TektonConfig',\n  id: 'tektonconfig',\n  labelPlural: 'TektonConfigs',\n  crd: true,\n};\n\nexport const TektonHubModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonHub',\n  // t('pipelines-plugin~TektonHub')\n  labelKey: 'pipelines-plugin~TektonHub',\n  // t('pipelines-plugin~TektonHubs')\n  labelPluralKey: 'pipelines-plugin~TektonHubs',\n  plural: 'tektonhubs',\n  abbr: 'TH',\n  namespaced: false,\n  kind: 'TektonHub',\n  id: 'tektonhub',\n  labelPlural: 'TektonHubs',\n  crd: true,\n};\n\nexport const TektonResultModel: K8sKind = {\n  apiGroup: 'operator.tekton.dev',\n  apiVersion: 'v1alpha1',\n  label: 'TektonResult',\n  // t('pipelines-plugin~TektonResult')\n  labelKey: 'pipelines-plugin~TektonResult',\n  // t('pipelines-plugin~TektonResults')\n  labelPluralKey: 'pipelines-plugin~TektonResults',\n  plural: 'tektonresults',\n  abbr: 'TR',\n  namespaced: false,\n  kind: 'TektonResult',\n  id: 'tektonresult',\n  labelPlural: 'TektonResults',\n  crd: true,\n};\n","import { K8sResourceCommon } from '@console/dynamic-plugin-sdk/src';\n\nexport type ResourceTarget = 'inputs' | 'outputs';\n\nexport type TektonParam = {\n  default?: string | string[];\n  description?: string;\n  name: string;\n  type?: 'string' | 'array';\n};\n\nexport type TektonTaskSteps = {\n  // TODO: Figure out required fields\n  name: string;\n  args?: string[];\n  command?: string[];\n  image?: string;\n  resources?: {}[] | {};\n  env?: { name: string; value: string }[];\n  script?: string[];\n};\n\nexport type TaskResult = {\n  name: string;\n  description?: string;\n};\n\nexport type TektonTaskSpec = {\n  metadata?: {};\n  description?: string;\n  steps: TektonTaskSteps[];\n  params?: TektonParam[];\n  resources?: TektonResourceGroup<TektonResource>;\n  results?: TaskResult[];\n  workspaces?: TektonWorkspace[];\n};\n\nexport type TektonResourceGroup<ResourceType> = {\n  inputs?: ResourceType[];\n  outputs?: ResourceType[];\n};\n\n/** Deprecated upstream - Workspaces are replacing Resources */\nexport type TektonResource = {\n  name: string;\n  optional?: boolean;\n  type: string; // TODO: limit to known strings\n};\n\nexport type TektonWorkspace = {\n  name: string;\n  description?: string;\n  mountPath?: string;\n  readOnly?: boolean;\n  optional?: boolean;\n};\n\nexport type TektonResultsRun = {\n  name: string;\n  value: string;\n};\n\nexport interface Addon {\n  enablePipelinesAsCode: boolean;\n  params: Param[];\n}\n\nexport interface Param {\n  name: string;\n  value: string;\n}\n\nexport interface Dashboard {\n  readonly: boolean;\n}\n\nexport enum MetricsLevel {\n  METRICS_PIPELINERUN_DURATION_TYPE = 'metrics.pipelinerun.duration-type',\n  METRICS_PIPELINERUN_LEVEL = 'metrics.pipelinerun.level',\n  METRICS_TASKRUN_DURATION_TYPE = 'metrics.taskrun.duration-type',\n  METRICS_TASKRUN_LEVEL = 'metrics.taskrun.level',\n}\n\nexport enum LevelTypes {\n  PIPELINE = 'pipeline',\n  PIPELINERUN = 'pipelinerun',\n  TASK = 'task',\n  TASKRUN = 'taskrun',\n}\n\nexport enum DurationTypes {\n  HISTOGRAM = 'histogram',\n  LASTVALUE = 'lastvalue',\n  NAMESPACE = 'namespace',\n}\n\nexport interface Pipeline {\n  'default-service-account': string;\n  'disable-affinity-assistant': boolean;\n  'disable-creds-init': boolean;\n  'enable-api-fields': string;\n  'enable-custom-tasks': boolean;\n  'enable-tekton-oci-bundles': boolean;\n  [MetricsLevel.METRICS_PIPELINERUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_PIPELINERUN_LEVEL]: LevelTypes;\n  [MetricsLevel.METRICS_TASKRUN_DURATION_TYPE]: DurationTypes;\n  [MetricsLevel.METRICS_TASKRUN_LEVEL]: LevelTypes;\n  params: Param[];\n  'require-git-ssh-secret-known-hosts': boolean;\n  'running-in-environment-with-injected-sidecars': boolean;\n  'scope-when-expressions-to-task': boolean;\n}\n\nexport interface Pruner {\n  keep: number;\n  resources: string[];\n  schedule: string;\n}\n\nexport interface Trigger {\n  'default-service-account': string;\n  'enable-api-fields': string;\n}\n\nexport interface Spec {\n  addon: Addon;\n  config: {};\n  dashboard: Dashboard;\n  hub: {};\n  params: Param[];\n  pipeline: Pipeline;\n  profile: string;\n  pruner: Pruner;\n  targetNamespace: string;\n  trigger: Trigger;\n}\n\nexport interface Status {\n  conditions: TektonConfigCondition[];\n}\n\nexport interface TektonConfigCondition {\n  lastTransitionTime: string;\n  status: string;\n  type: string;\n}\n\nexport type TektonConfig = K8sResourceCommon & {\n  spec: Spec;\n  status: Status;\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  ObjectMetadata,\n} from '@console/internal/module/k8s';\nimport { TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineKind, PipelineSpec } from './pipeline';\n\nexport type PLRTaskRunStep = {\n  container: string;\n  imageID?: string;\n  name: string;\n  waiting?: {\n    reason: string;\n  };\n  running?: {\n    startedAt: string;\n  };\n  terminated?: {\n    containerID: string;\n    exitCode: number;\n    finishedAt: string;\n    reason: string;\n    startedAt: string;\n    message?: string;\n  };\n};\n\nexport type PLRTaskRunData = {\n  pipelineTaskName: string;\n  status: {\n    completionTime?: string;\n    conditions: Condition[];\n    /** Can be empty */\n    podName: string;\n    startTime: string;\n    steps?: PLRTaskRunStep[];\n    taskSpec?: TektonTaskSpec;\n    taskResults?: { name: string; value: string }[]; // in tekton v1 taskResults is renamed to results\n    results?: { name: string; value: string }[];\n  };\n};\n\nexport type PLRTaskRuns = {\n  [taskRunName: string]: PLRTaskRunData;\n};\n\nexport type VolumeTypeSecret = {\n  secretName: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypeConfigMaps = {\n  name: string;\n  items?: {\n    key: string;\n    path: string;\n  }[];\n};\n\nexport type VolumeTypePVC = {\n  claimName: string;\n};\n\nexport type PersistentVolumeClaimType = {\n  persistentVolumeClaim: VolumeTypePVC;\n};\n\nexport type VolumeClaimTemplateType = {\n  volumeClaimTemplate: VolumeTypeClaim;\n};\nexport type VolumeTypeClaim = {\n  metadata?: ObjectMetadata;\n  spec: {\n    accessModes: string[];\n    resources: {\n      requests: {\n        storage: string;\n      };\n    };\n    storageClassName?: string;\n    volumeMode?: string;\n  };\n};\n\nexport type Condition = {\n  type: string;\n  status: string;\n  reason?: string;\n  message?: string;\n  lastTransitionTime?: string;\n};\n\nexport type ChildReferences = {\n  apiVersion: string;\n  kind: string;\n  name: string;\n  pipelineTaskName: string;\n};\n\nexport type PipelineRunEmbeddedResourceParam = { name: string; value: string };\nexport type PipelineRunEmbeddedResource = {\n  name: string;\n  resourceSpec: {\n    params: PipelineRunEmbeddedResourceParam[];\n    type: string;\n  };\n};\nexport type PipelineRunReferenceResource = {\n  name: string;\n  resourceRef: {\n    name: string;\n  };\n};\nexport type PipelineRunResource = PipelineRunReferenceResource | PipelineRunEmbeddedResource;\n\nexport type PipelineRunWorkspace = {\n  name: string;\n  [volumeType: string]:\n    | VolumeTypeSecret\n    | VolumeTypeConfigMaps\n    | VolumeTypePVC\n    | VolumeTypeClaim\n    | {};\n};\n\nexport type PipelineRunParam = {\n  name: string;\n  value: string | string[];\n\n  // TODO: To be validated\n  input?: string;\n  output?: string;\n  resource?: object;\n};\n\nexport type PipelineRunStatus = {\n  succeededCondition?: string;\n  creationTimestamp?: string;\n  conditions?: Condition[];\n  startTime?: string;\n  completionTime?: string;\n  taskRuns?: PLRTaskRuns;\n  pipelineSpec: PipelineSpec;\n  skippedTasks?: {\n    name: string;\n  }[];\n  pipelineResults?: TektonResultsRun[]; // in tekton v1 pipelineResults is renamed to results\n  results?: TektonResultsRun[];\n  childReferences?: ChildReferences[];\n};\n\nexport type PipelineRunKind = K8sResourceCommon & {\n  spec: {\n    pipelineRef?: { name: string };\n    pipelineSpec?: PipelineSpec;\n    params?: PipelineRunParam[];\n    workspaces?: PipelineRunWorkspace[];\n    resources?: PipelineRunResource[];\n    serviceAccountName?: string;\n    timeout?: string;\n    // Only used in a single case - cancelling a pipeline; should not be copied between PLRs\n    status?: 'StoppedRunFinally' | 'PipelineRunPending' | 'CancelledRunFinally';\n    // In tekton v1 ServiceAccountName is moved\n    // to TaskRunTemplate as TaskRunTemplate.ServiceAccountName\n    taskRunTemplate?: {\n      serviceAccountName?: string;\n    };\n  };\n  status?: PipelineRunStatus;\n};\n\nexport type PipelineWithLatest = PipelineKind & {\n  latestRun?: PipelineRunKind;\n};\n\nexport const PipelineRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'PipelineRun',\n};\n","import {\n  K8sGroupVersionKind,\n  K8sResourceCommon,\n  PersistentVolumeClaimKind,\n} from '@console/internal/module/k8s';\nimport { TektonResource, TektonResultsRun, TektonTaskSpec } from './coreTekton';\nimport { PipelineTaskParam, PipelineTaskRef } from './pipeline';\nimport {\n  Condition,\n  PLRTaskRunStep,\n  VolumeTypeConfigMaps,\n  VolumeTypePVC,\n  VolumeTypeSecret,\n} from './pipelineRun';\n\nexport type TaskRunWorkspace = {\n  name: string;\n  volumeClaimTemplate?: PersistentVolumeClaimKind;\n  persistentVolumeClaim?: VolumeTypePVC;\n  configMap?: VolumeTypeConfigMaps;\n  emptyDir?: {};\n  secret?: VolumeTypeSecret;\n  subPath?: string;\n};\n\nexport type TaskRunStatus = {\n  completionTime?: string;\n  conditions?: Condition[];\n  podName?: string;\n  startTime?: string;\n  steps?: PLRTaskRunStep[];\n  taskResults?: TektonResultsRun[]; // in tekton v1 taskResults is renamed to results\n  results?: TektonResultsRun[];\n};\n\nexport type TaskRunKind = K8sResourceCommon & {\n  spec: {\n    taskRef?: PipelineTaskRef;\n    taskSpec?: TektonTaskSpec;\n    serviceAccountName?: string;\n    params?: PipelineTaskParam[];\n    resources?: TektonResource[];\n    timeout?: string;\n    workspaces?: TaskRunWorkspace[];\n  };\n  status?: TaskRunStatus;\n};\n\nexport const TaskRunGroupVersionKind: K8sGroupVersionKind = {\n  group: 'tekton.dev',\n  version: 'v1',\n  kind: 'TaskRun',\n};\n\nexport type PipelineRunStatusType = {\n  Completed?: number;\n  Failed?: number;\n  Skipped?: number;\n  Cancelled?: number;\n  Incomplete?: number;\n  PipelineNotStarted?: number;\n  Pending?: number;\n  Running?: number;\n  Succeeded?: number;\n};\n","export enum ComputedStatus {\n  Cancelling = 'Cancelling',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Running = 'Running',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'In Progress' = 'In Progress',\n  FailedToStart = 'FailedToStart',\n  PipelineNotStarted = 'PipelineNotStarted',\n  Skipped = 'Skipped',\n  Cancelled = 'Cancelled',\n  Pending = 'Pending',\n  Idle = 'Idle',\n  Other = '-',\n}\n\nexport enum CustomRunStatus {\n  RunCancelled = 'RunCancelled',\n}\n","import * as React from 'react';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateVariant } from '@patternfly/react-core';\nimport { Table, Thead, Tbody, Th, Td, Tr } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { SectionHeading } from '@console/internal/components/utils';\nimport { ComputedStatus, TektonResultsRun } from '../../../types';\nimport { handleURLs } from '../../../utils/render-utils';\n\nexport interface ResultsListProps {\n  results: TektonResultsRun[];\n  resourceName: string;\n  status: string;\n}\n\nconst ResultsList: React.FC<ResultsListProps> = ({ results, resourceName, status }) => {\n  const { t } = useTranslation();\n  if (!results.length) return null;\n\n  return (\n    <>\n      <SectionHeading text={t('pipelines-plugin~{{resourceName}} results', { resourceName })} />\n      {status !== ComputedStatus.Failed ? (\n        <Table aria-label={t('pipelines-plugin~{{resourceName}} results', { resourceName })}>\n          <Thead>\n            <Tr>\n              <Th>{t('pipelines-plugin~Name')}</Th>\n              <Th>{t('pipelines-plugin~Value')}</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {results.map(({ name, value }) => (\n              <Tr key={`row-${name}`}>\n                <Td>{name}</Td>\n                <Td>{handleURLs(value)}</Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      ) : (\n        <Bullseye>\n          <EmptyState variant={EmptyStateVariant.full}>\n            <EmptyStateBody>\n              {t('pipelines-plugin~No {{resourceName}} results available due to failure', {\n                resourceName,\n              })}\n            </EmptyStateBody>\n          </EmptyState>\n        </Bullseye>\n      )}\n    </>\n  );\n};\n\nexport default ResultsList;\n","import * as React from 'react';\nimport { ExternalLink } from '@console/internal/components/utils';\n\nimport './render-utils.scss';\n\nconst URL_REGEXP = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)/;\nexport const GROUP_MATCH_REGEXP = new RegExp(`^(.*\\\\s)?(${URL_REGEXP.source})(\\\\s.*)?$`, 'i');\n\nexport const handleURLs = (value: string): React.ReactNode => {\n  if (typeof value !== 'string') return JSON.stringify(value, null, 2);\n\n  const matches = value.match(GROUP_MATCH_REGEXP);\n  const [, prefix, link, suffix] = matches || [];\n\n  if (link) {\n    return (\n      <>\n        {handleURLs(prefix)}\n        <ExternalLink additionalClassName=\"opp-render-utils-external-url\" href={link}>\n          {link}\n        </ExternalLink>\n        {handleURLs(suffix)}\n      </>\n    );\n  }\n\n  return value;\n};\n","import * as React from 'react';\nimport { EmptyState, EmptyStateBody, EmptyStateVariant } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineRunKind } from '../../../types';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport ResultsList from './ResultsList';\n\nconst OutputTab: React.FC<{ obj: PipelineRunKind }> = ({ obj: pipelineRun }) => {\n  const { t } = useTranslation();\n\n  return pipelineRun.status?.pipelineResults || pipelineRun.status?.results ? (\n    <div className=\"co-m-pane__body\">\n      <ResultsList\n        results={pipelineRun.status?.pipelineResults || pipelineRun.status?.results}\n        resourceName={t(PipelineRunModel.labelKey)}\n        status={pipelineRunFilterReducer(pipelineRun)}\n      />\n    </div>\n  ) : (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateBody>\n        <p>{t('pipelines-plugin~No Output found')}</p>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\nexport default OutputTab;\n"],"sourceRoot":""}