{"version":3,"sources":["webpack:///./public/components/secrets/create-secret/index.tsx","webpack:///./public/components/secrets/create-secret/utils.ts","webpack:///./public/components/secrets/create-secret/DropableFileInput.tsx","webpack:///./public/components/secrets/create-secret/SecretFormWrapper.tsx","webpack:///./public/components/secrets/create-secret/SecretSubForm.tsx","webpack:///./public/components/secrets/create-secret/SourceSecretForm.tsx","webpack:///./public/components/secrets/create-secret/BasicAuthSubform.tsx","webpack:///./public/components/secrets/create-secret/SSHAuthSubform.tsx","webpack:///./public/components/secrets/create-secret/PullSecretForm.tsx","webpack:///./public/components/secrets/create-secret/CreateConfigSubform.tsx","webpack:///./public/components/secrets/create-secret/PullSecretCredentialEntry.tsx","webpack:///./public/components/secrets/create-secret/UploadConfigSubform.tsx","webpack:///./public/components/secrets/create-secret/WebHookSecretForm.tsx","webpack:///./public/components/secrets/create-secret/GenericSecretForm.tsx","webpack:///./public/components/secrets/create-secret/KeyValueEntryForm.tsx","webpack:///./public/components/secrets/create-secret/EditSecret.tsx","webpack:///./public/components/secrets/create-secret/CreateSecret.tsx"],"names":["toDefaultSecretType","typeAbstraction","source","basicAuth","image","dockerconfigjson","opaque","toTypeAbstraction","secret","data","type","sshAuth","dockercfg","webhook","generic","generateSecret","s4","Math","floor","random","toString","substring","determineSecretType","stringData","dataKeys","sort","tls","serviceAccountToken","getImageSecretKey","secretType","useSecretTitle","isCreate","t","useSecretDescription","DroppableFileInput","props","loader","then","c","SecretFormWrapper","modal","onCancel","navigate","params","existingSecret","obj","defaultSecretType","secretTypeAbstraction","initialSecret","fixed","apiVersion","kind","metadata","name","setSecret","inProgress","setInProgress","error","setError","setStringData","value","decode","base64StringData","setBase64StringData","disableForm","setDisableForm","title","helptext","cancel","ns","onDataChanged","secretsData","onError","err","onNameChanged","event","target","newSecret","save","e","preventDefault","encode","namespace","s","onSave","message","renderBody","disabled","className","htmlFor","onChange","id","required","onFormDisable","disable","onSubmit","errorMessage","submitText","helpText","isDisabled","variant","saveButtonText","onClick","SecretSubForm","SourceSecretFormWithTranslation","super","this","state","authType","changeAuthenticationType","bind","setState","authTypes","items","dropDownClassName","selectedKey","SourceSecretForm","BasicAuthSubformWithTranslation","username","password","changeData","BasicAuthSubform","SSHAuthSubform","fileData","endsWith","inputFileData","label","inputFieldHelpText","textareaFieldHelpText","isRequired","PullSecretForm","setAuthType","pullSecretData","key","jsonContent","JSON","parse","secretData","newDataKey","stringify","onchange","credentials","onDisable","CreateConfigSubformWithTranslation","isDockerconfigjson","secretEntriesArray","imageSecretObjectToArray","hasDuplicate","entry","address","email","auth","uid","imageSecretObject","imageSecretArray","newImageSecretEntry","v","k","decodedAuth","parsedAuth","Array","push","imageSecretsObject","imageSecretArrayToObject","updatedEntry","entryIndex","updatedEntryData","propagateEntryChange","splice","secretEntriesList","entryData","index","removeEntry","addEntry","CreateConfigSubform","PullSecretCredentialEntry","updateEntry","trimmedUsername","trim","trimmedPassword","handleBlurEvent","currentTarget","handleChangeEvent","onBlur","UploadConfigSubformWithTranslation","configFile","parseError","onFileChange","updateState","parsedData","UploadConfigSubform","WebHookSecretFormWithTranslation","WebHookSecretKey","changeWebHookSecretkey","generateWebHookSecret","WebHookSecretForm","GenericSecretFormWithTranslation","genericSecretObjectToArray","genericSecretObject","newGenericSecretEntry","isBinary","isBase64","genericSecretArray","acc","entryID","updatedSecretEntriesArray","genericSecretArrayToObject","GenericSecretForm","KeyValueEntryFormWithTranslation","onValueChange","onKeyChange","inputFileIsBinary","KeyValueEntryForm","SecretLoadingWrapper","fixedKeys","reduce","EditSecret","resources","isList","prop","CreateSecret"],"mappings":"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","file":"create-secret-chunk-9863d55b757af203bd6d.min.js","sourcesContent":["export * from './utils';\nexport * from './const';\nexport * from './SecretFormWrapper';\nexport * from './PullSecretForm';\nexport * from './PullSecretCredentialEntry';\nexport * from './CreateConfigSubform';\nexport * from './UploadConfigSubform';\nexport * from './WebHookSecretForm';\nexport * from './SourceSecretForm';\nexport * from './BasicAuthSubform';\nexport * from './SSHAuthSubform';\nexport * from './GenericSecretForm';\nexport * from './KeyValueEntryForm';\nexport * from './EditSecret';\nexport * from './CreateSecret';\nexport * from './DropableFileInput';\nexport * from './SecretSubForm';\nexport * from './types';\n","import * as _ from 'lodash-es';\nimport { WebHookSecretKey } from '../../secret';\nimport { useTranslation } from 'react-i18next';\nimport { SecretType, SecretTypeAbstraction } from './const';\n\nexport const toDefaultSecretType = (typeAbstraction: SecretTypeAbstraction): SecretType => {\n  switch (typeAbstraction) {\n    case SecretTypeAbstraction.source:\n      return SecretType.basicAuth;\n    case SecretTypeAbstraction.image:\n      return SecretType.dockerconfigjson;\n    default:\n      return SecretType.opaque;\n  }\n};\n\nexport const toTypeAbstraction = (secret): SecretTypeAbstraction => {\n  const { data, type } = secret;\n  switch (type) {\n    case SecretType.basicAuth:\n    case SecretType.sshAuth:\n      return SecretTypeAbstraction.source;\n    case SecretType.dockerconfigjson:\n    case SecretType.dockercfg:\n      return SecretTypeAbstraction.image;\n    default:\n      if (data?.[WebHookSecretKey] && _.size(data) === 1) {\n        return SecretTypeAbstraction.webhook;\n      }\n      return SecretTypeAbstraction.generic;\n  }\n};\n\nexport const generateSecret = (): string => {\n  // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n  const s4 = () =>\n    Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  return s4() + s4() + s4() + s4();\n};\n\nexport const determineSecretType = (stringData): SecretType => {\n  const dataKeys = _.keys(stringData).sort();\n  if (_.isEqual(dataKeys, ['tls.crt', 'tls.key'])) {\n    return SecretType.tls;\n  } else if (_.isEqual(dataKeys, ['ca.crt', 'namespace', 'service-ca.crt', 'token'])) {\n    return SecretType.serviceAccountToken;\n  } else if (_.isEqual(dataKeys, ['.dockercfg'])) {\n    return SecretType.dockercfg;\n  } else if (_.isEqual(dataKeys, ['.dockerconfigjson'])) {\n    return SecretType.dockerconfigjson;\n  } else if (_.isEqual(dataKeys, ['password', 'username'])) {\n    return SecretType.basicAuth;\n  } else if (_.isEqual(dataKeys, ['ssh-privatekey'])) {\n    return SecretType.sshAuth;\n  }\n  return SecretType.opaque;\n};\n\nexport const getImageSecretKey = (secretType: SecretType): string => {\n  switch (secretType) {\n    case SecretType.dockercfg:\n      return '.dockercfg';\n    case SecretType.dockerconfigjson:\n      return '.dockerconfigjson';\n    default:\n      return secretType;\n  }\n};\n\nexport const useSecretTitle = (\n  isCreate: boolean,\n  typeAbstraction: SecretTypeAbstraction,\n): string => {\n  const { t } = useTranslation();\n  switch (typeAbstraction) {\n    case SecretTypeAbstraction.generic:\n      return isCreate ? t('public~Create key/value secret') : t('public~Edit key/value secret');\n    case SecretTypeAbstraction.image:\n      return isCreate ? t('public~Create image pull secret') : t('public~Edit image pull secret');\n    default:\n      return isCreate\n        ? t('public~Create {{secretType}} secret', { secretType: typeAbstraction })\n        : t('public~Edit {{secretType}} secret', { secretType: typeAbstraction });\n  }\n};\n\nexport const useSecretDescription = (typeAbstraction: SecretTypeAbstraction): string => {\n  const { t } = useTranslation();\n  switch (typeAbstraction) {\n    case SecretTypeAbstraction.generic:\n      return t(\n        'public~Key/value secrets let you inject sensitive data into your application as files or environment variables.',\n      );\n    case SecretTypeAbstraction.source:\n      return t('public~Source secrets let you authenticate against a Git server.');\n    case SecretTypeAbstraction.image:\n      return t('public~Image pull secrets let you authenticate against a private image registry.');\n    case SecretTypeAbstraction.webhook:\n      return t('public~Webhook secrets let you authenticate a webhook trigger.');\n    default:\n      return null;\n  }\n};\n","import * as React from 'react';\nimport { AsyncComponent } from '../../utils/async';\n\n//TODO :Create a shared LazyDroppableFileInput component.\nexport const DroppableFileInput = (props) => (\n  <AsyncComponent\n    loader={() => import('../../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { Base64 } from 'js-base64';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { useParams, useNavigate } from 'react-router-dom-v5-compat';\nimport { k8sCreate, k8sUpdate, K8sResourceKind, referenceFor } from '../../../module/k8s';\nimport { ButtonBar, PageHeading, resourceObjPath } from '../../utils';\nimport { ModalBody, ModalTitle, ModalSubmitFooter } from '../../factory/modal';\nimport { SecretModel } from '../../../models';\nimport { SecretTypeAbstraction } from './const';\nimport {\n  toDefaultSecretType,\n  determineSecretType,\n  useSecretTitle,\n  useSecretDescription,\n} from './utils';\nimport { SecretSubForm } from './SecretSubForm';\n\nexport const SecretFormWrapper: React.FC<BaseEditSecretProps_> = (props) => {\n  const { isCreate, modal, onCancel } = props;\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const existingSecret = _.pick(props.obj, ['metadata', 'type']);\n  const defaultSecretType = toDefaultSecretType(props.secretTypeAbstraction);\n  const initialSecret = _.defaultsDeep({}, props.fixed, existingSecret, {\n    apiVersion: 'v1',\n    data: {},\n    kind: 'Secret',\n    metadata: {\n      name: '',\n    },\n    type: defaultSecretType,\n  });\n\n  const [secretTypeAbstraction] = React.useState(props.secretTypeAbstraction);\n  const [secret, setSecret] = React.useState(initialSecret);\n  const [inProgress, setInProgress] = React.useState(false);\n  const [error, setError] = React.useState();\n  const [stringData, setStringData] = React.useState(\n    _.mapValues(_.get(props.obj, 'data'), (value) => {\n      return value ? Base64.decode(value) : '';\n    }),\n  );\n  const [base64StringData, setBase64StringData] = React.useState({});\n  const [disableForm, setDisableForm] = React.useState(false);\n  const title = useSecretTitle(isCreate, secretTypeAbstraction);\n  const helptext = useSecretDescription(secretTypeAbstraction);\n  const cancel = () => navigate(`/k8s/ns/${params.ns}/core~v1~Secret`);\n\n  const onDataChanged = (secretsData) => {\n    setStringData({ ...secretsData?.stringData });\n    setBase64StringData({ ...secretsData?.base64StringData });\n  };\n\n  const onError = (err) => {\n    setError(err);\n    setInProgress(false);\n  };\n\n  const onNameChanged = (event) => {\n    const name = event.target.value;\n    const newSecret = _.cloneDeep(secret);\n    newSecret.metadata.name = name;\n    setSecret(newSecret);\n  };\n\n  const save = (e) => {\n    e.preventDefault();\n    const { metadata } = secret;\n    setInProgress(true);\n    const data = {\n      ..._.mapValues(stringData, (value) => {\n        return Base64.encode(value);\n      }),\n      ...base64StringData,\n    };\n    const newSecret = _.assign(\n      {},\n      secret,\n      {\n        data,\n      },\n      // When creating new Secret, determine it's type from the `stringData` keys.\n      // When updating a Secret, use it's type.\n      isCreate ? { type: determineSecretType(stringData) } : {},\n    );\n    (isCreate\n      ? k8sCreate(SecretModel, newSecret)\n      : k8sUpdate(SecretModel, newSecret, metadata.namespace, newSecret.metadata.name)\n    ).then(\n      (s) => {\n        setInProgress(false);\n        if (props.onSave) {\n          props.onSave(s.metadata.name);\n        }\n        if (!props.modal) {\n          navigate(resourceObjPath(s, referenceFor(s)));\n        }\n      },\n      (err) => {\n        setError(err.message);\n        setInProgress(false);\n      },\n    );\n  };\n\n  const renderBody = () => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    return (\n      <>\n        <fieldset disabled={!isCreate}>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"secret-name\">\n              {t('public~Secret name')}\n            </label>\n            <div>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                onChange={onNameChanged}\n                value={secret?.metadata?.name}\n                aria-describedby=\"secret-name-help\"\n                id=\"secret-name\"\n                data-test=\"secret-name\"\n                required\n              />\n              <p className=\"help-block\" id=\"secret-name-help\">\n                {t('public~Unique name of the new secret.')}\n              </p>\n            </div>\n          </div>\n        </fieldset>\n        <SecretSubForm\n          typeAbstraction={props.secretTypeAbstraction}\n          onChange={onDataChanged}\n          onError={onError}\n          onFormDisable={(disable) => setDisableForm(disable)}\n          stringData={stringData}\n          secretType={secret.type}\n          isCreate={isCreate}\n        />\n      </>\n    );\n  };\n\n  return modal ? (\n    <form className=\"co-create-secret-form modal-content\" onSubmit={save}>\n      <ModalTitle>{title}</ModalTitle>\n      <ModalBody>{renderBody()}</ModalBody>\n      <ModalSubmitFooter\n        errorMessage={error || ''}\n        inProgress={inProgress}\n        submitText={t('public~Create')}\n        cancel={onCancel || cancel}\n      />\n    </form>\n  ) : (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading title={title} helpText={helptext} />\n      <div className=\"co-m-pane__body\">\n        <form className=\"co-m-pane__body-group co-create-secret-form\" onSubmit={save}>\n          {renderBody()}\n          <ButtonBar errorMessage={error} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button\n                type=\"submit\"\n                data-test=\"save-changes\"\n                isDisabled={disableForm}\n                variant=\"primary\"\n                id=\"save-changes\"\n              >\n                {props.saveButtonText || t('public~Create')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" id=\"cancel\" onClick={onCancel || cancel}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\ntype BaseEditSecretProps_ = {\n  obj?: K8sResourceKind;\n  fixed: any;\n  kind?: string;\n  isCreate?: boolean;\n  modal?: boolean;\n  secretTypeAbstraction?: SecretTypeAbstraction;\n  saveButtonText?: string;\n  onCancel?: () => void;\n  onSave?: (name: string) => void;\n};\n","import * as React from 'react';\nimport { SecretSubFormProps } from './types';\nimport { SecretTypeAbstraction } from './const';\nimport { SourceSecretForm } from './SourceSecretForm';\nimport { PullSecretForm } from './PullSecretForm';\nimport { WebHookSecretForm } from './WebHookSecretForm';\nimport { GenericSecretForm } from './GenericSecretForm';\n\nexport const SecretSubForm: React.FC<WithTypeAbstraction<SecretSubFormProps>> = ({\n  typeAbstraction,\n  ...props\n}) => {\n  switch (typeAbstraction) {\n    case SecretTypeAbstraction.source:\n      return <SourceSecretForm {...props} />;\n    case SecretTypeAbstraction.image:\n      return <PullSecretForm {...props} />;\n    case SecretTypeAbstraction.webhook:\n      return <WebHookSecretForm {...props} />;\n    default:\n      return <GenericSecretForm {...props} />;\n  }\n};\n\ntype WithTypeAbstraction<T> = T & {\n  typeAbstraction: SecretTypeAbstraction;\n};\n","import * as React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { Dropdown } from '../../utils';\nimport { SecretType } from './const';\nimport { BasicAuthSubform } from './BasicAuthSubform';\nimport { SSHAuthSubform } from './SSHAuthSubform';\nimport { SecretStringData } from './types';\n\nclass SourceSecretFormWithTranslation extends React.Component<\n  SourceSecretFormProps & WithT,\n  SourceSecretFormState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: this.props.secretType,\n      stringData: this.props.stringData || {},\n      authType: SecretType.basicAuth,\n    };\n    this.changeAuthenticationType = this.changeAuthenticationType.bind(this);\n    this.onDataChanged = this.onDataChanged.bind(this);\n  }\n  changeAuthenticationType(type: SecretType) {\n    this.setState(\n      {\n        type,\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  onDataChanged(secretsData) {\n    this.setState(\n      {\n        stringData: { ...secretsData },\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  render() {\n    const { t } = this.props;\n    const authTypes = {\n      [SecretType.basicAuth]: t('public~Basic authentication'),\n      [SecretType.sshAuth]: t('public~SSH key'),\n    };\n    return (\n      <>\n        {this.props.isCreate ? (\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"secret-type\">\n              {t('public~Authentication type')}\n            </label>\n            <div className=\"co-create-secret__dropdown\">\n              <Dropdown\n                items={authTypes}\n                dropDownClassName=\"dropdown--full-width\"\n                id=\"dropdown-selectbox\"\n                selectedKey={this.state.authType}\n                onChange={this.changeAuthenticationType}\n              />\n            </div>\n          </div>\n        ) : null}\n        {this.state.type === SecretType.basicAuth ? (\n          <BasicAuthSubform onChange={this.onDataChanged} stringData={this.state.stringData} />\n        ) : (\n          <SSHAuthSubform onChange={this.onDataChanged} stringData={this.state.stringData} />\n        )}\n      </>\n    );\n  }\n}\n\nexport const SourceSecretForm = withTranslation()(SourceSecretFormWithTranslation);\n\ntype SourceSecretFormState = {\n  type: SecretType;\n  stringData: SecretStringData;\n  authType: SecretType.basicAuth | SecretType.sshAuth;\n};\n\ntype SourceSecretFormProps = {\n  onChange: Function;\n  stringData: SecretStringData;\n  secretType: SecretType;\n  isCreate: boolean;\n};\n","import * as React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { SecretStringData } from './types';\n\nclass BasicAuthSubformWithTranslation extends React.Component<\n  BasicAuthSubformProps & WithT,\n  BasicAuthSubformState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: this.props.stringData.username || '',\n      password: this.props.stringData.password || '',\n    };\n    this.changeData = this.changeData.bind(this);\n  }\n  changeData(event) {\n    this.setState(\n      {\n        [event.target.name]: event.target.value,\n      } as BasicAuthSubformState,\n      () => this.props.onChange(this.state),\n    );\n  }\n\n  render() {\n    const { t } = this.props;\n    return (\n      <>\n        <div className=\"form-group\">\n          <label className=\"control-label\" htmlFor=\"username\">\n            {t('public~Username')}\n          </label>\n          <div>\n            <input\n              className=\"pf-v5-c-form-control\"\n              id=\"username\"\n              data-test=\"secret-username\"\n              aria-describedby=\"username-help\"\n              type=\"text\"\n              name=\"username\"\n              onChange={this.changeData}\n              value={this.state.username}\n            />\n            <p className=\"help-block\" id=\"username-help\">\n              {t('public~Optional username for Git authentication.')}\n            </p>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor=\"password\">\n            {t('public~Password or token')}\n          </label>\n          <div>\n            <input\n              className=\"pf-v5-c-form-control\"\n              id=\"password\"\n              data-test=\"secret-password\"\n              aria-describedby=\"password-help\"\n              type=\"password\"\n              name=\"password\"\n              onChange={this.changeData}\n              value={this.state.password}\n              required\n            />\n            <p className=\"help-block\" id=\"password-help\">\n              {t(\n                'public~Password or token for Git authentication. Required if a ca.crt or .gitconfig file is not specified.',\n              )}\n            </p>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const BasicAuthSubform = withTranslation()(BasicAuthSubformWithTranslation);\n\ntype BasicAuthSubformState = {\n  username: string;\n  password: string;\n};\n\ntype BasicAuthSubformProps = {\n  onChange: Function;\n  stringData: SecretStringData;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DroppableFileInput } from './DropableFileInput';\nimport { SecretStringData } from './types';\n\nexport const SSHAuthSubform: React.FC<SSHAuthSubformProps> = ({ onChange, stringData }) => {\n  const { t } = useTranslation();\n  const onFileChange = (fileData: string) => {\n    const value = fileData.endsWith('\\n') ? fileData : `${fileData}\\n`;\n    onChange({ 'ssh-privatekey': value });\n  };\n  return (\n    <DroppableFileInput\n      onChange={onFileChange}\n      inputFileData={stringData['ssh-privatekey'] || ''}\n      id=\"ssh-privatekey\"\n      label={t('public~SSH private key')}\n      inputFieldHelpText={t(\n        'public~Drag and drop file with your private SSH key here or browse to upload it.',\n      )}\n      textareaFieldHelpText={t('public~Private SSH key file for Git authentication.')}\n      isRequired={true}\n    />\n  );\n};\n\ntype SSHAuthSubformProps = {\n  onChange: Function;\n  stringData: SecretStringData;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dropdown } from '../../utils';\nimport { SecretSubFormProps } from './types';\nimport { getImageSecretKey } from './utils';\nimport { AUTHS_KEY } from './const';\nimport { CreateConfigSubform } from './CreateConfigSubform';\nimport { UploadConfigSubform } from './UploadConfigSubform';\n\nexport const PullSecretForm: React.FC<SecretSubFormProps> = ({\n  onChange,\n  onError,\n  onFormDisable,\n  stringData,\n  secretType,\n  isCreate,\n}) => {\n  const [authType, setAuthType] = React.useState('credentials');\n  const { t } = useTranslation();\n\n  const pullSecretData = React.useMemo<PullSecretData>(() => {\n    try {\n      const key = getImageSecretKey(secretType);\n      const jsonContent = stringData[key] ?? '{}';\n      return JSON.parse(jsonContent);\n    } catch (err) {\n      onError(`Error parsing secret's data: ${err.message}`);\n      return {};\n    }\n  }, [stringData, secretType]);\n\n  const onDataChanged = React.useCallback(\n    (secretData: PullSecretData) => {\n      if (!_.isError(secretData)) {\n        onFormDisable(false);\n      }\n      const newDataKey = secretData[AUTHS_KEY] ? '.dockerconfigjson' : '.dockercfg';\n      onChange({\n        stringData: {\n          [newDataKey]: JSON.stringify(secretData),\n        },\n        base64StringData: {},\n      });\n    },\n    [onFormDisable, onchange],\n  );\n\n  const authTypes = {\n    credentials: t('public~Image registry credentials'),\n    'config-file': t('public~Upload configuration file'),\n  };\n\n  return (\n    <>\n      {isCreate && (\n        <div className=\"form-group\">\n          <label className=\"control-label\" htmlFor=\"secret-type\">\n            {t('public~Authentication type')}\n          </label>\n          <div className=\"co-create-secret__dropdown\">\n            <Dropdown\n              items={authTypes}\n              dropDownClassName=\"dropdown--full-width\"\n              id=\"dropdown-selectbox\"\n              selectedKey={authType}\n              onChange={setAuthType}\n            />\n          </div>\n        </div>\n      )}\n      {authType === 'credentials' ? (\n        <CreateConfigSubform onChange={onDataChanged} stringData={pullSecretData} />\n      ) : (\n        <UploadConfigSubform\n          onChange={onDataChanged}\n          stringData={pullSecretData}\n          onDisable={onFormDisable}\n        />\n      )}\n    </>\n  );\n};\n\ntype DockerConfigData = {\n  [url: string]: {\n    username: string;\n    password: string;\n    email: string;\n    auth: string;\n  };\n};\n\ntype DockerConfigJSONData = {\n  auths: DockerConfigData;\n};\n\ntype PullSecretData = DockerConfigData | DockerConfigJSONData;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { Base64 } from 'js-base64';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { AUTHS_KEY } from './const';\nimport { PullSecretCredentialEntry } from './PullSecretCredentialEntry';\n\nclass CreateConfigSubformWithTranslation extends React.Component<\n  CreateConfigSubformProps & WithT,\n  CreateConfigSubformState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // If user creates a new image secret by filling out the form a 'kubernetes.io/dockerconfigjson' secret will be created.\n      isDockerconfigjson: _.isEmpty(this.props.stringData) || !!this.props.stringData[AUTHS_KEY],\n      secretEntriesArray: this.imageSecretObjectToArray(\n        this.props.stringData?.[AUTHS_KEY] || this.props.stringData,\n      ),\n      hasDuplicate: false,\n    };\n    this.onDataChanged = this.onDataChanged.bind(this);\n  }\n  newImageSecretEntry() {\n    return {\n      entry: {\n        address: '',\n        username: '',\n        password: '',\n        email: '',\n        auth: '',\n      },\n      uid: _.uniqueId(),\n    };\n  }\n  imageSecretObjectToArray(imageSecretObject) {\n    const imageSecretArray = [];\n    if (_.isEmpty(imageSecretObject)) {\n      return _.concat(imageSecretArray, this.newImageSecretEntry());\n    }\n    _.each(imageSecretObject, (v, k) => {\n      // Decode and parse 'auth' in case 'username' and 'password' are not part of the secret.\n      const decodedAuth = Base64.decode(_.get(v, 'auth', ''));\n      const parsedAuth = _.isEmpty(decodedAuth) ? _.fill(Array(2), '') : _.split(decodedAuth, ':');\n      imageSecretArray.push({\n        entry: {\n          address: k,\n          username: _.get(v, 'username', parsedAuth[0]),\n          password: _.get(v, 'password', parsedAuth[1]),\n          email: _.get(v, 'email', ''),\n          auth: _.get(v, 'auth', ''),\n        },\n        uid: _.get(v, 'uid', _.uniqueId()),\n      });\n    });\n    return imageSecretArray;\n  }\n  imageSecretArrayToObject(imageSecretArray) {\n    const imageSecretsObject = {};\n    _.each(imageSecretArray, (value) => {\n      imageSecretsObject[value.entry.address] = _.pick(value.entry, [\n        'username',\n        'password',\n        'auth',\n        'email',\n      ]);\n    });\n    return imageSecretsObject;\n  }\n  propagateEntryChange(secretEntriesArray) {\n    const imageSecretObject = this.imageSecretArrayToObject(secretEntriesArray);\n    this.props.onChange(\n      this.state.isDockerconfigjson ? { [AUTHS_KEY]: imageSecretObject } : imageSecretObject,\n    );\n  }\n  onDataChanged(updatedEntry, entryIndex: number) {\n    this.setState(\n      (state: CreateConfigSubformState) => {\n        const secretEntriesArray = [...state.secretEntriesArray];\n        const updatedEntryData = {\n          uid: secretEntriesArray[entryIndex].uid,\n          entry: updatedEntry,\n          auth: Base64.encode(`${updatedEntry.username}:${updatedEntry.password}`),\n        };\n        secretEntriesArray[entryIndex] = updatedEntryData;\n        return {\n          secretEntriesArray,\n        };\n      },\n      () => this.propagateEntryChange(this.state.secretEntriesArray),\n    );\n  }\n  removeEntry(entryIndex: number) {\n    this.setState(\n      (state: CreateConfigSubformState) => {\n        const secretEntriesArray = [...state.secretEntriesArray];\n        secretEntriesArray.splice(entryIndex, 1);\n        return { secretEntriesArray };\n      },\n      () => this.propagateEntryChange(this.state.secretEntriesArray),\n    );\n  }\n  addEntry() {\n    this.setState(\n      {\n        secretEntriesArray: _.concat(this.state.secretEntriesArray, this.newImageSecretEntry()),\n      },\n      () => {\n        this.propagateEntryChange(this.state.secretEntriesArray);\n      },\n    );\n  }\n  render() {\n    const { t } = this.props;\n    const secretEntriesList = _.map(this.state.secretEntriesArray, (entryData, index) => {\n      const { uid, entry } = entryData ?? {};\n      const { address, email, password, username } = entry ?? {};\n      return (\n        <div className=\"co-add-remove-form__entry\" key={uid}>\n          {_.size(this.state.secretEntriesArray) > 1 && (\n            <div className=\"co-add-remove-form__link--remove-entry\">\n              <Button\n                onClick={() => this.removeEntry(index)}\n                type=\"button\"\n                variant=\"link\"\n                data-test=\"remove-entry-button\"\n              >\n                <MinusCircleIcon className=\"co-icon-space-r\" />\n                {t('public~Remove credentials')}\n              </Button>\n            </div>\n          )}\n          <PullSecretCredentialEntry\n            id={index}\n            address={address}\n            email={email}\n            password={password}\n            username={username}\n            onChange={this.onDataChanged}\n          />\n        </div>\n      );\n    });\n    return (\n      <>\n        {secretEntriesList}\n        <Button\n          className=\"co-create-secret-form__link--add-entry pf-m-link--align-left\"\n          onClick={() => this.addEntry()}\n          type=\"button\"\n          variant=\"link\"\n          data-test=\"add-credentials-button\"\n        >\n          <PlusCircleIcon className=\"co-icon-space-r\" />\n          {t('public~Add credentials')}\n        </Button>\n      </>\n    );\n  }\n}\n\nexport const CreateConfigSubform = withTranslation()(CreateConfigSubformWithTranslation);\n\ntype CreateConfigSubformState = {\n  isDockerconfigjson: boolean;\n  hasDuplicate: boolean;\n  secretEntriesArray: {\n    entry: {\n      address: string;\n      username: string;\n      password: string;\n      email: string;\n      auth: string;\n    };\n    uid: string;\n  }[];\n};\n\ntype CreateConfigSubformProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: any;\n  };\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Base64 } from 'js-base64';\n\nexport const PullSecretCredentialEntry: React.FC<PullSecretCredentialEntryProps> = ({\n  id,\n  address,\n  email,\n  password,\n  username,\n  onChange,\n}) => {\n  const { t } = useTranslation();\n\n  const updateEntry = (name: string, value: string): void => {\n    const trimmedUsername = username.trim();\n    const trimmedPassword = password.trim();\n    const auth = username && password ? Base64.encode(`${trimmedUsername}:${trimmedPassword}`) : '';\n    onChange(\n      {\n        address,\n        username,\n        password,\n        email,\n        [name]: value,\n        ...(auth ? { auth } : {}),\n      },\n      id,\n    );\n  };\n\n  const handleBlurEvent = (e: React.SyntheticEvent<HTMLInputElement>) =>\n    updateEntry(e.currentTarget.name, e.currentTarget.value.trim());\n\n  const handleChangeEvent = (e: React.SyntheticEvent<HTMLInputElement>) =>\n    updateEntry(e.currentTarget.name, e.currentTarget.value);\n\n  return (\n    <div className=\"co-m-pane__body-group\" data-test-id=\"create-image-secret-form\">\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor={`${id}-address`}>\n          {t('public~Registry server address')}\n        </label>\n        <div>\n          <input\n            className=\"pf-v5-c-form-control\"\n            id={`${id}-address`}\n            aria-describedby={`${id}-address-help`}\n            type=\"text\"\n            name=\"address\"\n            onChange={handleChangeEvent}\n            value={address}\n            onBlur={handleBlurEvent}\n            data-test=\"image-secret-address\"\n            required\n          />\n        </div>\n        <p className=\"help-block\" id={`${id}-address-help`}>\n          {t('public~For example quay.io or docker.io')}\n        </p>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor={`${id}-username`}>\n          {t('public~Username')}\n        </label>\n        <div>\n          <input\n            className=\"pf-v5-c-form-control\"\n            id={`${id}-username`}\n            type=\"text\"\n            name=\"username\"\n            onChange={handleChangeEvent}\n            value={username}\n            onBlur={handleBlurEvent}\n            data-test=\"image-secret-username\"\n            required\n          />\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor={`${id}-password`}>\n          {t('public~Password')}\n        </label>\n        <div>\n          <input\n            className=\"pf-v5-c-form-control\"\n            id={`${id}-password`}\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChangeEvent}\n            value={password}\n            onBlur={handleBlurEvent}\n            data-test=\"image-secret-password\"\n            required\n          />\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"control-label\" htmlFor={`${id}-email`}>\n          {t('public~Email')}\n        </label>\n        <div>\n          <input\n            className=\"pf-v5-c-form-control\"\n            id={`${id}-email`}\n            type=\"text\"\n            name=\"email\"\n            onChange={handleChangeEvent}\n            value={email}\n            onBlur={handleBlurEvent}\n            data-test=\"image-secret-email\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype PullSecretCredentialEntryProps = {\n  id: number;\n  address: string;\n  email: string;\n  password: string;\n  username: string;\n  onChange: (updatedEntry, entryIndex: number) => void;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { DroppableFileInput } from './DropableFileInput';\n\nclass UploadConfigSubformWithTranslation extends React.Component<\n  UploadConfigSubformProps & WithT,\n  UploadConfigSubformState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      configFile: _.isEmpty(this.props.stringData) ? '' : JSON.stringify(this.props.stringData),\n      parseError: false,\n    };\n    this.changeData = this.changeData.bind(this);\n    this.onFileChange = this.onFileChange.bind(this);\n  }\n  changeData(event) {\n    this.updateState(_.attempt(JSON.parse, event.target.value), event.target.value);\n  }\n  onFileChange(fileData) {\n    this.updateState(_.attempt(JSON.parse, fileData), fileData);\n  }\n  updateState(parsedData, stringData) {\n    this.setState(\n      {\n        configFile: stringData,\n        parseError: _.isError(parsedData),\n      },\n      () => {\n        this.props.onChange(parsedData);\n        this.props.onDisable(this.state.parseError);\n      },\n    );\n  }\n  render() {\n    const { t } = this.props;\n    return (\n      <>\n        <DroppableFileInput\n          onChange={this.onFileChange}\n          inputFileData={this.state.configFile}\n          id=\"docker-config\"\n          label={t('public~Configuration file')}\n          inputFieldHelpText={t('public~Upload a .dockercfg or .docker/config.json file.')}\n          textareaFieldHelpText={t(\n            'public~File with credentials and other configuration for connecting to a secured image registry.',\n          )}\n          isRequired={true}\n        />\n        {this.state.parseError && (\n          <div className=\"co-create-secret-warning\">\n            {t('public~Configuration file should be in JSON format.')}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport const UploadConfigSubform = withTranslation()(UploadConfigSubformWithTranslation);\n\ntype UploadConfigSubformState = {\n  parseError: boolean;\n  configFile: string;\n};\n\ntype UploadConfigSubformProps = {\n  onChange: Function;\n  onDisable: Function;\n  stringData: {\n    [key: string]: Object;\n  };\n};\n","import * as React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { generateSecret } from './utils';\nimport { SecretStringData } from './types';\n\nclass WebHookSecretFormWithTranslation extends React.Component<\n  WebHookSecretFormProps & WithT,\n  WebHookSecretFormState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stringData: { WebHookSecretKey: this.props.stringData.WebHookSecretKey || '' },\n    };\n    this.changeWebHookSecretkey = this.changeWebHookSecretkey.bind(this);\n    this.generateWebHookSecret = this.generateWebHookSecret.bind(this);\n  }\n  changeWebHookSecretkey(event) {\n    this.setState(\n      {\n        stringData: { WebHookSecretKey: event.target.value },\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  generateWebHookSecret() {\n    this.setState(\n      {\n        stringData: { WebHookSecretKey: generateSecret() },\n      },\n      () => this.props.onChange(this.state),\n    );\n  }\n  render() {\n    const { t } = this.props;\n    return (\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor=\"webhook-secret-key\">\n          {t('public~Webhook secret key')}\n        </label>\n        <div className=\"pf-v5-c-input-group\">\n          <input\n            className=\"pf-v5-c-form-control\"\n            id=\"webhook-secret-key\"\n            data-test=\"secret-key\"\n            type=\"text\"\n            name=\"webhookSecretKey\"\n            onChange={this.changeWebHookSecretkey}\n            value={this.state.stringData.WebHookSecretKey}\n            aria-describedby=\"webhook-secret-help\"\n            required\n          />\n          <button\n            type=\"button\"\n            onClick={this.generateWebHookSecret}\n            className=\"pf-v5-c-button pf-m-tertiary\"\n            data-test=\"webhook-generate-button\"\n          >\n            {t('public~Generate')}\n          </button>\n        </div>\n        <p className=\"help-block\" id=\"webhook-secret-help\">\n          {t('public~Value of the secret will be supplied when invoking the webhook.')}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport const WebHookSecretForm = withTranslation()(WebHookSecretFormWithTranslation);\n\ntype WebHookSecretFormState = {\n  stringData: SecretStringData;\n};\n\ntype WebHookSecretFormProps = {\n  onChange: Function;\n  onError: Function;\n  onFormDisable: Function;\n  secretType: string;\n  stringData: SecretStringData;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { Base64 } from 'js-base64';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/minus-circle-icon';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport * as ITOB from 'istextorbinary/edition-es2017';\nimport { KeyValueEntryFormState, SecretStringData } from './types';\nimport { KeyValueEntryForm } from './KeyValueEntryForm';\n\nclass GenericSecretFormWithTranslation extends React.Component<\n  GenericSecretFormProps & WithT,\n  GenericSecretFormState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      secretEntriesArray: this.genericSecretObjectToArray(this.props.stringData),\n    };\n    this.onDataChanged = this.onDataChanged.bind(this);\n  }\n  newGenericSecretEntry() {\n    return {\n      entry: {\n        key: '',\n        value: '',\n      },\n      uid: _.uniqueId(),\n    };\n  }\n  genericSecretObjectToArray(genericSecretObject) {\n    if (_.isEmpty(genericSecretObject)) {\n      return [this.newGenericSecretEntry()];\n    }\n    return _.map(genericSecretObject, (value, key) => {\n      const isBinary = ITOB.isBinary(null, value);\n      return {\n        uid: _.uniqueId(),\n        entry: {\n          key,\n          value: isBinary ? Base64.encode(value) : value,\n          isBase64: isBinary,\n          isBinary,\n        },\n      };\n    });\n  }\n  genericSecretArrayToObject(genericSecretArray) {\n    return _.reduce(\n      genericSecretArray,\n      (acc, k) =>\n        _.assign(acc, {\n          [k.entry.key]:\n            k.entry?.isBase64 || k.entry?.isBinary ? k.entry.value : Base64.encode(k.entry.value),\n        }),\n      {},\n    );\n  }\n  onDataChanged(updatedEntry, entryID) {\n    const updatedSecretEntriesArray = [...this.state.secretEntriesArray];\n    const updatedEntryData = {\n      uid: updatedSecretEntriesArray[entryID].uid,\n      entry: updatedEntry,\n    };\n    updatedSecretEntriesArray[entryID] = updatedEntryData;\n    this.setState(\n      {\n        secretEntriesArray: updatedSecretEntriesArray,\n      },\n      () =>\n        this.props.onChange({\n          base64StringData: this.genericSecretArrayToObject(this.state.secretEntriesArray),\n        }),\n    );\n  }\n  removeEntry(entryID) {\n    const updatedSecretEntriesArray = [...this.state.secretEntriesArray];\n    updatedSecretEntriesArray.splice(entryID, 1);\n    this.setState(\n      {\n        secretEntriesArray: updatedSecretEntriesArray,\n      },\n      () =>\n        this.props.onChange({\n          base64StringData: this.genericSecretArrayToObject(this.state.secretEntriesArray),\n        }),\n    );\n  }\n  addEntry() {\n    this.setState(\n      {\n        secretEntriesArray: _.concat(this.state.secretEntriesArray, this.newGenericSecretEntry()),\n      },\n      () =>\n        this.props.onChange({\n          base64StringData: this.genericSecretArrayToObject(this.state.secretEntriesArray),\n        }),\n    );\n  }\n  render() {\n    const { t } = this.props;\n    const secretEntriesList = _.map(this.state.secretEntriesArray, (entryData, index) => {\n      return (\n        <div className=\"co-add-remove-form__entry\" key={entryData.uid}>\n          {_.size(this.state.secretEntriesArray) > 1 && (\n            <div className=\"co-add-remove-form__link--remove-entry\">\n              <Button\n                type=\"button\"\n                onClick={() => this.removeEntry(index)}\n                variant=\"link\"\n                data-test=\"remove-entry-button\"\n              >\n                <MinusCircleIcon className=\"co-icon-space-r\" />\n                {t('public~Remove key/value')}\n              </Button>\n            </div>\n          )}\n          <KeyValueEntryForm id={index} entry={entryData.entry} onChange={this.onDataChanged} />\n        </div>\n      );\n    });\n    return (\n      <>\n        {secretEntriesList}\n        <Button\n          className=\"co-create-secret-form__link--add-entry pf-m-link--align-left\"\n          onClick={() => this.addEntry()}\n          type=\"button\"\n          variant=\"link\"\n          data-test=\"add-credentials-button\"\n        >\n          <PlusCircleIcon className=\"co-icon-space-r\" />\n          {t('public~Add key/value')}\n        </Button>\n      </>\n    );\n  }\n}\n\nexport const GenericSecretForm = withTranslation()(GenericSecretFormWithTranslation);\n\ntype GenericSecretFormProps = {\n  onChange: Function;\n  stringData: SecretStringData;\n  isCreate: boolean;\n};\n\ntype GenericSecretFormState = {\n  secretEntriesArray: {\n    entry: KeyValueEntryFormState;\n    uid: string;\n  }[];\n};\n","import * as React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { DroppableFileInput } from './DropableFileInput';\nimport { KeyValueEntryFormState, KeyValueEntryFormProps } from './types';\n\nexport class KeyValueEntryFormWithTranslation extends React.Component<\n  KeyValueEntryFormProps & WithT,\n  KeyValueEntryFormState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      key: props.entry.key,\n      value: props.entry.value,\n      isBinary: props.entry.isBinary,\n    };\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onKeyChange = this.onKeyChange.bind(this);\n  }\n  onValueChange(fileData, isBinary) {\n    this.setState(\n      {\n        value: fileData,\n        isBase64: isBinary,\n      },\n      () => this.props.onChange(this.state, this.props.id),\n    );\n  }\n  onKeyChange(event) {\n    this.setState(\n      {\n        key: event.target.value,\n      },\n      () => this.props.onChange(this.state, this.props.id),\n    );\n  }\n  render() {\n    const { t } = this.props;\n    return (\n      <div className=\"co-create-generic-secret__form\">\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor={`${this.props.id}-key`}>\n            {t('public~Key')}\n          </label>\n          <div>\n            <input\n              className=\"pf-v5-c-form-control\"\n              id={`${this.props.id}-key`}\n              type=\"text\"\n              name=\"key\"\n              onChange={this.onKeyChange}\n              value={this.state.key}\n              data-test=\"secret-key\"\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <div>\n            <DroppableFileInput\n              onChange={this.onValueChange}\n              inputFileData={this.state.value}\n              id={`${this.props.id}-value`}\n              label={t('public~Value')}\n              inputFieldHelpText={t(\n                'public~Drag and drop file with your value here or browse to upload it.',\n              )}\n              inputFileIsBinary={this.state.isBinary}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const KeyValueEntryForm = withTranslation()(KeyValueEntryFormWithTranslation);\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport { WithT } from 'i18next';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { K8sResourceKind } from '../../../module/k8s';\nimport { Firehose, LoadingBox, StatusBox } from '../../utils';\nimport { SecretTypeAbstraction } from './const';\nimport { toTypeAbstraction } from './utils';\nimport { SecretFormWrapper } from './SecretFormWrapper';\n\nexport const SecretLoadingWrapper = withTranslation()(\n  class SecretLoadingWrapper extends React.Component<\n    SecretLoadingWrapperProps & WithT,\n    SecretLoadingWrapperState\n  > {\n    readonly state: SecretLoadingWrapperState = {\n      secretTypeAbstraction: SecretTypeAbstraction.generic,\n    };\n    componentDidUpdate() {\n      if (!_.isEmpty(this.props.obj.data)) {\n        const secretTypeAbstraction = toTypeAbstraction(this.props.obj.data);\n        if (this.state.secretTypeAbstraction !== secretTypeAbstraction) {\n          this.setState({\n            secretTypeAbstraction,\n          });\n        }\n      }\n    }\n    render() {\n      const { obj, fixedKeys } = this.props;\n      const { secretTypeAbstraction } = this.state;\n      if (!secretTypeAbstraction) {\n        return <LoadingBox />;\n      }\n      const fixed = fixedKeys?.reduce((acc, k) => ({ ...acc, [k]: obj.data?.[k] || '' }), {});\n\n      return (\n        <StatusBox {...obj}>\n          <SecretFormWrapper\n            {...this.props}\n            secretTypeAbstraction={secretTypeAbstraction}\n            obj={obj.data}\n            fixed={fixed}\n          />\n        </StatusBox>\n      );\n    }\n  },\n);\n\nexport const EditSecret = ({ kind }: EditSecretProps) => {\n  const params = useParams();\n  const { t } = useTranslation();\n  return (\n    <Firehose\n      resources={[{ kind, name: params.name, namespace: params.ns, isList: false, prop: 'obj' }]}\n    >\n      <SecretLoadingWrapper fixedKeys={['kind', 'metadata']} saveButtonText={t('public~Save')} />\n    </Firehose>\n  );\n};\n\ntype EditSecretProps = {\n  kind: string;\n};\n\ntype SecretLoadingWrapperProps = {\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n  fixedKeys: string[];\n  saveButtonText: string;\n};\n\ntype SecretLoadingWrapperState = {\n  secretTypeAbstraction: SecretTypeAbstraction;\n};\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { SecretTypeAbstraction } from './const';\nimport { SecretFormWrapper } from './SecretFormWrapper';\n\nexport const CreateSecret = () => {\n  const params = useParams();\n  const secretTypeAbstraction = params.type as SecretTypeAbstraction;\n  return (\n    <SecretFormWrapper\n      fixed={{ metadata: { namespace: params.ns } }}\n      secretTypeAbstraction={secretTypeAbstraction}\n      isCreate={true}\n    />\n  );\n};\n"],"sourceRoot":""}