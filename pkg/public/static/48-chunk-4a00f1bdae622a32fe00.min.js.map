{"version":3,"sources":["webpack:///./public/components/droppable-edit-yaml.tsx"],"names":["boxTarget","props","monitor","onDrop","isOver","EditYAMLComponent","FILE","connectObj","connectDropTarget","dropTarget","canDrop","ResourceYAMLEditor","initialResource","header","onSave","readOnly","create","onChange","hideHeader","DroppableEditYAML","super","fileUploadContents","this","state","fileUpload","errors","handleFileDrop","bind","clearFileUpload","newFileContent","file","lastFile","size","reader","FileReader","onload","buffer","Buffer","from","result","setState","previousState","name","addDocument","toString","trim","readAsArrayBuffer","item","allowMultiple","getItem","files","forEach","yamlFile","i","readFileContents","length","isCodeImportRedirect","obj","error","join"],"mappings":"4FAAA,0LAaA,MAIMA,EAAY,CAChB,KAAKC,EAAOC,GACND,EAAME,QAAUD,EAAQE,UAC1BH,EAAME,OAAOF,EAAOC,KAKpBG,EAAoB,YAAW,IAAYC,KAAMN,EAAW,CAACO,EAAYL,KAAY,CACzFM,kBAAmBD,EAAWE,aAC9BL,OAAQF,EAAQE,SAChBM,QAASR,EAAQQ,YAHO,CAItB,YAQSC,EAAwD,EACnEC,kBACAC,SACAC,SACAC,WACAC,SACAC,WACAC,gBAEA,gBAACC,EAAiB,CAChBP,gBAAiBA,EACjBC,OAAQA,EACRC,OAAQA,EACRC,SAAUA,EACVC,OAAQA,EACRC,SAAUA,EACVC,WAAYA,IAIHC,EAAoB,YAC/B,cAAgC,YAE9B,YAAYlB,GACVmB,MAAMnB,GAFA,KAAAoB,mBAA6B,GAGnCC,KAAKC,MAAQ,CACXC,WAAY,GACZC,OAAQ,IAEVH,KAAKI,eAAiBJ,KAAKI,eAAeC,KAAKL,MAC/CA,KAAKM,gBAAkBN,KAAKM,gBAAgBD,KAAKL,MAGnD,YAAYO,GACVP,KAAKD,mBAAqB,IAAUC,KAAKD,oBACrCQ,EACA,GAAGP,KAAKD,4BAA4BQ,IAG1C,iBAAiBC,EAAMC,GAErB,GAAKD,EAIL,GAAIA,EAAKE,MArEW,IAqEgB,CAClC,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACd,MAAMC,EAASC,EAAOC,KAAKL,EAAOM,QAC9B,WAAc,KAAMH,GACtBd,KAAKkB,SAAUC,IAAkB,CAC/BhB,OAAQ,IAAIgB,EAAchB,OAAQ,YAAYK,EAAKY,oEAGrDpB,KAAKqB,YAAYP,EAAOQ,WAAWC,QAC/Bd,GACFT,KAAKkB,SAAS,CAAEhB,WAAYF,KAAKD,uBAIvCY,EAAOa,kBAAkBhB,QAEzBR,KAAKkB,SAAUC,IAAkB,CAC/BhB,OAAQ,IAAIgB,EAAchB,OAAQ,YAAYK,EAAKY,2DAKzD,eAAeK,EAAM7C,GACnB,MAAM,cAAE8C,GAAkB1B,KAAKrB,MAC/B,GAAKC,EAIL,GADAoB,KAAKM,kBACDoB,EACF9C,EAAQ+C,UAAUC,MAAMC,QAAQ,CAACC,EAAUC,KACzC/B,KAAKgC,iBAAiBF,EAAUC,IAAMnD,EAAQ+C,UAAUC,MAAMK,OAAS,SAEpE,CACL,MAAOzB,GAAQ5B,EAAQ+C,UAAUC,MACjC5B,KAAKgC,iBAAiBxB,GAAM,IAIhC,kBACER,KAAKkB,SAAS,CAAEhB,WAAY,GAAIC,OAAQ,KACxCH,KAAKD,mBAAqB,GAG5B,SACE,MAAM,cACJ2B,EAAa,gBACbpC,EAAe,OACfI,GAAS,EAAK,SACdC,EAAW,KAAM,MAAI,WACrBC,GAAa,EAAK,qBAClBsC,GAAuB,GACrBlC,KAAKrB,OACH,OAAEwB,EAAM,WAAED,GAAeF,KAAKC,MACpC,OACE,gBAAClB,EAAiB,iBACZiB,KAAKrB,MAAK,CACd+C,cAAeA,EACfS,IAAK7C,EACLY,WAAYA,EACZkC,MAAOjC,EAAOkC,KAAK,MACnBxD,OAAQmB,KAAKI,eACbE,gBAAiBN,KAAKM,gBACtBZ,OAAQA,EACRC,SAAUA,EACVC,WAAYA,EACZsC,qBAAsBA,S","file":"48-chunk-4a00f1bdae622a32fe00.min.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { DropTarget } from 'react-dnd';\nimport { ResourceYAMLEditorProps } from '@console/dynamic-plugin-sdk';\n\nimport { EditYAML } from './edit-yaml';\nimport withDragDropContext from './utils/drag-drop-context';\nimport { DropTargetMonitor } from 'react-dnd/lib/interfaces';\nimport * as ITOB from 'istextorbinary/edition-es2017';\n\n// Maximal file size, in bytes, that user can upload\nconst maxFileUploadSize = 4000000;\nconst fileSizeErrorMsg = 'Maximum file size exceeded. File limit is 4MB.';\nconst fileTypeErrorMsg = 'Binary file detected. Edit text based YAML files only.';\n\nconst boxTarget = {\n  drop(props, monitor) {\n    if (props.onDrop && monitor.isOver()) {\n      props.onDrop(props, monitor);\n    }\n  },\n};\n\nconst EditYAMLComponent = DropTarget(NativeTypes.FILE, boxTarget, (connectObj, monitor) => ({\n  connectDropTarget: connectObj.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n}))(EditYAML as React.FC<EditYAMLProps>);\n\ntype DroppableEditYAMLProps = ResourceYAMLEditorProps & {\n  allowMultiple?: boolean;\n  isCodeImportRedirect?: boolean;\n};\n\n// Prevents SDK users from passing additional props\nexport const ResourceYAMLEditor: React.FC<ResourceYAMLEditorProps> = ({\n  initialResource,\n  header,\n  onSave,\n  readOnly,\n  create,\n  onChange,\n  hideHeader,\n}) => (\n  <DroppableEditYAML\n    initialResource={initialResource}\n    header={header}\n    onSave={onSave}\n    readOnly={readOnly}\n    create={create}\n    onChange={onChange}\n    hideHeader={hideHeader}\n  />\n);\n\nexport const DroppableEditYAML = withDragDropContext<DroppableEditYAMLProps>(\n  class DroppableEditYAML extends React.Component<DroppableEditYAMLProps, DroppableEditYAMLState> {\n    private fileUploadContents: string = '';\n    constructor(props) {\n      super(props);\n      this.state = {\n        fileUpload: '',\n        errors: [],\n      };\n      this.handleFileDrop = this.handleFileDrop.bind(this);\n      this.clearFileUpload = this.clearFileUpload.bind(this);\n    }\n\n    addDocument(newFileContent: string) {\n      this.fileUploadContents = _.isEmpty(this.fileUploadContents)\n        ? newFileContent\n        : `${this.fileUploadContents}\\n---\\n${newFileContent}`;\n    }\n\n    readFileContents(file, lastFile) {\n      // If unsupported file type is dropped into drop zone, file will be undefined\n      if (!file) {\n        return;\n      }\n      // limit size size uploading to 1 mb\n      if (file.size <= maxFileUploadSize) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const buffer = Buffer.from(reader.result);\n          if (ITOB.isBinary(null, buffer)) {\n            this.setState((previousState) => ({\n              errors: [...previousState.errors, `Ignoring ${file.name}: ${fileTypeErrorMsg}`],\n            }));\n          } else {\n            this.addDocument(buffer.toString().trim());\n            if (lastFile) {\n              this.setState({ fileUpload: this.fileUploadContents });\n            }\n          }\n        };\n        reader.readAsArrayBuffer(file);\n      } else {\n        this.setState((previousState) => ({\n          errors: [...previousState.errors, `Ignoring ${file.name}: ${fileSizeErrorMsg}`],\n        }));\n      }\n    }\n\n    handleFileDrop(item, monitor) {\n      const { allowMultiple } = this.props;\n      if (!monitor) {\n        return;\n      }\n      this.clearFileUpload();\n      if (allowMultiple) {\n        monitor.getItem().files.forEach((yamlFile, i) => {\n          this.readFileContents(yamlFile, i === monitor.getItem().files.length - 1);\n        });\n      } else {\n        const [file] = monitor.getItem().files;\n        this.readFileContents(file, true);\n      }\n    }\n\n    clearFileUpload() {\n      this.setState({ fileUpload: '', errors: [] });\n      this.fileUploadContents = '';\n    }\n\n    render() {\n      const {\n        allowMultiple,\n        initialResource,\n        create = false,\n        onChange = () => null,\n        hideHeader = false,\n        isCodeImportRedirect = false,\n      } = this.props;\n      const { errors, fileUpload } = this.state;\n      return (\n        <EditYAMLComponent\n          {...this.props}\n          allowMultiple={allowMultiple}\n          obj={initialResource}\n          fileUpload={fileUpload}\n          error={errors.join('\\n')}\n          onDrop={this.handleFileDrop}\n          clearFileUpload={this.clearFileUpload}\n          create={create}\n          onChange={onChange}\n          hideHeader={hideHeader}\n          isCodeImportRedirect={isCodeImportRedirect}\n        />\n      );\n    }\n  },\n);\n\ntype EditYAMLProps = {\n  allowMultiple?: boolean;\n  obj: ResourceYAMLEditorProps['initialResource'];\n  fileUpload: string;\n  error: string;\n  onDrop: (item: any, monitor: DropTargetMonitor) => void;\n  clearFileUpload: () => void;\n  create?: boolean;\n  onChange?: (content: string) => void;\n  hideHeader?: boolean;\n  isCodeImportRedirect?: boolean;\n};\n\nexport type DroppedFile = {\n  error?: string;\n  id: string;\n  name: string;\n  size: number;\n};\n\nexport type DroppableEditYAMLState = {\n  errors: string[];\n  fileUpload: string;\n};\n"],"sourceRoot":""}