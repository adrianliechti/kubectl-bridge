{"version":3,"sources":["webpack:///./packages/knative-plugin/src/components/pub-sub/PubSub.tsx","webpack:///./packages/knative-plugin/src/components/pub-sub/PubSubModal.tsx","webpack:///./packages/knative-plugin/src/components/pub-sub/PubSubController.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/knative-plugin/src/components/pub-sub/pub-sub-utils.ts","webpack:///./packages/knative-plugin/src/components/pub-sub/pubsub-validation-utils.ts","webpack:///./packages/knative-plugin/src/components/pub-sub/form-fields/PubSubFilter.tsx","webpack:///./packages/knative-plugin/src/components/pub-sub/form-fields/PubSubSubscriber.tsx"],"names":["source","cancel","close","target","metadata","name","t","apiVersion","sourceApiVersion","kind","sourceKind","namespace","sourceName","targetApiVersion","targetKind","targetName","getResourceModel","apiGroup","labelKey","initialValues","formData","spec","connectorSourceKind","broker","filter","channel","getSpecForKind","subscriber","ref","labelTitle","onSubmit","values","action","then","setStatus","subscriberAvailable","error","catch","err","errMessage","message","onReset","initialStatus","validationSchema","formikProps","filterEnabled","handleSubmit","isSubmitting","status","errors","dirty","className","fullWidth","type","text","label","required","inProgress","submitText","cancelText","submitDisabled","errorMessage","PubSubController","props","PubSubModalLauncher","flexStyle","display","flex","flexDirection","margin","title","subTitle","children","flexLayout","extraMargin","dataTest","style","getSinkableResourceOrder","split","getResourceApiGroup","craftResourceKey","key","resource","join","undefined","getResourceNameFromKey","pop","sanitizeResourceName","finalValues","pubsubValidationSchema","shape","setFieldValue","filterPairs","filters","hasOwnProperty","formatFilterData","attributes","nameValue","setNameValue","length","handleNameValuePairs","nameValuePairs","updatedNameValuePairs","value","fieldId","valueString","nameString","readOnly","allowSorting","updateParentData","addString","autoSelect","setFieldTouched","validateForm","resourceAlert","setResourceAlert","onSubscriberChange","selectedValue","modelResource","model","isRequired","variant","isInline","ns","to","onClick","resources","dataSelector","placeholder","showBadge","autocompleteFilter","strText","item","onChange","customResourceKey","disabled","resourceFilter","ownerReferences","onLoad","resourceList"],"mappings":"8FAAA,iFA4Ge,IA3FuB,EACpCA,SACAC,SACAC,QACAC,SAAS,CAAEC,SAAU,CAAEC,KAAM,SAE7B,MAAM,EAAEC,GAAM,4BAEZC,WAAYC,EACZC,KAAMC,EACNN,UAAU,UAAEO,EAAWN,KAAMO,IAC3BZ,GAEFO,WAAYM,EAAmB,GAC/BJ,KAAMK,EAAa,GACnBV,UAAYC,KAAMU,IAChBZ,EACEa,EAAmB,IACvBN,IAAe,IAAoBD,KAAO,IAAuB,KAC7D,KAAEA,EAAI,WAAEF,EAAU,SAAEU,EAAQ,SAAEC,GAAaF,IAgB3CG,EAAgB,CACpBC,SAAU,CACRb,WAAY,GAAGU,KAAYV,IAC3BE,OACAL,SAAU,CAAEC,KAAM,GAAGO,KAAc,gBAAoBD,aACvDU,KAAM,OAAF,wBApBe,CAACC,IACtB,IAAID,EAAO,GAYX,OAVEA,EADEC,IAAwB,IAAqBb,KACxC,CAAEc,OAAQX,EAAYY,OAAQ,IAE9B,CACLC,QAAS,CACPlB,WAAYC,EACZC,KAAMC,EACNL,KAAMO,IAILS,GAQAK,CAAejB,IAAK,CACvBkB,WAAY,CACVC,IAAK,CACHrB,WAAYM,EACZJ,KAAMK,EACNT,KAAM,YAAiBU,EAAYZ,SAsBvC0B,EAAavB,EAAE,8BAA+B,CAClDG,KAAMH,EAAEY,IAAaT,IAEvB,OACE,gBAAC,IAAM,CACLU,cAAeA,EACfW,SArBiB,CAACC,EAAsBC,IACnC,aAAUhB,IAAoB,YAAqBe,EAAOX,WAC9Da,KAAK,KACJD,EAAOE,UAAU,CAAEC,qBAAqB,EAAMC,MAAO,KACrDlC,MAEDmC,MAAOC,IACN,MAAMC,EAAaD,EAAIE,SAAWlC,EAAE,sDACpC0B,EAAOE,UAAU,CACfC,qBAAqB,EACrBC,MAAOG,MAYXE,QAASxC,EACTyC,cAAe,CAAEN,MAAO,IACxBO,iBAAkB,KAEhBC,GACA,gBAAC,IAAW,iBACNA,EAAW,CACfC,cAAenC,IAAe,IAAoBD,KAClDoB,WAAYA,EACZ5B,OAAQA,Q,mCCrGlB,kFA8De,IAvCsB,EACnC4C,gBACAhB,aACAiB,eACA7C,SACA8C,eACAC,SACAC,SACAlB,a,gBAEA,MAAM,EAAEzB,GAAM,2BACR4C,GAAkC,QAA1B,EAAgB,QAAhB,EAAAnB,aAAM,EAANA,EAAQX,gBAAQ,eAAEhB,gBAAQ,eAAEC,QAA+C,QAAvC,EAAkC,QAAlC,EAAsB,QAAtB,EAAgB,QAAhB,EAAA0B,aAAM,EAANA,EAAQX,gBAAQ,eAAEC,YAAI,eAAEM,kBAAU,eAAEC,WAAG,eAAEvB,MAC3F,OACE,wBAAM8C,UAAU,gBAAgBrB,SAAUgB,GACxC,gBAAC,IAAU,KAAEjB,GACb,gBAAC,IAAS,KACR,gBAAC,IAAW,CAACuB,WAAS,GACpB,gBAAC,KAAU,CACTC,KAAM,IAAeC,KACrBjD,KAAK,yBACLkD,MAAOjD,EAAE,uBACTkD,UAAQ,IAEV,gBAAC,IAAgB,CAACvD,OAAQA,IACzB4C,GAAiB,gBAAC,IAAY,QAGnC,gBAAC,IAAiB,CAChBY,WAAYV,EACZW,WAAYpD,EAAE,sBACdqD,WAAYrD,EAAE,yBACdsD,gBAAiBV,IAAU,IAAUD,IAAWF,EAChD9C,OAAQA,EACR4D,aAAcb,EAAOZ,W,ucC9C7B,MAAM0B,EAAqD,I,IAAA,OAAE9D,GAAM,EAAK+D,EAAK,IAAlB,YAAyB,OAClF,gBAAC,IAAM,iBAAKA,EAAK,CAAE/D,OAAQA,MAKhBgE,EAAsB,YAA2BF,GAE/C,a,kCClBf,6CAgBA,MAAMG,EAAiC,CACrCC,QAAS,OACTC,KAAM,EACNC,cAAe,SACfC,OAAQ,qCA2BK,IAxBiC,EAC9CC,QACAC,WACAnB,YACAoB,WACAC,aACAC,cACAC,WACAC,WAEA,uBACEzB,UAAW,IAAG,eAAgB,CAC5B,mBAAoBC,EACpB,iCAAkCsB,IAEpCE,MAAK,+BAAQH,EAAaR,EAAY,IAASW,GAAS,IAAG,YAChDD,GAEVL,GAAS,sBAAInB,UAAU,6BAA6BmB,GACpDC,GAAY,gBAAC,IAAc,KAAEA,GAC7BC,I,yDC1CL,iHAEO,MAIMK,EAA4BtE,I,MAMvC,OAAiD,QAA1C,EALW,CAChB,sBAAuB,EACvB,wBAAyB,EACzB,uBAAwB,GANO,CAACA,GAA+BA,EAAWuE,MAAM,KAAK,GAQtEC,CAAoBxE,WAAY,QAAI,GAE1CyE,EAAmB,CAACC,EAAaC,KAC5C,KAAKA,aAAQ,EAARA,EAAU3E,YAAY,OAC3B,MAAM,WAAEA,GAAe2E,EACvB,OAAOD,EACH,CAACJ,EAAyBtE,GAAa,aAAa2E,GAAWD,GAAKE,KAhBpC,UAmBhCC,GAGOC,EAA0BJ,IAAuB,MAC5D,OAAwC,QAAxC,EAAAA,aAAG,EAAHA,EAAKH,MAvB+B,KAuBDQ,aAAK,QAAI,IAEjCC,EAAwBxD,IACnC,MAAMyD,EAAc,OAAH,UAAQzD,GAEzB,OADAyD,EAAYnE,KAAKM,WAAWC,IAAIvB,KAAOgF,EAAuBtD,EAAOV,KAAKM,WAAWC,IAAIvB,MAClFmF,I,kCC/BT,+CAEO,MAAMC,EAAyB,WAAaC,MAAM,CACvDtE,SAAU,WAEPsE,MAAM,CAAEtF,SAAU,WAAasF,MAAM,CAAErF,KAAM,WAAamD,SAAS,mB,kCCLxE,6DA0De,IAxCgB,K,UAC7B,MACM,cAAEmC,EAAa,OAAE3C,EAAM,OAAEjB,GAAW,cAEpC6D,EAdiB,CAACC,IACxB,IAAID,EAAc,GAClB,IAAK,MAAMX,KAAOY,EACZA,EAAQC,eAAeb,KACzBW,EAAc,IAAIA,EAAa,CAACX,EAAKY,EAAQZ,MAGjD,OAAOW,GAOaG,CADyB,QAA7B,EAAqB,QAArB,EAAe,QAAf,EAAAhE,EAAOX,gBAAQ,eAAEC,YAAI,eAAEG,cAAM,eAAEwE,aAGxCC,EAAWC,GAAgB,WAChCN,EAAYO,OAAS,EAAIP,EANG,CAAC,CAAC,GAAI,OAQ9B,EAAEtF,GAAM,2BACR8F,EAAuB,cAC3B,EAAGC,qBACD,IAAIC,EAAwB,GAC5B,IAAUD,EAAgB,EAAEhG,EAAMkG,KAC5BA,EAAMJ,QACRG,EAAwB,OAAH,wBAAQA,GAAqB,CAAE,CAACjG,GAAOkG,IACrDD,GAEFA,GAETJ,EAAaG,GACbV,EAAc,kCAAmCW,IAEnD,CAACX,IAEH,OACE,gBAAC,IAAS,CAACa,QAAS,aAAW,SAAU,UAAWjD,MAAOjD,EAAE,yBAA0BkD,UAAQ,GAC7F,gBAAC,kBAAe,CACd6C,eAAgBrD,EAAOb,oBAAsB8D,EAAY,GACzDQ,YAAanG,EAAE,wBACfoG,WAAYpG,EAAE,4BACdqG,UAAW3D,EAAOb,oBAClByE,cAAc,EACdC,iBAAkBT,EAClBU,UAAWxG,EAAE,gC,kCCpDrB,iGAsGe,IArF2C,EAAGyG,cAAa,EAAM9G,aAC9E,MAAM,EAAEK,GAAM,4BACR,OAAEyB,EAAM,cAAE4D,EAAa,gBAAEqB,EAAe,aAAEC,EAAY,UAAE/E,GAAc,eAGtE,UAAEvB,GAAcoB,EAAOX,SAAShB,UAC/B8G,EAAeC,GAAoB,YAAe,GAGnDC,EAAqB,cACzB,CAACC,EAAelH,K,MACd,MAAMmH,EAA6B,QAAb,EAAAnH,aAAM,EAANA,EAAQ4D,aAAK,eAAEwD,MACrC,GAAIF,EAAe,CAGjB,GAFAL,EAAgB,qCAAqC,GACrDrB,EAAc,oCAAqC0B,GAC/CC,EAAe,CACjB,MAAM,SAAErG,EAAW,OAAM,WAAEV,EAAU,KAAEE,GAAS6G,EAEhD3B,EAAc,0CADS,GAAG1E,KAAYV,KAEtCyG,EAAgB,2CAA2C,GAC3DrB,EAAc,oCAAqClF,GACnDuG,EAAgB,qCAAqC,GAEvDC,MAGJ,CAACtB,EAAeqB,EAAiBC,IAGnC,YAAgB,KACd/E,EAAU,CAAEC,qBAAsB+E,KACjC,CAACA,EAAehF,IASnB,OACE,gBAAC,IAAS,CACRsE,QAAS,aAAW,SAAU,cAC9BjD,MAAOjD,EAAE,6BACTkH,YAAU,GAETN,GACC,gCACE,gBAAC,IAAK,CAACO,QAAQ,SAASnD,MAAOhE,EAAE,0CAA2CoH,UAAQ,GAClF,gBAAC,QAAK,CAACpH,EAAGA,EAAGqH,GAAG,kBACb,mEACD,gBAAC,OAAI,CACHC,GAAI,WAAWjH,EACfkH,QAAS,KACP5H,GAAUA,MAGX,Y,WAQX,gBAAC,KAAqB,CACpBI,KAAK,oCACLyH,UAAW,YAAqBnH,GAChCoH,aAAc,CAAC,WAAY,QAC3B3E,WAAS,EACTI,UAAQ,EACRwE,YAAa1H,EAAE,oCACf2H,WAAS,EACTC,mBAlEqB,CAACC,EAASC,KAAiB,MAAC,SAAMD,EAAoB,QAAX,EAAAC,aAAI,EAAJA,EAAMrE,aAAK,eAAE1D,OAmE7EgI,SAAUjB,EACVkB,kBAAmB,IACnBC,SAAUrB,EACVsB,eAvCiB,EAAGpI,eAA+B,MAAC,QAA0B,QAAzB,EAAAA,aAAQ,EAARA,EAAUqI,uBAAe,eAAEtC,SAwChFuC,OA7CgBC,IACpBxB,EAAiB,IAAUwB,KA6CvB5B,WAAYA","file":"pub-sub-connectors-chunk-0de85d1bf5aa3da3530b.min.js","sourcesContent":["import * as React from 'react';\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { K8sResourceKind, k8sCreate } from '@console/internal/module/k8s';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport { EventingBrokerModel, EventingTriggerModel, EventingSubscriptionModel } from '../../models';\nimport { craftResourceKey, sanitizeResourceName } from './pub-sub-utils';\nimport { pubsubValidationSchema } from './pubsub-validation-utils';\nimport PubSubModal from './PubSubModal';\n\ninterface PubSubProps {\n  source: K8sResourceKind;\n  target?: K8sResourceKind;\n  cancel?: () => void;\n  close?: () => void;\n}\n\nconst PubSub: React.FC<PubSubProps> = ({\n  source,\n  cancel,\n  close,\n  target = { metadata: { name: '' } },\n}) => {\n  const { t } = useTranslation();\n  const {\n    apiVersion: sourceApiVersion,\n    kind: sourceKind,\n    metadata: { namespace, name: sourceName },\n  } = source;\n  const {\n    apiVersion: targetApiVersion = '',\n    kind: targetKind = '',\n    metadata: { name: targetName },\n  } = target;\n  const getResourceModel = () =>\n    sourceKind === EventingBrokerModel.kind ? EventingTriggerModel : EventingSubscriptionModel;\n  const { kind, apiVersion, apiGroup, labelKey } = getResourceModel();\n  const getSpecForKind = (connectorSourceKind: string) => {\n    let spec = {};\n    if (connectorSourceKind === EventingTriggerModel.kind) {\n      spec = { broker: sourceName, filter: {} };\n    } else {\n      spec = {\n        channel: {\n          apiVersion: sourceApiVersion,\n          kind: sourceKind,\n          name: sourceName,\n        },\n      };\n    }\n    return spec;\n  };\n  const initialValues = {\n    formData: {\n      apiVersion: `${apiGroup}/${apiVersion}`,\n      kind,\n      metadata: { name: `${sourceName}-${getRandomChars()}`, namespace },\n      spec: {\n        ...getSpecForKind(kind),\n        subscriber: {\n          ref: {\n            apiVersion: targetApiVersion,\n            kind: targetKind,\n            name: craftResourceKey(targetName, target),\n          },\n        },\n      },\n    },\n  };\n\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    return k8sCreate(getResourceModel(), sanitizeResourceName(values.formData))\n      .then(() => {\n        action.setStatus({ subscriberAvailable: true, error: '' });\n        close();\n      })\n      .catch((err) => {\n        const errMessage = err.message || t('knative-plugin~An error occurred. Please try again');\n        action.setStatus({\n          subscriberAvailable: true,\n          error: errMessage,\n        });\n      });\n  };\n\n  const labelTitle = t('knative-plugin~Add {{kind}}', {\n    kind: t(labelKey) || kind,\n  });\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n      validationSchema={pubsubValidationSchema}\n    >\n      {(formikProps) => (\n        <PubSubModal\n          {...formikProps}\n          filterEnabled={sourceKind === EventingBrokerModel.kind}\n          labelTitle={labelTitle}\n          cancel={cancel}\n        />\n      )}\n    </Formik>\n  );\n};\n\nexport default PubSub;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { FormikProps, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { InputField } from '@console/shared';\nimport PubSubFilter from './form-fields/PubSubFilter';\nimport PubSubSubscriber from './form-fields/PubSubSubscriber';\n\nexport interface PubSubModalProps {\n  filterEnabled: boolean;\n  labelTitle: string;\n  cancel?: () => void;\n}\n\ntype Props = FormikProps<FormikValues> & PubSubModalProps;\n\nconst PubSubModal: React.FC<Props> = ({\n  filterEnabled,\n  labelTitle,\n  handleSubmit,\n  cancel,\n  isSubmitting,\n  status,\n  errors,\n  values,\n}) => {\n  const { t } = useTranslation();\n  const dirty = values?.formData?.metadata?.name && values?.formData?.spec?.subscriber?.ref?.name;\n  return (\n    <form className=\"modal-content\" onSubmit={handleSubmit}>\n      <ModalTitle>{labelTitle}</ModalTitle>\n      <ModalBody>\n        <FormSection fullWidth>\n          <InputField\n            type={TextInputTypes.text}\n            name=\"formData.metadata.name\"\n            label={t('knative-plugin~Name')}\n            required\n          />\n          <PubSubSubscriber cancel={cancel} />\n          {filterEnabled && <PubSubFilter />}\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitting}\n        submitText={t('knative-plugin~Add')}\n        cancelText={t('knative-plugin~Cancel')}\n        submitDisabled={!dirty || !_.isEmpty(errors) || isSubmitting}\n        cancel={cancel}\n        errorMessage={status.error}\n      />\n    </form>\n  );\n};\n\nexport default PubSubModal;\n","import * as React from 'react';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport PubSub from './PubSub';\n\ntype PubSubControllerProps = {\n  source: K8sResourceKind;\n  target?: K8sResourceKind;\n};\n\nconst PubSubController: React.FC<PubSubControllerProps> = ({ source, ...props }) => (\n  <PubSub {...props} source={source} />\n);\n\ntype Props = PubSubControllerProps & ModalComponentProps;\n\nexport const PubSubModalLauncher = createModalLauncher<Props>(PubSubController);\n\nexport default PubSubController;\n","import * as React from 'react';\nimport { FormHelperText } from '@patternfly/react-core';\nimport cx from 'classnames';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n  dataTest?: string;\n  style?: React.CSSProperties;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-v5-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n  dataTest,\n  style,\n}) => (\n  <div\n    className={cx('pf-v5-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={{ ...(flexLayout ? flexStyle : {}), ...(style || {}) }}\n    data-test={dataTest}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import { FormikValues } from 'formik';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nexport const RESOURCE_KEY_SEPERATOR = '#';\n\nexport const getResourceApiGroup = (apiVersion: string): string => apiVersion.split('/')[0];\n\nexport const getSinkableResourceOrder = (apiVersion: string): number => {\n  const sortOrder = {\n    'serving.knative.dev': 1,\n    'messaging.knative.dev': 2,\n    'eventing.knative.dev': 3,\n  };\n  return sortOrder[getResourceApiGroup(apiVersion)] ?? 4;\n};\nexport const craftResourceKey = (key: string, resource: K8sResourceKind): string | undefined => {\n  if (!resource?.apiVersion) return undefined;\n  const { apiVersion } = resource;\n  return key\n    ? [getSinkableResourceOrder(apiVersion), referenceFor(resource), key].join(\n        RESOURCE_KEY_SEPERATOR,\n      )\n    : undefined;\n};\n\nexport const getResourceNameFromKey = (key: string): string =>\n  key?.split(RESOURCE_KEY_SEPERATOR).pop() ?? '';\n\nexport const sanitizeResourceName = (values: FormikValues): FormikValues => {\n  const finalValues = { ...values };\n  finalValues.spec.subscriber.ref.name = getResourceNameFromKey(values.spec.subscriber.ref.name);\n  return finalValues;\n};\n","import * as yup from 'yup';\n\nexport const pubsubValidationSchema = yup.object().shape({\n  formData: yup\n    .object()\n    .shape({ metadata: yup.object().shape({ name: yup.string().required('Required') }) }),\n});\n","import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { getFieldId } from '@console/shared';\n\nconst formatFilterData = (filters) => {\n  let filterPairs = [];\n  for (const key in filters) {\n    if (filters.hasOwnProperty(key)) {\n      filterPairs = [...filterPairs, [key, filters[key]]];\n    }\n  }\n  return filterPairs;\n};\n\nconst PubSubFilter: React.FC = () => {\n  const initialValueResources = [['', '']];\n  const { setFieldValue, status, values } = useFormikContext<FormikValues>();\n  const filters = values.formData?.spec?.filter?.attributes;\n  const filterPairs = formatFilterData(filters);\n\n  const [nameValue, setNameValue] = React.useState(\n    filterPairs.length > 0 ? filterPairs : initialValueResources,\n  );\n  const { t } = useTranslation();\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      let updatedNameValuePairs = {};\n      _.forEach(nameValuePairs, ([name, value]) => {\n        if (value.length) {\n          updatedNameValuePairs = { ...updatedNameValuePairs, [name]: value };\n          return updatedNameValuePairs;\n        }\n        return updatedNameValuePairs;\n      });\n      setNameValue(nameValuePairs);\n      setFieldValue('formData.spec.filter.attributes', updatedNameValuePairs);\n    },\n    [setFieldValue],\n  );\n  return (\n    <FormGroup fieldId={getFieldId('pubsub', 'filter')} label={t('knative-plugin~Filter')} required>\n      <NameValueEditor\n        nameValuePairs={status.subscriberAvailable ? nameValue : []}\n        valueString={t('knative-plugin~Value')}\n        nameString={t('knative-plugin~Attribute')}\n        readOnly={!status.subscriberAvailable}\n        allowSorting={false}\n        updateParentData={handleNameValuePairs}\n        addString={t('knative-plugin~Add more')}\n      />\n    </FormGroup>\n  );\n};\n\nexport default PubSubFilter;\n","import * as React from 'react';\nimport { FormGroup, Alert } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ResourceDropdownField, getFieldId } from '@console/shared';\nimport { getSinkableResources } from '../../../utils/get-knative-resources';\nimport { craftResourceKey } from '../pub-sub-utils';\n\ntype PubSubSubscriberProps = {\n  autoSelect?: boolean;\n  cancel?: () => void;\n};\n\nconst PubSubSubscriber: React.FC<PubSubSubscriberProps> = ({ autoSelect = true, cancel }) => {\n  const { t } = useTranslation();\n  const { values, setFieldValue, setFieldTouched, validateForm, setStatus } = useFormikContext<\n    FormikValues\n  >();\n  const { namespace } = values.formData.metadata;\n  const [resourceAlert, setResourceAlert] = React.useState(false);\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n\n  const onSubscriberChange = React.useCallback(\n    (selectedValue, target) => {\n      const modelResource = target?.props?.model;\n      if (selectedValue) {\n        setFieldTouched('formData.spec.subscriber.ref.name', true);\n        setFieldValue('formData.spec.subscriber.ref.name', selectedValue);\n        if (modelResource) {\n          const { apiGroup = 'core', apiVersion, kind } = modelResource;\n          const sinkApiversion = `${apiGroup}/${apiVersion}`;\n          setFieldValue('formData.spec.subscriber.ref.apiVersion', sinkApiversion);\n          setFieldTouched('formData.spec.subscriber.ref.apiVersion', true);\n          setFieldValue('formData.spec.subscriber.ref.kind', kind);\n          setFieldTouched('formData.spec.subscriber.ref.kind', true);\n        }\n        validateForm();\n      }\n    },\n    [setFieldValue, setFieldTouched, validateForm],\n  );\n\n  React.useEffect(() => {\n    setStatus({ subscriberAvailable: !resourceAlert });\n  }, [resourceAlert, setStatus]);\n\n  const handleOnLoad = (resourceList: { [key: string]: string }) => {\n    setResourceAlert(_.isEmpty(resourceList));\n  };\n\n  // filter out resource which are owned by other resource\n  const resourceFilter = ({ metadata }: K8sResourceKind) => !metadata?.ownerReferences?.length;\n\n  return (\n    <FormGroup\n      fieldId={getFieldId('pubsub', 'subscriber')}\n      label={t('knative-plugin~Subscriber')}\n      isRequired\n    >\n      {resourceAlert && (\n        <>\n          <Alert variant=\"custom\" title={t('knative-plugin~No Subscriber available')} isInline>\n            <Trans t={t} ns=\"knative-plugin\">\n              {'To create a Subscriber, first create a Knative Service from the '}\n              <Link\n                to={`/add/ns/${namespace}`}\n                onClick={() => {\n                  cancel && cancel();\n                }}\n              >\n                {'Add page'}\n              </Link>\n              .\n            </Trans>\n          </Alert>\n          &nbsp;\n        </>\n      )}\n      <ResourceDropdownField\n        name=\"formData.spec.subscriber.ref.name\"\n        resources={getSinkableResources(namespace)}\n        dataSelector={['metadata', 'name']}\n        fullWidth\n        required\n        placeholder={t('knative-plugin~Select Subscriber')}\n        showBadge\n        autocompleteFilter={autocompleteFilter}\n        onChange={onSubscriberChange}\n        customResourceKey={craftResourceKey}\n        disabled={resourceAlert}\n        resourceFilter={resourceFilter}\n        onLoad={handleOnLoad}\n        autoSelect={autoSelect}\n      />\n    </FormGroup>\n  );\n};\n\nexport default PubSubSubscriber;\n"],"sourceRoot":""}