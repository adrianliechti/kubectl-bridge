{"version":3,"sources":["webpack:///./packages/knative-plugin/src/catalog/index.ts","webpack:///./packages/knative-plugin/src/topology/const.ts","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./packages/dev-console/src/utils/resource-label-utils.ts","webpack:///./packages/knative-plugin/src/utils/create-eventsources-utils.ts","webpack:///./packages/knative-plugin/src/components/add/import-types.ts","webpack:///./packages/knative-plugin/src/components/pub-sub/pub-sub-utils.ts","webpack:///./packages/knative-plugin/src/utils/get-knative-icon.ts","webpack:///./packages/knative-plugin/src/hooks/useKameletsData.ts","webpack:///./packages/knative-plugin/src/hooks/useEventSinkStatus.ts","webpack:///./packages/knative-plugin/src/hooks/useEventSourceModelsWithAccess.ts","webpack:///./packages/knative-plugin/src/hooks/useEventSourceStatus.ts","webpack:///./packages/knative-plugin/src/hooks/useBootstrapServers.ts","webpack:///./packages/knative-plugin/src/hooks/index.ts","webpack:///./packages/knative-plugin/src/catalog/event-source-data.ts","webpack:///./packages/knative-plugin/src/imgs/logos/apiserversource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/camelsource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/containersource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/kafkasource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/pingsource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/sinkbindingsource.svg","webpack:///./packages/knative-plugin/src/utils/create-eventsink-utils.ts","webpack:///./packages/knative-plugin/src/catalog/event-sink-data.ts","webpack:///./packages/knative-plugin/src/catalog/useEventSourceProvider.ts","webpack:///./packages/knative-plugin/src/catalog/useKameletsProvider.ts","webpack:///./packages/knative-plugin/src/catalog/utils.ts","webpack:///./packages/knative-plugin/src/catalog/useKameletsSinkProvider.ts","webpack:///./packages/knative-plugin/src/catalog/useKafkaSinkProvider.ts","webpack:///./packages/knative-plugin/src/catalog/useEventTypeProvider.tsx","webpack:///./packages/knative-plugin/src/components/eventing/EventType.tsx","webpack:///./packages/knative-plugin/src/hooks/useEventTypesData.ts"],"names":["TYPE_EVENT_SOURCE","TYPE_EVENT_SINK","TYPE_KAFKA_SINK","TYPE_EVENT_SOURCE_KAFKA","TYPE_EVENT_SOURCE_LINK","TYPE_EVENT_SINK_LINK","TYPE_KAFKA_CONNECTION_LINK","TYPE_EVENT_PUB_SUB","TYPE_EVENT_PUB_SUB_LINK","TYPE_KNATIVE_SERVICE","TYPE_REVISION_TRAFFIC","TYPE_KNATIVE_REVISION","TYPE_SINK_URI","KNATIVE_GROUP_NODE_WIDTH","KNATIVE_GROUP_NODE_HEIGHT","KNATIVE_GROUP_NODE_PADDING","EVENT_MARKER_RADIUS","URI_KIND","useK8sGet","kind","name","namespace","opts","data","setData","loaded","setLoaded","loadError","setLoadError","resource","error","getAppLabels","applicationName","imageStreamName","runtimeIcon","selectedTag","labels","app","trim","length","getCommonAnnotations","getRouteAnnotations","getGitAnnotations","gitURL","gitRef","getTriggerAnnotation","containerName","imageName","imageNamespace","imageTrigger","imageTag","JSON","stringify","from","fieldPath","paused","getPodLabels","resourceKind","toLowerCase","mergeData","originalResource","newResource","mergedData","isDevfileResource","metadata","annotations","isFromDevfile","allAnnotations","spec","template","containers","index","volumeMounts","push","hasOwnProperty","strategy","triggers","source","sourceSecret","volumes","getTemplateLabels","deployment","acc","value","key","isKnownEventSource","eventSource","Object","keys","includes","getEventSourcesDepResource","formData","type","apiVersion","application","project","sinkType","sink","defaultLabel","eventSrcData","sinkName","sinkKind","sinkApiVersion","uri","sinkUri","Resource","ref","isSecretKeyRefPresent","dataObj","secretKeyRef","loadYamlData","yamlData","yamlDataObj","modelData","namespaced","getEventSourceResource","KafkaSource","baseResource","net","sasl","enable","user","password","tls","caCert","cert","getKafkaSourceResource","getCatalogEventSourceResource","sourceFormData","editorType","YAML","getEventSourceData","PingSource","schedule","SinkBinding","subject","selector","matchLabels","ApiServerSource","mode","serviceAccountName","resources","bootstrapServers","topics","consumerGroup","ContainerSource","image","args","env","getKameletSourceData","kameletData","properties","getKameletMetadata","kamelet","normalizedKamelet","provider","iconUrl","definition","title","description","getEventSourceMetadata","eventSourceModel","t","normalizedSource","label","getEventSourceModelsWithAccess","eventSourceModels","map","model","apiGroup","plural","group","verb","then","result","status","allowed","catch","e","console","warn","getBootstrapServers","kafkaResources","reduce","kafka","listners","listeners","l","split","flat","bootstrapServerHost","handleRedirect","perspective","perspectiveExtensions","perspectiveData","find","item","id","redirectURL","importRedirectURL","sanitizeSourceToForm","newFormData","formDataValues","kameletSource","specData","appGroupName","sinkRef","selectedKey","Uri","formDataActual","initialSecretKeyData","Array","isArray","sanitizeKafkaSourceResource","formDescriptorData","descriptorArr","path","k","custPath","items","displayName","EventSources","KameletBinding","defaultChannels","InMemoryChannel","KafkaChannel","SinkType","sourceSinkType","getSinkableResourceOrder","getResourceApiGroup","craftResourceKey","join","undefined","getResourceNameFromKey","pop","sanitizeResourceName","values","finalValues","subscriber","getEventSourceIcon","obj","nodeType","objAnnotations","a","getEventSourceIconFromKind","useKameletsData","kamelets","setKamelets","kameletsLoaded","setKameletsLoaded","kameletsLoadError","setKameletsLoadError","watchedResources","isList","optional","kameletsGlobalNs","kameletsGlobalNs2","extraResources","resDataLoaded","some","resDataloadError","every","kameletsData","allKamelets","uid","useEventSinkStatus","sinkKindProp","kameletName","kameletNs","kameletNsLoaded","kameletGlobalNs","kameletGlobalNsLoaded","kameletGlobalNs2","kameletGlobalNs2Loaded","kameletLoaded","isKameletSink","isSinkKindPresent","eventSinkModel","sinkModel","createSinkAccess","createSinkAccessLoading","sourceStatus","isValidSink","normalizedSink","useEventSourceModelsWithAccess","accessModelData","setAccessModelData","eventSourceModelsList","eventSourceModelsWithAccess","Promise","all","results","modelsWithAccess","err","message","useEventSourceStatus","sourceKindProp","eventSourceModelsLoaded","isKameletSource","isSourceKindPresent","sourceModel","createSourceAccess","createSourceAccessLoading","isValidSource","useBootstrapServers","memoResources","kafkas","kafkaconnections","bootstrapServersOptions","placeholder","isKafkasLoaded","isKafkasLoadError","kafkasData","disabled","bs","loadErrorMessage","getEventSourceCatalogProviderData","support","module","exports","getEventSinksDepResource","sourceName","sourceKind","sourceApiVersion","getCatalogEventSinkResource","auth","secret","getKafkaSinkResource","getKameletSinkData","sanitizeSinkToForm","kameletSink","sourceRef","topic","sanitizeKafkaSinkResource","getEventSinkMetadata","getEventSinkData","getEventSinkCatalogProviderData","useEventSourceProvider","eventSources","href","icon","url","class","cta","details","normalizeEventSources","knativeEventingTypeProvider","setFeatureFlag","useKnativeEventingEnabled","isChannelEnabled","isBrokerEnabled","isPingSourceEnabled","useKnativeEventingProvider","isEventingEnabled","canCreateKameletBinding","creationTimestamp","normalizeKamelets","filter","getEventSourceSupport","canCreateKameletSink","normalizeKafkaSink","canGetEventType","canListEventType","canWatchEventType","eventTypes","eventTypesLoaded","eventTypesLoadError","et","eventType","reference","broker","params","URLSearchParams","append","toString","descriptions","tags","normalizeEventType","EventTypeHeaders","EventTypeRow","columnID","rows","style","marginTop","component","h3","defaultSortField","defaultSortOrder","asc","Header","Row","virtualize","useEventTypesData","setEventTypes","setEventTypesLoaded","setEventTypesLoadError","eventTypesData"],"mappings":"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","file":"knative-plugin/code-refs/catalog-chunk-3fa35689e7c48f16ed86.min.js","sourcesContent":["export * from './useEventSourceProvider';\nexport { default as kameletsProvider } from './useKameletsProvider';\nexport { default as kameletsSinkProvider } from './useKameletsSinkProvider';\nexport { default as kafkaSinkProvider } from './useKafkaSinkProvider';\nexport { default as eventTypeProvider } from './useEventTypeProvider';\n","import { DEFAULT_GROUP_PAD, GROUP_WIDTH } from '@console/topology/src/const';\n\nexport const TYPE_EVENT_SOURCE = 'event-source';\nexport const TYPE_EVENT_SINK = 'event-sink';\nexport const TYPE_KAFKA_SINK = 'kafka-sink';\nexport const TYPE_EVENT_SOURCE_KAFKA = 'event-source-kafka';\nexport const TYPE_EVENT_SOURCE_LINK = 'event-source-link';\nexport const TYPE_EVENT_SINK_LINK = 'event-sink-link';\nexport const TYPE_KAFKA_CONNECTION_LINK = 'event-source-kafka-link';\nexport const TYPE_EVENT_PUB_SUB = 'event-pubsub';\nexport const TYPE_EVENT_PUB_SUB_LINK = 'event-pubsub-link';\nexport const TYPE_KNATIVE_SERVICE = 'knative-service';\nexport const TYPE_REVISION_TRAFFIC = 'revision-traffic';\nexport const TYPE_KNATIVE_REVISION = 'knative-revision';\nexport const TYPE_SINK_URI = 'sink-uri';\n\nexport const KNATIVE_GROUP_NODE_WIDTH = GROUP_WIDTH;\nexport const KNATIVE_GROUP_NODE_HEIGHT = 100;\nexport const KNATIVE_GROUP_NODE_PADDING = [\n  DEFAULT_GROUP_PAD,\n  DEFAULT_GROUP_PAD,\n  DEFAULT_GROUP_PAD + 10,\n  DEFAULT_GROUP_PAD,\n];\n\nexport const EVENT_MARKER_RADIUS = 6;\n\n// URI Kind\nexport const URI_KIND = 'URI';\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { TRIGGERS_ANNOTATION } from '@console/shared';\nimport { ROUTE_DISABLED_ANNOTATION } from '@console/topology/src/const';\nimport { ResourcesKinds, Resources } from '../components/import/import-types';\n\nexport const getAppLabels = ({\n  name,\n  applicationName,\n  imageStreamName,\n  runtimeIcon,\n  selectedTag,\n  namespace,\n}: {\n  name: string;\n  applicationName?: string;\n  imageStreamName?: string;\n  runtimeIcon?: string;\n  selectedTag?: string;\n  namespace?: string;\n}) => {\n  const labels = {\n    app: name,\n    'app.kubernetes.io/instance': name,\n    'app.kubernetes.io/component': name,\n    'app.kubernetes.io/name': name,\n    ...(imageStreamName && {\n      'app.openshift.io/runtime': imageStreamName,\n    }),\n  };\n\n  if (runtimeIcon) {\n    labels['app.openshift.io/runtime'] = runtimeIcon;\n  }\n  if (applicationName && applicationName.trim().length > 0) {\n    labels['app.kubernetes.io/part-of'] = applicationName;\n  }\n  if (selectedTag) {\n    labels['app.openshift.io/runtime-version'] = selectedTag;\n  }\n  if (namespace) {\n    labels['app.openshift.io/runtime-namespace'] = namespace;\n  }\n\n  return labels;\n};\n\nexport const getCommonAnnotations = () => {\n  return {\n    'openshift.io/generated-by': 'OpenShiftWebConsole',\n  };\n};\n\nexport const getRouteAnnotations = () => {\n  return {\n    [ROUTE_DISABLED_ANNOTATION]: 'false',\n  };\n};\n\nexport const getGitAnnotations = (gitURL: string, gitRef?: string) => {\n  return {\n    'app.openshift.io/vcs-uri': gitURL,\n    'app.openshift.io/vcs-ref': gitRef || '',\n  };\n};\n\nexport const getTriggerAnnotation = (\n  containerName: string,\n  imageName: string,\n  imageNamespace: string,\n  imageTrigger: boolean,\n  imageTag: string = 'latest',\n) => ({\n  [TRIGGERS_ANNOTATION]: JSON.stringify([\n    {\n      from: { kind: 'ImageStreamTag', name: `${imageName}:${imageTag}`, namespace: imageNamespace },\n      fieldPath: `spec.template.spec.containers[?(@.name==\"${containerName}\")].image`,\n      paused: `${!imageTrigger}`,\n    },\n  ]),\n});\n\nexport const getUserAnnotations = (allAnnotations: { [key: string]: string }) => {\n  const defaultAnnotations = [\n    'app.openshift.io/vcs-uri',\n    'app.openshift.io/vcs-ref',\n    'openshift.io/generated-by',\n    'image.openshift.io/triggers',\n    'alpha.image.policy.openshift.io/resolve-names',\n    'jarFileName',\n    'kubectl.kubernetes.io/last-applied-configuration',\n  ];\n  return _.omit(allAnnotations, defaultAnnotations);\n};\n\nexport const getPodLabels = (resource: Resources, name: string) => {\n  const resourceKind = ResourcesKinds[resource];\n  if (resourceKind) {\n    return {\n      app: name,\n      [resourceKind.toLowerCase()]: name,\n    };\n  }\n  return {\n    app: name,\n  };\n};\n\nexport const mergeData = (originalResource: K8sResourceKind, newResource: K8sResourceKind) => {\n  if (_.isEmpty(originalResource)) return newResource;\n\n  const mergedData = _.merge({}, originalResource || {}, newResource);\n  const isDevfileResource = originalResource?.metadata?.annotations?.isFromDevfile;\n  mergedData.metadata.labels = {\n    ...newResource.metadata.labels,\n    ...(isDevfileResource ? originalResource?.metadata?.labels : {}),\n  };\n  if (mergedData.metadata.annotations) {\n    mergedData.metadata.annotations = {\n      ...(isDevfileResource\n        ? originalResource?.metadata?.annotations\n        : getUserAnnotations(originalResource?.metadata?.annotations)),\n      ...newResource.metadata.annotations,\n    };\n  }\n  if (mergedData.spec?.template?.metadata?.labels) {\n    mergedData.spec.template.metadata.labels = newResource.spec?.template?.metadata?.labels;\n  }\n  if (!_.isEmpty(originalResource.spec?.template?.spec?.containers)) {\n    mergedData.spec.template.spec.containers = originalResource.spec.template.spec.containers;\n    const index = _.findIndex(originalResource.spec.template.spec.containers, {\n      name: originalResource.metadata.name,\n    });\n    if (index >= 0) {\n      mergedData.spec.template.spec.containers[index] = {\n        ...originalResource.spec.template.spec.containers[index],\n        ...newResource.spec.template.spec.containers[0],\n        // Keep the volumeMounts as is since we do not give an option to edit these currently\n        volumeMounts: originalResource.spec.template.spec.containers[index].volumeMounts,\n      };\n    } else {\n      mergedData.spec.template.spec.containers.push(newResource.spec.template.spec.containers[0]);\n    }\n  }\n  if (mergedData?.spec?.hasOwnProperty('strategy')) {\n    mergedData.spec.strategy = newResource.spec?.strategy ?? originalResource.spec?.strategy;\n  }\n  if (mergedData.spec?.triggers) {\n    mergedData.spec.triggers = newResource.spec.triggers;\n  }\n  if (!newResource.spec?.source?.sourceSecret) {\n    delete mergedData?.spec?.source?.sourceSecret;\n  }\n\n  if (mergedData.spec?.template?.spec?.hasOwnProperty('volumes')) {\n    mergedData.spec.template.spec.volumes = originalResource.spec?.template?.spec?.volumes;\n  }\n\n  return mergedData;\n};\n\nexport const getTemplateLabels = (deployment: K8sResourceKind) => {\n  return _.reduce(\n    deployment?.spec?.template?.metadata?.labels,\n    (acc, value, key) => {\n      if (!deployment.metadata?.labels?.hasOwnProperty(key)) {\n        acc[key] = value;\n      }\n      return acc;\n    },\n    {},\n  );\n};\n","import * as _ from 'lodash';\nimport {\n  getAppLabels,\n  getCommonAnnotations,\n} from '@console/dev-console/src/utils/resource-label-utils';\nimport { Perspective } from '@console/dynamic-plugin-sdk';\nimport { checkAccess, history } from '@console/internal/components/utils';\nimport {\n  K8sResourceKind,\n  referenceForModel,\n  referenceFor,\n  modelFor,\n  K8sKind,\n} from '@console/internal/module/k8s';\nimport {\n  Descriptor,\n  SpecCapability,\n} from '@console/operator-lifecycle-manager/src/components/descriptors/types';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { UNASSIGNED_APPLICATIONS_KEY } from '@console/shared/src/constants';\nimport { safeYAMLToJS } from '@console/shared/src/utils/yaml';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { getEventSourceCatalogProviderData } from '../catalog/event-source-data';\nimport {\n  EventSources,\n  EventSourceFormData,\n  EventSourceSyncFormData,\n  SinkType,\n  KnEventCatalogMetaData,\n  YamlFormSyncData,\n} from '../components/add/import-types';\nimport { craftResourceKey } from '../components/pub-sub/pub-sub-utils';\nimport { CAMEL_K_PROVIDER_ANNOTATION } from '../const';\nimport { CamelKameletModel } from '../models';\nimport { getEventSourceIcon } from './get-knative-icon';\n\nexport const isKnownEventSource = (eventSource: string): boolean =>\n  Object.keys(EventSources).includes(eventSource);\n\nexport const getEventSourcesDepResource = (formData: EventSourceFormData): K8sResourceKind => {\n  const {\n    type,\n    name,\n    apiVersion,\n    application: { name: applicationName },\n    project: { name: namespace },\n    data,\n    sinkType,\n    sink,\n  } = formData;\n\n  const defaultLabel = getAppLabels({ name, applicationName });\n  const eventSrcData = data[type];\n  const { name: sinkName, kind: sinkKind, apiVersion: sinkApiVersion, uri: sinkUri } = sink;\n  const eventSourceResource: K8sResourceKind = {\n    apiVersion,\n    kind: type,\n    metadata: {\n      name,\n      namespace,\n      labels: {\n        ...defaultLabel,\n      },\n      annotations: getCommonAnnotations(),\n    },\n    spec: {\n      ...(eventSrcData && eventSrcData),\n      ...(sinkType === SinkType.Resource && sinkName && sinkApiVersion && sinkKind\n        ? {\n            sink: {\n              ref: {\n                apiVersion: sinkApiVersion,\n                kind: sinkKind,\n                name: sinkName,\n              },\n            },\n          }\n        : {\n            sink: {\n              uri: sinkUri,\n            },\n          }),\n    },\n  };\n\n  return eventSourceResource;\n};\n\nexport const isSecretKeyRefPresent = (dataObj: {\n  secretKeyRef: { name: string; key: string };\n}): boolean => !!(dataObj?.secretKeyRef?.name || dataObj?.secretKeyRef?.key);\n\nexport const getKafkaSourceResource = (formData: any): K8sResourceKind => {\n  const baseResource = getEventSourcesDepResource(formData);\n  const { net } = baseResource.spec;\n  baseResource.spec.net = {\n    ...net,\n    ...(!net.sasl?.enable && { sasl: { user: {}, password: {} } }),\n    ...(net.sasl?.enable &&\n      !isSecretKeyRefPresent(net.sasl?.user) &&\n      !isSecretKeyRefPresent(net.sasl?.password) && {\n        sasl: { enable: true, user: {}, password: {} },\n      }),\n    ...(!net.tls?.enable && { tls: { caCert: {}, cert: {}, key: {} } }),\n    ...(net.tls?.enable &&\n      !isSecretKeyRefPresent(net.tls?.caCert) &&\n      !isSecretKeyRefPresent(net.tls?.cert) &&\n      !isSecretKeyRefPresent(net.tls?.key) && {\n        tls: { enable: true, caCert: {}, cert: {}, key: {} },\n      }),\n  };\n  return baseResource;\n};\n\nexport const loadYamlData = <D extends { project?: { name: string } }>(\n  formData: YamlFormSyncData<D>,\n) => {\n  const {\n    formData: {\n      project: { name: namespace },\n    },\n    yamlData,\n  } = formData;\n  let yamlDataObj = safeYAMLToJS(yamlData);\n  const modelData = yamlDataObj && modelFor(referenceFor(yamlDataObj));\n  if (yamlDataObj?.metadata && modelData?.namespaced && !yamlDataObj.metadata?.namespace) {\n    yamlDataObj = { ...yamlDataObj, metadata: { ...yamlDataObj.metadata, namespace } };\n  }\n  return yamlDataObj;\n};\n\nexport const getEventSourceResource = (formData: EventSourceFormData) => {\n  switch (formData.type) {\n    case EventSources.KafkaSource:\n      return getKafkaSourceResource(formData);\n    default:\n      return getEventSourcesDepResource(formData);\n  }\n};\n\nexport const getCatalogEventSourceResource = (\n  sourceFormData: EventSourceSyncFormData,\n): K8sResourceKind => {\n  if (sourceFormData.editorType === EditorType.YAML) {\n    return loadYamlData(sourceFormData);\n  }\n  const { formData } = sourceFormData;\n  return getEventSourceResource(formData);\n};\n\nexport const getEventSourceData = (source: string) => {\n  const eventSourceData = {\n    [EventSources.PingSource]: {\n      data: '',\n      schedule: '',\n    },\n    [EventSources.SinkBinding]: {\n      subject: {\n        apiVersion: '',\n        kind: '',\n        selector: {\n          matchLabels: {},\n        },\n      },\n    },\n    [EventSources.ApiServerSource]: {\n      mode: 'Reference',\n      serviceAccountName: '',\n      resources: [\n        {\n          apiVersion: '',\n          kind: '',\n        },\n      ],\n    },\n    [EventSources.KafkaSource]: {\n      bootstrapServers: [],\n      topics: [],\n      consumerGroup: '',\n      net: {\n        sasl: {\n          enable: false,\n          user: { secretKeyRef: { name: '', key: '' } },\n          password: { secretKeyRef: { name: '', key: '' } },\n        },\n        tls: {\n          enable: false,\n          caCert: { secretKeyRef: { name: '', key: '' } },\n          cert: { secretKeyRef: { name: '', key: '' } },\n          key: { secretKeyRef: { name: '', key: '' } },\n        },\n      },\n    },\n    [EventSources.ContainerSource]: {\n      template: {\n        spec: {\n          containers: [\n            {\n              image: '',\n              name: '',\n              args: [''],\n              env: [],\n            },\n          ],\n        },\n      },\n    },\n  };\n  return eventSourceData[source];\n};\n\nexport const getKameletSourceData = (kameletData: K8sResourceKind) => ({\n  source: {\n    ref: {\n      apiVersion: kameletData.apiVersion,\n      kind: kameletData.kind,\n      name: kameletData.metadata.name,\n    },\n    properties: {},\n  },\n});\n\nexport const sanitizeKafkaSourceResource = (formData: EventSourceFormData): EventSourceFormData => {\n  const formDataActual = formData.data?.[EventSources.KafkaSource] || {};\n  const initialSecretKeyData = { secretKeyRef: { name: '', key: '' } };\n  return {\n    ...formData,\n    data: {\n      [EventSources.KafkaSource]: {\n        bootstrapServers: Array.isArray(formDataActual.bootstrapServers)\n          ? formDataActual.bootstrapServers\n          : [],\n        topics: Array.isArray(formDataActual.topics) ? formDataActual.topics : [],\n        consumerGroup:\n          typeof formDataActual.consumerGroup === 'string' ? formDataActual.consumerGroup : '',\n        net: {\n          sasl: {\n            enable:\n              typeof formDataActual.net?.sasl?.enable === 'boolean'\n                ? formDataActual.net?.sasl?.enable\n                : false,\n            user:\n              typeof formDataActual.net?.sasl?.user === 'object'\n                ? { ...initialSecretKeyData, ...formDataActual.net.sasl.user }\n                : initialSecretKeyData,\n            password:\n              typeof formDataActual.net?.sasl?.password === 'object'\n                ? { ...initialSecretKeyData, ...formDataActual.net.sasl.password }\n                : initialSecretKeyData,\n          },\n          tls: {\n            enable:\n              typeof formDataActual.net?.tls?.enable === 'boolean'\n                ? formDataActual.net?.tls?.enable\n                : false,\n            caCert:\n              typeof formDataActual.net?.tls?.caCert === 'object'\n                ? { ...initialSecretKeyData, ...formDataActual.net.tls.caCert }\n                : initialSecretKeyData,\n            cert:\n              typeof formDataActual.net?.tls?.cert === 'object'\n                ? { ...initialSecretKeyData, ...formDataActual.net.tls.cert }\n                : initialSecretKeyData,\n            key:\n              typeof formDataActual.net?.tls?.key === 'object'\n                ? { ...initialSecretKeyData, ...formDataActual.net.tls.key }\n                : initialSecretKeyData,\n          },\n        },\n      },\n    },\n  };\n};\n\nexport const getKameletMetadata = (kamelet: K8sResourceKind): KnEventCatalogMetaData => {\n  let normalizedKamelet = {};\n  if (kamelet?.kind === CamelKameletModel.kind) {\n    const {\n      kind,\n      metadata: { name, annotations },\n      spec,\n    } = kamelet;\n    const provider = annotations?.[CAMEL_K_PROVIDER_ANNOTATION] || '';\n    const iconUrl = getEventSourceIcon(kind, kamelet);\n    normalizedKamelet = {\n      name: spec?.definition?.title || name,\n      description: spec?.definition?.description || '',\n      provider,\n      iconUrl,\n    };\n  }\n  return normalizedKamelet as KnEventCatalogMetaData;\n};\n\nexport const getEventSourceMetadata = (eventSourceModel: K8sKind, t): KnEventCatalogMetaData => {\n  let normalizedSource = {};\n  if (eventSourceModel) {\n    const { kind, label: name } = eventSourceModel;\n    const { description, provider } = getEventSourceCatalogProviderData(kind, t) ?? {};\n    normalizedSource = {\n      name,\n      description,\n      provider,\n      iconUrl: getEventSourceIcon(referenceForModel(eventSourceModel)),\n    };\n  }\n  return normalizedSource as KnEventCatalogMetaData;\n};\n\nexport const getEventSourceModelsWithAccess = (\n  namespace: string,\n  eventSourceModels: K8sKind[],\n): Promise<K8sKind>[] => {\n  return eventSourceModels.map((model) => {\n    const { apiGroup, plural } = model;\n    return checkAccess({\n      group: apiGroup,\n      resource: plural,\n      namespace,\n      verb: 'create',\n    })\n      .then((result) => (result.status.allowed ? model : null))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.warn('Could not check access for event source models', e);\n        return null;\n      });\n  });\n};\n\nexport const getBootstrapServers = (kafkaResources: K8sResourceKind[]) => {\n  const servers = kafkaResources?.reduce((acc, kafka) => {\n    const listners = [\n      ...(kafka?.status?.listeners\n        ? kafka.status.listeners.map((l) => l?.bootstrapServers?.split(','))?.flat()\n        : []),\n      ...(kafka?.status?.bootstrapServerHost ? [kafka.status.bootstrapServerHost] : []),\n    ];\n    acc.push(...listners);\n    return acc;\n  }, []);\n  return servers;\n};\n\nexport const handleRedirect = async (\n  project: string,\n  perspective: string,\n  perspectiveExtensions: Perspective[],\n) => {\n  const perspectiveData = perspectiveExtensions.find((item) => item.properties.id === perspective);\n  const redirectURL = (await perspectiveData.properties.importRedirectURL())(project);\n  history.push(redirectURL);\n};\n\nexport const sanitizeSourceToForm = (\n  newFormData: K8sResourceKind,\n  formDataValues: EventSourceFormData,\n  kameletSource?: K8sResourceKind,\n) => {\n  const specData = newFormData.spec;\n  const appGroupName = newFormData.metadata?.labels?.['app.kubernetes.io/part-of'];\n  const sinkRef = specData?.sink?.ref;\n  const formData = {\n    ...formDataValues,\n    application: {\n      ...formDataValues.application,\n      ...(appGroupName &&\n        appGroupName !== formDataValues.application.name && {\n          name: appGroupName,\n          selectedKey: formDataValues.application.selectedKey ? CREATE_APPLICATION_KEY : '',\n        }),\n      ...(!appGroupName && {\n        name: '',\n        selectedKey: UNASSIGNED_APPLICATIONS_KEY,\n      }),\n    },\n    name: newFormData.metadata?.name,\n    sinkType: sinkRef ? SinkType.Resource : SinkType.Uri,\n    sink: {\n      apiVersion: sinkRef?.apiVersion,\n      kind: sinkRef?.kind,\n      name: sinkRef?.name,\n      key: craftResourceKey(sinkRef?.name, {\n        kind: sinkRef?.kind,\n        apiVersion: sinkRef?.apiVersion,\n      }),\n      uri: specData?.sink?.uri || '',\n    },\n    data: {\n      [formDataValues.type]: {\n        ..._.omit(specData, 'sink'),\n      },\n      ...(kameletSource && {\n        [formDataValues.type]: {\n          source: {\n            ref: {\n              apiVersion: kameletSource.apiVersion,\n              kind: kameletSource.kind,\n              name: kameletSource.metadata.name,\n            },\n            properties: specData?.source?.properties,\n          },\n        },\n      }),\n    },\n  };\n  return formDataValues.type === EventSources.KafkaSource\n    ? sanitizeKafkaSourceResource(formData)\n    : formData;\n};\n\nexport const formDescriptorData = (\n  properties,\n  descriptorArr = [],\n  path = '',\n): Descriptor<SpecCapability>[] => {\n  for (const k in properties) {\n    if (properties.hasOwnProperty(k) && typeof properties[k] === 'object') {\n      const custPath = path !== '' ? `${path}.${k}` : k;\n      if (properties[k].type === 'object') {\n        formDescriptorData(properties[k].properties, descriptorArr, custPath);\n      } else if (properties[k].type === 'array' && properties[k].items) {\n        if (properties[k].items.type === 'object') {\n          formDescriptorData(properties[k].items.properties, descriptorArr, `${custPath}[0]`);\n        } else if (properties[k].items.type === 'array') {\n          formDescriptorData(properties[k].items, descriptorArr, `${custPath}[0]`);\n        } else {\n          descriptorArr.push({\n            ...(properties[k].items.hasOwnProperty('title') && {\n              displayName: properties[k].items.title,\n            }),\n            ...(properties[k].items.hasOwnProperty('description') && {\n              description: properties[k].items.description,\n            }),\n            path: `${custPath}[0]`,\n            ...(properties[k].items.hasOwnProperty('x-descriptors') && {\n              'x-descriptors': properties[k].items['x-descriptors'],\n            }),\n          });\n        }\n      } else {\n        descriptorArr.push({\n          displayName: properties[k].title,\n          description: properties[k].description,\n          path: custPath,\n          ...(properties[k]['x-descriptors'] && {\n            'x-descriptors': properties[k]['x-descriptors'],\n          }),\n        });\n      }\n    }\n  }\n  return descriptorArr;\n};\n","import { TFunction } from 'i18next';\nimport { CatalogItem } from '@console/dynamic-plugin-sdk';\nimport {\n  EVENTING_KAFKA_CHANNEL_KIND,\n  EVENTING_IMC_KIND,\n  EVENT_SOURCE_SINK_BINDING_KIND,\n  EVENT_SOURCE_API_SERVER_KIND,\n  EVENT_SOURCE_CONTAINER_KIND,\n  EVENT_SOURCE_PING_KIND,\n  EVENT_SOURCE_KAFKA_KIND,\n} from '../../const';\nimport { CamelKameletBindingModel } from '../../models';\n\nexport const EventSources = {\n  ApiServerSource: EVENT_SOURCE_API_SERVER_KIND,\n  ContainerSource: EVENT_SOURCE_CONTAINER_KIND,\n  KafkaSource: EVENT_SOURCE_KAFKA_KIND,\n  PingSource: EVENT_SOURCE_PING_KIND,\n  SinkBinding: EVENT_SOURCE_SINK_BINDING_KIND,\n  KameletBinding: CamelKameletBindingModel.kind,\n};\n\nexport const defaultChannels = {\n  InMemoryChannel: EVENTING_IMC_KIND,\n  KafkaChannel: EVENTING_KAFKA_CHANNEL_KIND,\n};\nexport interface ProjectData {\n  name: string;\n  displayName: string;\n  description: string;\n}\n\nexport interface ApplicationData {\n  initial: string;\n  name: string;\n  selectedKey: string;\n  isInContext?: boolean;\n}\n\nexport interface EventSourceData {\n  [x: string]: any;\n}\n\nexport interface SinkResourceData {\n  apiVersion: string;\n  name: string;\n  kind: string;\n  key: string;\n  uri?: string;\n}\n\nexport interface EventSourceFormData {\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  apiVersion: string;\n  type: string;\n  sinkType: string;\n  sink: SinkResourceData;\n  data?: EventSourceData;\n}\nexport interface EventSourceSyncFormData {\n  editorType?: string;\n  showCanUseYAMLMessage?: boolean;\n  formData: EventSourceFormData;\n  yamlData?: string;\n}\nexport interface EventSinkFormData {\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  apiVersion: string;\n  type: string;\n  source?: SinkResourceData;\n  data?: EventSourceData;\n}\n\nexport interface EventSinkSyncFormData {\n  editorType?: string;\n  showCanUseYAMLMessage?: boolean;\n  formData: EventSinkFormData;\n  yamlData?: string;\n}\n\nexport type YamlFormSyncData<T> = {\n  editorType?: string;\n  showCanUseYAMLMessage?: boolean;\n  formData: T;\n  yamlData?: string;\n};\n\nexport interface KnEventCatalogMetaData {\n  name: string;\n  description?: string;\n  provider?: string;\n  iconUrl?: string;\n}\nexport interface EventSourceListData {\n  loaded: boolean;\n  eventSourceList: CatalogItem[];\n}\n\nexport enum SinkType {\n  Resource = 'resource',\n  Uri = 'uri',\n}\n\nexport const sourceSinkType = (t: TFunction) => {\n  return {\n    Resource: {\n      value: SinkType.Resource,\n      label: t('knative-plugin~Resource'),\n    },\n    Uri: {\n      value: SinkType.Uri,\n      label: t('knative-plugin~URI'),\n    },\n  };\n};\nexport interface AddChannelFormData {\n  project?: ProjectData;\n  application: ApplicationData;\n  name: string;\n  namespace: string;\n  apiVersion: string;\n  type: string;\n  data?: EventSourceData;\n  yamlData?: string;\n}\n\nexport interface ChannelListProps {\n  loaded: boolean;\n  channelList: string[];\n}\n\nexport interface AddBrokerFormYamlValues {\n  editorType: string;\n  showCanUseYAMLMessage: boolean;\n  formData: BrokerFormData;\n  yamlData: string;\n}\n\nexport interface BrokerFormData {\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  spec: {};\n}\n","import { FormikValues } from 'formik';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\n\nexport const RESOURCE_KEY_SEPERATOR = '#';\n\nexport const getResourceApiGroup = (apiVersion: string): string => apiVersion.split('/')[0];\n\nexport const getSinkableResourceOrder = (apiVersion: string): number => {\n  const sortOrder = {\n    'serving.knative.dev': 1,\n    'messaging.knative.dev': 2,\n    'eventing.knative.dev': 3,\n  };\n  return sortOrder[getResourceApiGroup(apiVersion)] ?? 4;\n};\nexport const craftResourceKey = (key: string, resource: K8sResourceKind): string | undefined => {\n  if (!resource?.apiVersion) return undefined;\n  const { apiVersion } = resource;\n  return key\n    ? [getSinkableResourceOrder(apiVersion), referenceFor(resource), key].join(\n        RESOURCE_KEY_SEPERATOR,\n      )\n    : undefined;\n};\n\nexport const getResourceNameFromKey = (key: string): string =>\n  key?.split(RESOURCE_KEY_SEPERATOR).pop() ?? '';\n\nexport const sanitizeResourceName = (values: FormikValues): FormikValues => {\n  const finalValues = { ...values };\n  finalValues.spec.subscriber.ref.name = getResourceNameFromKey(values.spec.subscriber.ref.name);\n  return finalValues;\n};\n","import * as React from 'react';\nimport { kindForReference, K8sResourceKind } from '@console/internal/module/k8s';\nimport { isValidUrl } from '@console/shared';\nimport {\n  EVENT_SOURCE_ICON,\n  CAMEL_KAMELET_ICON,\n  EVENT_SOURCE_SINK_BINDING_KIND,\n  EVENT_SOURCE_KAFKA_KIND,\n  EVENT_SOURCE_CAMEL_KIND,\n  EVENT_SOURCE_API_SERVER_KIND,\n  EVENT_SOURCE_CONTAINER_KIND,\n  EVENT_SOURCE_PING_KIND,\n  EVENT_SINK_KAFKA_KIND,\n} from '../const';\nimport apiServerSourceImg from '../imgs/logos/apiserversource.svg';\nimport camelSourceImg from '../imgs/logos/camelsource.svg';\nimport containerSourceImg from '../imgs/logos/containersource.svg';\nimport kafkaSourceImg from '../imgs/logos/kafkasource.svg';\nimport pingSourceImg from '../imgs/logos/pingsource.svg';\nimport sinkBindingSourceImg from '../imgs/logos/sinkbindingsource.svg';\nimport { TYPE_EVENT_SINK } from '../topology/const';\nimport { eventSinkIconSVG, eventSourceIconSVG } from './icons';\n\nconst getEventSourceIconFromKind = (kind: string, nodeType?: string): React.ReactNode | string => {\n  switch (kindForReference(kind)) {\n    case EVENT_SOURCE_API_SERVER_KIND:\n      return apiServerSourceImg;\n    case EVENT_SOURCE_CAMEL_KIND:\n      return camelSourceImg;\n    case EVENT_SOURCE_CONTAINER_KIND:\n      return containerSourceImg;\n    case EVENT_SOURCE_PING_KIND:\n      return pingSourceImg;\n    case EVENT_SOURCE_KAFKA_KIND:\n      return kafkaSourceImg;\n    case EVENT_SOURCE_SINK_BINDING_KIND:\n      return sinkBindingSourceImg;\n    case EVENT_SINK_KAFKA_KIND:\n      return kafkaSourceImg;\n    default:\n      return nodeType === TYPE_EVENT_SINK ? eventSinkIconSVG : eventSourceIconSVG;\n  }\n};\n\nexport const getEventSourceIcon = (\n  kind: string,\n  obj?: K8sResourceKind,\n  nodeType?: string,\n): React.ReactNode | string => {\n  const objAnnotations = obj?.metadata?.annotations;\n  return isValidUrl(objAnnotations?.[EVENT_SOURCE_ICON])\n    ? objAnnotations?.[EVENT_SOURCE_ICON]\n    : isValidUrl(objAnnotations?.[CAMEL_KAMELET_ICON])\n    ? objAnnotations?.[CAMEL_KAMELET_ICON]\n    : getEventSourceIconFromKind(kind, nodeType);\n};\n","import * as React from 'react';\nimport uniqBy from 'lodash-es/uniqBy';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { CAMEL_K_OPERATOR_NS, GLOBAL_OPERATOR_NS } from '../const';\nimport { CamelKameletModel } from '../models';\n\nexport const useKameletsData = (namespace: string): [K8sResourceKind[], boolean, any] => {\n  const [kamelets, setKamelets] = React.useState<K8sResourceKind[]>([]);\n  const [kameletsLoaded, setKameletsLoaded] = React.useState(false);\n  const [kameletsLoadError, setKameletsLoadError] = React.useState(null);\n\n  const watchedResources = React.useMemo(\n    () => ({\n      kamelets: {\n        isList: true,\n        kind: referenceForModel(CamelKameletModel),\n        namespace,\n        optional: true,\n      },\n      kameletsGlobalNs: {\n        isList: true,\n        kind: referenceForModel(CamelKameletModel),\n        namespace: GLOBAL_OPERATOR_NS,\n        optional: true,\n      },\n      kameletsGlobalNs2: {\n        isList: true,\n        kind: referenceForModel(CamelKameletModel),\n        namespace: CAMEL_K_OPERATOR_NS,\n        optional: true,\n      },\n    }),\n    [namespace],\n  );\n\n  const extraResources = useK8sWatchResources<{\n    [key: string]: K8sResourceKind[];\n  }>(watchedResources);\n\n  React.useEffect(() => {\n    const resDataLoaded = Object.keys(extraResources).some((key) => extraResources[key].loaded);\n    const resDataloadError = Object.keys(extraResources).every(\n      (key) => extraResources[key].loadError,\n    );\n    const { kamelets: kameletsData, kameletsGlobalNs, kameletsGlobalNs2 } = extraResources;\n    if (resDataLoaded) {\n      const allKamelets = uniqBy(\n        [...kameletsData.data, ...kameletsGlobalNs.data, ...kameletsGlobalNs2.data],\n        (kamelet) => kamelet?.metadata?.uid,\n      );\n      setKamelets(allKamelets);\n      setKameletsLoaded(kameletsData.loaded || kameletsGlobalNs.loaded || kameletsGlobalNs2.loaded);\n    } else if (resDataloadError) {\n      setKameletsLoadError(\n        kameletsGlobalNs.loadError || kameletsGlobalNs.loadError || kameletsGlobalNs2.loadError,\n      );\n    }\n  }, [extraResources]);\n\n  return [kamelets, kameletsLoaded, kameletsLoadError];\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAccessReview } from '@console/dynamic-plugin-sdk';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { KnEventCatalogMetaData } from '../components/add/import-types';\nimport { CAMEL_K_OPERATOR_NS, GLOBAL_OPERATOR_NS } from '../const';\nimport { CamelKameletBindingModel, CamelKameletModel, KafkaSinkModel } from '../models';\nimport { getEventSinkMetadata } from '../utils/create-eventsink-utils';\nimport { getKameletMetadata } from '../utils/create-eventsources-utils';\n\nexport const useEventSinkStatus = (\n  namespace: string,\n  sinkKindProp?: string,\n  kameletName?: string,\n): {\n  isValidSink: boolean;\n  createSinkAccessLoading: boolean;\n  createSinkAccess: boolean;\n  loaded: boolean;\n  normalizedSink: KnEventCatalogMetaData;\n  kamelet: K8sResourceKind;\n} => {\n  const { t } = useTranslation();\n  const [kameletNs, kameletNsLoaded] = useK8sGet<K8sResourceKind>(\n    CamelKameletModel,\n    kameletName,\n    namespace,\n  );\n  const [kameletGlobalNs, kameletGlobalNsLoaded] = useK8sGet<K8sResourceKind>(\n    CamelKameletModel,\n    kameletName,\n    GLOBAL_OPERATOR_NS,\n  );\n  const [kameletGlobalNs2, kameletGlobalNs2Loaded] = useK8sGet<K8sResourceKind>(\n    CamelKameletModel,\n    kameletName,\n    CAMEL_K_OPERATOR_NS,\n  );\n\n  const kameletLoaded = kameletNsLoaded && kameletGlobalNsLoaded && kameletGlobalNs2Loaded;\n  const kamelet =\n    kameletName && kameletLoaded && (kameletNs || kameletGlobalNs || kameletGlobalNs2);\n\n  const isKameletSink = kameletName && sinkKindProp === CamelKameletBindingModel.kind;\n  const isSinkKindPresent = sinkKindProp || isKameletSink;\n\n  const eventSinkModel =\n    sinkKindProp && !isKameletSink && KafkaSinkModel.kind === sinkKindProp && KafkaSinkModel;\n  const sinkModel = isKameletSink ? CamelKameletBindingModel : eventSinkModel;\n\n  const [createSinkAccess, createSinkAccessLoading] = useAccessReview({\n    group: sinkModel?.apiGroup,\n    resource: sinkModel?.plural,\n    verb: 'create',\n    namespace,\n  });\n\n  const sourceStatus = React.useMemo(() => {\n    if (!isSinkKindPresent) {\n      return {\n        isValidSink: false,\n        loaded: true,\n        normalizedSink: {} as KnEventCatalogMetaData,\n      };\n    }\n    return {\n      isValidSink: !!eventSinkModel || (kameletLoaded && kamelet && isKameletSink),\n      loaded: isKameletSink ? kameletLoaded : !!eventSinkModel,\n      normalizedSink: isKameletSink\n        ? getKameletMetadata(kamelet)\n        : getEventSinkMetadata(eventSinkModel, t),\n    };\n  }, [isSinkKindPresent, eventSinkModel, kameletLoaded, kamelet, isKameletSink, t]);\n\n  return {\n    ...sourceStatus,\n    createSinkAccessLoading,\n    createSinkAccess,\n    kamelet,\n  };\n};\n","import * as React from 'react';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { getEventSourceModelsWithAccess } from '../utils/create-eventsources-utils';\nimport { useEventSourceModels } from '../utils/fetch-dynamic-eventsources-utils';\n\nexport const useEventSourceModelsWithAccess = (\n  namespace: string,\n): { loaded: boolean; eventSourceModelsList: K8sKind[] } => {\n  const { loaded, eventSourceModels } = useEventSourceModels();\n  const [accessModelData, setAccessModelData] = React.useState({\n    loaded: false,\n    eventSourceModelsList: [],\n  });\n\n  React.useEffect(() => {\n    if (loaded) {\n      const eventSourceModelsWithAccess = getEventSourceModelsWithAccess(\n        namespace,\n        eventSourceModels,\n      );\n      Promise.all([...eventSourceModelsWithAccess])\n        .then((results) => {\n          const modelsWithAccess = results?.reduce(\n            (acc, model) => [...acc, ...(model ? [model] : [])],\n            [],\n          );\n          setAccessModelData({ loaded: true, eventSourceModelsList: modelsWithAccess });\n        })\n        // eslint-disable-next-line no-console\n        .catch((err) => console.warn('Failed to get event source models', err.message));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loaded]);\n  return accessModelData;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAccessReview2 } from '@console/internal/components/utils';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { KnEventCatalogMetaData } from '../components/add/import-types';\nimport { CAMEL_K_OPERATOR_NS, GLOBAL_OPERATOR_NS } from '../const';\nimport { CamelKameletBindingModel, CamelKameletModel } from '../models';\nimport { getEventSourceMetadata, getKameletMetadata } from '../utils/create-eventsources-utils';\nimport { useEventSourceModels } from '../utils/fetch-dynamic-eventsources-utils';\n\nexport const useEventSourceStatus = (\n  namespace: string,\n  sourceKindProp?: string,\n  kameletName?: string,\n): {\n  isValidSource: boolean;\n  createSourceAccessLoading: boolean;\n  createSourceAccess: boolean;\n  loaded: boolean;\n  normalizedSource: KnEventCatalogMetaData;\n  kamelet: K8sResourceKind;\n} => {\n  const { t } = useTranslation();\n  const { eventSourceModels, loaded: eventSourceModelsLoaded } = useEventSourceModels();\n  const [kameletNs, kameletNsLoaded] = useK8sGet<K8sResourceKind>(\n    CamelKameletModel,\n    kameletName,\n    namespace,\n  );\n  const [kameletGlobalNs, kameletGlobalNsLoaded] = useK8sGet<K8sResourceKind>(\n    CamelKameletModel,\n    kameletName,\n    GLOBAL_OPERATOR_NS,\n  );\n  const [kameletGlobalNs2, kameletGlobalNs2Loaded] = useK8sGet<K8sResourceKind>(\n    CamelKameletModel,\n    kameletName,\n    CAMEL_K_OPERATOR_NS,\n  );\n\n  const kameletLoaded = kameletNsLoaded && kameletGlobalNsLoaded && kameletGlobalNs2Loaded;\n  const kamelet = kameletLoaded && (kameletNs || kameletGlobalNs || kameletGlobalNs2);\n\n  const isKameletSource = kameletName && sourceKindProp === CamelKameletBindingModel.kind;\n  const isSourceKindPresent = sourceKindProp || isKameletSource;\n\n  const eventSourceModel =\n    sourceKindProp &&\n    !isKameletSource &&\n    eventSourceModels?.find((model: K8sKind) => model.kind === sourceKindProp);\n  const sourceModel = isKameletSource ? CamelKameletBindingModel : eventSourceModel;\n\n  const [createSourceAccess, createSourceAccessLoading] = useAccessReview2({\n    group: sourceModel?.apiGroup,\n    resource: sourceModel?.plural,\n    verb: 'create',\n    namespace,\n  });\n\n  const sourceStatus = React.useMemo(() => {\n    if (!isSourceKindPresent) {\n      return {\n        isValidSource: false,\n        loaded: true,\n        normalizedSource: {} as KnEventCatalogMetaData,\n      };\n    }\n    return {\n      isValidSource: !!eventSourceModel || (kameletLoaded && kamelet && isKameletSource),\n      loaded: isKameletSource ? kameletLoaded : eventSourceModelsLoaded,\n      normalizedSource: isKameletSource\n        ? getKameletMetadata(kamelet)\n        : getEventSourceMetadata(eventSourceModel, t),\n    };\n  }, [\n    isSourceKindPresent,\n    eventSourceModel,\n    kameletLoaded,\n    kamelet,\n    isKameletSource,\n    eventSourceModelsLoaded,\n    t,\n  ]);\n\n  return {\n    ...sourceStatus,\n    createSourceAccessLoading,\n    createSourceAccess,\n    kamelet,\n  };\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { SelectInputOption } from '@console/shared';\nimport { getBootstrapServers } from '../utils/create-eventsources-utils';\nimport { kafkaBootStrapServerResourcesWatcher } from '../utils/get-knative-resources';\n\nexport const useBootstrapServers = (namespace: string): [SelectInputOption[], string] => {\n  const { t } = useTranslation();\n  const memoResources = React.useMemo(() => kafkaBootStrapServerResourcesWatcher(namespace), [\n    namespace,\n  ]);\n  const { kafkas, kafkaconnections } = useK8sWatchResources<{\n    [key: string]: K8sResourceKind[];\n  }>(memoResources);\n\n  return React.useMemo(() => {\n    let bootstrapServersOptions: SelectInputOption[] = [];\n    let placeholder: string = '';\n    const isKafkasLoaded =\n      (kafkas.loaded && !kafkas.loadError) ||\n      (kafkaconnections.loaded && !kafkaconnections.loadError);\n    const isKafkasLoadError = !!(kafkas.loadError && kafkaconnections.loadError);\n    if (isKafkasLoaded) {\n      const kafkasData = [\n        ...(kafkas.data ? kafkas.data : []),\n        ...(kafkaconnections.data ? kafkaconnections.data : []),\n      ];\n      bootstrapServersOptions = !_.isEmpty(kafkasData)\n        ? _.map(getBootstrapServers(kafkasData), (bs) => ({\n            value: bs,\n            disabled: false,\n          }))\n        : [\n            {\n              value: t('knative-plugin~No bootstrap servers found'),\n              disabled: true,\n            },\n          ];\n      placeholder = t('knative-plugin~Add bootstrap servers');\n    } else if (isKafkasLoadError) {\n      placeholder = t(\n        'knative-plugin~{{loadErrorMessage}}. Try adding bootstrap servers manually.',\n        {\n          loadErrorMessage: `${kafkas.loadError.message}, ${kafkaconnections.loadError.message}`,\n        },\n      );\n    } else {\n      bootstrapServersOptions = [\n        { value: t('knative-plugin~Loading bootstrap servers...'), disabled: true },\n      ];\n      placeholder = '...';\n    }\n\n    return [bootstrapServersOptions, placeholder];\n  }, [\n    kafkas.loaded,\n    kafkas.loadError,\n    kafkas.data,\n    kafkaconnections.loaded,\n    kafkaconnections.loadError,\n    kafkaconnections.data,\n    t,\n  ]);\n};\n","export * from './useEventSourceModelsWithAccess';\nexport * from './useEventSourceStatus';\nexport * from './useKameletsData';\nexport * from './useEventSinkStatus';\nexport * from './useBootstrapServers';\n","import { TFunction } from 'i18next';\nimport {\n  EVENT_SOURCE_SINK_BINDING_KIND,\n  EVENT_SOURCE_KAFKA_KIND,\n  EVENT_SOURCE_API_SERVER_KIND,\n  EVENT_SOURCE_CONTAINER_KIND,\n  EVENT_SOURCE_PING_KIND,\n} from '../const';\n\nexport const getEventSourceCatalogProviderData = (\n  ref: string,\n  t: TFunction,\n): { description?: string; provider?: string; support?: string } =>\n  ({\n    [EVENT_SOURCE_API_SERVER_KIND]: {\n      description: t(\n        'knative-plugin~This object can be used to connect an event sink, such as a Service, Channel, or Broker to the Kubernetes API server. ApiServerSource watches for Kubernetes events and forwards them to the sink.',\n      ),\n      provider: 'Red Hat',\n      support: t('knative-plugin~Supported'),\n    },\n    [EVENT_SOURCE_CONTAINER_KIND]: {\n      description: t(\n        'knative-plugin~Starts a user-provided Container which will generate events and send messages to a sink URI. The sink URI is injected into the Container as an environment variable. A ContainerSource is an easy way to implement your own event sources in Knative.',\n      ),\n      provider: 'Red Hat',\n      support: t('knative-plugin~Supported'),\n    },\n    [EVENT_SOURCE_KAFKA_KIND]: {\n      description: t(\n        'knative-plugin~A distributed messaging system consisting of servers and clients that communicate via a high-performance TCP network protocol. This source will send Apache Kafka messages from monitored Apache Kafka topics to a configured sink, packaged as CloudEvents.',\n      ),\n      provider: 'Red Hat',\n      support: t('knative-plugin~Supported'),\n    },\n    [EVENT_SOURCE_PING_KIND]: {\n      description: t(\n        'knative-plugin~Used to periodically send ping events with a constant payload to a sink. A PingSource is a timer that emits CloudEvents at a fixed schedule that is configured as a crontab expression.',\n      ),\n      provider: 'Red Hat',\n      support: t('knative-plugin~Supported'),\n    },\n    [EVENT_SOURCE_SINK_BINDING_KIND]: {\n      description: t(\n        'knative-plugin~Used to connect OpenShift managed applications like Deployments, StatefulSets, or Jobs to an event sink, for example, a Knative Service, Channel, or Broker. SinkBinding is similar to a ContainerSource but works on existing OpenShift Application resources, whereas the ContainerSource Container lifecycle is fully managed by OpenShift Serverless itself.',\n      ),\n      provider: 'Red Hat',\n      support: t('knative-plugin~Supported'),\n    },\n  }[ref]);\n","module.exports = __webpack_public_path__ + \"assets/packages/knative-plugin/src/imgs/logos/apiserversource.svg\";","module.exports = __webpack_public_path__ + \"assets/packages/knative-plugin/src/imgs/logos/camelsource.svg\";","module.exports = __webpack_public_path__ + \"assets/packages/knative-plugin/src/imgs/logos/containersource.svg\";","module.exports = __webpack_public_path__ + \"assets/packages/knative-plugin/src/imgs/logos/kafkasource.svg\";","module.exports = __webpack_public_path__ + \"assets/packages/knative-plugin/src/imgs/logos/pingsource.svg\";","module.exports = __webpack_public_path__ + \"assets/packages/knative-plugin/src/imgs/logos/sinkbindingsource.svg\";","import * as _ from 'lodash';\nimport {\n  getAppLabels,\n  getCommonAnnotations,\n} from '@console/dev-console/src/utils/resource-label-utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { K8sModel, K8sResourceKind } from '@console/internal/module/k8s/types';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { UNASSIGNED_APPLICATIONS_KEY } from '@console/shared/src/constants';\nimport { CREATE_APPLICATION_KEY } from '@console/topology/src/const';\nimport { getEventSinkCatalogProviderData } from '../catalog/event-sink-data';\nimport {\n  EventSinkFormData,\n  EventSinkSyncFormData,\n  KnEventCatalogMetaData,\n} from '../components/add/import-types';\nimport { craftResourceKey } from '../components/pub-sub/pub-sub-utils';\nimport { EVENT_SINK_KAFKA_KIND } from '../const';\nimport { loadYamlData } from './create-eventsources-utils';\nimport { getEventSourceIcon } from './get-knative-icon';\n\nexport const getEventSinksDepResource = (formData: EventSinkFormData): K8sResourceKind => {\n  const {\n    type,\n    name,\n    apiVersion,\n    application: { name: applicationName },\n    project: { name: namespace },\n    data,\n    source,\n  } = formData;\n\n  const defaultLabel = getAppLabels({ name, applicationName });\n  const eventSrcData = data[type];\n  const { name: sourceName, kind: sourceKind, apiVersion: sourceApiVersion } = source ?? {};\n  const eventSourceResource: K8sResourceKind = {\n    apiVersion,\n    kind: type,\n    metadata: {\n      name,\n      namespace,\n      labels: {\n        ...defaultLabel,\n      },\n      annotations: getCommonAnnotations(),\n    },\n    spec: {\n      ...(eventSrcData && eventSrcData),\n      ...(sourceName &&\n        sourceApiVersion &&\n        sourceKind && {\n          source: {\n            ref: {\n              apiVersion: sourceApiVersion,\n              kind: sourceKind,\n              name: sourceName,\n            },\n          },\n        }),\n    },\n  };\n\n  return eventSourceResource;\n};\n\nexport const getKafkaSinkResource = (formData: EventSinkFormData): K8sResourceKind => {\n  const baseResource = getEventSinksDepResource(formData);\n  return {\n    ...baseResource,\n    spec: {\n      ..._.omit(baseResource.spec, 'auth'),\n      ...(baseResource.spec?.auth?.secret?.ref?.name && {\n        auth: {\n          secret: {\n            ref: {\n              name: baseResource.spec?.auth?.secret?.ref?.name,\n            },\n          },\n        },\n      }),\n    },\n  };\n};\n\nexport const getCatalogEventSinkResource = (\n  sourceFormData: EventSinkSyncFormData,\n): K8sResourceKind => {\n  if (sourceFormData.editorType === EditorType.YAML) {\n    return loadYamlData(sourceFormData);\n  }\n  const { formData } = sourceFormData;\n  return formData.type === EVENT_SINK_KAFKA_KIND\n    ? getKafkaSinkResource(formData)\n    : getEventSinksDepResource(formData);\n};\n\nexport const getKameletSinkData = (kameletData: K8sResourceKind) => ({\n  sink: {\n    ref: {\n      apiVersion: kameletData.apiVersion,\n      kind: kameletData.kind,\n      name: kameletData.metadata.name,\n    },\n    properties: {},\n  },\n});\n\nexport const sanitizeKafkaSinkResource = (formData: EventSinkFormData): EventSinkFormData => {\n  const formDataActual = formData.data?.[EVENT_SINK_KAFKA_KIND] || {};\n  return {\n    ...formData,\n    data: {\n      [EVENT_SINK_KAFKA_KIND]: {\n        bootstrapServers: Array.isArray(formDataActual.bootstrapServers)\n          ? formDataActual.bootstrapServers\n          : [],\n        topic: formDataActual.topic ?? '',\n        ...(formDataActual.auth?.secret?.ref?.name && {\n          auth: {\n            secret: {\n              ref: {\n                name: formDataActual.auth?.secret?.ref?.name,\n              },\n            },\n          },\n        }),\n      },\n    },\n  };\n};\n\nexport const sanitizeSinkToForm = (\n  newFormData: K8sResourceKind,\n  formDataValues: EventSinkFormData,\n  kameletSink?: K8sResourceKind,\n): EventSinkFormData => {\n  const specData = newFormData.spec;\n  const { ref: sourceRef } = specData?.source || {};\n  const appGroupName = newFormData.metadata?.labels?.['app.kubernetes.io/part-of'];\n  const formData: EventSinkFormData = {\n    ...formDataValues,\n    application: {\n      ...formDataValues.application,\n      ...(appGroupName &&\n        appGroupName !== formDataValues.application.name && {\n          name: appGroupName,\n          selectedKey: formDataValues.application.selectedKey ? CREATE_APPLICATION_KEY : '',\n        }),\n      ...(!appGroupName && {\n        name: '',\n        selectedKey: UNASSIGNED_APPLICATIONS_KEY,\n      }),\n    },\n    name: newFormData.metadata?.name,\n    ...(sourceRef?.name &&\n      sourceRef?.kind &&\n      sourceRef?.apiVersion && {\n        source: {\n          apiVersion: sourceRef.apiVersion,\n          kind: sourceRef.kind,\n          name: sourceRef.name,\n          key: craftResourceKey(sourceRef.name, sourceRef),\n        },\n      }),\n    data: {\n      [formDataValues.type]: {\n        ..._.omit(specData, 'source'),\n      },\n      ...(kameletSink && {\n        [formDataValues.type]: {\n          sink: {\n            ref: {\n              apiVersion: kameletSink.apiVersion,\n              kind: kameletSink.kind,\n              name: kameletSink.metadata.name,\n            },\n            properties: specData?.sink?.properties,\n          },\n        },\n      }),\n    },\n  };\n  return formDataValues.type === EVENT_SINK_KAFKA_KIND\n    ? sanitizeKafkaSinkResource(formData)\n    : formData;\n};\n\nexport const getEventSinkMetadata = (eventSinkModel: K8sModel, t): KnEventCatalogMetaData => {\n  let normalizedSource = {};\n  if (eventSinkModel) {\n    const { kind, label: name } = eventSinkModel;\n    const { description, provider } = getEventSinkCatalogProviderData(kind, t) ?? {};\n    normalizedSource = {\n      name,\n      description,\n      provider,\n      iconUrl: getEventSourceIcon(referenceForModel(eventSinkModel)),\n    };\n  }\n  return normalizedSource as KnEventCatalogMetaData;\n};\n\nexport const getEventSinkData = (sink: string) => {\n  const eventSinkData = {\n    [EVENT_SINK_KAFKA_KIND]: {\n      bootstrapServers: [],\n      topic: '',\n      auth: {\n        secret: {\n          ref: {\n            name: '',\n          },\n        },\n      },\n    },\n  };\n  return eventSinkData[sink];\n};\n","import { TFunction } from 'i18next';\nimport { EVENT_SINK_KAFKA_KIND } from '../const';\n\nexport const getEventSinkCatalogProviderData = (\n  ref: string,\n  t: TFunction,\n): { description?: string; provider?: string; support?: string } =>\n  ({\n    [EVENT_SINK_KAFKA_KIND]: {\n      description: t(\n        'knative-plugin~A KafkaSink takes a CloudEvent, and sends it to an Apache Kafka Topic. Events can be specified in either Structured or Binary mode.',\n      ),\n      provider: 'Red Hat',\n      support: t('knative-plugin~Supported'),\n    },\n  }[ref]);\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogItem, ExtensionHook, SetFeatureFlag } from '@console/dynamic-plugin-sdk';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\nimport { isCatalogTypeEnabled, useFlag } from '@console/shared';\nimport {\n  EVENT_SINK_CATALOG_TYPE_ID,\n  EVENT_SOURCE_CATALOG_TYPE_ID,\n  FLAG_KNATIVE_EVENT_SINK_CATALOG_TYPE,\n  FLAG_KNATIVE_EVENT_SOURCE_CATALOG_TYPE,\n  FLAG_KNATIVE_EVENTING_ENABLED,\n  FLAG_KNATIVE_EVENTING_CHANNEL,\n  FLAG_KNATIVE_EVENTING_BROKER,\n  FLAG_EVENT_SOURCE_PING,\n} from '../const';\nimport { useEventSourceModelsWithAccess } from '../hooks';\nimport { getEventSourceIcon } from '../utils/get-knative-icon';\nimport { getEventSourceCatalogProviderData } from './event-source-data';\n\nconst normalizeEventSources = (\n  eventSources: K8sKind[],\n  namespace: string,\n  t: TFunction,\n): CatalogItem[] => {\n  const normalizedEventSources: CatalogItem[] = eventSources.map((eventSource) => {\n    const { kind, label: name, id: uid } = eventSource;\n    const href = `/catalog/ns/${namespace}/eventsource?sourceKind=${kind}`;\n    const { description, provider, support } = getEventSourceCatalogProviderData(kind, t) ?? {};\n    return {\n      uid,\n      name,\n      description,\n      icon: { url: getEventSourceIcon(referenceForModel(eventSource)) as string, class: null },\n      type: 'EventSource',\n      provider,\n      cta: { label: t('knative-plugin~Create Event Source'), href },\n      details: {\n        properties: [\n          {\n            label: t('knative-plugin~Support'),\n            value: support,\n          },\n        ],\n      },\n    };\n  });\n  return normalizedEventSources;\n};\n\nexport const useEventSourceProvider: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n  const { loaded, eventSourceModelsList: eventSourceModels } = useEventSourceModelsWithAccess(\n    namespace,\n  );\n  const normalizedSources = React.useMemo(\n    () => (loaded ? normalizeEventSources(eventSourceModels, namespace, t) : []),\n\n    [loaded, namespace, t, eventSourceModels],\n  );\n  return [normalizedSources, loaded, undefined];\n};\n\nexport const knativeEventingTypeProvider = (setFeatureFlag: SetFeatureFlag) => {\n  setFeatureFlag(\n    FLAG_KNATIVE_EVENT_SOURCE_CATALOG_TYPE,\n    isCatalogTypeEnabled(EVENT_SOURCE_CATALOG_TYPE_ID),\n  );\n  setFeatureFlag(\n    FLAG_KNATIVE_EVENT_SINK_CATALOG_TYPE,\n    isCatalogTypeEnabled(EVENT_SINK_CATALOG_TYPE_ID),\n  );\n};\n\nexport const useKnativeEventingEnabled = () => {\n  const isChannelEnabled = useFlag(FLAG_KNATIVE_EVENTING_CHANNEL);\n  const isBrokerEnabled = useFlag(FLAG_KNATIVE_EVENTING_BROKER);\n  const isPingSourceEnabled = useFlag(FLAG_EVENT_SOURCE_PING);\n\n  return isChannelEnabled || isBrokerEnabled || isPingSourceEnabled;\n};\n\nexport const useKnativeEventingProvider = (setFeatureFlag: SetFeatureFlag) => {\n  const isEventingEnabled = useKnativeEventingEnabled();\n  setFeatureFlag(FLAG_KNATIVE_EVENTING_ENABLED, isEventingEnabled);\n};\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogItem, ExtensionHook } from '@console/dynamic-plugin-sdk';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CAMEL_K_PROVIDER_ANNOTATION, CAMEL_K_TYPE_LABEL } from '../const';\nimport { useKameletsData } from '../hooks/useKameletsData';\nimport { CamelKameletBindingModel } from '../models';\nimport { getEventSourceIcon } from '../utils/get-knative-icon';\nimport { getEventSourceSupport } from './utils';\n\nconst normalizeKamelets = (\n  kamelets: K8sResourceKind[],\n  namespace: string,\n  t: TFunction,\n): CatalogItem[] => {\n  const normalizedKamelets = kamelets.map((k) => {\n    const {\n      kind,\n      metadata: { uid, name, creationTimestamp, annotations },\n      spec,\n    } = k;\n    const provider = annotations?.[CAMEL_K_PROVIDER_ANNOTATION] || '';\n    const iconUrl = getEventSourceIcon(kind, k) as string;\n    const href = `/catalog/ns/${namespace}/eventsource?sourceKind=${CamelKameletBindingModel.kind}&name=${name}`;\n    return {\n      uid,\n      name: spec?.definition?.title || name,\n      description: spec?.definition?.description || '',\n      provider,\n      creationTimestamp,\n      cta: { label: t('knative-plugin~Create Event Source'), href },\n      type: 'EventSource',\n      icon: { url: iconUrl },\n      details: {\n        properties: [\n          {\n            label: t('knative-plugin~Support'),\n            value: getEventSourceSupport(k),\n          },\n        ],\n      },\n    };\n  });\n  return normalizedKamelets;\n};\n\nconst useKameletsProvider: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n  const canCreateKameletBinding = useAccessReview({\n    group: CamelKameletBindingModel.apiGroup,\n    resource: CamelKameletBindingModel.plural,\n    verb: 'create',\n    namespace,\n  });\n  const [kamelets, kameletsLoaded, kameletsLoadError] = useKameletsData(namespace);\n\n  const normalizedSource = React.useMemo(() => {\n    if (!kameletsLoaded || !canCreateKameletBinding) return [];\n    const kameletSource = kamelets.filter(\n      (k) => k.metadata?.labels?.[CAMEL_K_TYPE_LABEL] === 'source',\n    );\n    return normalizeKamelets(kameletSource, namespace, t);\n  }, [kameletsLoaded, kamelets, namespace, canCreateKameletBinding, t]);\n  return [normalizedSource, kameletsLoaded, kameletsLoadError];\n};\n\nexport default useKameletsProvider;\n","import i18next from 'i18next';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const getEventSourceSupport = (item: K8sResourceKind) => {\n  const supportLabel = item.metadata?.labels?.['camel.apache.org/kamelet.support.level'];\n  switch (supportLabel) {\n    case 'Preview': {\n      return i18next.t('knative-plugin~Tech Preview');\n    }\n    case 'Supported': {\n      return i18next.t('knative-plugin~Supported');\n    }\n    default: {\n      return i18next.t('knative-plugin~Community');\n    }\n  }\n};\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogItem, ExtensionHook } from '@console/dynamic-plugin-sdk';\nimport { useAccessReview } from '@console/internal/components/utils/rbac';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CAMEL_K_PROVIDER_ANNOTATION, CAMEL_K_TYPE_LABEL } from '../const';\nimport { useKameletsData } from '../hooks/useKameletsData';\nimport { CamelKameletBindingModel } from '../models';\nimport { getEventSourceIcon } from '../utils/get-knative-icon';\nimport { getEventSourceSupport } from './utils';\n\nconst normalizeKamelets = (\n  kamelets: K8sResourceKind[],\n  namespace: string,\n  t: TFunction,\n): CatalogItem[] => {\n  const normalizedKamelets = kamelets.map((k) => {\n    const {\n      kind,\n      metadata: { uid, name, creationTimestamp, annotations },\n      spec,\n    } = k;\n    const provider = annotations?.[CAMEL_K_PROVIDER_ANNOTATION] || '';\n    const iconUrl = getEventSourceIcon(kind, k) as string;\n    const href = `/catalog/ns/${namespace}/eventsink?sinkKind=${CamelKameletBindingModel.kind}&name=${name}`;\n    return {\n      uid,\n      name: spec?.definition?.title || name,\n      description: spec?.definition?.description || '',\n      provider,\n      creationTimestamp,\n      cta: { label: t('knative-plugin~Create Event Sink'), href },\n      type: 'EventSink',\n      icon: { url: iconUrl },\n      details: {\n        properties: [\n          {\n            label: t('knative-plugin~Support'),\n            value: getEventSourceSupport(k),\n          },\n        ],\n      },\n    };\n  });\n  return normalizedKamelets;\n};\n\nconst useKameletsSinkProvider: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n  const canCreateKameletBinding = useAccessReview({\n    group: CamelKameletBindingModel.apiGroup,\n    resource: CamelKameletBindingModel.plural,\n    verb: 'create',\n    namespace,\n  });\n  const [kamelets, kameletsLoaded, kameletsLoadError] = useKameletsData(namespace);\n\n  const normalizedSource = React.useMemo(() => {\n    if (!kameletsLoaded || !canCreateKameletBinding) return [];\n    const kameletSource = kamelets.filter(\n      (k) => k.metadata?.labels?.[CAMEL_K_TYPE_LABEL] === 'sink',\n    );\n    return normalizeKamelets(kameletSource, namespace, t);\n  }, [kameletsLoaded, kamelets, namespace, canCreateKameletBinding, t]);\n  return [normalizedSource, kameletsLoaded, kameletsLoadError];\n};\n\nexport default useKameletsSinkProvider;\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogItem, ExtensionHook, useAccessReview } from '@console/dynamic-plugin-sdk';\nimport { KafkaSinkModel } from '../models';\nimport { getEventSourceIcon } from '../utils/get-knative-icon';\nimport { getEventSinkCatalogProviderData } from './event-sink-data';\n\nconst normalizeKafkaSink = (namespace: string, t: TFunction): CatalogItem[] => {\n  const { kind, label } = KafkaSinkModel;\n  const iconUrl = getEventSourceIcon(kind) as string;\n  const href = `/catalog/ns/${namespace}/eventsink?sinkKind=${kind}`;\n  const { description, provider, support } = getEventSinkCatalogProviderData(kind, t) ?? {};\n\n  const normalizedKamelets = [\n    {\n      uid: kind,\n      name: label,\n      description,\n      provider,\n      cta: { label: t('knative-plugin~Create Event Sink'), href },\n      type: 'EventSink',\n      icon: { url: iconUrl },\n      details: {\n        properties: [\n          {\n            label: t('knative-plugin~Support'),\n            value: support,\n          },\n        ],\n      },\n    },\n  ];\n  return normalizedKamelets;\n};\n\nconst useKafkaSinkProvider: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n  const [canCreateKameletSink] = useAccessReview({\n    group: KafkaSinkModel.apiGroup,\n    resource: KafkaSinkModel.plural,\n    verb: 'create',\n    namespace,\n  });\n\n  const normalizedKafkaSink = React.useMemo(() => {\n    if (!canCreateKameletSink) return [];\n    return normalizeKafkaSink(namespace, t);\n  }, [canCreateKameletSink, namespace, t]);\n  return [normalizedKafkaSink, true, null];\n};\n\nexport default useKafkaSinkProvider;\n","import * as React from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { CatalogItem, ExtensionHook, useAccessReview } from '@console/dynamic-plugin-sdk';\nimport { K8sResourceKind, K8sResourceCommon } from '@console/internal/module/k8s';\nimport EventType from '../components/eventing/EventType';\nimport {\n  EVENT_TYPE_NAME_PARAM,\n  EVENT_TYPE_NAMESPACE_PARAM,\n  SUBSCRIBE_PROVIDER_API_VERSION_PARAM,\n  SUBSCRIBE_PROVIDER_KIND_PARAM,\n  SUBSCRIBE_PROVIDER_NAME_PARAM,\n} from '../const';\nimport { useEventTypesData } from '../hooks/useEventTypesData';\nimport { EventingEventTypeModel, EventingBrokerModel } from '../models';\nimport { getEventSourceIcon } from '../utils/get-knative-icon';\n\nconst normalizeEventType = (eventType: K8sResourceKind, t: TFunction): CatalogItem => {\n  const { kind } = EventingEventTypeModel;\n  const iconUrl = getEventSourceIcon(kind) as string;\n\n  const uid = `${eventType.metadata.namespace}-${eventType.metadata.name}`;\n\n  let provider: K8sResourceCommon = { metadata: {} };\n\n  if (eventType.spec.hasOwnProperty('reference')) {\n    provider.apiVersion = eventType.spec.reference.apiVersion;\n    provider.kind = eventType.spec.reference.kind;\n\n    if (eventType.spec.reference.hasOwnProperty('namespace')) {\n      provider.metadata.namespace = eventType.spec.reference.namespace;\n    } else {\n      provider.metadata.namespace = eventType.metadata.namespace;\n    }\n\n    if (eventType.spec.reference.hasOwnProperty('name')) {\n      provider.metadata.name = eventType.spec.reference.name;\n    }\n  } else if (eventType.spec.hasOwnProperty('broker')) {\n    provider = {\n      apiVersion: `${EventingBrokerModel.apiGroup}/${EventingBrokerModel.apiVersion}`,\n      kind: EventingBrokerModel.kind,\n      metadata: {\n        namespace: eventType.metadata.namespace,\n        name: eventType.spec.broker,\n      },\n    };\n  }\n\n  const params = new URLSearchParams();\n  params.append(SUBSCRIBE_PROVIDER_API_VERSION_PARAM, provider.apiVersion);\n  params.append(SUBSCRIBE_PROVIDER_KIND_PARAM, provider.kind);\n  params.append(SUBSCRIBE_PROVIDER_NAME_PARAM, provider.metadata.name);\n  params.append(EVENT_TYPE_NAMESPACE_PARAM, eventType.metadata.namespace);\n  params.append(EVENT_TYPE_NAME_PARAM, eventType.metadata.name);\n\n  const href = `/catalog/ns/${provider.metadata.namespace}/subscribe?${params.toString()}`;\n\n  return {\n    uid,\n    /* Add type and provider so that users can filter on event type, and provider name and namespace */\n    name: `${eventType.spec.type} (${provider.metadata.namespace}/${provider.metadata.name})`,\n    description: eventType.spec.description,\n    cta: { label: t('knative-plugin~Subscribe'), href },\n    type: 'EventType',\n    icon: { url: iconUrl },\n    creationTimestamp: eventType.metadata.creationTimestamp,\n    provider: `${provider.metadata.name}`,\n    details: {\n      descriptions: [{ value: <EventType eventType={eventType} /> }],\n    },\n    tags: [EventingEventTypeModel.kind],\n  };\n};\n\nconst useEventTypeProvider: ExtensionHook<CatalogItem[]> = ({\n  namespace,\n}): [CatalogItem[], boolean, any] => {\n  const { t } = useTranslation();\n  const [canGetEventType] = useAccessReview({\n    group: EventingEventTypeModel.apiGroup,\n    resource: EventingEventTypeModel.plural,\n    verb: 'get',\n    namespace,\n  });\n  const [canListEventType] = useAccessReview({\n    group: EventingEventTypeModel.apiGroup,\n    resource: EventingEventTypeModel.plural,\n    verb: 'list',\n    namespace,\n  });\n  const [canWatchEventType] = useAccessReview({\n    group: EventingEventTypeModel.apiGroup,\n    resource: EventingEventTypeModel.plural,\n    verb: 'watch',\n    namespace,\n  });\n\n  const [eventTypes, eventTypesLoaded, eventTypesLoadError] = useEventTypesData(namespace);\n\n  const normalized = React.useMemo(() => {\n    if (!eventTypesLoaded || !canGetEventType || !canListEventType || !canWatchEventType) return [];\n\n    return eventTypes.map((et) => normalizeEventType(et, t));\n  }, [eventTypesLoaded, eventTypes, canGetEventType, canListEventType, canWatchEventType, t]);\n  return [normalized, eventTypesLoaded, eventTypesLoadError];\n};\n\nexport default useEventTypeProvider;\n","import * as React from 'react';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { RowFunctionArgs, Table, TableData } from '@console/internal/components/factory';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nconst EventTypeHeaders = (t: TFunction) => () => {\n  return [\n    {\n      id: 'attributes',\n      title: t('knative-plugin~Attributes'),\n    },\n    {\n      id: 'values',\n      title: t('knative-plugin~Values'),\n    },\n  ];\n};\n\nexport const EventTypeRow: React.FC<RowFunctionArgs<{ key: string; value: string }>> = ({\n  obj,\n}) => {\n  return (\n    <>\n      <TableData columnID=\"attributes\">{obj.key}</TableData>\n      <TableData columnID=\"values\">{obj.value}</TableData>\n    </>\n  );\n};\n\ninterface EventTypeProps {\n  eventType: K8sResourceKind;\n}\n\nconst EventType: React.FC<EventTypeProps> = ({ eventType }) => {\n  const { t } = useTranslation();\n\n  const specAttributes = ['type', 'source', 'schema'];\n\n  const rows = specAttributes\n    .filter((a) => eventType.spec.hasOwnProperty(a))\n    .map((a) => {\n      return { key: a, value: eventType.spec[a] };\n    });\n\n  return (\n    <>\n      {eventType.spec.description ? eventType.spec.description : ''}\n      <div style={{ marginTop: 'var(--pf-v5-global--spacer--md)' }}>\n        <Text component={TextVariants.h3}>{t('knative-plugin~Event details')}</Text>\n      </div>\n      <Table\n        data={rows}\n        defaultSortField={'attributes'}\n        defaultSortOrder={SortByDirection.asc}\n        aria-label={t('knative-plugin~Event')}\n        Header={EventTypeHeaders(t)}\n        Row={EventTypeRow}\n        loaded\n        virtualize\n      />\n    </>\n  );\n};\n\nexport default EventType;\n","import * as React from 'react';\nimport { useK8sWatchResources } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { EventingEventTypeModel } from '../models';\n\nexport const useEventTypesData = (namespace: string): [K8sResourceKind[], boolean, any] => {\n  const [eventTypes, setEventTypes] = React.useState<K8sResourceKind[]>([]);\n  const [eventTypesLoaded, setEventTypesLoaded] = React.useState(false);\n  const [eventTypesLoadError, setEventTypesLoadError] = React.useState(null);\n\n  const watchedResources = React.useMemo(\n    () => ({\n      eventTypes: {\n        isList: true,\n        kind: referenceForModel(EventingEventTypeModel),\n        namespace,\n        optional: true,\n      },\n    }),\n    [namespace],\n  );\n\n  const extraResources = useK8sWatchResources<{\n    [key: string]: K8sResourceKind[];\n  }>(watchedResources);\n\n  React.useEffect(() => {\n    const resDataLoaded = Object.keys(extraResources).some((key) => extraResources[key].loaded);\n    const resDataloadError = Object.keys(extraResources).every(\n      (key) => extraResources[key].loadError,\n    );\n    const { eventTypes: eventTypesData } = extraResources;\n    if (resDataLoaded) {\n      if (eventTypesData.data.length > 0) {\n        setEventTypes(eventTypesData.data);\n      }\n      setEventTypesLoaded(eventTypesData.loaded);\n    } else if (resDataloadError) {\n      setEventTypesLoadError(eventTypesData.loadError);\n    }\n  }, [extraResources]);\n\n  return [eventTypes, eventTypesLoaded, eventTypesLoadError];\n};\n"],"sourceRoot":""}