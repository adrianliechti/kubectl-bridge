{"version":3,"sources":["webpack:///./packages/knative-plugin/src/components/revisions/index.ts","webpack:///./packages/knative-plugin/src/utils/condition-utils.ts","webpack:///./packages/knative-plugin/src/utils/serverless-tab-utils.ts","webpack:///./packages/knative-plugin/src/components/revisions/RevisionsPage.tsx","webpack:///./packages/knative-plugin/src/components/revisions/revision-table.ts","webpack:///./packages/knative-plugin/src/components/revisions/RevisionDetailsPage.tsx","webpack:///./packages/knative-plugin/src/components/revisions/RevisionList.tsx","webpack:///./packages/knative-plugin/src/components/revisions/RevisionHeader.tsx","webpack:///./packages/knative-plugin/src/components/revisions/RevisionRow.tsx"],"names":["getConditionOKCount","conditions","c","Number","status","True","getConditionString","getConditionStats","OKcount","conditionsSize","getCondition","type","serverlessTab","kind","props","customData","canCreate","ListComponent","selector","selectResourcesForName","matchLabels","tableColumnClasses","columnClass","location","params","kindObj","isAdminPerspective","pages","details","editYaml","breadcrumbs","undefined","breadcrumbsFor","customActionMenu","kindObjData","obj","context","actions","options","loaded","variant","DROPDOWN","t","Header","Row","virtualize","title","sortField","transforms","className","id","revisionReference","serviceReference","readyCondition","Ready","service","metadata","name","namespace","columnID","timestamp","creationTimestamp","message","lineClamp"],"mappings":"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","file":"knative-plugin/code-refs/revisionsComponent-chunk-4bfb15fe0cd2f7eb6736.min.js","sourcesContent":["export { default as RevisionsPage } from './RevisionsPage';\nexport { default as RevisionDetailsPage } from './RevisionDetailsPage';\n","import * as _ from 'lodash';\nimport { K8sResourceCondition, K8sResourceConditionStatus } from '@console/internal/module/k8s';\n\nexport const getConditionOKCount = (conditions: K8sResourceCondition[]): number =>\n  _.sumBy<any>(conditions, (c) => Number(c.status === K8sResourceConditionStatus.True));\n\nexport const getConditionString = (conditions: K8sResourceCondition[]): string =>\n  `${getConditionOKCount(conditions)} OK / ${_.size(conditions)}`;\n\nexport const getConditionStats = (\n  conditions: K8sResourceCondition[],\n): { OKcount: number; conditionsSize: number } => {\n  return {\n    OKcount: getConditionOKCount(conditions),\n    conditionsSize: _.size(conditions),\n  };\n};\n\nexport const getCondition = (\n  conditions: K8sResourceCondition[],\n  type: K8sResourceCondition['type'],\n): K8sResourceCondition | undefined => _.find(conditions, (c) => c.type === type);\n","import {\n  RevisionModel,\n  ServiceModel,\n  RouteModel,\n  EventingBrokerModel,\n  EventingTriggerModel,\n  EventingSubscriptionModel,\n} from '../models';\n\nexport const serverlessTab = (kind: string) => {\n  switch (kind) {\n    case ServiceModel.kind:\n    case 'EventSource':\n      return '';\n    case RevisionModel.kind:\n      return 'revisions';\n    case RouteModel.kind:\n      return 'routes';\n    case EventingBrokerModel.kind:\n      return 'brokers';\n    case EventingTriggerModel.kind:\n      return 'triggers';\n    case EventingSubscriptionModel.kind:\n      return 'subscriptions';\n    case 'Channel':\n      return 'channels';\n    default:\n      return null;\n  }\n};\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RevisionModel } from '../../models';\nimport RevisionList from './RevisionList';\n\nconst RevisionsPage: React.FC<React.ComponentProps<typeof ListPage>> = (props) => {\n  const { customData } = props;\n  return (\n    <ListPage\n      {...props}\n      canCreate={false}\n      kind={referenceForModel(RevisionModel)}\n      ListComponent={RevisionList}\n      selector={\n        customData?.selectResourcesForName\n          ? { matchLabels: { 'serving.knative.dev/service': customData.selectResourcesForName } }\n          : null\n      }\n    />\n  );\n};\n\nexport default RevisionsPage;\n","import { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-sm', // service\n  'pf-m-hidden pf-m-visible-on-lg', // created\n  'pf-m-hidden pf-m-visible-on-xl', // conditions\n  'pf-m-hidden pf-m-visible-on-xl', // ready\n  'pf-m-hidden pf-m-visible-on-2xl', // reason\n  Kebab.columnClass,\n];\n","import * as React from 'react';\nimport { useParams, useLocation } from 'react-router-dom-v5-compat';\nimport { useActivePerspective } from '@console/dynamic-plugin-sdk';\nimport { DetailsForKind } from '@console/internal/components/default-resource';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { navFactory } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  ActionMenuVariant,\n  ActionServiceProvider,\n  useTabbedTableBreadcrumbsFor,\n  ActionMenu,\n} from '@console/shared';\nimport { serverlessTab } from '../../utils/serverless-tab-utils';\n\nconst RevisionDetailsPage: React.FC<React.ComponentProps<typeof DetailsPage>> = (props) => {\n  const location = useLocation();\n  const params = useParams();\n  const { kindObj } = props;\n  const isAdminPerspective = useActivePerspective()[0] === 'admin';\n  const pages = [navFactory.details(DetailsForKind), navFactory.editYaml()];\n  const breadcrumbs = useTabbedTableBreadcrumbsFor(\n    kindObj,\n    location,\n    params,\n    'serving',\n    serverlessTab(kindObj.kind),\n    undefined,\n    isAdminPerspective,\n  );\n\n  const actionMenu = (kindObjData: K8sKind, obj: K8sResourceKind) => {\n    const resourceKind = referenceForModel(kindObjData);\n    const context = { [resourceKind]: obj };\n    return (\n      <ActionServiceProvider context={context}>\n        {({ actions, options, loaded }) =>\n          loaded && (\n            <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />\n          )\n        }\n      </ActionServiceProvider>\n    );\n  };\n\n  return (\n    <DetailsPage\n      {...props}\n      breadcrumbsFor={() => breadcrumbs}\n      pages={pages}\n      customActionMenu={actionMenu}\n    />\n  );\n};\n\nexport default RevisionDetailsPage;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport RevisionHeader from './RevisionHeader';\nimport RevisionRow from './RevisionRow';\n\nconst RevisionList: React.FC<TableProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <Table\n      {...props}\n      aria-label={t('knative-plugin~Revisions')}\n      Header={RevisionHeader(t)}\n      Row={RevisionRow}\n      virtualize\n    />\n  );\n};\n\nexport default RevisionList;\n","import { sortable } from '@patternfly/react-table';\nimport { TFunction } from 'i18next';\nimport { tableColumnClasses } from './revision-table';\n\nconst RevisionHeader = (t: TFunction) => () => {\n  return [\n    {\n      title: t('knative-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      id: 'namespace',\n      title: t('knative-plugin~Namespace'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('knative-plugin~Service'),\n      sortField: 'metadata.labels[\"serving.knative.dev/service\"]',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('knative-plugin~Created'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('knative-plugin~Conditions'),\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('knative-plugin~Ready'),\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: t('knative-plugin~Reason'),\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[7] },\n    },\n  ];\n};\n\nexport default RevisionHeader;\n","import * as React from 'react';\nimport * as cx from 'classnames';\nimport * as _ from 'lodash';\nimport { TableData, RowFunctionArgs } from '@console/internal/components/factory';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport { ClampedText, LazyActionMenu } from '@console/shared';\nimport { RevisionModel, ServiceModel } from '../../models';\nimport { RevisionKind, ConditionTypes } from '../../types';\nimport { getConditionString, getCondition } from '../../utils/condition-utils';\nimport { tableColumnClasses } from './revision-table';\n\nconst revisionReference = referenceForModel(RevisionModel);\nconst serviceReference = referenceForModel(ServiceModel);\n\nconst RevisionRow: React.FC<RowFunctionArgs<RevisionKind>> = ({ obj }) => {\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, ConditionTypes.Ready)\n    : null;\n  const service = _.get(obj.metadata, `labels[\"serving.knative.dev/service\"]`);\n  const objReference = referenceFor(obj);\n  const context = { [objReference]: obj };\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={revisionReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[1], 'co-break-word')} columnID=\"namespace\">\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[2], 'co-break-word')}>\n        {service && (\n          <ResourceLink\n            kind={serviceReference}\n            name={service}\n            namespace={obj.metadata.namespace}\n            title={service}\n          />\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {(readyCondition && readyCondition.status) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        {(readyCondition?.message && (\n          <ClampedText lineClamp={5}>{readyCondition?.message}</ClampedText>\n        )) ||\n          '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <LazyActionMenu context={context} />\n      </TableData>\n    </>\n  );\n};\n\nexport default RevisionRow;\n"],"sourceRoot":""}