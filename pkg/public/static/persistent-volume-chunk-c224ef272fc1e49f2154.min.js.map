{"version":3,"sources":["webpack:///./public/components/persistent-volume.jsx"],"names":["common","factory","menuActions","getExtensionsActionsForKind","PVStatus","pv","status","metadata","deletionTimestamp","phase","tableColumnClasses","columnClass","kind","PVTableRow","obj","t","className","name","namespace","spec","claimRef","title","labels","timestamp","creationTimestamp","actions","resource","terminatingTooltip","Details","storageClassName","pvcName","storage","accessModes","volumeMode","reclaimPolicy","nfsExport","text","join","PersistentVolumesList","props","Header","sortField","transforms","sortFunc","Row","virtualize","PersistentVolumesPage","ListComponent","canCreate","PersistentVolumesDetailsPage","pages","details","editYaml"],"mappings":"6FAAA,yPAmBA,MAAM,OAAEA,GAAW,IAAMC,QACnBC,EAAc,IAAI,IAAMC,4BAA4B,4BAA2BH,GAE/EI,EAAW,EAAGC,QAClB,gBAAC,KAAM,CAACC,OAAQD,EAAGE,SAASC,kBAAoB,cAAgBH,EAAGC,OAAOG,QAGtEC,EAAqB,CACzB,GACA,iCACA,iCACA,iCACA,GACA,iCACA,IAAMC,aAGFC,EAAO,mBAEPC,EAAa,EAAGC,UACpB,MAAM,EAAEC,GAAM,2BACd,OACE,gCACE,gBAAC,IAAS,CAACC,UAAWN,EAAmB,IACvC,gBAAC,KAAY,CAACE,KAAMA,EAAMK,KAAMH,EAAIP,SAASU,KAAMC,UAAWJ,EAAIP,SAASW,aAE7E,gBAAC,IAAS,CAACF,UAAWN,EAAmB,IACvC,gBAACN,EAAQ,CAACC,GAAIS,KAEhB,gBAAC,IAAS,CAACE,UAAWN,EAAmB,IACtC,IAAMI,EAAK,sBACV,gBAAC,KAAY,CACXF,KAAK,wBACLK,KAAMH,EAAIK,KAAKC,SAASH,KACxBC,UAAWJ,EAAIK,KAAKC,SAASF,UAC7BG,MAAOP,EAAIK,KAAKC,SAASH,OAG3B,uBAAKD,UAAU,cAAcD,EAAE,qBAGnC,gBAAC,IAAS,CAACC,UAAWN,EAAmB,IACtC,IAAMI,EAAK,wBAAyB,MAEvC,gBAAC,IAAS,CAACE,UAAWN,EAAmB,IACvC,gBAAC,IAAS,CAACE,KAAMA,EAAMU,OAAQR,EAAIP,SAASe,UAE9C,gBAAC,IAAS,CAACN,UAAWN,EAAmB,IACvC,gBAAC,KAAS,CAACa,UAAWT,EAAIP,SAASiB,qBAErC,gBAAC,IAAS,CAACR,UAAWN,EAAmB,IACvC,gBAAC,KAAa,CACZe,QAASvB,EACTU,KAAMA,EACNc,SAAUZ,EACVa,mBAAoBZ,EAClB,8EAQNa,EAAU,EAAGd,IAAKT,MACtB,MAAM,EAAEU,GAAM,2BACRc,EAAmB,IAAMxB,EAAI,yBAC7ByB,EAAU,IAAMzB,EAAI,sBACpBa,EAAY,IAAMb,EAAI,2BACtB0B,EAAU,IAAM1B,EAAI,yBACpB2B,EAAc,IAAM3B,EAAI,oBACxB4B,EAAa,IAAM5B,EAAI,mBACvB6B,EAAgB,IAAM7B,EAAI,sCAC1B8B,EAAY,IAAM9B,EAAI,mCAC5B,OACE,uBAAKW,UAAU,mBACb,gBAAC,KAAc,CAACoB,KAAMrB,EAAE,qCACxB,uBAAKC,UAAU,OACb,uBAAKA,UAAU,YACb,gBAAC,KAAe,CAACU,SAAUrB,GACzB,0BAAKU,EAAE,0BACP,0BAAKmB,KAGT,uBAAKlB,UAAU,YACb,0BACE,0BAAKD,EAAE,kBACP,0BACE,gBAACX,EAAQ,CAACC,GAAIA,KAEf0B,GACC,gCACE,0BAAKhB,EAAE,oBACP,0BAAKgB,KAGP,IAAUC,IACV,gCACE,0BAAKjB,EAAE,wBACP,0BAAKiB,EAAYK,KAAK,QAG1B,0BAAKtB,EAAE,uBACP,0BAAKkB,GAAclB,EAAE,sBACrB,0BAAKA,EAAE,wBACP,0BACGc,EACC,gBAAC,KAAY,CAACjB,KAAK,eAAeK,KAAMY,IAExCd,EAAE,gBAGLe,GACC,gCACE,0BAAKf,EAAE,iCACP,0BACE,gBAAC,KAAY,CAACH,KAAK,wBAAwBK,KAAMa,EAASZ,UAAWA,MAI1EiB,GACC,gCACE,0BAAKpB,EAAE,sBACP,0BAAKoB,SAURG,EAAyBC,IACpC,MAAM,EAAExB,GAAM,2BA6Cd,OACE,gBAAC,IAAK,iBACAwB,EAAK,cACGxB,EAAE,4BACdyB,OAhDkB,IACb,CACL,CACEnB,MAAON,EAAE,eACT0B,UAAW,gBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEW,MAAON,EAAE,iBACT0B,UAAW,eACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEW,MAAON,EAAE,gBACT0B,UAAW,qBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEW,MAAON,EAAE,mBACT4B,SAAU,YACVD,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEW,MAAON,EAAE,iBACT0B,UAAW,kBACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEW,MAAON,EAAE,kBACT0B,UAAW,6BACXC,WAAY,CAAC,KACbH,MAAO,CAAEvB,UAAWN,EAAmB,KAEzC,CACEW,MAAO,GACPkB,MAAO,CAAEvB,UAAWN,EAAmB,MASzCkC,IAAK/B,EACLgC,YAAU,MAKHC,EAAyBP,GACpC,gBAAC,IAAQ,iBAAKA,EAAK,CAAEQ,cAAeT,EAAuB1B,KAAMA,EAAMoC,WAAW,KAEvEC,EAAgCV,GAC3C,gBAAC,IAAW,iBACNA,EAAK,CACTrC,YAAaA,EACbgD,MAAO,CAAC,KAAWC,QAAQvB,GAAU,KAAWwB","file":"persistent-volume-chunk-c224ef272fc1e49f2154.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { sortable } from '@patternfly/react-table';\nimport { Status } from '@console/shared';\nimport { useTranslation } from 'react-i18next';\n\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport {\n  Kebab,\n  LabelList,\n  navFactory,\n  ResourceKebab,\n  SectionHeading,\n  ResourceLink,\n  ResourceSummary,\n  Timestamp,\n} from './utils';\nimport { PersistentVolumeModel } from '../models';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(PersistentVolumeModel), ...common];\n\nconst PVStatus = ({ pv }) => (\n  <Status status={pv.metadata.deletionTimestamp ? 'Terminating' : pv.status.phase} />\n);\n\nconst tableColumnClasses = [\n  '',\n  'pf-m-hidden pf-m-visible-on-md',\n  'pf-m-hidden pf-m-visible-on-lg',\n  'pf-m-hidden pf-m-visible-on-lg',\n  '',\n  'pf-m-hidden pf-m-visible-on-lg',\n  Kebab.columnClass,\n];\n\nconst kind = 'PersistentVolume';\n\nconst PVTableRow = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <PVStatus pv={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {_.get(obj, 'spec.claimRef.name') ? (\n          <ResourceLink\n            kind=\"PersistentVolumeClaim\"\n            name={obj.spec.claimRef.name}\n            namespace={obj.spec.claimRef.namespace}\n            title={obj.spec.claimRef.name}\n          />\n        ) : (\n          <div className=\"text-muted\">{t('public~No claim')}</div>\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {_.get(obj, 'spec.capacity.storage', '-')}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <LabelList kind={kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={kind}\n          resource={obj}\n          terminatingTooltip={t(\n            'public~The corresponding PersistentVolumeClaim must be deleted first.',\n          )}\n        />\n      </TableData>\n    </>\n  );\n};\n\nconst Details = ({ obj: pv }) => {\n  const { t } = useTranslation();\n  const storageClassName = _.get(pv, 'spec.storageClassName');\n  const pvcName = _.get(pv, 'spec.claimRef.name');\n  const namespace = _.get(pv, 'spec.claimRef.namespace');\n  const storage = _.get(pv, 'spec.capacity.storage');\n  const accessModes = _.get(pv, 'spec.accessModes');\n  const volumeMode = _.get(pv, 'spec.volumeMode');\n  const reclaimPolicy = _.get(pv, 'spec.persistentVolumeReclaimPolicy');\n  const nfsExport = _.get(pv, 'spec.csi.volumeAttributes.share');\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('public~PersistentVolume details')} />\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <ResourceSummary resource={pv}>\n            <dt>{t('public~Reclaim policy')}</dt>\n            <dd>{reclaimPolicy}</dd>\n          </ResourceSummary>\n        </div>\n        <div className=\"col-sm-6\">\n          <dl>\n            <dt>{t('public~Status')}</dt>\n            <dd>\n              <PVStatus pv={pv} />\n            </dd>\n            {storage && (\n              <>\n                <dt>{t('public~Capacity')}</dt>\n                <dd>{storage}</dd>\n              </>\n            )}\n            {!_.isEmpty(accessModes) && (\n              <>\n                <dt>{t('public~Access modes')}</dt>\n                <dd>{accessModes.join(', ')}</dd>\n              </>\n            )}\n            <dt>{t('public~Volume mode')}</dt>\n            <dd>{volumeMode || t('public~Filesystem')}</dd>\n            <dt>{t('public~StorageClass')}</dt>\n            <dd>\n              {storageClassName ? (\n                <ResourceLink kind=\"StorageClass\" name={storageClassName} />\n              ) : (\n                t('public~None')\n              )}\n            </dd>\n            {pvcName && (\n              <>\n                <dt>{t('public~PersistentVolumeClaim')}</dt>\n                <dd>\n                  <ResourceLink kind=\"PersistentVolumeClaim\" name={pvcName} namespace={namespace} />\n                </dd>\n              </>\n            )}\n            {nfsExport && (\n              <>\n                <dt>{t('public~NFS-export')}</dt>\n                <dd>{nfsExport}</dd>\n              </>\n            )}\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const PersistentVolumesList = (props) => {\n  const { t } = useTranslation();\n  const PVTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Status'),\n        sortField: 'status.phase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Claim'),\n        sortField: 'spec.claimRef.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~Capacity'),\n        sortFunc: 'pvStorage',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('public~Labels'),\n        sortField: 'metadata.labels',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: t('public~Created'),\n        sortField: 'metadata.creationTimestamp',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[5] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[6] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~PersistentVolumes')}\n      Header={PVTableHeader}\n      Row={PVTableRow}\n      virtualize\n    />\n  );\n};\n\nexport const PersistentVolumesPage = (props) => (\n  <ListPage {...props} ListComponent={PersistentVolumesList} kind={kind} canCreate={true} />\n);\nexport const PersistentVolumesDetailsPage = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActions}\n    pages={[navFactory.details(Details), navFactory.editYaml()]}\n  />\n);\n"],"sourceRoot":""}