{"version":3,"sources":["webpack:///./packages/console-shared/src/components/editor/CodeEditor.tsx","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./packages/console-shared/src/components/editor/theme.ts","webpack:///./public/reducers/ols.ts","webpack:///./packages/console-shared/src/components/editor/CodeEditorToolbar.tsx","webpack:///./packages/console-shared/src/hooks/ols-hook.ts","webpack:///./packages/console-shared/src/components/editor/ShortcutsLink.tsx","webpack:///./packages/console-shared/src/components/editor/yaml-editor-utils.ts","webpack:///./public/module/k8s/openapi-to-json-schema.ts"],"names":["CodeEditor","props","ref","value","options","showShortcuts","showMiniMap","toolbarLinks","minHeight","onChange","onSave","language","theme","usesValue","undefined","editorDidMount","editor","monaco","currentLanguage","getModel","getModeId","layout","focus","getAction","run","getModels","updateOptions","tabSize","addCommand","KeyMod","CtrlCmd","KeyCode","KEY_S","editorOptions","minimap","enabled","bounds","measureRef","contentRect","className","style","height","width","useK8sGet","kind","name","namespace","opts","data","setData","loaded","setLoaded","loadError","setLoadError","resource","error","window","defineTheme","base","inherit","colors","rules","token","foreground","ActionType","getOLSCodeBlock","plugins","ols","get","t","showLightspeedButton","dispatch","length","variant","size","onClick","OpenOLS","icon","orientation","default","map","link","index","key","OLSConfigModel","apiGroup","apiVersion","label","labelKey","labelPluralKey","plural","abbr","namespaced","id","labelPlural","crd","useOLSConfig","err","onHideShortcuts","bodyContent","alt","keyName","ctrl","shift","ctrlCmd","hover","maxWidth","distance","onHide","type","isInline","defaultEditorOptions","readOnly","scrollBeyondLastLine","MONACO_URI","parse","createDocument","model","create","getVersionId","getValue","fold","resetMouseLocation","managedLocation","document","doc","getText","rootMappings","mappings","rootElement","rootKey","rootValue","metadataMappings","metadataChildren","start","positionAt","startPosition","line","end","endPosition","findManagedMetadata","top","getScrollTop","setSelection","then","setScrollTop","Math","abs","catch","enableYAMLValidation","p2m","monacoURI","yamlService","alreadyInUse","pendingValidationRequests","Map","doValidate","doValidation","diagnostics","markers","asDiagnostics","setModelMarkers","initialFoldingTriggered","tryFolding","setTimeout","onDidChangeContent","request","uri","clearTimeout","delete","cleanPendingValidation","set","registerYAMLinMonaco","m2p","workspaceContext","resolveRelativePath","relativePath","url","Promise","resolve","reject","xhr","XMLHttpRequest","onload","responseText","onerror","statusText","open","send","yamlOpenAPI","schemas","fileMatch","schema","configure","validate","completion","createYAMLService","languages","getLanguages","filter","x","register","extensions","aliases","mimetypes","registerYAMLLanguage","languageID","registerCompletionItemProvider","position","doComplete","asPosition","lineNumber","column","list","asCompletionResult","registerYAMLCompletion","registerDocumentSymbolProvider","asSymbolInformations","findDocumentSymbols","registerYAMLDocumentSymbols","registerHoverProvider","doHover","asHover","e","el","getElementsByClassName","onclick","event","preventDefault","onauxclick","target","getAttribute","opener","registerYAMLHover","groupVersionKindToEnums","gvkObjArray","versionEnum","kindEnum","gvkObj","group","version","push","createOrAppendAPIVersion","openAPI","apiVersionEnum","enum","createOrAppendKind","openAPItoJSONSchema","convertedOpenAPI","definition","hasOwnProperty","openAPIDefinition","groupVersionKind","properties","gvkEnums","convertGroupVersionKindToJSONSchema","oneOfSchemas","openAPIDefinitions","schemaProperty","$ref","definitions","oneOf"],"mappings":"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","file":"71-chunk-0c63b61afd00d2d55715.min.js","sourcesContent":["import * as React from 'react';\nimport Measure from 'react-measure';\nimport MonacoEditor from 'react-monaco-editor';\nimport { CodeEditorProps } from '@console/dynamic-plugin-sdk';\nimport { ThemeContext } from '@console/internal/components/ThemeProvider';\nimport CodeEditorToolbar from './CodeEditorToolbar';\nimport { registerYAMLinMonaco, defaultEditorOptions } from './yaml-editor-utils';\nimport './theme';\nimport './CodeEditor.scss';\n\nconst CodeEditor = React.forwardRef<MonacoEditor, CodeEditorProps>((props, ref) => {\n  const {\n    value,\n    options = defaultEditorOptions,\n    showShortcuts,\n    showMiniMap,\n    toolbarLinks,\n    minHeight,\n    onChange,\n    onSave,\n    language,\n  } = props;\n\n  const theme = React.useContext(ThemeContext);\n  const [usesValue] = React.useState<boolean>(value !== undefined);\n  const editorDidMount = React.useCallback(\n    (editor, monaco) => {\n      const currentLanguage = editor.getModel()?.getModeId();\n      editor.layout();\n      editor.focus();\n      switch (currentLanguage) {\n        case 'yaml':\n          registerYAMLinMonaco(editor, monaco, usesValue);\n          break;\n        case 'json':\n          editor.getAction('editor.action.formatDocument').run();\n          break;\n        default:\n          break;\n      }\n      monaco.editor.getModels()[0]?.updateOptions({ tabSize: 2 });\n      onSave && editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, onSave); // eslint-disable-line no-bitwise\n    },\n    [onSave, usesValue],\n  );\n\n  const editorOptions = React.useMemo(() => {\n    return {\n      ...options,\n      minimap: {\n        enabled: showMiniMap,\n      },\n    };\n  }, [options, showMiniMap]);\n\n  return (\n    <>\n      <CodeEditorToolbar showShortcuts={showShortcuts} toolbarLinks={toolbarLinks} />\n      <Measure bounds>\n        {({ measureRef, contentRect }) => (\n          <div ref={measureRef} className=\"ocs-yaml-editor__root\" style={{ minHeight }}>\n            <div className=\"ocs-yaml-editor__wrapper\">\n              <MonacoEditor\n                ref={ref}\n                language={language ?? 'yaml'}\n                theme={theme === 'light' ? 'console-light' : 'console-dark'}\n                height={contentRect.bounds.height}\n                width={contentRect.bounds.width}\n                value={value}\n                options={editorOptions}\n                editorDidMount={editorDidMount}\n                onChange={onChange}\n              />\n            </div>\n          </div>\n        )}\n      </Measure>\n    </>\n  );\n});\n\nexport default CodeEditor;\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","import { global_BackgroundColor_200 as globalBackground200 } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_200';\nimport { global_BackgroundColor_dark_100 as darkEditorBackground } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_dark_100';\nimport { global_BackgroundColor_dark_200 as globalBackgroundDark200 } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_dark_200';\nimport { global_BackgroundColor_light_100 as lightEditorBackground } from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport { global_Color_dark_100 as globalColorDark100 } from '@patternfly/react-tokens/dist/js/global_Color_dark_100';\nimport { global_Color_light_100 as globalColorLight100 } from '@patternfly/react-tokens/dist/js/global_Color_light_100';\n\n(window as any).monaco.editor.defineTheme('console-light', {\n  base: 'vs',\n  inherit: true,\n  colors: {\n    'editor.background': lightEditorBackground.value,\n    'editorGutter.background': '#f5f5f5', // black-150\n    'editorLineNumber.activeForeground': globalColorDark100.value,\n    'editorLineNumber.foreground': globalBackgroundDark200.value,\n  },\n  rules: [\n    { token: 'number', foreground: '486b00' }, // light-green-600\n    { token: 'type', foreground: '795600' }, // gold-500\n    { token: 'string', foreground: '004080' }, // blue-600\n    { token: 'keyword', foreground: '40199a' }, // purple-600\n  ],\n});\n\n(window as any).monaco.editor.defineTheme('console-dark', {\n  base: 'vs-dark',\n  inherit: true,\n  colors: {\n    'editor.background': darkEditorBackground.value,\n    'editorGutter.background': '#292e34', // no pf token defined\n    'editorLineNumber.activeForeground': globalColorLight100.value,\n    'editorLineNumber.foreground': globalBackground200.value,\n  },\n  rules: [\n    { token: 'number', foreground: 'ace12e' }, // light-green-600\n    { token: 'type', foreground: '73bcf7' }, // blue-200\n    { token: 'string', foreground: 'f0ab00' }, // gold-400\n    { token: 'keyword', foreground: 'cbc1ff' }, // purple-100\n  ],\n});\n","import { RootState } from '../redux';\n\nexport enum ActionType {\n  OpenOLS = 'openOLS',\n  CloseOLS = 'closeOLS',\n}\n\ntype CodeBlock = {\n  id: string;\n  value: string;\n};\n\n/* Note: Using Reducer and Selector from OLS plugin */\nexport const getOLSCodeBlock = ({ plugins }: RootState): CodeBlock =>\n  plugins?.ols?.get('codeBlock');\n","import * as React from 'react';\nimport { Button, Divider } from '@patternfly/react-core';\nimport { MagicIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useDispatch } from 'react-redux';\nimport { action } from 'typesafe-actions';\nimport { ActionType } from '@console/internal/reducers/ols';\nimport { useOLSConfig } from '../../hooks/ols-hook';\nimport { isMac, ShortcutCommand } from '../shortcuts/Shortcut';\nimport ShortcutsLink from './ShortcutsLink';\n\nimport './CodeEditorToolbar.scss';\n\ninterface CodeEditorToolbarProps {\n  showShortcuts?: boolean;\n  toolbarLinks?: React.ReactNodeArray;\n}\n\nconst CodeEditorToolbar: React.FC<CodeEditorToolbarProps> = ({ showShortcuts, toolbarLinks }) => {\n  const { t } = useTranslation();\n  const openOLS = () => action(ActionType.OpenOLS);\n  const showLightspeedButton = useOLSConfig();\n  const dispatch = useDispatch();\n  if (!showShortcuts && !toolbarLinks?.length) return null;\n  return (\n    <div className=\"co-toolbar__group co-toolbar__group--right\">\n      <div className=\"ocs-yaml-editor-toolbar pf-v5-u-pb-sm pf-v5-l-flex\">\n        {showLightspeedButton && (\n          <div className=\"ocs-yaml-editor-toolbar__link pf-v5-l-flex\">\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                dispatch(openOLS());\n              }}\n              icon={<MagicIcon />}\n            >\n              {t('console-shared~Ask OpenShift Lightspeed')}\n            </Button>\n            <Divider\n              orientation={{\n                default: 'vertical',\n              }}\n            />\n          </div>\n        )}\n        <div className=\"ocs-yaml-editor-toolbar__link\">\n          <div>\n            <span className=\"ocs-yaml-editor-shortcut__command\">\n              <ShortcutCommand>{isMac ? '⌥ Opt' : 'Alt'}</ShortcutCommand>\n              <ShortcutCommand>F1</ShortcutCommand>\n            </span>\n            <span className=\"ocs-yaml-editor-shortcut__text\">\n              {t('console-shared~Accessibility help')}\n            </span>\n          </div>\n        </div>\n        {showShortcuts && (\n          <div className=\"ocs-yaml-editor-toolbar__link pf-v5-l-flex\">\n            <Divider\n              orientation={{\n                default: 'vertical',\n              }}\n            />\n            <ShortcutsLink />\n          </div>\n        )}\n        {toolbarLinks &&\n          toolbarLinks.map((link, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <div key={`${index}`} className=\"ocs-yaml-editor-toolbar__link pf-v5-l-flex\">\n              {(showShortcuts || index > 0) && link ? (\n                <Divider\n                  orientation={{\n                    default: 'vertical',\n                  }}\n                />\n              ) : null}\n              <div className=\"ocs-yaml-editor-toolbar__link\">{link}</div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\nexport default CodeEditorToolbar;\n","import { K8sKind, K8sResourceKind } from '@console/dynamic-plugin-sdk/src';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\n\nconst OLSConfigModel: K8sKind = {\n  apiGroup: 'ols.openshift.io',\n  apiVersion: 'v1alpha1',\n  label: 'OLSConfig',\n  // t('console-shared~OLSConfig')\n  labelKey: 'console-shared~OLSConfig',\n  // t('console-shared~OLSConfigs')\n  labelPluralKey: 'console-shared~OLSConfigs',\n  plural: 'olsconfigs',\n  abbr: 'OLSC',\n  namespaced: false,\n  kind: 'OLSConfig',\n  id: 'olsconfig',\n  labelPlural: 'OLSConfigs',\n  crd: true,\n};\n\nconst OLSCONFIG_INSTANCE = 'cluster';\n\nexport const useOLSConfig = (): boolean => {\n  const [, loaded, err] = useK8sGet<K8sResourceKind>(OLSConfigModel, OLSCONFIG_INSTANCE);\n  return loaded && !err;\n};\n","import * as React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport { useTranslation } from 'react-i18next';\nimport { ShortcutTable, Shortcut } from '../shortcuts';\nimport { isMac } from '../shortcuts/Shortcut';\n\ninterface ShortcutsLinkProps {\n  onHideShortcuts?: () => {};\n}\n\nconst ShortcutsLink: React.FC<ShortcutsLinkProps> = ({ onHideShortcuts }) => {\n  const { t } = useTranslation();\n  return (\n    <Popover\n      aria-label={t('console-shared~Shortcuts')}\n      bodyContent={\n        <ShortcutTable>\n          <Shortcut alt keyName=\"F1\">\n            {t('console-shared~Accessibility help')}\n          </Shortcut>\n          <Shortcut keyName=\"F1\">{t('console-shared~View all editor shortcuts')}</Shortcut>\n          <Shortcut ctrl keyName=\"space\">\n            {t('console-shared~Activate auto complete')}\n          </Shortcut>\n          <Shortcut ctrl shift={isMac} keyName=\"m\">\n            {t(\n              'console-shared~Toggle Tab action between insert Tab character and move focus out of editor',\n            )}\n          </Shortcut>\n          <Shortcut ctrlCmd shift keyName=\"o\">\n            {t('console-shared~View document outline')}\n          </Shortcut>\n          <Shortcut hover>{t('console-shared~View property descriptions')}</Shortcut>\n          <Shortcut ctrlCmd keyName=\"s\">\n            {t('console-shared~Save')}\n          </Shortcut>\n        </ShortcutTable>\n      }\n      maxWidth=\"25rem\"\n      distance={18}\n      onHide={onHideShortcuts}\n    >\n      <Button type=\"button\" variant=\"link\" isInline>\n        <QuestionCircleIcon className=\"co-icon-space-r co-p-has-sidebar__sidebar-link-icon\" />\n        {t('console-shared~View shortcuts')}\n      </Button>\n    </Popover>\n  );\n};\n\nexport default ShortcutsLink;\n","import * as URL from 'url';\nimport { Uri, Range } from 'monaco-editor';\nimport {\n  MonacoToProtocolConverter,\n  ProtocolToMonacoConverter,\n} from 'monaco-languageclient/lib/monaco-converter';\nimport * as yaml from 'yaml-ast-parser';\nimport { getLanguageService, TextDocument } from 'yaml-language-server';\nimport { openAPItoJSONSchema } from '@console/internal/module/k8s/openapi-to-json-schema';\nimport { getSwaggerDefinitions } from '@console/internal/module/k8s/swagger';\n\nexport const defaultEditorOptions = { readOnly: false, scrollBeyondLastLine: false };\n\nconst MODEL_URI = 'inmemory://model.yaml';\nconst MONACO_URI = Uri.parse(MODEL_URI);\n\nconst createDocument = (model) => {\n  return TextDocument.create(\n    MODEL_URI,\n    model?.getModeId(),\n    model?.getVersionId(),\n    model?.getValue(),\n  );\n};\n\n// Unfortunately, `editor.focus()` doesn't work when hiding the shortcuts\n// popover. We need to find the actual DOM element.\nexport const hackyFocusEditor = () =>\n  setTimeout(() => document.querySelector<any>('.monaco-editor textarea')?.focus());\n\nexport const registerYAMLLanguage = (monaco) => {\n  // register the YAML language with Monaco\n  monaco.languages.register({\n    id: 'yaml',\n    extensions: ['.yml', '.yaml'],\n    aliases: ['YAML', 'yaml'],\n    mimetypes: ['application/yaml'],\n  });\n};\n\nexport const createYAMLService = () => {\n  const resolveSchema = (url: string): Promise<string> => {\n    const promise = new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.onload = () => resolve(xhr.responseText);\n      xhr.onerror = () => reject(xhr.statusText);\n      xhr.open('GET', url, true);\n      xhr.send();\n    });\n    return promise as Promise<string>;\n  };\n\n  const workspaceContext = {\n    resolveRelativePath: (relativePath, resource) => URL.resolve(resource, relativePath),\n  };\n\n  const yamlService = getLanguageService(resolveSchema, workspaceContext);\n\n  // Prepare the schema\n  const yamlOpenAPI = getSwaggerDefinitions();\n\n  // Convert the openAPI schema to something the language server understands\n  const kubernetesJSONSchema = openAPItoJSONSchema(yamlOpenAPI);\n\n  const schemas = [\n    {\n      uri: 'inmemory:yaml',\n      fileMatch: ['*'],\n      schema: kubernetesJSONSchema,\n    },\n  ];\n  yamlService.configure({\n    validate: true,\n    schemas,\n    hover: true,\n    completion: true,\n  });\n  return yamlService;\n};\n\nexport const registerYAMLCompletion = (languageID, monaco, m2p, p2m, yamlService) => {\n  monaco.languages.registerCompletionItemProvider(languageID, {\n    provideCompletionItems(model, position) {\n      const document = createDocument(model);\n      return yamlService\n        .doComplete(document, m2p.asPosition(position.lineNumber, position.column), true)\n        .then((list) => {\n          return p2m.asCompletionResult(list);\n        });\n    },\n  });\n};\n\nexport const registerYAMLDocumentSymbols = (languageID, monaco, p2m, yamlService) => {\n  monaco.languages.registerDocumentSymbolProvider(languageID, {\n    provideDocumentSymbols(model) {\n      const document = createDocument(model);\n      return p2m.asSymbolInformations(yamlService.findDocumentSymbols(document));\n    },\n  });\n};\n\nexport const registerYAMLHover = (languageID, monaco, m2p, p2m, yamlService) => {\n  monaco.languages.registerHoverProvider(languageID, {\n    provideHover(model, position) {\n      const doc = createDocument(model);\n      return yamlService\n        .doHover(doc, m2p.asPosition(position.lineNumber, position.column), true)\n        .then((hover) => {\n          return p2m.asHover(hover);\n        })\n        .then((e) => {\n          for (const el of <any>document.getElementsByClassName('monaco-editor-hover')) {\n            el.onclick = (event) => event.preventDefault();\n            el.onauxclick = (event) => {\n              window.open(event.target.getAttribute('data-href'), '_blank').opener = null;\n              event.preventDefault();\n            };\n          }\n          return e;\n        });\n    },\n  });\n};\n\nconst findManagedMetadata = (model) => {\n  const document = createDocument(model);\n  const doc = yaml.safeLoad(document.getText());\n  const rootMappings = doc?.mappings || [];\n  for (const rootElement of rootMappings) {\n    const rootKey = rootElement.key;\n    const rootValue = rootElement.value;\n\n    // Search for metadata\n    if (rootKey.value === 'metadata') {\n      const metadataMappings = rootValue.mappings || [];\n      for (const metadataChildren of metadataMappings) {\n        const childKey = metadataChildren.key;\n\n        // Search for managedFields\n        if (childKey.value === 'managedFields') {\n          const startLine = document.positionAt(metadataChildren.startPosition).line + 1;\n          const endLine = document.positionAt(metadataChildren.endPosition).line;\n          return {\n            start: startLine,\n            end: endLine,\n          };\n        }\n      }\n    }\n  }\n  return {\n    start: -1,\n    end: -1,\n  };\n};\n\nexport const fold = (editor, model, resetMouseLocation: boolean): void => {\n  const managedLocation = findManagedMetadata(model);\n  const { start } = managedLocation;\n  const { end } = managedLocation;\n\n  if (start >= 0 && end >= 0) {\n    const top = editor.getScrollTop();\n    editor.setSelection(new Range(start, 0, end, 0));\n    editor\n      .getAction('editor.fold')\n      .run()\n      .then(() => {\n        if (resetMouseLocation) {\n          editor.setSelection(new Range(0, 0, 0, 0));\n        }\n        editor.setScrollTop(Math.abs(top));\n      })\n      .catch(() => {});\n  }\n};\n\n// TODO: These functions are not part of React Component LifeCycle, will need refactoring\nexport const enableYAMLValidation = (\n  editor,\n  monaco,\n  p2m,\n  monacoURI,\n  yamlService,\n  alreadyInUse: boolean = false,\n) => {\n  const pendingValidationRequests = new Map();\n\n  const getModel = () => monaco.editor?.getModels()[0];\n\n  const cleanPendingValidation = (document) => {\n    const request = pendingValidationRequests.get(document.uri);\n    if (request !== undefined) {\n      clearTimeout(request);\n      pendingValidationRequests.delete(document.uri);\n    }\n  };\n\n  const cleanDiagnostics = () =>\n    monaco.editor.setModelMarkers(monaco.editor.getModel(monacoURI), 'default', []);\n\n  const doValidate = (document) => {\n    if (document.getText().length === 0) {\n      cleanDiagnostics();\n      return;\n    }\n    yamlService\n      .doValidation(document, true)\n      .then((diagnostics) => {\n        const markers = p2m.asDiagnostics(diagnostics);\n        monaco.editor.setModelMarkers(getModel(), 'default', markers);\n      })\n      .catch(() => {});\n  };\n\n  let initialFoldingTriggered = false;\n  const tryFolding = () => {\n    const document = createDocument(getModel());\n    if (!initialFoldingTriggered && document.getText() !== '') {\n      setTimeout(() => fold(editor, getModel(), true));\n      initialFoldingTriggered = true;\n    }\n  };\n  if (alreadyInUse) {\n    tryFolding();\n  }\n\n  getModel()?.onDidChangeContent(() => {\n    tryFolding();\n\n    const document = createDocument(getModel());\n    cleanPendingValidation(document);\n    pendingValidationRequests.set(\n      document.uri,\n      setTimeout(() => {\n        pendingValidationRequests.delete(document.uri);\n        doValidate(document);\n      }),\n    );\n  });\n};\n\nexport const registerYAMLinMonaco = (editor, monaco, alreadyInUse: boolean = false) => {\n  const LANGUAGE_ID = 'yaml';\n\n  const m2p = new MonacoToProtocolConverter();\n  const p2m = new ProtocolToMonacoConverter();\n\n  const yamlService = createYAMLService();\n\n  // validation is not a 'registered' feature like the others, it relies on calling the yamlService\n  // directly for validation results when content in the editor has changed\n  enableYAMLValidation(editor, monaco, p2m, MONACO_URI, yamlService, alreadyInUse);\n\n  /**\n   * This exists because react-monaco-editor passes the same monaco\n   * object each time. Without it you would be registering all the features again and\n   * getting duplicate results.\n   *\n   * Monaco does not provide any apis for unregistering or checking if the features have already\n   * been registered for a language.\n   *\n   * We check that > 1 YAML language exists because one is the default and one is the initial register\n   * that setups our features.\n   */\n  if (monaco.languages.getLanguages().filter((x) => x.id === LANGUAGE_ID).length > 1) {\n    return;\n  }\n\n  registerYAMLLanguage(monaco); // register the YAML language with monaco\n  registerYAMLCompletion(LANGUAGE_ID, monaco, m2p, p2m, yamlService);\n  registerYAMLDocumentSymbols(LANGUAGE_ID, monaco, p2m, yamlService);\n  registerYAMLHover(LANGUAGE_ID, monaco, m2p, p2m, yamlService);\n};\n","// contains all the relevant information for transforming openapi specifications (such as kuberneres openapi)\n// to json schemas\n\ninterface GroupVersionKind {\n  kind: string;\n  version: string;\n  group: string;\n}\n\n/**\n * Given an array of GroupVersionKind objects, return their JSON Schema representation as enums\n */\nfunction groupVersionKindToEnums(gvkObjArray: [GroupVersionKind]) {\n  const versionEnum = [];\n  const kindEnum = [];\n  for (const gvkObj of gvkObjArray) {\n    if (gvkObj.group && gvkObj.version) {\n      versionEnum.push(`${gvkObj.group}/${gvkObj.version}`);\n    } else if (gvkObj.version) {\n      versionEnum.push(gvkObj.version);\n    }\n    if (gvkObj.kind) {\n      kindEnum.push(gvkObj.kind);\n    }\n  }\n  return {\n    versionEnum,\n    kindEnum,\n  };\n}\n\n/**\n * Append enums to APIVersion or create the object if it doesn't exist\n */\nfunction createOrAppendAPIVersion(openAPI, apiVersionEnum: string[]) {\n  if (openAPI.apiVersion) {\n    if (openAPI.apiVersion.enum) {\n      openAPI.apiVersion.enum.push(...apiVersionEnum);\n    } else {\n      openAPI.apiVersion.enum = apiVersionEnum;\n    }\n  } else {\n    openAPI.apiVersion = {\n      enum: apiVersionEnum,\n    };\n  }\n}\n\n/**\n * Append enums to kind or create the object if it doesn't exist\n */\nfunction createOrAppendKind(openAPI, kindEnum: string[]) {\n  if (openAPI.kind) {\n    if (openAPI.kind.enum) {\n      openAPI.kind.enum.push(...kindEnum);\n    } else {\n      openAPI.kind.enum = kindEnum;\n    }\n  } else {\n    openAPI.kind = {\n      enum: kindEnum,\n    };\n  }\n}\n\n/**\n * Converts the openAPI kubernetes specification for group, version, kind to JSON Schema\n *\n * Context: The openAPI specification gives the group, version, and kind objects as 'x-kubernetes-group-version-kind'\n * instead of adding the values to the enum's\n */\nfunction convertGroupVersionKindToJSONSchema(openAPI) {\n  for (const definition in openAPI) {\n    if (openAPI.hasOwnProperty(definition)) {\n      const openAPIDefinition = openAPI[definition];\n      const groupVersionKind = openAPIDefinition['x-kubernetes-group-version-kind'];\n\n      // If this object has x-kubernetes-group-version-kind then add their values into correct places in JSON Schema\n      if (groupVersionKind && openAPIDefinition.properties) {\n        const gvkEnums = groupVersionKindToEnums(groupVersionKind);\n        createOrAppendAPIVersion(openAPIDefinition.properties, gvkEnums.versionEnum);\n        createOrAppendKind(openAPIDefinition.properties, gvkEnums.kindEnum);\n      }\n    }\n  }\n  return openAPI;\n}\n\n/**\n * Takes in the stored kubernetes openAPI object and outputs a JSON Schema of the object\n */\nexport function openAPItoJSONSchema(openAPI) {\n  if (!openAPI) {\n    return null;\n  }\n\n  const convertedOpenAPI = convertGroupVersionKindToJSONSchema(openAPI);\n\n  const oneOfSchemas = [];\n  const openAPIDefinitions = {};\n  for (const schemaProperty in convertedOpenAPI) {\n    if (convertedOpenAPI.hasOwnProperty(schemaProperty)) {\n      openAPIDefinitions[schemaProperty] = convertedOpenAPI[schemaProperty];\n      oneOfSchemas.push({\n        $ref: `#/definitions/${schemaProperty}`,\n      });\n    }\n  }\n\n  return {\n    definitions: {\n      ...openAPIDefinitions,\n    },\n    oneOf: oneOfSchemas,\n  };\n}\n"],"sourceRoot":""}