{"version":3,"sources":["webpack:///./packages/gitops-plugin/src/components/list/GitOpsList.tsx","webpack:///./packages/gitops-plugin/src/components/list/GitOpsTableHeader.tsx","webpack:///./packages/gitops-plugin/src/components/list/GitOpsTableRow.tsx","webpack:///./packages/gitops-plugin/src/components/list/GitOpsSyncFragment.tsx","webpack:///./packages/gitops-plugin/src/components/GitOpsListPage.tsx","webpack:///./packages/dev-console/src/components/import/GiteaIcon.tsx","webpack:///./packages/dev-console/src/components/import/render-utils.tsx","webpack:///./packages/dev-console/src/components/import/CheIcon.tsx","webpack:///./packages/gitops-plugin/src/components/utils/gitops-utils.ts","webpack:///./packages/gitops-plugin/src/components/GitOpsEmptyState.tsx","webpack:///./packages/gitops-plugin/src/components/utils/useDefaultSecret.tsx"],"names":["appGroups","emptyStateMsg","t","textFilter","setTextFilter","visibleItems","filter","name","hasSyncStatus","some","sync_status","className","value","label","onChange","_event","val","data","Header","Row","loaded","virtualize","tableColumnClasses","title","sortField","transforms","props","getMatchingEnvs","envs","desiredStatus","acc","status","idx","obj","appGroup","syncStatuses","environments","last_deployed","lastDeployed","repo_url","repoUrl","syncedEnvs","reduce","outOfSyncEnvs","unknownEnvs","latestDeployedTime","leadingDeployedTime","deployedTime","latestDeployedEnv","indexOf","to","href","additionalClassName","style","marginRight","length","tooltip","map","env","hasGutter","key","isFilled","count","icon","join","spacer","default","timestamp","targetIcon","flex","isContentLeftAligned","content","projectRes","isList","kind","optional","setAppGroups","setEmptyStateMsg","namespaces","nsLoaded","nsError","secretNS","secretName","baseURL","ignore","manifestURLs","allAppGroups","emptyMsg","badge","topology","xmlns","viewBox","fill","role","width","height","d","routeDecoratorIcon","routeURL","radius","cheEnabled","cheIconURL","xlinkHref","fontSize","INVALID","GITHUB","BITBUCKET","GITLAB","GITEA","version","fillRule","stroke","strokeWidth","getManifestURLs","ns","metadata","annotations","fetchAppGroups","manifestURL","newListApi","err","applications","fetchAllAppGroups","Promise","all","getEnvData","v2EnvURI","envURI","appURI","error","getPipelinesBaseURI","undefined","getApplicationsBaseURI","appName","variant","full","user","userName"],"mappings":"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","file":"gitops-plugin-list-page-chunk-bbc01c3648090413c62e.min.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Table, TextFilter } from '@console/internal/components/factory';\nimport { fuzzyCaseInsensitive } from '@console/internal/components/factory/table-filters';\nimport GitOpsEmptyState from '../GitOpsEmptyState';\nimport { GitOpsAppGroupData } from '../utils/gitops-types';\nimport GitOpsTableHeader from './GitOpsTableHeader';\nimport GitOpsTableRow from './GitOpsTableRow';\nimport './GitOpsList.scss';\n\ninterface GitOpsListProps {\n  appGroups: GitOpsAppGroupData[];\n  emptyStateMsg: string;\n}\n\nconst GitOpsList: React.FC<GitOpsListProps> = ({ appGroups, emptyStateMsg }) => {\n  const { t } = useTranslation();\n  const [textFilter, setTextFilter] = React.useState('');\n\n  const visibleItems = appGroups?.filter(({ name }) => {\n    return fuzzyCaseInsensitive(textFilter, name);\n  });\n\n  const hasSyncStatus: boolean =\n    appGroups?.some(\n      ({ sync_status }) => sync_status, // eslint-disable-line @typescript-eslint/naming-convention\n    ) || false;\n  return (\n    <div className=\"gop-gitops-list\">\n      {!emptyStateMsg && appGroups ? (\n        <>\n          <div className=\"co-m-pane__filter-row\">\n            <TextFilter\n              value={textFilter}\n              label={t('gitops-plugin~by name')}\n              onChange={(_event, val) => setTextFilter(val)}\n            />\n          </div>\n          <Table\n            data={visibleItems}\n            aria-label={t('gitops-plugin~Environments table')}\n            Header={GitOpsTableHeader(hasSyncStatus)}\n            Row={GitOpsTableRow}\n            loaded={!emptyStateMsg}\n            virtualize\n          />\n        </>\n      ) : (\n        <GitOpsEmptyState emptyStateMsg={emptyStateMsg} />\n      )}\n    </div>\n  );\n};\n\nexport default GitOpsList;\n","import { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport i18n from '@console/internal/i18n';\n\nconst tableColumnClasses = [\n  classNames('pf-m-width-20'), // Application name\n  classNames('pf-m-width-30'), // Git repository\n  classNames('pf-m-hidden', 'pf-m-visible-on-md', 'pf-m-width-20'), // Environments\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-m-width-30'), // Last deployment\n];\n\nconst GitOpsTableHeader = (hasSyncStatus: boolean) => () => {\n  return [\n    {\n      title: i18n.t('gitops-plugin~Application name'),\n      sortField: 'name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: i18n.t('gitops-plugin~Git repository'),\n      sortField: 'gitRepository',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: hasSyncStatus\n        ? i18n.t('gitops-plugin~Environment status')\n        : i18n.t('gitops-plugin~Environment'),\n      sortField: 'environments',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: i18n.t('gitops-plugin~Last deployment'),\n      sortField: 'lastDeployment',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\n\nexport default GitOpsTableHeader;\n","import * as React from 'react';\nimport { Flex, FlexItem, Split, SplitItem } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom-v5-compat';\nimport { routeDecoratorIcon } from '@console/dev-console/src/components/import/render-utils';\nimport { RowFunctionArgs, TableData } from '@console/internal/components/factory';\nimport { ExternalLink, Timestamp } from '@console/internal/components/utils';\nimport {\n  GreenCheckCircleIcon,\n  YellowExclamationTriangleIcon,\n  GrayUnknownIcon,\n} from '@console/shared';\nimport { GitOpsAppGroupData } from '../utils/gitops-types';\nimport GitOpsSyncFragment from './GitOpsSyncFragment';\n\nimport './GitOpsTableRow.scss';\n\nconst tableColumnClasses = [\n  classNames('pf-m-width-20'), // Application name\n  classNames('pf-m-width-30'), // Git repository\n  classNames('pf-m-hidden', 'pf-m-visible-on-md', 'pf-m-width-20'), // Environments\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg', 'pf-m-width-30'), // Last deployment\n];\n\nconst getMatchingEnvs = (envs: string[], desiredStatus: string) => (\n  acc: string[],\n  status: string,\n  idx: number,\n): string[] =>\n  desiredStatus === status\n    ? [...acc, envs[idx]] // 1:1 between a status and an env\n    : acc;\n\nconst GitOpsTableRow: React.FC<RowFunctionArgs<GitOpsAppGroupData>> = (props) => {\n  const { obj: appGroup } = props;\n  const {\n    name,\n    sync_status: syncStatuses = [],\n    environments: envs,\n    last_deployed: lastDeployed = [],\n    repo_url: repoUrl,\n  } = appGroup;\n  const { t } = useTranslation();\n  const syncedEnvs: string[] = syncStatuses.reduce(getMatchingEnvs(envs, 'Synced'), []);\n  const outOfSyncEnvs: string[] = syncStatuses.reduce(getMatchingEnvs(envs, 'OutOfSync'), []);\n  const unknownEnvs: string[] = syncStatuses.reduce(getMatchingEnvs(envs, 'Unknown'), []);\n  const latestDeployedTime = lastDeployed.reduce(\n    (leadingDeployedTime, deployedTime) =>\n      leadingDeployedTime < deployedTime ? deployedTime : leadingDeployedTime,\n    '',\n  );\n  const latestDeployedEnv = latestDeployedTime\n    ? envs[lastDeployed.indexOf(latestDeployedTime)]\n    : '';\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <Link to={`/environments/${appGroup.name}/overview?url=${appGroup.repo_url}`} title={name}>\n          {name}\n        </Link>\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1])}>\n        <ExternalLink href={repoUrl} additionalClassName={'co-break-all'}>\n          <span style={{ marginRight: 'var(--pf-v5-global--spacer--xs)' }}>\n            {routeDecoratorIcon(repoUrl, 12, t)}\n          </span>\n          <span style={{ marginRight: 'var(--pf-v5-global--spacer--xs)' }}>{repoUrl}</span>\n        </ExternalLink>\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[2], 'pf-v5-u-text-nowrap')}>\n        {syncStatuses.length > 0 ? (\n          <Flex className=\"gop-gitops-syncStatus\">\n            <GitOpsSyncFragment\n              tooltip={syncedEnvs.map((env) => (\n                <Split className=\"gop-gitops-tooltip-text\" hasGutter key={`${name}-${env}`}>\n                  <SplitItem>\n                    <GreenCheckCircleIcon />\n                  </SplitItem>\n                  <SplitItem isFilled>{env}</SplitItem>\n                  <SplitItem>{t('gitops-plugin~Synced')}</SplitItem>\n                </Split>\n              ))}\n              count={syncedEnvs.length}\n              icon=\"check\"\n            />\n            <GitOpsSyncFragment\n              tooltip={outOfSyncEnvs.map((env) => (\n                <Split className=\"gop-gitops-tooltip-text\" hasGutter key={`${name}-${env}`}>\n                  <SplitItem>\n                    <YellowExclamationTriangleIcon />\n                  </SplitItem>\n                  <SplitItem isFilled>{env}</SplitItem>\n                  <SplitItem>{t('gitops-plugin~OutOfSync')}</SplitItem>\n                </Split>\n              ))}\n              count={outOfSyncEnvs.length}\n              icon=\"exclamation\"\n            />\n            <GitOpsSyncFragment\n              tooltip={unknownEnvs.map((env) => (\n                <Split className=\"gop-gitops-tooltip-text\" hasGutter key={`${name}-${env}`}>\n                  <SplitItem>\n                    <GrayUnknownIcon />\n                  </SplitItem>\n                  <SplitItem isFilled>{env}</SplitItem>\n                  <SplitItem>{t('gitops-plugin~Unknown')}</SplitItem>\n                </Split>\n              ))}\n              count={unknownEnvs.length}\n              icon=\"unknown\"\n            />\n          </Flex>\n        ) : (\n          <span>{envs.join(', ')}</span>\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {latestDeployedTime !== '' ? (\n          <Flex>\n            <FlexItem className=\"gop-gitops-lastDeploymentTime\" spacer={{ default: 'spacerXs' }}>\n              <span>\n                <Timestamp timestamp={latestDeployedTime} />\n              </span>\n            </FlexItem>\n            <FlexItem>({latestDeployedEnv})</FlexItem>\n          </Flex>\n        ) : (\n          <span>-</span>\n        )}\n      </TableData>\n    </>\n  );\n};\n\nexport default GitOpsTableRow;\n","import * as React from 'react';\nimport { Flex, FlexItem, Tooltip } from '@patternfly/react-core';\nimport {\n  GreenCheckCircleIcon,\n  YellowExclamationTriangleIcon,\n  GrayUnknownIcon,\n} from '@console/shared';\n\ninterface SyncProps {\n  tooltip: any[];\n  count: number;\n  icon: string;\n}\n\nconst GitOpsSyncFragment: React.FC<SyncProps> = ({ tooltip, count, icon }) => {\n  let targetIcon: React.ReactNode;\n  if (icon === 'check') {\n    targetIcon = <GreenCheckCircleIcon />;\n  } else if (icon === 'exclamation') {\n    targetIcon = <YellowExclamationTriangleIcon />;\n  } else {\n    targetIcon = <GrayUnknownIcon />;\n  }\n  return (\n    <Flex flex={{ default: 'flex_1' }}>\n      <FlexItem>\n        {count > 0 ? (\n          <Tooltip isContentLeftAligned content={<div>{tooltip}</div>}>\n            <div>\n              {targetIcon} {count}\n            </div>\n          </Tooltip>\n        ) : (\n          <div>\n            {targetIcon} {count}\n          </div>\n        )}\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport default GitOpsSyncFragment;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeading, LoadingBox } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { ProjectModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { DevPreviewBadge } from '@console/shared';\nimport GitOpsList from './list/GitOpsList';\nimport { fetchAllAppGroups, getManifestURLs, getPipelinesBaseURI } from './utils/gitops-utils';\nimport useDefaultSecret from './utils/useDefaultSecret';\nimport './GitOpsListPage.scss';\n\nconst projectRes = { isList: true, kind: ProjectModel.kind, optional: true };\n\nconst GitOpsListPage: React.FC = () => {\n  const [appGroups, setAppGroups] = React.useState(null);\n  const [emptyStateMsg, setEmptyStateMsg] = React.useState(null);\n  const [namespaces, nsLoaded, nsError] = useK8sWatchResource<K8sResourceKind[]>(projectRes);\n  const [secretNS, secretName] = useDefaultSecret();\n  const baseURL = getPipelinesBaseURI(secretNS, secretName);\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const getAppGroups = async () => {\n      if (nsLoaded) {\n        const manifestURLs = (!nsError && getManifestURLs(namespaces)) || [];\n        const [allAppGroups, emptyMsg] = await fetchAllAppGroups(baseURL, manifestURLs, t);\n        if (ignore) return;\n        setAppGroups(allAppGroups);\n        setEmptyStateMsg(emptyMsg);\n      }\n    };\n\n    getAppGroups();\n\n    return () => {\n      ignore = true;\n    };\n  }, [baseURL, namespaces, nsError, nsLoaded, t]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('gitops-plugin~Environments')}</title>\n      </Helmet>\n      <PageHeading title={t('gitops-plugin~Environments')} badge={<DevPreviewBadge />} />\n      {!appGroups && !emptyStateMsg ? (\n        <LoadingBox />\n      ) : (\n        <>\n          <PageHeading className=\"co-catalog-page__description\">\n            {t(\"gitops-plugin~Select an application to view the environment it's deployed in.\")}\n          </PageHeading>\n          <GitOpsList appGroups={appGroups} emptyStateMsg={emptyStateMsg} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default GitOpsListPage;\n","import * as React from 'react';\n\ntype GiteaIconProps = {\n  style?: React.CSSProperties;\n  topology?: boolean;\n};\n\nconst GiteaIcon: React.FC<GiteaIconProps> = ({ style, topology }): React.ReactElement => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={topology ? '0 20 650 587' : '0 20 650 450'}\n      fill=\"currentColor\"\n      aria-hidden=\"true\"\n      role=\"img\"\n      width=\"1em\"\n      height=\"1em\"\n      style={style}\n    >\n      <path\n        d=\"m395.9 484.2-126.9-61c-12.5-6-17.9-21.2-11.8-33.8l61-126.9c6-12.5 21.2-17.9 33.8-11.8 17.2 8.3 27.1 13 27.1 13l-.1-109.2 16.7-.1.1 117.1s57.4 24.2 83.1 40.1c3.7 2.3 10.2 6.8 12.9 14.4 2.1 6.1 2 13.1-1 19.3l-61 126.9c-6.2 12.7-21.4 18.1-33.9 12z\"\n        style={{\n          fill: '#fff',\n        }}\n      />\n      <path\n        d=\"M622.7 149.8c-4.1-4.1-9.6-4-9.6-4s-117.2 6.6-177.9 8c-13.3.3-26.5.6-39.6.7v117.2c-5.5-2.6-11.1-5.3-16.6-7.9 0-36.4-.1-109.2-.1-109.2-29 .4-89.2-2.2-89.2-2.2s-141.4-7.1-156.8-8.5c-9.8-.6-22.5-2.1-39 1.5-8.7 1.8-33.5 7.4-53.8 26.9C-4.9 212.4 6.6 276.2 8 285.8c1.7 11.7 6.9 44.2 31.7 72.5 45.8 56.1 144.4 54.8 144.4 54.8s12.1 28.9 30.6 55.5c25 33.1 50.7 58.9 75.7 62 63 0 188.9-.1 188.9-.1s12 .1 28.3-10.3c14-8.5 26.5-23.4 26.5-23.4S547 483 565 451.5c5.5-9.7 10.1-19.1 14.1-28 0 0 55.2-117.1 55.2-231.1-1.1-34.5-9.6-40.6-11.6-42.6zM125.6 353.9c-25.9-8.5-36.9-18.7-36.9-18.7S69.6 321.8 60 295.4c-16.5-44.2-1.4-71.2-1.4-71.2s8.4-22.5 38.5-30c13.8-3.7 31-3.1 31-3.1s7.1 59.4 15.7 94.2c7.2 29.2 24.8 77.7 24.8 77.7s-26.1-3.1-43-9.1zm300.3 107.6s-6.1 14.5-19.6 15.4c-5.8.4-10.3-1.2-10.3-1.2s-.3-.1-5.3-2.1l-112.9-55s-10.9-5.7-12.8-15.6c-2.2-8.1 2.7-18.1 2.7-18.1L322 273s4.8-9.7 12.2-13c.6-.3 2.3-1 4.5-1.5 8.1-2.1 18 2.8 18 2.8L467.4 315s12.6 5.7 15.3 16.2c1.9 7.4-.5 14-1.8 17.2-6.3 15.4-55 113.1-55 113.1z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n      <path\n        d=\"M326.8 380.1c-8.2.1-15.4 5.8-17.3 13.8-1.9 8 2 16.3 9.1 20 7.7 4 17.5 1.8 22.7-5.4 5.1-7.1 4.3-16.9-1.8-23.1l24-49.1c1.5.1 3.7.2 6.2-.5 4.1-.9 7.1-3.6 7.1-3.6 4.2 1.8 8.6 3.8 13.2 6.1 4.8 2.4 9.3 4.9 13.4 7.3.9.5 1.8 1.1 2.8 1.9 1.6 1.3 3.4 3.1 4.7 5.5 1.9 5.5-1.9 14.9-1.9 14.9-2.3 7.6-18.4 40.6-18.4 40.6-8.1-.2-15.3 5-17.7 12.5-2.6 8.1 1.1 17.3 8.9 21.3 7.8 4 17.4 1.7 22.5-5.3 5-6.8 4.6-16.3-1.1-22.6 1.9-3.7 3.7-7.4 5.6-11.3 5-10.4 13.5-30.4 13.5-30.4.9-1.7 5.7-10.3 2.7-21.3-2.5-11.4-12.6-16.7-12.6-16.7-12.2-7.9-29.2-15.2-29.2-15.2s0-4.1-1.1-7.1c-1.1-3.1-2.8-5.1-3.9-6.3 4.7-9.7 9.4-19.3 14.1-29-4.1-2-8.1-4-12.2-6.1-4.8 9.8-9.7 19.7-14.5 29.5-6.7-.1-12.9 3.5-16.1 9.4-3.4 6.3-2.7 14.1 1.9 19.8l-24.6 50.4z\"\n        style={{\n          fill: 'currentColor',\n        }}\n      />\n    </svg>\n  );\n};\n\nexport default GiteaIcon;\n","import * as React from 'react';\nimport { BitbucketIcon } from '@patternfly/react-icons/dist/esm/icons/bitbucket-icon';\nimport { GitAltIcon } from '@patternfly/react-icons/dist/esm/icons/git-alt-icon';\nimport { GithubIcon } from '@patternfly/react-icons/dist/esm/icons/github-icon';\nimport { GitlabIcon } from '@patternfly/react-icons/dist/esm/icons/gitlab-icon';\nimport { TFunction } from 'i18next';\nimport { GitProvider } from '@console/git-service/src';\nimport CheIcon from './CheIcon';\nimport GiteaIcon from './GiteaIcon';\nimport { detectGitType } from './import-validation-utils';\n\nexport const routeDecoratorIcon = (\n  routeURL: string,\n  radius: number,\n  t: TFunction,\n  cheEnabled?: boolean,\n  cheIconURL?: string,\n): React.ReactElement => {\n  if (cheEnabled && routeURL) {\n    return cheIconURL ? (\n      <image xlinkHref={cheIconURL} width={radius} height={radius} />\n    ) : (\n      <CheIcon style={{ fontSize: radius }} />\n    );\n  }\n  switch (detectGitType(routeURL)) {\n    case GitProvider.INVALID:\n      // Not a valid url and thus not safe to use\n      return null;\n    case GitProvider.GITHUB:\n      return <GithubIcon style={{ fontSize: radius }} title={t('devconsole~Edit source code')} />;\n    case GitProvider.BITBUCKET:\n      return (\n        <BitbucketIcon style={{ fontSize: radius }} title={t('devconsole~Edit source code')} />\n      );\n    case GitProvider.GITLAB:\n      return <GitlabIcon style={{ fontSize: radius }} title={t('devconsole~Edit source code')} />;\n    case GitProvider.GITEA:\n      return <GiteaIcon style={{ fontSize: radius }} topology />;\n    default:\n      return <GitAltIcon style={{ fontSize: radius }} title={t('devconsole~Edit source code')} />;\n  }\n};\n","import * as React from 'react';\n\nconst CheIcon: React.FC<React.HTMLProps<SVGElement>> = ({ style }): React.ReactElement => {\n  return (\n    <svg height=\"1em\" width=\"1em\" version=\"1.1\" viewBox=\"0 0 47 57\" style={style}>\n      <g fillRule=\"evenodd\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\">\n        <path\n          d=\"M0.032227,30.88l-0.032227-17.087,23.853-13.793,23.796,13.784-14.691,8.51-9.062-5.109-23.864,13.695z\"\n          fill=\"#fdb940\"\n        />\n        <path\n          d=\"M0,43.355l23.876,13.622,23.974-13.937v-16.902l-23.974,13.506-23.876-13.506v17.217z\"\n          fill=\"#525c86\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default CheIcon;\n","import { TFunction } from 'i18next';\nimport * as _ from 'lodash';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { GitOpsManifestData, GitOpsAppGroupData } from './gitops-types';\n\nexport const getManifestURLs = (namespaces: K8sResourceKind[]): string[] => {\n  const annotation = 'app.openshift.io/vcs-uri';\n  return _.uniq(\n    namespaces\n      .filter((ns) => {\n        return !!ns.metadata?.annotations?.[annotation];\n      })\n      .map((ns) => {\n        return ns.metadata?.annotations?.[annotation];\n      }),\n  );\n};\n\nexport const getApplicationsListBaseURI = () => {\n  return `/api/gitops/applications`;\n};\n\nexport const fetchAppGroups = async (\n  baseURL: string,\n  manifestURL: string,\n): Promise<GitOpsAppGroupData[]> => {\n  let data: GitOpsManifestData;\n  try {\n    const newListApi = getApplicationsListBaseURI();\n    data = await coFetchJSON(`${newListApi}?url=${manifestURL}`);\n  } catch (err) {\n    try {\n      data = await coFetchJSON(`${baseURL}&url=${manifestURL}`);\n    } catch {} // eslint-disable-line no-empty\n    // Ignore and let empty data be handled by fetchAllAppGroups\n  }\n  return data?.applications ?? [];\n};\n\nexport const fetchAllAppGroups = async (baseURL: string, manifestURLs: string[], t: TFunction) => {\n  let emptyMsg: string = null;\n  let allAppGroups: GitOpsAppGroupData[] = null;\n  if (baseURL) {\n    if (_.isEmpty(manifestURLs)) {\n      emptyMsg = t('gitops-plugin~No GitOps manifest URLs found');\n    } else {\n      try {\n        allAppGroups = _.sortBy(\n          _.flatten(\n            await Promise.all(\n              _.map(manifestURLs, (manifestURL) => fetchAppGroups(baseURL, manifestURL)),\n            ),\n          ),\n          ['name'],\n        );\n      } catch {\n        emptyMsg = t('gitops-plugin~Error cannot retrieve applications');\n        return [allAppGroups, emptyMsg];\n      }\n      if (_.isEmpty(allAppGroups)) {\n        emptyMsg = t('gitops-plugin~No Application groups found');\n      }\n    }\n  }\n  return [allAppGroups, emptyMsg];\n};\n\nexport const getEnvData = async (v2EnvURI: string, envURI: string, env: string, appURI: string) => {\n  let data;\n  try {\n    data = await coFetchJSON(`${v2EnvURI}/${env}${appURI}`);\n  } catch {\n    try {\n      data = await coFetchJSON(`${envURI}/${env}${appURI}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n  return data;\n};\n\nexport const getPipelinesBaseURI = (secretNS: string, secretName: string) => {\n  return secretNS && secretName\n    ? `/api/gitops/pipelines?secretNS=${secretNS}&secretName=${secretName}`\n    : undefined;\n};\n\nexport const getArgoCDFilteredAppsURI = (argocdBaseUri: string, appGroupName: string) => {\n  return argocdBaseUri && appGroupName\n    ? `${argocdBaseUri}/applications?labels=app.kubernetes.io%252Fname%253D${appGroupName}`\n    : undefined;\n};\n\nexport const getApplicationsBaseURI = (\n  appName: string,\n  secretNS: string,\n  secretName: string,\n  manifestURL: string,\n) => {\n  return secretNS && secretName\n    ? `/application/${appName}?secretNS=${secretNS}&secretName=${secretName}&url=${manifestURL}&app=${appName}`\n    : undefined;\n};\n","import * as React from 'react';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  EmptyStateBody,\n  EmptyStateHeader,\n} from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport './GitOpsEmptyState.scss';\n\ninterface GitOpsEmptyStateProps {\n  emptyStateMsg: string;\n}\n\nconst GitOpsEmptyState: React.FC<GitOpsEmptyStateProps> = ({ emptyStateMsg }) => (\n  <EmptyState variant={EmptyStateVariant.full}>\n    <EmptyStateHeader icon={<EmptyStateIcon icon={CubesIcon} />} />\n    <EmptyStateBody>{emptyStateMsg}</EmptyStateBody>\n  </EmptyState>\n);\n\nexport default GitOpsEmptyState;\n","import * as _ from 'lodash';\n// FIXME upgrading redux types is causing many errors at this time\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useSelector } from 'react-redux';\nimport { userStateToProps } from '@console/internal/reducers/ui';\n\nconst useDefaultSecret = () => {\n  const { user } = useSelector(userStateToProps);\n  const userName = _.replace(user?.metadata?.name ?? '', /[^a-zA-Z0-9-]/g, '');\n  const defaultSecret = userName\n    ? [`pipelines-${userName}-github`, `${userName}-github-token`]\n    : [];\n  return defaultSecret;\n};\n\nexport default useDefaultSecret;\n"],"sourceRoot":""}