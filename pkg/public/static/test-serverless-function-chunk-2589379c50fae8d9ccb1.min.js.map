{"version":3,"sources":["webpack:///./packages/knative-plugin/src/components/test-function/TestFunction.tsx","webpack:///./packages/knative-plugin/src/components/test-function/TestFunctionModal.tsx","webpack:///./packages/knative-plugin/src/components/test-function/RequestPane.tsx","webpack:///./packages/knative-plugin/src/components/test-function/ResponsePane.tsx","webpack:///./packages/knative-plugin/src/components/test-function/TestFunctionController.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/useConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/patchConsoleOperatorConfig.ts","webpack:///./packages/console-shared/src/components/cluster-configuration/FormLayout.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/LoadError.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/SaveStatus.tsx","webpack:///./packages/console-shared/src/components/cluster-configuration/index.ts","webpack:///./packages/knative-plugin/src/components/test-function/types.ts","webpack:///./packages/knative-plugin/src/components/test-function/utils.ts"],"names":["service","cancel","close","svcName","data","metadata","name","svcNamespace","namespace","initialValues","request","format","CloudEvent","contentType","isAdvancedSettingsExpanded","type","source","customHeaders","body","response","status","statusCode","header","onSubmit","values","action","post","then","res","catch","err","setFieldValue","message","setStatus","error","onReset","initialStatus","formikProps","props","t","handleSubmit","isSubmitting","currentView","setCurrentView","Request","id","headingLevel","size","footer","Response","variant","isDisabled","onClick","small","isOpen","className","onClose","position","NameValueEditorComponent","loader","c","NameValueEditor","showCustomHeaders","setShowCustomHeaders","invokeFormat","isExpanded","setIsExpanded","formatItems","HTTP","contentTypeItems","value","label","disabled","items","dataTest","title","fullWidth","required","options","toggleOnSelection","hideClearButton","toggleText","onToggle","_event","expanded","text","placeholder","filteredArray","filter","arr","every","element","length","checkCustomHeadersIsEmpty","nameValuePairs","nameString","valueString","addString","readOnly","allowSorting","updateParentData","updatedNameValuePairs","forEach","splice","minHeight","showSamples","showShortcuts","showMiniMap","language","color","Object","keys","textCollapsed","textExpanded","entries","map","headerName","headerValues","key","Controller","loaded","obj","TestFunctionController","serverlessResources","kind","isList","prop","resources","testFunctionModalLauncher","groupVersionKind","resource","url","headers","Accept","JSON","stringify","children","isHorizontal","isWidthLimited","form","modifiers","horizontal","limitWidth","isInline","toString","SaveStatus","InvokeFormat","ModalPanel","getcurrentLanguage","startsWith","generatePayload","cloudEventHeaders","httpHeaders","additionalHeaders","reduce","acc","allowInsecure","parseResponse","clearResponseValues"],"mappings":"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","file":"test-serverless-function-chunk-2589379c50fae8d9ccb1.min.js","sourcesContent":["import * as React from 'react';\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { ServiceKind } from '../../types';\nimport TestFunctionModal from './TestFunctionModal';\nimport { InvokeFormat, TestFunctionFormikValues } from './types';\nimport { generatePayload, parseResponse } from './utils';\n\nexport interface TestFunctionProps {\n  service: ServiceKind;\n  cancel?: () => void;\n  close?: () => void;\n}\n\nconst TestFunction: React.FC<TestFunctionProps> = ({ service, cancel, close }) => {\n  const svcName = service.data.metadata.name;\n  const svcNamespace = service.data.metadata.namespace;\n  const initialValues: TestFunctionFormikValues = {\n    request: {\n      format: InvokeFormat.CloudEvent,\n      contentType: 'application/json',\n      isAdvancedSettingsExpanded: false,\n      type: '',\n      source: '',\n      customHeaders: [[]],\n      body: {\n        data: '{\"message\": \"Hello World!\"}',\n      },\n    },\n    response: {\n      status: '',\n      statusCode: null,\n      header: {},\n      body: '',\n    },\n  };\n\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    coFetchJSON\n      .post(\n        `/api/console/knative/namespaces/${svcNamespace}/services/${svcName}/invoke`,\n        generatePayload(values),\n      )\n      .then((res) => {\n        parseResponse(res, action);\n      })\n      .catch((err) => {\n        action.setFieldValue('response.status', err.message);\n        action.setFieldValue('response.statusCode', 500);\n        action.setFieldValue('response.body', `{ \"error\": \"${err.message}\" }`);\n        action.setStatus({ error: err.message });\n      });\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n    >\n      {(formikProps) => (\n        <TestFunctionModal {...formikProps} cancel={cancel} service={service} close={close} />\n      )}\n    </Formik>\n  );\n};\nexport default TestFunction;\n","import * as React from 'react';\nimport { Button, Modal, ModalVariant, Title, TitleSizes } from '@patternfly/react-core';\nimport { FormikProps, FormikValues } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { ModalComponentProps } from '@console/internal/components/factory/modal';\nimport { ServiceKind } from '../../types';\nimport RequestPane from './RequestPane';\nimport ResponsePane from './ResponsePane';\nimport { ModalPanel } from './types';\nimport { clearResponseValues } from './utils';\n\nimport './TestFunctionModal.scss';\n\ninterface TestFunctionModalProps {\n  service: ServiceKind;\n}\n\ntype Props = FormikProps<FormikValues> & TestFunctionModalProps & ModalComponentProps;\n\nconst TestFunctionModal: React.FC<Props> = (props) => {\n  const { t } = useTranslation();\n  const { handleSubmit, cancel, close, isSubmitting } = props;\n  const [currentView, setCurrentView] = React.useState(ModalPanel.Request);\n  const header = (\n    <>\n      <Title id=\"modal-custom-header-label\" headingLevel=\"h1\" size={TitleSizes['2xl']}>\n        {t(`knative-plugin~Test Serverless Function`)}\n      </Title>\n    </>\n  );\n\n  const footer = (\n    <>\n      {currentView === ModalPanel.Request ? (\n        <form\n          onSubmit={() => {\n            handleSubmit();\n            setCurrentView(ModalPanel.Response);\n          }}\n        >\n          <Button type=\"submit\" variant=\"primary\" data-test=\"test-action\" isDisabled={isSubmitting}>\n            {t('knative-plugin~Test')}\n          </Button>\n          &nbsp; &nbsp;\n          <Button type=\"button\" variant=\"secondary\" data-test=\"cancel-action\" onClick={cancel}>\n            {t('knative-plugin~Cancel')}\n          </Button>\n        </form>\n      ) : (\n        <>\n          <Button\n            type=\"button\"\n            variant=\"primary\"\n            data-test=\"back-action\"\n            onClick={() => {\n              clearResponseValues(props);\n              setCurrentView(ModalPanel.Request);\n            }}\n          >\n            {t('knative-plugin~Back')}\n          </Button>\n          &nbsp;\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            data-test=\"close-action\"\n            onClick={() => {\n              clearResponseValues(props);\n              close();\n            }}\n          >\n            {t('knative-plugin~Close')}\n          </Button>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen\n      header={header}\n      className=\"kn-test-sf-modal\"\n      onClose={close}\n      position=\"top\"\n      footer={footer}\n      data-test=\"test-serverless-function\"\n    >\n      <div className=\"kn-test-sf-modal__body\">\n        {currentView === ModalPanel.Request ? (\n          <RequestPane {...props} />\n        ) : (\n          <ResponsePane {...props} />\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default TestFunctionModal;\n","import * as React from 'react';\nimport { Button, TextInputTypes, ExpandableSection } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport { FormikProps, FormikValues } from 'formik/dist/types';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport {\n  DropdownField,\n  InputField,\n  SingleTypeaheadField,\n  SelectInputOption,\n  CodeEditorField,\n} from '@console/shared/src/components';\nimport { FormLayout } from '@console/shared/src/components/cluster-configuration';\nimport { InvokeFormat } from './types';\nimport { getcurrentLanguage } from './utils';\n\nimport './TestFunctionModal.scss';\n\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() =>\n      import('@console/internal/components/utils/name-value-editor').then((c) => c.NameValueEditor)\n    }\n    {...props}\n  />\n);\n\nconst RequestPane: React.FC<FormikProps<FormikValues>> = ({ setFieldValue, values }) => {\n  const { t } = useTranslation();\n  const [showCustomHeaders, setShowCustomHeaders] = React.useState(false);\n  const {\n    request: { customHeaders, format: invokeFormat, contentType, isAdvancedSettingsExpanded },\n  } = values;\n  const [isExpanded, setIsExpanded] = React.useState<boolean>(isAdvancedSettingsExpanded);\n\n  const onToggle = (_event, expanded: boolean) => {\n    setIsExpanded(expanded);\n    setFieldValue('request.isAdvancedSettingsExpanded', expanded);\n  };\n\n  const formatItems = {\n    [InvokeFormat.CloudEvent]: t('knative-plugin~CloudEvent'),\n    [InvokeFormat.HTTP]: t('knative-plugin~HTTP'),\n  };\n\n  const contentTypeItems: SelectInputOption[] = [\n    { value: 'application/json', label: t('knative-plugin~application/json'), disabled: false },\n    { value: 'application/yaml', label: t('knative-plugin~application/yaml'), disabled: false },\n  ];\n  const handleNameValuePairs = ({ nameValuePairs: updatedNameValuePairs }) => {\n    /* Removing the extra element from arrays that are auto-generated */\n    updatedNameValuePairs.forEach((arr) => arr.length >= 3 && arr.splice(2, 1));\n\n    setFieldValue(`request.customHeaders`, updatedNameValuePairs);\n  };\n\n  const checkCustomHeadersIsEmpty = () => {\n    let filteredArray = [];\n    if (invokeFormat === InvokeFormat.HTTP) {\n      filteredArray = customHeaders.filter((arr) => !arr.every((element) => element === ''));\n    } else if (invokeFormat === InvokeFormat.CloudEvent) {\n      filteredArray = customHeaders.filter((arr) => !arr.every((element) => element === ''));\n    }\n    return filteredArray.length === 0;\n  };\n\n  return (\n    <>\n      <FormLayout>\n        <DropdownField\n          label={t('knative-plugin~Format')}\n          name=\"request.format\"\n          items={formatItems}\n          dataTest=\"invoke-format-dropdown\"\n          title={t(`knative-plugin~${invokeFormat}`)}\n          fullWidth\n          required\n        />\n        <SingleTypeaheadField\n          name=\"request.contentType\"\n          label={t('knative-plugin~Content-Type')}\n          options={contentTypeItems}\n          toggleOnSelection\n          hideClearButton\n          required\n        />\n      </FormLayout>\n      <div className=\"kn-test-sf-modal-request__advanced-settings\">\n        <ExpandableSection\n          toggleText={t('knative-plugin~Advanced Settings')}\n          onToggle={onToggle}\n          isExpanded={isExpanded}\n          data-test=\"advanced-settings\"\n        >\n          <FormLayout>\n            <InputField\n              type={TextInputTypes.text}\n              name={`request.type`}\n              label={t('knative-plugin~Type')}\n              data-test=\"request-type\"\n              placeholder=\"boson.fn\"\n            />\n            <InputField\n              type={TextInputTypes.text}\n              name={`request.source`}\n              label={t('knative-plugin~Source')}\n              data-test=\"request-source\"\n              placeholder=\"/boson/fn\"\n            />\n          </FormLayout>\n\n          <div className=\"kn-test-sf-modal-request__custom-headers\">\n            {showCustomHeaders || !checkCustomHeadersIsEmpty() ? (\n              <NameValueEditorComponent\n                nameValuePairs={customHeaders}\n                nameString={t('knative-plugin~Name')}\n                valueString={t('knative-plugin~Value')}\n                addString={t('knative-plugin~Add headers')}\n                readOnly={false}\n                allowSorting={false}\n                updateParentData={handleNameValuePairs}\n              />\n            ) : (\n              <Button\n                className=\"pf-m-link--align-left\"\n                data-test=\"add-optional-header\"\n                onClick={() => setShowCustomHeaders(true)}\n                type=\"button\"\n                variant=\"link\"\n              >\n                <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n                {t('knative-plugin~Add optional headers')}\n              </Button>\n            )}\n          </div>\n        </ExpandableSection>\n      </div>\n      <div className=\"kn-test-sf-modal__editor\">\n        <CodeEditorField\n          name=\"request.body.data\"\n          minHeight=\"34vh\"\n          showSamples={false}\n          showShortcuts={false}\n          showMiniMap={false}\n          language={getcurrentLanguage(contentType)}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default RequestPane;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core/dist/dynamic/components/Alert';\nimport { Label } from '@patternfly/react-core/dist/dynamic/components/Label';\nimport { FormikProps, FormikValues } from 'formik/dist/types';\nimport { useTranslation } from 'react-i18next';\nimport { ExpandCollapse, Loading } from '@console/internal/components/utils';\nimport { CodeEditorField } from '@console/shared/src/components';\n\nimport './TestFunctionModal.scss';\n\ntype Response = {\n  status: string;\n  statusCode: number;\n  header: Record<string, string[]>;\n  body: string;\n};\n\ntype ResponsePaneFormikValues = {\n  response?: Response | undefined;\n};\n\nconst ResponsePane: React.FC<FormikProps<FormikValues & ResponsePaneFormikValues>> = ({\n  values,\n}) => {\n  const { t } = useTranslation();\n  const { statusCode, header } = values.response;\n\n  return (\n    <>\n      <div className=\"kn-test-sf-modal-response__notification\">\n        {statusCode === null ? (\n          <Alert\n            variant=\"info\"\n            title={t('knative-plugin~Waiting for response')}\n            data-test=\"alert-wait\"\n          />\n        ) : statusCode === 200 ? (\n          <Alert\n            variant=\"success\"\n            title={t('knative-plugin~The Test was Successful')}\n            data-test=\"alert-success\"\n          >\n            <div>\n              {' '}\n              <strong>{t('knative-plugin~Response Status Code: ')}</strong>\n              <Label color=\"green\">\n                <strong>{statusCode}</strong>\n              </Label>\n            </div>\n          </Alert>\n        ) : (\n          <Alert\n            variant=\"danger\"\n            title={t('knative-plugin~An error occurred')}\n            data-test=\"alert-danger\"\n          >\n            <div>\n              {' '}\n              <strong>{t('knative-plugin~Response Status Code: ')}</strong>\n              <Label color=\"red\">\n                <strong>{statusCode}</strong>\n              </Label>\n            </div>\n          </Alert>\n        )}\n      </div>\n\n      {Object.keys(header).length > 0 && (\n        <div className=\"kn-test-sf-modal-response__headers\">\n          <ExpandCollapse\n            textCollapsed={t('knative-plugin~Show Response Headers')}\n            textExpanded={t('knative-plugin~Hide Response Headers')}\n          >\n            <div className=\"header-section\">\n              {Object.entries(header).map(([headerName, headerValues]) =>\n                headerValues.map((value) => (\n                  <div className=\"header-row\" key={`${headerName}-${value}`}>\n                    <span className=\"header-name\">{headerName}:</span>\n                    <span className=\"header-value\">{value}</span>\n                  </div>\n                )),\n              )}\n            </div>\n          </ExpandCollapse>\n        </div>\n      )}\n\n      <div className=\"kn-test-sf-modal__editor\">\n        {statusCode !== null ? (\n          <CodeEditorField\n            name=\"response.body\"\n            minHeight=\"34vh\"\n            showSamples={false}\n            showShortcuts={false}\n            showMiniMap={false}\n            language=\"json\"\n          />\n        ) : (\n          <Loading className=\"kn-test-sf-modal-response__loading\" />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ResponsePane;\n","import * as React from 'react';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport { Firehose } from '@console/internal/components/utils';\nimport { ServiceModel } from '../../models';\nimport { ServiceKind } from '../../types';\nimport TestFunction from './TestFunction';\n\ntype ControllerProps = {\n  loaded?: boolean;\n  obj: ServiceKind;\n};\n\nconst Controller: React.FC<ControllerProps> = (props) => {\n  const { loaded, obj } = props;\n  return loaded ? <TestFunction {...props} service={obj} /> : null;\n};\n\ntype TestFunctionControllerProps = {\n  obj: ServiceKind;\n};\n\nconst TestFunctionController: React.FC<TestFunctionControllerProps> = (props) => {\n  const { obj } = props;\n\n  const serverlessResources = [\n    {\n      kind: ServiceModel.kind,\n      isList: false,\n      prop: `obj`,\n      namespace: obj.metadata.namespace,\n      name: obj.metadata.name,\n    },\n  ];\n\n  return (\n    <Firehose resources={serverlessResources}>\n      <Controller {...props} />\n    </Firehose>\n  );\n};\n\ntype Props = TestFunctionControllerProps & ModalComponentProps;\n\nexport const testFunctionModalLauncher = createModalLauncher<Props>(TestFunctionController, false);\n\nexport default TestFunctionController;\n","import { getGroupVersionKindForModel } from '@console/dynamic-plugin-sdk/src/lib-core';\nimport { useK8sWatchResource } from '@console/dynamic-plugin-sdk/src/utils/k8s/hooks/useK8sWatchResource';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\nconst useConsoleOperatorConfig = <R extends K8sResourceKind>() => {\n  return useK8sWatchResource<R>({\n    groupVersionKind: getGroupVersionKindForModel(ConsoleOperatorConfigModel),\n    isList: false,\n    name: CONSOLE_OPERATOR_CONFIG_NAME,\n  });\n};\n\nexport default useConsoleOperatorConfig;\n","import { consoleFetchJSON } from '@console/dynamic-plugin-sdk/src/utils/fetch/console-fetch';\nimport { ConsoleOperatorConfigModel } from '@console/internal/models';\nimport { K8sResourceKind, resourceURL } from '@console/internal/module/k8s';\nimport { CONSOLE_OPERATOR_CONFIG_NAME } from '../../constants/resource';\n\n/**\n * JSON Merge Patch instead of JSON patch to update also properties that doesn't exist yet.\n *\n * See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment\n */\nconst patchConsoleOperatorConfig = <R extends K8sResourceKind>(resource: R): Promise<R> => {\n  const url = resourceURL(ConsoleOperatorConfigModel, { name: CONSOLE_OPERATOR_CONFIG_NAME });\n  return consoleFetchJSON(url, 'PATCH', {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/merge-patch+json;charset=UTF-8',\n    },\n    body: JSON.stringify(resource),\n  });\n};\n\nexport default patchConsoleOperatorConfig;\n","import * as React from 'react';\nimport { FormProps } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\n\nexport type FormLayoutProps = Pick<FormProps, 'children' | 'isHorizontal' | 'isWidthLimited'>;\n\nconst FormLayout: React.FC<FormLayoutProps> = ({\n  children,\n  isHorizontal = false,\n  isWidthLimited = true,\n}) => {\n  return (\n    <div\n      className={css(\n        formStyles.form,\n        isHorizontal && formStyles.modifiers.horizontal,\n        isWidthLimited && formStyles.modifiers.limitWidth,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default FormLayout;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst LoadError: React.FC<{ error?: Error }> = ({ error }) => {\n  const { t } = useTranslation();\n  if (!error) {\n    return null;\n  }\n  return (\n    <Alert variant=\"warning\" isInline title={t('console-shared~Could not load configuration.')}>\n      {error.message?.toString?.() || error.toString?.()}\n    </Alert>\n  );\n};\n\nexport default LoadError;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type SaveStatusProps = {\n  status: 'pending' | 'in-progress' | 'successful' | 'error';\n  error?: Error;\n};\n\nexport const SaveStatus: React.FC<SaveStatusProps> = ({ status, error }) => {\n  const { t } = useTranslation();\n  if (status === 'successful') {\n    return (\n      <Alert\n        variant=\"success\"\n        data-test=\"success-alert\"\n        isInline\n        title={t('console-shared~Saved.')}\n      >\n        {t(\n          'console-shared~This config update requires a console rollout, this can take up to a minute and require a browser refresh.',\n        )}\n      </Alert>\n    );\n  }\n  if (status === 'error') {\n    return (\n      <Alert variant=\"danger\" isInline title={t('console-shared~Could not save configuration.')}>\n        {error?.message?.toString?.() || error?.toString?.()}\n      </Alert>\n    );\n  }\n  return null;\n};\n","export { useDebounceCallback } from '../../hooks/debounce';\n\nexport { default as useConsoleOperatorConfig } from './useConsoleOperatorConfig';\nexport { default as patchConsoleOperatorConfig } from './patchConsoleOperatorConfig';\nexport { default as FormLayout } from './FormLayout';\nexport { default as LoadError } from './LoadError';\nexport * from './SaveStatus';\nexport * from './path-utils';\n","export enum InvokeFormat {\n  HTTP = 'HTTP',\n  CloudEvent = 'CloudEvent',\n}\n\nexport enum ModalPanel {\n  Request = 'Request',\n  Response = 'Response',\n}\n\nexport type TestFunctionFormikValues = {\n  request: {\n    format: InvokeFormat;\n    contentType: string;\n    isAdvancedSettingsExpanded: boolean;\n    type: string;\n    source: string;\n    customHeaders: string[][];\n    body: {\n      data: string;\n    };\n  };\n  response: {\n    status: string;\n    statusCode: number;\n    header: Record<string, string[]>;\n    body: string;\n  };\n};\n","import { FormikHelpers, FormikValues } from 'formik/dist/types';\nimport { InvokeFormat } from './types';\n\nexport const getcurrentLanguage = (contentType: string) => {\n  if (contentType.startsWith('application/json')) {\n    return 'json';\n  }\n  if (contentType.startsWith('application/yaml')) {\n    return 'yaml';\n  }\n  return 'plaintext';\n};\n\nexport const generatePayload = (values: FormikValues) => {\n  const { format, contentType, customHeaders, type, source, body } = values.request;\n\n  const cloudEventHeaders = {\n    'ce-source': [...(type ? [type] : ['boson.fn'])],\n    'ce-type': [...(source ? [source] : ['/boson/fn'])],\n  };\n\n  const httpHeaders = {\n    type: [...(type ? [type] : ['boson.fn'])],\n    source: [...(source ? [source] : ['/boson/fn'])],\n  };\n\n  const additionalHeaders = customHeaders.reduce((acc, [key, value]) => {\n    if (key !== '' && value) {\n      acc[key] = [...(acc[key] ?? []), value];\n    }\n    return acc;\n  }, {});\n\n  const payload = {\n    allowInsecure: true,\n    body: {\n      'invoke-header': {\n        ...(format === InvokeFormat.CloudEvent ? cloudEventHeaders : httpHeaders),\n        ...additionalHeaders,\n      },\n      'invoke-query': {},\n      'invoke-message': body.data,\n      'invoke-format': format === InvokeFormat.CloudEvent ? 'ce' : 'http',\n      'invoke-contentType': contentType,\n    },\n  };\n\n  return payload;\n};\n\nexport const parseResponse = (response: any, action: FormikHelpers<FormikValues>) => {\n  const { setFieldValue, setStatus } = action;\n  const { status, statusCode, header, body } = response;\n\n  if (statusCode === 200) {\n    setFieldValue('response.status', status);\n    setFieldValue('response.statusCode', 200);\n    setFieldValue('response.header', header);\n    setFieldValue('response.body', body);\n    setStatus({ error: '' });\n  } else {\n    setStatus({ error: body });\n    setFieldValue('response.body', `{ \"error\": ${body} }`);\n    setFieldValue('response.status', status);\n    setFieldValue('response.statusCode', statusCode);\n  }\n};\n\nexport const clearResponseValues = (props: FormikHelpers<FormikValues>) => {\n  const { setFieldValue } = props;\n  setFieldValue('response.body', '');\n  setFieldValue('response.statusCode', null);\n  setFieldValue('response.header', {});\n  setFieldValue('response.status', '');\n};\n"],"sourceRoot":""}