{"version":3,"sources":["webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-set/body.tsx","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-set/header.tsx","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-set/request.ts","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-set/types.ts","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-set/state.ts","webpack:///./packages/local-storage-operator-plugin/src/components/local-volume-set/create-local-volume-set.tsx","webpack:///./packages/local-storage-operator-plugin/src/constants/index.ts","webpack:///./packages/local-storage-operator-plugin/src/utils/index.ts","webpack:///./packages/local-storage-operator-plugin/src/resources.ts","webpack:///./packages/local-storage-operator-plugin/src/components/common/form-footer.tsx","webpack:///./packages/local-storage-operator-plugin/src/components/tables/nodes-table.tsx"],"names":["LocalVolumeSetBody","dispatch","state","taintsFilter","diskModeOptions","allNodesHelpTxt","lvsNameHelpTxt","deviceTypeOptions","fsTypeOptions","t","diskDropdownOptions","INTEGER_MAX_REGEX","activeMinDiskSize","setMinActiveState","activeMaxDiskSize","setMaxActiveState","validMinDiskSize","test","minDiskSize","validMaxDiskSize","maxDiskSize","validMaxDiskLimit","maxDiskLimit","invalidMinGreaterThanMax","Number","toggleShowNodesList","type","value","lvsIsSelectNodes","diskTypeValidationError","validationError","diskType","All","title","variant","info","HDD","getDiskTypeValidationError","label","isRequired","fieldId","text","id","volumeSetName","onChange","_event","name","className","storageClassName","placeholder","component","h3","nodes","lvsAllNodes","length","count","description","checked","showTitle","kind","ListComponent","customData","onRowSelected","selectedNodes","filteredNodes","map","preSelectedNodes","lvsSelectNodes","hasOnSelect","dropDownClassName","items","selectedKey","danger","isPlain","toggleText","diskMode","mode","options","DISK","PART","MPATH","selectedValues","defaultSelected","FILESYSTEM","fsType","content","isVisible","trigger","validated","onFocus","onBlur","size","diskSizeUnit","unit","maxLimit","LocalVolumeSetHeader","getLocalVolumeSetRequestData","ns","toleration","deviceTypes","deviceType","includes","RawDisk","Partition","Multipath","getDeviceTypes","requestData","apiVersion","metadata","namespace","spec","volumeMode","deviceInclusionSpec","nodeSelector","nodeSelectorTerms","matchExpressions","key","operator","values","tolerations","maxDeviceCount","minSize","maxSize","property","deviceMechanicalProperties","DiskType","DiskMechanicalProperties","initialState","isValidDiskSize","BLOCK","reducer","action","Object","assign","appName","resourcePath","nodesData","nodesLoaded","nodesLoadError","handlePromise","inProgress","errorMessage","filter","h1","noValidate","onSubmit","event","preventDefault","lvsNodes","nodesByHostNameLabel","then","push","catch","cancelUrl","disableNext","trim","getDisabledCondition","diskModeDropdownItems","freeze","ZONE_LABELS","DISK_TYPES","SSD","deviceTypeDropdownItems","fsTypeDropdownItems","EXT4","EXT3","XFS","diskTypeDropdownItems","diskSizeUnitOptions","Ti","Gi","DISCOVERY_CR_NAME","HOSTNAME_LABEL_KEY","LABEL_OPERATOR","hasNoTaints","node","taints","getZone","labels","getNodeSelectorTermsIndices","selectorIndex","expIndex","forEach","selector","index","findIndex","exp","getNodesByHostNameLabel","nodeResource","namespaced","isList","FormFooter","isDisabled","onClick","tableColumnClasses","NodesTable","props","visibleRows","setVisibleRows","Set","onSelect","selectedRows","updateSelectedRows","setSelectedNodes","data","Header","sortField","transforms","Rows","rowProps","componentProps","filteredData","rows","cpuSpec","memSpec","roles","sort","cells","join","string","selected","has","uid","uids","n","getRows","virtualize","nodeCount"],"mappings":"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","file":"lso-create-local-volume-set-chunk-7f6ab0544c2ff0010797.min.js","sourcesContent":["import * as React from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  FormGroup,\n  TextInput,\n  Radio,\n  ExpandableSection,\n  TextInputTypes,\n  Text,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { useTranslation, TFunction } from 'react-i18next';\nimport { ListPage } from '@console/internal/components/factory';\nimport { Dropdown } from '@console/internal/components/utils';\nimport { NodeModel } from '@console/internal/models';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getName, MultiSelectDropdown } from '@console/shared';\nimport {\n  diskModeDropdownItems,\n  diskTypeDropdownItems,\n  diskSizeUnitOptions,\n  fsTypeDropdownItems,\n  deviceTypeDropdownItems,\n  DiskType,\n} from '../../constants';\nimport { NodesTable } from '../tables/nodes-table';\nimport { State, Action } from './state';\nimport './create-local-volume-set.scss';\n\nconst getDiskTypeValidationError = (state: State, t: TFunction) => {\n  let validationError: { title: string; variant: AlertVariant };\n\n  if (state.diskType === DiskType.All)\n    validationError = {\n      title: t(\n        'lso-plugin~All disk type may include HDD disks. Data Foundation does not support HDD disks as local devices. Select SSD if you plan to use Data Foundation.',\n      ),\n      variant: AlertVariant.info,\n    };\n  if (state.diskType === DiskType.HDD)\n    validationError = {\n      title: t(\n        'lso-plugin~Data Foundation does not support HDD disks as local devices. Select SSD if you plan to use Data Foundation.',\n      ),\n      variant: AlertVariant.info,\n    };\n\n  return validationError;\n};\n\nexport const LocalVolumeSetBody: React.FC<LocalVolumeSetBodyProps> = ({\n  dispatch,\n  state,\n  taintsFilter,\n  diskModeOptions = diskModeDropdownItems,\n  allNodesHelpTxt,\n  lvsNameHelpTxt,\n  deviceTypeOptions = deviceTypeDropdownItems,\n  fsTypeOptions = fsTypeDropdownItems,\n}) => {\n  const { t } = useTranslation();\n\n  const diskDropdownOptions = diskTypeDropdownItems(t);\n\n  const INTEGER_MAX_REGEX = /^\\+?([1-9]\\d*)$/;\n  const INTEGER_MIN_REGEX = /^\\+?([0-9]\\d*)$/;\n  const [activeMinDiskSize, setMinActiveState] = React.useState(false);\n  const [activeMaxDiskSize, setMaxActiveState] = React.useState(false);\n  const validMinDiskSize = INTEGER_MIN_REGEX.test(state.minDiskSize || '1');\n  const validMaxDiskSize = INTEGER_MAX_REGEX.test(state.maxDiskSize || '1');\n  const validMaxDiskLimit = INTEGER_MAX_REGEX.test(state.maxDiskLimit || '1');\n  const invalidMinGreaterThanMax =\n    state.minDiskSize !== '' &&\n    state.maxDiskSize !== '' &&\n    Number(state.minDiskSize) > Number(state.maxDiskSize);\n\n  const toggleShowNodesList = () =>\n    dispatch({ type: 'setLvsIsSelectNodes', value: !state.lvsIsSelectNodes });\n\n  React.useEffect(() => {\n    if (!validMinDiskSize || !validMaxDiskSize || !validMaxDiskLimit || invalidMinGreaterThanMax) {\n      dispatch({ type: 'setIsValidDiskSize', value: false });\n    } else {\n      dispatch({ type: 'setIsValidDiskSize', value: true });\n    }\n  }, [dispatch, validMinDiskSize, validMaxDiskSize, validMaxDiskLimit, invalidMinGreaterThanMax]);\n\n  const diskTypeValidationError = getDiskTypeValidationError(state, t);\n\n  return (\n    <>\n      <FormGroup\n        label={t('lso-plugin~LocalVolumeSet Name')}\n        isRequired\n        fieldId=\"create-lvs-volume-set-name\"\n      >\n        <TextInput\n          type={TextInputTypes.text}\n          id=\"create-lvs-volume-set-name\"\n          value={state.volumeSetName}\n          onChange={(_event, name: string) => dispatch({ type: 'setVolumeSetName', name })}\n          isRequired\n        />\n        {lvsNameHelpTxt ? <p className=\"help-block\">{lvsNameHelpTxt}</p> : null}\n      </FormGroup>\n      <FormGroup label={t('lso-plugin~StorageClass Name')} fieldId=\"create-lvs-storage-class-name\">\n        <TextInput\n          type={TextInputTypes.text}\n          id=\"create-lvs-storage-class-name\"\n          value={state.storageClassName}\n          placeholder={state.volumeSetName}\n          onChange={(_event, name: string) => dispatch({ type: 'setStorageClassName', name })}\n        />\n      </FormGroup>\n      <Text component={TextVariants.h3} className=\"lso-create-lvs__filter-volumes-text--margin\">\n        {t('lso-plugin~Filter Disks By')}\n      </Text>\n      <FormGroup fieldId=\"create-lvs-radio-group-node-selector\">\n        <div id=\"create-lvs-radio-group-node-selector\">\n          <Radio\n            label={\n              <>\n                {t('lso-plugin~Disks on all nodes')}\n                {' ('}\n                {t('lso-plugin~{{nodes, number}} node', {\n                  nodes: state.lvsAllNodes.length,\n                  count: state.lvsAllNodes.length,\n                })}\n                {')'}\n              </>\n            }\n            name=\"nodes-selection\"\n            id=\"create-lvs-radio-all-nodes\"\n            className=\"lso-create-lvs__all-nodes-radio--padding\"\n            value=\"allNodes\"\n            onChange={toggleShowNodesList}\n            description={allNodesHelpTxt}\n            checked={!state.lvsIsSelectNodes}\n          />\n          <Radio\n            label={t('lso-plugin~Disks on selected nodes')}\n            name=\"nodes-selection\"\n            id=\"create-lvs-radio-select-nodes\"\n            value=\"selectedNodes\"\n            onChange={toggleShowNodesList}\n            description={t(\n              'lso-plugin~Uses the available disks that match the selected filters only on selected nodes.',\n            )}\n            checked={state.lvsIsSelectNodes}\n          />\n        </div>\n      </FormGroup>\n      {state.lvsIsSelectNodes && (\n        <div className=\"lso-lvd-body__select-nodes\">\n          <ListPage\n            showTitle={false}\n            kind={NodeModel.kind}\n            ListComponent={NodesTable}\n            customData={{\n              onRowSelected: (selectedNodes: NodeKind[]) => {\n                dispatch({ type: 'setLvsSelectNodes', value: selectedNodes });\n              },\n              filteredNodes: state.lvsAllNodes.map(getName),\n              preSelectedNodes: state.lvsSelectNodes.map(getName),\n              hasOnSelect: true,\n              taintsFilter,\n            }}\n          />\n        </div>\n      )}\n      <FormGroup label={t('lso-plugin~Disk Type')} fieldId=\"create-lvs-disk-type-dropdown\">\n        <Dropdown\n          id=\"create-lvs-disk-type-dropdown\"\n          dropDownClassName=\"dropdown--full-width\"\n          items={diskDropdownOptions}\n          title={diskDropdownOptions[state.diskType]}\n          selectedKey={state.diskType}\n          onChange={(type: DiskType) => dispatch({ type: 'setDiskType', value: type })}\n        />\n        {!!diskTypeValidationError && (\n          <Alert\n            className=\"pf-v5-u-mt-md lso-disk-type__alert\"\n            variant={diskTypeValidationError.variant || AlertVariant.danger}\n            title={diskTypeValidationError.title}\n            isPlain\n          />\n        )}\n      </FormGroup>\n      <ExpandableSection\n        toggleText={t('lso-plugin~Advanced')}\n        data-test-id=\"create-lvs-form-advanced\"\n      >\n        <FormGroup\n          label={t('lso-plugin~Volume Mode')}\n          fieldId=\"create-lso-disk-mode-dropdown\"\n          className=\"lso-create-lvs__disk-mode-dropdown--margin\"\n        >\n          <Dropdown\n            id=\"create-lso-disk-mode-dropdown\"\n            dropDownClassName=\"dropdown--full-width\"\n            items={diskModeOptions}\n            title={state.diskMode}\n            selectedKey={state.diskMode}\n            onChange={(mode: string) => {\n              dispatch({ type: 'setDiskMode', value: diskModeDropdownItems[mode] });\n            }}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Device Type\"\n          fieldId=\"create-lso-device-type-dropdown\"\n          className=\"lso-create-lvs__device-type-dropdown--margin\"\n        >\n          <MultiSelectDropdown\n            id=\"create-lso-device-type-dropdown\"\n            options={[deviceTypeOptions.DISK, deviceTypeOptions.PART, deviceTypeOptions.MPATH]}\n            placeholder=\"Select disk types\"\n            onChange={(selectedValues: string[]) => {\n              dispatch({ type: 'setDeviceType', value: selectedValues });\n            }}\n            defaultSelected={[deviceTypeOptions.DISK, deviceTypeOptions.PART]}\n          />\n        </FormGroup>\n        {state.diskMode === diskModeDropdownItems.FILESYSTEM && (\n          <FormGroup\n            label={t('lso-plugin~File System Type')}\n            fieldId=\"create-lso-fs-type-dropdown\"\n            className=\"lso-create-lvs__fs-type-dropdown--margin\"\n          >\n            <Dropdown\n              id=\"create-lso-fs-type-dropdown\"\n              dropDownClassName=\"dropdown--full-width\"\n              items={fsTypeOptions}\n              title={state.fsType}\n              selectedKey={state.fsType}\n              onChange={(mode: string) => {\n                dispatch({ type: 'setFsType', value: fsTypeDropdownItems[mode] });\n              }}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t('lso-plugin~Disk Size')}\n          fieldId=\"create-lvs-disk-size\"\n          className=\"lso-create-lvs__disk-size-form-group--margin\"\n        >\n          <div id=\"create-lvs-disk-size\" className=\"lso-create-lvs__disk-size-form-group-div\">\n            <FormGroup\n              label={t('lso-plugin~Min')}\n              fieldId=\"create-lvs-min-disk-size\"\n              className=\"lso-create-lvs__disk-size-form-group-max-min-input\"\n            >\n              <Tooltip\n                content={\n                  !validMinDiskSize\n                    ? t('lso-plugin~Please enter a positive Integer')\n                    : t('lso-plugin~Please enter a value less than or equal to max disk size')\n                }\n                isVisible={!validMinDiskSize || (invalidMinGreaterThanMax && activeMinDiskSize)}\n                trigger=\"manual\"\n              >\n                <TextInput\n                  type={TextInputTypes.text}\n                  id=\"create-lvs-min-disk-size\"\n                  value={state.minDiskSize}\n                  validated={\n                    !validMinDiskSize || (invalidMinGreaterThanMax && activeMinDiskSize)\n                      ? 'error'\n                      : 'default'\n                  }\n                  className=\"lso-create-lvs__disk-input\"\n                  onFocus={() => setMinActiveState(true)}\n                  onBlur={() => setMinActiveState(false)}\n                  onChange={(_event, size: string) => {\n                    dispatch({ type: 'setMinDiskSize', value: size });\n                  }}\n                />\n              </Tooltip>\n            </FormGroup>\n            <div>-</div>\n            <FormGroup\n              label={t('lso-plugin~Max')}\n              fieldId=\"create-lvs-max-disk-size\"\n              className=\"lso-create-lvs__disk-size-form-group-max-min-input\"\n            >\n              <Tooltip\n                content={\n                  !validMaxDiskSize\n                    ? t('lso-plugin~Please enter a positive Integer')\n                    : t('lso-plugin~Please enter a value greater than or equal to min disk size')\n                }\n                isVisible={!validMaxDiskSize || (invalidMinGreaterThanMax && activeMaxDiskSize)}\n                trigger=\"manual\"\n              >\n                <TextInput\n                  type={TextInputTypes.text}\n                  id=\"create-lvs-max-disk-size\"\n                  value={state.maxDiskSize}\n                  validated={\n                    !validMaxDiskSize || (invalidMinGreaterThanMax && activeMaxDiskSize)\n                      ? 'error'\n                      : 'default'\n                  }\n                  className=\"lso-create-lvs__disk-input\"\n                  onFocus={() => setMaxActiveState(true)}\n                  onBlur={() => setMaxActiveState(false)}\n                  onChange={(_event, value) => dispatch({ type: 'setMaxDiskSize', value })}\n                />\n              </Tooltip>\n            </FormGroup>\n            <Dropdown\n              id=\"create-lvs-disk-size-unit-dropdown\"\n              items={diskSizeUnitOptions}\n              title={diskSizeUnitOptions[state.diskSizeUnit]}\n              selectedKey={state.diskSizeUnit}\n              onChange={(unit: string) => {\n                dispatch({ type: 'setDiskSizeUnit', value: unit });\n              }}\n            />\n          </div>\n        </FormGroup>\n        <FormGroup label={t('lso-plugin~Maximum Disks Limit')} fieldId=\"create-lvs-max-disk-limit\">\n          <p className=\"help-block lso-create-lvs__max-disk-limit-help-text--margin\">\n            {t(\n              'lso-plugin~Disks limit will set the maximum number of PVs to create on a node. If the field is empty we will create PVs for all available disks on the matching nodes.',\n            )}\n          </p>\n          <Tooltip\n            content=\"Please enter a positive Integer\"\n            isVisible={!validMaxDiskLimit}\n            trigger=\"manual\"\n          >\n            <TextInput\n              type={TextInputTypes.text}\n              id=\"create-lvs-max-disk-limit\"\n              value={state.maxDiskLimit}\n              validated={validMaxDiskLimit ? 'default' : 'error'}\n              className=\"lso-create-lvs__disk-input\"\n              onChange={(_event, maxLimit) =>\n                dispatch({ type: 'setMaxDiskLimit', value: maxLimit })\n              }\n              placeholder={t('lso-plugin~All')}\n            />\n          </Tooltip>\n        </FormGroup>\n      </ExpandableSection>\n    </>\n  );\n};\n\ntype LocalVolumeSetBodyProps = {\n  state: State;\n  dispatch: React.Dispatch<Action>;\n  diskModeOptions?: { [key: string]: string };\n  deviceTypeOptions?: { [key: string]: string };\n  fsTypeOptions?: { [key: string]: string };\n  allNodesHelpTxt?: string;\n  lvsNameHelpTxt?: string;\n  taintsFilter?: (node: NodeKind) => boolean;\n};\n","import * as React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const LocalVolumeSetHeader: React.FC<LocalVolumeSetHeaderProps> = ({\n  className,\n  variant,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextContent>\n        <Text component={variant} className={className}>\n          {t('lso-plugin~Local Volume Set')}\n        </Text>\n      </TextContent>\n      <p className=\"help-block\">\n        {t(\n          'lso-plugin~A Local Volume Set allows you to filter a set of disks, group them and create a dedicated StorageClass to consume storage from them.',\n        )}\n      </p>\n    </>\n  );\n};\n\ntype LocalVolumeSetHeaderProps = {\n  variant: any;\n  className?: string;\n};\n","import * as _ from 'lodash';\nimport { apiVersionForModel, Toleration } from '@console/internal/module/k8s';\nimport {\n  DISK_TYPES,\n  HOSTNAME_LABEL_KEY,\n  LABEL_OPERATOR,\n  deviceTypeDropdownItems,\n} from '../../constants';\nimport { LocalVolumeSetModel } from '../../models';\nimport { LocalVolumeSetKind, DiskType } from './types';\n\nconst getDeviceTypes = (deviceType: string[]) => {\n  const { DISK, PART, MPATH } = deviceTypeDropdownItems;\n  if ((deviceType.includes(DISK) && deviceType.includes(PART)) || deviceType.length === 0) {\n    return [DiskType.RawDisk, DiskType.Partition];\n  }\n  if (deviceType.includes(PART)) {\n    return [DiskType.Partition];\n  }\n  if (deviceType.includes(MPATH)) {\n    return [DiskType.Multipath];\n  }\n  return [DiskType.RawDisk];\n};\n\nexport const getLocalVolumeSetRequestData = (\n  // @TODO: (afreen23) Fix the typings , this chanfge will require refactoring at mutiple places\n  state: any,\n  nodes: string[],\n  ns: string,\n  toleration?: Toleration,\n): LocalVolumeSetKind => {\n  const deviceTypes = getDeviceTypes(state.deviceType);\n  const requestData = {\n    apiVersion: apiVersionForModel(LocalVolumeSetModel),\n    kind: LocalVolumeSetModel.kind,\n    metadata: { name: state.volumeSetName, namespace: ns },\n    spec: {\n      storageClassName: state.storageClassName || state.volumeSetName,\n      volumeMode: state.diskMode,\n      deviceInclusionSpec: {\n        deviceTypes,\n      },\n      nodeSelector: {\n        nodeSelectorTerms: [\n          {\n            matchExpressions: [\n              {\n                key: HOSTNAME_LABEL_KEY,\n                operator: LABEL_OPERATOR,\n                values: nodes,\n              },\n            ],\n          },\n        ],\n      },\n    },\n  } as LocalVolumeSetKind;\n\n  if (state.fsType) requestData.spec.fsType = state.fsType;\n  if (!_.isEmpty(toleration)) requestData.spec.tolerations = [toleration];\n  if (state.maxDiskLimit) requestData.spec.maxDeviceCount = +state.maxDiskLimit;\n  if (state.minDiskSize)\n    requestData.spec.deviceInclusionSpec.minSize = `${state.minDiskSize}${state.diskSizeUnit}`;\n  if (state.maxDiskSize)\n    requestData.spec.deviceInclusionSpec.maxSize = `${state.maxDiskSize}${state.diskSizeUnit}`;\n  if (DISK_TYPES[state.diskType]?.property) {\n    requestData.spec.deviceInclusionSpec.deviceMechanicalProperties = [\n      DISK_TYPES[state.diskType].property,\n    ];\n  }\n\n  return requestData;\n};\n","import { K8sResourceCommon, Toleration } from '@console/internal/module/k8s';\n\nexport enum DiskType {\n  RawDisk = 'disk',\n  Partition = 'part',\n  Multipath = 'mpath',\n}\n\nexport enum DiskMechanicalProperties {\n  'NonRotational' = 'NonRotational',\n  'Rotational' = 'Rotational',\n}\n\nexport type LocalVolumeSetKind = K8sResourceCommon & {\n  spec: {\n    storageClassName: string;\n    volumeMode: string;\n    fsType: string;\n    deviceInclusionSpec: {\n      deviceTypes?: DiskType[];\n      deviceMechanicalProperties: [keyof typeof DiskMechanicalProperties];\n      minSize?: string;\n      maxSize?: string;\n    };\n    nodeSelector?: {\n      nodeSelectorTerms: {\n        matchExpressions: { key: string; operator: string; values: string[] }[];\n      }[];\n    };\n    maxDeviceCount?: number;\n    tolerations?: Toleration[];\n  };\n};\n","import { NodeKind } from 'public/module/k8s';\nimport { diskModeDropdownItems, DiskType } from '../../constants';\n\nexport const initialState = {\n  volumeSetName: '',\n  storageClassName: '',\n  isValidDiskSize: true,\n  diskType: DiskType.All,\n  diskMode: diskModeDropdownItems.BLOCK,\n  deviceType: [],\n  fsType: '',\n  maxDiskLimit: '',\n  minDiskSize: '1',\n  maxDiskSize: '',\n  diskSizeUnit: 'Gi',\n  lvsSelectNodes: [],\n  lvsAllNodes: [],\n  lvsIsSelectNodes: false,\n};\n\nexport type State = {\n  volumeSetName: string;\n  storageClassName: string;\n  isValidDiskSize: boolean;\n  diskType: DiskType;\n  diskMode: string;\n  fsType: string;\n  deviceType: string[];\n  maxDiskLimit: string;\n  minDiskSize: string;\n  maxDiskSize: string;\n  diskSizeUnit: string;\n  lvsSelectNodes: NodeKind[];\n  lvsAllNodes: NodeKind[];\n  lvsIsSelectNodes: boolean;\n};\n\nexport type Action =\n  | { type: 'setVolumeSetName'; name: string }\n  | { type: 'setStorageClassName'; name: string }\n  | { type: 'setIsValidDiskSize'; value: boolean }\n  | { type: 'setDiskType'; value: DiskType }\n  | { type: 'setDiskMode'; value: string }\n  | { type: 'setFsType'; value: string }\n  | { type: 'setMaxDiskLimit'; value: string }\n  | { type: 'setMinDiskSize'; value: string }\n  | { type: 'setMaxDiskSize'; value: string }\n  | { type: 'setDiskSizeUnit'; value: string }\n  | { type: 'setDeviceType'; value: string[] }\n  | { type: 'setLvsSelectNodes'; value: NodeKind[] }\n  | { type: 'setLvsAllNodes'; value: NodeKind[] }\n  | { type: 'setLvsIsSelectNodes'; value: boolean };\n\nexport const reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'setVolumeSetName':\n      return Object.assign({}, state, { volumeSetName: action.name });\n    case 'setStorageClassName':\n      return Object.assign({}, state, { storageClassName: action.name });\n    case 'setIsValidDiskSize':\n      return Object.assign({}, state, { isValidDiskSize: action.value });\n    case 'setDiskType':\n      return Object.assign({}, state, { diskType: action.value });\n    case 'setDiskMode':\n      return Object.assign({}, state, { diskMode: action.value });\n    case 'setDeviceType':\n      return Object.assign({}, state, { deviceType: action.value });\n    case 'setFsType':\n      return Object.assign({}, state, { fsType: action.value });\n    case 'setMaxDiskLimit':\n      return Object.assign({}, state, { maxDiskLimit: action.value });\n    case 'setMinDiskSize':\n      return Object.assign({}, state, { minDiskSize: action.value });\n    case 'setMaxDiskSize':\n      return Object.assign({}, state, { maxDiskSize: action.value });\n    case 'setDiskSizeUnit':\n      return Object.assign({}, state, { diskSizeUnit: action.value });\n    case 'setLvsAllNodes':\n      return Object.assign({}, state, { lvsAllNodes: action.value });\n    case 'setLvsSelectNodes':\n      return Object.assign({}, state, { lvsSelectNodes: action.value });\n    case 'setLvsIsSelectNodes':\n      return Object.assign({}, state, { lvsIsSelectNodes: action.value });\n    default:\n      return initialState;\n  }\n};\n","import * as React from 'react';\nimport { Form, TextVariants } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { history } from '@console/internal/components/utils/router';\nimport { k8sCreate, NodeKind, referenceForModel } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { usePromiseHandler } from '@console/shared/src/hooks/promise-handler';\nimport { LocalVolumeSetModel } from '../../models';\nimport { nodeResource } from '../../resources';\nimport { hasNoTaints, getNodesByHostNameLabel } from '../../utils';\nimport { FormFooter } from '../common/form-footer';\nimport { LocalVolumeSetBody } from './body';\nimport { LocalVolumeSetHeader } from './header';\nimport { getLocalVolumeSetRequestData } from './request';\nimport { reducer, initialState } from './state';\nimport './create-local-volume-set.scss';\n\nconst CreateLocalVolumeSet: React.FC = () => {\n  const { appName, ns } = useParams();\n  const resourcePath = resourcePathFromModel(ClusterServiceVersionModel, appName, ns);\n\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const [nodesData, nodesLoaded, nodesLoadError] = useK8sWatchResource<NodeKind[]>(nodeResource);\n  const [handlePromise, inProgress, errorMessage] = usePromiseHandler();\n\n  React.useEffect(() => {\n    if (nodesLoaded && !nodesLoadError && nodesData?.length !== 0) {\n      const filteredNodes: NodeKind[] = nodesData.filter(hasNoTaints);\n      dispatch({ type: 'setLvsAllNodes', value: filteredNodes });\n    }\n  }, [nodesData, nodesLoadError, nodesLoaded]);\n\n  const onSubmit = async (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n\n    const lvsNodes = state.lvsIsSelectNodes ? state.lvsSelectNodes : state.lvsAllNodes;\n    const nodesByHostNameLabel = getNodesByHostNameLabel(lvsNodes);\n    const requestData = getLocalVolumeSetRequestData(state, nodesByHostNameLabel, ns);\n\n    handlePromise(k8sCreate(LocalVolumeSetModel, requestData))\n      .then(() => {\n        history.push(\n          `/k8s/ns/${ns}/clusterserviceversions/${appName}/${referenceForModel(\n            LocalVolumeSetModel,\n          )}/${state.volumeSetName}`,\n        );\n      })\n      .catch(() => {});\n  };\n\n  const getDisabledCondition = () => {\n    const nodes = state.lvsIsSelectNodes ? state.lvsSelectNodes : state.lvsAllNodes;\n    if (!state.volumeSetName.trim().length) return true;\n    if (nodes.length < 1) return true;\n    if (!state.isValidDiskSize) return true;\n    return false;\n  };\n\n  return (\n    <>\n      <div className=\"co-create-operand__header\">\n        <LocalVolumeSetHeader\n          variant={TextVariants.h1}\n          className=\"co-create-operand__header-text\"\n        />\n      </div>\n      <Form\n        noValidate={false}\n        className=\"co-m-pane__body lso-form-body__node-list pf-v5-u-w-75\"\n        onSubmit={onSubmit}\n      >\n        <LocalVolumeSetBody dispatch={dispatch} state={state} />\n        <FormFooter\n          errorMessage={errorMessage}\n          inProgress={inProgress}\n          cancelUrl={resourcePath}\n          disableNext={getDisabledCondition()}\n        />\n      </Form>\n    </>\n  );\n};\n\nexport default CreateLocalVolumeSet;\n","import { TFunction } from 'i18next';\nimport { DiskMechanicalProperties } from '../components/local-volume-set/types';\n\nexport enum DiskType {\n  All = 'All',\n  SSD = 'SSD',\n  HDD = 'HDD',\n}\n\nexport const diskModeDropdownItems = Object.freeze({\n  BLOCK: 'Block',\n  FILESYSTEM: 'Filesystem',\n});\n\nexport const ZONE_LABELS = [\n  'topology.kubernetes.io/zone',\n  'failure-domain.beta.kubernetes.io/zone', // deprecated\n];\n\nexport const DISK_TYPES: {\n  [key: string]: {\n    property: keyof typeof DiskMechanicalProperties;\n  };\n} = {\n  [DiskType.SSD]: {\n    property: 'NonRotational',\n  },\n  [DiskType.HDD]: {\n    property: 'Rotational',\n  },\n};\nexport const deviceTypeDropdownItems = Object.freeze({\n  DISK: 'Disk',\n  PART: 'Part',\n  MPATH: 'Mpath',\n});\n\nexport const fsTypeDropdownItems = Object.freeze({\n  EXT4: 'ext4',\n  EXT3: 'ext3',\n  XFS: 'xfs',\n});\n\nexport const diskTypeDropdownItems = (t: TFunction) =>\n  Object.freeze({\n    [DiskType.All]: t('lso-plugin~All'),\n    [DiskType.SSD]: t('lso-plugin~SSD / NVMe'),\n    [DiskType.HDD]: t('lso-plugin~HDD'),\n  });\n\nexport const AUTO_DISCOVER_ERR_MSG = 'Failed to update the Auto Detect Volume!';\n\nexport const diskSizeUnitOptions = {\n  Ti: 'TiB',\n  Gi: 'GiB',\n};\n\nexport const DISCOVERY_CR_NAME = 'auto-discover-devices';\nexport const LOCAL_STORAGE_NAMESPACE = 'openshift-local-storage';\nexport const HOSTNAME_LABEL_KEY = 'kubernetes.io/hostname';\nexport const LABEL_OPERATOR = 'In';\n","import * as _ from 'lodash';\nimport { NodeKind, MatchExpression } from '@console/internal/module/k8s';\nimport { HOSTNAME_LABEL_KEY, LABEL_OPERATOR, ZONE_LABELS } from '../constants';\n\nexport const hasNoTaints = (node: NodeKind): boolean => _.isEmpty(node.spec?.taints);\n\nexport const getZone = (node: NodeKind) =>\n  node.metadata.labels?.[ZONE_LABELS[0]] || node.metadata.labels?.[ZONE_LABELS[1]];\n\nexport const getNodeSelectorTermsIndices = (\n  nodeSelectorTerms: {\n    matchExpressions: MatchExpression[];\n    matchFields?: MatchExpression[];\n  }[] = [],\n) => {\n  let [selectorIndex, expIndex] = [-1, -1];\n\n  nodeSelectorTerms.forEach((selector, index) => {\n    expIndex = selector?.matchExpressions?.findIndex(\n      (exp: MatchExpression) => exp.key === HOSTNAME_LABEL_KEY && exp.operator === LABEL_OPERATOR,\n    );\n    if (expIndex !== -1) {\n      selectorIndex = index;\n    }\n  });\n\n  return [selectorIndex, expIndex];\n};\n\nexport const getNodesByHostNameLabel = (nodes: NodeKind[]): string[] =>\n  nodes.map((node: NodeKind) => node.metadata?.labels?.['kubernetes.io/hostname']);\n","import { WatchK8sResource } from '@console/dynamic-plugin-sdk';\nimport { NodeModel } from '@console/internal/models';\n\nexport const nodeResource: WatchK8sResource = {\n  kind: NodeModel.kind,\n  namespaced: false,\n  isList: true,\n};\n","import * as React from 'react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { ButtonBar } from '@console/internal/components/utils';\nimport { history } from '@console/internal/components/utils/router';\n\nexport const FormFooter: React.FC<FormFooterProps> = ({\n  errorMessage,\n  inProgress,\n  disableNext,\n  cancelUrl,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n      <ActionGroup>\n        <Button type=\"submit\" variant=\"primary\" isDisabled={disableNext}>\n          {t('lso-plugin~Create')}\n        </Button>\n        <Button type=\"button\" variant=\"secondary\" onClick={() => history.push(cancelUrl)}>\n          {t('lso-plugin~Cancel')}\n        </Button>\n      </ActionGroup>\n    </ButtonBar>\n  );\n};\n\ntype FormFooterProps = {\n  errorMessage: any;\n  inProgress: boolean;\n  disableNext: boolean;\n  cancelUrl: string;\n};\n","import * as React from 'react';\nimport { Text } from '@patternfly/react-core';\nimport { sortable, IRow } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { Table } from '@console/internal/components/factory';\nimport {\n  ResourceLink,\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  convertToBaseValue,\n} from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport {\n  getName,\n  getNodeRoles,\n  getNodeCPUCapacity,\n  getNodeAllocatableMemory,\n} from '@console/shared';\nimport { useSelectList } from '@console/shared/src/hooks/select-list';\nimport { getZone, hasNoTaints } from '../../utils';\nimport { NodesTableRowsFunction, NodesTableCustomData } from './types';\nimport './nodes-table.scss';\n\nconst tableColumnClasses = [\n  classNames('pf-v5-u-w-40-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-v5-u-w-10-on-sm'),\n];\n\nconst getRows: NodesTableRowsFunction = (\n  { componentProps, customData },\n  visibleRows,\n  setVisibleRows,\n  selectedNodes,\n  setSelectedNodes,\n) => {\n  const { data } = componentProps;\n  const { filteredNodes, preSelectedNodes, taintsFilter } = customData;\n  let filteredData: NodeKind[] = data;\n\n  if (filteredNodes?.length) {\n    /**\n     * Only the nodes present in `filteredNodes` will be displayed.\n     * These nodes are already filtered for taints e.g nodes passed\n     * from discovery step to create storage class in ocs.\n     */\n    filteredData = data.filter((node: NodeKind) => filteredNodes.includes(getName(node)));\n  } else {\n    /* Remove all tainted nodes, or allow some tainted nodes based on `taintsFilter` */\n    filteredData = filteredData.filter(\n      (node) => hasNoTaints(node) || (taintsFilter && taintsFilter(node)),\n    );\n  }\n\n  const rows = filteredData.map((node: NodeKind) => {\n    const cpuSpec: string = getNodeCPUCapacity(node);\n    const memSpec: string = getNodeAllocatableMemory(node);\n    const roles = getNodeRoles(node).sort();\n    const cells: IRow['cells'] = [\n      {\n        title: <ResourceLink kind=\"Node\" name={getName(node)} title={getName(node)} />,\n      },\n      {\n        title: roles.join(', ') ?? '-',\n      },\n      {\n        title: `${humanizeCpuCores(cpuSpec).string || '-'}`,\n      },\n      {\n        title: humanizeBinaryBytes(convertToBaseValue(memSpec)).string ?? '-',\n      },\n      {\n        title: getZone(node) ?? '-',\n      },\n    ];\n    return {\n      cells,\n      selected: selectedNodes.has(node.metadata.uid),\n      props: {\n        id: node.metadata.uid,\n      },\n    };\n  });\n\n  const uids = new Set(filteredData.map((n) => n.metadata.uid));\n\n  if (!_.isEqual(uids, visibleRows)) {\n    setVisibleRows(uids);\n    if (preSelectedNodes?.length && !selectedNodes?.size && filteredData.length) {\n      const preSelectedRows = filteredData.filter((node) =>\n        preSelectedNodes.includes(getName(node)),\n      );\n      setSelectedNodes(preSelectedRows);\n    }\n  }\n  return rows;\n};\n\nexport const NodesTable: React.FC<NodesTableProps> = (props) => {\n  const { t } = useTranslation();\n  const [visibleRows, setVisibleRows] = React.useState<Set<string>>(new Set());\n\n  const { hasOnSelect, onRowSelected } = props.customData;\n\n  const {\n    onSelect,\n    selectedRows: selectedNodes,\n    updateSelectedRows: setSelectedNodes,\n  } = useSelectList<NodeKind>(props.data, visibleRows, onRowSelected);\n\n  const getColumns = () => [\n    {\n      title: t('lso-plugin~Name'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('lso-plugin~Role'),\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('lso-plugin~CPU'),\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('lso-plugin~Memory'),\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('lso-plugin~Zone'),\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"lso-node-selection-table__table--scroll\">\n        <Table\n          {...props}\n          aria-label={t('lso-plugin~Select nodes for creating volume filter')}\n          data-test-id=\"create-lvs-form-node-selection-table\"\n          Header={getColumns}\n          Rows={(rowProps) =>\n            getRows(rowProps, visibleRows, setVisibleRows, selectedNodes, setSelectedNodes)\n          }\n          customData={props.customData}\n          onSelect={hasOnSelect && onSelect}\n          virtualize={false}\n        />\n      </div>\n      {hasOnSelect && (\n        <Text data-test-id=\"create-lvs-form-selected-nodes\" component=\"h6\">\n          {t('lso-plugin~{{nodeCount, number}} node', {\n            nodeCount: selectedNodes?.size,\n            count: selectedNodes?.size,\n          })}{' '}\n          {t('lso-plugin~selected')}\n        </Text>\n      )}\n    </>\n  );\n};\n\ntype NodesTableProps = {\n  data: NodeKind[];\n  customData: NodesTableCustomData;\n};\n"],"sourceRoot":""}