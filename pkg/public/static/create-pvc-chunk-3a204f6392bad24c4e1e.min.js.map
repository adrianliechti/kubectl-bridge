{"version":3,"sources":["webpack:///./public/components/storage-class.tsx","webpack:///./public/components/storage/create-pvc.tsx","webpack:///./public/components/storage/shared.ts","webpack:///./public/components/checkbox.tsx","webpack:///./packages/console-app/src/components/access-modes/access-mode.tsx","webpack:///./public/components/utils/storage-class-dropdown.tsx","webpack:///./packages/console-app/src/components/volume-modes/volume-mode.tsx"],"names":["StorageClassReference","common","factory","menuActions","getExtensionsActionsForKind","isDefaultClass","storageClass","annotations","tableColumnClasses","columnClass","StorageClassDetails","obj","t","className","text","resource","label","path","StorageClassTableRow","kind","name","metadata","provisioner","reclaimPolicy","actions","StorageClassList","props","Header","title","sortField","transforms","Row","virtualize","displayName","StorageClassPage","ListComponent","canCreate","filterLabel","createProps","to","createButtonText","StorageClassDetailsPage","pages","details","editYaml","NameValueEditorComponent","loader","then","c","NameValueEditor","CreatePVCForm","accessModeHelp","setAccessModeHelp","setStorageClass","pvcName","setPvcName","accessMode","setAccessMode","volumeMode","setVolumeMode","requestSizeValue","setRequestSizeValue","requestSizeUnit","setRequestSizeUnit","useSelector","setUseSelector","nameValuePairs","setNameValuePairs","storageProvisioner","setStorageProvisioner","namespace","onChange","apiVersion","spec","accessModes","resources","requests","storage","selector","matchLabels","acc","key","value","getSelector","storageClassName","onlyPvcSCs","sc","updatedStorageClass","displayMessage","id","describedBy","required","filter","htmlFor","type","event","currentTarget","trim","placeholder","loaded","availableAccessModes","description","ignoreReadOnly","unit","defaultRequestSizeUnit","defaultRequestSizeValue","dropdownUnits","inputID","testID","checked","valueString","nameString","addString","readOnly","allowSorting","updateParentData","updatedNameValuePairs","CreatePVCPage","navigate","error","setError","inProgress","setInProgress","pvcObj","setPvcObj","link","replace","onSubmit","e","preventDefault","message","errorMessage","variant","onClick","CreatePVC","params","ns","snapshotPVCStorageClassAnnotation","snapshotPVCAccessModeAnnotation","snapshotPVCVolumeModeAnnotation","initialAccessModes","initialVolumeModes","provisionerAccessModeMapping","Object","freeze","Filesystem","Block","partialMatch","getAccessModeOptions","getVolumeModeRadios","i","Ki","Mi","Gi","Ti","Pi","Ei","getProvisionerModeMapping","includes","getAccessModeForProvisioner","modeMapping","keys","map","mode","flat","Set","modes","getVolumeModeForProvisioner","Checkbox","getPVCAccessModes","res","find","push","AccessModeSelector","pvcResource","filterByVolumeMode","pvcInitialAccessMode","allowedAccessModes","setAllowedAccessModes","changeAccessMode","isOpen","setIsOpen","selected","setSelected","onToggleClick","selectOptions","option","disabled","val","isDisabled","isSelected","isRequired","fieldId","onSelect","_event","onOpenChange","open","toggle","toggleRef","ref","isExpanded","style","width","shouldFocusToggleOnSelect","StorageClassDropdownInnerWithTranslation","state","items","this","selectedKey","defaultClass","autocompleteFilter","item","getTitle","kindLabel","setState","UNSAFE_componentWillReceiveProps","nextProps","loadError","desc","unorderedItems","noStorageClass","StorageClass","data","default","parameters","zone","reduce","selectedItem","sort","forEach","nextState","noSelection","StorageClassDropdownEntry","StorageClassDropdownNoStorageClassOption","itemsAvailableToShow","hideClassName","dropDownClassName","autocompletePlaceholder","dataTest","menuClassName","StorageClassDropdownInner","StorageClassDropdown","prop","isList","storageClassProperties","storageClassDescriptionLine","join","VolumeModeSelector","availableVolumeMode","pvcInitialVolumeMode","allowedVolumeModes","changeVolumeMode","length","radio","inline"],"mappings":"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","file":"create-pvc-chunk-3a204f6392bad24c4e1e.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport * as classNames from 'classnames';\nimport { DetailsPage, ListPage, Table, TableData, RowFunctionArgs } from './factory';\nimport {\n  DetailsItem,\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  detailsPage,\n  navFactory,\n} from './utils';\nimport { StorageClassResourceKind, K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { StorageClassModel } from '../models';\n\nexport const StorageClassReference: K8sResourceKindReference = 'StorageClass';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(StorageClassModel), ...common];\n\nconst defaultClassAnnotation = 'storageclass.kubernetes.io/is-default-class';\nconst betaDefaultStorageClassAnnotation = 'storageclass.beta.kubernetes.io/is-default-class';\nexport const isDefaultClass = (storageClass: K8sResourceKind) => {\n  const annotations = _.get(storageClass, 'metadata.annotations') || {};\n  return (\n    annotations[defaultClassAnnotation] === 'true' ||\n    annotations[betaDefaultStorageClassAnnotation] === 'true'\n  );\n};\n\nconst tableColumnClasses = [\n  'pf-v5-u-w-42-on-md',\n  'pf-v5-u-w-42-on-md',\n  'pf-m-hidden pf-m-visible-on-md pf-v5-u-w-16-on-md',\n  Kebab.columnClass,\n];\n\nconst StorageClassDetails: React.FC<StorageClassDetailsProps> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~StorageClass details')} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj}>\n              <DetailsItem label={t('public~Provisioner')} obj={obj} path=\"provisioner\" />\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <DetailsItem label={t('public~Reclaim policy')} obj={obj} path=\"reclaimPolicy\" />\n              <dt>{t('public~Default class')}</dt>\n              <dd>{isDefaultClass(obj) ? t('public~True') : t('public~False')}</dd>\n              <DetailsItem\n                label={t('public~Volume binding mode')}\n                obj={obj}\n                path=\"volumeBindingMode\"\n              />\n            </dl>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst StorageClassTableRow: React.FC<RowFunctionArgs<StorageClassResourceKind>> = ({ obj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink kind={StorageClassReference} name={obj.metadata.name}>\n          {isDefaultClass(obj) && (\n            <span className=\"small text-muted co-resource-item__help-text\">\n              &ndash; {t('public~Default')}\n            </span>\n          )}\n        </ResourceLink>\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        {obj.provisioner}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{obj.reclaimPolicy || '-'}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={StorageClassReference} resource={obj} />\n      </TableData>\n    </>\n  );\n};\n\nexport const StorageClassList: React.FC = (props) => {\n  const { t } = useTranslation();\n  const StorageClassTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Provisioner'),\n        sortField: 'provisioner',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n      },\n      {\n        title: t('public~Reclaim policy'),\n        sortField: 'reclaimPolicy',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[3] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~StorageClasses')}\n      Header={StorageClassTableHeader}\n      Row={StorageClassTableRow}\n      virtualize\n    />\n  );\n};\nStorageClassList.displayName = 'StorageClassList';\n\nexport const StorageClassPage: React.FC<StorageClassPageProps> = (props) => {\n  const createProps = {\n    to: '/k8s/cluster/storageclasses/~new/form',\n  };\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {..._.omit(props, 'mock')}\n      title={t('public~StorageClasses')}\n      kind={StorageClassReference}\n      ListComponent={StorageClassList}\n      canCreate={true}\n      filterLabel={props.filterLabel}\n      createProps={createProps}\n      createButtonText={t('public~Create StorageClass')}\n    />\n  );\n};\nexport const StorageClassDetailsPage: React.FC = (props) => {\n  const pages = [navFactory.details(detailsPage(StorageClassDetails)), navFactory.editYaml()];\n  return (\n    <DetailsPage {...props} kind={StorageClassReference} menuActions={menuActions} pages={pages} />\n  );\n};\nStorageClassDetailsPage.displayName = 'StorageClassDetailsPage';\n\nexport type StorageClassDetailsProps = {\n  obj: any;\n};\n\nexport type StorageClassPageProps = {\n  filterLabel: string;\n  namespace: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link, useParams, useNavigate } from 'react-router-dom-v5-compat';\n\nimport { useTranslation } from 'react-i18next';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { isObjectSC } from '@console/shared/src/utils';\nimport { AccessModeSelector } from '@console/app/src/components/access-modes/access-mode';\nimport { VolumeModeSelector } from '@console/app/src/components/volume-modes/volume-mode';\nimport { k8sCreate, K8sResourceKind, referenceFor } from '../../module/k8s';\nimport {\n  AsyncComponent,\n  ButtonBar,\n  RequestSizeInput,\n  resourceObjPath,\n  PageHeading,\n} from '../utils';\nimport { StorageClassDropdown } from '../utils/storage-class-dropdown';\nimport { Checkbox } from '../checkbox';\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { StorageClass } from '../storage-class-form';\nimport { getProvisionerModeMapping, initialAccessModes, dropdownUnits } from './shared';\n\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/name-value-editor').then((c) => c.NameValueEditor)}\n    {...props}\n  />\n);\n\n// This form is done a little odd since it is used in both its own page and as\n// a sub form inside the attach storage page.\nexport const CreatePVCForm: React.FC<CreatePVCFormProps> = (props) => {\n  const [accessModeHelp, setAccessModeHelp] = React.useState('Permissions to the mounted drive.');\n  const [storageClass, setStorageClass] = React.useState('');\n  const [pvcName, setPvcName] = React.useState('');\n  const [accessMode, setAccessMode] = React.useState('ReadWriteOnce');\n  const [volumeMode, setVolumeMode] = React.useState('Filesystem');\n  const [requestSizeValue, setRequestSizeValue] = React.useState('');\n  const [requestSizeUnit, setRequestSizeUnit] = React.useState('Gi');\n  const [useSelector, setUseSelector] = React.useState(false);\n  const [nameValuePairs, setNameValuePairs] = React.useState([['', '']]);\n  const [storageProvisioner, setStorageProvisioner] = React.useState('');\n  const { namespace, onChange } = props;\n\n  React.useEffect(() => {\n    const getSelector = () => {\n      if (!useSelector) {\n        return null;\n      }\n\n      const matchLabels = _.reduce(\n        nameValuePairs,\n        (acc, [key, value]) => {\n          return key ? { ...acc, [key]: value } : acc;\n        },\n        {},\n      );\n\n      return _.isEmpty(matchLabels) ? null : { matchLabels };\n    };\n    const updatePVC = (): K8sResourceKind => {\n      const obj: K8sResourceKind = {\n        apiVersion: 'v1',\n        kind: 'PersistentVolumeClaim',\n        metadata: {\n          name: pvcName,\n          namespace,\n        },\n        spec: {\n          accessModes: [accessMode],\n          volumeMode,\n          resources: {\n            requests: {\n              storage: `${requestSizeValue}${requestSizeUnit}`,\n            },\n          },\n        },\n      };\n\n      // Add the selector only if specified.\n      const selector = getSelector();\n      if (selector) {\n        obj.spec.selector = selector;\n      }\n\n      if (storageClass) {\n        obj.spec.storageClassName = storageClass;\n        obj.spec.volumeMode = volumeMode;\n      }\n\n      return obj;\n    };\n    onChange(updatePVC);\n  }, [\n    accessMode,\n    namespace,\n    nameValuePairs,\n    pvcName,\n    onChange,\n    storageClass,\n    requestSizeValue,\n    requestSizeUnit,\n    useSelector,\n    storageProvisioner,\n    volumeMode,\n  ]);\n\n  const { t } = useTranslation();\n\n  const handleNameValuePairs = ({ nameValuePairs: updatedNameValuePairs }) => {\n    setNameValuePairs(updatedNameValuePairs);\n  };\n\n  const handleStorageClass = (updatedStorageClass) => {\n    const provisioner: string = updatedStorageClass?.provisioner || '';\n    //setting message to display for various modes when a storage class of a know provisioner is selected\n    const displayMessage = getProvisionerModeMapping(provisioner)\n      ? `${t('public~Access mode is set by StorageClass and cannot be changed')}`\n      : `${t('public~Permissions to the mounted drive')}`;\n    setAccessModeHelp(displayMessage);\n    //setting accessMode to default with the change to Storage Class selection\n    setStorageClass(updatedStorageClass?.metadata?.name);\n    setStorageProvisioner(provisioner);\n  };\n\n  const handleRequestSizeInputChange = (obj) => {\n    setRequestSizeValue(obj.value);\n    setRequestSizeUnit(obj.unit);\n  };\n\n  const handleUseSelector: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setUseSelector(event.currentTarget.checked);\n  };\n\n  const handlePvcName: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setPvcName(event.currentTarget.value.trim());\n  };\n\n  const onlyPvcSCs = React.useCallback((sc: StorageClass) => !isObjectSC(sc), []);\n\n  return (\n    <div>\n      <div className=\"form-group\">\n        <StorageClassDropdown\n          onChange={handleStorageClass}\n          id=\"storageclass-dropdown\"\n          data-test=\"storageclass-dropdown\"\n          describedBy=\"storageclass-dropdown-help\"\n          required={false}\n          name=\"storageClass\"\n          filter={onlyPvcSCs}\n        />\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"pvc-name\">\n        {t('public~PersistentVolumeClaim name')}\n      </label>\n      <div className=\"form-group\">\n        <input\n          className=\"pf-v5-c-form-control\"\n          type=\"text\"\n          onChange={handlePvcName}\n          placeholder=\"my-storage-claim\"\n          aria-describedby=\"pvc-name-help\"\n          id=\"pvc-name\"\n          data-test=\"pvc-name\"\n          name=\"pvcName\"\n          value={pvcName}\n          required\n        />\n        <p className=\"help-block\" id=\"pvc-name-help\">\n          {t('public~A unique name for the storage claim within the project')}\n        </p>\n      </div>\n      <div className=\"form-group\">\n        <AccessModeSelector\n          onChange={setAccessMode}\n          provisioner={storageProvisioner}\n          loaded\n          availableAccessModes={initialAccessModes}\n          description={accessModeHelp}\n          ignoreReadOnly\n        />\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"request-size-input\">\n        {t('public~Size')}\n      </label>\n      <RequestSizeInput\n        name=\"requestSize\"\n        required\n        onChange={handleRequestSizeInputChange}\n        defaultRequestSizeUnit={requestSizeUnit}\n        defaultRequestSizeValue={requestSizeValue}\n        dropdownUnits={dropdownUnits}\n        describedBy=\"request-size-help\"\n        inputID=\"request-size-input\"\n        testID=\"pvc-size\"\n      />\n      <p className=\"help-block\" id=\"request-size-help\">\n        {t('public~Desired storage capacity')}\n      </p>\n      <Checkbox\n        label={t('public~Use label selectors to request storage')}\n        onChange={handleUseSelector}\n        checked={useSelector}\n        name=\"showLabelSelector\"\n      />\n      <div className=\"form-group\">\n        {useSelector && (\n          <NameValueEditorComponent\n            nameValuePairs={nameValuePairs}\n            valueString={t('public~Selector')}\n            nameString={t('public~Label')}\n            addString={t('public~Add value')}\n            readOnly={false}\n            allowSorting={false}\n            updateParentData={handleNameValuePairs}\n          />\n        )}\n        <p className=\"help-block\" id=\"label-selector-help\">\n          {t(\n            'public~PersistentVolume resources that match all label selectors will be considered for binding.',\n          )}\n        </p>\n      </div>\n      <div className=\"form-group\">\n        <VolumeModeSelector\n          onChange={setVolumeMode}\n          provisioner={storageProvisioner}\n          accessMode={accessMode}\n          storageClass={storageClass}\n          loaded\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const CreatePVCPage: React.FC<CreatePVCPageProps> = (props) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const [error, setError] = React.useState('');\n  const [inProgress, setInProgress] = React.useState(false);\n  const [pvcObj, setPvcObj] = React.useState(null);\n  const { namespace } = props;\n  const title = t('public~Create PersistentVolumeClaim');\n\n  const save = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    setInProgress(true);\n    k8sCreate(PersistentVolumeClaimModel, pvcObj).then(\n      (resource) => {\n        setInProgress(false);\n        navigate(resourceObjPath(resource, referenceFor(resource)));\n      },\n      ({ message }: { message: string }) => {\n        setError(message || 'Could not create persistent volume claim.');\n        setInProgress(false);\n      },\n    );\n  };\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading\n        title={title}\n        link={\n          <Link\n            to={`/k8s/ns/${namespace}/persistentvolumeclaims/~new`}\n            id=\"yaml-link\"\n            data-test=\"yaml-link\"\n            replace\n          >\n            {t('public~Edit YAML')}\n          </Link>\n        }\n      />\n      <div className=\"co-m-pane__body co-m-pane__body--no-top-margin\">\n        <form className=\"co-m-pane__body-group\" onSubmit={save}>\n          <CreatePVCForm onChange={setPvcObj} namespace={namespace} />\n          <ButtonBar errorMessage={error} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button id=\"save-changes\" data-test=\"create-pvc\" type=\"submit\" variant=\"primary\">\n                {t('public~Create')}\n              </Button>\n              <Button onClick={() => navigate(-1)} type=\"button\" variant=\"secondary\">\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport const CreatePVC = () => {\n  const params = useParams();\n  return <CreatePVCPage namespace={params.ns} />;\n};\n\nexport type CreatePVCFormProps = {\n  namespace: string;\n  onChange: (K8sResourceKind) => void;\n};\n\nexport type CreatePVCPageProps = {\n  namespace: string;\n};\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\n\nexport const cephRBDProvisionerSuffix = 'rbd.csi.ceph.com';\n\nexport const snapshotPVCStorageClassAnnotation = 'snapshot.storage.kubernetes.io/pvc-storage-class';\nexport const snapshotPVCAccessModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-access-modes';\nexport const snapshotPVCVolumeModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-volume-mode';\n\ntype AccessMode = 'ReadWriteOnce' | 'ReadWriteMany' | 'ReadOnlyMany' | 'ReadWriteOncePod';\ntype VolumeMode = 'Filesystem' | 'Block';\n\nexport const initialAccessModes: AccessMode[] = [\n  'ReadWriteOnce',\n  'ReadWriteMany',\n  'ReadOnlyMany',\n  'ReadWriteOncePod',\n];\nexport const initialVolumeModes: VolumeMode[] = ['Filesystem', 'Block'];\n\ntype PartialMatch = { partialMatch?: boolean };\ntype ModeMapping = {\n  [volumeMode in VolumeMode]?: AccessMode[];\n};\ntype AccessModeMapping = ModeMapping & PartialMatch;\n\ntype ProvisionerAccessModeMapping = {\n  [provisioner: string]: AccessModeMapping;\n};\n\n// See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes and\n// https://docs.openshift.com/container-platform/4.15/storage/understanding-persistent-storage.html for more details\nexport const provisionerAccessModeMapping: ProvisionerAccessModeMapping = Object.freeze({\n  'kubernetes.io/no-provisioner': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/aws-ebs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/gce-pd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/glusterfs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/cinder': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-file': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-disk': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/quobyte': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/rbd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/vsphere-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/portworx-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/scaleio': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/storageos': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  // Since 4.6 new provisioners names will be without the 'kubernetes.io/' prefix.\n  'manila.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'ebs.csi.aws.com': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'block.csi.ibm.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'csi.ovirt.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'cinder.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'pd.csi.storage.gke.io': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'cephfs.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'rbd.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'file.csi.azure.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n});\n\nexport const getAccessModeOptions = () => [\n  {\n    value: 'ReadWriteOnce',\n    title: i18next.t('public~Single user (RWO)'),\n  },\n  {\n    value: 'ReadWriteMany',\n    title: i18next.t('public~Shared access (RWX)'),\n  },\n  {\n    value: 'ReadOnlyMany',\n    title: i18next.t('public~Read only (ROX)'),\n  },\n  {\n    value: 'ReadWriteOncePod',\n    title: i18next.t('public~Read write once pod (RWOP)'),\n  },\n];\n\nexport const getVolumeModeRadios = () => [\n  {\n    value: 'Filesystem',\n    title: i18next.t('public~Filesystem'),\n  },\n  {\n    value: 'Block',\n    title: i18next.t('public~Block'),\n  },\n];\n\nexport const dropdownUnits = {\n  i: 'B',\n  Ki: 'KiB',\n  Mi: 'MiB',\n  Gi: 'GiB',\n  Ti: 'TiB',\n  Pi: 'PiB',\n  Ei: 'EiB',\n};\n\nexport const getProvisionerModeMapping = (provisioner: string): ModeMapping =>\n  _.omit(\n    _.find(provisionerAccessModeMapping, (value: AccessModeMapping, key: string) => {\n      if (value?.partialMatch && provisioner?.includes(key)) {\n        return true;\n      }\n      if (key === provisioner) {\n        return true;\n      }\n      return false;\n    }) || {},\n    'partialMatch',\n  );\n\nexport const getAccessModeForProvisioner = (\n  provisioner: string,\n  ignoreReadOnly?: boolean,\n  volumeMode?: string,\n): AccessMode[] => {\n  let accessModes: AccessMode[];\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    accessModes = volumeMode\n      ? modeMapping[volumeMode]\n      : Object.keys(modeMapping)\n          .map((mode) => modeMapping[mode])\n          .flat();\n  } else {\n    accessModes = initialAccessModes;\n  }\n\n  // remove duplicate in accessModes\n  accessModes = [...new Set(accessModes)];\n\n  // Ignore ReadOnly related access for create-pvc\n  return ignoreReadOnly ? accessModes.filter((modes) => modes !== 'ReadOnlyMany') : accessModes;\n};\n\nexport const getVolumeModeForProvisioner = (\n  provisioner: string,\n  accessMode: string,\n): VolumeMode[] => {\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    return accessMode\n      ? (Object.keys(modeMapping).filter((volumeMode) =>\n          modeMapping[volumeMode].includes(accessMode),\n        ) as VolumeMode[])\n      : (Object.keys(modeMapping) as VolumeMode[]);\n  }\n  return initialVolumeModes;\n};\n","import * as React from 'react';\n\nexport const Checkbox: React.SFC<CheckboxProps> = ({ name, label, checked, onChange }) => (\n  <div className=\"form-group\">\n    <div className=\"checkbox\">\n      <label className=\"control-label\">\n        <input\n          data-test={`${label}__checkbox`}\n          className=\"form-checkbox\"\n          name={name}\n          onChange={onChange}\n          checked={checked}\n          data-checked-state={checked}\n          type=\"checkbox\"\n        />\n        {label}\n      </label>\n    </div>\n  </div>\n);\n\nexport type CheckboxProps = {\n  name: string;\n  label: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n  checked: boolean;\n};\n","import * as React from 'react';\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectList,\n  MenuToggle,\n  MenuToggleElement,\n} from '@patternfly/react-core';\nimport * as _ from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport {\n  getAccessModeForProvisioner,\n  getAccessModeOptions,\n} from '@console/internal/components/storage/shared';\nimport { PersistentVolumeClaimKind } from '@console/internal/module/k8s';\n\nexport const getPVCAccessModes = (resource: PersistentVolumeClaimKind, key: string) =>\n  _.reduce(\n    resource?.spec?.accessModes,\n    (res, value) => {\n      const mode = getAccessModeOptions().find((accessMode) => accessMode.value === value);\n      if (mode) {\n        res.push(mode[key]);\n      }\n      return res;\n    },\n    [],\n  );\n\nexport const AccessModeSelector: React.FC<AccessModeSelectorProps> = (props) => {\n  const {\n    className,\n    pvcResource,\n    filterByVolumeMode,\n    onChange,\n    loaded,\n    provisioner,\n    availableAccessModes = [],\n    description,\n    ignoreReadOnly,\n  } = props;\n\n  const { t } = useTranslation();\n  const pvcInitialAccessMode = pvcResource\n    ? getPVCAccessModes(pvcResource, 'value')\n    : availableAccessModes;\n  const volumeMode: string = pvcResource?.spec?.volumeMode;\n\n  const [allowedAccessModes, setAllowedAccessModes] = React.useState<string[]>();\n  const [accessMode, setAccessMode] = React.useState<string>();\n\n  const changeAccessMode = React.useCallback(\n    (mode: string) => {\n      setAccessMode(mode);\n      onChange(mode);\n    },\n    [onChange],\n  );\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState<string>(\n    getAccessModeOptions().find((mode) => mode.value === pvcInitialAccessMode[0]).title,\n  );\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (_event: undefined, value: { val: string; label: string }) => {\n    setIsOpen(!isOpen);\n    setSelected(value.label);\n    changeAccessMode(value.val);\n  };\n  const selectOptions = getAccessModeOptions().map((option) => {\n    const disabled = !allowedAccessModes?.includes(option.value);\n    return (\n      <SelectOption\n        key={option.title}\n        value={{ val: option.value, label: option.title }}\n        isDisabled={disabled}\n        isSelected={accessMode === option.value}\n      >\n        {option.title}\n      </SelectOption>\n    );\n  });\n\n  const toggle = (toggleRef: React.Ref<MenuToggleElement>) => (\n    <MenuToggle\n      ref={toggleRef}\n      onClick={onToggleClick}\n      isExpanded={isOpen}\n      style={\n        {\n          width: '200px',\n        } as React.CSSProperties\n      }\n    >\n      {selected}\n    </MenuToggle>\n  );\n\n  React.useEffect(() => {\n    if (loaded) {\n      setAllowedAccessModes(\n        getAccessModeForProvisioner(\n          provisioner,\n          ignoreReadOnly,\n          filterByVolumeMode ? volumeMode : null,\n        ),\n      );\n    }\n  }, [filterByVolumeMode, ignoreReadOnly, loaded, provisioner, volumeMode]);\n\n  React.useEffect(() => {\n    // Make sure the default or already checked option button value is from any one of allowed the access mode\n    if (allowedAccessModes) {\n      if (!accessMode && allowedAccessModes.includes(pvcInitialAccessMode[0])) {\n        // To view the same access mode value of pvc\n        changeAccessMode(pvcInitialAccessMode[0]);\n      } else if (!allowedAccessModes.includes(accessMode)) {\n        // Old access mode will be disabled\n        changeAccessMode(allowedAccessModes[0]);\n      }\n    }\n  }, [accessMode, allowedAccessModes, changeAccessMode, pvcInitialAccessMode]);\n\n  return (\n    <FormGroup\n      label={t('console-app~Access mode')}\n      isRequired\n      fieldId=\"access-mode\"\n      className={className}\n    >\n      {loaded && allowedAccessModes && (\n        <Select\n          isOpen={isOpen}\n          selected={selected}\n          onSelect={onSelect}\n          onOpenChange={(open) => setIsOpen(open)}\n          toggle={toggle}\n          shouldFocusToggleOnSelect\n        >\n          <SelectList>{selectOptions}</SelectList>\n        </Select>\n      )}\n\n      {allowedAccessModes && allowedAccessModes && description && (\n        <p className=\"help-block\" id=\"access-mode-help\">\n          {description}\n        </p>\n      )}\n      {(!loaded || !allowedAccessModes) && <div className=\"skeleton-text\" />}\n    </FormGroup>\n  );\n};\n\ntype AccessModeSelectorProps = {\n  className?: string;\n  pvcResource?: PersistentVolumeClaimKind;\n  filterByVolumeMode?: boolean;\n  onChange: (accessMode: string) => void;\n  availableAccessModes?: string[];\n  loaded: boolean;\n  loadError?: any;\n  provisioner: string;\n  description?: string;\n  ignoreReadOnly?: boolean;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\n/* eslint-disable import/named */\nimport { WithTranslation, withTranslation } from 'react-i18next';\n\nimport { Firehose, LoadingInline, Dropdown, ResourceName, ResourceIcon } from '.';\nimport { isDefaultClass } from '../storage-class';\nimport * as classNames from 'classnames';\n\n/* Component StorageClassDropdown - creates a dropdown list of storage classes */\n\nexport class StorageClassDropdownInnerWithTranslation extends React.Component<\n  StorageClassDropdownInnerProps,\n  StorageClassDropdownInnerState\n> {\n  readonly state: StorageClassDropdownInnerState = {\n    items: {},\n    name: this.props.name,\n    selectedKey: this.props.selectedKey,\n    title: <LoadingInline />,\n    defaultClass: this.props.defaultClass,\n  };\n\n  UNSAFE_componentWillMount() {\n    this.UNSAFE_componentWillReceiveProps(this.props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { loaded, loadError, resources, t } = nextProps;\n\n    if (loadError) {\n      this.setState({\n        title: (\n          <div className=\"cos-error-title\">\n            {t('public~Error loading {{desc}}', { desc: nextProps.desc })}\n          </div>\n        ),\n      });\n      return;\n    }\n    if (!loaded) {\n      return;\n    }\n\n    const state = {\n      items: {},\n      title: {},\n      defaultClass: '',\n    };\n    let unorderedItems = {};\n    const noStorageClass = t('public~No default StorageClass');\n    _.map(resources.StorageClass.data, (resource) => {\n      unorderedItems[resource.metadata.name] = {\n        kindLabel: 'StorageClass',\n        name: resource.metadata.name,\n        description: _.get(resource, 'metadata.annotations.description', ''),\n        default: isDefaultClass(resource),\n        accessMode: _.get(\n          resource,\n          ['metadata', 'annotations', 'storage.alpha.openshift.io/access-mode'],\n          '',\n        ),\n        provisioner: resource.provisioner,\n        parameters: resource.parameters,\n        type: _.get(resource, 'parameters.type', ''),\n        zone: _.get(resource, 'parameters.zone', ''),\n        resource,\n      };\n    });\n\n    //Filter if user provides a custom function\n    if (nextProps.filter) {\n      unorderedItems = Object.keys(unorderedItems)\n        .filter((sc) => nextProps.filter(unorderedItems[sc]))\n        .reduce((acc, key) => {\n          acc[key] = unorderedItems[key];\n          return acc;\n        }, {});\n    }\n\n    // Determine if there is a default storage class\n    state.defaultClass = _.findKey(unorderedItems, 'default');\n    const { selectedKey } = this.state;\n    if (!state.defaultClass) {\n      // Add No Storage Class option if there is not a default storage class\n      unorderedItems[''] = { kindLabel: '', name: noStorageClass };\n    }\n\n    if (!this.props.loaded || !selectedKey || !unorderedItems[selectedKey || state.defaultClass]) {\n      state.title = <span className=\"text-muted\">{t('public~Select StorageClass')}</span>;\n    }\n\n    const selectedItem = unorderedItems[selectedKey || state.defaultClass];\n    if (selectedItem) {\n      state.title = this.getTitle(selectedItem);\n    }\n\n    Object.keys(unorderedItems)\n      .sort()\n      .forEach((key) => {\n        state.items[key] = unorderedItems[key];\n      });\n    this.setState(state);\n  }\n\n  componentDidMount() {\n    const { defaultClass } = this.state;\n    if (defaultClass) {\n      this.onChange(defaultClass);\n    }\n  }\n\n  componentDidUpdate() {\n    const { defaultClass, selectedKey } = this.state;\n    if (selectedKey) {\n      this.onChange(selectedKey);\n    } else if (defaultClass) {\n      this.onChange(defaultClass);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !_.isEqual(this.state, nextState);\n  }\n\n  autocompleteFilter = (text, item) => fuzzy(text, item.props.name);\n\n  getTitle = (storageClass) => {\n    return storageClass.kindLabel ? (\n      <ResourceName kind=\"StorageClass\" name={storageClass.name} />\n    ) : (\n      <span>{storageClass.name}</span>\n    );\n  };\n\n  onChange = (key) => {\n    const storageClass = _.get(this.state, ['items', key], {});\n    this.setState(\n      {\n        selectedKey: key,\n        title: this.getTitle(storageClass),\n      },\n      () => this.props.onChange(storageClass.resource),\n    );\n  };\n\n  render() {\n    const { id, loaded, describedBy, noSelection, t } = this.props;\n    const items = {};\n    _.each(\n      this.state.items,\n      (props, key) =>\n        (items[key] = key ? (\n          <StorageClassDropdownEntry {...props} />\n        ) : (\n          <StorageClassDropdownNoStorageClassOption {...props} />\n        )),\n    );\n\n    const { selectedKey, defaultClass } = this.state;\n\n    // Only show the dropdown if 'no storage class' is not the only option which depends on defaultClass\n    const itemsAvailableToShow = defaultClass || _.size(items) > 1;\n    return (\n      <>\n        {loaded && itemsAvailableToShow && (\n          <div>\n            <label\n              className={classNames('control-label', this.props.hideClassName, {\n                'co-required': this.props.required,\n              })}\n              htmlFor={id}\n            >\n              {t('public~StorageClass')}\n            </label>\n            <Dropdown\n              className=\"co-storage-class-dropdown\"\n              dropDownClassName=\"dropdown--full-width\"\n              autocompleteFilter={this.autocompleteFilter}\n              autocompletePlaceholder={t('public~Select StorageClass')}\n              items={items}\n              selectedKey={selectedKey}\n              title={this.state.title}\n              onChange={this.onChange}\n              id={id}\n              dataTest={this.props?.['data-test']}\n              noSelection={noSelection}\n              menuClassName=\"dropdown-menu--text-wrap\"\n            />\n            {describedBy && (\n              <p className=\"help-block\" id={describedBy}>\n                {t('public~StorageClass for the new claim')}\n              </p>\n            )}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport const StorageClassDropdownInner = withTranslation()(\n  StorageClassDropdownInnerWithTranslation,\n);\n\nexport const StorageClassDropdown = (props) => {\n  return (\n    <Firehose resources={[{ kind: 'StorageClass', prop: 'StorageClass', isList: true }]}>\n      <StorageClassDropdownInner {...props} />\n    </Firehose>\n  );\n};\n\nconst StorageClassDropdownEntry = (props) => {\n  const storageClassProperties = [\n    props.default ? ' (default)' : '',\n    props.description,\n    props.accessMode,\n    props.provisioner,\n    props.type,\n    props.zone,\n  ];\n  const storageClassDescriptionLine = _.compact(storageClassProperties).join(' | ');\n  return (\n    <span className=\"co-resource-item\">\n      <ResourceIcon kind={props.kindLabel} />\n      <span className=\"co-resource-item__resource-name\">\n        {props.name}\n        <div className=\"text-muted small\"> {storageClassDescriptionLine}</div>\n      </span>\n    </span>\n  );\n};\n\nconst StorageClassDropdownNoStorageClassOption = (props) => {\n  return (\n    <span className=\"co-resource-item\">\n      <span className=\"co-resource-item__resource-name\">{props.name}</span>\n    </span>\n  );\n};\n\nexport type StorageClassDropdownInnerState = {\n  items: any;\n  name: string;\n  selectedKey: string;\n  title: React.ReactNode;\n  defaultClass: string;\n};\n\nexport type StorageClassDropdownInnerProps = WithTranslation & {\n  id?: string;\n  loaded?: boolean;\n  resources?: any;\n  name: string;\n  onChange: (object) => void;\n  describedBy: string;\n  defaultClass: string;\n  required?: boolean;\n  hideClassName?: string;\n  filter?: (param) => boolean;\n  noSelection?: boolean;\n  selectedKey?: string;\n};\n","import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { RadioInput } from '@console/internal/components/radio';\nimport {\n  getVolumeModeRadios,\n  getVolumeModeForProvisioner,\n  initialVolumeModes,\n} from '@console/internal/components/storage/shared';\nimport { FieldLevelHelp } from '@console/internal/components/utils';\nimport { PersistentVolumeClaimKind } from '@console/internal/module/k8s';\n\nexport const VolumeModeSelector: React.FC<VolumeModeSelectorProps> = (props) => {\n  const {\n    className,\n    pvcResource,\n    accessMode,\n    onChange,\n    provisioner,\n    storageClass,\n    availableVolumeMode,\n    loaded,\n  } = props;\n\n  const { t } = useTranslation();\n  const pvcInitialVolumeMode: string = pvcResource\n    ? pvcResource?.spec?.volumeMode\n    : availableVolumeMode ?? initialVolumeModes[0];\n\n  const [volumeMode, setVolumeMode] = React.useState<string>();\n  const allowedVolumeModes: string[] = React.useMemo(\n    () => (loaded ? getVolumeModeForProvisioner(provisioner, accessMode) : []),\n    [loaded, provisioner, accessMode],\n  );\n\n  const changeVolumeMode = React.useCallback(\n    (mode: string) => {\n      setVolumeMode(mode);\n      onChange(mode);\n    },\n    [onChange],\n  );\n\n  React.useEffect(() => {\n    if (!allowedVolumeModes.length) {\n      return;\n    }\n    // Make sure the default or already checked radio button value is from any one of allowed the access mode\n    if (!volumeMode && allowedVolumeModes.includes(pvcInitialVolumeMode)) {\n      // To view the same volume mode value of pvc\n      changeVolumeMode(pvcInitialVolumeMode);\n    } else if (!allowedVolumeModes.includes(volumeMode)) {\n      // Old volume mode will be disabled\n      changeVolumeMode(allowedVolumeModes[0]);\n    }\n  }, [volumeMode, allowedVolumeModes, onChange, pvcInitialVolumeMode, changeVolumeMode]);\n\n  return (\n    <FormGroup\n      fieldId=\"volume-mode\"\n      className={className}\n      label={t('console-app~Volume mode')}\n      isRequired\n    >\n      {allowedVolumeModes.length === 1 ? (\n        <>\n          {allowedVolumeModes[0]}\n          <FieldLevelHelp>\n            <Trans t={t} ns=\"console-app\">\n              Only {{ volumeMode }} volume mode is available for {{ storageClass }} with{' '}\n              {{ accessMode }} access mode\n            </Trans>\n          </FieldLevelHelp>\n        </>\n      ) : (\n        getVolumeModeRadios().map((radio) => (\n          <RadioInput\n            {...radio}\n            key={radio.value}\n            onChange={(event) => changeVolumeMode(event.currentTarget.value)}\n            inline\n            checked={radio.value === volumeMode}\n            name=\"volumeMode\"\n            disabled={!allowedVolumeModes.includes(radio.value)}\n          />\n        ))\n      )}\n    </FormGroup>\n  );\n};\n\ntype VolumeModeSelectorProps = {\n  className?: string;\n  pvcResource?: PersistentVolumeClaimKind;\n  accessMode: string;\n  onChange: (volumeMode: string) => void;\n  provisioner: string;\n  storageClass: string;\n  availableVolumeMode?: string;\n  loaded: boolean;\n};\n"],"sourceRoot":""}