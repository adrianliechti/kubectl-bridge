{"version":3,"sources":["webpack:///./public/components/cluster-settings/google-idp-form.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/idp-name-input.tsx"],"names":["AddGooglePage","navigate","inProgress","setInProgress","errorMessage","setErrorMessage","name","setName","clientID","setClientID","clientSecret","setClientSecret","hostedDomain","setHostedDomain","t","handlePromise","promise","then","res","thenPromise","error","err","message","Promise","reject","catchError","addGoogleIDP","oauth","clientSecretName","dryRun","idp","type","mappingMethod","google","title","className","helpText","onSubmit","e","preventDefault","secret","apiVersion","kind","metadata","generateName","namespace","stringData","createClientSecret","catch","value","onChange","currentTarget","htmlFor","id","required","variant","onClick","getOAuthResource","addIDP","patch","spec","identityProviders","op","path","queryParams","redirectToOAuthPage","mockNames","ca","IDPNameInput"],"mappings":"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","file":"google-idp-form-chunk-1a0e24cc12e91b69a2ff.min.js","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, PageHeading } from '../utils';\nimport { addIDP, getOAuthResource as getOAuth, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\n\nexport const AddGooglePage = () => {\n  const navigate = useNavigate();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [name, setName] = React.useState('google');\n  const [clientID, setClientID] = React.useState('');\n  const [clientSecret, setClientSecret] = React.useState('');\n  const [hostedDomain, setHostedDomain] = React.useState('');\n\n  const { t } = useTranslation();\n\n  const thenPromise = (res) => {\n    setInProgress(false);\n    setErrorMessage('');\n    return res;\n  };\n\n  const catchError = (error) => {\n    const err = error.message || t('public~An error occurred. Please try again.');\n    setInProgress(false);\n    setErrorMessage(err);\n    return Promise.reject(err);\n  };\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n\n    return promise.then(\n      (res) => thenPromise(res),\n      (error) => catchError(error),\n    );\n  };\n\n  const getOAuthResource = () => {\n    return handlePromise(getOAuth());\n  };\n\n  const createClientSecret = () => {\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'google-client-secret-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        clientSecret,\n      },\n    };\n\n    return handlePromise(k8sCreate(SecretModel, secret));\n  };\n\n  const addGoogleIDP = (oauth: OAuthKind, clientSecretName: string, dryRun?: boolean) => {\n    const idp: IdentityProvider = {\n      name,\n      type: 'Google',\n      mappingMethod: 'claim',\n      google: {\n        hostedDomain,\n        clientID,\n        clientSecret: {\n          name: clientSecretName,\n        },\n      },\n    };\n\n    return handlePromise(addIDP(oauth, idp, dryRun));\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    // Clear any previous errors.\n    setErrorMessage('');\n    getOAuthResource().then((oauth: OAuthKind) => {\n      addGoogleIDP(oauth, mockNames.secret, true)\n        .then(() => {\n          return createClientSecret()\n            .then((secret: K8sResourceKind) => addGoogleIDP(oauth, secret.metadata.name))\n            .then(() => {\n              redirectToOAuthPage(navigate);\n            });\n        })\n        .catch((err) => {\n          setErrorMessage(err);\n        });\n    });\n  };\n\n  const title = t('public~Add Identity Provider: Google');\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading\n        title={title}\n        helpText={t(\n          'public~You can use Google integration for users authenticating with Google credentials.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={submit} name=\"form\" className=\"co-m-pane__body-group\">\n          <IDPNameInput value={name} onChange={(e) => setName(e.currentTarget.value)} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-id\">\n              {t('public~Client ID')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={(e) => setClientID(e.currentTarget.value)}\n              value={clientID}\n              id=\"client-id\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-secret\">\n              {t('public~Client secret')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"password\"\n              onChange={(e) => setClientSecret(e.currentTarget.value)}\n              value={clientSecret}\n              id=\"client-secret\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"hosted-domain\">\n              {t('public~Hosted domain')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={(e) => setHostedDomain(e.currentTarget.value)}\n              value={hostedDomain}\n              id=\"hosted-domain\"\n              aria-describedby=\"idp-hosted-domain-help\"\n              required\n            />\n            <p className=\"help-block\" id=\"idp-hosted-domain-help\">\n              {t('public~Restrict users to a Google App domain.')}\n            </p>\n          </div>\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                {t('public~Add')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport type AddGooglePageState = {\n  name: string;\n  hostedDomain: string;\n  clientID: string;\n  clientSecret: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { resourcePathFromModel } from '../utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? { queryParams: { dryRun: 'All' } } : {});\n};\n\nexport const redirectToOAuthPage = (navigate) => {\n  const path = `${resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME)}?idpAdded=true`;\n  navigate(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n        {t('public~Name')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        onChange={onChange}\n        value={value}\n        aria-describedby=\"idp-name-help\"\n        id=\"idp-name\"\n        required\n      />\n      <p className=\"help-block\" id=\"idp-name-help\">\n        {t('public~Unique name of the new identity provider. This cannot be changed later.')}\n      </p>\n    </div>\n  );\n};\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n"],"sourceRoot":""}