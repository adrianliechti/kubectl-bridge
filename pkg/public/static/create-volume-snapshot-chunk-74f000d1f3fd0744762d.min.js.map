{"version":3,"sources":["webpack:///./public/components/persistent-volume-claim.jsx","webpack:///./packages/console-app/src/components/volume-snapshot/create-volume-snapshot/create-volume-snapshot.tsx","webpack:///./public/components/utils/k8s-get-hook.ts","webpack:///./public/components/storage/shared.ts","webpack:///./public/components/modals/delete-pvc-modal.tsx","webpack:///./public/components/utils/pvc-dropdown.tsx"],"names":["ModifyLabels","ModifyAnnotations","Edit","ExpandPVC","PVCSnapshot","ClonePVC","factory","menuActions","getExtensionsActionsForKind","kind","pvc","label","t","callback","accessReview","PVCStatus","pvcStatusExtensions","resolved","length","priorityStatus","sort","a","b","properties","priority","find","status","predicate","PriorityStatusComponent","metadata","deletionTimestamp","phase","tableColumnClasses","columnClass","PVCTableRow","UI","obj","metrics","getIn","usedCapacity","name","namespace","totalCapacityMetric","capacity","storage","totalCapcityHumanized","className","title","columnID","spec","volumeName","string","storageClassName","actions","resource","Details","CAN_LIST_PV","flags","canListPV","labelSelector","selector","requestedStorage","accessModes","volumeMode","conditions","query","response","loadError","loading","endpoint","QUERY","totalRequestMetric","usedMetrics","data","result","value","availableMetrics","totalCapacity","availableCapacity","undefined","unit","podStatusInnerRadius","innerRadius","podStatusOuterRadius","radius","availableCapacityString","Number","toFixed","totalCapacityString","donutData","x","y","pvcAlertExtensions","alertComponents","map","alert","AlertComponent","uid","key","text","ariaDesc","ariaTitle","height","width","size","labels","datum","subTitle","constrainToVisibleArea","join","PersistentVolumeClaimsList","props","Header","sortField","transforms","id","sortFunc","Row","virtualize","PersistentVolumeClaimsPage","createPropExtensions","dispatch","pvcMetrics","reduce","acc","item","metric","persistentvolumeclaim","initPath","createItems","path","i","createProps","to","concat","items","Object","assign","0","createLink","wizardName","toString","filters","filterGroupName","type","reducer","ListComponent","canCreate","rowFilters","customData","PersistentVolumeClaimsDetailsPage","getResourceStatus","pages","details","editYaml","events","LoadingComponent","span","SnapshotClassDropdown","selectedKey","filter","resources","desc","dataFilter","selectedKeyKind","placeholder","PVCSummary","persistentVolumeClaim","storageClass","requestedCapacity","requests","sizeBase","sizeMetrics","accessMode","isDefaultSnapshotClass","volumeSnapshotClass","defaultSnapshotClassAnnotation","CreateSnapshotForm","pvcName","handlePromise","inProgress","errorMessage","selectedPVCName","setSelectedPVCName","pvcObj","setPVCObj","snapshotName","setSnapshotName","snapshotClassName","setSnapshotClassName","vscObj","vscErr","scObjList","scObjListLoaded","scObjListErr","resourceWatch","isList","loaded","provisioner","sc","snapshotClassFilter","snapshotClass","includes","driver","vscList","getDefaultItem","snapFilter","filteredVSC","defaultFilteredVSC","currentPVC","link","replace","onSubmit","event","preventDefault","snapshotTemplate","apiVersion","annotations","volumeSnapshotClassName","source","persistentVolumeClaimName","push","ns","dataTest","onChange","htmlFor","currentTarget","required","variant","isInline","isDisabled","onClick","goBack","hasGutter","VolumeSnapshot","params","useK8sGet","opts","setData","setLoaded","setLoadError","error","snapshotPVCStorageClassAnnotation","snapshotPVCAccessModeAnnotation","snapshotPVCVolumeModeAnnotation","initialAccessModes","initialVolumeModes","provisionerAccessModeMapping","freeze","Filesystem","Block","partialMatch","getAccessModeOptions","getVolumeModeRadios","dropdownUnits","Ki","Mi","Gi","Ti","Pi","Ei","getProvisionerModeMapping","getAccessModeForProvisioner","ignoreReadOnly","modeMapping","keys","mode","flat","Set","modes","getVolumeModeForProvisioner","DeletePVCModal","close","cancel","pvcDeleteExtensions","pvcMetadata","navigate","PVCAlert","e","promise","extensionPromises","onPVCKill","Promise","all","submitText","submitDanger","PVCDropdown"],"mappings":"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","file":"create-volume-snapshot-chunk-74f000d1f3fd0744762d.min.js","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { useDispatch, connect } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport { useExtensions } from '@console/plugin-sdk';\nimport {\n  isPVCAlert,\n  isPVCCreateProp,\n  isPVCStatus,\n} from '@console/dynamic-plugin-sdk/src/extensions/pvc';\nimport { useResolvedExtensions } from '@console/dynamic-plugin-sdk';\nimport {\n  Status,\n  FLAGS,\n  calculateRadius,\n  getNamespace,\n  getName,\n  getRequestedPVCSize,\n} from '@console/shared';\nimport { connectToFlags } from '../reducers/connectToFlags';\nimport { Conditions } from './conditions';\nimport { DetailsPage, ListPage, Table, TableData } from './factory';\nimport {\n  Kebab,\n  navFactory,\n  ResourceKebab,\n  SectionHeading,\n  ResourceLink,\n  ResourceSummary,\n  Selector,\n  humanizeBinaryBytes,\n  convertToBaseValue,\n  asAccessReview,\n} from './utils';\nimport { ResourceEventStream } from './events';\nimport { PersistentVolumeClaimModel } from '../models';\nimport { setPVCMetrics } from '../actions/ui';\nimport { PrometheusEndpoint } from './graphs/helpers';\nimport { usePrometheusPoll } from './graphs/prometheus-poll-hook';\nimport deletePVCModal from './modals/delete-pvc-modal';\nimport i18next from 'i18next';\n\nconst { ModifyLabels, ModifyAnnotations, Edit, ExpandPVC, PVCSnapshot, ClonePVC } = Kebab.factory;\nconst menuActions = [\n  ...Kebab.getExtensionsActionsForKind(PersistentVolumeClaimModel),\n  ExpandPVC,\n  PVCSnapshot,\n  ClonePVC,\n  ModifyLabels,\n  ModifyAnnotations,\n  Edit,\n  (kind, pvc) => ({\n    label: i18next.t('public~Delete PersistentVolumeClaim'),\n    callback: () =>\n      deletePVCModal({\n        pvc,\n      }),\n    accessReview: asAccessReview(kind, pvc, 'delete'),\n  }),\n];\n\nexport const PVCStatus = ({ pvc }) => {\n  const { t } = useTranslation();\n  const [pvcStatusExtensions, resolved] = useResolvedExtensions(isPVCStatus);\n  if (resolved && pvcStatusExtensions.length > 0) {\n    const sortedByPriority = pvcStatusExtensions.sort(\n      (a, b) => b.properties.priority - a.properties.priority,\n    );\n    const priorityStatus = sortedByPriority.find((status) => status.properties.predicate(pvc));\n    const PriorityStatusComponent = priorityStatus?.properties?.status;\n\n    return PriorityStatusComponent ? (\n      <PriorityStatusComponent pvc={pvc} />\n    ) : (\n      <Status\n        status={pvc.metadata.deletionTimestamp ? t('public~Terminating') : pvc.status.phase}\n      />\n    );\n  }\n\n  return (\n    <Status status={pvc.metadata.deletionTimestamp ? t('public~Terminating') : pvc.status.phase} />\n  );\n};\n\nconst tableColumnClasses = [\n  '', // name\n  '', // namespace\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // status\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // persistence volume\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // capacity\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), // used capacity\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), // storage class\n  Kebab.columnClass,\n];\n\nconst kind = 'PersistentVolumeClaim';\n\nconst mapStateToProps = ({ UI }, { obj }) => ({\n  metrics: UI.getIn(['metrics', 'pvc'])?.usedCapacity?.[getNamespace(obj)]?.[getName(obj)],\n});\n\nconst PVCTableRow = connect(mapStateToProps)(({ obj, metrics }) => {\n  const [name, namespace] = [getName(obj), getNamespace(obj)];\n  const totalCapacityMetric = convertToBaseValue(obj?.status?.capacity?.storage);\n  const totalCapcityHumanized = humanizeBinaryBytes(totalCapacityMetric);\n  const usedCapacity = humanizeBinaryBytes(metrics);\n  const { t } = useTranslation();\n  return (\n    <>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={name} namespace={namespace} title={name} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        columnID=\"namespace\"\n      >\n        <ResourceLink kind=\"Namespace\" name={namespace} title={namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <PVCStatus pvc={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {_.get(obj, 'spec.volumeName') ? (\n          <ResourceLink\n            kind=\"PersistentVolume\"\n            name={obj.spec.volumeName}\n            title={obj.spec.volumeName}\n          />\n        ) : (\n          <div className=\"text-muted\">{t('public~No PersistentVolume')}</div>\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {totalCapacityMetric ? totalCapcityHumanized.string : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>{metrics ? usedCapacity.string : '-'}</TableData>\n      <TableData className={classNames(tableColumnClasses[6])}>\n        {obj?.spec?.storageClassName ? (\n          <ResourceLink\n            kind=\"StorageClass\"\n            name={obj.spec.storageClassName}\n            title={obj.spec.storageClassName}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </>\n  );\n});\n\nconst Details_ = ({ flags, obj: pvc }) => {\n  const canListPV = flags[FLAGS.CAN_LIST_PV];\n  const name = pvc?.metadata?.name;\n  const namespace = pvc?.metadata?.namespace;\n  const labelSelector = pvc?.spec?.selector;\n  const storageClassName = pvc?.spec?.storageClassName;\n  const volumeName = pvc?.spec?.volumeName;\n  const storage = pvc?.status?.capacity?.storage;\n  const requestedStorage = getRequestedPVCSize(pvc);\n  const accessModes = pvc?.status?.accessModes;\n  const volumeMode = pvc?.spec?.volumeMode;\n  const conditions = pvc?.status?.conditions;\n  const query =\n    name && namespace\n      ? `kubelet_volume_stats_used_bytes{persistentvolumeclaim='${name}',namespace='${namespace}'}`\n      : '';\n  const [response, loadError, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query,\n  });\n\n  const totalCapacityMetric = convertToBaseValue(storage);\n  const totalRequestMetric = convertToBaseValue(requestedStorage);\n  const usedMetrics = response?.data?.result?.[0]?.value?.[1];\n  const availableMetrics = usedMetrics ? totalCapacityMetric - usedMetrics : null;\n  const totalCapacity = humanizeBinaryBytes(totalCapacityMetric);\n  const availableCapacity = humanizeBinaryBytes(availableMetrics, undefined, totalCapacity.unit);\n  const usedCapacity = humanizeBinaryBytes(usedMetrics, undefined, totalCapacity.unit);\n  const { podStatusInnerRadius: innerRadius, podStatusOuterRadius: radius } = calculateRadius(130);\n  const availableCapacityString = `${Number(availableCapacity.value.toFixed(1))} ${\n    availableCapacity.unit\n  }`;\n  const totalCapacityString = `${Number(totalCapacity.value.toFixed(1))} ${totalCapacity.unit}`;\n\n  const donutData = usedMetrics\n    ? [\n        { x: i18next.t('public~Used'), y: usedCapacity.value },\n        { x: i18next.t('public~Available'), y: availableCapacity.value },\n      ]\n    : [{ x: i18next.t('public~Total'), y: totalCapacity.value }];\n\n  const [pvcAlertExtensions] = useResolvedExtensions(isPVCAlert);\n  const alertComponents = pvcAlertExtensions?.map(\n    ({ properties: { alert: AlertComponent }, uid }) => <AlertComponent key={uid} pvc={pvc} />,\n  );\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        {alertComponents}\n        <SectionHeading text={t('public~PersistentVolumeClaim details')} />\n        {totalCapacityMetric && !loading && (\n          <div className=\"co-pvc-donut\">\n            <ChartDonut\n              ariaDesc={\n                availableMetrics\n                  ? t('public~Available versus used capacity')\n                  : t('public~Total capacity')\n              }\n              ariaTitle={\n                availableMetrics\n                  ? t('public~Available versus used capacity')\n                  : t('public~Total capacity')\n              }\n              height={130}\n              width={130}\n              size={130}\n              innerRadius={innerRadius}\n              radius={radius}\n              data={donutData}\n              labels={({ datum }) => `${datum.y} ${totalCapacity.unit} ${datum.x}`}\n              subTitle={availableMetrics ? t('public~Available') : t('public~Total')}\n              title={availableMetrics ? availableCapacityString : totalCapacityString}\n              constrainToVisibleArea={true}\n            />\n          </div>\n        )}\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={pvc}>\n              <dt>{t('public~Label selector')}</dt>\n              <dd data-test-id=\"pvc-name\">\n                <Selector selector={labelSelector} kind=\"PersistentVolume\" />\n              </dd>\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              <dt>{t('public~Status')}</dt>\n              <dd data-test-id=\"pvc-status\">\n                <PVCStatus pvc={pvc} />\n              </dd>\n              <dt>{t('public~Requested capacity')}</dt>\n              <dd data-test=\"pvc-requested-capacity\">\n                {humanizeBinaryBytes(totalRequestMetric).string}\n              </dd>\n              {storage && (\n                <>\n                  <dt>{t('public~Capacity')}</dt>\n                  <dd data-test-id=\"pvc-capacity\">{totalCapacity.string}</dd>\n                </>\n              )}\n              {usedMetrics && _.isEmpty(loadError) && !loading && (\n                <>\n                  <dt>{t('public~Used')}</dt>\n                  <dd>{humanizeBinaryBytes(usedMetrics).string}</dd>\n                </>\n              )}\n              {!_.isEmpty(accessModes) && (\n                <>\n                  <dt>{t('public~Access modes')}</dt>\n                  <dd data-test-id=\"pvc-access-mode\">{accessModes.join(', ')}</dd>\n                </>\n              )}\n              <dt>{t('public~Volume mode')}</dt>\n              <dd data-test-id=\"pvc-volume-mode\">{volumeMode || 'Filesystem'}</dd>\n              <dt>{t('public~StorageClasses')}</dt>\n              <dd data-test-id=\"pvc-storageclass\">\n                {storageClassName ? (\n                  <ResourceLink kind=\"StorageClass\" name={storageClassName} />\n                ) : (\n                  '-'\n                )}\n              </dd>\n              {volumeName && canListPV && (\n                <>\n                  <dt>{t('public~PersistentVolumes')}</dt>\n                  <dd data-test-id=\"persistent-volume\">\n                    <ResourceLink kind=\"PersistentVolume\" name={volumeName} />\n                  </dd>\n                </>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('public~Conditions')} />\n        <Conditions conditions={conditions} />\n      </div>\n    </>\n  );\n};\n\nconst Details = connectToFlags(FLAGS.CAN_LIST_PV)(Details_);\n\nexport const PersistentVolumeClaimsList = (props) => {\n  const { t } = useTranslation();\n  const PVCTableHeader = () => {\n    return [\n      {\n        title: t('public~Name'),\n        sortField: 'metadata.name',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[0] },\n      },\n      {\n        title: t('public~Namespace'),\n        sortField: 'metadata.namespace',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[1] },\n        id: 'namespace',\n      },\n      {\n        title: t('public~Status'),\n        sortField: 'status.phase',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[2] },\n      },\n      {\n        title: t('public~PersistentVolumes'),\n        sortField: 'spec.volumeName',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[3] },\n      },\n      {\n        title: t('public~Capacity'),\n        sortFunc: 'pvcStorage',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[4] },\n      },\n      {\n        title: t('public~Used'),\n        sortFunc: 'pvcUsed',\n        transforms: [sortable],\n        props: { className: tableColumnClasses[5] },\n      },\n      {\n        sortField: 'spec.storageClassName',\n        title: t('public~StorageClass'),\n        transforms: [sortable],\n        props: { className: tableColumnClasses[6] },\n      },\n      {\n        title: '',\n        props: { className: tableColumnClasses[7] },\n      },\n    ];\n  };\n  return (\n    <Table\n      {...props}\n      aria-label={t('public~PersistentVolumeClaims')}\n      Header={PVCTableHeader}\n      Row={PVCTableRow}\n      virtualize\n    />\n  );\n};\n\nexport const PersistentVolumeClaimsPage = (props) => {\n  const { t } = useTranslation();\n  const createPropExtensions = useExtensions(isPVCCreateProp);\n  const { namespace = undefined } = props;\n  const dispatch = useDispatch();\n  const [response, loadError, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query: 'kubelet_volume_stats_used_bytes',\n  });\n  const pvcMetrics =\n    _.isEmpty(loadError) && !loading\n      ? response?.data?.result?.reduce((acc, item) => {\n          _.set(\n            acc,\n            ['usedCapacity', item?.metric?.namespace, item?.metric?.persistentvolumeclaim],\n            Number(item?.value?.[1]),\n          );\n          return acc;\n        }, {})\n      : {};\n  dispatch(setPVCMetrics(pvcMetrics));\n  const initPath = `/k8s/ns/${props.namespace || 'default'}/persistentvolumeclaims/`;\n\n  const createItems = createPropExtensions.map(({ properties: { label, path } }, i) => ({\n    key: i + 1,\n    label,\n    path,\n  }));\n\n  const createProps =\n    createPropExtensions.length === 0\n      ? { to: initPath.concat('~new/form') }\n      : {\n          items: Object.assign(\n            { 0: 'With Form' },\n            ...createItems.map(({ key, label }) => ({ [key]: label })),\n          ),\n          createLink: (wizardName) => {\n            if (wizardName === '0') {\n              return initPath.concat('~new/form');\n            }\n            const item = createItems.find(({ key }) => key.toString() === wizardName);\n            return initPath.concat(item.path);\n          },\n        };\n\n  const allPhases = ['Pending', 'Bound', 'Lost'];\n\n  const filters = [\n    {\n      filterGroupName: t('public~Status'),\n      type: 'pvc-status',\n      reducer: (pvc) => pvc.status.phase,\n      items: _.map(allPhases, (phase) => ({\n        id: phase,\n        title: phase,\n      })),\n    },\n  ];\n\n  return (\n    <ListPage\n      {...props}\n      ListComponent={PersistentVolumeClaimsList}\n      kind={kind}\n      canCreate={true}\n      rowFilters={filters}\n      createProps={createProps}\n      customData={pvcMetrics}\n    />\n  );\n};\n\nexport const PersistentVolumeClaimsDetailsPage = (props) => {\n  const { t } = useTranslation();\n  return (\n    <DetailsPage\n      {...props}\n      getResourceStatus={(pvc) =>\n        pvc.metadata.deletionTimestamp ? t('public~Terminating') : pvc.status.phase\n      }\n      menuActions={menuActions}\n      pages={[\n        navFactory.details(Details),\n        navFactory.editYaml(),\n        navFactory.events(ResourceEventStream),\n      ]}\n    />\n  );\n};\n","import * as React from 'react';\nimport { Grid, GridItem, ActionGroup, Button, Alert } from '@patternfly/react-core';\nimport { Helmet } from 'react-helmet';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useParams, Link } from 'react-router-dom-v5-compat';\nimport { PVCStatus } from '@console/internal/components/persistent-volume-claim';\nimport {\n  getAccessModeOptions,\n  snapshotPVCStorageClassAnnotation,\n  snapshotPVCAccessModeAnnotation,\n  snapshotPVCVolumeModeAnnotation,\n} from '@console/internal/components/storage/shared';\nimport {\n  ListDropdown,\n  ButtonBar,\n  history,\n  ResourceIcon,\n  resourceObjPath,\n  HandlePromiseProps,\n  withHandlePromise,\n  convertToBaseValue,\n  humanizeBinaryBytes,\n  getURLSearchParams,\n  PageHeading,\n} from '@console/internal/components/utils';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { PVCDropdown } from '@console/internal/components/utils/pvc-dropdown';\nimport {\n  PersistentVolumeClaimModel,\n  VolumeSnapshotModel,\n  VolumeSnapshotClassModel,\n  StorageClassModel,\n  NamespaceModel,\n} from '@console/internal/models';\nimport {\n  referenceForModel,\n  k8sCreate,\n  referenceFor,\n  VolumeSnapshotClassKind,\n  StorageClassResourceKind,\n  PersistentVolumeClaimKind,\n  VolumeSnapshotKind,\n  apiVersionForModel,\n  ListKind,\n} from '@console/internal/module/k8s';\nimport { getName, getNamespace, getAnnotations } from '@console/shared';\nimport './_create-volume-snapshot.scss';\n\nconst LoadingComponent: React.FC = () => (\n  <Grid className=\"skeleton-box\">\n    <GridItem span={12} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity\" />\n  </Grid>\n);\n\nconst SnapshotClassDropdown: React.FC<SnapshotClassDropdownProps> = (props) => {\n  const { selectedKey, filter } = props;\n  const kind = referenceForModel(VolumeSnapshotClassModel);\n  const resources = [{ kind }];\n  const { t } = useTranslation();\n  return (\n    <ListDropdown\n      {...props}\n      desc={t('console-app~VolumeSnapshotClass with same provisioner as claim')}\n      dataFilter={filter}\n      resources={resources}\n      selectedKeyKind={kind}\n      placeholder={t('console-app~Select volume snapshot class')}\n      selectedKey={selectedKey}\n    />\n  );\n};\n\nconst PVCSummary: React.FC<PVCSummaryProps> = ({ persistentVolumeClaim }) => {\n  const { t } = useTranslation();\n  const storageClass = persistentVolumeClaim?.spec?.storageClassName;\n  const requestedCapacity = persistentVolumeClaim?.spec?.resources?.requests?.storage;\n  const sizeBase = convertToBaseValue(requestedCapacity);\n  const sizeMetrics = requestedCapacity ? humanizeBinaryBytes(sizeBase).string : '-';\n  const accessModes = getAccessModeOptions().find(\n    (accessMode) => accessMode.value === persistentVolumeClaim?.spec?.accessModes?.[0],\n  );\n  const volumeMode = persistentVolumeClaim?.spec?.volumeMode;\n  return (\n    <dl>\n      <dt className=\"co-volume-snapshot__details-body\">\n        {t('console-app~PersistentVolumeClaim details')}\n      </dt>\n      <dt>{t('console-app~Name')}</dt>\n      <dd>\n        <ResourceIcon kind={PersistentVolumeClaimModel.kind} />\n        {getName(persistentVolumeClaim)}\n      </dd>\n      <dt>{t('console-app~Namespace')}</dt>\n      <dd>\n        <ResourceIcon kind={NamespaceModel.kind} />\n        {getNamespace(persistentVolumeClaim)}\n      </dd>\n      <dt>{t('console-app~Status')}</dt>\n      <dd>\n        <PVCStatus pvc={persistentVolumeClaim} />\n      </dd>\n      <dt>{t('console-app~StorageClass')}</dt>\n      <dd>\n        <ResourceIcon kind={StorageClassModel.kind} />\n        {storageClass}\n      </dd>\n      <dt>{t('console-app~Requested capacity')}</dt>\n      <dd>{sizeMetrics}</dd>\n      <dt>{t('console-app~Access mode')}</dt>\n      <dd>{accessModes.title}</dd>\n      <dt>{t('console-app~Volume mode')}</dt>\n      <dd>{volumeMode}</dd>\n    </dl>\n  );\n};\n\nconst defaultSnapshotClassAnnotation: string = 'snapshot.storage.kubernetes.io/is-default-class';\nconst isDefaultSnapshotClass = (volumeSnapshotClass: VolumeSnapshotClassKind) =>\n  getAnnotations(volumeSnapshotClass, { defaultSnapshotClassAnnotation: 'false' })[\n    defaultSnapshotClassAnnotation\n  ] === 'true';\n\nconst CreateSnapshotForm = withHandlePromise<SnapshotResourceProps>((props) => {\n  const { namespace, pvcName, handlePromise, inProgress, errorMessage } = props;\n\n  const { t } = useTranslation();\n  const [selectedPVCName, setSelectedPVCName] = React.useState(pvcName);\n  const [pvcObj, setPVCObj] = React.useState<PersistentVolumeClaimKind>(null);\n  const [snapshotName, setSnapshotName] = React.useState(`${pvcName || 'pvc'}-snapshot`);\n  const [snapshotClassName, setSnapshotClassName] = React.useState('');\n  const [vscObj, , vscErr] = useK8sGet<ListKind<VolumeSnapshotClassKind>>(VolumeSnapshotClassModel);\n  const [scObjList, scObjListLoaded, scObjListErr] = useK8sGet<ListKind<StorageClassResourceKind>>(\n    StorageClassModel,\n  );\n  const title = t('console-app~Create VolumeSnapshot');\n  const resourceWatch = React.useMemo(() => {\n    return Object.assign(\n      {\n        kind: PersistentVolumeClaimModel.kind,\n        namespace,\n        isList: true,\n      },\n      selectedPVCName ? { name: selectedPVCName } : null,\n    );\n  }, [namespace, selectedPVCName]);\n\n  const [data, loaded, loadError] = useK8sWatchResource<PersistentVolumeClaimKind[]>(resourceWatch);\n  const scList = scObjListLoaded ? scObjList.items : [];\n  const provisioner = scList.find((sc) => sc.metadata.name === pvcObj?.spec?.storageClassName)\n    ?.provisioner;\n  const snapshotClassFilter = React.useCallback(\n    (snapshotClass: VolumeSnapshotClassKind) => provisioner?.includes(snapshotClass?.driver),\n    [provisioner],\n  );\n  const vscList = React.useMemo(() => vscObj?.items || [], [vscObj]);\n  const getDefaultItem = React.useCallback(\n    (snapFilter) => {\n      const filteredVSC = vscList.filter(snapFilter);\n      const defaultFilteredVSC = filteredVSC.filter(isDefaultSnapshotClass);\n      const defaultItem = getName(defaultFilteredVSC?.[0]) || getName(filteredVSC?.[0]);\n\n      return defaultItem;\n    },\n    [vscList],\n  );\n\n  React.useEffect(() => {\n    const currentPVC = data.find((pvc) => pvc.metadata.name === selectedPVCName);\n    setPVCObj(currentPVC);\n    setSnapshotClassName(getDefaultItem(snapshotClassFilter));\n  }, [data, selectedPVCName, namespace, loadError, snapshotClassFilter, getDefaultItem]);\n\n  const handleSnapshotName: React.ReactEventHandler<HTMLInputElement> = (event) =>\n    setSnapshotName(event.currentTarget.value);\n\n  const handlePVCName = (name: string) => {\n    const currentPVC = data.find((pvc) => pvc.metadata.name === name);\n    setPVCObj(currentPVC);\n    setSnapshotName(`${name}-snapshot`);\n    setSelectedPVCName(name);\n  };\n\n  const create = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    const snapshotTemplate: VolumeSnapshotKind = {\n      apiVersion: apiVersionForModel(VolumeSnapshotModel),\n      kind: VolumeSnapshotModel.kind,\n      metadata: {\n        name: snapshotName,\n        namespace: getNamespace(pvcObj),\n        annotations: {\n          [snapshotPVCAccessModeAnnotation]: pvcObj.spec.accessModes.join(','),\n          [snapshotPVCStorageClassAnnotation]: pvcObj.spec.storageClassName,\n          [snapshotPVCVolumeModeAnnotation]: pvcObj.spec.volumeMode,\n        },\n      },\n      spec: {\n        volumeSnapshotClassName: snapshotClassName,\n        source: {\n          persistentVolumeClaimName: selectedPVCName,\n        },\n      },\n    };\n\n    handlePromise(k8sCreate(VolumeSnapshotModel, snapshotTemplate), (resource) => {\n      history.push(resourceObjPath(resource, referenceFor(resource)));\n    });\n  };\n\n  const isBound = (pvc: PersistentVolumeClaimKind) => pvc?.status?.phase === 'Bound';\n\n  return (\n    <div className=\"co-volume-snapshot__body\">\n      <div className=\"co-m-pane__form\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <PageHeading\n          title={<div className=\"co-m-pane__name\">{title}</div>}\n          link={\n            <Link\n              to={`/k8s/ns/${namespace || 'default'}/${referenceForModel(\n                VolumeSnapshotModel,\n              )}/~new`}\n              id=\"yaml-link\"\n              data-test=\"yaml-link\"\n              replace\n            >\n              {t('console-app~Edit YAML')}\n            </Link>\n          }\n        />\n        <div className=\"co-m-pane__body co-m-pane__body--no-top-margin\">\n          <form className=\"co-m-pane__body-group\" onSubmit={create}>\n            {pvcName ? (\n              <p>\n                <Trans ns=\"console-app\">\n                  Creating snapshot for claim <strong>{{ pvcName }}</strong>\n                </Trans>\n              </p>\n            ) : (\n              /* eslint-disable jsx-a11y/label-has-associated-control */\n              <>\n                <label className=\"control-label co-required\" html-for=\"claimName\">\n                  {t('console-app~PersistentVolumeClaim')}\n                </label>\n                <PVCDropdown\n                  dataTest=\"pvc-dropdown\"\n                  namespace={namespace}\n                  onChange={handlePVCName}\n                  selectedKey={selectedPVCName}\n                  dataFilter={isBound}\n                  desc={t('console-app~PersistentVolumeClaim in {{namespace}} namespace', {\n                    namespace,\n                  })}\n                />\n              </>\n            )}\n            <div className=\"form-group co-volume-snapshot__form\">\n              <label className=\"control-label co-required\" htmlFor=\"snapshot-name\">\n                {t('console-app~Name')}\n              </label>\n              <input\n                className=\"pf-v5-c-form-control\"\n                type=\"text\"\n                onChange={handleSnapshotName}\n                name=\"snapshotName\"\n                id=\"snapshot-name\"\n                value={snapshotName}\n                required\n              />\n            </div>\n            {pvcObj && (\n              <div className=\"form-group co-volume-snapshot__form\">\n                <label className=\"control-label co-required\" htmlFor=\"snapshot-class\">\n                  {t('console-app~Snapshot Class')}\n                </label>\n                {vscErr || scObjListErr ? (\n                  <Alert\n                    className=\"co-alert co-volume-snapshot__alert-body\"\n                    variant=\"danger\"\n                    title=\"Error fetching info on claim's provisioner\"\n                    isInline\n                  />\n                ) : (\n                  <SnapshotClassDropdown\n                    filter={snapshotClassFilter}\n                    onChange={setSnapshotClassName}\n                    dataTest=\"snapshot-dropdown\"\n                    selectedKey={snapshotClassName}\n                  />\n                )}\n              </div>\n            )}\n            <ButtonBar errorMessage={errorMessage || loadError} inProgress={inProgress}>\n              <ActionGroup className=\"pf-v5-c-form\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  id=\"save-changes\"\n                  isDisabled={!snapshotClassName || !snapshotName || !selectedPVCName}\n                >\n                  {t('console-app~Create')}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                  {t('console-app~Cancel')}\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n        </div>\n      </div>\n      <div className=\"co-volume-snapshot__info\">\n        <Grid hasGutter>\n          <GridItem span={1} />\n          <GridItem span={10}>\n            {selectedPVCName && pvcObj && loaded && <PVCSummary persistentVolumeClaim={pvcObj} />}\n            {!loaded && <LoadingComponent />}\n          </GridItem>\n          <GridItem span={1} />\n        </Grid>\n      </div>\n    </div>\n  );\n});\n\nexport const VolumeSnapshot: React.FC = () => {\n  const params = useParams();\n  const { pvc } = getURLSearchParams();\n  return <CreateSnapshotForm namespace={params.ns} pvcName={pvc} />;\n};\n\ntype SnapshotClassDropdownProps = {\n  selectedKey: string;\n  filter: (obj) => boolean;\n  onChange: (string) => void;\n  id?: string;\n  dataTest?: string;\n};\n\ntype SnapshotResourceProps = HandlePromiseProps & {\n  namespace: string;\n  pvcName?: string;\n};\n\ntype PVCSummaryProps = {\n  persistentVolumeClaim: PersistentVolumeClaimKind;\n};\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n","import i18next from 'i18next';\nimport * as _ from 'lodash';\n\nexport const cephRBDProvisionerSuffix = 'rbd.csi.ceph.com';\n\nexport const snapshotPVCStorageClassAnnotation = 'snapshot.storage.kubernetes.io/pvc-storage-class';\nexport const snapshotPVCAccessModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-access-modes';\nexport const snapshotPVCVolumeModeAnnotation = 'snapshot.storage.kubernetes.io/pvc-volume-mode';\n\ntype AccessMode = 'ReadWriteOnce' | 'ReadWriteMany' | 'ReadOnlyMany' | 'ReadWriteOncePod';\ntype VolumeMode = 'Filesystem' | 'Block';\n\nexport const initialAccessModes: AccessMode[] = [\n  'ReadWriteOnce',\n  'ReadWriteMany',\n  'ReadOnlyMany',\n  'ReadWriteOncePod',\n];\nexport const initialVolumeModes: VolumeMode[] = ['Filesystem', 'Block'];\n\ntype PartialMatch = { partialMatch?: boolean };\ntype ModeMapping = {\n  [volumeMode in VolumeMode]?: AccessMode[];\n};\ntype AccessModeMapping = ModeMapping & PartialMatch;\n\ntype ProvisionerAccessModeMapping = {\n  [provisioner: string]: AccessModeMapping;\n};\n\n// See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes and\n// https://docs.openshift.com/container-platform/4.15/storage/understanding-persistent-storage.html for more details\nexport const provisionerAccessModeMapping: ProvisionerAccessModeMapping = Object.freeze({\n  'kubernetes.io/no-provisioner': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/aws-ebs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/gce-pd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/glusterfs': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/cinder': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-file': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n  'kubernetes.io/azure-disk': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'kubernetes.io/quobyte': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/rbd': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/vsphere-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/portworx-volume': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'kubernetes.io/scaleio': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadOnlyMany'],\n  },\n  'kubernetes.io/storageos': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  // Since 4.6 new provisioners names will be without the 'kubernetes.io/' prefix.\n  'manila.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  },\n  'ebs.csi.aws.com': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'block.csi.ibm.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany'],\n  },\n  'csi.ovirt.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'cinder.csi.openstack.org': {\n    Filesystem: ['ReadWriteOnce'],\n    Block: ['ReadWriteOnce'],\n  },\n  'pd.csi.storage.gke.io': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteOncePod'],\n  },\n  'cephfs.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'rbd.csi.ceph.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    partialMatch: true,\n  },\n  'file.csi.azure.com': {\n    Filesystem: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n    Block: ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany', 'ReadWriteOncePod'],\n  },\n});\n\nexport const getAccessModeOptions = () => [\n  {\n    value: 'ReadWriteOnce',\n    title: i18next.t('public~Single user (RWO)'),\n  },\n  {\n    value: 'ReadWriteMany',\n    title: i18next.t('public~Shared access (RWX)'),\n  },\n  {\n    value: 'ReadOnlyMany',\n    title: i18next.t('public~Read only (ROX)'),\n  },\n  {\n    value: 'ReadWriteOncePod',\n    title: i18next.t('public~Read write once pod (RWOP)'),\n  },\n];\n\nexport const getVolumeModeRadios = () => [\n  {\n    value: 'Filesystem',\n    title: i18next.t('public~Filesystem'),\n  },\n  {\n    value: 'Block',\n    title: i18next.t('public~Block'),\n  },\n];\n\nexport const dropdownUnits = {\n  i: 'B',\n  Ki: 'KiB',\n  Mi: 'MiB',\n  Gi: 'GiB',\n  Ti: 'TiB',\n  Pi: 'PiB',\n  Ei: 'EiB',\n};\n\nexport const getProvisionerModeMapping = (provisioner: string): ModeMapping =>\n  _.omit(\n    _.find(provisionerAccessModeMapping, (value: AccessModeMapping, key: string) => {\n      if (value?.partialMatch && provisioner?.includes(key)) {\n        return true;\n      }\n      if (key === provisioner) {\n        return true;\n      }\n      return false;\n    }) || {},\n    'partialMatch',\n  );\n\nexport const getAccessModeForProvisioner = (\n  provisioner: string,\n  ignoreReadOnly?: boolean,\n  volumeMode?: string,\n): AccessMode[] => {\n  let accessModes: AccessMode[];\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    accessModes = volumeMode\n      ? modeMapping[volumeMode]\n      : Object.keys(modeMapping)\n          .map((mode) => modeMapping[mode])\n          .flat();\n  } else {\n    accessModes = initialAccessModes;\n  }\n\n  // remove duplicate in accessModes\n  accessModes = [...new Set(accessModes)];\n\n  // Ignore ReadOnly related access for create-pvc\n  return ignoreReadOnly ? accessModes.filter((modes) => modes !== 'ReadOnlyMany') : accessModes;\n};\n\nexport const getVolumeModeForProvisioner = (\n  provisioner: string,\n  accessMode: string,\n): VolumeMode[] => {\n  const modeMapping: ModeMapping = getProvisionerModeMapping(provisioner);\n\n  if (!_.isEmpty(modeMapping)) {\n    return accessMode\n      ? (Object.keys(modeMapping).filter((volumeMode) =>\n          modeMapping[volumeMode].includes(accessMode),\n        ) as VolumeMode[])\n      : (Object.keys(modeMapping) as VolumeMode[]);\n  }\n  return initialVolumeModes;\n};\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { HandlePromiseProps, withHandlePromise, resourceListPathFromModel } from '../utils';\nimport { getName, YellowExclamationTriangleIcon } from '@console/shared';\nimport { useResolvedExtensions } from '@console/dynamic-plugin-sdk/src/api/useResolvedExtensions';\nimport { isPVCDelete, PVCDelete } from '@console/dynamic-plugin-sdk/src/extensions/pvc';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  ModalComponentProps,\n} from '../factory';\nimport { k8sKill, PersistentVolumeClaimKind } from '@console/internal/module/k8s';\nimport { PersistentVolumeClaimModel } from '../../models';\n\nconst DeletePVCModal = withHandlePromise<DeletePVCModalProps>((props) => {\n  const { pvc, inProgress, errorMessage, handlePromise, close, cancel } = props;\n  const [pvcDeleteExtensions] = useResolvedExtensions<PVCDelete>(isPVCDelete);\n  const pvcName = getName(pvc);\n  const { t } = useTranslation();\n  const pvcMetadata = { metadata: { ...pvc?.metadata } };\n  const navigate = useNavigate();\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    const promise = k8sKill(PersistentVolumeClaimModel, pvc);\n    const extensionPromises = pvcDeleteExtensions.map(\n      ({ properties: { predicate, onPVCKill } }) =>\n        predicate(pvcMetadata) && onPVCKill(pvcMetadata),\n    );\n\n    handlePromise(Promise.all([promise, ...extensionPromises]), () => {\n      close();\n      // Redirect to resourcce list page if the resouce is deleted.\n      navigate(resourceListPathFromModel(PersistentVolumeClaimModel, pvc.metadata.namespace));\n    });\n  };\n\n  const alertComponents = pvcDeleteExtensions.map(\n    ({ properties: { predicate, alert: PVCAlert }, uid }) =>\n      predicate(pvcMetadata) && (\n        <StackItem key={uid}>\n          <PVCAlert pvc={pvcMetadata} />\n        </StackItem>\n      ),\n  );\n\n  return (\n    <form onSubmit={submit} className=\"modal-content\">\n      <ModalTitle>\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" />{' '}\n        {t('public~Delete PersistentVolumeClaim')}\n      </ModalTitle>\n      <ModalBody>\n        <Stack hasGutter>\n          {alertComponents}\n          <StackItem>\n            <Trans t={t} ns=\"public\">\n              Are you sure you want to delete{' '}\n              <strong className=\"co-break-word\">{{ pvcName }}</strong> PersistentVolumeClaim?\n            </Trans>\n          </StackItem>\n        </Stack>\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={t('public~Delete')}\n        submitDanger\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport type DeletePVCModalProps = {\n  pvc: PersistentVolumeClaimKind;\n} & ModalComponentProps &\n  HandlePromiseProps;\n\nexport default createModalLauncher(DeletePVCModal);\n","import * as React from 'react';\nimport { ListDropdown } from './list-dropdown';\nimport { useTranslation } from 'react-i18next';\n\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { PersistentVolumeClaimKind } from '../../../public/module/k8s/types';\n\nexport const PVCDropdown: React.FC<PVCDropdownProps> = (props) => {\n  const kind = PersistentVolumeClaimModel.kind;\n  const { namespace, selectedKey, desc } = props;\n  const resources = [{ kind, namespace }];\n  const { t } = useTranslation();\n  return (\n    <ListDropdown\n      {...props}\n      desc={desc}\n      resources={resources}\n      selectedKeyKind={kind}\n      placeholder={t('public~Select claim')}\n      selectedKey={selectedKey}\n    />\n  );\n};\n\nexport type PVCDropdownProps = {\n  namespace: string;\n  selectedKey: string;\n  onChange: (claimName: string, kindLabel?: string, pvc?: PersistentVolumeClaimKind) => void;\n  id?: string;\n  desc?: string;\n  dataTest?: string;\n  dataFilter?: (pvc: PersistentVolumeClaimKind) => boolean;\n};\n"],"sourceRoot":""}