{"version":3,"sources":["webpack:///./public/components/cluster-settings/gitlab-idp-form.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/idp-cafile-input.tsx"],"names":["AddGitLabPage","navigate","inProgress","setInProgress","errorMessage","setErrorMessage","name","setName","clientID","setClientID","clientSecret","setClientSecret","url","setUrl","caFileContent","setCaFileContent","t","handlePromise","promise","then","res","thenPromise","error","err","message","Promise","reject","catchError","createClientSecret","secret","apiVersion","kind","metadata","generateName","namespace","stringData","createCAConfigMap","resolve","ca","data","addGitLabIDP","oauth","clientSecretName","caName","dryRun","idp","type","mappingMethod","gitlab","title","className","helpText","onSubmit","e","preventDefault","mockCA","promises","all","configMap","catch","value","onChange","currentTarget","htmlFor","id","required","c","variant","onClick","getOAuthResource","addIDP","patch","spec","identityProviders","op","path","queryParams","redirectToOAuthPage","mockNames","IDPNameInput","DroppableFileInput","props","loader","IDPCAFileInput","isRequired","inputFileData","label","hideContents"],"mappings":"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","file":"gitlab-idp-form-chunk-f059e966f0de1b560021.min.js","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom-v5-compat';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel, ConfigMapModel } from '../../models';\nimport { IdentityProvider, k8sCreate, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, PageHeading } from '../utils';\nimport { addIDP, getOAuthResource as getOAuth, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport const AddGitLabPage = () => {\n  const navigate = useNavigate();\n  const [inProgress, setInProgress] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [name, setName] = React.useState('gitlab');\n  const [clientID, setClientID] = React.useState('');\n  const [clientSecret, setClientSecret] = React.useState('');\n  const [url, setUrl] = React.useState('');\n  const [caFileContent, setCaFileContent] = React.useState('');\n\n  const { t } = useTranslation();\n\n  const thenPromise = (res) => {\n    setInProgress(false);\n    setErrorMessage('');\n    return res;\n  };\n\n  const catchError = (error) => {\n    const err = error.message || t('public~An error occurred. Please try again.');\n    setInProgress(false);\n    setErrorMessage(err);\n    return Promise.reject(err);\n  };\n\n  const handlePromise = (promise) => {\n    setInProgress(true);\n\n    return promise.then(\n      (res) => thenPromise(res),\n      (error) => catchError(error),\n    );\n  };\n\n  const getOAuthResource = () => {\n    return handlePromise(getOAuth());\n  };\n\n  const createClientSecret = () => {\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'gitlab-client-secret-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        clientSecret,\n      },\n    };\n\n    return handlePromise(k8sCreate(SecretModel, secret));\n  };\n\n  const createCAConfigMap = () => {\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'gitlab-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return handlePromise(k8sCreate(ConfigMapModel, ca));\n  };\n\n  const addGitLabIDP = (\n    oauth: OAuthKind,\n    clientSecretName: string,\n    caName: string,\n    dryRun?: boolean,\n  ) => {\n    const idp: IdentityProvider = {\n      name,\n      type: 'GitLab',\n      mappingMethod: 'claim',\n      gitlab: {\n        url,\n        clientID,\n        clientSecret: {\n          name: clientSecretName,\n        },\n      },\n    };\n\n    if (caName) {\n      idp.gitlab.ca = {\n        name: caName,\n      };\n    }\n\n    return handlePromise(addIDP(oauth, idp, dryRun));\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    // Clear any previous errors.\n    setErrorMessage('');\n    getOAuthResource().then((oauth: OAuthKind) => {\n      const mockCA = caFileContent ? mockNames.ca : '';\n      addGitLabIDP(oauth, mockNames.secret, mockCA, true)\n        .then(() => {\n          const promises = [createClientSecret(), createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([secret, configMap]) => {\n              const caName = configMap ? configMap.metadata.name : '';\n              return addGitLabIDP(oauth, secret.metadata.name, caName);\n            })\n            .then(() => {\n              redirectToOAuthPage(navigate);\n            });\n        })\n        .catch((err) => {\n          setErrorMessage(err);\n        });\n    });\n  };\n\n  const title = t('public~Add Identity Provider: GitLab');\n\n  return (\n    <div className=\"co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading\n        title={title}\n        helpText={t(\n          'public~You can use GitLab integration for users authenticating with GitLab credentials.',\n        )}\n      />\n      <div className=\"co-m-pane__body\">\n        <form onSubmit={submit} name=\"form\" className=\"co-m-pane__body-group\">\n          <IDPNameInput value={name} onChange={(e) => setName(e.currentTarget.value)} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"url\">\n              {t('public~URL')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"url\"\n              onChange={(e) => setUrl(e.currentTarget.value)}\n              value={url}\n              id=\"url\"\n              aria-describedby=\"idp-url-help\"\n              required\n            />\n            <p className=\"help-block\" id=\"idp-url-help\">\n              {t('public~The OAuth server base URL.')}\n            </p>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-id\">\n              {t('public~Client ID')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"text\"\n              onChange={(e) => setClientID(e.currentTarget.value)}\n              value={clientID}\n              id=\"client-id\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"client-secret\">\n              {t('public~Client secret')}\n            </label>\n            <input\n              className=\"pf-v5-c-form-control\"\n              type=\"password\"\n              onChange={(e) => setClientSecret(e.currentTarget.value)}\n              value={clientSecret}\n              id=\"client-secret\"\n              required\n            />\n          </div>\n          <IDPCAFileInput value={caFileContent} onChange={(c: string) => setCaFileContent(c)} />\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-v5-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                {t('public~Add')}\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={() => navigate(-1)}>\n                {t('public~Cancel')}\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport type AddGitLabPageState = {\n  name: string;\n  url: string;\n  clientID: string;\n  clientSecret: string;\n  caFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { resourcePathFromModel } from '../utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? { queryParams: { dryRun: 'All' } } : {});\n};\n\nexport const redirectToOAuthPage = (navigate) => {\n  const path = `${resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME)}?idpAdded=true`;\n  navigate(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n        {t('public~Name')}\n      </label>\n      <input\n        className=\"pf-v5-c-form-control\"\n        type=\"text\"\n        onChange={onChange}\n        value={value}\n        aria-describedby=\"idp-name-help\"\n        id=\"idp-name\"\n        required\n      />\n      <p className=\"help-block\" id=\"idp-name-help\">\n        {t('public~Unique name of the new identity provider. This cannot be changed later.')}\n      </p>\n    </div>\n  );\n};\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"form-group\">\n      <DroppableFileInput\n        onChange={onChange}\n        inputFileData={value}\n        id=\"idp-file-input\"\n        label={t('public~CA file')}\n        isRequired={isRequired}\n        hideContents\n      />\n    </div>\n  );\n};\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n"],"sourceRoot":""}